void sub_1BE216570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2165FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE216BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE217760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE217A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE217DC8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);

  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1BE218AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void PKFunctionPiecewiseBezier::solve(PKFunctionPiecewiseBezier *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  double v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double *v26;
  unint64_t v27;
  double *v28;
  void **v29;
  double *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  float v52;
  double v53;
  uint64_t v54;
  double *v55;
  uint64_t v56;
  double *v57;
  unint64_t v58;
  double *v59;
  void **v60;
  double *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  PKFunctionPiecewiseBezier *v72;

  v2 = (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
  v3 = (uint64_t *)((char *)this + 128);
  v4 = v2 - 1;
  if (v2)
    v5 = v2 - 1;
  else
    v5 = 0;
  std::vector<std::vector<double>>::resize((uint64_t *)this + 16, v5);
  v72 = this;
  v6 = (uint64_t *)((char *)this + 152);
  std::vector<std::vector<double>>::resize((uint64_t *)this + 19, v5);
  v71 = v4;
  if (v4)
  {
    v7 = 0;
    do
    {
      v8 = objc_alloc(MEMORY[0x1E0CD27D0]);
      v9 = *((_QWORD *)v72 + 13) + 32 * v7;
      v10 = *(double *)v9;
      v11 = *(double *)(v9 + 8);
      *(float *)&v10 = *(double *)v9;
      *(float *)&v11 = v11;
      v12 = *(double *)(v9 + 16);
      v13 = *(double *)(v9 + 24);
      *(float *)&v12 = v12;
      *(float *)&v13 = v13;
      v14 = (void *)objc_msgSend(v8, "initWithControlPoints::::", v10, v11, v12, v13);
      v15 = 0;
      v16 = *((_QWORD *)v72 + 1);
      v17 = *(double *)(v16 + 8 * v7);
      v69 = v7 + 1;
      v18 = *(double *)(v16 + 8 * (v7 + 1));
      v19 = v18 - v17;
      do
      {
        v20 = *v3;
        *(float *)&v18 = (float)v15 / 10.0;
        objc_msgSend(v14, "_solveForInput:", v18);
        v18 = v21;
        v22 = v17 + v19 * v18;
        v23 = v20 + 24 * v7;
        v26 = *(double **)(v23 + 8);
        v25 = v23 + 8;
        v24 = v26;
        v27 = *(_QWORD *)(v25 + 8);
        if ((unint64_t)v26 >= v27)
        {
          v29 = (void **)(v20 + 24 * v7);
          v30 = (double *)*v29;
          v31 = ((char *)v24 - (_BYTE *)*v29) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v33 = v27 - (_QWORD)v30;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v25 + 8, v34);
            v24 = *(double **)v25;
            v30 = (double *)*v29;
          }
          else
          {
            v35 = 0;
          }
          v36 = (double *)&v35[8 * v31];
          *v36 = v22;
          v28 = v36 + 1;
          while (v24 != v30)
          {
            v37 = *((_QWORD *)v24-- - 1);
            HIDWORD(v18) = HIDWORD(v37);
            *((_QWORD *)v36-- - 1) = v37;
          }
          *v29 = v36;
          *(_QWORD *)v25 = v28;
          *(_QWORD *)(v25 + 8) = &v35[8 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v24 = v22;
          v28 = v24 + 1;
        }
        *(_QWORD *)v25 = v28;
        ++v15;
      }
      while (v15 != 11);

      ++v7;
    }
    while (v69 != v71);
    v38 = 0;
    do
    {
      v39 = objc_alloc(MEMORY[0x1E0CD27D0]);
      v40 = *((_QWORD *)v72 + 13) + 32 * v38;
      v41 = *(double *)v40;
      v42 = *(double *)(v40 + 8);
      *(float *)&v41 = *(double *)v40;
      *(float *)&v42 = v42;
      v43 = *(double *)(v40 + 16);
      v44 = *(double *)(v40 + 24);
      *(float *)&v43 = v43;
      *(float *)&v44 = v44;
      v45 = (void *)objc_msgSend(v39, "initWithControlPoints::::", v41, v42, v43, v44);
      v46 = 0;
      v47 = *((_QWORD *)v72 + 4);
      v48 = *(double *)(v47 + 8 * v38);
      v70 = v38 + 1;
      v49 = *(double *)(v47 + 8 * (v38 + 1));
      v50 = v49 - v48;
      do
      {
        v51 = *v6;
        *(float *)&v49 = (float)v46 / 10.0;
        objc_msgSend(v45, "_solveForInput:", v49);
        v49 = v52;
        v53 = v48 + v50 * v49;
        v54 = v51 + 24 * v38;
        v57 = *(double **)(v54 + 8);
        v56 = v54 + 8;
        v55 = v57;
        v58 = *(_QWORD *)(v56 + 8);
        if ((unint64_t)v57 >= v58)
        {
          v60 = (void **)(v51 + 24 * v38);
          v61 = (double *)*v60;
          v62 = ((char *)v55 - (_BYTE *)*v60) >> 3;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v64 = v58 - (_QWORD)v61;
          if (v64 >> 2 > v63)
            v63 = v64 >> 2;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
          {
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v56 + 8, v65);
            v55 = *(double **)v56;
            v61 = (double *)*v60;
          }
          else
          {
            v66 = 0;
          }
          v67 = (double *)&v66[8 * v62];
          *v67 = v53;
          v59 = v67 + 1;
          while (v55 != v61)
          {
            v68 = *((_QWORD *)v55-- - 1);
            HIDWORD(v49) = HIDWORD(v68);
            *((_QWORD *)v67-- - 1) = v68;
          }
          *v60 = v67;
          *(_QWORD *)v56 = v59;
          *(_QWORD *)(v56 + 8) = &v66[8 * v65];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *v55 = v53;
          v59 = v55 + 1;
        }
        *(_QWORD *)v56 = v59;
        ++v46;
      }
      while (v46 != 11);

      ++v38;
    }
    while (v70 != v71);
  }
}

void sub_1BE2191A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PKOutputFunction::PKOutputFunction(PKOutputFunction *this, const PKOutputFunction *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

void sub_1BE21922C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t PKFunctionPiecewiseBezier::clone(PKFunctionPiecewiseBezier *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)v2 = &unk_1E77743F0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_QWORD *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  PKFunctionPiecewiseBezier::operator=((char *)v2, (uint64_t)this);
  return v2;
}

char *PKFunctionPiecewiseBezier::operator=(char *a1, uint64_t a2)
{
  if (a1 != (char *)a2)
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 8, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 32, *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 56, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 80, *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 104, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>((uint64_t)(a1 + 128), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
    std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>((uint64_t)(a1 + 152), *(_QWORD *)(a2 + 152), *(_QWORD *)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3));
  }
  return a1;
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void PKFunctionPiecewiseBezier::~PKFunctionPiecewiseBezier(PKFunctionPiecewiseBezier *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &unk_1E77743F0;
  v5 = (void **)((char *)this + 152);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 128);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  PKFunction::~PKFunction((PKFunction *)this);
  MEMORY[0x1C3B7F770]();
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &unk_1E77743F0;
  v5 = (void **)((char *)this + 152);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 128);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  PKFunction::~PKFunction((PKFunction *)this);
}

void PKFunction::~PKFunction(PKFunction *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E7773A30;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  PKFunction::~PKFunction(this);
  JUMPOUT(0x1C3B7F770);
}

void sub_1BE219594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE219658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE219834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void ___ZL41PKAlwaysKeepPredictedTouchesAtEndOfStrokev_block_invoke()
{
  void *v0;
  int v1;

  _MergedGlobals_158 = 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("internalSettings.drawing.keepPredictedTouchesAtEndOfStroke"));

  if (v1)
    _MergedGlobals_158 = 1;
}

void sub_1BE2198C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Class ___ZL18PDFScrollViewClassv_block_invoke()
{
  Class result;

  result = NSClassFromString(CFSTR("PDFScrollView"));
  qword_1EF55D0D0 = (uint64_t)result;
  return result;
}

void sub_1BE219AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE21A1C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE21A28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE21A374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE21A644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE21A744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE21A838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<std::vector<double>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BE21A9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<double>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<double>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<PKOutputFunction>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>>((uint64_t)(a1 + 2), a1[1], (const PKOutputFunction *)a1[1], *a1, (const PKOutputFunction *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<PKOutputFunction>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  uint64_t v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        *((_QWORD *)v3 - 1) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v3 -= 40;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double std::normal_distribution<double>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, unsigned int *a2, double *a3)
{
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v5 = *(double *)(a1 + 16);
  }
  else
  {
    do
    {
      do
      {
        v7 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
           * 2.0
           + -1.0;
        v8 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
           * 2.0
           + -1.0;
        v9 = v8 * v8 + v7 * v7;
      }
      while (v9 > 1.0);
    }
    while (v9 == 0.0);
    v10 = sqrt(log(v8 * v8 + v7 * v7) * -2.0 / v9);
    *(double *)(a1 + 16) = v8 * v10;
    *(_BYTE *)(a1 + 24) = 1;
    v5 = v7 * v10;
  }
  return *a3 + v5 * a3[1];
}

uint64_t std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<PKOutputFunction>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t PKWideGamutPixelFormatForCurrentDevice(void)
{
  void *v0;
  int v1;

  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v0, "userInterfaceIdiom") == 1)
  {
    if (qword_1ECEE6438 != -1)
      dispatch_once(&qword_1ECEE6438, &__block_literal_global_186);
    v1 = _MergedGlobals_148;

    if (v1)
      return 550;
    else
      return 552;
  }
  else
  {

    return 550;
  }
}

void sub_1BE21ADC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _PencilKitBundle()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)_PencilKitBundle_kitBundle;
  if (!_PencilKitBundle_kitBundle)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)_PencilKitBundle_kitBundle;
    _PencilKitBundle_kitBundle = v1;

    v0 = (void *)_PencilKitBundle_kitBundle;
  }
  return v0;
}

double PKMaxHoverHeight()
{
  uint64_t v0;
  uint64_t v1;
  __IOHIDEventSystemClient *v2;
  void *v3;
  const __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  _QWORD v17[2];
  _QWORD v18[4];

  v18[2] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&hover_height_lock);
  v0 = PKMaxHoverHeight_sMaxHoverHeight;
  if (*(double *)&PKMaxHoverHeight_sMaxHoverHeight < 0.0)
  {
    v1 = IOHIDEventSystemClientCreateWithType();
    if (v1)
    {
      v2 = (__IOHIDEventSystemClient *)v1;
      v17[0] = CFSTR("PrimaryUsagePage");
      v17[1] = CFSTR("PrimaryUsage");
      v18[0] = &unk_1E77EBF58;
      v18[1] = &unk_1E77EBF70;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      IOHIDEventSystemClientSetMatching();
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v4 = IOHIDEventSystemClientCopyServices(v2);
      v5 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v0 = 0;
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v13;
        while (2)
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v13 != v7)
              objc_enumerationMutation(v4);
            v9 = (void *)IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(*((_QWORD *)&v12 + 1) + 8 * i), CFSTR("MaxHoverHeight"));
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v9, "doubleValue", (_QWORD)v12);
              v0 = v10;

              goto LABEL_13;
            }

          }
          v6 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v6)
            continue;
          break;
        }
      }
LABEL_13:

      CFRelease(v2);
    }
    else
    {
      v0 = 0;
    }
    PKMaxHoverHeight_sMaxHoverHeight = v0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&hover_height_lock);
  return *(double *)&v0;
}

BOOL PKIsVisionDevice()
{
  void *v0;
  _BOOL8 v1;

  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom") == 6;

  return v1;
}

uint64_t PKIsSixChannelBlendEnabledInPaper()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("internalSettings.drawing.disableSixChannelBlendInPaper")) ^ 1;

  return v1;
}

uint64_t PKIsInlineDrawingOrPaperAttachment(void *a1)
{
  id v1;
  void *v2;
  char v3;
  void *v4;
  int v5;
  char v6;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_5;
  objc_msgSend(v1, "fileType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.drawing"));

  if ((v3 & 1) != 0
    || (objc_msgSend(v1, "fileType"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("com.apple.paper")),
        v4,
        v5))
  {
    v6 = objc_opt_respondsToSelector();
  }
  else
  {
LABEL_5:
    v6 = 0;
  }

  return v6 & 1;
}

uint64_t PKHashBytes(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  if (a2 < 4)
  {
    v2 = 0;
    v5 = a2;
  }
  else
  {
    v2 = 0;
    v3 = a2 + 4;
    v4 = (unsigned __int8 *)(a1 + 3);
    v5 = a2;
    do
    {
      v6 = *(v4 - 3) + 16 * v2;
      v7 = *(v4 - 2) + 16 * (v6 ^ (16 * (v6 >> 28)));
      v8 = *(v4 - 1) + 16 * (v7 ^ (16 * (v7 >> 28)));
      v9 = *v4;
      v4 += 4;
      v10 = v9 + 16 * (v8 ^ (16 * (v8 >> 28)));
      v2 = (v10 ^ ((v10 & 0xF0000000) >> 24)) & ~(v10 & 0xF0000000);
      v3 -= 4;
      v5 -= 4;
    }
    while (v3 > 7);
  }
  v11 = a1 + a2;
  switch(v5)
  {
    case 1:
      goto LABEL_11;
    case 2:
LABEL_10:
      v13 = *(unsigned __int8 *)(v11 - 2) + 16 * v2;
      v2 = (v13 ^ ((v13 & 0xF0000000) >> 24)) & ~(v13 & 0xF0000000);
LABEL_11:
      v14 = *(unsigned __int8 *)(v11 - 1) + 16 * v2;
      return (v14 ^ ((v14 & 0xF0000000) >> 24)) & ~(v14 & 0xF0000000);
    case 3:
      v12 = *(unsigned __int8 *)(v11 - 3) + 16 * v2;
      v2 = (v12 ^ ((v12 & 0xF0000000) >> 24)) & ~(v12 & 0xF0000000);
      goto LABEL_10;
  }
  return v2;
}

id PKDynamicCast(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  if (v2 && (objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

id PKCheckedDynamicCast(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v8;
  int v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  PKDynamicCast(a1, v3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v3 && !v4)
  {
    v6 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412546;
      v10 = (id)objc_opt_class();
      v11 = 2112;
      v12 = a1;
      v8 = v10;
      _os_log_error_impl(&dword_1BE213000, v6, OS_LOG_TYPE_ERROR, "Unexpected object type in checked dynamic cast %@ expects %@", (uint8_t *)&v9, 0x16u);

    }
  }

  return v5;
}

_OWORD *DKUColorGetRGBAComponents(CGColor *a1, _OWORD *a2)
{
  CGColor *ConvertedToSRGB;
  CGColorSpace *ColorSpace;
  CGColor *v5;
  const CGFloat *Components;
  __int128 v7;

  if (!a1)
    return 0;
  ConvertedToSRGB = a1;
  ColorSpace = CGColorGetColorSpace(a1);
  if (!ColorSpace)
    return 0;
  if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB)
  {
    v5 = 0;
  }
  else
  {
    ConvertedToSRGB = DKUCGColorCreateConvertedToSRGB((uint64_t)ConvertedToSRGB);
    v5 = ConvertedToSRGB;
  }
  if (CGColorGetNumberOfComponents(ConvertedToSRGB) == 4)
  {
    Components = CGColorGetComponents(ConvertedToSRGB);
    v7 = *((_OWORD *)Components + 1);
    *a2 = *(_OWORD *)Components;
    a2[1] = v7;
    if (!v5)
      return a2;
    goto LABEL_11;
  }
  a2 = 0;
  if (v5)
LABEL_11:
    CGColorRelease(v5);
  return a2;
}

CGColorRef DKUCGColorCreateDeviceRGB(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  if (qword_1ECEE63B8 != -1)
    dispatch_once(&qword_1ECEE63B8, &__block_literal_global_66);
  return CGColorCreate((CGColorSpaceRef)_MergedGlobals_147, components);
}

CGColor *DKUCGColorCreateConvertedToSRGB(uint64_t a1)
{
  CGColor *v1;
  double v3;
  double v4;
  double v5;
  double v6[2];

  v6[1] = *(double *)MEMORY[0x1E0C80C00];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DC3658], "colorWithCGColor:", a1), "getRed:green:blue:alpha:", &v3, &v4, &v5, v6);
  v1 = (CGColor *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", v3, v4, v5, v6[0]), "CGColor");
  CGColorRetain(v1);
  return v1;
}

double DKD_CGAffineTransformDecompose(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  double v16;
  __int128 v17;
  __int128 v18;
  double result;
  CGAffineTransform v20;
  CGAffineTransform v21;

  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  v7 = sqrt(v4 * v4 + *(double *)a1 * *(double *)a1);
  v8 = sqrt(v6 * v6 + v5 * v5);
  v9 = *(double *)a1 * v6 - v5 * v4;
  v10 = -v8;
  v11 = -v7;
  if (*(double *)a1 < v6)
    v10 = v8;
  else
    v11 = v7;
  if (v9 < 0.0)
    v12 = v11;
  else
    v12 = v7;
  if (v9 < 0.0)
    v13 = v10;
  else
    v13 = v8;
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v14;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v21, &v20, 1.0 / v12, 1.0 / v13);
  v15 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  v16 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v17;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformRotate(&v21, &v20, -v16);
  v18 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v13;
  *(double *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 32);
  result = *(double *)(a1 + 40);
  *(double *)(a2 + 64) = result;
  return result;
}

double DKDScaleForTransform(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[3];
  _QWORD v4[10];

  v4[9] = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  DKD_CGAffineTransformDecompose((uint64_t)v3, (uint64_t)v4);
  return *(double *)v4;
}

uint64_t DKDRectIsFinite(double a1, double a2, double a3, double a4)
{
  uint64_t result;
  double v5;
  _BOOL4 v6;
  double v7;
  _BOOL4 v8;

  result = 0;
  if (fabs(a1) != INFINITY && fabs(a2) != INFINITY)
  {
    v5 = fabs(a3);
    v6 = v5 < INFINITY;
    if (v5 > INFINITY)
      v6 = 1;
    v7 = fabs(a4);
    v8 = v7 < INFINITY;
    if (v7 > INFINITY)
      v8 = 1;
    return v6 & v8;
  }
  return result;
}

uint64_t DKDIntersectionOfLines(double *a1, double *a2, double *a3, double *a4, double *a5, char a6, char a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v18;

  v7 = a1[1];
  v8 = a1[2] - *a1;
  v9 = a1[3] - v7;
  v10 = a2[1];
  v11 = a2[2] - *a2;
  v12 = a2[3] - v10;
  v13 = (v9 * (*a2 - *a1) + (v7 - v10) * v8) / (v12 * v8 - v11 * v9);
  *a4 = v13;
  if ((a6 & 1) == 0 && (v13 < 0.0 || v13 > 1.0))
    return 0;
  v15 = (v12 * (*a1 - *a2) + (a2[1] - a1[1]) * v11) / (v9 * v11 - v8 * v12);
  *a3 = v15;
  if ((a7 & 1) == 0 && (v15 < 0.0 || v15 > 1.0))
    return 0;
  v18 = a1[1];
  *a5 = *a1 + v15 * v8;
  a5[1] = v18 + *a3 * v9;
  return 1;
}

void sub_1BE21C130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE21C4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE21C5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE21C680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE21C71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE21C808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21CB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE21CFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE21D0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21D338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE21D51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21D588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE21D5D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21D620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21D6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE21D6F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21DC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1BE21E188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{

  std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100](&a28);
  _Unwind_Resume(a1);
}

void sub_1BE21E260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21E448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21E548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21E5D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21E6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21E7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE21E994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE21ED38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE21F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE21F6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21F730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21F9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE21FBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2204C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE220554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2205C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2206B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE220818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2208CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE22099C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE220F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE221098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2213C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE221630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2217D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2218A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE221C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE221F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2220A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE222184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE22242C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE223D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE223DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE223E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE223EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE22409C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE2242FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2244A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE224548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2245F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE22472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2248E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE224FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE225020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2250A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE22529C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE225370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2254A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE225578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2255D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE225884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE225A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE225FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  _Unwind_Resume(a1);
}

void sub_1BE226424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2264DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2267F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE2268E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2269CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE226CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1BE226F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_1BE227058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE227118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2274B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE227694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE2278B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE22796C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE227B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE227C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE227D78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE227E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE227FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2281BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE228248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE228294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE228318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE228404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE228504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2286D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE228754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PKDrawingConcrete;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE228898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKDrawing;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE2289F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE228D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2292AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2293D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE229470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE22952C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE229B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 40))(a20);

  _Unwind_Resume(a1);
}

void sub_1BE22A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE22A374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE22A51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE22A588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKCustomTool.ParameterError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKCustomTool.ParameterError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PKCustomTool.ParameterError()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKCustomTool.ParameterError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void PKCustomTool.init(customIdentifier:configuration:color:weight:)(void *a1@<X2>, void *a2@<X3>, double a3@<X4>, char a4@<W5>, _QWORD *a5@<X8>)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  double v16;
  id v17;

  v10 = (void *)MEMORY[0x1C3B7E3A8]();
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  objc_opt_self();
  v11 = swift_dynamicCastObjCClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError();
    swift_allocError();
    *v14 = 0;
    swift_willThrow();

    goto LABEL_7;
  }
  v12 = v11;
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_supportsStrokeWeight) & 1) != 0)
  {
    if ((objc_msgSend(a1, sel_supportsStrokeWeight) & 1) == 0 && (a4 & 1) == 0)
    {
      lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError();
      swift_allocError();
      *v13 = 1;
      swift_willThrow();

      swift_unknownObjectRelease();
LABEL_7:
      swift_unknownObjectRelease();

      return;
    }
    if ((objc_msgSend(a1, sel_respondsToSelector_, sel_supportsStrokeWeight) & 1) != 0)
    {
      if (objc_msgSend(a1, sel_supportsStrokeWeight))
      {
        if ((a4 & 1) != 0)
        {
          lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError();
          swift_allocError();
          *v15 = 2;
          swift_willThrow();

          swift_unknownObjectRelease();
          goto LABEL_7;
        }
      }
      else
      {
        v16 = 0.0;
        if ((a4 & 1) != 0)
        {
LABEL_14:
          v17 = objc_msgSend(objc_allocWithZone((Class)PKCustomTool), sel_initWithCustomIdentifier_configuration_color_weight_, v10, v12, a2, v16);

          swift_unknownObjectRelease_n();
          *a5 = v17;
          a5[1] = 0;
          return;
        }
      }
      v16 = a3;
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError;
  if (!lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKCustomTool.ParameterError, &unk_1E7771D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError;
  if (!lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKCustomTool.ParameterError, &unk_1E7771D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKCustomTool.ParameterError and conformance PKCustomTool.ParameterError);
  }
  return result;
}

uint64_t PKCustomTool.customIdentifier.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_customIdentifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void key path getter for PKCustomTool.customIdentifier : PKCustomTool(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = v3;
  v6 = objc_msgSend(v5, sel_customIdentifier);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  *a2 = v7;
  a2[1] = v9;
}

void key path setter for PKCustomTool.customIdentifier : PKCustomTool()
{
  swift_bridgeObjectRetain();
  PKCustomTool.customIdentifier.setter();
}

void PKCustomTool.customIdentifier.setter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  unsigned int v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id v10;

  v1 = (void *)MEMORY[0x1C3B7E3A8]();
  swift_bridgeObjectRelease();
  v2 = *(id *)(v0 + 8);
  if (v2
    || (v2 = objc_msgSend(*(id *)v0, sel_customConfigurationCopy),
        (*(_QWORD *)(v0 + 8) = v2) != 0))
  {
    v3 = v2;
    v4 = objc_msgSend(v3, sel_supportsColor);

    if (v4)
      v5 = objc_msgSend(*(id *)v0, sel_color);
    else
      v5 = 0;
    v6 = 0.0;
    if (objc_msgSend(v3, sel_supportsStrokeWeight))
    {
      objc_msgSend(*(id *)v0, sel_weight);
      v6 = v7;
    }
    v8 = objc_allocWithZone((Class)PKCustomTool);
    v9 = v3;
    v10 = objc_msgSend(v8, sel_initWithCustomIdentifier_configuration_color_weight_, v1, v9, v5, v6);

    *(_QWORD *)v0 = v10;
  }
  else
  {
    __break(1u);
  }
}

void (*PKCustomTool.customIdentifier.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(*v1, sel_customIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return PKCustomTool.customIdentifier.modify;
}

void PKCustomTool.customIdentifier.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    PKCustomTool.customIdentifier.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    PKCustomTool.customIdentifier.setter();
  }
}

id PKCustomTool.color.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_color);
}

id key path getter for PKCustomTool.color : PKCustomTool@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_color);
  *a2 = result;
  return result;
}

void key path setter for PKCustomTool.color : PKCustomTool(id *a1)
{
  PKCustomTool.color.setter(*a1);
}

void PKCustomTool.color.setter(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  unsigned int v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id v10;

  v3 = *(id *)(v1 + 8);
  if (v3
    || (v3 = objc_msgSend(*(id *)v1, sel_customConfigurationCopy),
        (*(_QWORD *)(v1 + 8) = v3) != 0))
  {
    v4 = v3;
    v5 = objc_msgSend(v4, sel_supportsStrokeWeight);

    v6 = 0.0;
    if (v5)
    {
      objc_msgSend(*(id *)v1, sel_weight);
      v6 = v7;
    }
    v8 = *(id *)v1;
    v9 = objc_msgSend(*(id *)v1, sel_customIdentifier);
    v10 = objc_msgSend(objc_allocWithZone((Class)PKCustomTool), sel_initWithCustomIdentifier_configuration_color_weight_, v9, v4, a1, v6);

    *(_QWORD *)v1 = v10;
  }
  else
  {
    __break(1u);
  }
}

void (*PKCustomTool.color.modify(_QWORD *a1))(void **a1, char a2)
{
  id *v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_color);
  return PKCustomTool.color.modify;
}

void PKCustomTool.color.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    PKCustomTool.color.setter(v3);

  }
  else
  {
    PKCustomTool.color.setter(v2);
  }
}

id PKCustomTool.weight.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_weight);
}

id key path getter for PKCustomTool.weight : PKCustomTool@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_weight);
  *a2 = v4;
  return result;
}

void key path setter for PKCustomTool.weight : PKCustomTool(double *a1)
{
  PKCustomTool.weight.setter(*a1);
}

void PKCustomTool.weight.setter(double a1)
{
  uint64_t v1;
  id v3;
  id v4;
  unsigned int v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = *(id *)(v1 + 8);
  if (v3
    || (v3 = objc_msgSend(*(id *)v1, sel_customConfigurationCopy),
        (*(_QWORD *)(v1 + 8) = v3) != 0))
  {
    v4 = v3;
    v5 = objc_msgSend(v4, sel_supportsColor);

    if (v5)
      v6 = objc_msgSend(*(id *)v1, sel_color);
    else
      v6 = 0;
    v7 = *(id *)v1;
    v8 = objc_msgSend(*(id *)v1, sel_customIdentifier);
    v9 = objc_allocWithZone((Class)PKCustomTool);
    v10 = v4;
    v11 = objc_msgSend(v9, sel_initWithCustomIdentifier_configuration_color_weight_, v8, v10, v6, a1);

    *(_QWORD *)v1 = v11;
  }
  else
  {
    __break(1u);
  }
}

void (*PKCustomTool.weight.modify(_QWORD *a1))(double *a1)
{
  id *v1;
  uint64_t v3;

  a1[1] = v1;
  objc_msgSend(*v1, sel_weight);
  *a1 = v3;
  return PKCustomTool.weight.modify;
}

void PKCustomTool.weight.modify(double *a1)
{
  PKCustomTool.weight.setter(*a1);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MTLTextureUsage(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKInkRenderingType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance PKToolPickerCustomItemControlOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance PKToolPickerCustomItemControlOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance PKToolPickerCustomItemControlOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance PKToolPickerCustomItemControlOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance PKToolPickerCustomItemControlOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance PKToolPickerCustomItemControlOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance PKToolPickerCustomItemControlOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance PKToolPickerCustomItemControlOptions()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance PKToolPickerCustomItemControlOptions()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance PKToolPickerCustomItemControlOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIGestureRecognizerState(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance PKInkInputType@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PKToolPickerCustomItemControlOptions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance PKInkInputType@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance PKInkInputType(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance PKInkInputType(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PKToolPickerCustomItemControlOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t specialized static PKCustomTool.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a2 + 8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
  {
    if (v2)
    {
      if (v3)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolConfiguration);
        v4 = v3;
        v5 = v2;
        v6 = static NSObject.== infix(_:_:)();

        if ((v6 & 1) != 0)
          return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

_QWORD *initializeBufferWithCopyOfBuffer for PKCustomTool(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for PKCustomTool(id *a1)
{

}

uint64_t assignWithCopy for PKCustomTool(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for PKCustomTool(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for PKCustomTool(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKCustomTool(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PKCustomTool()
{
  return &type metadata for PKCustomTool;
}

void type metadata accessor for PKToolPickerCustomItemControlOptions(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, (unint64_t *)&lazy cache variable for type metadata for PKToolPickerCustomItemControlOptions);
}

uint64_t initializeBufferWithCopyOfBuffer for CGAffineTransform(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, &lazy cache variable for type metadata for CGAffineTransform);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, &lazy cache variable for type metadata for CGPoint);
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, &lazy cache variable for type metadata for CGSize);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PKCustomTool.ParameterError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PKCustomTool.ParameterError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BE22B87C + 4 * byte_1BE4F9165[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BE22B8B0 + 4 * byte_1BE4F9160[v4]))();
}

uint64_t sub_1BE22B8B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE22B8B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE22B8C0);
  return result;
}

uint64_t sub_1BE22B8CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE22B8D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BE22B8D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE22B8E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for PKCustomTool.ParameterError(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for PKCustomTool.ParameterError(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for PKCustomTool.ParameterError()
{
  return &unk_1E7771D20;
}

uint64_t base witness table accessor for Equatable in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions, (uint64_t)&protocol conformance descriptor for PKToolPickerCustomItemControlOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions, (uint64_t)&protocol conformance descriptor for PKToolPickerCustomItemControlOptions);
}

uint64_t lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for PKToolPickerCustomItemControlOptions(255);
    result = MEMORY[0x1C3B801E4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for RawRepresentable in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions, (uint64_t)&protocol conformance descriptor for PKToolPickerCustomItemControlOptions);
}

uint64_t base witness table accessor for SetAlgebra in PKToolPickerCustomItemControlOptions()
{
  return lazy protocol witness table accessor for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions(&lazy protocol witness table cache variable for type PKToolPickerCustomItemControlOptions and conformance PKToolPickerCustomItemControlOptions, (uint64_t)&protocol conformance descriptor for PKToolPickerCustomItemControlOptions);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, &lazy cache variable for type metadata for CGRect);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RefineVertex(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RefineVertex(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for RefineVertex(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, &lazy cache variable for type metadata for RefineVertex);
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for RefineFragmentUniforms(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RefineFragmentUniforms(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for RefineFragmentUniforms(uint64_t a1)
{
  type metadata accessor for PKToolPickerCustomItemControlOptions(a1, (unint64_t *)&lazy cache variable for type metadata for RefineFragmentUniforms);
}

void type metadata accessor for PKToolPickerCustomItemControlOptions(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void __swiftcall PKHandwritingTool.init(localeIdentifier:)(PencilKit::PKHandwritingTool *__return_ptr retstr, Swift::String localeIdentifier)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  void *v6;
  objc_class *v7;

  object = localeIdentifier._object;
  countAndFlagsBits = localeIdentifier._countAndFlagsBits;
  v5 = objc_allocWithZone((Class)PKHandwritingTool);
  v6 = (void *)MEMORY[0x1C3B7E3A8](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v7 = (objc_class *)objc_msgSend(v5, sel_initWithLocaleIdentifier_, v6);

  retstr->tool.super.super.isa = v7;
}

void __swiftcall PKHandwritingTool.init()(PencilKit::PKHandwritingTool *__return_ptr retstr)
{
  retstr->tool.super.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKHandwritingTool), sel_init);
}

uint64_t PKHandwritingTool.localeIdentifier.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_localeIdentifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void key path getter for PKHandwritingTool.localeIdentifier : PKHandwritingTool(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = objc_msgSend(v3, sel_localeIdentifier);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  *a2 = v5;
  a2[1] = v7;
}

void key path setter for PKHandwritingTool.localeIdentifier : PKHandwritingTool(uint64_t *a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = objc_allocWithZone((Class)PKHandwritingTool);
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x1C3B7E3A8](v3, v4);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithLocaleIdentifier_, v6);

  *a2 = v7;
}

void PKHandwritingTool.localeIdentifier.setter(uint64_t a1, uint64_t a2)
{
  id *v2;
  id v5;
  void *v6;
  id v7;

  v5 = objc_allocWithZone((Class)PKHandwritingTool);
  v6 = (void *)MEMORY[0x1C3B7E3A8](a1, a2);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithLocaleIdentifier_, v6);

  *v2 = v7;
}

void (*PKHandwritingTool.localeIdentifier.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(*v1, sel_localeIdentifier);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return PKHandwritingTool.localeIdentifier.modify;
}

void PKHandwritingTool.localeIdentifier.modify(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v5 = *a1;
  v4 = a1[1];
  v6 = objc_allocWithZone((Class)PKHandwritingTool);
  v7 = (id *)a1[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v8 = (void *)MEMORY[0x1C3B7E3A8](v5, v4);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v6, sel_initWithLocaleIdentifier_, v8);

    *v7 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = (void *)MEMORY[0x1C3B7E3A8](v5, v4);
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v6, sel_initWithLocaleIdentifier_, v10);

    *v7 = v11;
  }
}

uint64_t static PKHandwritingTool.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKHandwritingTool()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

ValueMetadata *type metadata accessor for PKHandwritingTool()
{
  return &type metadata for PKHandwritingTool;
}

PencilKit::PKStroke __swiftcall PKStroke.init(ink:path:transform:mask:)(PencilKit::PKInk *ink, PencilKit::PKStrokePath *path, CGAffineTransform *transform, UIBezierPath_optional mask)
{
  _QWORD *v4;
  Class isa;
  _QWORD *v6;
  CGFloat tx;
  CGFloat ty;
  Class v9;
  Class v10;
  id v11;
  PencilKit::PKStroke result;
  __int128 v13;
  _OWORD v14[2];
  CGFloat v15;
  CGFloat v16;

  isa = mask.value.super.isa;
  v6 = v4;
  v13 = *(_OWORD *)&transform->c;
  tx = transform->tx;
  ty = transform->ty;
  v9 = ink->ink.super.isa;
  v10 = path->strokeData.super.isa;
  v14[0] = *(_OWORD *)&transform->a;
  v14[1] = v13;
  v15 = tx;
  v16 = ty;
  v11 = objc_msgSend(objc_allocWithZone((Class)PKStroke), sel_initWithInk_strokePath_transform_mask_, v9, v10, v14, mask.value.super.isa);

  *v6 = v11;
  return result;
}

PencilKit::PKStroke __swiftcall PKStroke.init(ink:path:transform:mask:randomSeed:)(PencilKit::PKInk *ink, PencilKit::PKStrokePath *path, CGAffineTransform *transform, UIBezierPath_optional mask, Swift::UInt32 randomSeed)
{
  _QWORD *v5;
  Class isa;
  _QWORD *v7;
  CGFloat tx;
  CGFloat ty;
  Class v10;
  Class v11;
  id v12;
  PencilKit::PKStroke result;
  __int128 v14;
  _OWORD v15[2];
  CGFloat v16;
  CGFloat v17;

  isa = mask.value.super.isa;
  v7 = v5;
  v14 = *(_OWORD *)&transform->c;
  tx = transform->tx;
  ty = transform->ty;
  v10 = ink->ink.super.isa;
  v11 = path->strokeData.super.isa;
  v15[0] = *(_OWORD *)&transform->a;
  v15[1] = v14;
  v16 = tx;
  v17 = ty;
  v12 = objc_msgSend(objc_allocWithZone((Class)PKStroke), sel_initWithInk_strokePath_transform_mask_randomSeed_, v10, v11, v15, mask.value.super.isa, *(_QWORD *)&mask.is_nil);

  *v7 = v12;
  return result;
}

void PKStroke.ink.getter(_QWORD *a1@<X8>)
{
  id *v1;
  id v3;
  id v4;
  void *v5;

  v3 = objc_msgSend(*v1, "ink");
  if (!v3)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v5 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v5, v4);

  }
  *a1 = v3;
}

void key path getter for PKStroke.ink : PKStroke(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;

  v3 = *a1;
  v4 = objc_msgSend(v3, "ink");
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v7 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v5 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v7, v6);

    v3 = v6;
  }

  *a2 = v5;
}

void PKStroke.ink.setter(void **a1)
{
  id *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *v1;
  v4 = objc_msgSend(*v1, sel_path);
  if (!v4)
    v4 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  objc_msgSend(v3, sel_transform);
  v11 = v14;
  v12 = v13;
  v5 = v15;
  v6 = v16;
  v7 = objc_msgSend(v3, sel_mask);
  v8 = objc_msgSend(v3, sel__randomSeed);
  v9 = objc_allocWithZone((Class)PKStroke);
  v13 = v12;
  v14 = v11;
  v15 = v5;
  v16 = v6;
  v10 = objc_msgSend(v9, sel_initWithInk_strokePath_transform_mask_randomSeed_, v2, v4, &v13, v7, v8);

  *v1 = v10;
}

double PKStroke.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  id *v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  objc_msgSend(*v1, sel_transform);
  result = *(double *)&v4;
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

id PKStroke.mask.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_mask);
}

void (*PKStroke.ink.modify(_QWORD *a1))(char **a1, char a2)
{
  id *v1;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  id v6;
  void *v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = v3 + 6;
  v3[7] = v1;
  v5 = objc_msgSend(*v1, "ink");
  if (!v5)
  {
    v6 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v7 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v5 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v7, v6);

  }
  *v4 = v5;
  return PKStroke.ink.modify;
}

void PKStroke.ink.modify(char **a1, char a2)
{
  char *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v2 = *a1;
  v3 = (void *)*((_QWORD *)*a1 + 6);
  v4 = (void *)**((_QWORD **)*a1 + 7);
  if ((a2 & 1) != 0)
  {
    v5 = v3;
    v6 = objc_msgSend(v4, sel_path);
    if (!v6)
      v6 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    v7 = (_QWORD *)*((_QWORD *)v2 + 7);
    objc_msgSend(v4, sel_transform);
    v8 = objc_msgSend(v4, sel_mask);
    v9 = objc_msgSend(v4, sel__randomSeed);
    v10 = objc_allocWithZone((Class)PKStroke);
    *(_QWORD *)v2 = v18;
    *(_OWORD *)(v2 + 8) = v19;
    *(_OWORD *)(v2 + 24) = v20;
    *((_QWORD *)v2 + 5) = v21;
    v11 = objc_msgSend(v10, sel_initWithInk_strokePath_transform_mask_randomSeed_, v5, v6, v2, v8, v9);

    *v7 = v11;
  }
  else
  {
    v12 = objc_msgSend(**((id **)*a1 + 7), sel_path);
    if (!v12)
      v12 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    v13 = (_QWORD *)*((_QWORD *)v2 + 7);
    objc_msgSend(v4, sel_transform);
    v14 = objc_msgSend(v4, sel_mask);
    v15 = objc_msgSend(v4, sel__randomSeed);
    v16 = objc_allocWithZone((Class)PKStroke);
    *(_QWORD *)v2 = v18;
    *(_OWORD *)(v2 + 8) = v19;
    *(_OWORD *)(v2 + 24) = v20;
    *((_QWORD *)v2 + 5) = v21;
    v17 = objc_msgSend(v16, sel_initWithInk_strokePath_transform_mask_randomSeed_, v3, v12, v2, v14, v15);

    *v13 = v17;
  }
  free(v2);
}

void PKStroke.transform.setter(uint64_t *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[6];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = *v1;
  v9 = objc_msgSend(*v1, "ink");
  if (!v9)
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v11 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v9 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v11, v10);

  }
  v12 = objc_msgSend(v8, sel_path);
  if (!v12)
    v12 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  v13 = objc_msgSend(v8, sel_mask);
  v15[0] = v2;
  v15[1] = v3;
  v15[2] = v4;
  v15[3] = v5;
  v15[4] = v6;
  v15[5] = v7;
  v14 = objc_msgSend(objc_allocWithZone((Class)PKStroke), sel_initWithInk_strokePath_transform_mask_randomSeed_, v9, v12, v15, v13, objc_msgSend(v8, sel__randomSeed));

  *v1 = v14;
}

void (*PKStroke.transform.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id *v1;
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  objc_msgSend(*v1, sel_transform);
  *((_OWORD *)v3 + 6) = v5;
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = v7;
  return PKStroke.transform.modify;
}

void PKStroke.transform.modify(uint64_t *a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = (_OWORD *)*a1;
  if ((a2 & 1) != 0)
    v3 = *a1;
  else
    v3 = *a1 + 48;
  v4 = v2[7];
  *(_OWORD *)v3 = v2[6];
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v2[8];
  PKStroke.transform.setter((uint64_t *)v3);
  free(v2);
}

id PKStroke.path.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_path);
  if (!result)
    result = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  *a1 = result;
  return result;
}

void key path getter for PKStroke.path : PKStroke(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;

  v3 = *a1;
  v4 = objc_msgSend(v3, sel_path);
  if (!v4)
    v4 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);

  *a2 = v4;
}

void PKStroke.path.setter(void **a1)
{
  id *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = *v1;
  v4 = objc_msgSend(*v1, "ink");
  if (!v4)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v6 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v6, v5);

  }
  objc_msgSend(v3, sel_transform);
  v13 = v16;
  v14 = v15;
  v7 = v17;
  v8 = v18;
  v9 = objc_msgSend(v3, sel_mask);
  v10 = objc_msgSend(v3, sel__randomSeed);
  v11 = objc_allocWithZone((Class)PKStroke);
  v15 = v14;
  v16 = v13;
  v17 = v7;
  v18 = v8;
  v12 = objc_msgSend(v11, sel_initWithInk_strokePath_transform_mask_randomSeed_, v4, v2, &v15, v9, v10);

  *v1 = v12;
}

void (*PKStroke.path.modify(_QWORD *a1))(void **a1, char a2)
{
  id *v1;
  id v3;

  a1[1] = v1;
  v3 = objc_msgSend(*v1, sel_path);
  if (!v3)
    v3 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  *a1 = v3;
  return PKStroke.path.modify;
}

void PKStroke.path.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  void *v4;

  v2 = *a1;
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    PKStroke.path.setter(&v4);

  }
  else
  {
    PKStroke.path.setter(&v4);
  }
}

void PKStroke.mask.setter(void *a1)
{
  id *v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *v1;
  v4 = objc_msgSend(*v1, "ink");
  if (!v4)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v6 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v6, v5);

  }
  v7 = objc_msgSend(v3, sel_path);
  if (!v7)
    v7 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  objc_msgSend(v3, sel_transform);
  v13 = v16;
  v14 = v15;
  v8 = v17;
  v9 = v18;
  v10 = objc_msgSend(v3, sel__randomSeed);
  v11 = objc_allocWithZone((Class)PKStroke);
  v15 = v14;
  v16 = v13;
  v17 = v8;
  v18 = v9;
  v12 = objc_msgSend(v11, sel_initWithInk_strokePath_transform_mask_randomSeed_, v4, v7, &v15, a1, v10);

  *v1 = v12;
}

void (*PKStroke.mask.modify(_QWORD *a1))(void **a1, char a2)
{
  id *v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_mask);
  return PKStroke.mask.modify;
}

void PKStroke.mask.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    PKStroke.mask.setter(v2);

  }
  else
  {
    PKStroke.mask.setter(*a1);
  }
}

id PKStroke.renderBounds.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_renderBounds);
}

char *PKStroke.maskedPathRanges.getter()
{
  id *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = objc_msgSend(*v0, sel_maskedPathRanges);
  type metadata accessor for PKFloatRange();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
    goto LABEL_14;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v16 = MEMORY[0x1E0DEE9D8];
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
      if (v3 < 0)
        break;
      v5 = 0;
      v6 = v16;
      while (1)
      {
        v7 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C3B7E5A0](v5, v2) : *(id *)(v2 + 8 * v5 + 32);
        v8 = v7;
        objc_msgSend(v7, sel_lowerBound);
        v10 = v9;
        objc_msgSend(v8, sel_upperBound);
        v12 = v11;

        if (v10 > v12)
          break;
        v14 = *(_QWORD *)(v16 + 16);
        v13 = *(_QWORD *)(v16 + 24);
        if (v14 >= v13 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        ++v5;
        *(_QWORD *)(v16 + 16) = v14 + 1;
        v15 = v16 + 16 * v14;
        *(double *)(v15 + 32) = v10;
        *(double *)(v15 + 40) = v12;
        if (v3 == v5)
        {
          swift_bridgeObjectRelease();
          return (char *)v6;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v3)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  return result;
}

id PKStroke.randomSeed.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_randomSeed);
}

void PKStroke.randomSeed.setter(uint64_t a1)
{
  id *v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *v1;
  v4 = objc_msgSend(*v1, "ink");
  if (!v4)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v6 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v6, v5);

  }
  v7 = objc_msgSend(v3, sel_path);
  if (!v7)
    v7 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  objc_msgSend(v3, sel_transform);
  v13 = v16;
  v14 = v15;
  v8 = v17;
  v9 = v18;
  v10 = objc_msgSend(v3, sel_mask);
  v11 = objc_allocWithZone((Class)PKStroke);
  v15 = v14;
  v16 = v13;
  v17 = v8;
  v18 = v9;
  v12 = objc_msgSend(v11, sel_initWithInk_strokePath_transform_mask_randomSeed_, v4, v7, &v15, v10, a1);

  *v1 = v12;
}

void (*PKStroke.randomSeed.modify(uint64_t a1))(uint64_t a1)
{
  id *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = objc_msgSend(*v1, sel_randomSeed);
  return PKStroke.randomSeed.modify;
}

void PKStroke.randomSeed.modify(uint64_t a1)
{
  PKStroke.randomSeed.setter(*(unsigned int *)(a1 + 8));
}

id PKStroke.requiredContentVersion.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_requiredContentVersion);
}

PKStroke __swiftcall PKStroke._bridgeToObjectiveC()()
{
  id *v0;

  return (PKStroke)*v0;
}

id static PKStroke._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKStroke._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id static PKStroke._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance PKStroke()
{
  id *v0;

  return *v0;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PKStroke(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance PKStroke(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKStroke@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for PKFloatRange()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PKFloatRange;
  if (!lazy cache variable for type metadata for PKFloatRange)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKFloatRange);
  }
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ClosedRange<CGFloat>>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
  *v3 = result;
  return result;
}

void sub_1BE22D5FC(void **a1)
{
  id v1;
  void *v2;

  v2 = *a1;
  v1 = v2;
  PKStroke.ink.setter(&v2);
}

double sub_1BE22D634@<D0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  objc_msgSend(*a1, sel_transform);
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

void sub_1BE22D67C(uint64_t *a1)
{
  PKStroke.transform.setter(a1);
}

void sub_1BE22D6A0(void **a1)
{
  id v1;
  void *v2;

  v2 = *a1;
  v1 = v2;
  PKStroke.path.setter(&v2);
}

id sub_1BE22D6D8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_mask);
  *a2 = result;
  return result;
}

void sub_1BE22D710(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  PKStroke.mask.setter(v1);
}

id sub_1BE22D73C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_randomSeed);
  *a2 = (_DWORD)result;
  return result;
}

void sub_1BE22D76C(unsigned int *a1)
{
  PKStroke.randomSeed.setter(*a1);
}

ValueMetadata *type metadata accessor for PKStroke()
{
  return &type metadata for PKStroke;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

_QWORD *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.NStroke>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B801CC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return v11;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKLongPressGestureRecognizer.PressStartLocation>);
  v10 = *(_QWORD *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKTool>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKTool);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

id TiledViewRenderer.__deallocating_deinit()
{
  return TiledViewRenderer.__deallocating_deinit(type metadata accessor for TiledViewRenderer);
}

uint64_t type metadata accessor for TiledViewRenderer()
{
  return objc_opt_self();
}

uint64_t RefineRenderer.init(metalKitView:from:to:image:toImage:depth:toDepth:)(void *a1, _QWORD *a2, _QWORD *a3, void *a4, void *a5, void *a6, void *a7)
{
  void *v7;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  double v65;
  double v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  uint64_t result;
  char *v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  objc_super v98;
  void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v12 = v7;
  v13 = objc_msgSend(a1, sel_device);
  if (!v13)
    goto LABEL_50;
  v94 = OBJC_IVAR____TtC9PencilKit14RefineRenderer_device;
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_device] = v13;
  v14 = *a2;
  v15 = *(_QWORD *)(*a2 + 16);
  v16 = 24 * v15;
  if ((unsigned __int128)(v15 * (__int128)24) >> 64 != (24 * v15) >> 63)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v18 = objc_msgSend(v17, sel_newBufferWithBytes_length_options_, v14 + 32, v16, 0);
  swift_unknownObjectRelease();
  if (!v18)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices] = v18;
  v19 = a2[1];
  v20 = *(_QWORD *)(v19 + 16);
  if (v20 + 0x4000000000000000 < 0)
    goto LABEL_39;
  v21 = objc_msgSend(a1, sel_device);
  if (!v21)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v22 = objc_msgSend(v21, sel_newBufferWithBytes_length_options_, v19 + 32, 2 * v20, 0);
  swift_unknownObjectRelease();
  if (!v22)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices] = v22;
  v23 = *(_QWORD *)(v19 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)a2);
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount] = v23;
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 + 16);
  v26 = 24 * v25;
  if ((unsigned __int128)(v25 * (__int128)24) >> 64 != (24 * v25) >> 63)
    goto LABEL_40;
  v27 = objc_msgSend(a1, sel_device);
  if (!v27)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v28 = objc_msgSend(v27, sel_newBufferWithBytes_length_options_, v24 + 32, v26, 0);
  swift_unknownObjectRelease();
  if (!v28)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices2] = v28;
  v29 = a3[1];
  v30 = *(_QWORD *)(v29 + 16);
  if (v30 + 0x4000000000000000 < 0)
    goto LABEL_41;
  v31 = objc_msgSend(a1, sel_device);
  if (!v31)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v32 = objc_msgSend(v31, sel_newBufferWithBytes_length_options_, v29 + 32, 2 * v30, 0);
  swift_unknownObjectRelease();
  if (!v32)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices2] = v32;
  v33 = *(_QWORD *)(v29 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)a3);
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount2] = v33;
  v34 = objc_msgSend(a1, sel_device);
  if (!v34)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6C40]), sel_initWithDevice_, v34);
  swift_unknownObjectRelease();
  v100 = 0;
  v36 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a4, 0, &v100);
  v37 = v100;
  if (!v36)
  {
    v87 = v100;
    v40 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_70;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture] = v36;
  v100 = 0;
  v38 = v37;
  v39 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a5, 0, &v100);
  v40 = v100;
  if (!v39)
  {
LABEL_70:
    v88 = v40;
    v43 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_71;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture2] = v39;
  v100 = 0;
  v41 = v40;
  v42 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a6, 0, &v100);
  v43 = v100;
  if (!v42)
  {
LABEL_71:
    v89 = v43;
    v46 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_72;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth] = v42;
  v100 = 0;
  v44 = v43;
  v45 = objc_msgSend(v35, sel_newTextureWithCGImage_options_error_, a7, 0, &v100);
  v46 = v100;
  if (!v45)
  {
LABEL_72:
    v90 = v46;
    v91 = _convertNSErrorToError(_:)();

    v83 = (void *)v91;
    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_73;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth2] = v45;
  v47 = v46;
  objc_msgSend(a1, sel_bounds);
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(0x7FFFFFFFFFFFFFFFLL, (uint64_t)&v100, v48, v49, v50, v51);
  v52 = v100;
  v53 = *((_QWORD *)v100 + 2);
  v54 = 24 * v53;
  if ((unsigned __int128)(v53 * (__int128)24) >> 64 != (24 * v53) >> 63)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v55 = objc_msgSend(a1, sel_device);
  if (!v55)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v56 = objc_msgSend(v55, sel_newBufferWithBytes_length_options_, v52 + 32, v54, 0);
  swift_unknownObjectRelease();
  if (!v56)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices3] = v56;
  v57 = v101;
  v58 = *(_QWORD *)(v101 + 16);
  if (v58 + 0x4000000000000000 < 0)
    goto LABEL_43;
  v59 = objc_msgSend(a1, sel_device);
  if (!v59)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v60 = objc_msgSend(v59, sel_newBufferWithBytes_length_options_, v57 + 32, 2 * v58, 0);
  swift_unknownObjectRelease();
  if (!v60)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices3] = v60;
  v61 = *(_QWORD *)(v57 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)&v100);
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount3] = v61;
  v62 = *(void **)&v12[v94];
  v63 = objc_msgSend(v62, sel_newCommandQueue);
  if (!v63)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_commandQueue] = v63;
  v64 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  objc_msgSend(v64, sel_setTextureType_, 2);
  objc_msgSend(v64, sel_setPixelFormat_, 80);
  objc_msgSend(a1, sel_drawableSize);
  if ((~*(_QWORD *)&v65 & 0x7FF0000000000000) == 0)
    goto LABEL_44;
  if (v65 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v65 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v64, sel_setWidth_, (uint64_t)v65);
  objc_msgSend(a1, sel_drawableSize);
  if ((~*(_QWORD *)&v66 & 0x7FF0000000000000) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v66 <= -9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v66 >= 9.22337204e18)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  objc_msgSend(v64, sel_setHeight_, (uint64_t)v66);
  objc_msgSend(v64, sel_setUsage_, 4);
  objc_msgSend(v64, sel_setStorageMode_, 3);
  v67 = objc_msgSend(v62, sel_newTextureWithDescriptor_, v64);
  if (!v67)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v93 = v35;
  *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_maskTexture] = v67;
  v68 = objc_opt_self();
  v69 = +[PKMetalResourceHandler sharedResourceHandlerWithDevice:](v68, v62);
  v70 = -[PKMetalResourceHandler shaderLibrary]((uint64_t)v69);

  if (!v70)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v71 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000012, 0x80000001BE4FF740);
  v72 = objc_msgSend(v70, sel_newFunctionWithName_, v71);

  v73 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF760);
  v74 = objc_msgSend(v70, sel_newFunctionWithName_, v73);

  v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B68]), sel_init);
  v76 = (void *)MEMORY[0x1C3B7E3A8](0x5020656E69666552, 0xEF656E696C657069);
  objc_msgSend(v75, sel_setLabel_, v76);

  objc_msgSend(v75, sel_setVertexFunction_, v72);
  objc_msgSend(v75, sel_setFragmentFunction_, v74);
  v77 = objc_msgSend(v75, sel_colorAttachments);
  v78 = objc_msgSend(v77, sel_objectAtIndexedSubscript_, 0);

  if (!v78)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
  }
  objc_msgSend(v78, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  v79 = objc_msgSend(v75, sel_colorAttachments);
  v80 = objc_msgSend(v79, sel_objectAtIndexedSubscript_, 1);

  if (!v80)
    goto LABEL_68;
  objc_msgSend(v80, sel_setPixelFormat_, 80);

  v81 = *(void **)&v12[v94];
  v99 = 0;
  v82 = objc_msgSend(v81, sel_newRenderPipelineStateWithDescriptor_error_, v75, &v99);
  v83 = v99;
  if (v82)
  {
    *(_QWORD *)&v12[OBJC_IVAR____TtC9PencilKit14RefineRenderer_pipelineState] = v82;
    v84 = v83;

    v98.receiver = v12;
    v98.super_class = (Class)type metadata accessor for RefineRenderer();
    v85 = objc_msgSendSuper2(&v98, sel_init);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v85;
  }
LABEL_73:
  v92 = v83;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Void __swiftcall RefineRenderer.draw(in:)(MTKView *in)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  MTLRenderPassDescriptor *v8;
  MTLRenderPassColorAttachmentDescriptorArray *v9;
  MTLRenderPassColorAttachmentDescriptor *v10;
  MTLRenderPassColorAttachmentDescriptorArray *v11;
  MTLRenderPassColorAttachmentDescriptor *v12;
  MTLRenderPassColorAttachmentDescriptorArray *v13;
  MTLRenderPassColorAttachmentDescriptor *v14;
  MTLRenderPassColorAttachmentDescriptorArray *v15;
  MTLRenderPassColorAttachmentDescriptor *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float64x2_t v24;
  float64_t v25;
  uint64_t inited;
  float *v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64_t v35;
  MTLRenderPassDescriptor *v36;
  _QWORD v37[4];
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = -[MTKView currentDrawable](in, sel_currentDrawable);
  if (v3)
  {
    v4 = v3;
    v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                               + OBJC_IVAR____TtC9PencilKit14RefineRenderer_commandQueue), sel_commandBuffer));
    if (!v5)
    {
      swift_unknownObjectRelease();
      return;
    }
    v6 = v5;
    v7 = (void *)MEMORY[0x1C3B7E3A8](0x696665526F747541, 0xEA0000000000656ELL);
    objc_msgSend(v6, sel_setLabel_, v7);

    v8 = -[MTKView currentRenderPassDescriptor](in, sel_currentRenderPassDescriptor);
    if (!v8)
      goto LABEL_18;
    v36 = v8;
    v9 = -[MTLRenderPassDescriptor colorAttachments](v8, sel_colorAttachments);
    v10 = -[MTLRenderPassColorAttachmentDescriptorArray objectAtIndexedSubscript:](v9, sel_objectAtIndexedSubscript_, 1);

    if (v10)
    {
      -[MTLRenderPassColorAttachmentDescriptor setTexture:](v10, sel_setTexture_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_maskTexture));

      v11 = -[MTLRenderPassDescriptor colorAttachments](v36, sel_colorAttachments);
      v12 = -[MTLRenderPassColorAttachmentDescriptorArray objectAtIndexedSubscript:](v11, sel_objectAtIndexedSubscript_, 1);

      if (v12)
      {
        -[MTLRenderPassColorAttachmentDescriptor setLoadAction:](v12, sel_setLoadAction_, 2);

        v13 = -[MTLRenderPassDescriptor colorAttachments](v36, sel_colorAttachments);
        v14 = -[MTLRenderPassColorAttachmentDescriptorArray objectAtIndexedSubscript:](v13, sel_objectAtIndexedSubscript_, 1);

        if (v14)
        {
          -[MTLRenderPassColorAttachmentDescriptor setStoreAction:](v14, sel_setStoreAction_, 0);

          v15 = -[MTLRenderPassDescriptor colorAttachments](v36, sel_colorAttachments);
          v16 = -[MTLRenderPassColorAttachmentDescriptorArray objectAtIndexedSubscript:](v15, sel_objectAtIndexedSubscript_, 1);

          if (v16)
          {
            -[MTLRenderPassColorAttachmentDescriptor setClearColor:](v16, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);

            v17 = objc_msgSend(v6, sel_renderCommandEncoderWithDescriptor_, v36);
            if (!v17)
            {
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();

              return;
            }
            v18 = v17;
            v19 = (void *)MEMORY[0x1C3B7E3A8](0x696665526F747541, 0xEA0000000000656ELL);
            objc_msgSend(v18, sel_setLabel_, v19);

            -[MTKView drawableSize](in, sel_drawableSize);
            v21 = v20;
            -[MTKView drawableSize](in, sel_drawableSize);
            v37[0] = 0;
            v37[1] = 0;
            v37[2] = v21;
            v37[3] = v22;
            v38 = xmmword_1BE4F9580;
            objc_msgSend(v18, sel_setViewport_, v37);
            objc_msgSend(v18, sel_setRenderPipelineState_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_pipelineState));
            -[MTKView frame](in, sel_frame);
            v35 = v23;
            -[MTKView frame](in, sel_frame);
            v24.f64[0] = v35;
            v24.f64[1] = v25;
            v37[0] = vcvt_f32_f64(v24);
            objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, v37, 8, 1);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineFragmentUniforms>);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1BE4F9590;
            *(_DWORD *)(inited + 32) = 0;
            v27 = (float *)(inited + 32);
            *(_DWORD *)(inited + 36) = 0;
            *(_DWORD *)(inited + 40) = 0;
            objc_msgSend((id)objc_opt_self(), sel_timeIntervalSinceReferenceDate);
            v29 = fmin((v28 - *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_startTime))/ *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_duration), 1.0);
            if (v29 < 0.0)
              v29 = 0.0;
            v30 = v29 * (v29 * 3.0) - v29 * (v29 * (v29 + v29));
            *v27 = 1.0 - v30;
            *(float *)(inited + 36) = v30;
            *(_DWORD *)(inited + 40) = 0;
            objc_msgSend(v18, sel_setFragmentBytes_length_atIndex_, v27, 12, 0);
            objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, v27, 12, 2);
            objc_msgSend(v18, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices2), 0, 0);
            objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture2), 0);
            objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth2), 1);
            objc_msgSend(v18, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount2), 0, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices2), 0);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v31 = *(_QWORD *)(inited + 16);
              if (v31)
                goto LABEL_13;
            }
            else
            {
              inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(inited);
              v31 = *(_QWORD *)(inited + 16);
              if (v31)
              {
LABEL_13:
                *(float *)(inited + 32) = v30;
                *(_DWORD *)(inited + 40) = 1;
                v32 = 12 * v31;
                if ((unsigned __int128)(v31 * (__int128)12) >> 64 == (12 * v31) >> 63)
                {
                  swift_bridgeObjectRetain();
                  objc_msgSend(v18, sel_setFragmentBytes_length_atIndex_, inited + 32, v32, 0);
                  objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, inited + 32, v32, 2);
                  swift_bridgeObjectRelease();
                  objc_msgSend(v18, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices), 0, 0);
                  objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_texture), 0);
                  objc_msgSend(v18, sel_setFragmentTexture_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_depth), 1);
                  objc_msgSend(v18, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount), 0, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices), 0);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    v33 = *(_QWORD *)(inited + 16);
                    if (v33)
                      goto LABEL_16;
                    goto LABEL_26;
                  }
LABEL_25:
                  inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(inited);
                  v33 = *(_QWORD *)(inited + 16);
                  if (v33)
                  {
LABEL_16:
                    *(_DWORD *)(inited + 40) = 2;
                    v34 = 12 * v33;
                    if ((unsigned __int128)(v33 * (__int128)12) >> 64 == (12 * v33) >> 63)
                    {
                      swift_bridgeObjectRetain();
                      objc_msgSend(v18, sel_setFragmentBytes_length_atIndex_, inited + 32, v34, 0);
                      objc_msgSend(v18, sel_setVertexBytes_length_atIndex_, inited + 32, v34, 2);
                      swift_bridgeObjectRelease_n();
                      objc_msgSend(v18, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_vertices3), 0, 0);
                      objc_msgSend(v18, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indicesCount3), 0, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit14RefineRenderer_indices3), 0);
                      objc_msgSend(v18, sel_endEncoding);
                      swift_unknownObjectRetain();
                      objc_msgSend(v6, sel_presentDrawable_, v4);
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();

LABEL_18:
                      objc_msgSend(v6, sel_commit);
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      return;
                    }
LABEL_27:
                    __break(1u);
                  }
LABEL_26:
                  __break(1u);
                  goto LABEL_27;
                }
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
            }
            __break(1u);
            goto LABEL_24;
          }
LABEL_31:
          __break(1u);
          return;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
}

uint64_t RefineRenderer.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

id RefineRenderer.__deallocating_deinit()
{
  return TiledViewRenderer.__deallocating_deinit(type metadata accessor for RefineRenderer);
}

id TiledViewRenderer.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for RefineRenderer()
{
  return objc_opt_self();
}

uint64_t outlined release of PKRefineMorph.GridMesh(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void __swiftcall PKEraserTool.init(_:)(PencilKit::PKEraserTool *__return_ptr retstr, PencilKit::PKEraserTool::EraserType a2)
{
  retstr->tool.super.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *(unsigned __int8 *)a2);
}

id PKEraserTool.init(_:width:)@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, *a1, a3);
  *a2 = result;
  return result;
}

id PKEraserTool.EraserType.defaultWidth.getter()
{
  unsigned __int8 *v0;

  return objc_msgSend((id)objc_opt_self(), sel_defaultWidthForEraserType_, *v0);
}

id PKEraserTool.EraserType.validWidthRange.getter()
{
  unsigned __int8 *v0;
  int v1;
  void *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  id result;
  double v8;

  v1 = *v0;
  if (v1 == 2)
  {
    v2 = (void *)objc_opt_self();
    v3 = 2;
    objc_msgSend(v2, sel_minimumWidthForEraserType_, 2);
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v2 = (void *)objc_opt_self();
    v3 = 1;
    objc_msgSend(v2, sel_minimumWidthForEraserType_, 1);
LABEL_5:
    v5 = v4;
    goto LABEL_7;
  }
  v2 = (void *)objc_opt_self();
  objc_msgSend(v2, sel_minimumWidthForEraserType_, 0);
  v5 = v6;
  v3 = 0;
LABEL_7:
  result = objc_msgSend(v2, sel_maximumWidthForEraserType_, v3);
  if (v5 > v8)
    __break(1u);
  return result;
}

BOOL static PKEraserTool.EraserType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PKEraserTool.EraserType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PKEraserTool.EraserType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id PKEraserTool.eraserType.getter@<X0>(_BYTE *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_eraserType);
  if ((unint64_t)result >= 3)
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = (_BYTE)result;
  }
  return result;
}

id key path getter for PKEraserTool.eraserType : PKEraserTool@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_eraserType);
  if ((unint64_t)result >= 3)
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = (_BYTE)result;
  }
  return result;
}

void key path setter for PKEraserTool.eraserType : PKEraserTool(unsigned __int8 *a1, id *a2)
{
  id v3;

  v3 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *a1);

  *a2 = v3;
}

void PKEraserTool.eraserType.setter(unsigned __int8 *a1)
{
  id *v1;
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *a1);

  *v1 = v2;
}

void (*PKEraserTool.eraserType.modify(id **a1))(uint64_t a1)
{
  id *v1;
  _BYTE *v2;
  id v3;
  void (*result)(uint64_t);

  *a1 = v1;
  v2 = a1 + 1;
  v3 = objc_msgSend(*v1, sel_eraserType);
  if ((unint64_t)v3 >= 3)
  {
    result = (void (*)(uint64_t))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v2 = (_BYTE)v3;
    return PKEraserTool.eraserType.modify;
  }
  return result;
}

void PKEraserTool.eraserType.modify(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = *(id **)a1;
  v2 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_, *(unsigned __int8 *)(a1 + 8));

  *v1 = v2;
}

id PKEraserTool.width.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_width);
}

void PKEraserTool.width.setter(double a1)
{
  id *v1;
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = *v1;
  v4 = objc_msgSend(*v1, sel_eraserType);
  if ((unint64_t)v4 >= 2)
  {
    if (v4 == (id)2 && (v5 = objc_msgSend(v3, sel_eraserType), (unint64_t)v5 < 3))
    {
      v6 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, v5, a1);

      *v1 = v6;
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void (*PKEraserTool.width.modify(_QWORD *a1))(double *a1)
{
  id *v1;
  uint64_t v3;

  a1[1] = v1;
  objc_msgSend(*v1, sel_width);
  *a1 = v3;
  return PKEraserTool.width.modify;
}

void PKEraserTool.width.modify(double *a1)
{
  PKEraserTool.width.setter(*a1);
}

uint64_t static PKEraserTool.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

void __swiftcall PKEraserTool._bridgeToObjectiveC()(PKEraserTool *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

id static PKEraserTool._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKEraserTool._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id static PKEraserTool._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType;
  if (!lazy protocol witness table cache variable for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKEraserTool.EraserType, &type metadata for PKEraserTool.EraserType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKEraserTool.EraserType and conformance PKEraserTool.EraserType);
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKEraserTool@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1BE22FECC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_width);
  *a2 = v4;
  return result;
}

void sub_1BE22FEFC(double *a1)
{
  PKEraserTool.width.setter(*a1);
}

ValueMetadata *type metadata accessor for PKEraserTool()
{
  return &type metadata for PKEraserTool;
}

uint64_t storeEnumTagSinglePayload for PKEraserTool.EraserType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BE22FF7C + 4 * byte_1BE4F95F9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BE22FFB0 + 4 * byte_1BE4F95F4[v4]))();
}

uint64_t sub_1BE22FFB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE22FFB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE22FFC0);
  return result;
}

uint64_t sub_1BE22FFCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE22FFD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BE22FFD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE22FFE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PKEraserTool.EraserType()
{
  return &type metadata for PKEraserTool.EraserType;
}

id PKStrokePoint.init(location:timeOffset:size:opacity:force:azimuth:altitude:)@<X0>(_QWORD *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)PKStrokePoint), sel_initWithLocation_timeOffset_size_opacity_force_azimuth_altitude_, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  *a1 = result;
  return result;
}

id PKStrokePoint.init(location:timeOffset:size:opacity:force:azimuth:altitude:secondaryScale:)@<X0>(_QWORD *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10, uint64_t a11)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)PKStrokePoint), sel_initWithLocation_timeOffset_size_opacity_force_azimuth_altitude_secondaryScale_, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *a1 = result;
  return result;
}

id PKStrokePoint.location.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_location);
}

id PKStrokePoint.timeOffset.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_timeOffset);
}

id PKStrokePoint.size.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_size);
}

id PKStrokePoint.opacity.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_opacity);
}

id PKStrokePoint.azimuth.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_azimuth);
}

id PKStrokePoint.force.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_force);
}

id PKStrokePoint.altitude.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_altitude);
}

id PKStrokePoint.secondaryScale.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_secondaryScale);
}

void __swiftcall PKStrokePoint._bridgeToObjectiveC()(PKStrokePoint *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

id static PKStrokePoint._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKStrokePoint._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id static PKStrokePoint._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKStrokePoint@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  if (a1)
  {
    *a2 = a1;
    return a1;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for PKStrokePoint()
{
  return &type metadata for PKStrokePoint;
}

PKToolPickerEraserItem __swiftcall PKToolPickerEraserItem.init(type:)(PencilKit::PKEraserTool::EraserType type)
{
  uint64_t v1;
  id v2;
  id v3;
  objc_class *v4;
  NSHashTable *v5;
  PKTool *v6;
  objc_class *v7;
  PKToolPickerEraserItem result;

  v1 = *(unsigned __int8 *)type;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, v1, 0.0);
  v4 = (objc_class *)objc_msgSend(v2, sel_initWithTool_, v3);

  v7 = v4;
  result.super.__tool = v6;
  result.super._observers = v5;
  result.super.super.isa = v7;
  return result;
}

id PKToolPickerEraserItem.init(type:width:)(unsigned __int8 *a1, double a2)
{
  uint64_t v3;
  id v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = objc_msgSend(objc_allocWithZone((Class)PKEraserTool), sel_initWithEraserType_width_, v3, a2);
  v6 = objc_msgSend(v4, sel_initWithTool_, v5);

  return v6;
}

uint64_t PKToolPickerEraserItem.eraserTool.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(v1, sel__tool);
  objc_opt_self();
  result = swift_dynamicCastObjCClassUnconditional();
  *a1 = result;
  return result;
}

id one-time initialization function for default()
{
  uint64_t v0;
  id result;

  type metadata accessor for Logger();
  MEMORY[0x1E0C80A78]();
  v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static OSSignposter.default);
  __swift_project_value_buffer(v0, (uint64_t)static OSSignposter.default);
  result = _PKSignpostLog();
  if (result)
  {
    Logger.init(_:)();
    return (id)OSSignposter.init(logger:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall PKTiledViewAnimationController.didEndDrawing()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = OBJC_IVAR___PKTiledViewAnimationController_drawingContinuations;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___PKTiledViewAnimationController_drawingContinuations) + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v2; ++i)
      swift_continuation_throwingResume();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + v1) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
}

uint64_t PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[122] = v3;
  v4[121] = a2;
  v4[120] = a1;
  v6 = type metadata accessor for OSSignpostError();
  v4[123] = v6;
  v4[124] = *(_QWORD *)(v6 - 8);
  v4[125] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[126] = swift_task_alloc();
  v7 = type metadata accessor for OSSignpostID();
  v4[127] = v7;
  v4[128] = *(_QWORD *)(v7 - 8);
  v4[129] = swift_task_alloc();
  v4[130] = swift_task_alloc();
  v4[131] = swift_task_alloc();
  v8 = type metadata accessor for OSSignposter();
  v4[132] = v8;
  v4[133] = *(_QWORD *)(v8 - 8);
  v4[134] = swift_task_alloc();
  v4[135] = swift_task_alloc();
  v4[136] = swift_task_alloc();
  v4[137] = *a3;
  type metadata accessor for MainActor();
  v4[138] = static MainActor.shared.getter();
  v4[139] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[140] = v9;
  return swift_task_switch();
}

uint64_t PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  NSObject *v11;
  os_signpost_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint8_t *v17;
  os_signpost_id_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  double x;
  double y;
  double width;
  double height;
  void **v36;
  void *v37;
  id v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  void *v46;
  id v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGAffineTransform *v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  Class isa;
  id v76;
  id v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGAffineTransform *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;

  v1 = (void *)MEMORY[0x1C3B8031C](*(_QWORD *)(v0 + 976) + OBJC_IVAR___PKTiledViewAnimationController_tiledView);
  *(_QWORD *)(v0 + 1128) = v1;
  if (!v1)
  {
    swift_release();
LABEL_27:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_scrollView);
  *(_QWORD *)(v0 + 1136) = v3;
  if (!v3)
  {
    swift_release();

    goto LABEL_27;
  }
  v76 = v3;
  if (one-time initialization token for default != -1)
    swift_once();
  v77 = v2;
  v4 = *(_QWORD *)(v0 + 1088);
  v5 = *(_QWORD *)(v0 + 1080);
  v6 = *(_QWORD *)(v0 + 1064);
  v7 = *(_QWORD *)(v0 + 1056);
  v8 = __swift_project_value_buffer(v7, (uint64_t)static OSSignposter.default);
  *(_QWORD *)(v0 + 1144) = v8;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 1152) = v9;
  v9(v4, v8, v7);
  v9(v5, v8, v7);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v0 + 1160) = v10;
  v10(v5, v7);
  v11 = OSSignposter.logHandle.getter();
  v12 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v13 = *(_QWORD *)(v0 + 1040);
    v14 = *(_QWORD *)(v0 + 1024);
    v15 = *(_QWORD *)(v0 + 1016);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v16(v13, *(_QWORD *)(v0 + 1048), v15);
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    v18 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1BE213000, v11, v12, v18, "Refine Animation Setup", "", v17, 2u);
    MEMORY[0x1C3B80274](v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 1024);

    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  }
  *(_QWORD *)(v0 + 1168) = v16;
  v20 = *(_QWORD *)(v0 + 1088);
  v21 = *(_QWORD *)(v0 + 1056);
  v22 = *(_QWORD *)(v0 + 1048);
  v23 = *(_QWORD *)(v0 + 1024);
  v24 = *(_QWORD *)(v0 + 1016);
  v25 = *(_QWORD *)(v0 + 960);
  v16(*(_QWORD *)(v0 + 1040), v22, v24);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(_QWORD *)(v0 + 1176) = OSSignpostIntervalState.init(id:isOpen:)();
  v26 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  *(_QWORD *)(v0 + 1184) = v26;
  v26(v22, v24);
  v10(v20, v21);
  v27 = *MEMORY[0x1E0C9D628];
  v28 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v29 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v30 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v31 = *(_QWORD *)(v25 + 16);
  x = *MEMORY[0x1E0C9D628];
  y = v28;
  width = v29;
  height = v30;
  if (v31)
  {
    v36 = (void **)(*(_QWORD *)(v0 + 960) + 32);
    swift_bridgeObjectRetain();
    x = v27;
    y = v28;
    width = v29;
    height = v30;
    do
    {
      v37 = *v36++;
      v38 = v37;
      objc_msgSend(v38, sel_renderBounds);
      v112.origin.x = v39;
      v112.origin.y = v40;
      v112.size.width = v41;
      v112.size.height = v42;
      v93.origin.x = x;
      v93.origin.y = y;
      v93.size.width = width;
      v93.size.height = height;
      v94 = CGRectUnion(v93, v112);
      x = v94.origin.x;
      y = v94.origin.y;
      width = v94.size.width;
      height = v94.size.height;

      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  *(double *)(v0 + 1216) = height;
  *(double *)(v0 + 1208) = width;
  *(double *)(v0 + 1200) = y;
  *(double *)(v0 + 1192) = x;
  v43 = *(_QWORD *)(v0 + 968);
  v44 = *(_QWORD *)(v43 + 16);
  if (v44)
  {
    v45 = (void **)(v43 + 32);
    swift_bridgeObjectRetain();
    do
    {
      v46 = *v45++;
      v47 = v46;
      objc_msgSend(v47, sel_renderBounds);
      v113.origin.x = v48;
      v113.origin.y = v49;
      v113.size.width = v50;
      v113.size.height = v51;
      v95.origin.x = v27;
      v95.origin.y = v28;
      v95.size.width = v29;
      v95.size.height = v30;
      v96 = CGRectUnion(v95, v113);
      v27 = v96.origin.x;
      v28 = v96.origin.y;
      v29 = v96.size.width;
      v30 = v96.size.height;

      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v77, sel_transformFromStrokeSpaceToViewInDrawing_, *(_QWORD *)(v0 + 1096));
  *(double *)(v0 + 832) = x;
  *(double *)(v0 + 840) = y;
  *(double *)(v0 + 848) = width;
  *(double *)(v0 + 856) = height;
  *(CGFloat *)(v0 + 864) = v27;
  *(CGFloat *)(v0 + 872) = v28;
  *(CGFloat *)(v0 + 880) = v29;
  *(CGFloat *)(v0 + 888) = v30;
  v97.origin.x = x;
  v97.origin.y = y;
  v97.size.width = width;
  v97.size.height = height;
  v114.origin.x = v27;
  v114.origin.y = v28;
  v114.size.width = v29;
  v114.size.height = v30;
  v98 = CGRectUnion(v97, v114);
  *(_QWORD *)(v0 + 528) = v87;
  *(_QWORD *)(v0 + 536) = v88;
  *(_QWORD *)(v0 + 544) = v89;
  *(_QWORD *)(v0 + 552) = v90;
  *(_QWORD *)(v0 + 560) = v91;
  *(_QWORD *)(v0 + 568) = v92;
  v99 = CGRectApplyAffineTransform(v98, (CGAffineTransform *)(v0 + 528));
  objc_msgSend(v76, sel_convertRect_fromCoordinateSpace_, v77, v99.origin.x, v99.origin.y, v99.size.width, v99.size.height);
  v80 = v53;
  v81 = v52;
  v78 = v55;
  v79 = v54;
  *(_QWORD *)(v0 + 576) = v87;
  *(_QWORD *)(v0 + 584) = v88;
  *(_QWORD *)(v0 + 592) = v89;
  *(_QWORD *)(v0 + 600) = v90;
  *(_QWORD *)(v0 + 608) = v91;
  *(_QWORD *)(v0 + 616) = v92;
  v100.origin.x = x;
  v100.origin.y = y;
  v100.size.width = width;
  v100.size.height = height;
  v101 = CGRectApplyAffineTransform(v100, (CGAffineTransform *)(v0 + 576));
  objc_msgSend(v76, sel_convertRect_fromCoordinateSpace_, v77, v101.origin.x, v101.origin.y, v101.size.width, v101.size.height);
  *(_QWORD *)(v0 + 1224) = v56;
  *(_QWORD *)(v0 + 1232) = v57;
  *(_QWORD *)(v0 + 1240) = v58;
  *(_QWORD *)(v0 + 1248) = v59;
  *(_QWORD *)(v0 + 624) = v87;
  *(_QWORD *)(v0 + 632) = v88;
  *(_QWORD *)(v0 + 640) = v89;
  *(_QWORD *)(v0 + 648) = v90;
  *(_QWORD *)(v0 + 656) = v91;
  *(_QWORD *)(v0 + 664) = v92;
  v102.origin.x = v27;
  v102.origin.y = v28;
  v102.size.width = v29;
  v102.size.height = v30;
  v103 = CGRectApplyAffineTransform(v102, (CGAffineTransform *)(v0 + 624));
  objc_msgSend(v76, sel_convertRect_fromCoordinateSpace_, v77, v103.origin.x, v103.origin.y, v103.size.width, v103.size.height);
  *(_QWORD *)(v0 + 1256) = v60;
  *(_QWORD *)(v0 + 1264) = v61;
  *(_QWORD *)(v0 + 1272) = v62;
  *(_QWORD *)(v0 + 1280) = v63;
  v104.origin.y = v80;
  *(_QWORD *)&v104.origin.x = v81;
  *(_QWORD *)(v0 + 896) = v81;
  *(CGFloat *)(v0 + 904) = v80;
  v104.size.height = v78;
  v104.size.width = v79;
  *(CGFloat *)(v0 + 912) = v79;
  *(CGFloat *)(v0 + 920) = v78;
  v83 = CGRectGetWidth(v104);
  objc_msgSend(v76, sel_frame);
  if (v83 >= CGRectGetWidth(v105)
    || (v106.origin.y = v80,
        *(_QWORD *)&v106.origin.x = v81,
        v106.size.height = v78,
        v106.size.width = v79,
        v84 = CGRectGetHeight(v106),
        objc_msgSend(v76, sel_frame),
        v84 >= CGRectGetHeight(v107)))
  {
    swift_release();
    swift_release();

    goto LABEL_27;
  }
  v64 = *(_QWORD *)(v0 + 968);
  v65 = *(_QWORD *)(v0 + 960);
  v108.origin.x = x;
  v108.origin.y = y;
  v108.size.width = width;
  v108.size.height = height;
  v85 = CGRectGetWidth(v108);
  v109.origin.x = v27;
  v109.origin.y = v28;
  v109.size.width = v29;
  v109.size.height = v30;
  v66 = CGRectGetWidth(v109);
  if (v85 > v66)
    v66 = v85;
  v86 = v66;
  v110.origin.x = x;
  v110.origin.y = y;
  v110.size.width = width;
  v110.size.height = height;
  v82 = CGRectGetHeight(v110);
  v111.origin.x = v27;
  v111.origin.y = v28;
  v111.size.width = v29;
  v111.size.height = v30;
  v67 = CGRectGetHeight(v111);
  if (v82 > v67)
    v68 = v82;
  else
    v68 = v67;
  v69 = objc_msgSend(objc_allocWithZone((Class)PKImageRenderer), sel_initWithSize_scale_, v86, v68, 2.0);
  *(_QWORD *)(v0 + 1288) = v69;
  v70 = objc_msgSend(v77, sel_traitCollection);
  v71 = objc_msgSend(v70, sel_userInterfaceStyle);

  objc_msgSend(v69, sel_setInvertColors_, v71 == (id)2);
  PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(v65, 0, 0);
  *(_QWORD *)(v0 + 1296) = v72;
  PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(v64, 1, 0);
  *(_QWORD *)(v0 + 1304) = v73;
  specialized _arrayForceCast<A, B>(_:)(v65);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 1312) = isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 248) = v0 + 936;
  *(_QWORD *)(v0 + 208) = v0;
  *(_QWORD *)(v0 + 216) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  *(_QWORD *)(v0 + 704) = swift_continuation_init();
  *(_QWORD *)(v0 + 672) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 680) = 0x40000000;
  *(_QWORD *)(v0 + 688) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
  *(_QWORD *)(v0 + 696) = &block_descriptor_13;
  objc_msgSend(v69, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 672, x, y, width, height, 2.0);
  return swift_continuation_await();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  void *v10;
  void *v11;

  v1 = *(void **)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 1320) = v2;

  if (v2)
  {
    v3 = *(void **)(v0 + 1288);
    v4 = *(double *)(v0 + 864);
    v5 = *(double *)(v0 + 872);
    v6 = *(double *)(v0 + 880);
    v7 = *(double *)(v0 + 888);
    specialized _arrayForceCast<A, B>(_:)(*(_QWORD *)(v0 + 968));
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1328) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v0 + 952;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    *(_QWORD *)(v0 + 824) = swift_continuation_init();
    *(_QWORD *)(v0 + 792) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 800) = 0x40000000;
    *(_QWORD *)(v0 + 808) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(_QWORD *)(v0 + 816) = &block_descriptor_14;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 792, v4, v5, v6, v7, 2.0);
    return swift_continuation_await();
  }
  else
  {
    v10 = *(void **)(v0 + 1288);
    v11 = *(void **)(v0 + 1136);

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  void *v10;
  void *v11;
  void *v12;

  v1 = *(void **)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 952);
  *(_QWORD *)(v0 + 1336) = v2;

  if (v2)
  {
    v3 = *(void **)(v0 + 1288);
    v4 = *(double *)(v0 + 832);
    v5 = *(double *)(v0 + 840);
    v6 = *(double *)(v0 + 848);
    v7 = *(double *)(v0 + 856);
    specialized _arrayForceCast<A, B>(_:)(*(_QWORD *)(v0 + 1296));
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1344) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 184) = v0 + 944;
    *(_QWORD *)(v0 + 144) = v0;
    *(_QWORD *)(v0 + 152) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    *(_QWORD *)(v0 + 784) = swift_continuation_init();
    *(_QWORD *)(v0 + 752) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 760) = 0x40000000;
    *(_QWORD *)(v0 + 768) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(_QWORD *)(v0 + 776) = &block_descriptor_15;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 752, v4, v5, v6, v7, 2.0);
    return swift_continuation_await();
  }
  else
  {
    v10 = *(void **)(v0 + 1320);
    v11 = *(void **)(v0 + 1288);
    v12 = *(void **)(v0 + 1136);

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = *(void **)(v0 + 1344);
  v2 = *(_QWORD *)(v0 + 944);
  *(_QWORD *)(v0 + 1352) = v2;

  if (v2)
  {
    v3 = *(void **)(v0 + 1288);
    v4 = *(double *)(v0 + 864);
    v5 = *(double *)(v0 + 872);
    v6 = *(double *)(v0 + 880);
    v7 = *(double *)(v0 + 888);
    specialized _arrayForceCast<A, B>(_:)(*(_QWORD *)(v0 + 1304));
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1360) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 120) = v0 + 928;
    *(_QWORD *)(v0 + 80) = v0;
    *(_QWORD *)(v0 + 88) = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    *(_QWORD *)(v0 + 744) = swift_continuation_init();
    *(_QWORD *)(v0 + 712) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 720) = 0x40000000;
    *(_QWORD *)(v0 + 728) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    *(_QWORD *)(v0 + 736) = &block_descriptor_16;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v0 + 712, v4, v5, v6, v7, 2.0);
    return swift_continuation_await();
  }
  else
  {
    v10 = *(void **)(v0 + 1336);
    v11 = *(void **)(v0 + 1320);
    v12 = *(void **)(v0 + 1288);
    v13 = *(void **)(v0 + 1136);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(void **)(v0 + 1360);
  v2 = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 1368) = v2;

  if (v2)
  {
    v29 = *(_QWORD *)(v0 + 1272);
    v30 = *(_QWORD *)(v0 + 1280);
    v28 = *(_OWORD *)(v0 + 1256);
    v3 = *(double *)(v0 + 1248);
    v4 = *(double *)(v0 + 1240);
    v5 = *(double *)(v0 + 1232);
    v6 = *(double *)(v0 + 1224);
    v26 = *(double *)(v0 + 1216);
    v27 = *(double *)(v0 + 1200);
    v24 = *(double *)(v0 + 1208);
    v25 = *(double *)(v0 + 1192);
    v7 = *(void **)(v0 + 1136);
    v8 = *(_QWORD *)(v0 + 1008);
    v9 = *(_QWORD *)(v0 + 968);
    v10 = *(_QWORD *)(v0 + 960);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6C50]), sel_initWithFrame_device_, MTLCreateSystemDefaultDevice(), *(double *)(v0 + 896), *(double *)(v0 + 904), *(double *)(v0 + 912), *(double *)(v0 + 920));
    *(_QWORD *)(v0 + 1376) = v11;
    swift_unknownObjectRelease();
    v12 = objc_msgSend(v11, sel_layer);
    v13 = objc_msgSend((id)objc_opt_self(), sel_orangeColor);
    v14 = objc_msgSend(v13, sel_CGColor);

    objc_msgSend(v12, sel_setBorderColor_, v14);
    objc_msgSend(v11, sel_setOpaque_, 0);
    objc_msgSend(v11, sel_setColorPixelFormat_, 80);
    objc_msgSend(v11, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v7, sel_addSubview_, v11);
    objc_msgSend(v11, sel_setPaused_, 1);
    objc_msgSend(v11, sel_setHidden_, 1);
    v15 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v8, 1, 1, v15);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = v10;
    *(_QWORD *)(v16 + 40) = v9;
    *(double *)(v16 + 48) = v6;
    *(double *)(v16 + 56) = v5;
    *(double *)(v16 + 64) = v4;
    *(double *)(v16 + 72) = v3;
    *(_OWORD *)(v16 + 80) = v28;
    *(_QWORD *)(v16 + 96) = v29;
    *(_QWORD *)(v16 + 104) = v30;
    *(double *)(v16 + 112) = v24 / v4;
    *(_QWORD *)(v16 + 120) = 0;
    *(_QWORD *)(v16 + 128) = 0;
    *(double *)(v16 + 136) = v26 / v3;
    *(double *)(v16 + 144) = v25 - v6 * (v24 / v4);
    *(double *)(v16 + 152) = v27 - v5 * (v26 / v3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 1384) = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ9PencilKit13PKRefineMorphV8GridMeshV_ALt_Tgm5(v8, (uint64_t)&async function pointer to partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:), v16);
    outlined destroy of TaskPriority?(v8);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1392) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKRefineMorph.GridMesh, PKRefineMorph.GridMesh));
    *v17 = v0;
    v17[1] = PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
    return Task<>.value.getter();
  }
  else
  {
    v19 = *(void **)(v0 + 1352);
    v20 = *(void **)(v0 + 1336);
    v21 = *(void **)(v0 + 1320);
    v22 = *(void **)(v0 + 1288);
    v23 = *(void **)(v0 + 1136);

    swift_release();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

id PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id result;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  os_signpost_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  os_signpost_id_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 1320);
  swift_release();
  v2 = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 416) = v2;
  v3 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 448) = v3;
  v4 = *(_OWORD *)(v0 + 352);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 480) = v4;
  v5 = *(_OWORD *)(v0 + 384);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 368);
  *(_OWORD *)(v0 + 512) = v5;
  result = objc_msgSend(v1, sel_CGImage);
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = result;
  result = objc_msgSend(*(id *)(v0 + 1336), sel_CGImage);
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = result;
  result = objc_msgSend(*(id *)(v0 + 1352), sel_CGImage);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = result;
  result = objc_msgSend(*(id *)(v0 + 1368), sel_CGImage);
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v10 = result;
  v11 = *(void **)(v0 + 1376);
  v54 = *(_QWORD *)(v0 + 1144);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1152);
  v48 = *(_QWORD *)(v0 + 1072);
  v51 = *(_QWORD *)(v0 + 1056);
  v12 = *(_QWORD *)(v0 + 976);
  v13 = objc_allocWithZone((Class)type metadata accessor for RefineRenderer());
  v14 = v11;
  v15 = (void *)RefineRenderer.init(metalKitView:from:to:image:toImage:depth:toDepth:)(v14, (_QWORD *)(v0 + 400), (_QWORD *)(v0 + 464), v7, v8, v9, v10);
  objc_msgSend(v14, sel_setDelegate_, v15);
  v16 = *(void **)(v12 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  *(_QWORD *)(v12 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = v15;
  v17 = v15;

  v18 = *(void **)(v12 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  *(_QWORD *)(v12 + OBJC_IVAR___PKTiledViewAnimationController_mtkView) = v14;
  v19 = v14;

  v20 = objc_msgSend(v19, sel_layer);
  objc_msgSend(v20, sel_setDisableUpdateMask_, 2);

  objc_msgSend(v19, sel_draw);
  v57(v48, v54, v51);
  v21 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v22 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 992);
    v25 = *(_QWORD *)(v0 + 984);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v47 = v17;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25) == *MEMORY[0x1E0DF2190])
    {
      v26 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 992) + 8))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 984));
      v26 = "";
    }
    v50 = *(void **)(v0 + 1376);
    v42 = *(void **)(v0 + 1368);
    v40 = *(void **)(v0 + 1336);
    v41 = *(void **)(v0 + 1352);
    v33 = *(void **)(v0 + 1320);
    v34 = *(void **)(v0 + 1288);
    v59 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
    v61 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
    v44 = *(void **)(v0 + 1136);
    v46 = *(void **)(v0 + 1128);
    v53 = *(_QWORD *)(v0 + 1056);
    v56 = *(_QWORD *)(v0 + 1072);
    v35 = *(_QWORD *)(v0 + 1040);
    v36 = *(_QWORD *)(v0 + 1032);
    v37 = *(_QWORD *)(v0 + 1016);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1168))(v35, v36, v37);
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    v39 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1BE213000, v21, v22, v39, "Refine Animation Setup", v26, v38, 2u);
    MEMORY[0x1C3B80274](v38, -1, -1);

    swift_release();
    v59(v36, v37);
    v61(v56, v53);
    swift_release();
    v59(v35, v37);
  }
  else
  {
    v27 = *(void **)(v0 + 1376);
    v28 = *(void **)(v0 + 1368);
    v43 = *(void **)(v0 + 1352);
    v45 = *(void **)(v0 + 1336);
    v49 = *(void **)(v0 + 1320);
    v58 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
    v60 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
    v29 = *(void **)(v0 + 1136);
    v30 = *(void **)(v0 + 1128);
    v52 = *(_QWORD *)(v0 + 1056);
    v55 = *(_QWORD *)(v0 + 1072);
    v31 = *(_QWORD *)(v0 + 1032);
    v32 = *(_QWORD *)(v0 + 1016);

    swift_release();
    v58(v31, v32);
    v60(v55, v52);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (id)(*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  outlined init with take of UIImage?((uint64_t)&v6, v3);
  return swift_continuation_resume();
}

uint64_t closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  *(_QWORD *)(v14 + 104) = a14;
  *(double *)(v14 + 88) = a8;
  *(double *)(v14 + 96) = a9;
  *(double *)(v14 + 72) = a6;
  *(double *)(v14 + 80) = a7;
  *(double *)(v14 + 56) = a4;
  *(double *)(v14 + 64) = a5;
  *(double *)(v14 + 40) = a2;
  *(double *)(v14 + 48) = a3;
  *(_QWORD *)(v14 + 24) = a12;
  *(_QWORD *)(v14 + 32) = a13;
  *(_QWORD *)(v14 + 16) = a1;
  return swift_task_switch();
}

uint64_t closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[8];

  v1 = *(_OWORD **)(v0 + 16);
  specialized static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(CGAffineTransform **)(v0 + 104), v10, *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
  v3 = v10[2];
  v2 = v10[3];
  v5 = v10[6];
  v4 = v10[7];
  v6 = v10[1];
  v8 = v10[4];
  v7 = v10[5];
  *v1 = v10[0];
  v1[1] = v6;
  v1[2] = v3;
  v1[3] = v2;
  v1[4] = v8;
  v1[5] = v7;
  v1[6] = v5;
  v1[7] = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ9PencilKit13PKRefineMorphV8GridMeshV_ALt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v7);
  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v7);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v10 = dispatch thunk of Actor.unownedExecutor.getter();
      v12 = v11;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v10 = 0;
  v12 = 0;
LABEL_6:
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKRefineMorph.GridMesh, PKRefineMorph.GridMesh));
  if (v12 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v10;
    v15[3] = v12;
  }
  return swift_task_create();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  _QWORD *v0;
  void *v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD *v8;

  v1 = (void *)v0[7];
  v3 = (void *)v0[5];
  v2 = (const void *)v0[6];
  swift_release();
  v0[9] = _Block_copy(v2);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[10] = v4;
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[11] = v5;
  v0[2] = v3;
  v6 = v3;
  v7 = v1;
  v8 = (_QWORD *)swift_task_alloc();
  v0[12] = v8;
  *v8 = v0;
  v8[1] = @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  return PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(v4, v5, v0 + 2);
}

{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD))(*v0 + 72);
  v2 = *(void **)(*v0 + 56);
  v3 = *(void **)(*v0 + 40);
  v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[44] = a1;
  v3[45] = v2;
  v5 = type metadata accessor for OSSignpostError();
  v3[46] = v5;
  v3[47] = *(_QWORD *)(v5 - 8);
  v3[48] = swift_task_alloc();
  v6 = type metadata accessor for OSSignpostID();
  v3[49] = v6;
  v3[50] = *(_QWORD *)(v6 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  v7 = type metadata accessor for OSSignposter();
  v3[54] = v7;
  v3[55] = *(_QWORD *)(v7 - 8);
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  v8 = swift_task_alloc();
  v9 = *a2;
  v3[58] = v8;
  v3[59] = v9;
  type metadata accessor for MainActor();
  v3[60] = static MainActor.shared.getter();
  v3[61] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[62] = v10;
  return swift_task_switch();
}

uint64_t PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  NSObject *v12;
  os_signpost_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint8_t *v18;
  os_signpost_id_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  double x;
  double y;
  double width;
  double height;
  uint64_t v32;
  void **v33;
  void *v34;
  void *v35;
  id v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  double v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  Class isa;
  uint64_t v52;
  _QWORD *v53;
  void (*v55)(uint64_t, uint64_t);
  void *v56;
  double v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;

  v1 = (void *)MEMORY[0x1C3B8031C](*(_QWORD *)(v0 + 360) + OBJC_IVAR___PKTiledViewAnimationController_tiledView);
  *(_QWORD *)(v0 + 504) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_scrollView);
    *(_QWORD *)(v0 + 512) = v3;
    if (v3)
    {
      v4 = v3;
      if (one-time initialization token for default != -1)
        swift_once();
      v56 = v4;
      v5 = *(_QWORD *)(v0 + 456);
      v6 = *(_QWORD *)(v0 + 464);
      v8 = *(_QWORD *)(v0 + 432);
      v7 = *(_QWORD *)(v0 + 440);
      v9 = __swift_project_value_buffer(v8, (uint64_t)static OSSignposter.default);
      *(_QWORD *)(v0 + 520) = v9;
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      *(_QWORD *)(v0 + 528) = v10;
      v10(v6, v9, v8);
      v10(v5, v9, v8);
      OSSignposter.logHandle.getter();
      OSSignpostID.init(log:)();
      v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      *(_QWORD *)(v0 + 536) = v11;
      v55 = v11;
      v11(v5, v8);
      v12 = OSSignposter.logHandle.getter();
      v13 = static os_signpost_type_t.begin.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v14 = *(_QWORD *)(v0 + 416);
        v16 = *(_QWORD *)(v0 + 392);
        v15 = *(_QWORD *)(v0 + 400);
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
        v17(v14, *(_QWORD *)(v0 + 424), v16);
        v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v18 = 0;
        v19 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1BE213000, v12, v13, v19, "Stroke In Animation Setup", "", v18, 2u);
        MEMORY[0x1C3B80274](v18, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      }
      else
      {
        v20 = *(_QWORD *)(v0 + 400);

        v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
      }
      *(_QWORD *)(v0 + 544) = v17;
      v21 = *(_QWORD *)(v0 + 464);
      v23 = *(_QWORD *)(v0 + 424);
      v22 = *(_QWORD *)(v0 + 432);
      v25 = *(_QWORD *)(v0 + 392);
      v24 = *(_QWORD *)(v0 + 400);
      v26 = *(_QWORD *)(v0 + 352);
      v17(*(_QWORD *)(v0 + 416), v23, v25);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      *(_QWORD *)(v0 + 552) = OSSignpostIntervalState.init(id:isOpen:)();
      v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      *(_QWORD *)(v0 + 560) = v27;
      v27(v23, v25);
      v55(v21, v22);
      x = *MEMORY[0x1E0C9D628];
      y = *(double *)(MEMORY[0x1E0C9D628] + 8);
      width = *(double *)(MEMORY[0x1E0C9D628] + 16);
      height = *(double *)(MEMORY[0x1E0C9D628] + 24);
      v32 = *(_QWORD *)(v26 + 16);
      if (v32)
      {
        v33 = (void **)(*(_QWORD *)(v0 + 352) + 32);
        swift_bridgeObjectRetain();
        v34 = v56;
        do
        {
          v35 = *v33++;
          v36 = v35;
          objc_msgSend(v36, sel_renderBounds);
          v69.origin.x = v37;
          v69.origin.y = v38;
          v69.size.width = v39;
          v69.size.height = v40;
          v61.origin.x = x;
          v61.origin.y = y;
          v61.size.width = width;
          v61.size.height = height;
          v62 = CGRectUnion(v61, v69);
          x = v62.origin.x;
          y = v62.origin.y;
          width = v62.size.width;
          height = v62.size.height;

          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
      }
      else
      {
        v34 = v56;
      }
      objc_msgSend(v2, sel_transformFromStrokeSpaceToViewInDrawing_, *(_QWORD *)(v0 + 472));
      *(double *)(v0 + 272) = x;
      *(double *)(v0 + 280) = y;
      *(double *)(v0 + 288) = width;
      *(double *)(v0 + 296) = height;
      *(_OWORD *)(v0 + 144) = v58;
      *(_OWORD *)(v0 + 160) = v59;
      *(_OWORD *)(v0 + 176) = v60;
      v63.origin.x = x;
      v63.origin.y = y;
      v63.size.width = width;
      v63.size.height = height;
      v64 = CGRectApplyAffineTransform(v63, (CGAffineTransform *)(v0 + 144));
      objc_msgSend(v34, sel_convertRect_fromCoordinateSpace_, v2, v64.origin.x, v64.origin.y, v64.size.width, v64.size.height);
      v41 = v65.origin.x;
      v42 = v65.origin.y;
      v43 = v65.size.width;
      v44 = v65.size.height;
      *(CGRect *)(v0 + 304) = v65;
      v57 = CGRectGetWidth(v65);
      objc_msgSend(v34, sel_frame);
      if (v57 < CGRectGetWidth(v66))
      {
        v67.origin.x = v41;
        v67.origin.y = v42;
        v67.size.width = v43;
        v67.size.height = v44;
        v45 = CGRectGetHeight(v67);
        objc_msgSend(v34, sel_frame);
        if (v45 < CGRectGetHeight(v68))
        {
          v46 = *(_QWORD *)(v0 + 352);
          v47 = objc_msgSend(objc_allocWithZone((Class)PKImageRenderer), sel_initWithSize_scale_, width, height, 2.0);
          *(_QWORD *)(v0 + 568) = v47;
          v48 = objc_msgSend(v2, sel_traitCollection);
          v49 = objc_msgSend(v48, sel_userInterfaceStyle);

          objc_msgSend(v47, sel_setInvertColors_, v49 == (id)2);
          PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(v46, 1, 1);
          *(_QWORD *)(v0 + 576) = v50;
          specialized _arrayForceCast<A, B>(_:)(v46);
          isa = Array._bridgeToObjectiveC()().super.isa;
          *(_QWORD *)(v0 + 584) = isa;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 120) = v0 + 344;
          *(_QWORD *)(v0 + 80) = v0;
          *(_QWORD *)(v0 + 88) = PKTiledViewAnimationController.setupStrokeInAnimation(to:in:);
          v52 = swift_continuation_init();
          *(_QWORD *)(v0 + 192) = MEMORY[0x1E0C809B0];
          v53 = (_QWORD *)(v0 + 192);
          v53[1] = 0x40000000;
          v53[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
          v53[3] = &block_descriptor_11;
          v53[4] = v52;
          objc_msgSend(v47, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v53, x, y, width, height, 2.0);
          return swift_continuation_await();
        }
      }
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
    }

  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Class isa;
  uint64_t v9;
  _QWORD *v10;
  void *v12;
  void *v13;

  v1 = *(void **)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 592) = v2;

  if (v2)
  {
    v3 = *(void **)(v0 + 568);
    v4 = *(double *)(v0 + 272);
    v5 = *(double *)(v0 + 280);
    v6 = *(double *)(v0 + 288);
    v7 = *(double *)(v0 + 296);
    specialized _arrayForceCast<A, B>(_:)(*(_QWORD *)(v0 + 576));
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 600) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v0 + 336;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = PKTiledViewAnimationController.setupStrokeInAnimation(to:in:);
    v9 = swift_continuation_init();
    *(_QWORD *)(v0 + 232) = MEMORY[0x1E0C809B0];
    v10 = (_QWORD *)(v0 + 232);
    v10[1] = 0x40000000;
    v10[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned UIImage?) -> () with result type UIImage?;
    v10[3] = &block_descriptor_12;
    v10[4] = v9;
    objc_msgSend(v3, sel_renderStrokes_clippedToStrokeSpaceRect_scale_completion_, isa, v10, v4, v5, v6, v7, 2.0);
    return swift_continuation_await();
  }
  else
  {
    v12 = *(void **)(v0 + 568);
    v13 = *(void **)(v0 + 512);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  return swift_task_switch();
}

id PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id result;
  void *v10;
  void *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  NSObject *v24;
  os_signpost_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  os_signpost_id_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t, uint64_t);
  id v52;
  void (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t, uint64_t);
  void *v55;

  v1 = *(void **)(v0 + 600);
  swift_release();
  v2 = *(void **)(v0 + 336);

  v3 = *(void **)(v0 + 592);
  if (!v2)
  {
    v30 = *(void **)(v0 + 568);
    v31 = *(void **)(v0 + 512);

    swift_release();
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(void **)(v0 + 512);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6C50]), sel_initWithFrame_device_, MTLCreateSystemDefaultDevice(), *(double *)(v0 + 304), *(double *)(v0 + 312), *(double *)(v0 + 320), *(double *)(v0 + 328));
  swift_unknownObjectRelease();
  v6 = objc_msgSend(v5, sel_layer);
  v7 = objc_msgSend((id)objc_opt_self(), sel_orangeColor);
  v8 = objc_msgSend(v7, sel_CGColor);

  objc_msgSend(v6, sel_setBorderColor_, v8);
  objc_msgSend(v5, sel_setOpaque_, 0);
  objc_msgSend(v5, sel_setColorPixelFormat_, 80);
  objc_msgSend(v5, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v4, sel_addSubview_, v5);
  objc_msgSend(v5, sel_setPaused_, 1);
  objc_msgSend(v5, sel_setHidden_, 1);
  result = objc_msgSend(v3, sel_CGImage);
  if (result)
  {
    v10 = result;
    v55 = v2;
    result = objc_msgSend(v2, sel_CGImage);
    if (result)
    {
      v11 = result;
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
      v13 = *(_QWORD *)(v0 + 520);
      v14 = *(_QWORD *)(v0 + 448);
      v15 = *(_QWORD *)(v0 + 432);
      v16 = *(_QWORD *)(v0 + 360);
      v17 = objc_allocWithZone((Class)type metadata accessor for StrokeInRenderer());
      v18 = v5;
      v19 = (void *)StrokeInRenderer.init(metalKitView:toImage:toDepth:)(v18, v10, v11);
      objc_msgSend(v18, sel_setDelegate_, v19);
      v20 = *(void **)(v16 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
      *(_QWORD *)(v16 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = v19;
      v52 = v19;

      v21 = *(void **)(v16 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
      *(_QWORD *)(v16 + OBJC_IVAR___PKTiledViewAnimationController_mtkView) = v18;
      v22 = v18;

      v23 = objc_msgSend(v22, sel_layer);
      objc_msgSend(v23, sel_setDisableUpdateMask_, 2);

      objc_msgSend(v22, sel_draw);
      v12(v14, v13, v15);
      v24 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v25 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v27 = *(_QWORD *)(v0 + 376);
        v26 = *(_QWORD *)(v0 + 384);
        v28 = *(_QWORD *)(v0 + 368);
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 88))(v26, v28) == *MEMORY[0x1E0DF2190])
        {
          v29 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 368));
          v29 = "";
        }
        v39 = *(void **)(v0 + 568);
        v54 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
        v45 = *(void **)(v0 + 592);
        v46 = *(void **)(v0 + 512);
        v49 = *(_QWORD *)(v0 + 448);
        v51 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
        v47 = *(void **)(v0 + 504);
        v48 = *(_QWORD *)(v0 + 432);
        v41 = *(_QWORD *)(v0 + 408);
        v40 = *(_QWORD *)(v0 + 416);
        v42 = *(_QWORD *)(v0 + 392);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544))(v40, v41, v42);
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        v44 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1BE213000, v24, v25, v44, "Stroke In Animation Setup", v29, v43, 2u);
        MEMORY[0x1C3B80274](v43, -1, -1);

        v51(v41, v42);
        v54(v49, v48);
        swift_release();
        v51(v40, v42);
      }
      else
      {
        v32 = *(void **)(v0 + 592);
        v50 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
        v53 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
        v34 = *(void **)(v0 + 504);
        v33 = *(void **)(v0 + 512);
        v35 = *(_QWORD *)(v0 + 448);
        v36 = *(_QWORD *)(v0 + 432);
        v37 = *(_QWORD *)(v0 + 408);
        v38 = *(_QWORD *)(v0 + 392);

        v50(v37, v38);
        v53(v35, v36);
        swift_release();
      }
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  uint64_t *v0;
  void *v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v1 = (void *)v0[6];
  v3 = (void *)v0[4];
  v2 = (const void *)v0[5];
  swift_release();
  v0[8] = (uint64_t)_Block_copy(v2);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v4;
  v0[2] = (uint64_t)v3;
  v5 = v3;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:);
  return PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)(v4, v0 + 2);
}

{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD))(*v0 + 64);
  v2 = *(void **)(*v0 + 48);
  v3 = *(void **)(*v0 + 32);
  v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

Swift::Void __swiftcall PKTiledViewAnimationController.startRefineAnimation(duration:)(Swift::Double duration)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(char **)(v1 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  if (v2)
  {
    *(Swift::Double *)&v2[OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_duration] = duration;
    v3 = v2;
    static Date.timeIntervalSinceReferenceDate.getter();
    *(_QWORD *)&v3[OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_startTime] = v4;

  }
  v5 = OBJC_IVAR___PKTiledViewAnimationController_mtkView;
  v6 = *(void **)(v1 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  if (v6)
  {
    objc_msgSend(v6, sel_setPaused_, 0, duration);
    v7 = *(void **)(v1 + v5);
    if (v7)
      objc_msgSend(v7, sel_setHidden_, 0);
  }
}

uint64_t PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[4] = a2;
  v4[5] = v3;
  v4[3] = a1;
  v6 = type metadata accessor for ContinuousClock();
  v4[6] = v6;
  v4[7] = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v8 = *a3;
  v4[8] = v7;
  v4[9] = v8;
  v4[10] = type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  v4[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v9;
  return swift_task_switch();
}

uint64_t PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = MEMORY[0x1C3B8031C](*(_QWORD *)(v0 + 40) + OBJC_IVAR___PKTiledViewAnimationController_tiledView);
  *(_QWORD *)(v0 + 112) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = PKTiledViewAnimationController.refine(from:to:in:);
    return PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (_QWORD *)(v0 + 16));
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  id *v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v15;
    v4 = (id *)(v1 + 32);
    do
    {
      v5 = *v4;
      v6 = objc_msgSend(v5, sel_copyForMutation);
      objc_msgSend(v6, sel__setHidden_, 1);

      v8 = *(_QWORD *)(v15 + 16);
      v7 = *(_QWORD *)(v15 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v15 + 16) = v8 + 1;
      *(_QWORD *)(v15 + 8 * v8 + 32) = v6;
      ++v4;
      --v2;
    }
    while (v2);
  }
  v0[16] = v3;
  v9 = v0[14];
  v10 = v0[9];
  v11 = v0[5];
  v0[17] = static MainActor.shared.getter();
  v12 = (_QWORD *)swift_task_alloc();
  v0[18] = v12;
  v12[2] = v9;
  v12[3] = v3;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = 0x3FE8000000000000;
  v13 = (_QWORD *)swift_task_alloc();
  v0[19] = v13;
  *v13 = v0;
  v13[1] = PKTiledViewAnimationController.refine(from:to:in:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.milliseconds(_:)();
  v3 = v2;
  ContinuousClock.init()();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *v4 = v0;
  v4[1] = PKTiledViewAnimationController.refine(from:to:in:);
  return v6(v1, v3, 0, 0, 1);
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[7];
  v3 = v2[8];
  v5 = v2[6];
  if (v0)
  {

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v2[8], v2[6]);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = (void *)v0[14];
  v2 = v0[9];
  v3 = v0[5];
  v0[21] = objc_msgSend(v1, sel_didChangeDrawing_undoable_, v2, 1);
  v0[22] = static MainActor.shared.getter();
  v4 = (_QWORD *)swift_task_alloc();
  v0[23] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[24] = v5;
  *v5 = v0;
  v5[1] = PKTiledViewAnimationController.refine(from:to:in:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  v2 = *(void **)(v1 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  if (v2)
    objc_msgSend(v2, sel_removeFromSuperview);
  v3 = *(void **)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(void **)(v4 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  *(_QWORD *)(v4 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = 0;

  v6 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

void closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, void *a2, double a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  _QWORD aBlock[6];

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78]();
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a6;
  *(double *)(v16 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_10;
  v17 = _Block_copy(aBlock);
  v18 = a5;
  v19 = a6;
  swift_release();
  objc_msgSend(a2, sel__setAdditionalStrokes_inDrawing_invalidateTiles_forceOffscreen_completion_, isa, v18, 0, 1, v17);
  _Block_release(v17);

}

uint64_t closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(Swift::Double a1)
{
  PKTiledViewAnimationController.startRefineAnimation(duration:)(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78]();
  objc_msgSend(a2, sel_didChangeDrawing_, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  v13 = _Block_copy(aBlock);
  v14 = a3;
  v15 = a4;
  swift_release();
  objc_msgSend(a2, sel__setAdditionalStrokes_inDrawing_completion_, 0, v14, v13);
  _Block_release(v13);

}

uint64_t closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + OBJC_IVAR___PKTiledViewAnimationController_mtkView);
  if (v2)
    objc_msgSend(v2, sel_removeFromSuperview);
  v3 = *(void **)(a1 + OBJC_IVAR___PKTiledViewAnimationController_renderer);
  *(_QWORD *)(a1 + OBJC_IVAR___PKTiledViewAnimationController_renderer) = 0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t *v0;
  void *v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD *v8;

  v1 = (void *)v0[7];
  v3 = (void *)v0[5];
  v2 = (const void *)v0[6];
  swift_release();
  v0[9] = (uint64_t)_Block_copy(v2);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[10] = v4;
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[11] = v5;
  v0[2] = (uint64_t)v3;
  v6 = v3;
  v7 = v1;
  v8 = (_QWORD *)swift_task_alloc();
  v0[12] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:);
  return PKTiledViewAnimationController.refine(from:to:in:)(v4, v5, v0 + 2);
}

uint64_t @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  void *v5;
  uint64_t v7;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 72);
  v4 = *(void **)(*v1 + 56);
  v5 = *(void **)(*v1 + 40);
  v7 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v7 + 8))();
}

double PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  id *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int v15;
  int v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return 0.0;
  v5 = v3;
  v9 = (id *)(a1 + 32);
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0.0;
  do
  {
    v12 = *(_QWORD *)(a1 + 8 * v10++ + 32);
    v25 = v12;
    PKStroke.approximateLen.getter();
    v11 = v11 + v13;
  }
  while (v4 != v10);
  swift_bridgeObjectRelease();
  v25 = 0;
  v24 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v14 = v24;
  v15 = a3 & 1;
  v16 = a2 & 1;
  do
  {
    v22 = *v9;
    v17 = v22;
    closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(&v22, v15, v5, (uint64_t)&v25, v16, &v23);

    v18 = v23;
    v24 = v14;
    v20 = *(_QWORD *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 24);
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1);
      v14 = v24;
    }
    *(_QWORD *)(v14 + 16) = v20 + 1;
    *(_QWORD *)(v14 + 8 * v20 + 32) = v18;
    ++v9;
    --v4;
  }
  while (v4);
  return v11;
}

uint64_t PKStroke.approximateLen.getter()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;

  v1 = *v0;
  v2 = objc_msgSend(v1, sel_path);
  if (!v2)
    v2 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  v3 = objc_msgSend(v1, sel_path);
  if (!v3)
    v3 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);

  result = (uint64_t)objc_msgSend(v3, sel_count);
  if (result < 1)
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = result;
  result = (uint64_t)objc_msgSend(v3, sel_count);
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (result >= v5)
  {
    v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVs5SliceVyAJGG_12CoreGraphics7CGFloatVs5NeverOTB503_s9f4Kit8h19V14approximateLen12k9Graphics7M26VvgAgA0C5PointV_AIt_tXEfU_Tf1cn_n(v2, 1, v5, (char *)v3);

    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      if (v7 == 1)
      {
        v8 = 0;
        v9 = 0.0;
      }
      else
      {
        v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
        v10 = (double *)(v6 + 40);
        v9 = 0.0;
        v11 = v7 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v9 = v9 + *(v10 - 1) + *v10;
          v10 += 2;
          v11 -= 2;
        }
        while (v11);
        if (v7 == v8)
          return swift_bridgeObjectRelease();
      }
      v12 = v7 - v8;
      v13 = (double *)(v6 + 8 * v8 + 32);
      do
      {
        v14 = *v13++;
        v9 = v9 + v14;
        --v12;
      }
      while (v12);
    }
    return swift_bridgeObjectRelease();
  }
LABEL_20:
  __break(1u);
  return result;
}

void closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(id *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  char **v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t inited;
  char *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  char *v65;
  char *v66;
  id v67;
  Class isa;
  Class v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  int v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v85 = a5;
  v84 = a4;
  v86 = a2;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78]();
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = objc_msgSend(v13, sel_path);
  if (!v14)
    v14 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);

  v15 = objc_msgSend(v14, sel_count);
  if (!v15)
  {
    *a6 = v13;
    v28 = v13;
    return;
  }
  v78 = v12;
  v79 = v10;
  v80 = v9;
  v81 = a6;
  v16 = v13;
  v17 = objc_msgSend(v16, "ink");
  v18 = v16;
  if (!v17)
  {
    v18 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v19 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v17 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v19, v18);

  }
  v77 = v17;
  v20 = objc_msgSend(v17, sel_behavior);
  if ((v86 & 1) != 0)
    v21 = 2;
  else
    v21 = 1;
  v22 = objc_msgSend(objc_allocWithZone((Class)PKInkRenderingDescriptor), sel_initWithType_blendMode_alternateMode_particleDescriptor_secondaryParticleDescriptor_, 0, 0, v21, 0, 0);
  v23 = OBJC_IVAR___PKTiledViewAnimationController_newBehavior;
  v24 = *(void **)(a3 + OBJC_IVAR___PKTiledViewAnimationController_newBehavior);
  v25 = &selRef_completedUnitCount;
  v76 = v22;
  if (v24)
  {
    v26 = v24;
    v27 = v24;
  }
  else
  {
    v29 = v22;
    *(_QWORD *)&v83 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkBehavior);
    v92 = 0x3FF0000000000000uLL;
    v93 = 0;
    v94 = 0x3FF0000000000000;
    v95 = 0;
    v96 = 0;
    *(_QWORD *)&v82 = v29;
    LODWORD(v75) = objc_msgSend(v20, sel_useUnclampedWeight);
    v74 = objc_msgSend(v20, sel_smoothingDescriptor);
    v73 = objc_msgSend(v20, sel_featheringDescriptor);
    v72 = objc_msgSend(v20, sel_pencilFeatheringDescriptor);
    v71 = objc_msgSend(v20, sel_version);
    v30 = objc_msgSend(v20, sel_variant);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    objc_msgSend(v20, sel_defaultWidth);
    v35 = v34;
    v36 = objc_msgSend(v20, sel_inkFunctions);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkFunction);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v25 = &selRef_completedUnitCount;
    v27 = PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)((void *)v82, &v92, (char)v75, v74, v73, v72, 0, 0x6874706564, 1.0, 1.0, 1.0, v35, 1.0, 0.0, 0xE500000000000000, (uint64_t)v71, v31, v33, MEMORY[0x1E0DEE9D8],
            0,
            0);
    v26 = 0;
    v24 = *(void **)(a3 + v23);
  }
  *(_QWORD *)(a3 + v23) = v27;
  v37 = v27;
  v38 = v26;

  v39 = (void *)objc_opt_self();
  v40 = v37;
  v41 = objc_msgSend(v39, sel_blackColor);
  v42 = objc_allocWithZone((Class)PKInk);
  v43 = (void *)MEMORY[0x1C3B7E3A8](0x746C7561666564, 0xE700000000000000);
  v44 = objc_msgSend(v42, sel_initWithBehavior_color_version_variant_weight_, v40, v41, 3, v43, 0.0);

  v75 = v40;
  v45 = objc_msgSend(v16, sel_copyForMutation);
  v46 = v44;
  v47 = objc_msgSend(v45, sel_path);
  if (!v47)
    v47 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  objc_msgSend(v45, sel_transform);
  v83 = v88;
  v82 = v89;
  v48 = v90;
  v49 = v91;
  v50 = objc_msgSend(v45, sel_mask);
  v51 = objc_msgSend(v45, sel__randomSeed);
  v52 = objc_allocWithZone((Class)PKStroke);
  v88 = v83;
  v89 = v82;
  v90 = v48;
  v91 = v49;
  v53 = objc_msgSend(v52, sel_initWithInk_strokePath_transform_mask_randomSeed_, v46, v47, &v88, v50, v51);

  *(_QWORD *)&v88 = v53;
  v54 = objc_msgSend(v53, sel_path);
  if (!v54)
    v54 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  v55 = objc_msgSend(v53, sel_path);
  if (!v55)
    v55 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  v56 = (uint64_t)objc_msgSend(v55, v25[168]);
  if (v56 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  v57 = v56;
  v58 = (unint64_t)objc_msgSend(v55, v25[168]);
  if ((v58 & 0x8000000000000000) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v58 < v57)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:

    __break(1u);
    goto LABEL_36;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE4F9590;
  v53 = objc_msgSend(v53, (SEL)&selRef_pencilSqueezeControllerDidChangePaletteViewVisibility_);
  if (!v53)
    v53 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
  if (!objc_msgSend(v53, v25[168]))
    goto LABEL_35;
  v60 = (char *)objc_msgSend(v53, v25[168]);
  v61 = (uint64_t)(v60 - 1);
  if (__OFSUB__(v60, 1))
    goto LABEL_33;
  v62 = objc_msgSend(v53, v25[168]);
  if (v61 < 0 || v61 >= (uint64_t)v62)
    goto LABEL_34;
  v63 = objc_msgSend(v53, sel_objectAtIndexedSubscript_, v61);
  if (v63)
  {
    v64 = v63;

    *(_QWORD *)(inited + 32) = v64;
    v65 = specialized static RangeReplaceableCollection.+ infix<A>(_:_:)(1, v57, v55, inited);
    swift_setDeallocating();
    swift_arrayDestroy();

    MEMORY[0x1E0C80A78]();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVSayAH0H5PointVGG_ALs5NeverOTB503_s9f5Kit13hj20VA2CIgnnr_AC_ACtACs5K11OIegnrzr_TRA3LIgnnr_Tf1cn_nTf4ng_n(v54, (uint64_t)v65, (void (*)(uint64_t *__return_ptr, void **, id *))partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:));
    swift_bridgeObjectRelease();

    v66 = v78;
    static Date.now.getter();
    v67 = objc_allocWithZone((Class)PKStrokePath);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v69 = Date._bridgeToObjectiveC()().super.isa;
    v70 = objc_msgSend(v67, sel_initWithControlPoints_creationDate_, isa, v69);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v66, v80);
    swift_bridgeObjectRelease();
    v87 = v70;
    PKStroke.path.setter(&v87);

    *v81 = v88;
    return;
  }
LABEL_36:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *specialized static RangeReplaceableCollection.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  uint64_t v7;
  char *result;
  uint64_t v9;
  char *v10;

  v7 = *(_QWORD *)(a4 + 16);
  result = (char *)objc_msgSend(a3, sel_count);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = (char *)objc_msgSend(a3, sel_count);
  if (a2 < 0 || (uint64_t)result < a2)
    goto LABEL_8;
  if (!__OFADD__(v7, a2 - a1))
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v7 + a2 - a1) & ~((v7 + a2 - a1) >> 63), 0, MEMORY[0x1E0DEE9D8]);
    specialized Array.append<A>(contentsOf:)(a1, a2, a3);
    v9 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v9);
    return v10;
  }
LABEL_9:
  __break(1u);
  return result;
}

id closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)@<X0>(void **a1@<X0>, id *a2@<X1>, double *a3@<X2>, char a4@<W3>, char a5@<W4>, void *a6@<X5>, _QWORD *a7@<X8>, double a8@<D0>)
{
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  id v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  id result;
  double v54;

  v14 = *a1;
  objc_msgSend(*a2, sel_location);
  v16 = v15;
  v18 = v17;
  objc_msgSend(v14, sel_location);
  *a3 = *a3 + sqrt((v16 - v19) * (v16 - v19) + (v18 - v20) * (v18 - v20));
  objc_msgSend(v14, sel_size);
  if ((a4 & 1) != 0)
  {
    v23 = *a3;
    if ((a5 & 1) != 0)
      v24 = pow(1.0 - v23 / a8, 4.0) + (1.0 - v23 / a8) * 0.1 * (1.0 - (1.0 - v23 / a8));
    else
      v24 = v23 * 1.2 / a8;
    v30 = fmin(v24, 1.0);
    if (v30 < 0.0)
      v30 = 0.0;
    v54 = v30;
    objc_msgSend(v14, sel__edgeWidth);
    v32 = v31;
    objc_msgSend(v14, sel_size);
    v34 = v32 + v33;
    objc_msgSend(v14, sel_size);
    v36 = v32 + v35;
  }
  else
  {
    v25 = v21;
    v26 = v22;
    v27 = objc_msgSend(a6, sel_renderingDescriptor);
    v28 = objc_msgSend(v27, sel_type);

    if (v28)
      objc_msgSend(v14, sel__edgeWidth);
    else
      v29 = -2.0;
    v37 = v25 + v29 + v25 + v29;
    v38 = v26 + v29 + v26 + v29;
    v34 = v37 + 2.0;
    v36 = v38 + 2.0;
    v54 = 1.0;
  }
  v39 = v14;
  objc_msgSend(v39, sel_location);
  v41 = v40;
  v43 = v42;
  objc_msgSend(v39, sel_timeOffset);
  v45 = v44;

  v46 = v39;
  objc_msgSend(v46, sel_force);
  v48 = v47;
  objc_msgSend(v46, sel_azimuth);
  v50 = v49;
  objc_msgSend(v46, sel_altitude);
  v52 = v51;

  result = objc_msgSend(objc_allocWithZone((Class)PKStrokePoint), sel_initWithLocation_timeOffset_size_opacity_force_azimuth_altitude_, v41, v43, v45, v34, v36, v54, v48, v50, v52);
  *a7 = result;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVs5SliceVyAJGG_12CoreGraphics7CGFloatVs5NeverOTB503_s9f4Kit8h19V14approximateLen12k9Graphics7M26VvgAgA0C5PointV_AIt_tXEfU_Tf1cn_n(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  char *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  char **v12;
  char *v13;
  char **v14;
  id v15;
  void *v16;
  char *v17;
  char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  char *v36;
  char *v37;
  id v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  char *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t result;
  id v52;
  char *v53;
  id v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v4 = a4;
  v6 = a1;
  v7 = specialized Zip2Sequence.underestimatedCount.getter(a1, a2, a3, a4);
  v58 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
LABEL_45:
    __break(1u);
LABEL_46:

    __break(1u);
    goto LABEL_47;
  }
  v52 = v6;
  v53 = v4;
  v57 = (char *)v7;
  if (v7)
  {
    if (a3 <= a2)
      v8 = a2;
    else
      v8 = a3;
    v56 = (char *)(v8 - a2);
    v9 = v6;
    v10 = v4;
    v11 = 0;
    v12 = &selRef_isScrollEnabled;
    v4 = v57;
    v55 = v9;
    while (v4 != v11)
    {
      if (v11 == objc_msgSend(v9, sel_count))
        goto LABEL_38;
      v13 = (char *)objc_msgSend(v9, v12[440], v11);
      if (!v13)
        goto LABEL_47;
      v4 = v13;
      if ((uint64_t)v11 >= (uint64_t)objc_msgSend(v9, sel_count))
        goto LABEL_39;
      if (!&v11[a2 - a3])
        goto LABEL_46;
      if (v56 == v11)
        goto LABEL_40;
      v14 = v12;
      v15 = objc_msgSend(v10, v12[440], &v11[a2]);
      if (!v15)
        goto LABEL_47;
      v16 = v15;
      v17 = (char *)objc_msgSend(v10, sel_count);
      if (a2 < 0 || (uint64_t)&v11[a2] >= (uint64_t)v17)
        goto LABEL_41;
      v18 = v4;
      objc_msgSend(v18, sel_location);
      v20 = v19;
      v22 = v21;

      v23 = v16;
      objc_msgSend(v23, sel_location);
      v25 = v24;
      v27 = v26;

      v29 = *(_QWORD *)(v58 + 16);
      v28 = *(_QWORD *)(v58 + 24);
      if (v29 >= v28 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
      ++v11;
      *(_QWORD *)(v58 + 16) = v29 + 1;
      *(double *)(v58 + 8 * v29 + 32) = sqrt((v20 - v25) * (v20 - v25) + (v22 - v27) * (v22 - v27));
      v4 = v57;
      v12 = v14;
      v9 = v55;
      if (v57 == v11)
      {
        v30 = (uint64_t)&v11[a2];
        v6 = v52;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v31 = v6;
  v32 = v4;
  v30 = a2;
  v4 = 0;
LABEL_21:
  if (v4 == objc_msgSend(v6, sel_count))
  {
LABEL_36:

    return v58;
  }
  v33 = v30;
  while (1)
  {
    v34 = objc_msgSend(v6, sel_objectAtIndexedSubscript_, v4);
    if (!v34)
      break;
    v35 = v34;
    if ((uint64_t)v4 >= (uint64_t)objc_msgSend(v6, sel_count))
      goto LABEL_42;
    if (a3 == v33)
    {

      v6 = v52;
      goto LABEL_36;
    }
    if (v30 < a2 || v33 >= a3)
      goto LABEL_43;
    v36 = v4;
    v37 = (char *)objc_msgSend(v53, sel_objectAtIndexedSubscript_, v33);
    if (!v37)
      break;
    v4 = v37;
    v38 = objc_msgSend(v53, sel_count);
    if (v30 < 0 || v33 >= (uint64_t)v38)
      goto LABEL_44;
    v39 = v35;
    objc_msgSend(v39, sel_location);
    v41 = v40;
    v43 = v42;

    v44 = v4;
    objc_msgSend(v44, sel_location);
    v46 = v45;
    v48 = v47;

    v50 = *(_QWORD *)(v58 + 16);
    v49 = *(_QWORD *)(v58 + 24);
    if (v50 >= v49 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1);
    *(_QWORD *)(v58 + 16) = v50 + 1;
    v4 = v36 + 1;
    *(double *)(v58 + 8 * v50 + 32) = sqrt((v41 - v46) * (v41 - v46) + (v43 - v48) * (v43 - v48));
    v6 = v52;
    ++v33;
    if (v36 + 1 == objc_msgSend(v52, sel_count))
      goto LABEL_36;
  }
LABEL_47:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id PKTiledViewAnimationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKTiledViewAnimationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PKTiledViewAnimationController()
{
  return objc_opt_self();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

id partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)@<X0>(void **a1@<X0>, id *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #2 in PKTiledViewAnimationController.strokesForAlphaImage(_:reverse:forStroking:)(a1, a2, *(double **)(v3 + 16), *(_BYTE *)(v3 + 24), *(_BYTE *)(v3 + 25), *(void **)(v3 + 40), a3, *(double *)(v3 + 32));
}

uint64_t specialized Zip2Sequence.underestimatedCount.getter(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = (uint64_t)objc_msgSend(a1, sel_count);
  result = (uint64_t)objc_msgSend(a1, sel_count);
  if (result < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  result = (uint64_t)objc_msgSend(a1, sel_count);
  if (v8 < 0 || result < v8)
    goto LABEL_12;
  result = (uint64_t)objc_msgSend(a4, sel_count);
  if (a2 < 0 || result < a2)
    goto LABEL_13;
  result = (uint64_t)objc_msgSend(a4, sel_count);
  if (a3 < 0 || result < a3)
    goto LABEL_14;
  if (a3 - a2 >= v8)
    return v8;
  else
    return a3 - a2;
}

id specialized PKTiledViewAnimationController.init(tiledView:)()
{
  char *v0;
  objc_super v2;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR___PKTiledViewAnimationController_drawingContinuations] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR___PKTiledViewAnimationController_mtkView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___PKTiledViewAnimationController_renderer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___PKTiledViewAnimationController_newBehavior] = 0;
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKTiledViewAnimationController();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy9PencilKit12PKStrokePathVSayAH0H5PointVGG_ALs5NeverOTB503_s9f5Kit13hj20VA2CIgnnr_AC_ACtACs5K11OIegnrzr_TRA3LIgnnr_Tf1cn_nTf4ng_n(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, void **, id *))
{
  char **v5;
  int64_t v6;
  id v7;
  int64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  int64_t v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;

  v5 = &selRef_completedUnitCount;
  v6 = (int64_t)objc_msgSend(a1, sel_count);
  if (((unint64_t)objc_msgSend(a1, sel_count) & 0x8000000000000000) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v7 = objc_msgSend(a1, sel_count);
  if (v6 < 0 || (uint64_t)v7 < v6)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v35 = *(_QWORD *)(a2 + 16);
  if (v35 >= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(a2 + 16);
  v39 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  v9 = v39;
  v31 = a2;
  v32 = a1;
  if (v8)
  {
    v33 = a2 + 32;
    v10 = a1;
    swift_bridgeObjectRetain();
    v11 = 0;
    while (v8 != v11)
    {
      if ((id)v11 == objc_msgSend(v10, v5[168]))
        goto LABEL_40;
      v12 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, v11);
      if (!v12)
        goto LABEL_41;
      v13 = v12;
      if (v11 >= (uint64_t)objc_msgSend(v10, v5[168]))
        goto LABEL_34;
      if (v35 == v11)
        goto LABEL_35;
      v14 = *(void **)(v33 + 8 * v11);
      v36 = v13;
      v37 = v14;
      v15 = v14;
      a3(&v38, &v36, &v37);
      v16 = v36;

      v17 = v38;
      v39 = v9;
      v19 = *(_QWORD *)(v9 + 16);
      v18 = *(_QWORD *)(v9 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
        v9 = v39;
      }
      ++v11;
      *(_QWORD *)(v9 + 16) = v19 + 1;
      *(_QWORD *)(v9 + 8 * v19 + 32) = v17;
      v5 = &selRef_completedUnitCount;
      if (v8 == v11)
        goto LABEL_19;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v20 = a1;
  swift_bridgeObjectRetain();
LABEL_19:
  v21 = v32;
  if ((id)v8 == objc_msgSend(v32, v5[168]))
  {
LABEL_32:
    swift_bridgeObjectRelease();

    return v9;
  }
  if (v8 <= (unint64_t)v35)
    v22 = v35;
  else
    v22 = v8;
  while (1)
  {
    v23 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, v8);
    if (!v23)
      break;
    v24 = v23;
    if (v8 >= (uint64_t)objc_msgSend(v21, v5[168]))
      goto LABEL_36;
    if (v35 == v8)
    {

      v21 = v32;
      goto LABEL_32;
    }
    if (v22 == v8)
      goto LABEL_37;
    v25 = *(void **)(v31 + 32 + 8 * v8);
    v36 = v24;
    v37 = v25;
    v26 = v25;
    a3(&v38, &v36, &v37);

    v27 = v38;
    v39 = v9;
    v29 = *(_QWORD *)(v9 + 16);
    v28 = *(_QWORD *)(v9 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
      v9 = v39;
    }
    ++v8;
    *(_QWORD *)(v9 + 16) = v29 + 1;
    *(_QWORD *)(v9 + 8 * v29 + 32) = v27;
    v5 = &selRef_completedUnitCount;
    v21 = v32;
    if ((id)v8 == objc_msgSend(v32, sel_count))
      goto LABEL_32;
  }
LABEL_41:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void partial apply for closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(a1, *(void **)(v1 + 16), *(double *)(v1 + 48), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

void partial apply for closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(uint64_t a1)
{
  void **v1;

  closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1BE2363CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return closure #1 in closure #3 in PKTiledViewAnimationController.refine(from:to:in:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1BE236490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return closure #1 in closure #2 in PKTiledViewAnimationController.refine(from:to:in:)(*(Swift::Double *)(v0 + 24));
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t outlined init with take of UIImage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIImage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1BE2365E0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = *(_OWORD *)(v1 + 64);
  v11 = *(_OWORD *)(v1 + 48);
  v9 = *(_OWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 104);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  *(_QWORD *)(v6 + 104) = v1 + 112;
  *(_QWORD *)(v6 + 88) = v4;
  *(_QWORD *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 72) = v9;
  *(_OWORD *)(v6 + 56) = v10;
  *(_OWORD *)(v6 + 40) = v11;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE236798()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR9PencilKit13PKRefineMorphV8GridMeshV_AIt_Tg5Tu))(a1, v4);
}

uint64_t partial apply for @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)
                                                                              + async function pointer to @objc closure #1 in PKTiledViewAnimationController.refine(from:to:in:)))(v2, v3, v4, v5, v6);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t sub_1BE236A24()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)
                                                                     + async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupStrokeInAnimation(to:in:)))(v2, v3, v5, v4);
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)
                                                                              + async function pointer to @objc closure #1 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:)))(v2, v3, v4, v5, v6);
}

uint64_t objectdestroy_32Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t StrokeInRenderer.init(metalKitView:toImage:toDepth:)(void *a1, void *a2, void *a3)
{
  void *v3;
  void *v7;
  id v8;
  char *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char **v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  char **v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  char *v47;
  id v48;
  uint64_t result;
  char *v50;
  char **v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  objc_super v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v7 = v3;
  v8 = objc_msgSend(a1, sel_device);
  if (!v8)
    goto LABEL_18;
  v9 = (char *)OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_device;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_device) = v8;
  objc_msgSend(a1, sel_bounds);
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(0x7FFFFFFFFFFFFFFFLL, (uint64_t)&v58, v10, v11, v12, v13);
  v14 = v58;
  v15 = *(_QWORD *)(v58 + 16);
  v16 = 24 * v15;
  if ((unsigned __int128)(v15 * (__int128)24) >> 64 != (24 * v15) >> 63)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v18 = &selRef_isScrollEnabled;
  v19 = objc_msgSend(v17, sel_newBufferWithBytes_length_options_, v14 + 32, v16, 0);
  swift_unknownObjectRelease();
  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_vertices) = v19;
  v20 = v59;
  v21 = *(_QWORD *)(v59 + 16);
  if (v21 + 0x4000000000000000 < 0)
    goto LABEL_17;
  v22 = objc_msgSend(a1, sel_device);
  if (!v22)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v23 = objc_msgSend(v22, sel_newBufferWithBytes_length_options_, v20 + 32, 2 * v21, 0);
  swift_unknownObjectRelease();
  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indices) = v23;
  v24 = *(_QWORD *)(v20 + 16);
  outlined release of PKRefineMorph.GridMesh((uint64_t)&v58);
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indicesCount) = v24;
  v25 = objc_msgSend(a1, sel_device);
  if (!v25)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6C40]), sel_initWithDevice_, v25);
  swift_unknownObjectRelease();
  v57 = 0;
  v27 = objc_msgSend(v26, sel_newTextureWithCGImage_options_error_, a2, 0, &v57);
  v28 = v57;
  if (!v27)
  {
    v50 = v57;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_28;
  }
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_texture) = v27;
  v57 = 0;
  v29 = v28;
  v30 = objc_msgSend(v26, sel_newTextureWithCGImage_options_error_, a3, 0, &v57);
  v18 = (char **)v57;
  if (!v30)
  {
LABEL_28:
    v51 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_depth) = v30;
  v31 = *(void **)&v9[(_QWORD)v7];
  v32 = v18;
  v33 = objc_msgSend(v31, sel_newCommandQueue);
  if (!v33)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v53 = v9;
  v54 = a2;
  v55 = a3;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_commandQueue) = v33;
  v34 = objc_opt_self();
  v35 = +[PKMetalResourceHandler sharedResourceHandlerWithDevice:](v34, v31);
  v36 = -[PKMetalResourceHandler shaderLibrary]((uint64_t)v35);

  if (!v36)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  v37 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000012, 0x80000001BE4FF740);
  v38 = objc_msgSend(v36, sel_newFunctionWithName_, v37);

  v39 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000016, 0x80000001BE4FFAE0);
  v40 = objc_msgSend(v36, sel_newFunctionWithName_, v39);

  v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B68]), sel_init);
  v42 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FFB00);
  objc_msgSend(v41, sel_setLabel_, v42);

  objc_msgSend(v41, sel_setVertexFunction_, v38);
  objc_msgSend(v41, sel_setFragmentFunction_, v40);
  v43 = objc_msgSend(v41, sel_colorAttachments);
  v44 = objc_msgSend(v43, sel_objectAtIndexedSubscript_, 0);

  if (!v44)
    goto LABEL_26;
  objc_msgSend(v44, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  v45 = *(void **)&v53[(_QWORD)v7];
  v57 = 0;
  v46 = objc_msgSend(v45, sel_newRenderPipelineStateWithDescriptor_error_, v41, &v57);
  v9 = v57;
  if (v46)
  {
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_pipelineState) = v46;
    v47 = v9;

    v56.receiver = v7;
    v56.super_class = (Class)type metadata accessor for StrokeInRenderer();
    v48 = objc_msgSendSuper2(&v56, sel_init);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v48;
  }
LABEL_29:
  v52 = v9;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Void __swiftcall StrokeInRenderer.draw(in:)(MTKView *in)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  MTLRenderPassDescriptor *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float64x2_t v16;
  float64_t v17;
  uint64_t inited;
  double v19;
  float64_t v20;
  MTLRenderPassDescriptor *v21;
  _QWORD v22[4];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = -[MTKView currentDrawable](in, sel_currentDrawable);
  if (v3)
  {
    v4 = v3;
    v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                               + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_commandQueue), sel_commandBuffer));
    if (!v5)
    {
      swift_unknownObjectRelease();
      return;
    }
    v6 = v5;
    v7 = (void *)MEMORY[0x1C3B7E3A8](0x6E49656B6F727453, 0xE800000000000000);
    objc_msgSend(v6, sel_setLabel_, v7);

    v8 = -[MTKView currentRenderPassDescriptor](in, sel_currentRenderPassDescriptor);
    if (v8)
    {
      v21 = v8;
      v9 = objc_msgSend(v6, sel_renderCommandEncoderWithDescriptor_);
      if (!v9)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        return;
      }
      v10 = v9;
      v11 = (void *)MEMORY[0x1C3B7E3A8](0x6E49656B6F727453, 0xE800000000000000);
      objc_msgSend(v10, sel_setLabel_, v11);

      -[MTKView drawableSize](in, sel_drawableSize);
      v13 = v12;
      -[MTKView drawableSize](in, sel_drawableSize);
      v22[0] = 0;
      v22[1] = 0;
      v22[2] = v13;
      v22[3] = v14;
      v23 = xmmword_1BE4F9580;
      objc_msgSend(v10, sel_setViewport_, v22);
      objc_msgSend(v10, sel_setRenderPipelineState_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_pipelineState));
      -[MTKView frame](in, sel_frame);
      v20 = v15;
      -[MTKView frame](in, sel_frame);
      v16.f64[0] = v20;
      v16.f64[1] = v17;
      v22[0] = vcvt_f32_f64(v16);
      objc_msgSend(v10, sel_setVertexBytes_length_atIndex_, v22, 8, 1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineFragmentUniforms>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BE4F9590;
      *(_DWORD *)(inited + 32) = 0;
      *(_DWORD *)(inited + 36) = 0;
      *(_DWORD *)(inited + 40) = 0;
      objc_msgSend((id)objc_opt_self(), sel_timeIntervalSinceReferenceDate);
      *(float *)&v19 = (v19 - *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_startTime))
                     / *(double *)(v1 + OBJC_IVAR____TtC9PencilKit17TiledViewRenderer_duration);
      *(float *)(inited + 32) = 1.0 - *(float *)&v19;
      *(_DWORD *)(inited + 36) = LODWORD(v19);
      *(_DWORD *)(inited + 40) = 0;
      objc_msgSend(v10, sel_setFragmentBytes_length_atIndex_, inited + 32, 12, 0);
      objc_msgSend(v10, sel_setVertexBytes_length_atIndex_, inited + 32, 12, 2);
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_vertices), 0, 0);
      objc_msgSend(v10, sel_setFragmentTexture_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_texture), 0);
      objc_msgSend(v10, sel_setFragmentTexture_atIndex_, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_depth), 1);
      objc_msgSend(v10, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, 4, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indicesCount), 0, *(_QWORD *)(v1 + OBJC_IVAR____TtC9PencilKit16StrokeInRenderer_indices), 0);
      objc_msgSend(v10, sel_endEncoding);
      swift_unknownObjectRetain();
      objc_msgSend(v6, sel_presentDrawable_, v4);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

    }
    objc_msgSend(v6, sel_commit);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t StrokeInRenderer.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

id StrokeInRenderer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StrokeInRenderer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StrokeInRenderer()
{
  return objc_opt_self();
}

void one-time initialization function for nearbyThreshold()
{
  static PKRefineMorph.nearbyThreshold = 0x4040000000000000;
}

void one-time initialization function for warpThreshold()
{
  static PKRefineMorph.warpThreshold = 0x4036000000000000;
}

void one-time initialization function for strokePolygonStep()
{
  static PKRefineMorph.strokePolygonStep = 0x4014000000000000;
}

double PKRefineMorph.NDrawing.bounds.getter(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v19;
  double v20;
  double v21;
  double v22;
  CGFloat r1;
  CGFloat v24;
  CGFloat v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v1 = *MEMORY[0x1E0C9D628];
  v2 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v4 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v3 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return *MEMORY[0x1E0C9D628];
  v6 = a1 + 32;
  swift_bridgeObjectRetain();
  v7 = 0;
  x = v1;
  y = v2;
  width = v4;
  height = v3;
  v21 = v2;
  v22 = v1;
  v19 = v3;
  v20 = v4;
  do
  {
    v15 = *(_QWORD *)(v6 + 8 * v7);
    v16 = *(_QWORD *)(v15 + 16);
    v24 = y;
    v25 = x;
    r1 = width;
    if (v16)
    {
      swift_bridgeObjectRetain();
      v17 = (double *)(v15 + 40);
      do
      {
        v12 = *(v17 - 1);
        v13 = *v17;
        v28.origin.x = v1;
        v28.origin.y = v2;
        v28.size.width = v4;
        v28.size.height = v3;
        v14 = 0.0;
        if (CGRectIsNull(v28))
        {
          v3 = 0.0;
        }
        else
        {
          v29.origin.x = v1;
          v29.origin.y = v2;
          v29.size.width = v4;
          v29.size.height = v3;
          if (v12 >= CGRectGetMinX(v29))
          {
            v31.origin.x = v1;
            v31.origin.y = v2;
            v31.size.width = v4;
            v31.size.height = v3;
            if (CGRectGetMaxX(v31) >= v12)
              v14 = v4;
            else
              v14 = v12 - v1;
            v12 = v1;
          }
          else
          {
            v30.origin.x = v1;
            v30.origin.y = v2;
            v30.size.width = v4;
            v30.size.height = v3;
            v14 = v4 + CGRectGetMinX(v30) - v12;
          }
          v32.origin.x = v1;
          v32.origin.y = v2;
          v32.size.width = v4;
          v32.size.height = v3;
          if (v13 >= CGRectGetMinY(v32))
          {
            v34.origin.x = v1;
            v34.origin.y = v2;
            v34.size.width = v4;
            v34.size.height = v3;
            if (CGRectGetMaxY(v34) < v13)
              v3 = v13 - v2;
            v13 = v2;
          }
          else
          {
            v33.origin.x = v1;
            v33.origin.y = v2;
            v33.size.width = v4;
            v33.size.height = v3;
            v3 = v3 + CGRectGetMinY(v33) - v13;
          }
        }
        v17 += 2;
        v1 = v12;
        v2 = v13;
        v4 = v14;
        --v16;
      }
      while (v16);
    }
    else
    {
      swift_bridgeObjectRetain();
      v12 = v1;
      v13 = v2;
      v14 = v4;
    }
    ++v7;
    v26.origin.y = v24;
    v26.origin.x = v25;
    v26.size.width = r1;
    v26.size.height = height;
    v35.origin.x = v12;
    v35.origin.y = v13;
    v35.size.width = v14;
    v35.size.height = v3;
    v27 = CGRectUnion(v26, v35);
    x = v27.origin.x;
    y = v27.origin.y;
    width = v27.size.width;
    height = v27.size.height;
    swift_bridgeObjectRelease();
    v2 = v21;
    v1 = v22;
    v3 = v19;
    v4 = v20;
  }
  while (v7 != v5);
  swift_bridgeObjectRelease();
  return x;
}

Swift::Void __swiftcall PKRefineMorph.NDrawing.transform(by:)(CGAffineTransform *by)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGPoint v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGAffineTransform v21;
  uint64_t v22;
  uint64_t v23;
  CGPoint v24;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v19 = *(_OWORD *)&by->c;
    v20 = *(_OWORD *)&by->a;
    v18 = *(_OWORD *)&by->tx;
    v23 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = 0;
    v5 = v23;
    v17 = v2 + 32;
    do
    {
      v6 = *(_QWORD *)(v17 + 8 * v4);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = v3;
        v22 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
        v9 = v22;
        v10 = v6 + 40;
        do
        {
          v24 = *(CGPoint *)(v10 - 8);
          *(_OWORD *)&v21.a = v20;
          *(_OWORD *)&v21.c = v19;
          *(_OWORD *)&v21.tx = v18;
          v11 = CGPointApplyAffineTransform(v24, &v21);
          v22 = v9;
          v13 = *(_QWORD *)(v9 + 16);
          v12 = *(_QWORD *)(v9 + 24);
          if (v13 >= v12 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
            v9 = v22;
          }
          *(_QWORD *)(v9 + 16) = v13 + 1;
          *(CGPoint *)(v9 + 16 * v13 + 32) = v11;
          v10 += 16;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        v3 = v8;
      }
      else
      {
        v9 = MEMORY[0x1E0DEE9D8];
      }
      v23 = v5;
      v15 = *(_QWORD *)(v5 + 16);
      v14 = *(_QWORD *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        v5 = v23;
      }
      ++v4;
      *(_QWORD *)(v5 + 16) = v15 + 1;
      *(_QWORD *)(v5 + 8 * v15 + 32) = v9;
    }
    while (v4 != v3);
    swift_bridgeObjectRelease_n();
    v1 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = MEMORY[0x1E0DEE9D8];
  }
  *v1 = v5;
}

Swift::Void __swiftcall PKRefineMorph.GridMesh.morph(matches:toTransform:reversed:transformViewToModel:origin:)(Swift::OpaquePointer matches, CGAffineTransform *toTransform, Swift::Bool reversed, CGAffineTransform *transformViewToModel, CGPoint origin)
{
  char **v5;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  float64x2_t v17;
  float32x2_t *v18;
  CGPoint v19;
  CGFloat v20;
  CGPoint v21;
  double v22;
  double v23;
  double *v24;
  char *v25;
  double v26;
  char *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  CGPoint v40;
  uint64_t v41;
  float v42;
  char *v43;
  char *v44;
  void *rawValue;
  double *v46;
  float64x2_t v47;
  char *v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  char *v55;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  CGFloat a;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  double x;
  double y;
  float32x2_t *v70;
  float64x2_t v71;
  double v72;
  CGAffineTransform v73;
  CGAffineTransform v74;
  CGPoint v75;
  CGPoint v76;

  x = origin.x;
  y = origin.y;
  b = toTransform->b;
  a = toTransform->a;
  d = toTransform->d;
  c = toTransform->c;
  ty = toTransform->ty;
  tx = toTransform->tx;
  v8 = transformViewToModel->c;
  v9 = transformViewToModel->d;
  v10 = transformViewToModel->tx;
  v11 = transformViewToModel->ty;
  v66 = transformViewToModel->b;
  v67 = transformViewToModel->a;
  v74.a = transformViewToModel->a;
  v74.b = v66;
  v64 = v9;
  v65 = v8;
  v74.c = v8;
  v74.d = v9;
  v62 = v11;
  v63 = v10;
  v74.tx = v10;
  v74.ty = v11;
  CGAffineTransformInvert(&v73, &v74);
  v12 = *v5;
  v13 = (char *)*((_QWORD *)*v5 + 2);
  if (v13)
  {
    v53 = v73.b;
    v54 = v73.a;
    v51 = v73.d;
    v52 = v73.c;
    v49 = v73.ty;
    v50 = v73.tx;
    v14 = (char *)*((_QWORD *)matches._rawValue + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_50:
      v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
    v15 = 0;
    v16 = v12 + 32;
    v17.f64[0] = x;
    v17.f64[1] = y;
    v47 = v17;
    v46 = (double *)((char *)matches._rawValue + 56);
    v55 = v14;
    v44 = v13;
    rawValue = matches._rawValue;
    v43 = v12;
    v48 = v12 + 32;
    while (1)
    {
      if (v15 == v13)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if ((unint64_t)v15 >= *((_QWORD *)v12 + 2))
        goto LABEL_47;
      v18 = (float32x2_t *)&v16[24 * (_QWORD)v15];
      v19 = (CGPoint)vcvtq_f64_f32(*v18);
      v20 = v19.y;
      v74.a = v67;
      v74.b = v66;
      v74.c = v65;
      v74.d = v64;
      v74.tx = v63;
      v74.ty = v62;
      v21 = CGPointApplyAffineTransform(v19, &v74);
      v72 = v21.x;
      v22 = v21.y;
      if (v14)
        break;
      v23 = 0.0;
      v14 = (char *)MEMORY[0x1E0DEE9D8];
      v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v36)
        goto LABEL_35;
LABEL_39:
      swift_bridgeObjectRelease();
LABEL_40:
      v14 = v55;
      if ((unint64_t)v15 >= *((_QWORD *)v12 + 2))
        goto LABEL_48;
      *v18 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v18), v47));
      v74.a = a;
      v74.b = b;
      v74.c = c;
      v74.d = d;
      v74.tx = tx;
      v74.ty = ty;
      v75.x = v72;
      v75.y = v22;
      v76 = CGPointApplyAffineTransform(v75, &v74);
      v74.a = v54;
      v74.b = v53;
      v74.c = v52;
      v74.d = v51;
      v74.tx = v50;
      v74.ty = v49;
      v40 = CGPointApplyAffineTransform(v76, &v74);
      *(float *)&v41 = v40.x - x;
      v42 = v40.y - y;
      *((float *)&v41 + 1) = v42;
      v16 = v48;
      *(_QWORD *)&v48[24 * (_QWORD)v15++ + 8] = v41;
      if (v15 == v13)
      {
        *v5 = v12;
        return;
      }
    }
    if ((uint64_t)v14 < 1)
      goto LABEL_49;
    v70 = v18;
    swift_bridgeObjectRetain();
    v23 = 0.0;
    v24 = v46;
    v12 = v14;
    v14 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v26 = *v24;
      if ((*(_QWORD *)v24 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v13 = (char *)*((_QWORD *)v24 - 1);
      if (*(_QWORD *)&v26 >= *((_QWORD *)v13 + 2))
        goto LABEL_45;
      v27 = &v13[24 * *(_QWORD *)&v26];
      if (reversed)
        v28 = *(v24 - 3);
      else
        v28 = *((double *)v27 + 5);
      if (reversed)
        v29 = *(v24 - 2);
      else
        v29 = *((double *)v27 + 6);
      if (reversed)
        v30 = *((double *)v27 + 5);
      else
        v30 = *(v24 - 3);
      if (reversed)
        v31 = *((double *)v27 + 6);
      else
        v31 = *(v24 - 2);
      matches._rawValue = (void *)one-time initialization token for warpThreshold;
      swift_bridgeObjectRetain();
      if (matches._rawValue != (void *)-1)
        swift_once();
      v32 = *(double *)&static PKRefineMorph.warpThreshold;
      swift_bridgeObjectRelease();
      v33 = fmin((sqrt((v30 - v21.x) * (v30 - v21.x) + (v31 - v21.y) * (v31 - v21.y)) - v32) / (0.0 - v32), 1.0);
      if (v33 < 0.0)
        v33 = 0.0;
      v34 = v33 * (v33 * 3.0) - v33 * (v33 * (v33 + v33));
      if (v34 > 0.01)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
        matches._rawValue = (void *)*((_QWORD *)v14 + 2);
        v35 = *((_QWORD *)v14 + 3);
        v13 = (char *)matches._rawValue + 1;
        if ((unint64_t)matches._rawValue >= v35 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), (int64_t)matches._rawValue + 1, 1, v14);
        v23 = v23 + v34;
        *((_QWORD *)v14 + 2) = v13;
        v25 = &v14[16 * (uint64_t)matches._rawValue];
        *((double *)v25 + 4) = (v28 - v30) * v34;
        *((double *)v25 + 5) = (v29 - v31) * v34;
      }
      v24 += 4;
      --v12;
    }
    while (v12);
    matches._rawValue = rawValue;
    swift_bridgeObjectRelease();
    v12 = v43;
    v13 = v44;
    v18 = v70;
    v36 = *((_QWORD *)v14 + 2);
    if (!v36)
      goto LABEL_39;
LABEL_35:
    v37 = 0;
    v38 = 0uLL;
    do
    {
      v39 = *(float64x2_t *)&v14[16 * v37++ + 32];
      v38 = vaddq_f64(v38, v39);
    }
    while (v36 != v37);
    v71 = v38;
    swift_bridgeObjectRelease();
    v72 = v21.x + v71.f64[0] / v23;
    v22 = v21.y + v71.f64[1] / v23;
    goto LABEL_40;
  }
}

void PKRefineMorph.Match.debugDescription.getter(uint64_t a1, double a2, double a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  double v8;
  Swift::String v9;
  Swift::String v10;
  double v11;
  Swift::String v12;

  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (a2 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  dispatch thunk of CustomStringConvertible.description.getter();
  v5._countAndFlagsBits = 44;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 15917;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = *(double *)(a1 + 40);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 44;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11 = *(double *)(a1 + 48);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v11 < 9.22337204e18)
  {
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_27:
  __break(1u);
}

Swift::Int PKRefineMorph.Match.MatchTo.hashValue.getter(double a1, double a2, double a3)
{
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)&a2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)&a3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)&a1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKRefineMorph.Match.MatchTo()
{
  double *v0;

  return PKRefineMorph.Match.MatchTo.hashValue.getter(*v0, v0[1], v0[2]);
}

void protocol witness for Hashable.hash(into:) in conformance PKRefineMorph.Match.MatchTo()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = *v0;
  v2 = v0[2];
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[1];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKRefineMorph.Match.MatchTo()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v1;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKRefineMorph.Match.MatchTo(double *a1, double *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[2] == a2[2])
    return a1[1] == a2[1];
  return 0;
}

uint64_t PKRefineMorph.Match.filterMatches(distanceMatchCanJumpSqr:)(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  float64x2_t v11;
  _QWORD *v12;
  uint64_t v13;
  float64x2_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  specialized MutableCollection.swapAt(_:_:)(0, *(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = 0;
  result = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    v6 = MEMORY[0x1E0DEE9D8] + 32;
    v32 = MEMORY[0x1E0DEE9D8];
    v33 = MEMORY[0x1E0DEE9D8] + 32;
    v34 = 1;
    v7 = v4 - 1;
    if (v4 == 1)
    {
      v8 = 1;
      v9 = 1;
    }
    else
    {
      v30 = *(float64x2_t *)(result + 40);
      v10 = swift_bridgeObjectRetain();
      v11 = v30;
      v29 = v10;
      v12 = (_QWORD *)(v10 + 72);
      v8 = 1;
      do
      {
        v14 = vsubq_f64(*(float64x2_t *)(v12 - 1), v11);
        if (vaddvq_f64(vmulq_f64(v14, v14)) < a1)
        {
          v31 = *((_OWORD *)v12 - 1);
          v15 = *v12;
          if ((v8 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), v32 = v5, (result & 1) == 0))
          {
            result = specialized ArraySlice._copyToNewBuffer(oldCount:)(v8 >> 1);
            v8 = v34;
          }
          v16 = v8 >> 1;
          v17 = v8 >> 1;
          if ((v8 & 1) != 0)
          {
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain();
            v18 = swift_dynamicCastClass();
            if (!v18)
            {
              swift_unknownObjectRelease();
              v18 = MEMORY[0x1E0DEE9D8];
            }
            v19 = *(_QWORD *)(v18 + 16);
            if (v33 + 24 * v16 == v18 + 24 * v19 + 32)
            {
              v20 = *(_QWORD *)(v18 + 24);
              result = swift_release();
              v21 = (v20 >> 1) - v19;
              v22 = __OFADD__(v16, v21);
              v17 = v16 + v21;
              if (v22)
                goto LABEL_33;
            }
            else
            {
              result = swift_release();
              v17 = v8 >> 1;
            }
          }
          v23 = v16 + 1;
          if (v17 < (uint64_t)(v16 + 1))
          {
            result = specialized ArraySlice._copyToNewBuffer(oldCount:)(v8 >> 1);
            v8 = v34;
          }
          v24 = v8 >> 1;
          v22 = __OFSUB__(v23, v8 >> 1);
          v25 = v23 - (v8 >> 1);
          if (v22)
          {
            __break(1u);
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          v5 = v32;
          if (v25)
          {
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain();
            result = swift_dynamicCastClass();
            if (!result)
            {
              swift_unknownObjectRelease();
              result = MEMORY[0x1E0DEE9D8];
            }
            v26 = *(_QWORD *)(result + 16);
            v22 = __OFADD__(v26, v25);
            v27 = v26 + v25;
            if (v22)
              goto LABEL_30;
            *(_QWORD *)(result + 16) = v27;
            result = swift_release();
            v28 = v24 + v25;
            if (__OFADD__(v24, v25))
              goto LABEL_31;
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_32;
            v8 = v8 & 1 | (2 * v28);
            v34 = v8;
          }
          v6 = v33;
          v13 = v33 + 24 * v16;
          v11 = v30;
          *(_OWORD *)v13 = v31;
          *(_QWORD *)(v13 + 16) = v15;
        }
        v12 += 3;
        --v7;
      }
      while (v7);
      result = swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v29 + 16);
      if (!v9)
        goto LABEL_35;
    }
    specialized Array.subscript.setter(v5, v6, 0, v8, 1uLL, v9);
    return swift_unknownObjectRelease();
  }
  else
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  return result;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  if (result != a2)
  {
    v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *v3;
      v8 = *(_QWORD *)(*v3 + 16);
      if (v8 > result)
      {
        v2 = a2;
        if (v8 > a2)
        {
          v9 = v4 + 32 + 24 * result;
          v5 = *(_QWORD *)(v9 + 16);
          v10 = v4 + 32 + 24 * a2;
          v13 = *(_OWORD *)v10;
          v14 = *(_OWORD *)v9;
          v6 = *(_QWORD *)(v10 + 16);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
LABEL_6:
            v11 = v4 + 32 + 24 * v7;
            *(_OWORD *)v11 = v13;
            *(_QWORD *)(v11 + 16) = v6;
            v12 = v4 + 32 + 24 * v2;
            *(_OWORD *)v12 = v14;
            *(_QWORD *)(v12 + 16) = v5;
            *v3 = v4;
            return result;
          }
LABEL_11:
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          v4 = result;
          goto LABEL_6;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

void PKRefineMorph.Match.hash(into:)(uint64_t a1, uint64_t a2, Swift::UInt a3, double a4, double a5)
{
  Swift::UInt64 v9;
  Swift::UInt64 v10;

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&a4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = *(_QWORD *)&a5;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  specialized Array<A>.hash(into:)(a1, a2);
  Hasher._combine(_:)(a3);
}

Swift::Int PKRefineMorph.Match.hashValue.getter(uint64_t a1, Swift::UInt a2, double a3, double a4)
{
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  _BYTE v11[72];

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)&a3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&a4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  specialized Array<A>.hash(into:)((uint64_t)v11, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PKRefineMorph.Match()
{
  uint64_t v0;

  PKRefineMorph.Match.debugDescription.getter(*(_QWORD *)(v0 + 16), *(double *)v0, *(double *)(v0 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKRefineMorph.Match()
{
  uint64_t v0;

  return PKRefineMorph.Match.hashValue.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(double *)v0, *(double *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance PKRefineMorph.Match(uint64_t a1)
{
  uint64_t v1;

  PKRefineMorph.Match.hash(into:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)v1, *(double *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKRefineMorph.Match()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  _BYTE v8[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  specialized Array<A>.hash(into:)((uint64_t)v8, v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKRefineMorph.Match(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & (v5 == v4);
}

uint64_t specialized morphCost #1 (of:match:in:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, float64_t a6, float64_t a7)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  double *v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  float64x2_t v22;

  result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(_QWORD *)(*(_QWORD *)a5 + 16) <= a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 8 * a1 + 32);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (*(_QWORD *)(a2 + 16) <= a3)
    {
LABEL_19:
      __break(1u);
      return result;
    }
    v15.f64[0] = a6;
    v15.f64[1] = a7;
    v16 = (double *)(v13 + 40);
    v17 = 0.0;
    while (*(_QWORD *)v16 < *(_QWORD *)(a4 + 16))
    {
      v18 = a4 + 32 + 32 * *(_QWORD *)v16;
      v19 = *(_QWORD *)(v18 + 24);
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_14;
      v20 = *(_QWORD *)(v18 + 16);
      if (v19 >= *(_QWORD *)(v20 + 16))
        goto LABEL_15;
      v21 = *(v16 - 1);
      v16 += 2;
      v22 = vsubq_f64(vaddq_f64(vsubq_f64(v15, *(float64x2_t *)v18), *(float64x2_t *)(v20 + 24 * v19 + 40)), *(float64x2_t *)(a2 + 24 * a3 + 40));
      v17 = v17 + v21 * vaddvq_f64(vmulq_f64(v22, v22)) * 1000.0;
      if (!--v14)
        return result;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

unint64_t specialized morphCost #2 (of:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  float64x2_t v20;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = result + 32;
    result = swift_beginAccess();
    v5 = 0;
    v6 = 0.0;
    while (v5 != *(_QWORD *)(*(_QWORD *)a2 + 16))
    {
      v8 = *(_QWORD *)(*(_QWORD *)a2 + 32 + 8 * v5);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = v4 + 32 * v5;
        v11 = *(_QWORD *)(v10 + 24);
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_20;
        v12 = *(_QWORD *)(v10 + 16);
        result = *(_QWORD *)(v12 + 16);
        if (v11 >= result)
          goto LABEL_21;
        v13 = *(float64x2_t *)v10;
        v14 = *(float64x2_t *)(v12 + 24 * v11 + 40);
        v15 = (double *)(v8 + 40);
        v7 = 0.0;
        while (*(_QWORD *)v15 < v2)
        {
          v16 = v4 + 32 * *(_QWORD *)v15;
          v17 = *(_QWORD *)(v16 + 24);
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_17;
          v18 = *(_QWORD *)(v16 + 16);
          result = *(_QWORD *)(v18 + 16);
          if (v17 >= result)
            goto LABEL_18;
          v19 = *(v15 - 1);
          v15 += 2;
          v20 = vsubq_f64(vaddq_f64(vsubq_f64(v13, *(float64x2_t *)v16), *(float64x2_t *)(v18 + 24 * v17 + 40)), v14);
          v7 = v7 + v19 * vaddvq_f64(vmulq_f64(v20, v20)) * 1000.0;
          if (!--v9)
            goto LABEL_4;
        }
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        break;
      }
      v7 = 0.0;
LABEL_4:
      ++v5;
      v6 = v6 + v7;
      if (v5 == v2)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  int32x2_t v9;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48))
  {
    return 0;
  }
  if (v2 == 1)
    return 1;
  v6 = v2 - 2;
  v7 = (float64x2_t *)(a2 + 64);
  v8 = (float64x2_t *)(a1 + 64);
  do
  {
    v9 = vmovn_s64(vceqq_f64(*v8, *v7));
    result = ((v8[-1].f64[1] == v7[-1].f64[1]) & v9.i8[0]) & v9.i8[4];
    v11 = v6-- != 0;
    if ((_DWORD)result != 1)
      break;
    v7 = (float64x2_t *)((char *)v7 + 24);
    v8 = (float64x2_t *)((char *)v8 + 24);
  }
  while (v11);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x1C3B80280](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CGFloat, UIImage>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v35);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v35)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        v31 = v30;
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for NSNumber();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        v7 = 0xE700000000000000;
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v8 = 0x7974696361706FLL;
          v9 = a1;
          if (!a1)
            goto LABEL_14;
        }
        else
        {
          v8 = 0x32737569646172;
          v9 = a1;
          if (!a1)
          {
LABEL_14:
            v11 = 0xE600000000000000;
            if (v8 != 0x737569646172)
              goto LABEL_16;
            goto LABEL_15;
          }
        }
      }
      else
      {
        v7 = 0xE600000000000000;
        v8 = 0x737569646172;
        v9 = a1;
        if (!a1)
          goto LABEL_14;
      }
      if (v9 == 1)
        v10 = 0x7974696361706FLL;
      else
        v10 = 0x32737569646172;
      v11 = 0xE700000000000000;
      if (v8 != v10)
        goto LABEL_16;
LABEL_15:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_16:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CGFloat, UIImage>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  double v30;
  Swift::Int v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  Swift::Int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  uint64_t v106;
  double *v107;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = -1;
      v86 = 1;
      v87 = *a1;
      do
      {
        v88 = *(double *)(v84 + 24 * v86);
        v89 = v85;
        v90 = v87;
        do
        {
          if (v88 >= *(double *)v90)
            break;
          if (!v84)
            goto LABEL_142;
          v91 = *(_OWORD *)(v90 + 32);
          *(_OWORD *)(v90 + 24) = *(_OWORD *)v90;
          *(_QWORD *)(v90 + 40) = *(_QWORD *)(v90 + 16);
          *(double *)v90 = v88;
          *(_OWORD *)(v90 + 8) = v91;
          v90 -= 24;
        }
        while (!__CFADD__(v89++, 1));
        ++v86;
        v87 += 24;
        --v85;
      }
      while (v86 != v3);
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v101 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(result + 16) = v7;
      v103 = result;
      v107 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v102 = *a1 + 48;
      v100 = *a1 - 24;
      v11 = MEMORY[0x1E0DEE9D8];
      v104 = v6;
      v105 = v3;
      v106 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 24 * v9);
          v15 = *(double *)(v10 + 24 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v102 + 24 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 24 * v9;
              v20 = 24 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = v10 + v19;
                  v25 = *(_QWORD *)(v10 + v20 + 16);
                  v26 = *(_OWORD *)(v10 + v20);
                  v27 = *(_QWORD *)(v10 + v19 - 8);
                  *(_OWORD *)v23 = *(_OWORD *)(v10 + v19 - 24);
                  *(_QWORD *)(v23 + 16) = v27;
                  *(_OWORD *)(v24 - 24) = v26;
                  *(_QWORD *)(v24 - 8) = v25;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v28 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v28 >= v3)
              v28 = v3;
            if (v28 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              v29 = v100 + 24 * v9;
              do
              {
                v30 = *(double *)(v10 + 24 * v9);
                v31 = v13;
                v32 = v29;
                do
                {
                  if (v30 >= *(double *)v32)
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v33 = *(_OWORD *)(v32 + 32);
                  *(_OWORD *)(v32 + 24) = *(_OWORD *)v32;
                  *(_QWORD *)(v32 + 40) = *(_QWORD *)(v32 + 16);
                  *(double *)v32 = v30;
                  *(_OWORD *)(v32 + 8) = v33;
                  v32 -= 24;
                  ++v31;
                }
                while (v9 != v31);
                ++v9;
                v29 += 24;
              }
              while (v9 != v28);
              v9 = v28;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v35 = *(_QWORD *)(v11 + 16);
        v34 = *(_QWORD *)(v11 + 24);
        v12 = v35 + 1;
        v10 = v106;
        if (v35 >= v34 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v11);
          v10 = v106;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v36 = v11 + 32;
        v37 = (Swift::Int *)(v11 + 32 + 16 * v35);
        *v37 = v13;
        v37[1] = v9;
        if (v35)
        {
          while (1)
          {
            v38 = v12 - 1;
            if (v12 >= 4)
            {
              v43 = v36 + 16 * v12;
              v44 = *(_QWORD *)(v43 - 64);
              v45 = *(_QWORD *)(v43 - 56);
              v49 = __OFSUB__(v45, v44);
              v46 = v45 - v44;
              if (v49)
                goto LABEL_120;
              v48 = *(_QWORD *)(v43 - 48);
              v47 = *(_QWORD *)(v43 - 40);
              v49 = __OFSUB__(v47, v48);
              v41 = v47 - v48;
              v42 = v49;
              if (v49)
                goto LABEL_121;
              v50 = v12 - 2;
              v51 = (uint64_t *)(v36 + 16 * (v12 - 2));
              v53 = *v51;
              v52 = v51[1];
              v49 = __OFSUB__(v52, v53);
              v54 = v52 - v53;
              if (v49)
                goto LABEL_122;
              v49 = __OFADD__(v41, v54);
              v55 = v41 + v54;
              if (v49)
                goto LABEL_124;
              if (v55 >= v46)
              {
                v73 = (uint64_t *)(v36 + 16 * v38);
                v75 = *v73;
                v74 = v73[1];
                v49 = __OFSUB__(v74, v75);
                v76 = v74 - v75;
                if (v49)
                  goto LABEL_130;
                v66 = v41 < v76;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v67 = *(_QWORD *)(v11 + 32);
                v68 = *(_QWORD *)(v11 + 40);
                v49 = __OFSUB__(v68, v67);
                v60 = v68 - v67;
                v61 = v49;
                goto LABEL_77;
              }
              v40 = *(_QWORD *)(v11 + 32);
              v39 = *(_QWORD *)(v11 + 40);
              v49 = __OFSUB__(v39, v40);
              v41 = v39 - v40;
              v42 = v49;
            }
            if ((v42 & 1) != 0)
              goto LABEL_123;
            v50 = v12 - 2;
            v56 = (uint64_t *)(v36 + 16 * (v12 - 2));
            v58 = *v56;
            v57 = v56[1];
            v59 = __OFSUB__(v57, v58);
            v60 = v57 - v58;
            v61 = v59;
            if (v59)
              goto LABEL_125;
            v62 = (uint64_t *)(v36 + 16 * v38);
            v64 = *v62;
            v63 = v62[1];
            v49 = __OFSUB__(v63, v64);
            v65 = v63 - v64;
            if (v49)
              goto LABEL_127;
            if (__OFADD__(v60, v65))
              goto LABEL_129;
            if (v60 + v65 >= v41)
            {
              v66 = v41 < v65;
LABEL_83:
              if (v66)
                v38 = v50;
              goto LABEL_85;
            }
LABEL_77:
            if ((v61 & 1) != 0)
              goto LABEL_126;
            v69 = (uint64_t *)(v36 + 16 * v38);
            v71 = *v69;
            v70 = v69[1];
            v49 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v49)
              goto LABEL_128;
            if (v72 < v60)
              goto LABEL_15;
LABEL_85:
            v77 = v38 - 1;
            if (v38 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v78 = v11;
            v79 = (uint64_t *)(v36 + 16 * v77);
            v80 = *v79;
            v81 = (_QWORD *)(v36 + 16 * v38);
            v82 = v81[1];
            result = specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 24 * *v79), (double *)(v10 + 24 * *v81), v10 + 24 * v82, v107);
            if (v1)
              goto LABEL_93;
            if (v82 < v80)
              goto LABEL_117;
            if (v38 > *(_QWORD *)(v78 + 16))
              goto LABEL_118;
            *v79 = v80;
            *(_QWORD *)(v36 + 16 * v77 + 8) = v82;
            v83 = *(_QWORD *)(v78 + 16);
            if (v38 >= v83)
              goto LABEL_119;
            v11 = v78;
            v12 = v83 - 1;
            result = (uint64_t)memmove((void *)(v36 + 16 * v38), v81 + 2, 16 * (v83 - 1 - v38));
            *(_QWORD *)(v78 + 16) = v83 - 1;
            v10 = v106;
            if (v83 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v104;
        v3 = v105;
        if (v9 >= v105)
        {
          v8 = v103;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
    v107 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v103 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_103:
    result = v11;
    v103 = v8;
    if (v12 >= 2)
    {
      v93 = *v101;
      do
      {
        v94 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v93)
          goto LABEL_146;
        v95 = result;
        v96 = *(_QWORD *)(result + 32 + 16 * v94);
        v97 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v93 + 24 * v96), (double *)(v93 + 24 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v93 + 24 * v97, v107);
        if (v1)
          break;
        if (v97 < v96)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v95);
          v95 = result;
        }
        if (v94 >= *(_QWORD *)(v95 + 16))
          goto LABEL_134;
        v98 = (_QWORD *)(v95 + 32 + 16 * v94);
        *v98 = v96;
        v98[1] = v97;
        v99 = *(_QWORD *)(v95 + 16);
        if (v12 > v99)
          goto LABEL_135;
        memmove((void *)(v95 + 32 + 16 * (v12 - 1)), (const void *)(v95 + 32 + 16 * v12), 16 * (v99 - v12));
        result = v95;
        *(_QWORD *)(v95 + 16) = v99 - 1;
        v12 = v99 - 1;
      }
      while (v99 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v103 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  __int128 v15;
  unint64_t v16;
  double *v17;
  double *v18;
  BOOL v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_36;
    v16 = a3 - 24;
    while (1)
    {
      v17 = (double *)(v16 + 24);
      v18 = v6 - 3;
      if (*(v12 - 3) >= *(v6 - 3))
      {
        v18 = v12 - 3;
        if (v17 != v12)
        {
          v12 -= 3;
          goto LABEL_33;
        }
        v19 = v16 >= (unint64_t)v12;
        v12 -= 3;
        if (v19)
          goto LABEL_33;
      }
      else
      {
        if (v17 != v6)
        {
          v6 -= 3;
LABEL_33:
          v20 = *(_OWORD *)v18;
          *(double *)(v16 + 16) = v18[2];
          *(_OWORD *)v16 = v20;
          goto LABEL_34;
        }
        v19 = v16 >= (unint64_t)v6;
        v6 -= 3;
        if (v19)
          goto LABEL_33;
      }
LABEL_34:
      if (v6 > v7)
      {
        v16 -= 24;
        if (v12 > v4)
          continue;
      }
      goto LABEL_36;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (*v6 < *v4)
    {
      v13 = v6;
      v14 = v7 == v6;
      v6 += 3;
      if (!v14)
        goto LABEL_12;
LABEL_13:
      v7 += 3;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    v13 = v4;
    v14 = v7 == v4;
    v4 += 3;
    if (v14)
      goto LABEL_13;
LABEL_12:
    v15 = *(_OWORD *)v13;
    v7[2] = v13[2];
    *(_OWORD *)v7 = v15;
    goto LABEL_13;
  }
LABEL_15:
  v6 = v7;
LABEL_36:
  v21 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v22 = (v21 >> 2) + ((unint64_t)v21 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v22])
    memmove(v6, v4, 24 * v22);
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineVertex>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RefineFragmentUniforms>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8])
      memmove(v12, v13, 12 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 12 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.Match.MatchTo>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.Match>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CGFloat, Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(a2 + 48);
    do
    {
      v6 = *(v4 - 2);
      v5 = *(v4 - 1);
      v8 = *v4;
      v4 += 3;
      v7 = v8;
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v9 = v5;
      else
        v9 = 0;
      Hasher._combine(_:)(v9);
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v10 = v7;
      else
        v10 = 0;
      Hasher._combine(_:)(v10);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v11 = v6;
      else
        v11 = 0;
      Hasher._combine(_:)(v11);
      --v3;
    }
    while (v3);
  }
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  unint64_t v21;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  result = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_33;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v29 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v29)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v15 = result - a2;
  if (__OFSUB__(result, a2))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v29 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v29)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v35 = v16;
  v17 = v10 + 32;
  v34 = (char *)(v10 + 32 + 24 * a2 + 24 * a3);
  result = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(result);
  if (result)
  {
    v18 = result;
    v19 = v4[2];
    v20 = (const void *)(v4[1] + 24 * v19);
    v21 = (unint64_t)v20 + 24 * a2;
    if ((const void *)(v10 + 32) != v20 || v10 + 32 >= v21)
      memmove((void *)(v10 + 32), v20, 24 * a2);
    a4(v10 + 32 + 24 * a2, a3);
    v23 = (char *)(v21 + 24 * v35);
    if (v34 != v23 || v34 >= &v23[24 * v14])
      memmove(v34, v23, 24 * v14);
    *(_QWORD *)(v18 + 16) = 0;
    swift_release();
    v17 = v10 + 32;
LABEL_27:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v19))
    {
      v32 = *(_QWORD *)(v10 + 16);
      v29 = __OFADD__(v19, v32);
      v33 = v19 + v32;
      if (!v29)
      {
        if (v33 >= v19)
        {
          if ((v33 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = v17 - 24 * v19;
            v4[2] = v19;
            v4[3] = (2 * v33) | 1;
            return result;
          }
          goto LABEL_40;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v19 = v4[2];
  v25 = v19 + a2;
  if (__OFADD__(v19, a2))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v25 < v19)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (__OFSUB__(v25, v19))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v26 = v4[1];
  memcpy((void *)(v10 + 32), (const void *)(v26 + 24 * v19), 24 * a2);
  result = ((uint64_t (*)(uint64_t, uint64_t))a4)(v17 + 24 * a2, a3);
  v27 = v25 + v35;
  if (__OFADD__(v25, v35))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v28 = v4[3] >> 1;
  v29 = __OFSUB__(v28, v27);
  v30 = v28 < v27;
  v31 = v28 - v27;
  if (v30)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (!v29)
  {
    memcpy(v34, (const void *)(v26 + 24 * v27), 24 * v31);
    goto LABEL_27;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 24 * a5 + 24 * v8;
  if (v13 == v11 + 24 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 24 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 24 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKRefineMorph.Match.MatchTo>);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v27[2] = v6;
  v27[3] = 2 * ((uint64_t)(v28 - 32) / 24);
  return (uint64_t)v27;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t specialized ArraySlice._copyToNewBuffer(oldCount:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  v3 = a1 + 1;
  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  swift_unknownObjectRetain();
  v8 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(a1, v3, v4, v5, v6, v7);
  swift_unknownObjectRelease();
  v11 = v8;
  v9 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
  specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v11, a1, 0, (void (*)(uint64_t, uint64_t))v9);
  swift_release();
  return swift_release();
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 24 * v6 + 24 * v7 != v9 + 24 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = (v8 + 24 * v6 - a1 - 32) / 24;
    isUniquelyReferenced_nonNull = v7 + v16;
    if (!__OFADD__(v7, v16))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_19:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void specialized PKRefineMorph.GridMesh.init(bounds:step:)(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  double Width;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  double Height;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double MinX;
  double v27;
  double MinY;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  float v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  Width = CGRectGetWidth(*(CGRect *)&a3);
  if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (!a1)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if ((uint64_t)Width == 0x8000000000000000 && a1 == -1)
    goto LABEL_65;
  v14 = (uint64_t)Width / a1;
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    goto LABEL_57;
  if (v16 <= 2)
    v17 = 2;
  else
    v17 = v16;
  v59.origin.x = a3;
  v59.origin.y = a4;
  v59.size.width = a5;
  v59.size.height = a6;
  Height = CGRectGetHeight(v59);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
    goto LABEL_58;
  if (Height <= -9.22337204e18)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if ((uint64_t)Height == 0x8000000000000000 && a1 == -1)
    goto LABEL_66;
  v19 = (uint64_t)Height / a1;
  v15 = __OFADD__(v19, 1);
  v20 = v19 + 1;
  if (v15)
    goto LABEL_61;
  if (v20 <= 2)
    v21 = 2;
  else
    v21 = v20;
  if ((unsigned __int128)(v17 * (__int128)v21) >> 64 != (v17 * v21) >> 63)
    goto LABEL_62;
  v55 = a2;
  v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v17 * v21) & ~((v17 * v21) >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v23 = 0;
  v56 = v21 - 1;
  do
  {
    v24 = 0;
    v25 = (double)v23++;
    v58 = v25 / (double)(v21 - 1);
    *(float *)&v25 = v58;
    v57 = LODWORD(v25);
    do
    {
      v60.origin.x = a3;
      v60.origin.y = a4;
      v60.size.width = a5;
      v60.size.height = a6;
      MinX = CGRectGetMinX(v60);
      v61.origin.x = a3;
      v61.origin.y = a4;
      v61.size.width = a5;
      v61.size.height = a6;
      v27 = CGRectGetWidth(v61);
      v62.origin.x = a3;
      v62.origin.y = a4;
      v62.size.width = a5;
      v62.size.height = a6;
      MinY = CGRectGetMinY(v62);
      v63.origin.x = a3;
      v63.origin.y = a4;
      v63.size.width = a5;
      v63.size.height = a6;
      v29 = CGRectGetHeight(v63);
      v31 = *((_QWORD *)v22 + 2);
      v30 = *((_QWORD *)v22 + 3);
      if (v31 >= v30 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v22);
      v32 = (double)v24 / (double)(v17 - 1);
      *(float *)&v33 = MinX + v32 * v27;
      v34 = MinY + v58 * v29;
      *((float *)&v33 + 1) = v34;
      *(float *)&v32 = v32;
      HIDWORD(v32) = v57;
      *((_QWORD *)v22 + 2) = v31 + 1;
      v35 = &v22[24 * v31];
      *((_QWORD *)v35 + 4) = v33;
      *((_QWORD *)v35 + 5) = v33;
      *((double *)v35 + 6) = v32;
      ++v24;
    }
    while (v17 != v24);
  }
  while (v23 != v21);
  if (v17 + 0x4000000000000000 < 0)
    goto LABEL_63;
  v36 = (2 * v17) | 1;
  if ((unsigned __int128)(v56 * (__int128)v36) >> 64 == (v56 * v36) >> 63)
  {
    v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v56 * v36) & ~((v56 * v36) >> 63), 0, MEMORY[0x1E0DEE9D8]);
    v38 = v21 - 1;
    v39 = v37;
    v40 = 0;
    v41 = 0;
    v42 = v17;
    while ((unsigned __int128)(v41 * (__int128)v17) >> 64 == (v41 * v17) >> 63)
    {
      ++v41;
      if ((unsigned __int128)(v41 * (__int128)v17) >> 64 != (v41 * v17) >> 63)
        goto LABEL_52;
      for (i = 0; i != v17; ++i)
      {
        if ((unint64_t)(v40 + i) >> 16)
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v45 = *((_QWORD *)v39 + 2);
        v44 = *((_QWORD *)v39 + 3);
        v46 = v45 + 1;
        if (v45 >= v44 >> 1)
        {
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v39);
          v38 = v21 - 1;
          v39 = v50;
        }
        *((_QWORD *)v39 + 2) = v46;
        *(_WORD *)&v39[2 * v45 + 32] = v40 + i;
        if (v42 < 0)
          goto LABEL_49;
        v47 = v42 + i;
        if ((unint64_t)(v42 + i) >> 16)
          goto LABEL_50;
        v48 = *((_QWORD *)v39 + 3);
        v49 = v45 + 2;
        if (v49 > (uint64_t)(v48 >> 1))
        {
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49, 1, v39);
          v38 = v21 - 1;
          v39 = v51;
        }
        *((_QWORD *)v39 + 2) = v49;
        *(_WORD *)&v39[2 * v46 + 32] = v47;
      }
      v53 = *((_QWORD *)v39 + 2);
      v52 = *((_QWORD *)v39 + 3);
      if (v53 >= v52 >> 1)
      {
        v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v39);
        v38 = v21 - 1;
        v39 = v54;
      }
      *((_QWORD *)v39 + 2) = v53 + 1;
      *(_WORD *)&v39[2 * v53 + 32] = -1;
      v42 += v17;
      v40 += v17;
      if (v41 == v38)
      {
        *(_QWORD *)v55 = v22;
        *(_QWORD *)(v55 + 8) = v39;
        *(CGFloat *)(v55 + 16) = a3;
        *(CGFloat *)(v55 + 24) = a4;
        *(CGFloat *)(v55 + 32) = a5;
        *(CGFloat *)(v55 + 40) = a6;
        *(_QWORD *)(v55 + 48) = v17;
        *(_QWORD *)(v55 + 56) = v21;
        return;
      }
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

char *specialized static PKRefineMorph.NStroke.normalized(stroke:step:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  char *v7;
  char v8;
  double v9;
  float64x2_t v10;
  unint64_t v11;
  unint64_t v12;
  float64x2_t v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  float64x2_t v27;
  double v28;
  char isUniquelyReferenced_nonNull_native;
  float64x2_t v30;
  unint64_t v31;
  char *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v4 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0uLL;
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  v8 = 1;
  v9 = 0.0;
  do
  {
    v10 = v6;
    v6 = *(float64x2_t *)(v4 + 16 * v5);
    if ((v8 & 1) != 0)
    {
      v37 = *(float64x2_t *)(v4 + 16 * v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v12 = *((_QWORD *)v7 + 2);
      v11 = *((_QWORD *)v7 + 3);
      v6 = v37;
      if (v12 >= v11 >> 1)
      {
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v7);
        v6 = v37;
        v7 = v23;
      }
      *((_QWORD *)v7 + 2) = v12 + 1;
      *(float64x2_t *)&v7[16 * v12 + 32] = v6;
    }
    else
    {
      v13 = vsubq_f64(v6, v10);
      v14 = sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
      if (v9 + v14 <= a2)
      {
        v9 = v9 + v14;
      }
      else
      {
        v34 = v10;
        v35 = v13;
        v38 = *(float64x2_t *)(v4 + 16 * v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v16 = *((_QWORD *)v7 + 2);
        v15 = *((_QWORD *)v7 + 3);
        v17 = v35;
        v6 = v38;
        if (v16 >= v15 >> 1)
        {
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v7);
          v17 = v35;
          v6 = v38;
          v7 = v24;
        }
        v18 = vaddq_f64(v34, vmulq_n_f64(v17, (a2 - v9) / v14));
        *((_QWORD *)v7 + 2) = v16 + 1;
        *(float64x2_t *)&v7[16 * v16 + 32] = v18;
        v19 = v14 - (a2 - v9);
        if (v19 <= a2)
        {
          v9 = v19;
        }
        else
        {
          v20 = v16 + 3;
          do
          {
            v21 = *((_QWORD *)v7 + 3);
            if (v20 - 2 >= v21 >> 1)
            {
              v36 = v18;
              v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v20 - 1, 1, v7);
              v18 = v36;
              v6 = v38;
              v7 = v22;
            }
            v18 = vaddq_f64(v18, vmulq_n_f64(vsubq_f64(v6, v18), a2 / v19));
            *((_QWORD *)v7 + 2) = v20 - 1;
            *(float64x2_t *)&v7[16 * v20] = v18;
            v19 = v19 - a2;
            v9 = v19 + 0.0;
            ++v20;
          }
          while (v19 + 0.0 > a2);
        }
      }
    }
    v8 = 0;
    ++v5;
  }
  while (v5 != v2);
  swift_bridgeObjectRelease();
  v25 = *((_QWORD *)v7 + 2);
  if (v25)
  {
    v26 = v25 - 1;
    v39 = *(float64x2_t *)(v4 + 16 * v2 - 16);
    v27 = vsubq_f64(v39, *(float64x2_t *)&v7[16 * v25 + 16]);
    v28 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (v28 >= a2 * 0.5)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v26 = *((_QWORD *)v7 + 2);
      v31 = *((_QWORD *)v7 + 3);
      v30 = v39;
      if (v26 >= v31 >> 1)
      {
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v26 + 1, 1, v7);
        v30 = v39;
        v7 = v33;
      }
      *((_QWORD *)v7 + 2) = v26 + 1;
    }
    else
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
      v30 = v39;
      if (v25 > *((_QWORD *)v7 + 2))
      {
        __break(1u);
        return (char *)MEMORY[0x1E0DEE9D8];
      }
    }
    *(float64x2_t *)&v7[16 * v26 + 32] = v30;
  }
  return v7;
}

uint64_t specialized static PKRefineMorph.calcMatches(fromDrawing:toDrawing:maxDist:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  float64x2_t *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  float64x2_t v28;
  double v29;
  unint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  uint64_t v66[3];

  v52 = *(_QWORD *)(a1 + 16);
  if (!v52)
    return MEMORY[0x1E0DEE9D8];
  v4 = a2;
  v5 = a1 + 32;
  v6 = a3 * a3;
  v60 = a2 + 32;
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = 0;
  v9 = 0;
  v10 = MEMORY[0x1E0DEE9D8];
  v50 = v5;
  v53 = v4;
  while (1)
  {
    v12 = *(_QWORD *)(v7 + 8 * v8);
    v54 = *(_QWORD *)(v12 + 16);
    if (v54)
      break;
LABEL_6:
    if (++v8 == v52)
      goto LABEL_74;
  }
  v51 = v8;
  v61 = *(_QWORD *)(v4 + 16);
  v57 = *(_QWORD *)(v7 + 8 * v8);
  v58 = v12 + 32;
  result = swift_bridgeObjectRetain_n();
  v13 = 0;
LABEL_11:
  v14 = *(_QWORD *)(v57 + 16);
  if (v13 >= v14)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    return result;
  }
  v65 = *(float64x2_t *)(v58 + 16 * v13);
  v59 = v13 + 1;
  v62 = 0u;
  if (v14 >= 2)
  {
    if (v13)
    {
      if (v13 >= v14 - 1)
      {
        v16 = *(float64x2_t *)(v58 + 16 * (v14 - 1));
        v17 = *(float64x2_t *)(v58 + 16 * v14 - 32);
      }
      else
      {
        if (v59 >= v14)
          goto LABEL_76;
        v15 = v13 - 1;
        if (v15 >= v14)
          goto LABEL_77;
        v16 = *(float64x2_t *)(v58 + 16 * v59);
        v17 = *(float64x2_t *)(v58 + 16 * v15);
      }
    }
    else
    {
      v17 = *(float64x2_t *)(v57 + 32);
      v16 = *(float64x2_t *)(v57 + 48);
    }
    v18 = vsubq_f64(v16, v17);
    v62 = vdivq_f64(v18, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddvq_f64(vmulq_f64(v18, v18)))), 0));
  }
  if (!v61)
  {
    v19 = (char *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_9;
    goto LABEL_61;
  }
  v55 = v10;
  v56 = v9;
  swift_bridgeObjectRetain();
  v10 = 0;
  v19 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v20 = v19;
    v21 = *(_QWORD *)(v60 + 8 * v10);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
      break;
    v25 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_45:
    v19 = v20;
    v37 = *((_QWORD *)v25 + 2);
    v38 = *((_QWORD *)v20 + 2);
    v39 = v38 + v37;
    if (__OFADD__(v38, v37))
      goto LABEL_70;
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v39 <= *((_QWORD *)v20 + 3) >> 1)
    {
      if (*((_QWORD *)v25 + 2))
        goto LABEL_54;
    }
    else
    {
      if (v38 <= v39)
        v41 = v38 + v37;
      else
        v41 = v38;
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v41, 1, v20);
      if (*((_QWORD *)v25 + 2))
      {
LABEL_54:
        v42 = *((_QWORD *)v19 + 2);
        if ((*((_QWORD *)v19 + 3) >> 1) - v42 < v37)
          goto LABEL_72;
        memcpy(&v19[24 * v42 + 32], v25 + 32, 24 * v37);
        if (v37)
        {
          v43 = *((_QWORD *)v19 + 2);
          v44 = __OFADD__(v43, v37);
          v45 = v43 + v37;
          if (v44)
            goto LABEL_73;
          *((_QWORD *)v19 + 2) = v45;
        }
        goto LABEL_24;
      }
    }
    if (v37)
      goto LABEL_71;
LABEL_24:
    ++v10;
    swift_bridgeObjectRelease();
    if (v10 == v61)
    {
      v4 = v53;
      swift_bridgeObjectRelease();
      v10 = v55;
      v9 = v56;
      if (!*((_QWORD *)v19 + 2))
      {
LABEL_9:
        result = swift_bridgeObjectRelease();
        goto LABEL_10;
      }
LABEL_61:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
      v46 = *((_QWORD *)v19 + 2);
      v66[0] = (uint64_t)(v19 + 32);
      v66[1] = v46;
      specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v66);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
        v10 = result;
      }
      v48 = *(_QWORD *)(v10 + 16);
      v47 = *(_QWORD *)(v10 + 24);
      if (v48 >= v47 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, (char *)v10);
        v10 = result;
      }
      *(_QWORD *)(v10 + 16) = v48 + 1;
      v49 = v10 + 32 * v48;
      *(float64x2_t *)(v49 + 32) = v65;
      *(_QWORD *)(v49 + 48) = v19;
      *(_QWORD *)(v49 + 56) = 0;
LABEL_10:
      v13 = v59;
      if (v59 == v54)
      {
        swift_bridgeObjectRelease_n();
        v7 = v50;
        v8 = v51;
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRetain();
  v23 = 0;
  v24 = (float64x2_t *)(v21 + 32);
  v25 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v27 = v23 + 1;
    v28 = vsubq_f64(*v24, v65);
    v29 = vaddvq_f64(vmulq_f64(v28, v28));
    if (v29 < v6)
      break;
LABEL_28:
    ++v24;
    v23 = v27;
    if (v22 == v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
  }
  v64 = *v24;
  v30 = *(_QWORD *)(v21 + 16);
  v31 = 0uLL;
  if (v30 < 2)
    goto LABEL_39;
  if (!v23)
  {
    v33 = *(float64x2_t *)(v21 + 32);
    v32 = *(float64x2_t *)(v21 + 48);
    goto LABEL_38;
  }
  if (v23 >= (uint64_t)(v30 - 1))
  {
    v32 = *(float64x2_t *)(v21 + 32 + 16 * (v30 - 1));
    v33 = *(float64x2_t *)(v21 + 16 * v30);
    goto LABEL_38;
  }
  if (v27 < v30)
  {
    if (v23 - 1 >= v30)
      goto LABEL_69;
    v32 = v24[1];
    v33 = v24[-1];
LABEL_38:
    v34 = vsubq_f64(v32, v33);
    v31 = vdivq_f64(v34, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddvq_f64(vmulq_f64(v34, v34)))), 0));
LABEL_39:
    v63 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v36 = *((_QWORD *)v25 + 2);
    v35 = *((_QWORD *)v25 + 3);
    if (v36 >= v35 >> 1)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v25);
    *((_QWORD *)v25 + 2) = v36 + 1;
    v26 = &v25[24 * v36];
    *((double *)v26 + 4) = v29 / a3 + fabs(vaddvq_f64(vmulq_f64(v62, v63))) * -200.0;
    *(float64x2_t *)(v26 + 40) = v64;
    goto LABEL_28;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t specialized Array.replaceSubrange<A>(_:with:)(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t *v6;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = result;
  v11 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v15 > *(_QWORD *)(v8 + 24) >> 1)
  {
    if (v9 <= v15)
      v17 = v9 + v14;
    else
      v17 = v9;
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v17, 1, (char *)v8);
    v8 = result;
  }
  v18 = (void *)(v8 + 32 + 24 * v10);
  if (!v14)
    goto LABEL_20;
  v19 = *(_QWORD *)(v8 + 16);
  v20 = __OFSUB__(v19, a2);
  v21 = v19 - a2;
  if (v20)
    goto LABEL_29;
  result = (unint64_t)v18 + 24 * v13;
  v22 = (const void *)(v8 + 32 + 24 * a2);
  if ((const void *)result != v22 || result >= (unint64_t)v22 + 24 * v21)
    result = (unint64_t)memmove((void *)result, v22, 24 * v21);
  v23 = *(_QWORD *)(v8 + 16);
  v20 = __OFADD__(v23, v14);
  v24 = v23 + v14;
  if (v20)
    goto LABEL_30;
  *(_QWORD *)(v8 + 16) = v24;
LABEL_20:
  if (v13 >= 1)
    result = (unint64_t)memcpy(v18, (const void *)(a4 + 24 * a5), 24 * v13);
  *v6 = v8;
  return result;
}

uint64_t specialized Array.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  uint64_t v6;
  unint64_t v7;

  if ((a5 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v7 < a5 || (uint64_t)v7 < a6)
    goto LABEL_14;
  if (a6 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)v6 + 24 * a5 + 32 != a2 + 24 * a3)
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, result, a2, a3, a4);
  if ((uint64_t)(a4 >> 1) < a3)
    goto LABEL_16;
  if (a5 != a3 || a4 >> 1 != a6)
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, result, a2, a3, a4);
  return result;
}

unint64_t specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v6)
    goto LABEL_13;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_17;
  result = v7 + 32 + 24 * result + 24 * a3;
  v11 = (const void *)(v7 + 32 + 24 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 24 * v10)
    result = (unint64_t)memmove((void *)result, v11, 24 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_18;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_13:
  if (a3 > 0)
LABEL_19:
    __break(1u);
  return result;
}

uint64_t specialized static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CGAffineTransform *a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>, double a11@<D6>, double a12@<D7>)
{
  double v12;
  uint64_t v13;
  int64_t v14;
  CGFloat v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  id v22;
  id v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  CGFloat a;
  id v28;
  void *v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGPoint v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  CGFloat v41;
  uint64_t v42;
  CGFloat v43;
  uint64_t v44;
  id v45;
  double v46;
  id v47;
  int64_t v48;
  id v49;
  uint64_t v50;
  CGFloat v51;
  id v52;
  void *v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  CGPoint v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  double v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v91;
  double v92;
  uint64_t v93;
  unint64_t v94;
  __objc2_class *v95;
  double *v96;
  double *v97;
  double v98;
  double v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  double *v104;
  char *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  double v132;
  CGFloat v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  double v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t inited;
  uint64_t v151;
  int64_t v152;
  CGFloat v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  CGFloat v161;
  uint64_t v162;
  double v163;
  unint64_t v164;
  unint64_t v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  double *v174;
  double v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  double v179;
  float64x2_t v180;
  char v181;
  unint64_t v182;
  uint64_t v183;
  _BOOL8 v184;
  uint64_t v185;
  char v186;
  unint64_t v187;
  char v188;
  CGFloat v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  double v196;
  int64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  unint64_t v203;
  unint64_t v204;
  int64_t v205;
  unint64_t v206;
  int64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t result;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  double v220;
  double v221;
  double v222;
  double v223;
  _BYTE v224[32];
  _BYTE v225[32];
  double v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  double *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v236;
  uint64_t v237;
  int64_t v238;
  unint64_t v239;
  double v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  CGFloat v244;
  CGFloat v245;
  uint64_t v246;
  CGFloat v247;
  CGFloat v248;
  CGFloat v249;
  CGAffineTransform v250;
  __int128 v251;
  CGAffineTransform v252;
  __int128 v253;
  CGFloat v254;
  uint64_t v255;
  CGAffineTransform by;
  CGAffineTransform toTransform;
  CGPoint v258;
  CGPoint v259;
  CGRect v260;
  CGRect v261;
  CGRect v262;
  CGRect v263;
  CGRect v264;

  v13 = a2;
  *(double *)&v225[16] = a11;
  *(double *)&v225[24] = a12;
  *(double *)v225 = a9;
  *(double *)&v225[8] = a10;
  *(double *)&v224[16] = a7;
  *(double *)&v224[24] = a8;
  *(double *)v224 = a5;
  *(double *)&v224[8] = a6;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    *(_QWORD *)&v250.a = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v17 = 0;
    v18 = *(uint64_t *)&v250.a;
    v241 = a1 + 32;
    while (1)
    {
      v245 = *(double *)&v18;
      v19 = one-time initialization token for strokePolygonStep;
      v20 = *(id *)(v241 + 8 * v17);
      if (v19 != -1)
        swift_once();
      v21 = *(double *)&static PKRefineMorph.strokePolygonStep;
      v22 = v20;
      v23 = objc_msgSend(v22, sel_path);
      if (!v23)
        v23 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);

      v24 = (unint64_t)objc_msgSend(v23, sel_count);
      if (((unint64_t)objc_msgSend(v23, sel_count) & 0x8000000000000000) != 0)
        goto LABEL_207;
      v25 = objc_msgSend(v23, sel_count);
      if ((v24 & 0x8000000000000000) != 0 || (uint64_t)v25 < (uint64_t)v24)
        goto LABEL_208;
      if (v24)
        break;

      a = v15;
LABEL_20:
      v37 = specialized static PKRefineMorph.NStroke.normalized(stroke:step:)(*(uint64_t *)&a, v21);

      swift_bridgeObjectRelease();
      *(double *)&v18 = v245;
      v250.a = v245;
      v39 = *(_QWORD *)(*(_QWORD *)&v245 + 16);
      v38 = *(_QWORD *)(*(_QWORD *)&v245 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1);
        v18 = *(uint64_t *)&v250.a;
      }
      ++v17;
      *(_QWORD *)(v18 + 16) = v39 + 1;
      *(_QWORD *)(v18 + 8 * v39 + 32) = v37;
      v15 = MEMORY[0x1E0DEE9D8];
      if (v17 == v14)
      {
        v13 = a2;
        goto LABEL_25;
      }
    }
    toTransform.a = v15;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    v26 = 0;
    a = toTransform.a;
    while (v24 != v26)
    {
      v28 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, v26);
      if (!v28)
      {
LABEL_227:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_228:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v29 = v28;
      objc_msgSend(v28, sel_location);
      v31 = v30;
      v33 = v32;
      objc_msgSend(v22, sel_transform);
      v258.x = v31;
      v258.y = v33;
      v34 = CGPointApplyAffineTransform(v258, &v252);

      toTransform.a = a;
      v36 = *(_QWORD *)(*(_QWORD *)&a + 16);
      v35 = *(_QWORD *)(*(_QWORD *)&a + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1);
        a = toTransform.a;
      }
      *(_QWORD *)(*(_QWORD *)&a + 16) = v36 + 1;
      *(CGPoint *)(*(_QWORD *)&a + 16 * v36 + 32) = v34;
      if (v26 >= (uint64_t)objc_msgSend(v23, sel_count))
        goto LABEL_189;
      if (v24 == ++v26)
      {

        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
  }
  else
  {
    *(double *)&v18 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    v40 = *(_QWORD *)(v13 + 16);
    v41 = MEMORY[0x1E0DEE9D8];
    if (!v40)
    {
      v43 = MEMORY[0x1E0DEE9D8];
LABEL_49:
      v255 = *(_QWORD *)&v43;
      v63 = swift_bridgeObjectRetain();
      v64 = PKRefineMorph.NDrawing.bounds.getter(v63);
      v66 = v65;
      v68 = v67;
      v70 = v69;
      swift_bridgeObjectRelease();
      v71 = PKRefineMorph.NDrawing.bounds.getter(v18);
      v221 = v72 / v68;
      v222 = v71 - v64 * (v72 / v68);
      by.a = v72 / v68;
      by.b = 0.0;
      by.c = 0.0;
      v223 = v73 / v70;
      by.d = v73 / v70;
      by.tx = v222;
      v220 = v74 - v66 * (v73 / v70);
      by.ty = v220;
      PKRefineMorph.NDrawing.transform(by:)(&by);
      v75 = v255;
      v76 = swift_bridgeObjectRetain();
      v77 = PKRefineMorph.NDrawing.bounds.getter(v76);
      v79 = v78;
      v81 = v80;
      v83 = v82;
      swift_bridgeObjectRelease();
      v264.origin.x = PKRefineMorph.NDrawing.bounds.getter(v18);
      v264.origin.y = v84;
      v264.size.width = v85;
      v264.size.height = v86;
      v260.origin.x = v77;
      v260.origin.y = v79;
      v260.size.width = v81;
      v260.size.height = v83;
      v261 = CGRectUnion(v260, v264);
      x = v261.origin.x;
      y = v261.origin.y;
      width = v261.size.width;
      height = v261.size.height;
      v91 = CGRectGetWidth(v261);
      v262.origin.x = x;
      v262.origin.y = y;
      v262.size.width = width;
      v262.size.height = height;
      v92 = CGRectGetHeight(v262);
      if (v91 > v92)
        v92 = v91;
      v12 = v92 * 0.25;
      swift_bridgeObjectRetain();
      v24 = specialized static PKRefineMorph.calcMatches(fromDrawing:toDrawing:maxDist:)(v18, v75, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v254 = v41;
      v93 = *(_QWORD *)(v24 + 16);
      if (v93)
      {
        v228 = v12;
        v236 = v24 + 32;
        swift_bridgeObjectRetain();
        v94 = 0;
        v232 = (double *)(v24 + 40);
        *(double *)&v95 = COERCE_DOUBLE(&OBJC_METACLASS___PKTool);
        v96 = (double *)&unk_1EF560000;
        v12 = 3.0;
        v247 = v41;
        v230 = v24;
        do
        {
          if (v94 >= *(_QWORD *)(v24 + 16))
            goto LABEL_214;
          v97 = (double *)(v236 + 32 * v94);
          v99 = *v97;
          v98 = v97[1];
          v15 = v97[2];
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v247 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v247 + 16) + 1, 1, *(_QWORD **)&v247));
          v101 = *(_QWORD *)(*(_QWORD *)&v247 + 16);
          v100 = *(_QWORD *)(*(_QWORD *)&v247 + 24);
          if (v101 >= v100 >> 1)
            v247 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), v101 + 1, 1, *(_QWORD **)&v247));
          v239 = v94 + 1;
          *(_QWORD *)(*(_QWORD *)&v247 + 16) = v101 + 1;
          v102 = (_QWORD *)(*(_QWORD *)&v247 + 32);
          *(CGFloat *)(*(_QWORD *)&v247 + 32 + 8 * v101) = v41;
          swift_bridgeObjectRetain();
          v103 = 0;
          v104 = v232;
          do
          {
            if (v94 != v103)
            {
              v107 = *(v104 - 1);
              v106 = *v104;
              if (v95[59].isa != (__objc2_class *)-1)
                swift_once();
              v108 = fmin((sqrt((v98 - v106) * (v98 - v106) + (v99 - v107) * (v99 - v107)) - v96[197]) / (0.0 - v96[197]), 1.0);
              if (v108 < 0.0)
                v108 = 0.0;
              v109 = v108 * (v108 * 3.0) - v108 * (v108 * (v108 + v108));
              if (v109 > 0.1)
              {
                v110 = *(_QWORD *)(*(_QWORD *)&v247 + 16);
                if (!v110)
                  goto LABEL_195;
                v15 = *(double *)&v95;
                v111 = v110 - 1;
                v112 = v110 - 1;
                v113 = (char *)v102[v112];
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v102[v112] = v113;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v113 + 2) + 1, 1, v113);
                  v102[v111] = v113;
                }
                v116 = *((_QWORD *)v113 + 2);
                v115 = *((_QWORD *)v113 + 3);
                if (v116 >= v115 >> 1)
                {
                  v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v115 > 1), v116 + 1, 1, v113);
                  v102[v111] = v113;
                }
                *((_QWORD *)v113 + 2) = v116 + 1;
                v105 = &v113[16 * v116];
                *((double *)v105 + 4) = v109;
                *((_QWORD *)v105 + 5) = v103;
                *(double *)&v95 = v15;
                v96 = (double *)&unk_1EF560000;
              }
            }
            ++v103;
            v104 += 4;
          }
          while (v93 != v103);
          swift_bridgeObjectRelease();
          v24 = v230;
          swift_bridgeObjectRelease();
          ++v94;
          v41 = MEMORY[0x1E0DEE9D8];
        }
        while (v239 != v93);
        swift_bridgeObjectRelease();
        v254 = v247;
        v12 = v228;
      }
      specialized morphCost #2 (of:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(v24, (uint64_t)&v254);
      v252.a = v41;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
      v15 = v252.a;
      v117 = *(_QWORD *)(v24 + 16);
      swift_bridgeObjectRetain();
      if (v117)
      {
        v118 = 0;
        v119 = (unint64_t *)(v24 + 56);
        do
        {
          specialized morphCost #1 (of:match:in:) in static PKRefineMorph.computeMorph(from:to:fromViewFrame:toViewFrame:transformViewToModel:)(v118, *(v119 - 1), *v119, v24, (uint64_t)&v254, *((float64_t *)v119 - 3), *((float64_t *)v119 - 2));
          v121 = v120;
          v252.a = v15;
          v123 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
          v122 = *(_QWORD *)(*(_QWORD *)&v15 + 24);
          if (v123 >= v122 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v122 > 1), v123 + 1, 1);
            v15 = v252.a;
          }
          ++v118;
          *(_QWORD *)(*(_QWORD *)&v15 + 16) = v123 + 1;
          *(_QWORD *)(*(_QWORD *)&v15 + 8 * v123 + 32) = v121;
          v119 += 4;
        }
        while (v117 != v118);
      }
      swift_bridgeObjectRelease_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_226;
      while (1)
      {
        *(double *)&v124 = MEMORY[0x1E0DEE9D8];
        swift_beginAccess();
        v125 = 0;
        v237 = *(_QWORD *)&v15 + 32;
        v240 = v15;
LABEL_81:
        v126 = v125;
        HIDWORD(v127) = -1030792151 * (unsigned __int16)v125;
        LODWORD(v127) = HIDWORD(v127);
        if ((v127 >> 1) > 0x51EB851)
          break;
        v158 = *(_QWORD *)(v24 + 16);
        if (!v158)
          break;
        v159 = 0;
        v160 = 32;
        while (1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          if (v159 >= *(_QWORD *)(v24 + 16))
            break;
          ++v159;
          PKRefineMorph.Match.filterMatches(distanceMatchCanJumpSqr:)(v12 * ((double)(5000 - v126) / 5000.0) * (v12 * ((double)(5000 - v126) / 5000.0)));
          v160 += 32;
          if (v158 == v159)
            goto LABEL_82;
        }
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        v15 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(uint64_t *)&v15));
      }
LABEL_82:
      v229 = v126;
      v128 = v126 + 1;
      *(double *)&v129 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(v124));
      v130 = *(_QWORD *)(v24 + 16);
      v131 = v24 + 32;
      swift_bridgeObjectRetain();
      v132 = *(double *)&v129;
      v133 = *(double *)&v124;
      v134 = 0;
LABEL_83:
      if (v134 <= v130)
        v135 = v130;
      else
        v135 = v134;
      v136 = 32 * v134 + 48;
      while (v130 != v134)
      {
        if (v135 == v134)
        {
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        if (v134 >= *(_QWORD *)(v24 + 16))
          goto LABEL_199;
        ++v134;
        v137 = *(_QWORD *)(*(_QWORD *)(v24 + v136) + 16);
        v136 += 32;
        if (v137 >= 2)
        {
          v138 = v132;
          v139 = swift_isUniquelyReferenced_nonNull_native();
          v252.a = v133;
          if ((v139 & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v133 + 16) + 1, 1);
            v133 = v252.a;
          }
          v141 = *(_QWORD *)(*(_QWORD *)&v133 + 16);
          v140 = *(_QWORD *)(*(_QWORD *)&v133 + 24);
          v132 = v138;
          if (v141 >= v140 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v140 > 1), v141 + 1, 1);
            v132 = v138;
            v133 = v252.a;
          }
          *(_QWORD *)(*(_QWORD *)&v133 + 16) = v141 + 1;
          *(_QWORD *)(*(_QWORD *)&v133 + 8 * v141 + 32) = v134 - 1;
          goto LABEL_83;
        }
      }
      v142 = *(_QWORD *)(*(_QWORD *)&v133 + 16);
      if (v142)
      {
        v248 = v132;
        v231 = v128;
        v143 = -(uint64_t)v142;
        while (1)
        {
          v252.a = 0.0;
          MEMORY[0x1C3B80280](&v252, 8);
          v144 = (*(unint64_t *)&v252.a * (unsigned __int128)v142) >> 64;
          if (v142 > *(_QWORD *)&v252.a * v142 && v143 % v142 > *(_QWORD *)&v252.a * v142)
          {
            do
            {
              v252.a = 0.0;
              MEMORY[0x1C3B80280](&v252, 8);
            }
            while (v143 % v142 > *(_QWORD *)&v252.a * v142);
            v144 = (*(unint64_t *)&v252.a * (unsigned __int128)v142) >> 64;
          }
          if (v144 >= *(_QWORD *)(*(_QWORD *)&v133 + 16))
            goto LABEL_200;
          v15 = *(double *)(*(_QWORD *)&v133 + 32 + 8 * v144);
          if ((*(_QWORD *)&v15 & 0x8000000000000000) != 0)
            goto LABEL_201;
          if (*(_QWORD *)&v15 >= *(_QWORD *)(v24 + 16))
            goto LABEL_202;
          v145 = v24;
          v24 = *(_QWORD *)(*(_QWORD *)(v131 + 32 * *(_QWORD *)&v15 + 16) + 16);
          if (!v24)
            goto LABEL_203;
          v252.a = 0.0;
          MEMORY[0x1C3B80280](&v252, 8);
          v146 = (*(unint64_t *)&v252.a * (unsigned __int128)v24) >> 64;
          if (v24 > *(_QWORD *)&v252.a * v24)
          {
            v147 = -(uint64_t)v24 % v24;
            if (v147 > *(_QWORD *)&v252.a * v24)
            {
              do
              {
                v252.a = 0.0;
                MEMORY[0x1C3B80280](&v252, 8);
              }
              while (v147 > *(_QWORD *)&v252.a * v24);
              v146 = (*(unint64_t *)&v252.a * (unsigned __int128)v24) >> 64;
            }
          }
          if (*(uint64_t *)&v15 >= *(_QWORD *)(v145 + 16))
            goto LABEL_204;
          v24 = v145;
          if (v146 != *(_QWORD *)(v131 + 32 * *(_QWORD *)&v15 + 24))
          {
            swift_release();
            v148 = (char *)v145;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v148 = specialized _ArrayBuffer._consumeAndCreateNew()(v145);
            if (*(uint64_t *)&v15 >= *((_QWORD *)v148 + 2))
              goto LABEL_224;
            v149 = v148 + 32;
            *(_QWORD *)&v148[32 * *(_QWORD *)&v15 + 56] = v146;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1BE4F9590;
            *(CGFloat *)(inited + 32) = v15;
            if (*(uint64_t *)&v15 >= *(_QWORD *)(*(_QWORD *)&v254 + 16))
              goto LABEL_225;
            v151 = *(_QWORD *)(*(_QWORD *)&v254 + 8 * *(_QWORD *)&v15 + 32);
            v152 = *(_QWORD *)(v151 + 16);
            v243 = v148;
            if (v152)
            {
              v233 = inited;
              *(_QWORD *)&v252.a = MEMORY[0x1E0DEE9D8];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v152, 0);
              v153 = v252.a;
              v154 = *(_QWORD *)(*(_QWORD *)&v252.a + 16);
              v155 = 40;
              do
              {
                v156 = *(_QWORD *)(v151 + v155);
                v252.a = v153;
                v157 = *(_QWORD *)(*(_QWORD *)&v153 + 24);
                if (v154 >= v157 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v157 > 1), v154 + 1, 1);
                  v153 = v252.a;
                }
                *(_QWORD *)(*(_QWORD *)&v153 + 16) = v154 + 1;
                *(_QWORD *)(*(_QWORD *)&v153 + 8 * v154 + 32) = v156;
                v155 += 16;
                ++v154;
                --v152;
              }
              while (v152);
              swift_bridgeObjectRelease();
              inited = v233;
            }
            else
            {
              v153 = MEMORY[0x1E0DEE9D8];
            }
            *(_QWORD *)&v252.a = inited;
            specialized Array.append<A>(contentsOf:)(*(uint64_t *)&v153);
            v161 = v252.a;
            v15 = v240;
            if (*(_QWORD *)(*(_QWORD *)&v252.a + 16))
            {
              v162 = *(_QWORD *)(*(_QWORD *)&v252.a + 16);
              v24 = 0;
              v234 = *(_QWORD *)&v252.a + 32;
              v163 = 0.0;
              while (v24 < *(_QWORD *)(*(_QWORD *)&v161 + 16))
              {
                v164 = *(_QWORD *)(v234 + 8 * v24);
                if ((v164 & 0x8000000000000000) != 0)
                  goto LABEL_210;
                if (v164 >= *(_QWORD *)(*(_QWORD *)&v15 + 16))
                  goto LABEL_211;
                v165 = *((_QWORD *)v148 + 2);
                if (v164 >= v165)
                  goto LABEL_212;
                if (v164 >= *(_QWORD *)(*(_QWORD *)&v254 + 16))
                  goto LABEL_213;
                v166 = *(double *)(v237 + 8 * v164);
                v167 = *(_QWORD *)(*(_QWORD *)&v254 + 8 * v164 + 32);
                v168 = *(_QWORD *)(v167 + 16);
                if (v168)
                {
                  v169 = &v149[32 * v164];
                  v170 = *((_QWORD *)v169 + 3);
                  if ((v170 & 0x8000000000000000) != 0)
                    goto LABEL_220;
                  v171 = *((_QWORD *)v169 + 2);
                  if (v170 < *(_QWORD *)(v171 + 16))
                  {
                    v172 = *(float64x2_t *)v169;
                    v173 = *(float64x2_t *)(v171 + 24 * v170 + 40);
                    v174 = (double *)(v167 + 40);
                    v175 = 0.0;
                    while (*(_QWORD *)v174 < v165)
                    {
                      v176 = &v149[32 * *(_QWORD *)v174];
                      v177 = *((_QWORD *)v176 + 3);
                      if ((v177 & 0x8000000000000000) != 0)
                        goto LABEL_191;
                      v178 = *((_QWORD *)v176 + 2);
                      if (v177 >= *(_QWORD *)(v178 + 16))
                        goto LABEL_192;
                      v179 = *(v174 - 1);
                      v174 += 2;
                      v180 = vsubq_f64(vaddq_f64(vsubq_f64(v172, *(float64x2_t *)v176), *(float64x2_t *)(v178 + 24 * v177 + 40)), v173);
                      v175 = v175 + v179 * vaddvq_f64(vmulq_f64(v180, v180)) * 1000.0;
                      if (!--v168)
                        goto LABEL_149;
                    }
                    goto LABEL_190;
                  }
                  goto LABEL_221;
                }
                v175 = 0.0;
LABEL_149:
                v15 = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
                v252.a = v248;
                v182 = specialized __RawDictionaryStorage.find<A>(_:)(v164);
                v183 = *(_QWORD *)(*(_QWORD *)&v248 + 16);
                v184 = (v181 & 1) == 0;
                v185 = v183 + v184;
                if (__OFADD__(v183, v184))
                  goto LABEL_215;
                v186 = v181;
                if (*(_QWORD *)(*(_QWORD *)&v248 + 24) >= v185)
                {
                  if ((LOBYTE(v15) & 1) == 0)
                    specialized _NativeDictionary.copy()();
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v185, SLOBYTE(v15));
                  v187 = specialized __RawDictionaryStorage.find<A>(_:)(v164);
                  if ((v186 & 1) != (v188 & 1))
                    goto LABEL_228;
                  v182 = v187;
                }
                v15 = v240;
                v189 = v252.a;
                v248 = v252.a;
                if ((v186 & 1) != 0)
                {
                  *(double *)(*(_QWORD *)(*(_QWORD *)&v252.a + 56) + 8 * v182) = v175;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)&v252.a + 8 * (v182 >> 6) + 64) |= 1 << v182;
                  v190 = 8 * v182;
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v189 + 48) + v190) = v164;
                  *(double *)(*(_QWORD *)(*(_QWORD *)&v189 + 56) + v190) = v175;
                  v191 = *(_QWORD *)(*(_QWORD *)&v189 + 16);
                  v192 = __OFADD__(v191, 1);
                  v193 = v191 + 1;
                  if (v192)
                    goto LABEL_222;
                  *(_QWORD *)(*(_QWORD *)&v189 + 16) = v193;
                }
                ++v24;
                swift_bridgeObjectRelease();
                v163 = v163 - v166 + v175;
                v148 = v243;
                if (v24 == v162)
                {
                  swift_bridgeObjectRelease();
                  v24 = v145;
                  v125 = v231;
                  if (v163 < 0.0)
                    goto LABEL_161;
                  goto LABEL_160;
                }
              }
              goto LABEL_209;
            }
            swift_bridgeObjectRelease();
            v163 = 0.0;
            v24 = v145;
            v125 = v231;
LABEL_160:
            v194 = exp(-v163 / (double)(5000 - v229));
            specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v195, 0.0, 1.0);
            if (v196 < v194)
            {
LABEL_161:
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v197 = 0;
              v198 = *(_QWORD *)&v248 + 64;
              v199 = 1 << *(_BYTE *)(*(_QWORD *)&v248 + 32);
              if (v199 < 64)
                v200 = ~(-1 << v199);
              else
                v200 = -1;
              v201 = v200 & *(_QWORD *)(*(_QWORD *)&v248 + 64);
              v202 = (unint64_t)(v199 + 63) >> 6;
              if (v201)
              {
LABEL_165:
                v203 = __clz(__rbit64(v201));
                v201 &= v201 - 1;
                v204 = v203 | (v197 << 6);
                goto LABEL_180;
              }
              while (1)
              {
                v205 = v197 + 1;
                if (__OFADD__(v197, 1))
                  goto LABEL_219;
                if (v205 >= v202)
                  goto LABEL_184;
                v206 = *(_QWORD *)(v198 + 8 * v205);
                ++v197;
                if (!v206)
                {
                  v197 = v205 + 1;
                  if (v205 + 1 >= v202)
                    goto LABEL_184;
                  v206 = *(_QWORD *)(v198 + 8 * v197);
                  if (!v206)
                  {
                    v197 = v205 + 2;
                    if (v205 + 2 >= v202)
                      goto LABEL_184;
                    v206 = *(_QWORD *)(v198 + 8 * v197);
                    if (!v206)
                    {
                      v207 = v205 + 3;
                      if (v207 >= v202)
                      {
LABEL_184:
                        v24 = (unint64_t)v243;
                        swift_bridgeObjectRelease();
                        swift_release();
                        goto LABEL_186;
                      }
                      v206 = *(_QWORD *)(v198 + 8 * v207);
                      if (!v206)
                      {
                        while (1)
                        {
                          v197 = v207 + 1;
                          if (__OFADD__(v207, 1))
                            goto LABEL_223;
                          if (v197 >= v202)
                            goto LABEL_184;
                          v206 = *(_QWORD *)(v198 + 8 * v197);
                          ++v207;
                          if (v206)
                            goto LABEL_179;
                        }
                      }
                      v197 = v207;
                    }
                  }
                }
LABEL_179:
                v201 = (v206 - 1) & v206;
                v204 = __clz(__rbit64(v206)) + (v197 << 6);
LABEL_180:
                v208 = 8 * v204;
                v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v248 + 48) + 8 * v204);
                if ((v209 & 0x8000000000000000) != 0)
                  goto LABEL_205;
                if (v209 >= *(_QWORD *)(*(_QWORD *)&v15 + 16))
                  goto LABEL_206;
                *(_QWORD *)(v237 + 8 * v209) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v248 + 56) + v208);
                if (v201)
                  goto LABEL_165;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_186:
            *(double *)&v124 = MEMORY[0x1E0DEE9D8];
            if (v125 != 5000)
              goto LABEL_81;
            goto LABEL_197;
          }
        }
      }
      goto LABEL_196;
    }
    v246 = v18;
    *(_QWORD *)&v250.a = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    v42 = 0;
    v43 = v250.a;
    v238 = v40;
    v242 = v13 + 32;
    while (1)
    {
      v44 = one-time initialization token for strokePolygonStep;
      v45 = *(id *)(v242 + 8 * v42);
      if (v44 != -1)
        swift_once();
      v46 = *(double *)&static PKRefineMorph.strokePolygonStep;
      v24 = (unint64_t)v45;
      v47 = objc_msgSend((id)v24, sel_path);
      if (!v47)
        v47 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);

      v48 = (int64_t)objc_msgSend(v47, sel_count);
      if (((unint64_t)objc_msgSend(v47, sel_count) & 0x8000000000000000) != 0)
        goto LABEL_216;
      v49 = objc_msgSend(v47, sel_count);
      if (v48 < 0 || (uint64_t)v49 < v48)
        goto LABEL_217;
      if (v48)
        break;

      v51 = v41;
LABEL_44:
      v60 = specialized static PKRefineMorph.NStroke.normalized(stroke:step:)(*(uint64_t *)&v51, v46);

      swift_bridgeObjectRelease();
      v250.a = v43;
      v62 = *(_QWORD *)(*(_QWORD *)&v43 + 16);
      v61 = *(_QWORD *)(*(_QWORD *)&v43 + 24);
      if (v62 >= v61 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1);
        v43 = v250.a;
      }
      ++v42;
      *(_QWORD *)(*(_QWORD *)&v43 + 16) = v62 + 1;
      *(_QWORD *)(*(_QWORD *)&v43 + 8 * v62 + 32) = v60;
      if (v42 == v238)
      {
        v18 = v246;
        goto LABEL_49;
      }
    }
    toTransform.a = v41;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    v50 = 0;
    v51 = toTransform.a;
    while (v48 != v50)
    {
      v52 = objc_msgSend(v47, sel_objectAtIndexedSubscript_, v50);
      if (!v52)
        goto LABEL_227;
      v53 = v52;
      objc_msgSend(v52, sel_location);
      v55 = v54;
      v57 = v56;
      objc_msgSend((id)v24, sel_transform);
      v259.x = v55;
      v259.y = v57;
      v58 = CGPointApplyAffineTransform(v259, &v252);

      toTransform.a = v51;
      v15 = *(double *)(*(_QWORD *)&v51 + 16);
      v59 = *(_QWORD *)(*(_QWORD *)&v51 + 24);
      if (*(_QWORD *)&v15 >= v59 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), *(_QWORD *)&v15 + 1, 1);
        v51 = toTransform.a;
      }
      *(_QWORD *)(*(_QWORD *)&v51 + 16) = *(_QWORD *)&v15 + 1;
      *(CGPoint *)(*(_QWORD *)&v51 + 16 * *(_QWORD *)&v15 + 32) = v58;
      if (v50 >= (uint64_t)objc_msgSend(v47, sel_count))
        goto LABEL_194;
      if (v48 == ++v50)
      {

        v41 = MEMORY[0x1E0DEE9D8];
        goto LABEL_44;
      }
    }
  }
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_197:
  swift_bridgeObjectRelease();
  v263 = CGRectUnion(*(CGRect *)v224, *(CGRect *)v225);
  v244 = v263.origin.y;
  v249 = v263.origin.x;
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(4, (uint64_t)&v252, *(CGFloat *)v224, *(CGFloat *)&v224[8], *(CGFloat *)&v224[16], *(CGFloat *)&v224[24]);
  v250.a = v221;
  v250.b = 0.0;
  v250.c = 0.0;
  v250.d = v223;
  v250.tx = v222;
  v250.ty = v220;
  CGAffineTransformInvert(&toTransform, &v250);
  v210 = swift_bridgeObjectRetain();
  PKRefineMorph.GridMesh.morph(matches:toTransform:reversed:transformViewToModel:origin:)((Swift::OpaquePointer)v210, &toTransform, 0, a3, (CGPoint)__PAIR128__(*(unint64_t *)&v244, *(unint64_t *)&v249));
  swift_bridgeObjectRelease();
  specialized PKRefineMorph.GridMesh.init(bounds:step:)(4, (uint64_t)&v250, *(CGFloat *)v225, *(CGFloat *)&v225[8], *(CGFloat *)&v225[16], *(CGFloat *)&v225[24]);
  v211 = swift_bridgeObjectRetain();
  PKRefineMorph.GridMesh.morph(matches:toTransform:reversed:transformViewToModel:origin:)((Swift::OpaquePointer)v211, &by, 1, a3, (CGPoint)__PAIR128__(*(unint64_t *)&v244, *(unint64_t *)&v249));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v214 = *(_OWORD *)&v250.tx;
  v213 = v251;
  v216 = *(_OWORD *)&v250.a;
  v215 = *(_OWORD *)&v250.c;
  v218 = *(_OWORD *)&v252.tx;
  v217 = v253;
  v219 = *(_OWORD *)&v252.c;
  *a4 = *(_OWORD *)&v252.a;
  a4[1] = v219;
  a4[2] = v218;
  a4[3] = v217;
  a4[4] = v216;
  a4[5] = v215;
  a4[6] = v214;
  a4[7] = v213;
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

ValueMetadata *type metadata accessor for PKRefineMorph.NStroke()
{
  return &type metadata for PKRefineMorph.NStroke;
}

uint64_t destroy for PKRefineMorph.Match()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKRefineMorph.Match(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PKRefineMorph.Match(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for PKRefineMorph.Match(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKRefineMorph.Match(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKRefineMorph.Match(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PKRefineMorph.Match()
{
  return &type metadata for PKRefineMorph.Match;
}

ValueMetadata *type metadata accessor for PKRefineMorph.Match.MatchTo()
{
  return &type metadata for PKRefineMorph.Match.MatchTo;
}

ValueMetadata *type metadata accessor for PKRefineMorph()
{
  return &type metadata for PKRefineMorph;
}

uint64_t destroy for PKRefineMorph.GridMesh()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKRefineMorph.GridMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PKRefineMorph.GridMesh(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for PKRefineMorph.GridMesh(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for PKRefineMorph.GridMesh(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKRefineMorph.GridMesh(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PKRefineMorph.GridMesh()
{
  return &type metadata for PKRefineMorph.GridMesh;
}

unint64_t lazy protocol witness table accessor for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo;
  if (!lazy protocol witness table cache variable for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKRefineMorph.Match.MatchTo, &type metadata for PKRefineMorph.Match.MatchTo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKRefineMorph.Match.MatchTo and conformance PKRefineMorph.Match.MatchTo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKRefineMorph.Match and conformance PKRefineMorph.Match()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKRefineMorph.Match and conformance PKRefineMorph.Match;
  if (!lazy protocol witness table cache variable for type PKRefineMorph.Match and conformance PKRefineMorph.Match)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKRefineMorph.Match, &type metadata for PKRefineMorph.Match);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKRefineMorph.Match and conformance PKRefineMorph.Match);
  }
  return result;
}

void __swiftcall PKDrawing._bridgeToObjectiveC()(PKDrawing *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

id static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
    v2 = 0;
  }
  *a2 = a1;
  return v2;
}

void __swiftcall PKDrawing.init()(PencilKit::PKDrawing *__return_ptr retstr)
{
  retstr->drawing.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
}

uint64_t PKDrawing.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v7;
  id v8;
  uint64_t result;

  v7 = objc_allocWithZone((Class)PKDrawing);
  v8 = specialized @nonobjc PKDrawing.init(data:)();
  result = outlined consume of Data._Representation(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t PKDrawing.dataRepresentation()()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_dataRepresentation);
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id PKDrawing.bounds.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_bounds);
}

id PKDrawing.image(from:scale:)()
{
  id *v0;

  return objc_msgSend(*v0, sel_imageFromRect_scale_);
}

Swift::Void __swiftcall PKDrawing.transform(using:)(CGAffineTransform *using)
{
  void **v1;
  void *v2;
  __int128 v3;
  id v4;
  id v5;
  _OWORD v6[3];

  v2 = *v1;
  v3 = *(_OWORD *)&using->c;
  v6[0] = *(_OWORD *)&using->a;
  v6[1] = v3;
  v6[2] = *(_OWORD *)&using->tx;
  v4 = objc_msgSend(v2, sel_drawingByApplyingTransform_, v6);
  if (v4)
  {
    v5 = v4;

    *v1 = v5;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall PKDrawing.transformed(using:)(PencilKit::PKDrawing *__return_ptr retstr, CGAffineTransform *using)
{
  void **v2;
  void *v4;
  __int128 v5;
  objc_class *v6;
  _OWORD v7[3];

  v4 = *v2;
  v5 = *(_OWORD *)&using->c;
  v7[0] = *(_OWORD *)&using->a;
  v7[1] = v5;
  v7[2] = *(_OWORD *)&using->tx;
  v6 = (objc_class *)objc_msgSend(v4, sel_drawingByApplyingTransform_, v7);
  if (v6)
    retstr->drawing.super.isa = v6;
  else
    __break(1u);
}

Swift::Void __swiftcall PKDrawing.append(_:)(PencilKit::PKDrawing *a1)
{
  id *v1;
  id v2;
  id v3;
  id v4;

  v2 = *v1;
  v3 = objc_msgSend(*v1, sel_drawingByAppendingDrawing_, a1->drawing.super.isa);
  if (v3)
  {
    v4 = v3;

    *v1 = v4;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall PKDrawing.appending(_:)(PencilKit::PKDrawing *__return_ptr retstr, PencilKit::PKDrawing *a2)
{
  id *v2;
  objc_class *v4;

  v4 = (objc_class *)objc_msgSend(*v2, sel_drawingByAppendingDrawing_, a2->drawing.super.isa);
  if (!v4)
    v4 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
  retstr->drawing.super.isa = v4;
}

id PKDrawing.requiredContentVersion.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_requiredContentVersion);
}

uint64_t PKDrawing.init<A>(strokes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t result;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78]();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Array.init<A>(_:)();
  v8 = objc_allocWithZone((Class)PKDrawing);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initWithStrokes_, isa);

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v10;
  return result;
}

uint64_t PKDrawing.strokes.getter()
{
  id *v0;
  id v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v10;

  v1 = objc_msgSend(*v0, sel_strokes);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = 0;
    v5 = v10;
    do
    {
      v6 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      v8 = *(id *)(v2 + 8 * v4 + 32);
      if (v6 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v6 + 1, 1);
      ++v4;
      *(_QWORD *)(v10 + 16) = v6 + 1;
      *(_QWORD *)(v10 + 8 * v6 + 32) = v8;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

void key path setter for PKDrawing.strokes : PKDrawing(uint64_t a1, id *a2)
{
  id v3;
  Class isa;
  id v5;

  v3 = objc_allocWithZone((Class)PKDrawing);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithStrokes_, isa);

  *a2 = v5;
}

void PKDrawing.strokes.setter()
{
  id *v0;
  id v1;
  Class isa;
  id v3;

  v1 = objc_allocWithZone((Class)PKDrawing);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithStrokes_, isa);

  *v0 = v3;
}

void (*PKDrawing.strokes.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = PKDrawing.strokes.getter();
  return PKDrawing.strokes.modify;
}

void PKDrawing.strokes.modify(uint64_t a1, char a2)
{
  id v4;
  id *v5;
  Class isa;
  id v7;
  Class v8;
  id v9;

  v4 = objc_allocWithZone((Class)PKDrawing);
  v5 = *(id **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v4, sel_initWithStrokes_, isa);

    *v5 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v4, sel_initWithStrokes_, v8);

    *v5 = v9;
  }
}

uint64_t static PKDrawing.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t PKDrawing.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  id v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = objc_allocWithZone((Class)PKDrawing);
    v6 = specialized @nonobjc PKDrawing.init(data:)();
    outlined consume of Data._Representation(v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t PKDrawing.encode(to:)(_QWORD *a1)
{
  void **v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[24];
  uint64_t v9;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v3 = objc_msgSend(v2, sel_dataRepresentation);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  outlined consume of Data._Representation(v4, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKDrawing@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PKDrawing.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKDrawing(_QWORD *a1)
{
  return PKDrawing.encode(to:)(a1);
}

id static PKDrawing._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKDrawing._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKDrawing@<X0>(id a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKDrawing), sel_init);
    v2 = 0;
  }
  *a2 = a1;
  return v2;
}

id specialized @nonobjc PKDrawing.init(data:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1BE23E6E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PKDrawing.strokes.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for PKDrawing()
{
  return &type metadata for PKDrawing;
}

id static PKInk._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;

  if (a1)
  {
    v3 = a1;
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v5 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v5, v4);

    a1 = 0;
  }
  *a2 = v3;
  return a1;
}

void __swiftcall PKInk._bridgeToObjectiveC()(PKInk *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

void __swiftcall PKInk.init(_:color:)(PencilKit::PKInk *__return_ptr retstr, PencilKit::PKInkingTool::InkType _, UIColor color)
{
  __asm { BR              X11 }
}

void sub_1BE23E83C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v2 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v2, v1);

  *v0 = v3;
}

void PKInk.inkType.getter(_BYTE *a1@<X8>)
{
  id *v1;
  id v3;
  Swift::String v4;
  char v5;

  v3 = objc_msgSend(*v1, sel_inkType);
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v4);
  if (v5 == 7)
  {
    __break(1u);
  }
  else
  {

    *a1 = v5;
  }
}

void key path getter for PKInk.inkType : PKInk(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v3;
  id v4;
  Swift::String v5;
  char v6;

  v3 = *a1;
  v4 = objc_msgSend(v3, sel_inkType);
  v5._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v5);
  if (v6 == 7)
  {
    __break(1u);
  }
  else
  {

    *a2 = v6;
  }
}

void PKInk.inkType.setter(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1BE23EA28()
{
  id *v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v1 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  v2 = *v0;
  v3 = objc_msgSend(*v0, sel_color);
  v4 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v1, v3);

  *v0 = v4;
}

id PKInk.color.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_color);
}

char PKInk.inkType.modify(id **a1)
{
  id *v1;
  _BYTE *v2;
  id v3;
  Swift::String v4;
  uint64_t v5;
  char v7;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = objc_msgSend(*v1, sel_inkType);
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v5) = PKInkingTool.InkType.init(rawValue:)(v4);
  if (v7 == 7)
  {
    __break(1u);
  }
  else
  {

    *v2 = v7;
    return (char)PKInk.inkType.modify;
  }
  return v5;
}

void PKInk.inkType.modify(uint64_t a1, char a2)
{
  char *v2;
  char v3;
  char v4;

  if ((a2 & 1) != 0)
  {
    v3 = *(_BYTE *)(a1 + 8);
    v2 = &v3;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 8);
    v2 = &v4;
  }
  PKInk.inkType.setter((uint64_t)v2);
}

void key path setter for PKInk.color : PKInk(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)*a2;
  v4 = objc_msgSend((id)objc_opt_self(), sel_inkFromInk_color_, *a2, *a1);

  *a2 = v4;
}

void PKInk.color.setter(void *a1)
{
  void **v1;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *v1;
  v4 = (void *)objc_opt_self();
  v5 = v3;
  v6 = objc_msgSend(v4, sel_inkFromInk_color_, v5, a1);

  *v1 = v6;
}

void (*PKInk.color.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  id *v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_color);
  return PKInk.color.modify;
}

void PKInk.color.modify(uint64_t a1, char a2)
{
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void ***)(a1 + 8);
  v10 = *(id *)a1;
  v4 = *v3;
  v5 = (void *)objc_opt_self();
  v6 = v5;
  if ((a2 & 1) != 0)
  {
    v7 = objc_msgSend(v5, sel_inkFromInk_color_, v4, v10);

    *v3 = v7;
  }
  else
  {
    v8 = v4;
    v9 = objc_msgSend(v6, sel_inkFromInk_color_, v8, v10);

    *v3 = v9;
  }
}

id PKInk.requiredContentVersion.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_requiredContentVersion);
}

id static PKInk._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKInk._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

void sub_1BE23EE7C(char *a1)
{
  char v1;

  v1 = *a1;
  PKInk.inkType.setter((uint64_t)&v1);
}

id sub_1BE23EEB0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_color);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for PKInk()
{
  return &type metadata for PKInk;
}

void __swiftcall PKStrokePath.InterpolatedSlice.next()(PencilKit::PKStrokePoint_optional *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  double v5;
  id v6;
  objc_class *v7;
  objc_class *v8;
  char v9;
  double v10;
  uint64_t v11;
  char v12;
  id v13;

  v2 = v1;
  v5 = *(double *)(v2 + 32);
  v4 = *(double *)(v2 + 40);
  if (v5 < v4)
  {
    retstr->value.strokePoint.super.isa = 0;
    return;
  }
  v6 = *(id *)v2;
  v7 = (objc_class *)objc_msgSend(v6, sel_interpolatedPointAt_, v4);
  v8 = v7;
  if (v5 <= v4 + 0.001)
  {
    if (v7)
    {

      retstr->value.strokePoint.super.isa = v8;
      v10 = v4 + 1.0;
      goto LABEL_8;
    }
  }
  else if (v7)
  {

    retstr->value.strokePoint.super.isa = v8;
    v13 = v6;
    v9 = *(_BYTE *)(v2 + 16);
    v11 = *(_QWORD *)(v2 + 8);
    v12 = v9;
    PKStrokePath.parametricValue(_:offsetBy:)((uint64_t)&v11, v4);
LABEL_8:
    *(double *)(v2 + 40) = v10;
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double protocol witness for Sequence.makeIterator() in conformance PKStrokePath.InterpolatedSlice@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  double result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  result = *(double *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance PKStrokePath.InterpolatedSlice()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance PKStrokePath.InterpolatedSlice()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PKStrokePath.InterpolatedSlice()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  v2 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v4);
  outlined release of PKStrokePath.InterpolatedSlice((id *)v4);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance PKStrokePath.InterpolatedSlice()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice;
  if (!lazy protocol witness table cache variable for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKStrokePath.InterpolatedSlice, &type metadata for PKStrokePath.InterpolatedSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath.InterpolatedSlice and conformance PKStrokePath.InterpolatedSlice);
  }
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  double v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  id v6;
  _QWORD *v7;
  char **v8;
  id v9;
  id v10;
  id v11;
  double v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  BOOL v23;
  double v24;
  id v25;
  int64_t v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32[2];
  double v33;
  char v34;

  v2 = *(double *)(a1 + 32);
  v1 = *(double *)(a1 + 40);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v2 >= v1)
  {
    outlined init with take of PKStrokePath.InterpolatedSlice.Stride((uint64_t *)(a1 + 8), (uint64_t)v32);
    v6 = *(id *)a1;
    outlined retain of PKStrokePath.InterpolatedSlice((id *)a1);
    v4 = 0;
    v7 = v3 + 4;
    v8 = &selRef_completedUnitCount;
    while (1)
    {
      v9 = v6;
      v10 = objc_msgSend(v9, sel_interpolatedPointAt_, v1);
      v11 = v10;
      if (v2 <= v1 + 0.001)
      {
        if (!v10)
          goto LABEL_46;
        outlined release of PKStrokePath.InterpolatedSlice((id *)a1);
        v1 = v1 + 1.0;
      }
      else
      {
        if (!v10)
          goto LABEL_46;

        outlined init with take of PKStrokePath.InterpolatedSlice.Stride(v32, (uint64_t)&v33);
        if (!v34)
        {
          objc_msgSend(v9, sel_parametricValue_offsetByDistance_, v1, v33);
          goto LABEL_12;
        }
        if (v34 == 1)
        {
          objc_msgSend(v9, sel_parametricValue_offsetByTime_, v1, v33);
LABEL_12:
          v1 = v12;
          goto LABEL_13;
        }
        v24 = v33;
        v25 = v9;
        v26 = (int64_t)objc_msgSend(v25, v8[168]);
        if (((unint64_t)objc_msgSend(v25, v8[168]) & 0x8000000000000000) != 0)
          goto LABEL_43;
        v27 = objc_msgSend(v25, v8[168]);

        if (v26 < 0 || (uint64_t)v27 < v26)
          goto LABEL_44;
        if (v1 + v24 >= (double)(v26 - 1))
          v1 = (double)(v26 - 1);
        else
          v1 = v1 + v24;
        v8 = &selRef_completedUnitCount;
        if (v1 < 0.0)
          v1 = 0.0;
      }
LABEL_13:
      if (!v4)
      {
        v13 = v3[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_42;
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
        v16 = (_QWORD *)swift_allocObject();
        v17 = _swift_stdlib_malloc_size(v16);
        v18 = v17 - 32;
        if (v17 < 32)
          v18 = v17 - 25;
        v19 = v18 >> 3;
        v16[2] = v15;
        v16[3] = 2 * (v18 >> 3);
        v20 = (unint64_t)(v16 + 4);
        v21 = v3[3] >> 1;
        if (v3[2])
        {
          v22 = v3 + 4;
          if (v16 != v3 || v20 >= (unint64_t)v22 + 8 * v21)
            memmove(v16 + 4, v22, 8 * v21);
          v3[2] = 0;
        }
        v7 = (_QWORD *)(v20 + 8 * v21);
        v4 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        swift_release();
        v3 = v16;
        v8 = &selRef_completedUnitCount;
      }
      v23 = __OFSUB__(v4--, 1);
      if (v23)
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      *v7++ = v11;
      if (v2 < v1)
      {

        goto LABEL_37;
      }
    }
  }
  v4 = 0;
LABEL_37:
  v28 = v3[3];
  if (v28 >= 2)
  {
    v29 = v28 >> 1;
    v23 = __OFSUB__(v29, v4);
    v30 = v29 - v4;
    if (v23)
      goto LABEL_45;
    v3[2] = v30;
  }
  return (uint64_t)v3;
}

id *outlined release of PKStrokePath.InterpolatedSlice(id *a1)
{

  return a1;
}

uint64_t outlined init with take of PKStrokePath.InterpolatedSlice.Stride(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

id *outlined retain of PKStrokePath.InterpolatedSlice(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

void PKInkingTool.init(_:color:width:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_1BE23F514()
{
  _QWORD *v0;
  void *v1;
  double v2;
  char v3;
  void *v5;
  id v6;

  v5 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    __asm { BR              X10 }
  v6 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v5, v1, v2);

  *v0 = v6;
}

void PKInkingTool.InkType.defaultWidth.getter()
{
  __asm { BR              X11 }
}

double sub_1BE23F704()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  v0 = (void *)objc_opt_self();
  v1 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_defaultWidthForInkType_, v1);
  v3 = v2;

  return v3;
}

PencilKit::PKInkingTool::InkType_optional __swiftcall PKInkingTool.InkType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  PencilKit::PKInkingTool::InkType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PKInkingTool.InkType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PKInkingTool.InkType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BE23F858 + 4 * byte_1BE4F9AFD[*v0]))(0xD000000000000011, 0x80000001BE4FF450);
}

unint64_t sub_1BE23F858()
{
  return 0xD000000000000014;
}

void PKInkingTool.InkType.validWidthRange.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_1BE23F91C()
{
  unsigned int v0;
  void *v1;
  void *v2;

  v1 = (void *)objc_opt_self();
  v2 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_minimumWidthForInkType_, v2);

  return ((uint64_t (*)(void))((char *)&loc_1BE23F9D8 + *((int *)qword_1BE23FAD0 + v0)))();
}

double sub_1BE23F9E8()
{
  void *v0;
  double v1;
  _QWORD *v2;
  double v3;
  double v4;

  v2 = MEMORY[0x1C3B7E3A8]("com.apple.ink.pen", 0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_maximumWidthForInkType_, v2);
  v4 = v3;

  if (v1 > v4)
  {
    __break(1u);
    JUMPOUT(0x1BE23FAB4);
  }
  return v1;
}

uint64_t PKInkingTool.InkType.requiredContentVersion.getter()
{
  unsigned __int8 *v0;

  if (*v0 < 3u)
    return 1;
  else
    return 2;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PKInkingTool.InkType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance PKInkingTool.InkType()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance PKInkingTool.InkType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PKInkingTool.InkType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PencilKit::PKInkingTool::InkType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PKInkingTool.InkType(Swift::String *a1)
{
  return PKInkingTool.InkType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PKInkingTool.InkType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PKInkingTool.InkType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id PKInkingTool.color.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_color);
}

void PKInkingTool.color.setter(void *a1)
{
  id *v1;
  id v3;
  id v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  const char *v9;
  void *v10;
  double v11;
  id v12;
  char v13;

  v3 = *v1;
  v4 = objc_msgSend(*v1, sel_inkType);
  v5._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v5);

  v6 = 0xD000000000000011;
  v7 = 0x80000001BE4FF450;
  switch(v13)
  {
    case 0:
      break;
    case 1:
      v8 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      v8 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      v6 = 0xD000000000000016;
      v9 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      v6 = 0xD000000000000019;
      v9 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      v6 = 0xD000000000000018;
      v9 = "com.apple.ink.watercolor";
LABEL_7:
      v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    case 6:
      v8 = "com.apple.ink.crayon";
LABEL_9:
      v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      v6 = 0xD000000000000014;
      break;
    default:
      __break(1u);
      JUMPOUT(0x1BE23FCF4);
  }
  v10 = (void *)MEMORY[0x1C3B7E3A8](v6, v7);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_width);
  v12 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v10, a1, v11);

  *v1 = v12;
}

void PKInkingTool.inkType.getter(_BYTE *a1@<X8>)
{
  id *v1;
  id v3;
  Swift::String v4;
  char v5;

  v3 = objc_msgSend(*v1, sel_inkType);
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v4);
  if (v5 == 7)
  {
    __break(1u);
  }
  else
  {

    *a1 = v5;
  }
}

id PKInkingTool.width.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_width);
}

void (*PKInkingTool.color.modify(_QWORD *a1))(void **a1, char a2)
{
  id *v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*v1, sel_color);
  return PKInkingTool.color.modify;
}

void PKInkingTool.color.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    PKInkingTool.color.setter(v3);

  }
  else
  {
    PKInkingTool.color.setter(v2);
  }
}

id static PKInkingTool.convertColor(_:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend((id)objc_opt_self(), sel_convertColor_fromUserInterfaceStyle_to_, a1, a2, a3);
}

void PKInkingTool.width.setter(double a1)
{
  id *v1;
  id v3;
  id v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  const char *v9;
  void *v10;
  id v11;
  id v12;
  char v13;

  v3 = *v1;
  v4 = objc_msgSend(*v1, sel_inkType);
  v5._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PKInkingTool.InkType.init(rawValue:)(v5);

  v6 = 0xD000000000000011;
  v7 = 0x80000001BE4FF450;
  switch(v13)
  {
    case 0:
      break;
    case 1:
      v8 = "com.apple.ink.pencil";
      goto LABEL_9;
    case 2:
      v8 = "com.apple.ink.marker";
      goto LABEL_9;
    case 3:
      v6 = 0xD000000000000016;
      v9 = "com.apple.ink.monoline";
      goto LABEL_7;
    case 4:
      v6 = 0xD000000000000019;
      v9 = "com.apple.ink.fountainpen";
      goto LABEL_7;
    case 5:
      v6 = 0xD000000000000018;
      v9 = "com.apple.ink.watercolor";
LABEL_7:
      v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    case 6:
      v8 = "com.apple.ink.crayon";
LABEL_9:
      v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      v6 = 0xD000000000000014;
      break;
    default:
      __break(1u);
      JUMPOUT(0x1BE23FFFCLL);
  }
  v10 = (void *)MEMORY[0x1C3B7E3A8](v6, v7);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v3, sel_color);
  v12 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v10, v11, a1);

  *v1 = v12;
}

void (*PKInkingTool.width.modify(_QWORD *a1))(double *a1)
{
  id *v1;
  uint64_t v3;

  a1[1] = v1;
  objc_msgSend(*v1, sel_width);
  *a1 = v3;
  return PKInkingTool.width.modify;
}

void PKInkingTool.width.modify(double *a1)
{
  PKInkingTool.width.setter(*a1);
}

void PKInkingTool.inkType.setter(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1BE2400CC()
{
  id *v0;
  void *v1;
  id v2;
  id v3;
  double v4;
  id v5;

  v1 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  v2 = *v0;
  v3 = objc_msgSend(*v0, sel_color);
  objc_msgSend(v2, sel_width);
  v5 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v1, v3, v4);

  *v0 = v5;
}

char PKInkingTool.inkType.modify(id **a1)
{
  id *v1;
  _BYTE *v2;
  id v3;
  Swift::String v4;
  uint64_t v5;
  char v7;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = objc_msgSend(*v1, sel_inkType);
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v5) = PKInkingTool.InkType.init(rawValue:)(v4);
  if (v7 == 7)
  {
    __break(1u);
  }
  else
  {

    *v2 = v7;
    return (char)PKInkingTool.inkType.modify;
  }
  return v5;
}

void PKInkingTool.inkType.modify(uint64_t a1, char a2)
{
  char *v2;
  char v3;
  char v4;

  if ((a2 & 1) != 0)
  {
    v3 = *(_BYTE *)(a1 + 8);
    v2 = &v3;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 8);
    v2 = &v4;
  }
  PKInkingTool.inkType.setter((uint64_t)v2);
}

id PKInkingTool.requiredContentVersion.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_requiredContentVersion);
}

uint64_t static PKInkingTool.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

void PKInkingTool.init(ink:width:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  void *v4;
  id v5;

  v4 = (void *)*a1;
  v5 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInk_width_, *a1, a3);

  *a2 = v5;
}

void PKInkingTool.ink.getter(_QWORD *a1@<X8>)
{
  id *v1;
  id v3;
  id v4;
  void *v5;

  v3 = objc_msgSend(*v1, "ink");
  if (!v3)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v5 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000011, 0x80000001BE4FF450);
    v3 = objc_msgSend(objc_allocWithZone((Class)PKInk), sel_initWithInkType_color_, v5, v4);

  }
  *a1 = v3;
}

void __swiftcall PKInkingTool._bridgeToObjectiveC()(PKInkingTool *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

id static PKInkingTool._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKInkingTool._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id static PKInkingTool._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKInkingTool.InkType and conformance PKInkingTool.InkType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKInkingTool.InkType and conformance PKInkingTool.InkType;
  if (!lazy protocol witness table cache variable for type PKInkingTool.InkType and conformance PKInkingTool.InkType)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKInkingTool.InkType, &type metadata for PKInkingTool.InkType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKInkingTool.InkType and conformance PKInkingTool.InkType);
  }
  return result;
}

id sub_1BE2404DC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_color);
  *a2 = result;
  return result;
}

void sub_1BE240514(id *a1)
{
  PKInkingTool.color.setter(*a1);
}

id sub_1BE24053C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_width);
  *a2 = v4;
  return result;
}

void sub_1BE24056C(double *a1)
{
  PKInkingTool.width.setter(*a1);
}

void sub_1BE240594(char *a1)
{
  char v1;

  v1 = *a1;
  PKInkingTool.inkType.setter((uint64_t)&v1);
}

ValueMetadata *type metadata accessor for PKInkingTool()
{
  return &type metadata for PKInkingTool;
}

uint64_t getEnumTagSinglePayload for PKInkingTool.InkType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PKInkingTool.InkType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BE2406B4 + 4 * byte_1BE4F9B09[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BE2406E8 + 4 * byte_1BE4F9B04[v4]))();
}

uint64_t sub_1BE2406E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE2406F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE2406F8);
  return result;
}

uint64_t sub_1BE240704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE24070CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BE240710(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE240718(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PKInkingTool.InkType()
{
  return &type metadata for PKInkingTool.InkType;
}

uint64_t PKToolPickerLassoItem.lassoTool.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(v1, sel__tool);
  objc_opt_self();
  result = swift_dynamicCastObjCClassUnconditional();
  *a1 = result;
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<InkBehavior.InkProperty, [InkFunction]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 8);
    v6 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

uint64_t PKToolPickerCustomItem.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return PKToolPickerCustomItem.Configuration.init(objcConfig:)(objc_msgSend(v1, sel_configuration), a1);
}

uint64_t PKToolPickerCustomItem.Configuration.init(objcConfig:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v13;
  id (*v14)();
  id (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  float v41;
  double v42;
  id v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  id v56;
  id v57;
  unsigned __int8 v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  unsigned __int8 v74;
  _QWORD *v75;

  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v64 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v4 = objc_msgSend(a1, sel_identifier);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  swift_bridgeObjectRetain();
  v8 = objc_msgSend(a1, sel_name);
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v67 = v10;
  swift_bridgeObjectRetain();
  v11 = (uint64_t (*)())objc_msgSend(a1, sel_imageProvider);
  if (v11)
  {
    v12 = v11;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    v11 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PKToolPickerCustomItem) -> (@autoreleased UIImage);
  }
  else
  {
    v13 = 0;
  }
  v63 = (uint64_t)v11;
  v65 = v13;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?((uint64_t)v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(0);
  v14 = (id (*)())objc_msgSend(a1, sel_viewControllerProvider);
  v70 = v7;
  v71 = a2;
  v68 = v5;
  if (v14)
  {
    v15 = v14;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    v14 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PKToolPickerCustomItem) -> (@autoreleased UIViewController);
  }
  else
  {
    v16 = 0;
  }
  v61 = (uint64_t)v14;
  v62 = v16;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?((uint64_t)v14);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(0);
  objc_msgSend(a1, sel_defaultWidth);
  v18 = v17;
  v19 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v69 = a1;
  v20 = objc_msgSend(a1, sel_widthVariants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
  lazy protocol witness table accessor for type NSNumber and conformance NSObject();
  v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = __CocoaDictionary.makeIterator()();
    v73 = 0;
    v23 = 0;
    v24 = 0;
    v21 = v22 | 0x8000000000000000;
  }
  else
  {
    v25 = -1 << *(_BYTE *)(v21 + 32);
    v73 = v21 + 64;
    v26 = ~v25;
    v27 = -v25;
    if (v27 < 64)
      v28 = ~(-1 << v27);
    else
      v28 = -1;
    v24 = v28 & *(_QWORD *)(v21 + 64);
    v23 = v26;
  }
  v29 = 0;
  v60 = v23;
  v72 = (unint64_t)(v23 + 64) >> 6;
  while (1)
  {
    if ((v21 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.next()())
        goto LABEL_46;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v34 = v75;
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v35 = v75;
      swift_unknownObjectRelease();
      v33 = v29;
      v31 = v24;
      if (!v75)
        goto LABEL_46;
    }
    else
    {
      if (v24)
      {
        v31 = (v24 - 1) & v24;
        v32 = __clz(__rbit64(v24)) | (v29 << 6);
        v33 = v29;
      }
      else
      {
        v36 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_49;
        if (v36 >= v72)
          goto LABEL_46;
        v37 = *(_QWORD *)(v73 + 8 * v36);
        v33 = v29 + 1;
        if (!v37)
        {
          v33 = v29 + 2;
          if (v29 + 2 >= v72)
            goto LABEL_46;
          v37 = *(_QWORD *)(v73 + 8 * v33);
          if (!v37)
          {
            v33 = v29 + 3;
            if (v29 + 3 >= v72)
              goto LABEL_46;
            v37 = *(_QWORD *)(v73 + 8 * v33);
            if (!v37)
            {
              v33 = v29 + 4;
              if (v29 + 4 >= v72)
                goto LABEL_46;
              v37 = *(_QWORD *)(v73 + 8 * v33);
              if (!v37)
              {
                v38 = v29 + 5;
                while (v72 != v38)
                {
                  v37 = *(_QWORD *)(v73 + 8 * v38++);
                  if (v37)
                  {
                    v33 = v38 - 1;
                    goto LABEL_35;
                  }
                }
LABEL_46:
                outlined consume of [NSNumber : UIImage].Iterator._Variant();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v56 = objc_msgSend(v69, sel_defaultColor);

                v74 = objc_msgSend(v69, sel_allowsColorSelection);
                v57 = objc_msgSend(v69, sel_toolAttributeControls);
                v58 = objc_msgSend(v69, sel__supportsLassoBehaviors);

                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v63);
                outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v61);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v61);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v63);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                *(_QWORD *)v71 = v68;
                *(_QWORD *)(v71 + 8) = v70;
                *(_QWORD *)(v71 + 16) = v66;
                *(_QWORD *)(v71 + 24) = v67;
                *(_QWORD *)(v71 + 32) = v63;
                *(_QWORD *)(v71 + 40) = v65;
                *(_QWORD *)(v71 + 48) = v61;
                *(_QWORD *)(v71 + 56) = v62;
                *(_QWORD *)(v71 + 64) = v18;
                *(_QWORD *)(v71 + 72) = v19;
                *(_QWORD *)(v71 + 80) = v56;
                *(_BYTE *)(v71 + 88) = v74;
                *(_QWORD *)(v71 + 96) = v57;
                *(_BYTE *)(v71 + 104) = v58;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v63);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v61);

                return swift_bridgeObjectRelease();
              }
            }
          }
        }
LABEL_35:
        v31 = (v37 - 1) & v37;
        v32 = __clz(__rbit64(v37)) + (v33 << 6);
      }
      v39 = 8 * v32;
      v40 = *(void **)(*(_QWORD *)(v21 + 56) + v39);
      v34 = *(id *)(*(_QWORD *)(v21 + 48) + v39);
      v35 = v40;
      if (!v34)
        goto LABEL_46;
    }
    objc_msgSend(v34, sel_floatValue, v60);
    v42 = v41;
    v43 = v35;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75 = v19;
    v46 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
    v47 = v19[2];
    v48 = (v45 & 1) == 0;
    v49 = v47 + v48;
    if (__OFADD__(v47, v48))
      break;
    v50 = v45;
    if (v19[3] >= v49)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
      if ((v50 & 1) != (v52 & 1))
        goto LABEL_50;
      v46 = v51;
    }
    if ((v50 & 1) != 0)
    {
      v30 = v19[7];

      *(_QWORD *)(v30 + 8 * v46) = v43;
    }
    else
    {
      v19[(v46 >> 6) + 8] |= 1 << v46;
      *(double *)(v19[6] + 8 * v46) = v42;
      *(_QWORD *)(v19[7] + 8 * v46) = v43;
      v53 = v19[2];
      v54 = __OFADD__(v53, 1);
      v55 = v53 + 1;
      if (v54)
        goto LABEL_48;
      v19[2] = v55;
    }

    swift_bridgeObjectRelease();
    v29 = v33;
    v24 = v31;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id PKToolPickerCustomItem.init(configuration:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v7;

  v1 = a1[4];
  v2 = a1[6];
  v3 = (void *)a1[10];
  v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)PKToolPickerCustomItem.Configuration.objcInstance.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v2);

  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v7, sel_initWithObjcConfiguration_, v4);

  return v5;
}

uint64_t PKToolPickerCustomItem.Configuration.objcInstance.getter()
{
  double *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void *v30;
  float v31;
  id v32;
  id v33;
  double v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  char isUniquelyReferenced_nonNull_native;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  id v53;
  Class isa;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  id v61;
  uint64_t v62;
  uint64_t aBlock;
  uint64_t v64;
  uint64_t (*v65)();
  void *v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  v4 = *((_QWORD *)v0 + 3);
  v5 = *((_QWORD *)v0 + 4);
  v6 = *((_QWORD *)v0 + 5);
  v8 = *((_QWORD *)v0 + 6);
  v7 = *((_QWORD *)v0 + 7);
  v9 = v0[8];
  v10 = *((_QWORD *)v0 + 9);
  v56 = *((_QWORD *)v0 + 10);
  v58 = *((unsigned __int8 *)v0 + 88);
  v59 = *((_QWORD *)v0 + 12);
  v60 = *((unsigned __int8 *)v0 + 104);
  v11 = objc_allocWithZone((Class)PKToolPickerCustomItemConfiguration);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = (void *)MEMORY[0x1C3B7E3A8](*(_QWORD *)&v1, v2);
  swift_bridgeObjectRelease();
  v13 = (void *)MEMORY[0x1C3B7E3A8](v3, v4);
  swift_bridgeObjectRelease();
  v61 = objc_msgSend(v11, sel_initWithIdentifier_name_, v12, v13);

  v14 = MEMORY[0x1E0C809B0];
  if (v5)
  {
    v67 = v5;
    v68 = v6;
    aBlock = MEMORY[0x1E0C809B0];
    v64 = 1107296256;
    v65 = thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage);
    v66 = &block_descriptor_14_0;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v61, sel_setImageProvider_, v15, v56);
  _Block_release(v15);
  if (v8)
  {
    v67 = v8;
    v68 = v7;
    aBlock = v14;
    v64 = 1107296256;
    v65 = thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage);
    v66 = &block_descriptor_0;
    v16 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v61, sel_setViewControllerProvider_, v16);
  _Block_release(v16);
  objc_msgSend(v61, sel_setDefaultWidth_, v9);
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v62 = v10 + 64;
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 64);
  v21 = (unint64_t)(v18 + 63) >> 6;
  swift_bridgeObjectRetain();
  v22 = 0;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v22 << 6);
    }
    else
    {
      v26 = v22 + 1;
      if (__OFADD__(v22, 1))
        goto LABEL_48;
      if (v26 >= v21)
      {
LABEL_44:
        swift_release();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
        lazy protocol witness table accessor for type NSNumber and conformance NSObject();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v61, sel_setWidthVariants_, isa);

        objc_msgSend(v61, sel_setDefaultColor_, v57);
        objc_msgSend(v61, sel_setAllowsColorSelection_, v58);
        objc_msgSend(v61, sel_setToolAttributeControls_, v59);
        objc_msgSend(v61, sel__setSupportsLassoBehaviors_, v60);
        return (uint64_t)v61;
      }
      v27 = *(_QWORD *)(v62 + 8 * v26);
      ++v22;
      if (!v27)
      {
        v22 = v26 + 1;
        if (v26 + 1 >= v21)
          goto LABEL_44;
        v27 = *(_QWORD *)(v62 + 8 * v22);
        if (!v27)
        {
          v22 = v26 + 2;
          if (v26 + 2 >= v21)
            goto LABEL_44;
          v27 = *(_QWORD *)(v62 + 8 * v22);
          if (!v27)
          {
            v28 = v26 + 3;
            if (v28 >= v21)
              goto LABEL_44;
            v27 = *(_QWORD *)(v62 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v22 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_49;
                if (v22 >= v21)
                  goto LABEL_44;
                v27 = *(_QWORD *)(v62 + 8 * v22);
                ++v28;
                if (v27)
                  goto LABEL_27;
              }
            }
            v22 = v28;
          }
        }
      }
LABEL_27:
      v20 = (v27 - 1) & v27;
      v25 = __clz(__rbit64(v27)) + (v22 << 6);
    }
    v29 = 8 * v25;
    v30 = *(void **)(*(_QWORD *)(v10 + 56) + v29);
    v31 = *(double *)(*(_QWORD *)(v10 + 48) + v29);
    v32 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    v33 = v30;
    *(float *)&v34 = v31;
    v35 = objc_msgSend(v32, sel_initWithFloat_, v34);
    if ((v17 & 0xC000000000000001) != 0)
    {
      if (v17 < 0)
        v36 = v17;
      else
        v36 = v17 & 0xFFFFFFFFFFFFFF8;
      v37 = v33;
      v38 = __CocoaSet.count.getter();
      if (__OFADD__(v38, 1))
        goto LABEL_46;
      v17 = specialized _NativeDictionary.init(_:capacity:)(v36, v38 + 1);
    }
    else
    {
      v39 = v33;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v17;
    v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v35);
    v43 = *(_QWORD *)(v17 + 16);
    v44 = (v41 & 1) == 0;
    v45 = v43 + v44;
    if (__OFADD__(v43, v44))
      break;
    v46 = v41;
    if (*(_QWORD *)(v17 + 24) >= v45)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
      v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v35);
      if ((v46 & 1) != (v48 & 1))
        goto LABEL_50;
      v42 = v47;
    }
    v17 = aBlock;
    v49 = 8 * v42;
    if ((v46 & 1) != 0)
    {
      v23 = *(_QWORD *)(aBlock + 56);

      *(_QWORD *)(v23 + v49) = v33;
    }
    else
    {
      *(_QWORD *)(aBlock + 8 * (v42 >> 6) + 64) |= 1 << v42;
      *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * v42) = v35;
      *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v42) = v33;
      v50 = *(_QWORD *)(v17 + 16);
      v51 = __OFADD__(v50, 1);
      v52 = v50 + 1;
      if (v51)
        goto LABEL_47;
      *(_QWORD *)(v17 + 16) = v52;
      v53 = v35;
    }

    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PKToolPickerCustomItem.Configuration.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.identifier.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PKToolPickerCustomItem.Configuration.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.name.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t key path getter for PKToolPickerCustomItem.Configuration.imageProvider : PKToolPickerCustomItem.Configuration@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
}

uint64_t key path setter for PKToolPickerCustomItem.Configuration.imageProvider : PKToolPickerCustomItem.Configuration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PKToolPickerCustomItem) -> (@out UIViewController);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v7);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.imageProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v1);
  return v1;
}

uint64_t PKToolPickerCustomItem.Configuration.imageProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.imageProvider.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t key path getter for PKToolPickerCustomItem.Configuration.viewControllerProvider : PKToolPickerCustomItem.Configuration@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(_QWORD *@<X0>, uint64_t *@<X8>);

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
}

uint64_t key path setter for PKToolPickerCustomItem.Configuration.viewControllerProvider : PKToolPickerCustomItem.Configuration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PKToolPickerCustomItem) -> (@out UIViewController);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 48);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v7);
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v5;
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.viewControllerProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(v1);
  return v1;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t PKToolPickerCustomItem.Configuration.viewControllerProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController))?(*(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.viewControllerProvider.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double PKToolPickerCustomItem.Configuration.defaultWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void PKToolPickerCustomItem.Configuration.defaultWidth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*PKToolPickerCustomItem.Configuration.defaultWidth.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.widthVariants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PKToolPickerCustomItem.Configuration.widthVariants.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.widthVariants.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

id PKToolPickerCustomItem.Configuration.defaultColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 80);
}

void PKToolPickerCustomItem.Configuration.defaultColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
}

uint64_t (*PKToolPickerCustomItem.Configuration.defaultColor.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.allowsColorSelection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t PKToolPickerCustomItem.Configuration.allowsColorSelection.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = result;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.allowsColorSelection.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration.toolAttributeControls.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t PKToolPickerCustomItem.Configuration.toolAttributeControls.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = result;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration.toolAttributeControls.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t PKToolPickerCustomItem.Configuration._supportsLassoBehaviors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t PKToolPickerCustomItem.Configuration._supportsLassoBehaviors.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

uint64_t (*PKToolPickerCustomItem.Configuration._supportsLassoBehaviors.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double PKToolPickerCustomItem.Configuration.init(identifier:name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  id v11;
  double result;

  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v11 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = v10;
  *(_QWORD *)(a5 + 80) = v11;
  *(_BYTE *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 3;
  *(_BYTE *)(a5 + 104) = 0;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIImage)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSNumber, UIImage>);
    v2 = static _DictionaryStorage.convert(_:capacity:)();
    v18 = v2;
    __CocoaDictionary.makeIterator()();
    v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      do
      {
        swift_dynamicCast();
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12 + 1, 1);
          v2 = v18;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(double *a1)
{
  uint64_t v1;
  _QWORD *v3;
  double v4;
  void *v5;
  unint64_t result;
  char v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  double *v13;
  void *v14;
  id v15;
  char v16;
  id v17;

  v1 = *((_QWORD *)a1 + 2);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CGFloat, UIImage>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = (void *)*((_QWORD *)a1 + 5);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v17 = v5;
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(double *)(v3[6] + v9) = v4;
    *(_QWORD *)(v3[7] + v9) = v5;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v4 = *(v8 - 1);
    v14 = *(void **)v8;
    v15 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v13;
    v5 = v14;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void destroy for PKToolPickerCustomItem.Configuration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
    swift_release();
  if (*(_QWORD *)(a1 + 48))
    swift_release();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for PKToolPickerCustomItem.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  v12 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  v13 = v12;
  return a1;
}

uint64_t assignWithCopy for PKToolPickerCustomItem.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_8:
  v7 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v9;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
LABEL_15:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(void **)(a2 + 80);
  v11 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PKToolPickerCustomItem.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_8:
  v9 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v11;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_15;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_release();
LABEL_15:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v12 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKToolPickerCustomItem.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKToolPickerCustomItem.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PKToolPickerCustomItem.Configuration()
{
  return &type metadata for PKToolPickerCustomItem.Configuration;
}

uint64_t sub_1BE2425E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PKToolPickerCustomItem) -> (@owned UIViewController)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PKToolPickerCustomItem) -> (@out UIViewController)(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSNumber and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject);
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1BE2426E4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

id partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PKToolPickerCustomItem) -> (@autoreleased UIViewController)()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void __swiftcall PKLassoTool.init()(PencilKit::PKLassoTool *__return_ptr retstr)
{
  retstr->tool.super.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKLassoTool), sel_init);
}

uint64_t static PKLassoTool.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

void __swiftcall PKLassoTool._bridgeToObjectiveC()(PKLassoTool *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

id static PKLassoTool._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKLassoTool._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

id static PKLassoTool._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, id *a2@<X8>)
{
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for PKLassoTool()
{
  return &type metadata for PKLassoTool;
}

void PKToolPickerInkingItem.init(type:color:width:identifier:)(unsigned __int8 *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  id v5;

  v4 = *a1;
  if (a2)
  {
    if ((a4 & 1) == 0)
    {
      v5 = a2;
      __asm { BR              X9 }
    }
    __asm { BR              X9 }
  }
  __asm { BR              X9 }
}

id sub_1BE242ADC()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  double v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v10;

  v5 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(objc_allocWithZone(*(Class *)(v3 + 1304)), sel_initWithInkType_color_width_, v5, v2, v4);

  if (v1)
  {
    v7 = (void *)MEMORY[0x1C3B7E3A8](v10, v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithTool_identifier_, v6, v7);

  return v8;
}

void PKToolPickerInkingItem.init(type:color:width:identifier:)(uint64_t a1)
{
  __asm { BR              X11 }
}

id sub_1BE242CB4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v4 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000014, 0x80000001BE4FF470);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(objc_allocWithZone((Class)PKInkingTool), sel_initWithInkType_color_width_, v4, v0, v3);

  if (v1)
  {
    v6 = (void *)MEMORY[0x1C3B7E3A8](v2, v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithTool_identifier_, v5, v6);

  return v7;
}

uint64_t PKToolPickerInkingItem.inkingTool.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(v1, sel__tool);
  objc_opt_self();
  result = swift_dynamicCastObjCClassUnconditional();
  *a1 = result;
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.startIndex.getter();
    v5 = v4;
    v6 = __CocoaSet.endIndex.getter();
    v8 = MEMORY[0x1C3B7E54C](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    v9 = v13;
    outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    v5 = v11;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v11)
    {
      v3 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id PKLongPressGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  void *v18;
  objc_super v20;
  _QWORD v21[3];
  uint64_t v22;

  *(_QWORD *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableMovement] = 0x4010000000000000;
  *(_QWORD *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableTotalMovement] = 0x4024000000000000;
  *(_QWORD *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_minimumPressDuration] = 0x3FE0000000000000;
  v5 = &v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations] = MEMORY[0x1E0DEE9D8];
  outlined init with copy of Any?(a1, (uint64_t)v21);
  v6 = v22;
  if (v22)
  {
    v7 = __swift_project_boxed_opaque_existential_1(v21, v22);
    v8 = *(_QWORD *)(v6 - 8);
    MEMORY[0x1E0C80A78](v7, v7);
    v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v11 = 0;
  }
  v12 = (objc_class *)type metadata accessor for PKLongPressGestureRecognizer();
  v20.receiver = v2;
  v20.super_class = v12;
  v13 = objc_msgSendSuper2(&v20, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BE4F9D40;
  v15 = v13;
  *(NSNumber *)(v14 + 32) = Int._bridgeToObjectiveC()();
  v21[0] = v14;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAllowedTouchTypes_, isa);

  v17 = v15;
  v18 = (void *)MEMORY[0x1C3B7E3A8](0xD000000000000023, 0x80000001BE4FFC50);
  objc_msgSend(v17, sel_setName_, v18);

  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for Any?);
  return v17;
}

Swift::Void __swiftcall PKLongPressGestureRecognizer.addNewStartLocation(_:)(CGPoint a1)
{
  char *v1;
  CGFloat y;
  CGFloat x;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t started;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  char *v37;

  y = a1.y;
  x = a1.x;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  v8 = *(_QWORD *)(started - 8);
  MEMORY[0x1E0C80A78](started, v9);
  v11 = (CGFloat *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = MEMORY[0x1E0C80A78](v12, v15);
  v35 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v34 - v18;
  UUID.init()();
  v20 = (char *)v11 + *(int *)(started + 20);
  v34 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v34(v20, v19, v12);
  *v11 = x;
  v11[1] = y;
  v21 = OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations;
  v22 = *(_QWORD **)&v1[OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v37 = v1;
  *(_QWORD *)&v1[v21] = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v22 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    *(_QWORD *)&v37[v21] = v22;
  }
  v25 = v22[2];
  v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    v22 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
    *(_QWORD *)&v37[v21] = v22;
  }
  v22[2] = v25 + 1;
  outlined init with take of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v11, (uint64_t)v22+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v25);
  v26 = type metadata accessor for TaskPriority();
  v27 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v36, 1, 1, v26);
  v28 = v35;
  v34(v35, v19, v12);
  type metadata accessor for MainActor();
  v29 = v37;
  v30 = static MainActor.shared.getter();
  v31 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v32 = (char *)swift_allocObject();
  v33 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v32 + 2) = v30;
  *((_QWORD *)v32 + 3) = v33;
  *((_QWORD *)v32 + 4) = v29;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v32[v31], v28, v12);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:), (uint64_t)v32);
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
}

uint64_t closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  v5[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v7;
  return swift_task_switch();
}

uint64_t closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.milliseconds(_:)();
  v3 = v2;
  ContinuousClock.init()();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = *(void **)(v0 + 16);
  swift_release();
  if (!objc_msgSend(v1, sel_state))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
      v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v7 = *(_QWORD *)(v5 + 72);
      swift_bridgeObjectRetain();
      while ((static UUID.== infix(_:_:)() & 1) == 0)
      {
        v6 += v7;
        if (!--v4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_2;
        }
      }
      v8 = *(void **)(v0 + 16);
      swift_bridgeObjectRelease();
      objc_msgSend(v8, sel_setState_, 1);
    }
  }
LABEL_2:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void @objc PKLongPressGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a4;
  v9 = a1;
  a5(v8);
  swift_bridgeObjectRelease();

}

id PKLongPressGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKLongPressGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PKLongPressGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for PKLongPressGestureRecognizer.PressStartLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for PKLongPressGestureRecognizer.PressStartLocation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for PKLongPressGestureRecognizer.PressStartLocation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for PKLongPressGestureRecognizer.PressStartLocation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for PKLongPressGestureRecognizer.PressStartLocation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKLongPressGestureRecognizer.PressStartLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE243D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PKLongPressGestureRecognizer.PressStartLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE243D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PKLongPressGestureRecognizer.PressStartLocation;
  if (!type metadata singleton initialization cache for PKLongPressGestureRecognizer.PressStartLocation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PKLongPressGestureRecognizer.PressStartLocation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  type metadata accessor for ContinuousClock();
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  dispatch thunk of Clock.now.getter();
  v4 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  MEMORY[0x1C3B7E618](v0 + 5, v2, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v5;
  v5(v1, v2);
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  *v6 = v0;
  v6[1] = specialized Clock.sleep(for:tolerance:);
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined init with take of PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2)
{
  uint64_t started;

  started = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 32))(a2, a1, started);
  return a2;
}

uint64_t sub_1BE244144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #3 in PKTiledViewAnimationController.setupRefineAnimation(from:to:in:);
  return closure #1 in PKLongPressGestureRecognizer.addNewStartLocation(_:)(a1, v5, v6, v7, v8);
}

uint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3B801E4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = static NSObject.== infix(_:_:)();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = static NSObject.== infix(_:_:)();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1C3B7E57C](a1, a2, v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized PKLongPressGestureRecognizer.touchesBegan(_:with:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  id v6;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() != 1)
      return;
  }
  else if (*(_QWORD *)(a1 + 16) != 1)
  {
    return;
  }
  v2 = swift_bridgeObjectRetain();
  v6 = (id)specialized Collection.first.getter(v2);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (!objc_msgSend(v1, sel_state))
    {
      objc_msgSend(v6, sel_locationInView_, 0);
      v3 = &v1[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation];
      *(_QWORD *)v3 = v4;
      *((_QWORD *)v3 + 1) = v5;
      PKLongPressGestureRecognizer.addNewStartLocation(_:)((CGPoint)__PAIR128__(v5, v4));
    }

  }
}

void specialized PKLongPressGestureRecognizer.touchesMoved(_:with:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;

  v2 = v1;
  started = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  v5 = *(_QWORD *)(started - 8);
  v7 = MEMORY[0x1E0C80A78](started, v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (double *)((char *)&v28 - v11);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter() != 1)
      return;
  }
  else if (*(_QWORD *)(a1 + 16) != 1)
  {
    return;
  }
  v13 = swift_bridgeObjectRetain();
  v32 = (id)specialized Collection.first.getter(v13);
  swift_bridgeObjectRelease();
  if (v32)
  {
    if (objc_msgSend(v2, sel_state) == (id)1 || objc_msgSend(v2, sel_state) == (id)2)
    {
      objc_msgSend(v2, sel_setState_, 2);
LABEL_9:

      return;
    }
    if (objc_msgSend(v2, sel_state))
      goto LABEL_9;
    objc_msgSend(v32, sel_locationInView_, 0);
    v15 = v14;
    v17 = v16;
    if (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableTotalMovement]
       * *(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_allowableTotalMovement] < (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation]
                                                                                          - v14)
                                                                                         * (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation]
                                                                                          - v14)
                                                                                         + (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation + 8]
                                                                                          - v16)
                                                                                         * (*(double *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_startLocation + 8]
                                                                                          - v16))
    {
      objc_msgSend(v2, sel_setState_, 5);
      goto LABEL_9;
    }
    v18 = OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations;
    v19 = *(_QWORD *)&v2[OBJC_IVAR___PKLongPressGestureRecognizer_pressStartLocations];
    v20 = MEMORY[0x1E0DEE9D8];
    v33 = MEMORY[0x1E0DEE9D8];
    v21 = *(_QWORD *)(v19 + 16);
    v31 = OBJC_IVAR___PKLongPressGestureRecognizer_allowableMovement;
    swift_bridgeObjectRetain();
    if (v21)
    {
      v29 = v18;
      v30 = v21;
      v22 = 0;
      while (v22 < *(_QWORD *)(v19 + 16))
      {
        v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v24 = *(_QWORD *)(v5 + 72);
        outlined init with copy of PKLongPressGestureRecognizer.PressStartLocation(v19 + v23 + v24 * v22, (uint64_t)v12);
        if ((*v12 - v15) * (*v12 - v15) + (v12[1] - v17) * (v12[1] - v17) >= *(double *)&v2[v31] * *(double *)&v2[v31])
        {
          outlined destroy of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v12);
        }
        else
        {
          outlined init with take of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v12, (uint64_t)v9);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v33;
          v26 = *(_QWORD *)(v33 + 16);
          v25 = *(_QWORD *)(v33 + 24);
          v27 = v26 + 1;
          if (v26 >= v25 >> 1)
          {
            v28 = v26 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
            v27 = v28;
            v20 = v33;
          }
          *(_QWORD *)(v20 + 16) = v27;
          outlined init with take of PKLongPressGestureRecognizer.PressStartLocation((uint64_t)v9, v20 + v23 + v26 * v24);
          v21 = v30;
        }
        if (v21 == ++v22)
        {
          v20 = v33;
          v18 = v29;
          goto LABEL_25;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_25:
      swift_bridgeObjectRelease();
      *(_QWORD *)&v2[v18] = v20;
      swift_bridgeObjectRelease();
      PKLongPressGestureRecognizer.addNewStartLocation(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v17, *(unint64_t *)&v15));

    }
  }
}

uint64_t outlined init with copy of PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1, uint64_t a2)
{
  uint64_t started;

  started = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 16))(a2, a1, started);
  return a2;
}

uint64_t outlined destroy of PKLongPressGestureRecognizer.PressStartLocation(uint64_t a1)
{
  uint64_t started;

  started = type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 8))(a1, started);
  return a1;
}

uint64_t outlined consume of Set<UITouch>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 7889261;
  else
    v2 = 6579297;
  if ((a2 & 1) != 0)
    v3 = 7889261;
  else
    v3 = 6579297;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x796C7069746C756DLL;
  else
    v3 = 0x764F656372756F73;
  if (v2)
    v4 = 0xEA00000000007265;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x796C7069746C756DLL;
  else
    v5 = 0x764F656372756F73;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA00000000007265;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x657461746F72;
    else
      v2 = 0x6D6F646E6172;
    v3 = 0xE600000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 0x657461746F72;
      else
        v5 = 0x6D6F646E6172;
      v6 = 0xE600000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE400000000000000;
    v2 = 1701736302;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE400000000000000;
  if (v2 != 1701736302)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x7974696361706FLL;
    else
      v2 = 0x32737569646172;
    v3 = 0xE700000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 0x7974696361706FLL;
      else
        v5 = 0x32737569646172;
      v6 = 0xE700000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE600000000000000;
    v2 = 0x737569646172;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE600000000000000;
  if (v2 != 0x737569646172)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_1BE244CA0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BE244D28 + 4 * byte_1BE4F9DA7[a2]))(0xD000000000000014);
}

uint64_t sub_1BE244D28(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000014 && v1 == 0x80000001BE4FF470)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BE244EE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BE244F5C + 4 * byte_1BE4F9DB3[a2]))(0x6564757469746C61);
}

uint64_t sub_1BE244F5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6564757469746C61 && v1 == v2)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1BE245064(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BE2450E4 + 4 * byte_1BE4F9DBD[a2]))(0x74757074756FLL);
}

uint64_t sub_1BE2450E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x74757074756FLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  id *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = (id *)(a1 + 32);
    v2 = v10;
    do
    {
      v5 = *v4;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v10;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        v2 = v10;
      }
      *(_QWORD *)(v2 + 16) = v7 + 1;
      outlined init with take of Any(&v9, (_OWORD *)(v2 + 32 * v7 + 32));
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      CGFloat._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

id PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)(void *a1, __int128 *a2, char a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,void *a21)
{
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  Class isa;
  Class v34;
  id v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;

  v38 = a2[1];
  v39 = *a2;
  v28 = *((_QWORD *)a2 + 4);
  v29 = *((_QWORD *)a2 + 5);
  v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v31 = (void *)MEMORY[0x1C3B7E3A8](a8, a15);
  swift_bridgeObjectRelease();
  v32 = (void *)MEMORY[0x1C3B7E3A8](a17, a18);
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkFunction);
  v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v46[0] = v39;
  v46[1] = v38;
  v47 = v28;
  v48 = v29;
  LOWORD(v37) = a20;
  v35 = objc_msgSend(v30, sel_initWithRenderingDescriptor_blendAlpha_targetMultiple_baseAlpha_inkTransform_useUnclampedWeight_smoothingDescriptor_featheringDescriptor_pencilFeatheringDescriptor_animationDescriptor_identifier_version_variant_uiWidths_defaultWidth_showBrushIndicator_supportsCombiningStrokes_rulerOffsetScale_rulerOffsetConstant_weightFunction_inkFunctions_, a1, v46, a3 & 1, a4, a5, a6, a9, a10, a11, a12, a13, a14, a7, v31, a16, v32, isa,
          v37,
          a21,
          v34);

  return v35;
}

char *specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (char *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v15 = v7;
    v16 = *(_OWORD *)(a3 + 16 * v7 + 32);
    a1(&v13, &v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    if ((v14 & 1) == 0)
    {
      v9 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v11 = *((_QWORD *)v8 + 2);
      v10 = *((_QWORD *)v8 + 3);
      if (v11 >= v10 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v11 + 1;
      *(_QWORD *)&v8[8 * v11 + 32] = v9;
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, id a3)
{
  char *v3;
  char **v4;
  id v8;
  id v9;
  int64_t v10;
  int64_t v11;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t (*v24)();
  id *v25;
  id v26;
  id v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  id v31;
  uint64_t (*v32)();
  id *v33;
  id v34;
  BOOL v35;
  int v36[2];
  _QWORD v37[4];
  int v38[2];
  int v39[2];
  id v40;
  int v41[2];

  v8 = objc_msgSend(a3, sel_count);
  if (a1 < 0 || (uint64_t)v8 < a1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = objc_msgSend(a3, sel_count);
  if (a2 < 0 || (uint64_t)v9 < a2)
    goto LABEL_19;
  v3 = *v4;
  v10 = *((_QWORD *)*v4 + 2);
  v11 = v10 + a2 - a1;
  if (__OFADD__(v10, a2 - a1))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v13 = *((_QWORD *)v3 + 3) >> 1, v13 < v11))
  {
    if (v10 <= v11)
      v14 = v10 + a2 - a1;
    else
      v14 = v10;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
    v13 = *((_QWORD *)v3 + 3) >> 1;
  }
  v15 = *((_QWORD *)v3 + 2);
  v16 = v13 - v15;
  v17 = specialized Slice._copyContents(initializing:)(v38, &v3[8 * v15 + 32], v13 - v15, a1, a2, a3);
  if (v17 < a2 - a1)
    goto LABEL_21;
  if (v17 >= 1)
  {
    v18 = *((_QWORD *)v3 + 2);
    v19 = __OFADD__(v18, v17);
    v20 = v18 + v17;
    if (v19)
    {
      __break(1u);
      goto LABEL_43;
    }
    *((_QWORD *)v3 + 2) = v20;
  }
  if (v17 != v16)
  {
LABEL_17:

    *v4 = v3;
    return;
  }
LABEL_22:
  v21 = *(_QWORD *)v41;
  v22 = *(_QWORD *)v39;
  if (*(_QWORD *)v41 == *(_QWORD *)v39)
    goto LABEL_17;
  v11 = *((_QWORD *)v3 + 2);
  v23 = v40;
  v24 = specialized Slice.subscript.read(v37, *(uint64_t *)v41, *(uint64_t *)v38, *(uint64_t *)v39, v40);
  v26 = *v25;
  ((void (*)(_QWORD *, _QWORD))v24)(v37, 0);
  v27 = objc_msgSend(v23, sel_count);
  if ((v21 & 0x8000000000000000) == 0 && v21 < (uint64_t)v27)
  {
    if (!v26)
      goto LABEL_17;
    *(_QWORD *)v36 = v21 + 1;
    while (1)
    {
      v28 = *((_QWORD *)v3 + 3);
      v29 = v28 >> 1;
      if ((uint64_t)(v28 >> 1) < v11 + 1)
      {
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v11 + 1, 1, v3);
        v29 = *((_QWORD *)v3 + 3) >> 1;
      }
      if (v11 < v29)
        break;
      v30 = *(_QWORD *)v36;
LABEL_40:
      *((_QWORD *)v3 + 2) = v11;
      *(_QWORD *)v36 = v30;
      if (!v26)
        goto LABEL_17;
    }
    v30 = *(_QWORD *)v36;
    while (1)
    {
      *(_QWORD *)&v3[8 * v11++ + 32] = v26;
      if (v22 == v30)
        break;
      v31 = v40;
      v32 = specialized Slice.subscript.read(v37, v30, *(uint64_t *)v38, v22, v40);
      v26 = *v33;
      ((void (*)(_QWORD *, _QWORD))v32)(v37, 0);
      v34 = objc_msgSend(v31, sel_count);
      if ((*(_QWORD *)v36 & 0x8000000000000000) != 0 || v30 >= (uint64_t)v34)
      {
        __break(1u);
        goto LABEL_45;
      }
      ++v30;
      if (v26)
        v35 = v11 < v29;
      else
        v35 = 0;
      if (!v35)
        goto LABEL_40;
    }
LABEL_43:
    *((_QWORD *)v3 + 2) = v11;
    goto LABEL_17;
  }
LABEL_45:
  __break(1u);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1C3B7E5AC](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1BE245E60()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1BE245F34()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1BE245FFC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1BE2460E0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t InkDescriptor.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkDescriptor.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InkDescriptor.id.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkDescriptor.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*InkDescriptor.name.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.rendering.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;

  v2 = *(_OWORD *)(v1 + 176);
  v3 = *(_OWORD *)(v1 + 208);
  v29 = *(_OWORD *)(v1 + 192);
  v30 = v3;
  v4 = *(_OWORD *)(v1 + 112);
  v5 = *(_OWORD *)(v1 + 144);
  v25 = *(_OWORD *)(v1 + 128);
  v6 = v25;
  v26 = v5;
  v7 = *(_OWORD *)(v1 + 144);
  v8 = *(_OWORD *)(v1 + 176);
  v27 = *(_OWORD *)(v1 + 160);
  v9 = v27;
  v28 = v8;
  v10 = *(_OWORD *)(v1 + 48);
  v11 = *(_OWORD *)(v1 + 80);
  v21 = *(_OWORD *)(v1 + 64);
  v12 = v21;
  v22 = v11;
  v13 = *(_OWORD *)(v1 + 80);
  v14 = *(_OWORD *)(v1 + 112);
  v23 = *(_OWORD *)(v1 + 96);
  v15 = v23;
  v24 = v14;
  v16 = *(_OWORD *)(v1 + 48);
  v20[0] = *(_OWORD *)(v1 + 32);
  v17 = v20[0];
  v20[1] = v16;
  v18 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(a1 + 160) = v29;
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v4;
  v31 = *(_DWORD *)(v1 + 224);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(v1 + 224);
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v10;
  return outlined retain of InkRendering((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined copy of InkDescriptorParticles?);
}

uint64_t outlined copy of InkDescriptorParticles?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 InkDescriptor.rendering.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD v15[12];
  int v16;

  v3 = *(_OWORD *)(v1 + 208);
  v15[10] = *(_OWORD *)(v1 + 192);
  v15[11] = v3;
  v16 = *(_DWORD *)(v1 + 224);
  v4 = *(_OWORD *)(v1 + 144);
  v15[6] = *(_OWORD *)(v1 + 128);
  v15[7] = v4;
  v5 = *(_OWORD *)(v1 + 176);
  v15[8] = *(_OWORD *)(v1 + 160);
  v15[9] = v5;
  v6 = *(_OWORD *)(v1 + 80);
  v15[2] = *(_OWORD *)(v1 + 64);
  v15[3] = v6;
  v7 = *(_OWORD *)(v1 + 112);
  v15[4] = *(_OWORD *)(v1 + 96);
  v15[5] = v7;
  v8 = *(_OWORD *)(v1 + 48);
  v15[0] = *(_OWORD *)(v1 + 32);
  v15[1] = v8;
  outlined retain of InkRendering((uint64_t)v15, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined consume of InkDescriptorParticles?);
  v9 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v1 + 192) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v1 + 208) = v9;
  *(_DWORD *)(v1 + 224) = *(_DWORD *)(a1 + 192);
  v10 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 144) = v10;
  v11 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 176) = v11;
  v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 80) = v12;
  v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 112) = v13;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t outlined retain of InkRendering(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v13 = *(_OWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 184);
  v11 = *(_DWORD *)(a1 + 192);
  a2(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
  a2(v15, v14, v4, v5, v6, v7, v8, v9, v13, *((_QWORD *)&v13 + 1), v10, v11);
  return a1;
}

uint64_t outlined consume of InkDescriptorParticles?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*InkDescriptor.rendering.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.behavior.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE __dst[264];

  v3 = (const void *)(v1 + 232);
  memcpy(__dst, v3, 0x102uLL);
  memcpy(a1, v3, 0x102uLL);
  return outlined retain of InkBehavior((uint64_t)__dst);
}

uint64_t outlined retain of InkBehavior(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void *InkDescriptor.behavior.setter(const void *a1)
{
  uint64_t v1;
  void *v3;
  _BYTE __dst[264];

  v3 = (void *)(v1 + 232);
  memcpy(__dst, v3, 0x102uLL);
  outlined release of InkBehavior((uint64_t)__dst);
  return memcpy(v3, a1, 0x102uLL);
}

uint64_t outlined release of InkBehavior(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t (*InkDescriptor.behavior.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptor.uiWidths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InkDescriptor.uiWidths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 496) = a1;
  return result;
}

uint64_t (*InkDescriptor.uiWidths.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptor.defaultWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 504);
}

void InkDescriptor.defaultWidth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 504) = a1;
}

uint64_t (*InkDescriptor.defaultWidth.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

void *InkDescriptor.init(id:name:rendering:behavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *result;
  _BYTE __src[262];

  v13 = *(_OWORD *)(a5 + 176);
  *(_OWORD *)(a7 + 192) = *(_OWORD *)(a5 + 160);
  *(_OWORD *)(a7 + 208) = v13;
  *(_DWORD *)(a7 + 224) = *(_DWORD *)(a5 + 192);
  v14 = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a7 + 128) = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a7 + 144) = v14;
  v15 = *(_OWORD *)(a5 + 144);
  *(_OWORD *)(a7 + 160) = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(a7 + 176) = v15;
  v16 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a7 + 64) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a7 + 80) = v16;
  v17 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a7 + 96) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a7 + 112) = v17;
  v18 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a7 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a7 + 48) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1BE4FB7B0;
  *(_OWORD *)(v19 + 32) = xmmword_1BE4FB7C0;
  *(_OWORD *)(v19 + 48) = xmmword_1BE4FB7D0;
  *(_QWORD *)(v19 + 64) = 0x4049000000000000;
  memcpy(&__src[4], a6, 0x102uLL);
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  result = memcpy((void *)(a7 + 228), __src, 0x106uLL);
  *(_QWORD *)(a7 + 496) = v19;
  *(_QWORD *)(a7 + 504) = 0x403E000000000000;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkDescriptor.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE246778 + 4 * byte_1BE4F9DDA[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_1BE246778()
{
  return 1701667182;
}

uint64_t sub_1BE246788()
{
  return 0x6E697265646E6572;
}

uint64_t sub_1BE2467A4()
{
  return 0x726F697661686562;
}

uint64_t sub_1BE2467BC()
{
  return 0x7368746469576975;
}

uint64_t sub_1BE2467D4()
{
  return 0x57746C7561666564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InkDescriptor.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkDescriptor.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[258];
  char v28;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkDescriptor.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v24 = v2[2];
  v25 = v9;
  v10 = v2[3];
  v22 = v2[62];
  v23 = v10;
  v11 = v2[63];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27[0] = 0;
  v12 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    v13 = v22;
    v27[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = *((_OWORD *)v2 + 13);
    *(_OWORD *)&v27[160] = *((_OWORD *)v2 + 12);
    *(_OWORD *)&v27[176] = v14;
    *(_DWORD *)&v27[192] = *((_DWORD *)v2 + 56);
    v15 = *((_OWORD *)v2 + 9);
    *(_OWORD *)&v27[96] = *((_OWORD *)v2 + 8);
    *(_OWORD *)&v27[112] = v15;
    v16 = *((_OWORD *)v2 + 11);
    *(_OWORD *)&v27[128] = *((_OWORD *)v2 + 10);
    *(_OWORD *)&v27[144] = v16;
    v17 = *((_OWORD *)v2 + 5);
    *(_OWORD *)&v27[32] = *((_OWORD *)v2 + 4);
    *(_OWORD *)&v27[48] = v17;
    v18 = *((_OWORD *)v2 + 7);
    *(_OWORD *)&v27[64] = *((_OWORD *)v2 + 6);
    *(_OWORD *)&v27[80] = v18;
    v19 = *((_OWORD *)v2 + 3);
    *(_OWORD *)v27 = *((_OWORD *)v2 + 2);
    *(_OWORD *)&v27[16] = v19;
    v28 = 2;
    lazy protocol witness table accessor for type InkRendering and conformance InkRendering();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    memcpy(v27, v2 + 29, sizeof(v27));
    v28 = 3;
    lazy protocol witness table accessor for type InkBehavior and conformance InkBehavior();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)v27 = v13;
    v28 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], &demangling cache variable for type metadata for [CGFloat], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)v27 = v11;
    v28 = 5;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptor.CodingKeys, &unk_1E77721C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptor.CodingKeys, &unk_1E77721C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptor.CodingKeys, &unk_1E77721C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptor.CodingKeys, &unk_1E77721C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkRendering and conformance InkRendering()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering and conformance InkRendering;
  if (!lazy protocol witness table cache variable for type InkRendering and conformance InkRendering)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering, &type metadata for InkRendering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering and conformance InkRendering);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering and conformance InkRendering;
  if (!lazy protocol witness table cache variable for type InkRendering and conformance InkRendering)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering, &type metadata for InkRendering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering and conformance InkRendering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkBehavior and conformance InkBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior;
  if (!lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior, &type metadata for InkBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior;
  if (!lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior, &type metadata for InkBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior and conformance InkBehavior);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B801D8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

_QWORD *InkDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[32];
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  _BYTE v47[262];
  int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _BYTE v54[264];
  _BYTE v55[258];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  int v83;
  __int16 v84;
  _BYTE v85[262];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;

  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkDescriptor.CodingKeys>);
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BE4FB7B0;
  *(_OWORD *)(v9 + 32) = xmmword_1BE4FB7C0;
  *(_OWORD *)(v9 + 48) = xmmword_1BE4FB7D0;
  v29 = v9;
  v30 = a1;
  *(_QWORD *)(v9 + 64) = 0x4049000000000000;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkDescriptor.CodingKeys and conformance InkDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v5;
    v27 = a2;
    LOBYTE(v32[0]) = 0;
    v11 = v28;
    v12 = v8;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v14;
    LOBYTE(v32[0]) = 1;
    swift_bridgeObjectRetain();
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    v18 = v17;
    v19 = v16;
    v69 = 2;
    lazy protocol witness table accessor for type InkRendering and conformance InkRendering();
    swift_bridgeObjectRetain();
    v26 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_QWORD *)&v25 + 1) = v18;
    v66 = v80;
    v67 = v81;
    v62 = v76;
    v63 = v77;
    v65 = v79;
    v64 = v78;
    v58 = v72;
    v59 = v73;
    v61 = v75;
    v60 = v74;
    v57 = v71;
    v56 = v70;
    v96 = v80;
    v97 = v81;
    v92 = v76;
    v93 = v77;
    v95 = v79;
    v94 = v78;
    v88 = v72;
    v89 = v73;
    v91 = v75;
    v90 = v74;
    v68 = v82;
    v98 = v82;
    v87 = v71;
    v86 = v70;
    v54[263] = 3;
    outlined retain of InkRendering((uint64_t)&v56, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined copy of InkDescriptorParticles?);
    lazy protocol witness table accessor for type InkBehavior and conformance InkBehavior();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v25 = v19;
    memcpy(v54, v55, 0x102uLL);
    memcpy(&v85[4], v55, 0x102uLL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    LOBYTE(v31[0]) = 4;
    outlined retain of InkBehavior((uint64_t)v54);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], &demangling cache variable for type metadata for [CGFloat], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v32[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v52 = 5;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v11);
    v21 = v53;
    *(_QWORD *)&v31[0] = v13;
    *((_QWORD *)&v31[0] + 1) = v15;
    v22 = v25;
    v31[1] = v25;
    v31[12] = v66;
    v31[13] = v67;
    LODWORD(v31[14]) = v68;
    v31[8] = v62;
    v31[9] = v63;
    v31[10] = v64;
    v31[11] = v65;
    v31[4] = v58;
    v31[5] = v59;
    v31[6] = v60;
    v31[7] = v61;
    v31[2] = v56;
    v31[3] = v57;
    memcpy((char *)&v31[14] + 8, v54, 0x102uLL);
    *(_QWORD *)&v31[31] = v20;
    *((_QWORD *)&v31[31] + 1) = v53;
    outlined retain of InkDescriptor(v31);
    swift_bridgeObjectRelease();
    outlined release of InkBehavior((uint64_t)v54);
    outlined retain of InkRendering((uint64_t)&v56, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined consume of InkDescriptorParticles?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v27, v31, 0x200uLL);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    v32[0] = v13;
    v32[1] = v15;
    v33 = v22;
    v44 = v96;
    v45 = v97;
    v46 = v98;
    v40 = v92;
    v41 = v93;
    v42 = v94;
    v43 = v95;
    v36 = v88;
    v37 = v89;
    v38 = v90;
    v39 = v91;
    v34 = v86;
    v35 = v87;
    memcpy(v47, v85, sizeof(v47));
    v48 = v83;
    v49 = v84;
    v50 = v20;
    v51 = v21;
    return outlined release of InkDescriptor(v32);
  }
}

uint64_t lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1C3B801E4](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *outlined retain of InkDescriptor(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[6];
  v4 = a1[5];
  v5 = a1[18];
  v6 = a1[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of InkDescriptorParticles?(v4, v3);
  outlined copy of InkDescriptorParticles?(v6, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *outlined release of InkDescriptor(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[6];
  v4 = a1[5];
  v5 = a1[18];
  v6 = a1[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of InkDescriptorParticles?(v4, v3);
  outlined consume of InkDescriptorParticles?(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *protocol witness for Decodable.init(from:) in conformance InkDescriptor@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return InkDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptor(_QWORD *a1)
{
  return InkDescriptor.encode(to:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance InkDescriptor@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

PencilKit::InkRendering::BlendMode_optional __swiftcall InkRendering.BlendMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of InkRendering.BlendMode.init(rawValue:);
  return (PencilKit::InkRendering::BlendMode_optional)InkRendering.BlendMode.init(rawValue:)(rawValue, v2, v1);
}

uint64_t InkRendering.BlendMode.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x796C7069746C756DLL;
  else
    return 0x764F656372756F73;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkRendering.BlendMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkRendering.BlendMode()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkRendering.BlendMode()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkRendering.BlendMode()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

PencilKit::InkRendering::BlendMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkRendering.BlendMode(Swift::String *a1)
{
  return InkRendering.BlendMode.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkRendering.BlendMode(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x764F656372756F73;
  if (*v1)
    v2 = 0x796C7069746C756DLL;
  v3 = 0xEA00000000007265;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkRendering.BlendMode()
{
  lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkRendering.BlendMode()
{
  lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode();
  return RawRepresentable<>.encode(to:)();
}

void InkRendering.blendMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *InkRendering.blendMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*InkRendering.blendMode.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkRendering.particle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 88);
  v13 = *(_DWORD *)(v1 + 96);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_DWORD *)(a1 + 88) = v13;
  return outlined copy of InkDescriptorParticles?(v2, v3);
}

__n128 InkRendering.particle.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = a1[1];
  v9 = *a1;
  v6 = a1[3];
  v7 = a1[2];
  v5 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v3 = *((_DWORD *)a1 + 22);
  outlined consume of InkDescriptorParticles?(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  *(_OWORD *)(v1 + 8) = v9;
  *(_OWORD *)(v1 + 24) = v8;
  *(_OWORD *)(v1 + 40) = v7;
  *(_OWORD *)(v1 + 56) = v6;
  result = v5;
  *(__n128 *)(v1 + 72) = v5;
  *(_QWORD *)(v1 + 88) = v2;
  *(_DWORD *)(v1 + 96) = v3;
  return result;
}

uint64_t (*InkRendering.particle.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkRendering.secondaryParticle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 144);
  v8 = *(_QWORD *)(v1 + 152);
  v9 = *(_QWORD *)(v1 + 160);
  v10 = *(_QWORD *)(v1 + 168);
  v11 = *(_QWORD *)(v1 + 176);
  v12 = *(_QWORD *)(v1 + 184);
  v13 = *(_DWORD *)(v1 + 192);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_DWORD *)(a1 + 88) = v13;
  return outlined copy of InkDescriptorParticles?(v2, v3);
}

__n128 InkRendering.secondaryParticle.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = a1[1];
  v9 = *a1;
  v6 = a1[3];
  v7 = a1[2];
  v5 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v3 = *((_DWORD *)a1 + 22);
  outlined consume of InkDescriptorParticles?(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
  *(_OWORD *)(v1 + 104) = v9;
  *(_OWORD *)(v1 + 120) = v8;
  *(_OWORD *)(v1 + 136) = v7;
  *(_OWORD *)(v1 + 152) = v6;
  result = v5;
  *(__n128 *)(v1 + 168) = v5;
  *(_QWORD *)(v1 + 184) = v2;
  *(_DWORD *)(v1 + 192) = v3;
  return result;
}

uint64_t (*InkRendering.secondaryParticle.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkRendering.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkRendering.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x656C636974726170;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x646F4D646E656C62;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkRendering.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkRendering.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkRendering.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkRendering.CodingKeys()
{
  lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkRendering.CodingKeys()
{
  lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkRendering.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  char v54;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkRendering.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = *((_QWORD *)v1 + 1);
  v39 = *((_QWORD *)v1 + 2);
  v40 = v10;
  v11 = *((_QWORD *)v1 + 3);
  v37 = *((_QWORD *)v1 + 4);
  v38 = v11;
  v12 = *((_QWORD *)v1 + 5);
  v35 = *((_QWORD *)v1 + 6);
  v36 = v12;
  v13 = *((_QWORD *)v1 + 7);
  v33 = *((_QWORD *)v1 + 8);
  v34 = v13;
  v32 = *((_QWORD *)v1 + 9);
  v31 = *((_QWORD *)v1 + 10);
  v30 = *((_QWORD *)v1 + 11);
  v53 = *((_DWORD *)v1 + 24);
  v29 = *((_QWORD *)v1 + 13);
  v28 = *((_QWORD *)v1 + 14);
  v27 = *((_QWORD *)v1 + 15);
  v26 = *((_QWORD *)v1 + 16);
  v25 = *((_QWORD *)v1 + 17);
  v24 = *((_QWORD *)v1 + 18);
  v23 = *((_QWORD *)v1 + 19);
  v22 = *((_QWORD *)v1 + 20);
  v21 = *((_QWORD *)v1 + 21);
  v20 = *((_QWORD *)v1 + 22);
  v19 = *((_QWORD *)v1 + 23);
  HIDWORD(v18) = *((_DWORD *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v41) = v9;
  v54 = 0;
  lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v14 = v27;
    v15 = v28;
    v16 = v29;
    v41 = v40;
    v42 = v39;
    v43 = v38;
    v44 = v37;
    v45 = v36;
    v46 = v35;
    v47 = v34;
    v48 = v33;
    v49 = v32;
    v50 = v31;
    v51 = v30;
    v52 = v53;
    v54 = 1;
    lazy protocol witness table accessor for type InkDescriptorParticles and conformance InkDescriptorParticles();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v41 = v16;
    v42 = v15;
    v43 = v14;
    v44 = v26;
    v45 = v25;
    v46 = v24;
    v47 = v23;
    v48 = v22;
    v49 = v21;
    v50 = v20;
    v51 = v19;
    v52 = HIDWORD(v18);
    v54 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.CodingKeys, &unk_1E7771A08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.CodingKeys, &unk_1E7771A08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.CodingKeys, &unk_1E7771A08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.CodingKeys, &unk_1E7771A08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.BlendMode, &type metadata for InkRendering.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.BlendMode, &type metadata for InkRendering.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.BlendMode, &type metadata for InkRendering.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode;
  if (!lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkRendering.BlendMode, &type metadata for InkRendering.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkRendering.BlendMode and conformance InkRendering.BlendMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles and conformance InkDescriptorParticles()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles, &type metadata for InkDescriptorParticles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles, &type metadata for InkDescriptorParticles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles and conformance InkDescriptorParticles);
  }
  return result;
}

uint64_t InkRendering.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[40];
  uint64_t v85;
  _BYTE v86[24];
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  uint64_t v93;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkRendering.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type InkRendering.CodingKeys and conformance InkRendering.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v52 = v2;
    v93 = 0;
    v55 = 0;
    v54 = 0uLL;
    v53 = 0uLL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    LOBYTE(v81) = 0;
    v82 = 0;
    v83 = 0;
    *(_QWORD *)v84 = 0;
    *(_OWORD *)&v84[8] = v53;
    *(_OWORD *)&v84[24] = v54;
    v85 = v55;
    *(_QWORD *)v86 = v93;
    *(_QWORD *)&v86[8] = 0;
    *(_QWORD *)&v86[16] = 0;
    v87 = 0;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    memset(v92, 0, 28);
  }
  else
  {
    v50 = a2;
    LOBYTE(v56) = 0;
    lazy protocol witness table accessor for type InkRendering.BlendMode and conformance InkRendering.BlendMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v49 = v81;
    LOBYTE(v56) = 1;
    lazy protocol witness table accessor for type InkDescriptorParticles and conformance InkDescriptorParticles();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v69 = 2;
    v48 = *(_DWORD *)&v86[16];
    v47 = *(_OWORD *)v86;
    v93 = v85;
    v12 = v81;
    v13 = v82;
    v14 = v83;
    v53 = *(_OWORD *)v84;
    v54 = *(_OWORD *)&v84[16];
    v55 = *(_QWORD *)&v84[32];
    outlined copy of InkDescriptorParticles?(v81, v82);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v52 = 0;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v15 = v71;
    v16 = v72;
    v38 = v73;
    v39 = v70;
    v17 = v75;
    v46 = v74;
    v18 = v76;
    v19 = v77;
    *(_QWORD *)v40 = v78;
    *(_OWORD *)&v40[8] = v79;
    v41 = v80;
    v42 = v76;
    v43 = v75;
    v45 = v77;
    outlined copy of InkDescriptorParticles?(v70, v71);
    outlined consume of InkDescriptorParticles?(0, 0);
    LOBYTE(v56) = v49;
    v44 = v12;
    *((_QWORD *)&v56 + 1) = v12;
    *(_QWORD *)&v57 = v13;
    v34 = v13;
    v35 = v14;
    *((_QWORD *)&v57 + 1) = v14;
    v58 = v53;
    v59 = v54;
    *(_QWORD *)&v60 = v55;
    *((_QWORD *)&v60 + 1) = v93;
    v61 = v47;
    LODWORD(v62) = v48;
    v20 = v39;
    *((_QWORD *)&v62 + 1) = v39;
    *(_QWORD *)&v63 = v15;
    v36 = v16;
    v37 = v15;
    *((_QWORD *)&v63 + 1) = v16;
    *(_QWORD *)&v64 = v38;
    *((_QWORD *)&v64 + 1) = v46;
    *(_QWORD *)&v65 = v17;
    *((_QWORD *)&v65 + 1) = v18;
    *(_QWORD *)&v66 = v19;
    *((_QWORD *)&v66 + 1) = *(_QWORD *)v40;
    v67 = *(_OWORD *)&v40[8];
    v68 = v41;
    outlined retain of InkRendering((uint64_t)&v56, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined copy of InkDescriptorParticles?);
    outlined consume of InkDescriptorParticles?(v20, v15);
    v22 = v34;
    v21 = v35;
    v23 = v53;
    v24 = v54;
    v25 = v55;
    outlined consume of InkDescriptorParticles?(v44, v34);
    v26 = v67;
    v27 = v50;
    *(_OWORD *)(v50 + 160) = v66;
    *(_OWORD *)(v27 + 176) = v26;
    *(_DWORD *)(v27 + 192) = v68;
    v28 = v63;
    *(_OWORD *)(v27 + 96) = v62;
    *(_OWORD *)(v27 + 112) = v28;
    v29 = v65;
    *(_OWORD *)(v27 + 128) = v64;
    *(_OWORD *)(v27 + 144) = v29;
    v30 = v59;
    *(_OWORD *)(v27 + 32) = v58;
    *(_OWORD *)(v27 + 48) = v30;
    v31 = v61;
    *(_OWORD *)(v27 + 64) = v60;
    *(_OWORD *)(v27 + 80) = v31;
    v32 = v57;
    *(_OWORD *)v27 = v56;
    *(_OWORD *)(v27 + 16) = v32;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    LOBYTE(v81) = v49;
    v82 = v44;
    v83 = v22;
    *(_QWORD *)v84 = v21;
    *(_OWORD *)&v84[8] = v23;
    *(_OWORD *)&v84[24] = v24;
    v85 = v25;
    *(_QWORD *)v86 = v93;
    *(_OWORD *)&v86[8] = v47;
    v87 = v48;
    *(_QWORD *)&v88 = v39;
    *((_QWORD *)&v88 + 1) = v37;
    *(_QWORD *)&v89 = v36;
    *((_QWORD *)&v89 + 1) = v38;
    *(_QWORD *)&v90 = v46;
    *((_QWORD *)&v90 + 1) = v43;
    *(_QWORD *)&v91 = v42;
    *((_QWORD *)&v91 + 1) = v45;
    v92[0] = *(_OWORD *)v40;
    *(_QWORD *)&v92[1] = *(_QWORD *)&v40[16];
    DWORD2(v92[1]) = v41;
  }
  return outlined retain of InkRendering((uint64_t)&v81, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined consume of InkDescriptorParticles?);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkRendering@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InkRendering.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkRendering(_QWORD *a1)
{
  return InkRendering.encode(to:)(a1);
}

uint64_t InkDescriptorParticles.textureName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkDescriptorParticles.textureName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InkDescriptorParticles.textureName.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptorParticles.spacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void InkDescriptorParticles.spacing.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*InkDescriptorParticles.spacing.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptorParticles.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void InkDescriptorParticles.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*InkDescriptorParticles.size.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptorParticles.mask.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = v2;
  *(_BYTE *)(a1 + 48) = v3;
  return swift_bridgeObjectRetain();
}

__n128 InkDescriptorParticles.mask.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v6 = (__n128)a1[1];
  v7 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v4 = *((_BYTE *)a1 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 40) = v7;
  result = v6;
  *(__n128 *)(v1 + 56) = v6;
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v1 + 80) = v3;
  *(_BYTE *)(v1 + 88) = v4;
  return result;
}

uint64_t (*InkDescriptorParticles.mask.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

PencilKit::InkDescriptorParticles::ParticleRotation_optional __swiftcall InkDescriptorParticles.ParticleRotation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of InkDescriptorParticles.ParticleRotation.init(rawValue:);
  return (PencilKit::InkDescriptorParticles::ParticleRotation_optional)InkDescriptorParticles.ParticleRotation.init(rawValue:)(rawValue, v2, v1);
}

void *static InkDescriptorParticles.ParticleRotation.allCases.getter()
{
  return &outlined read-only object #0 of static InkDescriptorParticles.ParticleRotation.allCases.getter;
}

uint64_t InkDescriptorParticles.ParticleRotation.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657461746F72;
  if (*v0 != 1)
    v1 = 0x6D6F646E6172;
  if (*v0)
    return v1;
  else
    return 1701736302;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkDescriptorParticles.ParticleRotation(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkDescriptorParticles.ParticleRotation()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkDescriptorParticles.ParticleRotation()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkDescriptorParticles.ParticleRotation()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

PencilKit::InkDescriptorParticles::ParticleRotation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkDescriptorParticles.ParticleRotation(Swift::String *a1)
{
  return InkDescriptorParticles.ParticleRotation.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkDescriptorParticles.ParticleRotation(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0x657461746F72;
  if (v2 != 1)
    v4 = 0x6D6F646E6172;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 1701736302;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkDescriptorParticles.ParticleRotation()
{
  lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptorParticles.ParticleRotation()
{
  lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance InkDescriptorParticles.ParticleRotation(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance InkDescriptorParticles.ParticleRotation;
}

void InkDescriptorParticles.rotation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 89);
}

_BYTE *InkDescriptorParticles.rotation.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 89) = *result;
  return result;
}

uint64_t (*InkDescriptorParticles.rotation.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkDescriptorParticles.initialRandomRotation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t InkDescriptorParticles.initialRandomRotation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 90) = result;
  return result;
}

uint64_t (*InkDescriptorParticles.initialRandomRotation.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

PencilKit::InkDescriptorParticles::ParticleBlendMode_optional __swiftcall InkDescriptorParticles.ParticleBlendMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of InkDescriptorParticles.ParticleBlendMode.init(rawValue:);
  return (PencilKit::InkDescriptorParticles::ParticleBlendMode_optional)InkRendering.BlendMode.init(rawValue:)(rawValue, v2, v1);
}

uint64_t InkRendering.BlendMode.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  if (v7 == 1)
    v9 = 1;
  else
    v9 = 2;
  if (!v7)
    v9 = 0;
  *a3 = v9;
  return result;
}

uint64_t InkDescriptorParticles.ParticleBlendMode.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 7889261;
  else
    return 6579297;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkDescriptorParticles.ParticleBlendMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkDescriptorParticles.ParticleBlendMode()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

PencilKit::InkDescriptorParticles::ParticleBlendMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkDescriptorParticles.ParticleBlendMode(Swift::String *a1)
{
  return InkDescriptorParticles.ParticleBlendMode.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkDescriptorParticles.ParticleBlendMode(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 6579297;
  if (*v1)
    v2 = 7889261;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptorParticles.ParticleBlendMode()
{
  lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode();
  return RawRepresentable<>.encode(to:)();
}

void InkDescriptorParticles.particleBlendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 91);
}

_BYTE *InkDescriptorParticles.particleBlendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 91) = *result;
  return result;
}

uint64_t (*InkDescriptorParticles.particleBlendMode.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkDescriptorParticles.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xD000000000000010;
  *(_QWORD *)(a1 + 8) = 0x80000001BE4FFC80;
  *(_OWORD *)(a1 + 16) = xmmword_1BE4FB7E0;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 89) = 1;
  *(_BYTE *)(a1 + 91) = 0;
  return result;
}

uint64_t InkDescriptorParticles.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE24909C + 4 * byte_1BE4F9DE0[a1]))(0x4E65727574786574, 0xEB00000000656D61);
}

uint64_t sub_1BE24909C()
{
  return 0x676E6963617073;
}

uint64_t sub_1BE2490B4()
{
  return 1702521203;
}

uint64_t sub_1BE2490C4()
{
  return 1802723693;
}

uint64_t sub_1BE2490D4()
{
  return 0x6E6F697461746F72;
}

unint64_t sub_1BE2490EC()
{
  return 0xD000000000000015;
}

unint64_t sub_1BE24910C()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkDescriptorParticles.CodingKeys()
{
  unsigned __int8 *v0;

  return InkDescriptorParticles.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkDescriptorParticles.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkDescriptorParticles.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkDescriptorParticles.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkDescriptorParticles.CodingKeys()
{
  lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkDescriptorParticles.CodingKeys()
{
  lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkDescriptorParticles.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD v25[2];
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkDescriptorParticles.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(_QWORD *)(v1 + 40);
  v32 = *(_QWORD *)(v1 + 48);
  v33 = v11;
  v12 = *(_QWORD *)(v1 + 56);
  v30 = *(_QWORD *)(v1 + 64);
  v31 = v12;
  v13 = *(_QWORD *)(v1 + 72);
  v28 = *(_QWORD *)(v1 + 80);
  v29 = v13;
  LODWORD(v13) = *(unsigned __int8 *)(v1 + 88);
  v26 = *(unsigned __int8 *)(v1 + 89);
  v27 = v13;
  v25[1] = *(unsigned __int8 *)(v1 + 90);
  v14 = *(unsigned __int8 *)(v1 + 91);
  v15 = a1[3];
  v16 = a1;
  v18 = v17;
  __swift_project_boxed_opaque_existential_1(v16, v15);
  lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v35) = 0;
  v19 = v34;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v19)
  {
    v21 = v30;
    v20 = v31;
    v23 = v32;
    v22 = v33;
    LODWORD(v34) = v14;
    v35 = v9;
    v42 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v35 = v8;
    v36 = v10;
    v42 = 2;
    type metadata accessor for CGSize(0);
    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9B9F0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v35 = v22;
    v36 = v23;
    v37 = v20;
    v38 = v21;
    v39 = v29;
    v40 = v28;
    v41 = v27;
    v42 = 3;
    lazy protocol witness table accessor for type InkMask and conformance InkMask();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v35) = v26;
    v42 = 4;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v35) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v35) = v34;
    v42 = 6;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v18);
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.CodingKeys, &unk_1E77728D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.CodingKeys, &unk_1E77728D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.CodingKeys, &unk_1E77728D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.CodingKeys, &unk_1E77728D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkMask and conformance InkMask()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkMask and conformance InkMask;
  if (!lazy protocol witness table cache variable for type InkMask and conformance InkMask)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkMask, &type metadata for InkMask);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask and conformance InkMask);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkMask and conformance InkMask;
  if (!lazy protocol witness table cache variable for type InkMask and conformance InkMask)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkMask, &type metadata for InkMask);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask and conformance InkMask);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleRotation, &type metadata for InkDescriptorParticles.ParticleRotation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleRotation, &type metadata for InkDescriptorParticles.ParticleRotation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleRotation, &type metadata for InkDescriptorParticles.ParticleRotation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleRotation, &type metadata for InkDescriptorParticles.ParticleRotation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleRotation, &type metadata for InkDescriptorParticles.ParticleRotation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleBlendMode, &type metadata for InkDescriptorParticles.ParticleBlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleBlendMode, &type metadata for InkDescriptorParticles.ParticleBlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleBlendMode, &type metadata for InkDescriptorParticles.ParticleBlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode;
  if (!lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptorParticles.ParticleBlendMode, &type metadata for InkDescriptorParticles.ParticleBlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode);
  }
  return result;
}

uint64_t InkDescriptorParticles.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  char v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkDescriptorParticles.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkDescriptorParticles.CodingKeys and conformance InkDescriptorParticles.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v32) = 0;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    v39 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v14 = v32;
    type metadata accessor for CGSize(0);
    v39 = 2;
    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA08]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v32;
    v16 = v33;
    v39 = 3;
    lazy protocol witness table accessor for type InkMask and conformance InkMask();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v30 = v32;
    v31 = v11;
    v17 = v33;
    v28 = v35;
    v29 = v34;
    v26 = v37;
    v27 = v36;
    v25 = v38;
    v39 = 4;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleRotation and conformance InkDescriptorParticles.ParticleRotation();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v32;
    LOBYTE(v32) = 5;
    v23 = KeyedDecodingContainer.decode(_:forKey:)();
    v39 = 6;
    lazy protocol witness table accessor for type InkDescriptorParticles.ParticleBlendMode and conformance InkDescriptorParticles.ParticleBlendMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v18 = v23 & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v19 = v32;
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a2 + 40) = v30;
    *(_QWORD *)(a2 + 48) = v17;
    v20 = v28;
    *(_QWORD *)(a2 + 56) = v29;
    *(_QWORD *)(a2 + 64) = v20;
    v21 = v26;
    *(_QWORD *)(a2 + 72) = v27;
    *(_QWORD *)(a2 + 80) = v21;
    *(_BYTE *)(a2 + 88) = v25;
    *(_BYTE *)(a2 + 89) = v24;
    *(_BYTE *)(a2 + 90) = v18;
    *(_BYTE *)(a2 + 91) = v19;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkDescriptorParticles@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InkDescriptorParticles.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkDescriptorParticles(_QWORD *a1)
{
  return InkDescriptorParticles.encode(to:)(a1);
}

uint64_t DecodableDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t DecodableDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*DecodableDefault.wrappedValue.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t DecodableDefault.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t DecodableDefault.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t DecodableDefault.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v19)(char *, char *, uint64_t);
  _BYTE v21[40];
  uint64_t v22;

  v22 = a4;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = &v21[-v12 - 8];
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11, v15);
  v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Decoder(a1, (uint64_t)v21);
  dispatch thunk of Decodable.init(from:)();
  if (v4)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, a2);
    (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    __swift_destroy_boxed_opaque_existential_1(a1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22, v17, a2);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, a2);
    __swift_destroy_boxed_opaque_existential_1(a1);
    v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v19(v17, v13, a2);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v22, v17, a2);
  }
}

uint64_t outlined init with copy of Decoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t DecodableDefault.encode(to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DecodableDefault<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return DecodableDefault.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DecodableDefault<A>()
{
  return DecodableDefault.encode(to:)();
}

double CGFloat.init(defaultState:)()
{
  return 0.0;
}

uint64_t InkMask.textureName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InkMask.textureName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InkMask.textureName.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void InkMask.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*InkMask.scale.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.scaleConstant.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void InkMask.scaleConstant.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*InkMask.scaleConstant.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.movement.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void InkMask.movement.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*InkMask.movement.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.depth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void InkMask.depth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*InkMask.depth.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkMask.initialRandomOffset.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t InkMask.initialRandomOffset.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*InkMask.initialRandomOffset.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkMask.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  strcpy((char *)a1, "default-mask");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  result = 8.0;
  *(_OWORD *)(a1 + 16) = xmmword_1BE4FB7F0;
  *(_OWORD *)(a1 + 32) = xmmword_1BE4FB800;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkMask.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE249E74 + 4 * byte_1BE4F9DE7[*v0]))(0x4E65727574786574, 0xEB00000000656D61);
}

uint64_t sub_1BE249E74()
{
  return 0x656C616373;
}

uint64_t sub_1BE249E88()
{
  return 0x6E6F43656C616373;
}

uint64_t sub_1BE249EAC()
{
  return 0x746E656D65766F6DLL;
}

uint64_t sub_1BE249EC4()
{
  return 0x6874706564;
}

unint64_t sub_1BE249ED8()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkMask.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkMask.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkMask.CodingKeys()
{
  lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkMask.CodingKeys()
{
  lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkMask.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[4];
  uint64_t v15;
  char v16;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkMask.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 40);
  v14[3] = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  v12 = v15;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v12)
  {
    v17 = v9;
    v16 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v8;
    v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecodableDefault<CGFloat>);
    lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>, &demangling cache variable for type metadata for DecodableDefault<CGFloat>, (uint64_t)&protocol conformance descriptor for DecodableDefault<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v11;
    v16 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v10;
    v16 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkMask.CodingKeys, &unk_1E7772C50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkMask.CodingKeys, &unk_1E7772C50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkMask.CodingKeys, &unk_1E7772C50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkMask.CodingKeys, &unk_1E7772C50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkMask.CodingKeys and conformance InkMask.CodingKeys);
  }
  return result;
}

uint64_t InkMask.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  double *v19;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkMask.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkMask.CodingKeys and conformance InkMask.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v22) = 0;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    v21 = a2;
    v24 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v11;
    v14 = v22;
    v24 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecodableDefault<CGFloat>);
    lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>, &demangling cache variable for type metadata for DecodableDefault<CGFloat>, (uint64_t)&protocol conformance descriptor for DecodableDefault<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (v23)
      v15 = 0.0;
    else
      v15 = v22;
    v24 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v16 = v22;
    v24 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17 = v22;
    LOBYTE(v22) = 5;
    v18 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v19 = (double *)v21;
    *v21 = v20;
    *((_QWORD *)v19 + 1) = v13;
    v19[2] = v14;
    v19[3] = v15;
    v19[4] = v16;
    v19[5] = v17;
    *((_BYTE *)v19 + 48) = v18 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkMask@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return InkMask.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkMask(_QWORD *a1)
{
  return InkMask.encode(to:)(a1);
}

void InkFunction.Input.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

PencilKit::InkFunction::Input_optional __swiftcall InkFunction.Input.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  PencilKit::InkFunction::Input_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InkFunction.Input.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static InkFunction.Input.allCases.getter()
{
  return &outlined read-only object #0 of static InkFunction.Input.allCases.getter;
}

uint64_t InkFunction.Input.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE24A5AC + 4 * byte_1BE4F9DED[*v0]))(0x797469636F6C6576, 0xE800000000000000);
}

uint64_t sub_1BE24A5AC()
{
  return 0x6564757469746C61;
}

uint64_t sub_1BE24A5C0()
{
  return 0x6874756D697A61;
}

uint64_t sub_1BE24A5D8()
{
  return 0x6563726F66;
}

uint64_t sub_1BE24A5EC()
{
  return 0x6F69746365726964;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance InkFunction.Input(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance InkFunction.Input()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1BE24A660()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance InkFunction.Input()
{
  __asm { BR              X10 }
}

uint64_t sub_1BE24A720()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance InkFunction.Input()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1BE24A7D8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

PencilKit::InkFunction::Input_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkFunction.Input(Swift::String *a1)
{
  return InkFunction.Input.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InkFunction.Input()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BE24A898 + 4 * byte_1BE4F9E01[*v0]))();
}

void sub_1BE24A898(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6564757469746C61;
  a1[1] = v1;
}

void sub_1BE24A8B0(_QWORD *a1@<X8>)
{
  *a1 = 0x6874756D697A61;
  a1[1] = 0xE700000000000000;
}

void sub_1BE24A8CC(_QWORD *a1@<X8>)
{
  *a1 = 0x6563726F66;
  a1[1] = 0xE500000000000000;
}

void sub_1BE24A8E4(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69746365726964;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFunction.Input()
{
  lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFunction.Input()
{
  lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance InkFunction.Input(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance InkFunction.Input;
}

void protocol witness for Identifiable.id.getter in conformance InkFunction.Input(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t InkFunction.InputProperties.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

PencilKit::InkFunction::InputProperties __swiftcall InkFunction.InputProperties.init(rawValue:)(PencilKit::InkFunction::InputProperties rawValue)
{
  PencilKit::InkFunction::InputProperties *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static InkFunction.InputProperties.altitudeAzimuth.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static InkFunction.InputProperties.force.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFunction.InputProperties()
{
  lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFunction.InputProperties()
{
  lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties();
  return RawRepresentable<>.encode(to:)();
}

uint64_t InkFunction.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t InkFunction.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*InkFunction.id.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.input.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InkFunction();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for InkFunction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for InkFunction;
  if (!type metadata singleton initialization cache for InkFunction)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t InkFunction.input.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for InkFunction();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*InkFunction.input.modify())()
{
  type metadata accessor for InkFunction();
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkFunction.output.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for InkFunction() + 24));
}

uint64_t InkFunction.output.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for InkFunction();
  v6 = (double *)(v2 + *(int *)(result + 24));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*InkFunction.output.modify())()
{
  type metadata accessor for InkFunction();
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.maxOutput.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for InkFunction() + 28));
}

uint64_t InkFunction.maxOutput.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for InkFunction();
  v8 = v3 + *(int *)(result + 28);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*InkFunction.maxOutput.modify())()
{
  type metadata accessor for InkFunction();
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.controls.getter()
{
  type metadata accessor for InkFunction();
  return swift_bridgeObjectRetain();
}

uint64_t InkFunction.controls.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for InkFunction() + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*InkFunction.controls.modify())()
{
  type metadata accessor for InkFunction();
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkFunction.excludeInputWith.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InkFunction();
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t InkFunction.excludeInputWith.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for InkFunction();
  *(_QWORD *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*InkFunction.excludeInputWith.modify())()
{
  type metadata accessor for InkFunction();
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkFunction.init()@<Q0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  UUID.init()();
  v2 = (int *)type metadata accessor for InkFunction();
  *(_BYTE *)(a1 + v2[5]) = 3;
  *(_OWORD *)(a1 + v2[6]) = xmmword_1BE4FB810;
  v3 = a1 + v2[7];
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 1;
  v4 = v2[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE4FB820;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 48) = xmmword_1BE4FB830;
  *(_OWORD *)(v5 + 64) = xmmword_1BE4FB840;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(v5 + 80) = result;
  *(_QWORD *)(a1 + v4) = v5;
  *(_QWORD *)(a1 + v2[9]) = 0;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance InkFunction.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance InkFunction.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance InkFunction.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_1BE24AF00()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance InkFunction.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InkFunction.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized InkFunction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InkFunction.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BE24AFD8 + 4 * byte_1BE4F9E0B[*v0]))();
}

void sub_1BE24AFD8(_QWORD *a1@<X8>)
{
  *a1 = 0x74757074756FLL;
  a1[1] = 0xE600000000000000;
}

void sub_1BE24AFF0(_QWORD *a1@<X8>)
{
  *a1 = 0x757074754F78616DLL;
  a1[1] = 0xE900000000000074;
}

void sub_1BE24B010(_QWORD *a1@<X8>)
{
  *a1 = 0x736C6F72746E6F63;
  a1[1] = 0xE800000000000000;
}

void sub_1BE24B02C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001BE4FF5A0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkFunction.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE24B078 + 4 * byte_1BE4F9E10[*v0]))(0x7475706E69, 0xE500000000000000);
}

uint64_t sub_1BE24B078()
{
  return 0x74757074756FLL;
}

uint64_t sub_1BE24B08C()
{
  return 0x757074754F78616DLL;
}

uint64_t sub_1BE24B0A8()
{
  return 0x736C6F72746E6F63;
}

unint64_t sub_1BE24B0C0()
{
  return 0xD000000000000010;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkFunction.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized InkFunction.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkFunction.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkFunction.CodingKeys()
{
  lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkFunction.CodingKeys()
{
  lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkFunction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  __int128 *v11;
  char v12;
  __int128 v14;
  char v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkFunction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = (int *)type metadata accessor for InkFunction();
  LOBYTE(v14) = *(_BYTE *)(v3 + v10[5]);
  v16 = 0;
  lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v14 = *(_OWORD *)(v3 + v10[6]);
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<CGFloat>);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<CGFloat> and conformance <> ClosedRange<A>, &demangling cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEA4C8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = (__int128 *)(v3 + v10[7]);
    v12 = *((_BYTE *)v11 + 16);
    v14 = *v11;
    v15 = v12;
    v16 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + v10[8]);
    v16 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
    lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA20], MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v14 = *(_QWORD *)(v3 + v10[9]);
    v16 = 4;
    lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.CodingKeys, &type metadata for InkFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.CodingKeys, &type metadata for InkFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.CodingKeys, &type metadata for InkFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.CodingKeys, &type metadata for InkFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.Input, &type metadata for InkFunction.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.Input, &type metadata for InkFunction.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.Input, &type metadata for InkFunction.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.Input, &type metadata for InkFunction.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input;
  if (!lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.Input, &type metadata for InkFunction.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.Input and conformance InkFunction.Input);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.InputProperties, &type metadata for InkFunction.InputProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.InputProperties, &type metadata for InkFunction.InputProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.InputProperties, &type metadata for InkFunction.InputProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.InputProperties, &type metadata for InkFunction.InputProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.InputProperties, &type metadata for InkFunction.InputProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties;
  if (!lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFunction.InputProperties, &type metadata for InkFunction.InputProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFunction.InputProperties and conformance InkFunction.InputProperties);
  }
  return result;
}

uint64_t InkFunction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char v41;
  char v42;

  v31 = a2;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkFunction.CodingKeys>);
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for InkFunction();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v34 = v6[5];
  v9[v34] = 3;
  v32 = v6[6];
  *(_OWORD *)&v9[v32] = xmmword_1BE4FB810;
  v10 = &v9[v6[7]];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v11 = v6[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1BE4FB820;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_OWORD *)(v12 + 48) = xmmword_1BE4FB830;
  *(_OWORD *)(v12 + 64) = xmmword_1BE4FB840;
  __asm { FMOV            V0.2D, #1.0 }
  *(_QWORD *)&v9[v11] = v12;
  *(_OWORD *)(v12 + 80) = _Q0;
  v18 = v6[9];
  v37 = a1;
  v38 = v9;
  *(_QWORD *)&v9[v18] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFunction.CodingKeys and conformance InkFunction.CodingKeys();
  v35 = v5;
  v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    v26 = (uint64_t)v37;
    v22 = (uint64_t)v38;
  }
  else
  {
    v20 = v34;
    v39 = v10;
    v29 = v18;
    v30 = v11;
    v42 = 0;
    lazy protocol witness table accessor for type InkFunction.Input and conformance InkFunction.Input();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v22 = (uint64_t)v38;
    v38[v20] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<CGFloat>);
    v42 = 1;
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<CGFloat> and conformance <> ClosedRange<A>, &demangling cache variable for type metadata for ClosedRange<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEA4F0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v22 + v32) = v40;
    v42 = 2;
    v23 = v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v24 = v41;
    v25 = v39;
    *(_OWORD *)v39 = v40;
    v25[16] = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
    v42 = 3;
    lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], (unint64_t *)&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA30], MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v22 + v30) = v40;
    v42 = 4;
    lazy protocol witness table accessor for type InkFunction.InputProperties and conformance InkFunction.InputProperties();
    v27 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v27);
    *(_QWORD *)(v22 + v29) = v40;
    outlined init with copy of InkFunction(v22, v31);
    v26 = (uint64_t)v37;
  }
  __swift_destroy_boxed_opaque_existential_1(v26);
  return outlined destroy of InkFunction(v22);
}

uint64_t outlined destroy of InkFunction(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InkFunction();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGPoint]);
    v10 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(a2, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, a3);
    result = MEMORY[0x1C3B801E4](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of InkFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InkFunction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFunction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InkFunction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFunction(_QWORD *a1)
{
  return InkFunction.encode(to:)(a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance InkFunction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

PencilKit::InkBehavior::InkProperty_optional __swiftcall InkBehavior.InkProperty.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of InkBehavior.InkProperty.init(rawValue:);
  return (PencilKit::InkBehavior::InkProperty_optional)InkDescriptorParticles.ParticleRotation.init(rawValue:)(rawValue, v2, v1);
}

uint64_t InkDescriptorParticles.ParticleRotation.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  v9 = 3;
  if (v7 < 3)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t InkBehavior.InkProperty.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7974696361706FLL;
  if (*v0 != 1)
    v1 = 0x32737569646172;
  if (*v0)
    return v1;
  else
    return 0x737569646172;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InkBehavior.InkProperty(char *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InkBehavior.InkProperty()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InkBehavior.InkProperty()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InkBehavior.InkProperty()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

PencilKit::InkBehavior::InkProperty_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InkBehavior.InkProperty(Swift::String *a1)
{
  return InkBehavior.InkProperty.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InkBehavior.InkProperty(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0x7974696361706FLL;
  if (v2 != 1)
    v4 = 0x32737569646172;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x737569646172;
  if (!v5)
    v3 = 0xE700000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkBehavior.InkProperty()
{
  lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkBehavior.InkProperty()
{
  lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CodingKeyRepresentable.codingKey.getter in conformance InkBehavior.InkProperty()
{
  lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty();
  return RawRepresentable<>.codingKey.getter();
}

uint64_t protocol witness for CodingKeyRepresentable.init<A>(codingKey:) in conformance InkBehavior.InkProperty()
{
  lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty();
  return RawRepresentable<>.init<A>(codingKey:)();
}

uint64_t InkBehavior.functions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InkBehavior.functions.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*InkBehavior.functions.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.12;
  *(_OWORD *)a1 = xmmword_1BE4FB850;
  *(_OWORD *)(a1 + 16) = xmmword_1BE4FB860;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

double InkBehavior.smoothing.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double InkBehavior.smoothing.setter(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*InkBehavior.smoothing.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.inkTransform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 80);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 InkBehavior.inkTransform.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 64) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 80) = result;
  return result;
}

uint64_t (*InkBehavior.inkTransform.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.feathering.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_BYTE *)(v1 + 160);
  v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 128);
  v5 = *(_OWORD *)(v1 + 144);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = v2;
  return result;
}

__n128 InkBehavior.feathering.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_BYTE *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 112) = v3;
  result = *(__n128 *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 128) = result;
  *(_OWORD *)(v1 + 144) = v5;
  *(_BYTE *)(v1 + 160) = v2;
  return result;
}

uint64_t (*InkBehavior.feathering.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.pencilFeathering.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_BYTE *)(v1 + 232);
  v3 = *(_OWORD *)(v1 + 184);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 200);
  v5 = *(_OWORD *)(v1 + 216);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = v2;
  return result;
}

__n128 InkBehavior.pencilFeathering.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_BYTE *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 168) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 184) = v3;
  result = *(__n128 *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 200) = result;
  *(_OWORD *)(v1 + 216) = v5;
  *(_BYTE *)(v1 + 232) = v2;
  return result;
}

uint64_t (*InkBehavior.pencilFeathering.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

__n128 InkBehavior.animationDescriptor.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unsigned __int8 v3;

  result = v1[15];
  v3 = v1[16].n128_u8[0];
  *a1 = result;
  a1[1].n128_u8[0] = v3;
  return result;
}

__n128 InkBehavior.animationDescriptor.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  v1[15] = *a1;
  v1[16].n128_u8[0] = v2;
  return result;
}

uint64_t (*InkBehavior.animationDescriptor.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t InkBehavior.supportsCombiningStrokes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 257);
}

uint64_t InkBehavior.supportsCombiningStrokes.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 257) = result;
  return result;
}

uint64_t (*InkBehavior.supportsCombiningStrokes.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkBehavior.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_OWORD *)(a1 + 8) = xmmword_1BE4FB850;
  *(_OWORD *)(a1 + 24) = xmmword_1BE4FB860;
  *(_OWORD *)(a1 + 40) = xmmword_1BE4FB810;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 1;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 256) = 1;
  return result;
}

uint64_t InkBehavior.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE24C158 + 4 * byte_1BE4F9E15[a1]))(0x6E6F6974636E7566, 0xE900000000000073);
}

uint64_t sub_1BE24C158()
{
  return 0x6E6968746F6F6D73;
}

uint64_t sub_1BE24C174()
{
  return 0x736E6172546B6E69;
}

uint64_t sub_1BE24C194()
{
  return 0x6972656874616566;
}

unint64_t sub_1BE24C1B0()
{
  return 0xD000000000000010;
}

unint64_t sub_1BE24C1CC()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkBehavior.CodingKeys()
{
  unsigned __int8 *v0;

  return InkBehavior.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkBehavior.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkBehavior.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkBehavior.CodingKeys()
{
  lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkBehavior.CodingKeys()
{
  lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkBehavior.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  char v57;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkBehavior.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v11 = v1[3];
  v43 = v1[4];
  v12 = v1[6];
  v44 = v1[5];
  v45 = v11;
  v13 = v1[7];
  v14 = v1[8];
  v15 = v1[9];
  v16 = v1[10];
  v17 = v1[11];
  v42 = v1[12];
  v41 = v1[13];
  v40 = v1[14];
  v39 = v1[15];
  v38 = v1[16];
  v37 = v1[17];
  v36 = v1[18];
  v35 = v1[19];
  v56 = *((unsigned __int8 *)v1 + 160);
  v26 = v1[21];
  v27 = v1[22];
  v34 = v1[23];
  v33 = v1[24];
  v32 = v1[25];
  v31 = v1[26];
  v30 = v1[27];
  v29 = v1[28];
  v28 = *((unsigned __int8 *)v1 + 232);
  v23 = v1[30];
  v24 = v1[31];
  v25 = *((unsigned __int8 *)v1 + 256);
  v18 = *((unsigned __int8 *)v1 + 257);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v47 = v8;
  v57 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [InkBehavior.InkProperty : [InkFunction]]);
  lazy protocol witness table accessor for type [InkBehavior.InkProperty : [InkFunction]] and conformance <> [A : B]();
  v19 = v46;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v21 = v41;
  v22 = v42;
  LODWORD(v46) = v18;
  v47 = v9;
  v48 = v10;
  v49 = v45;
  v50 = v43;
  v51 = v44;
  v57 = 1;
  lazy protocol witness table accessor for type InkSmoothing and conformance InkSmoothing();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v47 = v12;
  v48 = v13;
  v49 = v14;
  v50 = v15;
  v51 = v16;
  v52 = v17;
  v57 = 2;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v47 = v22;
  v48 = v21;
  v49 = v40;
  v50 = v39;
  v51 = v38;
  v52 = v37;
  v53 = v36;
  v54 = v35;
  v55 = v56;
  v57 = 3;
  lazy protocol witness table accessor for type InkFeathering and conformance InkFeathering();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v47 = v26;
  v48 = v27;
  v49 = v34;
  v50 = v33;
  v51 = v32;
  v52 = v31;
  v53 = v30;
  v54 = v29;
  v55 = v28;
  v57 = 4;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v47 = v23;
  v48 = v24;
  LOBYTE(v49) = v25;
  v57 = 5;
  lazy protocol witness table accessor for type InkAnimationDescriptor and conformance InkAnimationDescriptor();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v47) = 6;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, _QWORD))(v4 + 8))(v7, 0);
}

unint64_t lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.CodingKeys, &unk_1E77715B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.CodingKeys, &unk_1E77715B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.CodingKeys, &unk_1E77715B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.CodingKeys, &unk_1E77715B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.InkProperty, &type metadata for InkBehavior.InkProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.InkProperty, &type metadata for InkBehavior.InkProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.InkProperty, &type metadata for InkBehavior.InkProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty;
  if (!lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkBehavior.InkProperty, &type metadata for InkBehavior.InkProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkBehavior.InkProperty and conformance InkBehavior.InkProperty);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [InkFunction] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [InkFunction]);
    v10 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(a2, (uint64_t (*)(uint64_t))type metadata accessor for InkFunction, a3);
    result = MEMORY[0x1C3B801E4](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkSmoothing and conformance InkSmoothing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing;
  if (!lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkSmoothing, &type metadata for InkSmoothing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing;
  if (!lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkSmoothing, &type metadata for InkSmoothing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing and conformance InkSmoothing);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFeathering and conformance InkFeathering()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering;
  if (!lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering, &type metadata for InkFeathering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering;
  if (!lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering, &type metadata for InkFeathering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering and conformance InkFeathering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkAnimationDescriptor and conformance InkAnimationDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkAnimationDescriptor, &type metadata for InkAnimationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkAnimationDescriptor, &type metadata for InkAnimationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor and conformance InkAnimationDescriptor);
  }
  return result;
}

uint64_t InkBehavior.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  int v24;
  char v25;
  double v26;
  char v27;
  char v28;
  char v29;
  double *v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  unint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  char v78;
  char v79;
  char v80;
  char v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  char v102;
  _BYTE v103[7];
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  uint64_t v111;
  char v112;
  _BYTE v113[7];
  double v114;
  uint64_t v115;
  __int16 v116;
  unsigned __int8 v117;
  _BYTE v118[7];
  char v119;
  _BYTE v120[7];
  char v121;
  uint64_t v122;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkBehavior.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v68 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]));
  v121 = 1;
  v119 = 1;
  v117 = 1;
  v10 = a1[3];
  v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type InkBehavior.CodingKeys and conformance InkBehavior.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v65 = v2;
    v66 = 0;
    v67 = 0.0;
    v63 = 0;
    v64 = 0;
    v76 = 0;
    v77 = 0.0;
    v74 = 0;
    v75 = 0;
    v72 = 0.0;
    v73 = 0.0;
    v70 = 0.0;
    v71 = 0.0;
    v69 = 0;
    v61 = 1.0;
    v122 = 0;
    v60 = 1.0;
    v13 = v68;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    v82 = *(double *)&v13;
    v83 = 0x3FBEB851EB851EB8;
    v84 = 0x3FC47AE147AE147BLL;
    *(double *)&v85 = 0.05;
    v86 = 0.5;
    v87 = 0.0;
    v88 = v61;
    v89 = v122;
    v90 = 0;
    v91 = v60;
    v92 = 0.0;
    v93 = 0.0;
    v94 = v67;
    v95 = v66;
    v96 = v63;
    v97 = v64;
    v98 = 0.0;
    v99 = 0.0;
    v100 = 0.0;
    v101 = 0;
    v102 = v121;
    *(_DWORD *)v103 = *(_DWORD *)v120;
    *(_DWORD *)&v103[3] = *(_DWORD *)&v120[3];
    v104 = v77;
    v105 = v76;
    v106 = v75;
    v107 = v74;
    v108 = v73;
    v109 = v72;
    v110 = v71;
    v111 = 0;
    v112 = v119;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v118[3];
    *(_DWORD *)v113 = *(_DWORD *)v118;
    v114 = v70;
    v115 = v69;
    v116 = v117;
  }
  else
  {
    v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [InkBehavior.InkProperty : [InkFunction]]);
    v81 = 0;
    lazy protocol witness table accessor for type [InkBehavior.InkProperty : [InkFunction]] and conformance <> [A : B]();
    v12 = v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    v15 = v82;
    v81 = 1;
    lazy protocol witness table accessor for type InkSmoothing and conformance InkSmoothing();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17 = *(_QWORD *)&v82;
    v16 = v83;
    v18 = *(double *)&v85;
    v68 = v84;
    v19 = v86;
    type metadata accessor for CGAffineTransform(0);
    v81 = 2;
    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9B0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v82;
    v20 = v83;
    v22 = v84;
    v23 = *(double *)&v85;
    v58 = v87;
    v59 = v86;
    v81 = 3;
    lazy protocol witness table accessor for type InkFeathering and conformance InkFeathering();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v122 = v20;
    v60 = v23;
    v61 = v21;
    v66 = v83;
    v67 = v82;
    v63 = v84;
    v64 = v85;
    v55 = v87;
    v56 = v86;
    v54 = v88;
    v57 = v89;
    v24 = v90;
    v121 = v90;
    v81 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LODWORD(v51) = v24;
    v52 = v22;
    v76 = v83;
    v77 = v82;
    v74 = v85;
    v75 = v84;
    v72 = v87;
    v73 = v86;
    v71 = v88;
    v53 = v89;
    LOBYTE(v24) = v90;
    v119 = v90;
    v81 = 5;
    lazy protocol witness table accessor for type InkAnimationDescriptor and conformance InkAnimationDescriptor();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v25 = v24;
    v26 = v21;
    v69 = v83;
    v70 = v82;
    LOBYTE(v24) = v84;
    v117 = v84;
    v81 = 6;
    v27 = KeyedDecodingContainer.decode(_:forKey:)();
    v65 = 0;
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v12);
    v29 = v28 & 1;
    v50 = v28 & 1;
    v80 = v51;
    v79 = v25;
    v78 = v24;
    v30 = a2;
    *a2 = v15;
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v16;
    v49 = v17;
    v51 = v16;
    v31 = v68;
    a2[3] = *(double *)&v68;
    a2[4] = v18;
    a2[5] = v19;
    a2[6] = v21;
    v32 = v52;
    *((_QWORD *)a2 + 7) = v122;
    *((_QWORD *)a2 + 8) = v32;
    v33 = v59;
    a2[9] = v23;
    a2[10] = v33;
    v34 = v58;
    a2[11] = v58;
    v36 = v66;
    v35 = v67;
    v30[12] = v67;
    *((_QWORD *)v30 + 13) = v36;
    v38 = v63;
    v37 = v64;
    *((_QWORD *)v30 + 14) = v63;
    *((_QWORD *)v30 + 15) = v37;
    v40 = v55;
    v39 = v56;
    v30[16] = v56;
    v30[17] = v40;
    v41 = v54;
    v42 = v57;
    v30[18] = v54;
    *((_QWORD *)v30 + 19) = v42;
    *((_BYTE *)v30 + 160) = v80;
    v43 = v76;
    v30[21] = v77;
    *((_QWORD *)v30 + 22) = v43;
    v44 = v74;
    *((_QWORD *)v30 + 23) = v75;
    *((_QWORD *)v30 + 24) = v44;
    v45 = v72;
    v30[25] = v73;
    v30[26] = v45;
    v46 = v53;
    v30[27] = v71;
    *((_QWORD *)v30 + 28) = v46;
    *((_BYTE *)v30 + 232) = v79;
    v47 = v69;
    v30[30] = v70;
    *((_QWORD *)v30 + 31) = v47;
    *((_BYTE *)v30 + 256) = v78;
    *((_BYTE *)v30 + 257) = v29;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    v82 = v15;
    v83 = v49;
    v84 = v51;
    v85 = v31;
    v86 = v18;
    v87 = v19;
    v88 = v26;
    v89 = v122;
    v90 = v32;
    v91 = v23;
    v92 = v33;
    v93 = v34;
    v94 = v35;
    v95 = v36;
    v96 = v38;
    v97 = v37;
    v98 = v39;
    v99 = v40;
    v100 = v41;
    v101 = v57;
    v102 = v121;
    *(_DWORD *)v103 = *(_DWORD *)v120;
    *(_DWORD *)&v103[3] = *(_DWORD *)&v120[3];
    v104 = v77;
    v105 = v76;
    v106 = v75;
    v107 = v74;
    v108 = v73;
    v109 = v72;
    v110 = v71;
    v111 = v53;
    v112 = v119;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v118[3];
    *(_DWORD *)v113 = *(_DWORD *)v118;
    v114 = v70;
    v115 = v69;
    LOBYTE(v116) = v117;
    HIBYTE(v116) = v50;
  }
  return outlined release of InkBehavior((uint64_t)&v82);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkBehavior@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return InkBehavior.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkBehavior(_QWORD *a1)
{
  return InkBehavior.encode(to:)(a1);
}

double InkSmoothing.stylus.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void InkSmoothing.stylus.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*InkSmoothing.stylus.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.touch.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void InkSmoothing.touch.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*InkSmoothing.touch.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.velocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void InkSmoothing.velocity.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*InkSmoothing.velocity.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.direction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void InkSmoothing.direction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*InkSmoothing.direction.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkSmoothing.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void InkSmoothing.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*InkSmoothing.radius.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkSmoothing.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE24D4EC + 4 * byte_1BE4F9E1C[*v0]))(0x73756C797473, 0xE600000000000000);
}

uint64_t sub_1BE24D4EC()
{
  return 0x6863756F74;
}

uint64_t sub_1BE24D500()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1BE24D518()
{
  return 0x6F69746365726964;
}

uint64_t sub_1BE24D534()
{
  return 0x737569646172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkSmoothing.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkSmoothing.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkSmoothing.CodingKeys()
{
  lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkSmoothing.CodingKeys()
{
  lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkSmoothing.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkSmoothing.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v12 = v1[2];
  v11 = v1[3];
  v13 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = v10;
  v16 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v17 = v9;
    v16 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v12;
    v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v11;
    v16 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v13;
    v16 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkSmoothing.CodingKeys, &unk_1E7771C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkSmoothing.CodingKeys, &unk_1E7771C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkSmoothing.CodingKeys, &unk_1E7771C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkSmoothing.CodingKeys, &unk_1E7771C00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys);
  }
  return result;
}

uint64_t InkSmoothing.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkSmoothing.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkSmoothing.CodingKeys and conformance InkSmoothing.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v17 = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v18;
    v17 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v18;
    v17 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v18;
    v17 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v14 = v18;
    v17 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v15 = v18;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v14;
    a2[4] = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkSmoothing@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return InkSmoothing.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkSmoothing(_QWORD *a1)
{
  return InkSmoothing.encode(to:)(a1);
}

double InkAnimationDescriptor.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void InkAnimationDescriptor.duration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*InkAnimationDescriptor.duration.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

double InkAnimationDescriptor.sizeDelta.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void InkAnimationDescriptor.sizeDelta.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*InkAnimationDescriptor.sizeDelta.modify())()
{
  return destructiveProjectEnumData for PKCustomTool.ParameterError;
}

void InkAnimationDescriptor.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkAnimationDescriptor.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x746C6544657A6973;
  else
    return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkAnimationDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkAnimationDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkAnimationDescriptor.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkAnimationDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkAnimationDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkAnimationDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkAnimationDescriptor.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v12 = v9;
    v11[15] = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkAnimationDescriptor.CodingKeys, &unk_1E77727C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkAnimationDescriptor.CodingKeys, &unk_1E77727C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkAnimationDescriptor.CodingKeys, &unk_1E77727C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkAnimationDescriptor.CodingKeys, &unk_1E77727C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys);
  }
  return result;
}

uint64_t InkAnimationDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkAnimationDescriptor.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkAnimationDescriptor.CodingKeys and conformance InkAnimationDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v16 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    v14[15] = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v15;
    *a2 = v11;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t InkFeathering.EndCap.encode(to:)(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  char v17;
  double v18;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkFeathering.EndCap.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v18 = a3;
    v17 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = a4;
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = a5;
    v17 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkAnimationDescriptor@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return InkAnimationDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkAnimationDescriptor(_QWORD *a1)
{
  return InkAnimationDescriptor.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkFeathering.EndCap.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BE24E068 + 4 * byte_1BE4F9E21[*v0]))(0x6E6F697461727564, 0xE800000000000000);
}

uint64_t sub_1BE24E068()
{
  return 0x65636E6174736964;
}

uint64_t sub_1BE24E07C()
{
  return 0x447974696361706FLL;
}

uint64_t sub_1BE24E09C()
{
  return 0x6544737569646172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkFeathering.EndCap.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkFeathering.EndCap.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InkFeathering.EndCap.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkFeathering.EndCap.CodingKeys()
{
  lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkFeathering.EndCap.CodingKeys()
{
  lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance InkFeathering.EndCap(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = specialized InkFeathering.EndCap.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFeathering.EndCap(_QWORD *a1)
{
  double *v1;

  return InkFeathering.EndCap.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InkFeathering.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InkFeathering.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x706143646E65;
  else
    return 0x7061437472617473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InkFeathering.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InkFeathering.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InkFeathering.CodingKeys()
{
  lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InkFeathering.CodingKeys()
{
  lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InkFeathering.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InkFeathering.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v1;
  v9 = *((_QWORD *)v1 + 2);
  v10 = *((_QWORD *)v1 + 3);
  v11 = *((_QWORD *)v1 + 4);
  v12 = *((_QWORD *)v1 + 5);
  v13 = *((_QWORD *)v1 + 6);
  v14 = *((_QWORD *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = v16;
  v19 = v9;
  v20 = v10;
  v17 = 0;
  lazy protocol witness table accessor for type InkFeathering.EndCap and conformance InkFeathering.EndCap();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v18 = v11;
    *((_QWORD *)&v18 + 1) = v12;
    v19 = v13;
    v20 = v14;
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.CodingKeys, &unk_1E77722E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.CodingKeys, &unk_1E77722E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.CodingKeys, &unk_1E77722E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.CodingKeys, &unk_1E77722E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InkFeathering.EndCap and conformance InkFeathering.EndCap()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.EndCap, &type metadata for InkFeathering.EndCap);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.EndCap, &type metadata for InkFeathering.EndCap);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap and conformance InkFeathering.EndCap);
  }
  return result;
}

uint64_t InkFeathering.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkFeathering.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.CodingKeys and conformance InkFeathering.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v17 = 0;
    lazy protocol witness table accessor for type InkFeathering.EndCap and conformance InkFeathering.EndCap();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v15;
    v11 = v16;
    v17 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v15;
    v13 = v16;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InkFeathering@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return InkFeathering.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InkFeathering(_QWORD *a1)
{
  return InkFeathering.encode(to:)(a1);
}

id Array<A>.ns.getter(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  double *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  Class isa;
  id v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = v14;
    v4 = (double *)(a1 + 32);
    do
    {
      v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *v4);
      v13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v14 = v3;
      *(_QWORD *)&v12 = v5;
      v7 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v3 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        v3 = v14;
      }
      *(_QWORD *)(v3 + 16) = v7 + 1;
      outlined init with take of Any(&v12, (_OWORD *)(v3 + 32 * v7 + 32));
      ++v4;
      --v1;
    }
    while (v1);
  }
  v8 = objc_allocWithZone(MEMORY[0x1E0C99DE8]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initWithArray_, isa);

  return v10;
}

double InkFunction.Input.inputRange.getter()
{
  return 0.0;
}

id InkFunction.objc(property:)(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47;

  v3 = (int *)type metadata accessor for InkFunction();
  v4 = v3[8];
  v5 = *(_QWORD *)(v1 + v4);
  v47 = v1;
  swift_bridgeObjectRetain();
  v6 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in InkFunction.objc(property:), (uint64_t)v46, v5);
  v7 = swift_bridgeObjectRelease();
  v9 = v1 + v3[7];
  if ((*(_BYTE *)(v9 + 16) & 1) != 0)
  {
    v7 = swift_bridgeObjectRetain();
    v10 = v6;
  }
  else
  {
    v44 = 0;
    v45 = a1;
    v11 = *(_QWORD *)(v1 + v4);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v41 = v4;
      v42 = v3;
      v43 = v6;
      v13 = *(double *)v9;
      v14 = *(double *)(v9 + 8) - *(double *)v9;
      swift_bridgeObjectRetain();
      v15 = 0;
      v16 = 0;
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v17 = 40;
      do
      {
        if (!(v15 + 3 * (v16 / 3)))
        {
          v18 = *(double *)(v11 + v17);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
          v20 = *((_QWORD *)v10 + 2);
          v19 = *((_QWORD *)v10 + 3);
          if (v20 >= v19 >> 1)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v10);
          *((_QWORD *)v10 + 2) = v20 + 1;
          *(double *)&v10[8 * v20 + 32] = v13 + v14 * v18;
        }
        ++v16;
        --v15;
        v17 += 16;
        --v12;
      }
      while (v12);
      v7 = swift_bridgeObjectRelease();
      a1 = v45;
      v3 = v42;
      v6 = v43;
      v4 = v41;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      a1 = v45;
    }
  }
  v21 = *(_QWORD *)(v1 + v4);
  MEMORY[0x1E0C80A78](v7, v8);
  v40 = v1;
  swift_bridgeObjectRetain();
  v22 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #3 in InkFunction.objc(property:), (uint64_t)&v39, v21);
  v23 = swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v1 + v4);
  MEMORY[0x1E0C80A78](v23, v25);
  v40 = v1;
  swift_bridgeObjectRetain();
  v26 = specialized Sequence.flatMap<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #4 in InkFunction.objc(property:), (uint64_t)&v39, v24);
  swift_bridgeObjectRelease();
  v27 = qword_1BE4FB748[*(char *)(v1 + v3[5])];
  v28 = *(_QWORD *)(v1 + v3[9]);
  v29 = 23;
  if ((v28 & 1) == 0)
    v29 = 7;
  v30 = 31;
  if ((v28 & 1) == 0)
    v30 = 15;
  if ((v28 & 2) != 0)
    v31 = v30;
  else
    v31 = v29;
  v32 = Array<A>.ns.getter((uint64_t)v22);
  swift_bridgeObjectRelease();
  v33 = Array<A>.ns.getter((uint64_t)v6);
  v34 = Array<A>.ns.getter((uint64_t)v10);
  swift_bridgeObjectRelease();
  v35 = Array<A>.ns.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  v36 = Array<A>.ns.getter((uint64_t)v26);
  swift_bridgeObjectRelease();
  v37 = objc_msgSend(objc_allocWithZone((Class)PKInkFunction), sel_initWithProperty_input_inputMask_deviceMask_inputPoints_minOutputPoints_maxOutputPoints_outputPoints_controlPoints_functionType_, a1, v27, v31, 3, v32, v33, v34, v35, v36, 0);

  return v37;
}

uint64_t closure #3 in InkFunction.objc(property:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t v5;
  double v7;

  v4 = 0.0;
  v5 = *(_QWORD *)result % 3;
  if (!v5)
  {
    v7 = *(double *)(result + 8);
    result = type metadata accessor for InkFunction();
    v4 = v7 * dbl_1BE4FB770[*(char *)(a2 + *(int *)(result + 20))] + 0.0;
  }
  *(double *)a3 = v4;
  *(_BYTE *)(a3 + 8) = v5 != 0;
  return result;
}

uint64_t closure #4 in InkFunction.objc(property:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1 / 3;
  if (*(_QWORD *)a1 == 3 * v5)
  {
    result = MEMORY[0x1E0DEE9D8];
    goto LABEL_8;
  }
  v8 = *(double *)(a1 + 8);
  v7 = *(double *)(a1 + 16);
  result = type metadata accessor for InkFunction();
  if (v4 < -2)
  {
    __break(1u);
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(a2 + *(int *)(result + 32));
  v11 = *(_QWORD *)(v10 + 16);
  if (3 * v5 >= v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = 3 * (v5 + 1);
  if ((unsigned __int128)((v5 + 1) * (__int128)3) >> 64 != v12 >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 < v11)
  {
    v13 = v10 + 32;
    v14 = (double *)(v13 + 48 * v5);
    v15 = *v14;
    v16 = v14[1];
    v17 = (double *)(v13 + 48 * (v5 + 1));
    v18 = *v17;
    v19 = v17[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1BE4FB870;
    *(double *)(result + 32) = (v8 - v15) / (v18 - v15);
    *(double *)(result + 40) = (v7 - v16) / (v19 - v16);
LABEL_8:
    *a3 = result;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

char *specialized Sequence.flatMap<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *result;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v17 = *(_QWORD *)(a3 + 16);
  if (!v17)
    return (char *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v19 = v5;
    v20 = *(_OWORD *)(a3 + 16 * v5 + 32);
    result = (char *)a1(&v21, &v19);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    v8 = v21;
    v9 = *(_QWORD *)(v21 + 16);
    v10 = *((_QWORD *)v6 + 2);
    v11 = v10 + v9;
    if (__OFADD__(v10, v9))
      break;
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v11 <= *((_QWORD *)v6 + 3) >> 1)
    {
      if (*(_QWORD *)(v8 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v10 <= v11)
        v12 = v10 + v9;
      else
        v12 = v10;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v12, 1, v6);
      v6 = result;
      if (*(_QWORD *)(v8 + 16))
      {
LABEL_15:
        v13 = *((_QWORD *)v6 + 2);
        if ((*((_QWORD *)v6 + 3) >> 1) - v13 < v9)
          goto LABEL_25;
        result = (char *)memcpy(&v6[8 * v13 + 32], (const void *)(v8 + 32), 8 * v9);
        if (v9)
        {
          v14 = *((_QWORD *)v6 + 2);
          v15 = __OFADD__(v14, v9);
          v16 = v14 + v9;
          if (v15)
            goto LABEL_26;
          *((_QWORD *)v6 + 2) = v16;
        }
        goto LABEL_4;
      }
    }
    if (v9)
      goto LABEL_24;
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v17 == v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id specialized InkDescriptorParticles.objc(textureLoader:)(double *a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v20;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 6);
  v4 = *((unsigned __int8 *)a1 + 89);
  v5 = *((unsigned __int8 *)a1 + 91);
  if (v3)
  {
    v7 = a1[9];
    v6 = a1[10];
    v9 = a1[7];
    v8 = a1[8];
    v10 = (_BYTE)a1[11] & 1;
  }
  else
  {
    v10 = 0;
    v8 = 0.0;
    v9 = 1.0;
    v7 = 0.0;
    v6 = 1.0;
  }
  v11 = *((_QWORD *)a1 + 5);
  v13 = a1[2];
  v12 = a1[3];
  v14 = a1[4];
  v15 = *((_BYTE *)a1 + 90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = (void *)MEMORY[0x1C3B7E3A8](*(_QWORD *)&v1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    v17 = (void *)MEMORY[0x1C3B7E3A8](v11, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  BYTE2(v20) = 0;
  BYTE1(v20) = v10;
  LOBYTE(v20) = v15;
  v18 = objc_msgSend(objc_allocWithZone((Class)PKInkParticleDescriptor), sel_initWithTextureName_textureImage_maskTextureName_maskTextureImage_particleSpacing_particleCount_particleSize_particleRotation_maskScale_maskScaleConstant_maskMovement_maskDepth_initialRandomRotation_maskInitialRandomOffset_adjustEndCapParticleAlpha_particleBlendMode_, v16, 0, v17, 0, 1, v4, v13, v12, v14, v9, v8, v7, v6, v20, v5);

  return v18;
}

id InkDescriptorParticles.objc(textureLoader:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  double *v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  __n128 v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;

  v4 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v9 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  v10 = v1[7];
  v11 = v1[8];
  v12 = v1[9];
  v13 = v1[10];
  v14 = *((_BYTE *)v1 + 88);
  v27 = *((unsigned __int8 *)v1 + 89);
  v15 = *((_BYTE *)v1 + 90);
  v16 = *((unsigned __int8 *)v1 + 91);
  swift_bridgeObjectRetain();
  v17 = (void *)a1(*(_QWORD *)&v4, v3);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v20 = (void *)a1(v9, v8);
  }
  else
  {
    v20 = 0;
  }
  v18.n128_u64[0] = 0;
  v19.n128_u64[0] = 1.0;
  if (v8)
    v21 = v14 & 1;
  else
    v21 = 0;
  if (!v8)
  {
    v10 = 1.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 1.0;
  }
  v22 = (void *)MEMORY[0x1C3B7E3A8](*(_QWORD *)&v4, v3, v18, v19);
  swift_bridgeObjectRelease();
  if (v8)
  {
    v23 = (void *)MEMORY[0x1C3B7E3A8](v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = 0;
  }
  BYTE2(v26) = 0;
  BYTE1(v26) = v21;
  LOBYTE(v26) = v15;
  v24 = objc_msgSend(objc_allocWithZone((Class)PKInkParticleDescriptor), sel_initWithTextureName_textureImage_maskTextureName_maskTextureImage_particleSpacing_particleCount_particleSize_particleRotation_maskScale_maskScaleConstant_maskMovement_maskDepth_initialRandomRotation_maskInitialRandomOffset_adjustEndCapParticleAlpha_particleBlendMode_, v22, v17, v23, v20, 1, v27, v6, v5, v7, v10, v11, v12, v13, v26, v16);

  return v24;
}

id specialized InkDescriptor.objc(variant:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  _OWORD v75[17];

  v48 = a2;
  v53 = a1;
  v54 = &v75[16];
  v4 = type metadata accessor for InkFunction();
  v58 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a3;
  v51 = a3[1];
  v52 = v8;
  v47 = a3 + 4;
  memcpy(v75, a3 + 29, 0x102uLL);
  v49 = a3[62];
  v9 = *((double *)a3 + 63);
  v10 = *(_QWORD *)&v75[0];
  v11 = *(_QWORD *)(*(_QWORD *)&v75[0] + 64);
  v55 = *(_QWORD *)&v75[0] + 64;
  v12 = 1 << *(_BYTE *)(*(_QWORD *)&v75[0] + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  outlined retain of InkBehavior((uint64_t)v75);
  result = (id)outlined retain of InkBehavior((uint64_t)v75);
  v16 = 0;
  v56 = (unint64_t)(v12 + 63) >> 6;
  v17 = MEMORY[0x1E0DEE9D8];
  v50 = v9;
  v57 = v10;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_25;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v21 >= v56)
      goto LABEL_29;
    v22 = *(_QWORD *)(v55 + 8 * v21);
    ++v16;
    if (!v22)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v56)
        goto LABEL_29;
      v22 = *(_QWORD *)(v55 + 8 * v16);
      if (!v22)
      {
        v16 = v21 + 2;
        if (v21 + 2 >= v56)
          goto LABEL_29;
        v22 = *(_QWORD *)(v55 + 8 * v16);
        if (!v22)
        {
          v16 = v21 + 3;
          if (v21 + 3 >= v56)
            goto LABEL_29;
          v22 = *(_QWORD *)(v55 + 8 * v16);
          if (!v22)
          {
            v16 = v21 + 4;
            if (v21 + 4 >= v56)
              goto LABEL_29;
            v22 = *(_QWORD *)(v55 + 8 * v16);
            if (!v22)
              break;
          }
        }
      }
    }
LABEL_24:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_25:
    v24 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v20);
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v59 = v14;
      v60 = v16;
      v61 = v17;
      v26 = *(char *)(*(_QWORD *)(v10 + 48) + v20);
      *(_QWORD *)&v62 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v27 = v24 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
      v28 = *(_QWORD *)(v58 + 72);
      do
      {
        outlined init with copy of InkFunction(v27, (uint64_t)v7);
        InkFunction.objc(property:)(qword_1BE4FB798[v26]);
        outlined destroy of InkFunction((uint64_t)v7);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v27 += v28;
        --v25;
      }
      while (v25);
      v17 = v61;
      v18 = v62;
      v10 = v57;
      v14 = v59;
      v16 = v60;
    }
    else
    {
      v18 = MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)&v62 = v17;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v18);
    result = (id)swift_bridgeObjectRelease();
    v17 = v62;
  }
  v23 = v21 + 5;
  if (v23 < v56)
  {
    v22 = *(_QWORD *)(v55 + 8 * v23);
    v16 = v23;
    if (!v22)
    {
      while (1)
      {
        v16 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_39;
        if (v16 >= v56)
          goto LABEL_29;
        v22 = *(_QWORD *)(v55 + 8 * v16);
        ++v23;
        if (v22)
          goto LABEL_24;
      }
    }
    goto LABEL_24;
  }
LABEL_29:
  swift_release();
  v29 = v47;
  v30 = v48;
  outlined release of InkBehavior((uint64_t)v75);
  v31 = *((_OWORD *)v29 + 11);
  v72 = *((_OWORD *)v29 + 10);
  v73 = v31;
  v74 = *((_DWORD *)v29 + 48);
  v32 = *((_OWORD *)v29 + 7);
  v68 = *((_OWORD *)v29 + 6);
  v69 = v32;
  v33 = *((_OWORD *)v29 + 9);
  v70 = *((_OWORD *)v29 + 8);
  v71 = v33;
  v34 = *((_OWORD *)v29 + 3);
  v64 = *((_OWORD *)v29 + 2);
  v65 = v34;
  v35 = *((_OWORD *)v29 + 5);
  v66 = *((_OWORD *)v29 + 4);
  v67 = v35;
  v36 = *((_OWORD *)v29 + 1);
  v62 = *(_OWORD *)v29;
  v63 = v36;
  v37 = specialized InkRendering.objc(textureLoader:)((unsigned __int8 *)&v62);
  v38 = objc_msgSend(objc_allocWithZone((Class)PKInkSmoothingDescriptor), sel_initWithStylusSmoothing_touch_velocity_angle_radius_, *((double *)v75 + 1), *(double *)&v75[1], *((double *)&v75[1] + 1), *(double *)&v75[2], *((double *)&v75[2] + 1));
  if ((v75[10] & 1) != 0)
  {
    v39 = 0;
    if ((BYTE8(v75[14]) & 1) == 0)
      goto LABEL_31;
LABEL_33:
    v40 = 0;
  }
  else
  {
    v39 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *(double *)&v75[6], *((double *)&v75[6] + 1), *(double *)&v75[7], *((double *)&v75[7] + 1), *(double *)&v75[8], *((double *)&v75[8] + 1), *(double *)&v75[9], *((double *)&v75[9] + 1));
    if ((BYTE8(v75[14]) & 1) != 0)
      goto LABEL_33;
LABEL_31:
    v40 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *((double *)&v75[10] + 1), *(double *)&v75[11], *((double *)&v75[11] + 1), *(double *)&v75[12], *((double *)&v75[12] + 1), *(double *)&v75[13], *((double *)&v75[13] + 1), *(double *)&v75[14]);
  }
  if ((*v54 & 1) != 0)
    v41 = 0;
  else
    v41 = objc_msgSend(objc_allocWithZone((Class)PKInkAnimationDescriptor), sel_initWithDuration_sizeDelta_, *(double *)&v75[15], *((double *)&v75[15] + 1));
  v42 = v50;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkBehavior);
  v62 = v75[3];
  v63 = v75[4];
  v64 = v75[5];
  v43 = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized _arrayForceCast<A, B>(_:)(v49);
  HIBYTE(v45) = v54[1];
  LOBYTE(v45) = 0;
  return PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)(v37, &v62, 1, v38, v39, v40, v41, v52, 1.0, 0.0, 1.0, v42, 0.0, 0.0, v43, 3, v53, v30, v44,
           v45,
           0);
}

id InkDescriptor.objc(variant:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id result;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _QWORD v47[2];
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  _OWORD v88[17];

  v47[0] = a3;
  v47[1] = a4;
  v52 = a2;
  v53 = a1;
  v54 = &v88[16];
  v5 = type metadata accessor for InkFunction();
  v58 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v4;
  v50 = *(_QWORD *)(v4 + 8);
  v51 = v9;
  v10 = *(_OWORD *)(v4 + 208);
  v85 = *(_OWORD *)(v4 + 192);
  v86 = v10;
  v87 = *(_DWORD *)(v4 + 224);
  v11 = *(_OWORD *)(v4 + 144);
  v81 = *(_OWORD *)(v4 + 128);
  v82 = v11;
  v12 = *(_OWORD *)(v4 + 176);
  v83 = *(_OWORD *)(v4 + 160);
  v84 = v12;
  v13 = *(_OWORD *)(v4 + 80);
  v77 = *(_OWORD *)(v4 + 64);
  v78 = v13;
  v14 = *(_OWORD *)(v4 + 112);
  v79 = *(_OWORD *)(v4 + 96);
  v80 = v14;
  v15 = *(_OWORD *)(v4 + 48);
  v75 = *(_OWORD *)(v4 + 32);
  v76 = v15;
  memcpy(v88, (const void *)(v4 + 232), 0x102uLL);
  v48 = *(_QWORD *)(v4 + 496);
  v16 = *(double *)(v4 + 504);
  v17 = *(_QWORD *)&v88[0];
  v18 = *(_QWORD *)(*(_QWORD *)&v88[0] + 64);
  v55 = *(_QWORD *)&v88[0] + 64;
  v19 = 1 << *(_BYTE *)(*(_QWORD *)&v88[0] + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  outlined retain of InkBehavior((uint64_t)v88);
  result = (id)outlined retain of InkBehavior((uint64_t)v88);
  v23 = 0;
  v56 = (unint64_t)(v19 + 63) >> 6;
  v24 = MEMORY[0x1E0DEE9D8];
  v49 = v16;
  v57 = v17;
  while (1)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v23 << 6);
      goto LABEL_26;
    }
    v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v28 >= v56)
      goto LABEL_30;
    v29 = *(_QWORD *)(v55 + 8 * v28);
    ++v23;
    if (!v29)
    {
      v23 = v28 + 1;
      if (v28 + 1 >= v56)
        goto LABEL_30;
      v29 = *(_QWORD *)(v55 + 8 * v23);
      if (!v29)
      {
        v23 = v28 + 2;
        if (v28 + 2 >= v56)
          goto LABEL_30;
        v29 = *(_QWORD *)(v55 + 8 * v23);
        if (!v29)
        {
          v23 = v28 + 3;
          if (v28 + 3 >= v56)
            goto LABEL_30;
          v29 = *(_QWORD *)(v55 + 8 * v23);
          if (!v29)
          {
            v23 = v28 + 4;
            if (v28 + 4 >= v56)
              goto LABEL_30;
            v29 = *(_QWORD *)(v55 + 8 * v23);
            if (!v29)
              break;
          }
        }
      }
    }
LABEL_25:
    v21 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_26:
    v31 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v27);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v59 = v21;
      v60 = v23;
      v61 = v24;
      v33 = *(char *)(*(_QWORD *)(v17 + 48) + v27);
      *(_QWORD *)&v62 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v34 = v31 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
      v35 = *(_QWORD *)(v58 + 72);
      do
      {
        outlined init with copy of InkFunction(v34, (uint64_t)v8);
        InkFunction.objc(property:)(qword_1BE4FB798[v33]);
        outlined destroy of InkFunction((uint64_t)v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v34 += v35;
        --v32;
      }
      while (v32);
      v24 = v61;
      v25 = v62;
      v17 = v57;
      v21 = v59;
      v23 = v60;
    }
    else
    {
      v25 = MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)&v62 = v24;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v25);
    result = (id)swift_bridgeObjectRelease();
    v24 = v62;
  }
  v30 = v28 + 5;
  if (v30 < v56)
  {
    v29 = *(_QWORD *)(v55 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        v23 = v30 + 1;
        if (__OFADD__(v30, 1))
          goto LABEL_40;
        if (v23 >= v56)
          goto LABEL_30;
        v29 = *(_QWORD *)(v55 + 8 * v23);
        ++v30;
        if (v29)
          goto LABEL_25;
      }
    }
    v23 = v30;
    goto LABEL_25;
  }
LABEL_30:
  swift_release();
  v36 = (uint64_t (*)(uint64_t, uint64_t))v47[0];
  outlined release of InkBehavior((uint64_t)v88);
  v72 = v85;
  v73 = v86;
  v74 = v87;
  v68 = v81;
  v69 = v82;
  v70 = v83;
  v71 = v84;
  v64 = v77;
  v65 = v78;
  v66 = v79;
  v67 = v80;
  v62 = v75;
  v63 = v76;
  outlined retain of InkRendering((uint64_t)&v75, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined copy of InkDescriptorParticles?);
  v37 = InkRendering.objc(textureLoader:)(v36);
  outlined retain of InkRendering((uint64_t)&v75, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))outlined consume of InkDescriptorParticles?);
  v38 = objc_msgSend(objc_allocWithZone((Class)PKInkSmoothingDescriptor), sel_initWithStylusSmoothing_touch_velocity_angle_radius_, *((double *)v88 + 1), *(double *)&v88[1], *((double *)&v88[1] + 1), *(double *)&v88[2], *((double *)&v88[2] + 1));
  if ((v88[10] & 1) != 0)
  {
    v39 = 0;
    if ((BYTE8(v88[14]) & 1) == 0)
      goto LABEL_32;
LABEL_34:
    v40 = 0;
  }
  else
  {
    v39 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *(double *)&v88[6], *((double *)&v88[6] + 1), *(double *)&v88[7], *((double *)&v88[7] + 1), *(double *)&v88[8], *((double *)&v88[8] + 1), *(double *)&v88[9], *((double *)&v88[9] + 1));
    if ((BYTE8(v88[14]) & 1) != 0)
      goto LABEL_34;
LABEL_32:
    v40 = objc_msgSend(objc_allocWithZone((Class)PKInkFeatheringDescriptor), sel_initWithStartCapTime_startCapDistance_startCapFade_startCapShrink_endCapTime_endCapDistance_endCapFade_endCapShrink_, *((double *)&v88[10] + 1), *(double *)&v88[11], *((double *)&v88[11] + 1), *(double *)&v88[12], *((double *)&v88[12] + 1), *(double *)&v88[13], *((double *)&v88[13] + 1), *(double *)&v88[14]);
  }
  if ((*v54 & 1) != 0)
    v41 = 0;
  else
    v41 = objc_msgSend(objc_allocWithZone((Class)PKInkAnimationDescriptor), sel_initWithDuration_sizeDelta_, *(double *)&v88[15], *((double *)&v88[15] + 1));
  v42 = v49;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkBehavior);
  v62 = v88[3];
  v63 = v88[4];
  v64 = v88[5];
  v43 = v50;
  swift_bridgeObjectRetain();
  v44 = v52;
  swift_bridgeObjectRetain();
  v45 = specialized _arrayForceCast<A, B>(_:)(v48);
  HIBYTE(v46) = v54[1];
  LOBYTE(v46) = 0;
  return PKInkBehavior.__allocating_init(renderingDescriptor:blendAlpha:targetMultiple:baseAlpha:inkTransform:useUnclampedWeight:smoothingDescriptor:featheringDescriptor:pencilFeatheringDescriptor:animationDescriptor:identifier:version:variant:uiWidths:defaultWidth:showBrushIndicator:supportsCombiningStrokes:rulerOffsetScale:rulerOffsetConstant:weightFunction:inkFunctions:)(v37, &v62, 1, v38, v39, v40, v41, v51, 1.0, 0.0, 1.0, v42, 0.0, 0.0, v43, 3, v53, v44, v45,
           v46,
           0);
}

id specialized InkRendering.objc(textureLoader:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  char v31;
  char v32;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 13);
  v4 = *((_QWORD *)a1 + 14);
  v5 = *(_OWORD *)(a1 + 120);
  v6 = *((_QWORD *)a1 + 17);
  v7 = *((_OWORD *)a1 + 9);
  v8 = *((_OWORD *)a1 + 10);
  v9 = *((_OWORD *)a1 + 11);
  v10 = *((_DWORD *)a1 + 48);
  if (!v2)
  {
    v15 = 0;
    if (v4)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }
  v11 = *((_DWORD *)a1 + 24);
  v21 = *((_OWORD *)a1 + 9);
  v22 = *(_OWORD *)(a1 + 120);
  v12 = *((_QWORD *)a1 + 5);
  v23 = *((_QWORD *)a1 + 1);
  v24 = v2;
  v25 = *(_OWORD *)(a1 + 24);
  v26 = v12;
  v13 = *((_OWORD *)a1 + 4);
  v27 = *((_OWORD *)a1 + 3);
  v28 = v13;
  v29 = *((_OWORD *)a1 + 5);
  v30 = v11;
  v31 = BYTE2(v11) & 1;
  v32 = HIBYTE(v11) & 1;
  v19 = v9;
  v20 = v8;
  v14 = specialized InkDescriptorParticles.objc(textureLoader:)((double *)&v23);
  v9 = v19;
  v8 = v20;
  v7 = v21;
  v5 = v22;
  v15 = v14;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v10;
  v31 = BYTE2(v10) & 1;
  v32 = HIBYTE(v10) & 1;
  v16 = specialized InkDescriptorParticles.objc(textureLoader:)((double *)&v23);
LABEL_6:
  v17 = objc_msgSend(objc_allocWithZone((Class)PKInkRenderingDescriptor), sel_initWithType_blendMode_alternateMode_particleDescriptor_secondaryParticleDescriptor_, v2 != 0, v1, 0, v15, v16);

  return v17;
}

id InkRendering.objc(textureLoader:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = *(unsigned __int8 *)v1;
  v2 = v1[2];
  v3 = v1[14];
  v12 = v2;
  v14 = v1[13];
  if (!v2)
  {
    v6 = 0;
    if (v3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v10 = v1[14];
  v5 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = InkDescriptorParticles.objc(textureLoader:)(a1);
  v3 = v10;
  outlined consume of InkDescriptorParticles?(v5, v2);
  if (!v10)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = InkDescriptorParticles.objc(textureLoader:)(a1);
  outlined consume of InkDescriptorParticles?(v14, v3);
LABEL_6:
  v8 = objc_msgSend(objc_allocWithZone((Class)PKInkRenderingDescriptor), sel_initWithType_blendMode_alternateMode_particleDescriptor_secondaryParticleDescriptor_, v12 != 0, v13, 0, v6, v7);

  return v8;
}

id InkDescriptor.ink(color:width:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v6 = InkDescriptor.objc(variant:textureLoader:)(0x746C7561666564, 0xE700000000000000, a2, a3);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, a1);
  v8 = objc_allocWithZone((Class)PKInk);
  v9 = (void *)MEMORY[0x1C3B7E3A8](0x746C7561666564, 0xE700000000000000);
  v10 = objc_msgSend(v8, sel_initWithBehavior_color_version_variant_weight_, v6, v7, 3, v9, a4);

  return v10;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in InkDescriptor()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InkDescriptorParticles.ParticleRotation()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type [InkDescriptorParticles.ParticleRotation] and conformance [A], &demangling cache variable for type metadata for [InkDescriptorParticles.ParticleRotation], MEMORY[0x1E0DEAF50]);
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InkFunction.Input()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type [InkFunction.Input] and conformance [A], &demangling cache variable for type metadata for [InkFunction.Input], MEMORY[0x1E0DEAF50]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in InkFunction()
{
  return lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

double sub_1BE250598@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_1BE2505A4(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

uint64_t destroy for InkDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 144))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v6)
  {
    v12 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v12;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
    v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    v9 = *(_QWORD *)(a2 + 144);
    if (v9)
      goto LABEL_3;
LABEL_5:
    v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v14;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
    v15 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v15;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_QWORD *)(a2 + 144);
  if (!v9)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v10 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v10;
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_6:
  v17 = *(_QWORD *)(a2 + 232);
  v16 = a2 + 232;
  *(_QWORD *)(a1 + 232) = v17;
  v18 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(a1 + 256) = v18;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(v16 + 40);
  v19 = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a1 + 296) = v19;
  v20 = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(a1 + 328) = v20;
  v21 = *(_OWORD *)(v16 + 112);
  v22 = *(_OWORD *)(v16 + 128);
  v23 = *(_OWORD *)(v16 + 144);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(v16 + 160);
  *(_OWORD *)(a1 + 360) = v22;
  *(_OWORD *)(a1 + 376) = v23;
  *(_OWORD *)(a1 + 344) = v21;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(v16 + 232);
  v24 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(v16 + 200);
  *(_OWORD *)(a1 + 448) = v24;
  v25 = *(_OWORD *)(v16 + 184);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v16 + 168);
  *(_OWORD *)(a1 + 416) = v25;
  v26 = *(_OWORD *)(v16 + 240);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(v16 + 256);
  *(_OWORD *)(a1 + 472) = v26;
  *(_BYTE *)(a1 + 489) = *(_BYTE *)(v16 + 257);
  v27 = *(_QWORD *)(v16 + 272);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(v16 + 264);
  *(_QWORD *)(a1 + 504) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkDescriptor(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
      *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 40);
      v7 = *(_OWORD *)(a2 + 56);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v7;
      v9 = *(_OWORD *)(a2 + 88);
      v8 = *(_OWORD *)(a2 + 104);
      v10 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
      *(_OWORD *)(a1 + 88) = v9;
      *(_OWORD *)(a1 + 104) = v8;
      *(_OWORD *)(a1 + 72) = v10;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
    *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v11;
    v12 = *(_OWORD *)(a2 + 72);
    v13 = *(_OWORD *)(a2 + 88);
    v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 72) = v12;
  }
  v15 = (_OWORD *)(a1 + 136);
  v16 = (_OWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v17)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
      *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
      *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 136);
      v18 = *(_OWORD *)(a2 + 152);
      *v15 = *v16;
      *(_OWORD *)(a1 + 152) = v18;
      v20 = *(_OWORD *)(a2 + 184);
      v19 = *(_OWORD *)(a2 + 200);
      v21 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
      *(_OWORD *)(a1 + 184) = v20;
      *(_OWORD *)(a1 + 200) = v19;
      *(_OWORD *)(a1 + 168) = v21;
    }
  }
  else if (v17)
  {
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
    *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
    *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 152);
    *v15 = *v16;
    *(_OWORD *)(a1 + 152) = v22;
    v23 = *(_OWORD *)(a2 + 168);
    v24 = *(_OWORD *)(a2 + 184);
    v25 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 184) = v24;
    *(_OWORD *)(a1 + 200) = v25;
    *(_OWORD *)(a1 + 168) = v23;
  }
  v27 = *(_QWORD *)(a2 + 232);
  v26 = a2 + 232;
  *(_QWORD *)(a1 + 232) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(v26 + 48);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(v26 + 72);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(v26 + 88);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v26 + 96);
  v28 = *(_OWORD *)(v26 + 112);
  v29 = *(_OWORD *)(v26 + 128);
  v30 = *(_OWORD *)(v26 + 144);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(v26 + 160);
  *(_OWORD *)(a1 + 360) = v29;
  *(_OWORD *)(a1 + 376) = v30;
  *(_OWORD *)(a1 + 344) = v28;
  v31 = *(_OWORD *)(v26 + 200);
  v32 = *(_OWORD *)(v26 + 216);
  v33 = *(_OWORD *)(v26 + 184);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(v26 + 232);
  *(_OWORD *)(a1 + 432) = v31;
  *(_OWORD *)(a1 + 448) = v32;
  *(_OWORD *)(a1 + 416) = v33;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v26 + 168);
  v34 = *(_OWORD *)(v26 + 240);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(v26 + 256);
  *(_OWORD *)(a1 + 472) = v34;
  *(_BYTE *)(a1 + 489) = *(_BYTE *)(v26 + 257);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(v26 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(v26 + 272);
  return a1;
}

uint64_t outlined destroy of InkDescriptorParticles(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy512_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x200uLL);
}

uint64_t assignWithTake for InkDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v7 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v8;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
      *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
      goto LABEL_6;
    }
    outlined destroy of InkDescriptorParticles(a1 + 40);
  }
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  if (!*(_QWORD *)(a1 + 144))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v14;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
    v15 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v15;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 144);
  if (!v11)
  {
    outlined destroy of InkDescriptorParticles(a1 + 136);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
LABEL_11:
  v17 = *(_QWORD *)(a2 + 232);
  v16 = a2 + 232;
  *(_QWORD *)(a1 + 232) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(a1 + 256) = v18;
  v19 = *(_OWORD *)(v16 + 56);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(v16 + 40);
  *(_OWORD *)(a1 + 288) = v19;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(v16 + 72);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(v16 + 88);
  v20 = *(_OWORD *)(v16 + 144);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(v16 + 128);
  *(_OWORD *)(a1 + 376) = v20;
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(v16 + 160);
  v21 = *(_OWORD *)(v16 + 112);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v16 + 96);
  *(_OWORD *)(a1 + 344) = v21;
  v22 = *(_OWORD *)(v16 + 184);
  v23 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(v16 + 200);
  *(_OWORD *)(a1 + 448) = v23;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(v16 + 232);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v16 + 168);
  *(_OWORD *)(a1 + 416) = v22;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(v16 + 240);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(v16 + 256);
  *(_BYTE *)(a1 + 489) = *(_BYTE *)(v16 + 257);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(v16 + 264);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(v16 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 512))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 512) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 512) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkDescriptor()
{
  return &type metadata for InkDescriptor;
}

uint64_t destroy for InkRendering(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = *(_QWORD *)(a1 + 112);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for InkRendering(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
  {
    v11 = *(_OWORD *)(a2 + 56);
    v4[2] = *(_OWORD *)(a2 + 40);
    v4[3] = v11;
    v4[4] = *(_OWORD *)(a2 + 72);
    *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)(a2 + 84);
    v12 = *(_OWORD *)(a2 + 24);
    *v4 = *(_OWORD *)(a2 + 8);
    v4[1] = v12;
    v8 = *(_QWORD *)(a2 + 112);
    if (v8)
      goto LABEL_3;
LABEL_5:
    v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v13;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
    v14 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v14;
    return a1;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(a2 + 112);
  if (!v8)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkRendering(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
      *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
      *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 8);
      v7 = v5[1];
      *v4 = *v5;
      v4[1] = v7;
      v9 = v5[3];
      v8 = v5[4];
      v10 = v5[2];
      *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v5 + 76);
      v4[3] = v9;
      v4[4] = v8;
      v4[2] = v10;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
    *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
    *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 24);
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v11;
    v12 = *(_OWORD *)(a2 + 40);
    v13 = *(_OWORD *)(a2 + 56);
    v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 56) = v13;
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 40) = v12;
  }
  v15 = (_OWORD *)(a1 + 104);
  v16 = (_OWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v17)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
      *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
      *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
    }
    else
    {
      outlined destroy of InkDescriptorParticles(a1 + 104);
      v18 = *(_OWORD *)(a2 + 120);
      *v15 = *v16;
      *(_OWORD *)(a1 + 120) = v18;
      v20 = *(_OWORD *)(a2 + 152);
      v19 = *(_OWORD *)(a2 + 168);
      v21 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
      *(_OWORD *)(a1 + 152) = v20;
      *(_OWORD *)(a1 + 168) = v19;
      *(_OWORD *)(a1 + 136) = v21;
    }
  }
  else if (v17)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
    *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
    *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 120);
    *v15 = *v16;
    *(_OWORD *)(a1 + 120) = v22;
    v23 = *(_OWORD *)(a2 + 136);
    v24 = *(_OWORD *)(a2 + 152);
    v25 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
    *(_OWORD *)(a1 + 152) = v24;
    *(_OWORD *)(a1 + 168) = v25;
    *(_OWORD *)(a1 + 136) = v23;
  }
  return a1;
}

__n128 __swift_memcpy196_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for InkRendering(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
      *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
      *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
      goto LABEL_6;
    }
    outlined destroy of InkDescriptorParticles((uint64_t)v4);
  }
  v9 = v5[3];
  v4[2] = v5[2];
  v4[3] = v9;
  v4[4] = v5[4];
  *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v5 + 76);
  v10 = v5[1];
  *v4 = *v5;
  v4[1] = v10;
LABEL_6:
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
    v15 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v15;
    return a1;
  }
  v11 = *(_QWORD *)(a2 + 112);
  if (!v11)
  {
    outlined destroy of InkDescriptorParticles(a1 + 104);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkRendering(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 196))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InkRendering(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 192) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 196) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 196) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkRendering()
{
  return &type metadata for InkRendering;
}

_BYTE *destructiveInjectEnumTag for InkRendering.BlendMode(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InkRendering.BlendMode()
{
  return &type metadata for InkRendering.BlendMode;
}

uint64_t destroy for InkDescriptorParticles()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkDescriptorParticles(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkDescriptorParticles(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  return a1;
}

__n128 __swift_memcpy92_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for InkDescriptorParticles(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkDescriptorParticles(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 92))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkDescriptorParticles(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 92) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 92) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkDescriptorParticles()
{
  return &type metadata for InkDescriptorParticles;
}

ValueMetadata *type metadata accessor for InkDescriptorParticles.ParticleRotation()
{
  return &type metadata for InkDescriptorParticles.ParticleRotation;
}

ValueMetadata *type metadata accessor for InkDescriptorParticles.ParticleBlendMode()
{
  return &type metadata for InkDescriptorParticles.ParticleBlendMode;
}

uint64_t dispatch thunk of DecodableDefaultValue.init(defaultState:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata instantiation function for DecodableDefault()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for DecodableDefault()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DecodableDefault(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for DecodableDefault(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodableDefault(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BE251CD0 + 4 * byte_1BE4F9E25[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for DecodableDefault(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for DecodableDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DecodableDefault);
}

uint64_t destroy for InkMask()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkMask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkMask(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InkMask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkMask(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkMask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkMask()
{
  return &type metadata for InkMask;
}

_QWORD *initializeBufferWithCopyOfBuffer for InkFunction(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    v11[16] = v12[16];
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for InkFunction(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v13;
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for InkFunction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkFunction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE252434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for InkFunction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE2524BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for InkFunction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkFunction.Input()
{
  return &type metadata for InkFunction.Input;
}

ValueMetadata *type metadata accessor for InkFunction.InputProperties()
{
  return &type metadata for InkFunction.InputProperties;
}

uint64_t destroy for InkBehavior()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InkBehavior(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v8 = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v8;
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InkBehavior(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 112) = v4;
  v7 = *(_OWORD *)(a2 + 200);
  v8 = *(_OWORD *)(a2 + 216);
  v9 = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 216) = v8;
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v10;
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  return a1;
}

void *__swift_memcpy258_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t assignWithTake for InkBehavior(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  return a1;
}

uint64_t getEnumTagSinglePayload for InkBehavior(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 258))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InkBehavior(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 256) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 258) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 258) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InkBehavior()
{
  return &type metadata for InkBehavior;
}

ValueMetadata *type metadata accessor for InkBehavior.InkProperty()
{
  return &type metadata for InkBehavior.InkProperty;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for InkSmoothing(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InkSmoothing(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InkSmoothing()
{
  return &type metadata for InkSmoothing;
}

ValueMetadata *type metadata accessor for InkAnimationDescriptor()
{
  return &type metadata for InkAnimationDescriptor;
}

uint64_t getEnumTagSinglePayload for InkFeathering(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InkFeathering(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InkFeathering()
{
  return &type metadata for InkFeathering;
}

ValueMetadata *type metadata accessor for InkFeathering.EndCap()
{
  return &type metadata for InkFeathering.EndCap;
}

void *type metadata accessor for InkFeathering.CodingKeys()
{
  return &unk_1E77722E0;
}

uint64_t getEnumTagSinglePayload for InkRendering.BlendMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InkRendering.BlendMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BE252BD8 + 4 * byte_1BE4F9E38[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BE252C0C + 4 * byte_1BE4F9E33[v4]))();
}

uint64_t sub_1BE252C0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252C14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE252C1CLL);
  return result;
}

uint64_t sub_1BE252C28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE252C30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BE252C34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252C3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InkAnimationDescriptor.CodingKeys()
{
  return &unk_1E77727C8;
}

void *type metadata accessor for InkSmoothing.CodingKeys()
{
  return &unk_1E7771C00;
}

void *type metadata accessor for InkBehavior.CodingKeys()
{
  return &unk_1E77715B8;
}

uint64_t getEnumTagSinglePayload for InkFunction.Input(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InkFunction.Input(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BE252D5C + 4 * byte_1BE4F9E42[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BE252D90 + 4 * byte_1BE4F9E3D[v4]))();
}

uint64_t sub_1BE252D90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252D98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE252DA0);
  return result;
}

uint64_t sub_1BE252DAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE252DB4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BE252DB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252DC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InkFunction.CodingKeys()
{
  return &type metadata for InkFunction.CodingKeys;
}

void *type metadata accessor for InkMask.CodingKeys()
{
  return &unk_1E7772C50;
}

uint64_t storeEnumTagSinglePayload for InkBehavior.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BE252E40 + 4 * byte_1BE4F9E4C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BE252E74 + 4 * byte_1BE4F9E47[v4]))();
}

uint64_t sub_1BE252E74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252E7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE252E84);
  return result;
}

uint64_t sub_1BE252E90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE252E98);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BE252E9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252EA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InkDescriptorParticles.CodingKeys()
{
  return &unk_1E77728D8;
}

uint64_t storeEnumTagSinglePayload for InkDescriptorParticles.ParticleRotation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BE252F0C + 4 * byte_1BE4F9E56[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BE252F40 + 4 * byte_1BE4F9E51[v4]))();
}

uint64_t sub_1BE252F40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252F48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE252F50);
  return result;
}

uint64_t sub_1BE252F5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE252F64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BE252F68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE252F70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InkRendering.CodingKeys()
{
  return &unk_1E7771A08;
}

uint64_t getEnumTagSinglePayload for InkMask.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InkMask.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BE253068 + 4 * byte_1BE4F9E60[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BE25309C + 4 * byte_1BE4F9E5B[v4]))();
}

uint64_t sub_1BE25309C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE2530A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE2530ACLL);
  return result;
}

uint64_t sub_1BE2530B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE2530C0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BE2530C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE2530CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InkDescriptor.CodingKeys()
{
  return &unk_1E77721C0;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[(CGFloat, Int)]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(CGFloat, Int)]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKLongPressGestureRecognizer.PressStartLocation>);
  v10 = *(_QWORD *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for PKLongPressGestureRecognizer.PressStartLocation() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1C3B7E5A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *);
  id *v11;
  id v12;
  void (*v13[4])(id *);

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type [PKInkFunction] and conformance [A], &demangling cache variable for type metadata for [PKInkFunction], MEMORY[0x1E0DEAF50]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKInkFunction]);
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            ((void (*)(void (**)(id *), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkFunction);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*specialized Slice.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5))()
{
  id v6;
  uint64_t (*result)();

  if (a2 < a3 || a2 >= a4)
  {
    __break(1u);
  }
  else
  {
    v6 = objc_msgSend(a5, sel_objectAtIndexedSubscript_, a2);
    if (v6)
    {
      *a1 = v6;
      return Slice.subscript.readspecialized ;
    }
  }
  result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Slice._copyContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  if (!a2)
    goto LABEL_5;
  v10 = a3;
  if (!a3)
  {
LABEL_6:
    v11 = a4;
LABEL_7:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = v11;
    return v10;
  }
  if (a3 < 0)
  {
LABEL_20:
    __break(1u);
  }
  else
  {
    if (a5 == a4)
    {
LABEL_5:
      v10 = 0;
      goto LABEL_6;
    }
    v19 = a5 - a4;
    if (a5 <= a4)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      v11 = a5;
      v10 = v19;
      goto LABEL_7;
    }
    v13 = a2;
    v14 = a3 - 1;
    v11 = a4 + 1;
    while (1)
    {
      v15 = objc_msgSend(a6, sel_objectAtIndexedSubscript_, v11 - 1);
      if (!v15)
        break;
      v16 = v15;
      v17 = objc_msgSend(a6, sel_count);
      if (a4 < 0 || v11 - 1 >= (uint64_t)v17)
      {
        __break(1u);
        goto LABEL_20;
      }
      *v13 = v16;
      if (!v14)
        goto LABEL_7;
      if (a5 == v11)
        goto LABEL_18;
      if (v11 >= a4)
      {
        ++v13;
        --v14;
        if (v11++ < a5)
          continue;
      }
      goto LABEL_17;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized InkDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E697265646E6572 && a2 == 0xE900000000000067
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7368746469576975 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x57746C7561666564 && a2 == 0xEC00000068746469)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized InkRendering.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646F4D646E656C62 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C636974726170 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BE4FFCA0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized InkDescriptorParticles.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4E65727574786574 && a2 == 0xEB00000000656D61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6963617073 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1802723693 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BE4FFCC0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BE4FFCE0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

double specialized InkFeathering.EndCap.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  uint64_t v10;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InkFeathering.EndCap.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v8 = v7;
  HIBYTE(v10) = 1;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIBYTE(v10) = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIBYTE(v10) = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t specialized InkMask.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4E65727574786574 && a2 == 0xEB00000000656D61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F43656C616373 && a2 == 0xED0000746E617473
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E656D65766F6DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6874706564 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BE4FFD00)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t specialized InkFunction.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InkFunction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t specialized InkBehavior.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x6E6F6974636E7566 && a2 == 0xE900000000000073
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6968746F6F6D73 && a2 == 0xE900000000000067
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736E6172546B6E69 && a2 == 0xEC0000006D726F66
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6972656874616566 && a2 == 0xEA0000000000676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BE4FFD20
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BE4FFD40
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001BE4FFD60)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized InkSmoothing.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73756C797473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6863756F74 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized InkAnimationDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746C6544657A6973 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized InkFeathering.EndCap.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x447974696361706FLL && a2 == 0xEC00000061746C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6544737569646172 && a2 == 0xEB0000000061746CLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized InkFeathering.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7061437472617473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x706143646E65 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.EndCap.CodingKeys, &unk_1E7772370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.EndCap.CodingKeys, &unk_1E7772370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.EndCap.CodingKeys, &unk_1E7772370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys;
  if (!lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkFeathering.EndCap.CodingKeys, &unk_1E7772370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkFeathering.EndCap.CodingKeys and conformance InkFeathering.EndCap.CodingKeys);
  }
  return result;
}

id specialized static PKInkBehavior.loadInkV2(url:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  id v4;
  uint64_t v5[64];
  _QWORD __dst[65];
  _QWORD __src[64];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  v0 = Data.init(contentsOf:options:)();
  v2 = v1;
  lazy protocol witness table accessor for type InkDescriptor and conformance InkDescriptor();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v0, v2);
  memcpy(__dst, __src, 0x200uLL);
  memcpy(v5, __src, sizeof(v5));
  v4 = specialized InkDescriptor.objc(variant:textureLoader:)(0x746C7561666564, 0xE700000000000000, v5);
  swift_release();
  outlined release of InkDescriptor(__dst);
  return v4;
}

unint64_t lazy protocol witness table accessor for type InkDescriptor and conformance InkDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InkDescriptor and conformance InkDescriptor;
  if (!lazy protocol witness table cache variable for type InkDescriptor and conformance InkDescriptor)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for InkDescriptor, &type metadata for InkDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InkDescriptor and conformance InkDescriptor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3B801E4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in InkFunction.objc(property:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v4 = 0.0;
  v5 = *(_QWORD *)result % 3;
  if (!v5)
  {
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(double *)(result + 16);
    result = type metadata accessor for InkFunction();
    v4 = *(double *)(v6 + *(int *)(result + 24))
       + v7 * (*(double *)(v6 + *(int *)(result + 24) + 8) - *(double *)(v6 + *(int *)(result + 24)));
  }
  *(double *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5 != 0;
  return result;
}

uint64_t partial apply for closure #3 in InkFunction.objc(property:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #3 in InkFunction.objc(property:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #4 in InkFunction.objc(property:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #4 in InkFunction.objc(property:)(a1, *(_QWORD *)(v2 + 16), a2);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1C3B80190](a1, v6, a5);
}

uint64_t getEnumTagSinglePayload for InkFeathering.EndCap.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InkFeathering.EndCap.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BE256498 + 4 * byte_1BE4F9E6A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BE2564CC + 4 * byte_1BE4F9E65[v4]))();
}

uint64_t sub_1BE2564CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE2564D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE2564DCLL);
  return result;
}

uint64_t sub_1BE2564E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE2564F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BE2564F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE2564FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InkFeathering.EndCap.CodingKeys()
{
  return &unk_1E7772370;
}

uint64_t PKToolPicker.selectedTool.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;
  ValueMetadata *v5;
  _UNKNOWN **v6;

  v3 = objc_msgSend(v1, sel_selectedTool);
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &type metadata for PKInkingTool;
    v6 = &protocol witness table for PKInkingTool;
LABEL_11:
    a1[3] = (uint64_t)v5;
    a1[4] = (uint64_t)v6;
    *a1 = result;
    return result;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &type metadata for PKEraserTool;
    v6 = &protocol witness table for PKEraserTool;
    goto LABEL_11;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &type metadata for PKLassoTool;
    v6 = &protocol witness table for PKLassoTool;
    goto LABEL_11;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &type metadata for PKRulerTool;
    v6 = &protocol witness table for PKRulerTool;
    goto LABEL_11;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &type metadata for PKHandwritingTool;
    v6 = &protocol witness table for PKHandwritingTool;
    goto LABEL_11;
  }
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    a1[3] = (uint64_t)&type metadata for PKCustomTool;
    a1[4] = (uint64_t)&protocol witness table for PKCustomTool;
    *a1 = result;
    a1[1] = 0;
  }
  else
  {
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (result)
    {
      v5 = &type metadata for PKGenerationTool;
      v6 = &protocol witness table for PKGenerationTool;
      goto LABEL_11;
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t key path setter for PKToolPicker.selectedTool : PKToolPicker(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  _BYTE v6[40];

  outlined init with copy of Decoder(a1, (uint64_t)v6);
  v3 = *a2;
  v4 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)((uint64_t)v6);
  objc_msgSend(v3, sel_setSelectedTool_, v4);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t PKToolPicker.selectedTool.setter(uint64_t a1)
{
  void *v1;
  void *v3;

  v3 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)(a1);
  objc_msgSend(v1, sel_setSelectedTool_, v3);

  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*PKToolPicker.selectedTool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  PKToolPicker.selectedTool.getter(v3);
  return PKToolPicker.selectedTool.modify;
}

void PKToolPicker.selectedTool.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[10];
    outlined init with copy of Decoder(*a1, (uint64_t)(v2 + 5));
    v4 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)((uint64_t)(v2 + 5));
    objc_msgSend(v3, sel_setSelectedTool_, v4);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 5));
  }
  else
  {
    v5 = (void *)v2[10];
    v6 = (void *)specialized PKToolPicker.toolReferenceFromTool(_:)(*a1);
    objc_msgSend(v5, sel_setSelectedTool_, v6);

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v2);
}

uint64_t PKToolPicker._tools.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel__tools);
  type metadata accessor for PKTool();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = v0;
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6PKToolCG_9PencilKitAF_ps5NeverOTg506_sSo12d8PickerC9eF36E6_toolsSayAC0A0_pGvgAcE_pSoAECXEfU_So0dJ0CTf1cn_nTf4nd_n(v2);
  swift_bridgeObjectRelease();

  return v4;
}

void PKToolPicker._addTool(_:)(uint64_t a1)
{
  PKToolPicker._addTool(_:)(a1, (SEL *)&selRef__addTool_);
}

void PKToolPicker._insertTool(_:atIndex:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  v4 = (id)specialized PKToolPicker.toolReferenceFromTool(_:)(a1);
  objc_msgSend(v2, sel__insertTool_atIndex_, v4, a2);

}

void PKToolPicker._removeTool(_:)(uint64_t a1)
{
  PKToolPicker._addTool(_:)(a1, (SEL *)&selRef__removeTool_);
}

void PKToolPicker._addTool(_:)(uint64_t a1, SEL *a2)
{
  void *v2;
  id v4;

  v4 = (id)specialized PKToolPicker.toolReferenceFromTool(_:)(a1);
  objc_msgSend(v2, *a2, v4);

}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6PKToolCG_9PencilKitAF_ps5NeverOTg506_sSo12d8PickerC9eF36E6_toolsSayAC0A0_pGvgAcE_pSoAECXEfU_So0dJ0CTf1cn_nTf4nd_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  ValueMetadata *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  ValueMetadata *v13;
  _UNKNOWN **v14;
  uint64_t v15;

  if (a1 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v15 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = 0;
    v3 = v15;
    while (1)
    {
      if (v2 == v4)
      {
        __break(1u);
        goto LABEL_31;
      }
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3B7E5A0](v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      objc_opt_self();
      v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        v14 = &protocol witness table for PKInkingTool;
        v7 = &type metadata for PKInkingTool;
      }
      else
      {
        objc_opt_self();
        v6 = swift_dynamicCastObjCClass();
        if (v6)
        {
          v14 = &protocol witness table for PKEraserTool;
          v7 = &type metadata for PKEraserTool;
        }
        else
        {
          objc_opt_self();
          v6 = swift_dynamicCastObjCClass();
          if (v6)
          {
            v14 = &protocol witness table for PKLassoTool;
            v7 = &type metadata for PKLassoTool;
          }
          else
          {
            objc_opt_self();
            v6 = swift_dynamicCastObjCClass();
            if (v6)
            {
              v14 = &protocol witness table for PKRulerTool;
              v7 = &type metadata for PKRulerTool;
            }
            else
            {
              objc_opt_self();
              v6 = swift_dynamicCastObjCClass();
              if (v6)
              {
                v14 = &protocol witness table for PKHandwritingTool;
                v7 = &type metadata for PKHandwritingTool;
              }
              else
              {
                objc_opt_self();
                v10 = swift_dynamicCastObjCClass();
                if (v10)
                {
                  v13 = &type metadata for PKCustomTool;
                  v14 = &protocol witness table for PKCustomTool;
                  v12 = (unint64_t)v10;
                  goto LABEL_21;
                }
                objc_opt_self();
                v6 = swift_dynamicCastObjCClass();
                if (!v6)
                  goto LABEL_33;
                v14 = &protocol witness table for PKGenerationTool;
                v7 = &type metadata for PKGenerationTool;
              }
            }
          }
        }
      }
      v13 = v7;
      *(_QWORD *)&v12 = v6;
LABEL_21:
      v15 = v3;
      v9 = *(_QWORD *)(v3 + 16);
      v8 = *(_QWORD *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1);
        v3 = v15;
      }
      ++v4;
      *(_QWORD *)(v3 + 16) = v9 + 1;
      outlined init with take of PKTool(&v12, v3 + 40 * v9 + 32);
      if (v2 == v4)
        return v3;
    }
  }
  __break(1u);
LABEL_33:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PKToolPicker.toolReferenceFromTool(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  _BYTE v6[40];

  outlined init with copy of Decoder(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKTool);
  if (swift_dynamicCast())
    return v4;
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
    return v4;
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
    return v4;
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
    return v4;
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
    return v4;
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
  {
    v2 = v4;

    return v2;
  }
  outlined init with copy of Decoder(a1, (uint64_t)v6);
  if (swift_dynamicCast())
    return v4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for PKTool()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PKTool;
  if (!lazy cache variable for type metadata for PKTool)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKTool);
  }
  return result;
}

uint64_t sub_1BE256FD4@<X0>(uint64_t *a1@<X8>)
{
  return PKToolPicker.selectedTool.getter(a1);
}

uint64_t outlined init with take of PKTool(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void __swiftcall PKRulerTool.init()(PencilKit::PKRulerTool *__return_ptr retstr)
{
  retstr->tool.super.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKRulerTool), sel_init);
}

uint64_t static PKRulerTool.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

ValueMetadata *type metadata accessor for PKRulerTool()
{
  return &type metadata for PKRulerTool;
}

uint64_t PKCanvasView.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;
  _UNKNOWN **v5;
  ValueMetadata *v6;
  id v7;
  id v8;

  v3 = objc_msgSend(v1, sel_tool);
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &protocol witness table for PKInkingTool;
    v6 = &type metadata for PKInkingTool;
LABEL_7:
    a1[3] = (uint64_t)v6;
    a1[4] = (uint64_t)v5;
    *a1 = result;
    return result;
  }

  v7 = objc_msgSend(v1, sel_tool);
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &protocol witness table for PKEraserTool;
    v6 = &type metadata for PKEraserTool;
    goto LABEL_7;
  }

  v8 = objc_msgSend(v1, sel_tool);
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v5 = &protocol witness table for PKLassoTool;
    v6 = &type metadata for PKLassoTool;
    goto LABEL_7;
  }

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PKCanvasView.tool.setter(uint64_t a1)
{
  void *v1;
  uint64_t result;
  void *v4;
  _BYTE v5[40];

  outlined init with copy of Decoder(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKTool);
  if (swift_dynamicCast()
    || (outlined init with copy of Decoder(a1, (uint64_t)v5), swift_dynamicCast())
    || (outlined init with copy of Decoder(a1, (uint64_t)v5), swift_dynamicCast()))
  {
    objc_msgSend(v1, sel_setTool_, v4);

    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void (*PKCanvasView.tool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  PKCanvasView.tool.getter(v3);
  return PKCanvasView.tool.modify;
}

void PKCanvasView.tool.modify(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of Decoder(*a1, (uint64_t)v2 + 40);
    PKCanvasView.tool.setter((uint64_t)v2 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    PKCanvasView.tool.setter(*a1);
  }
  free(v2);
}

uint64_t sub_1BE2573D4@<X0>(uint64_t *a1@<X8>)
{
  return PKCanvasView.tool.getter(a1);
}

uint64_t sub_1BE2573F4(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of Decoder(a1, (uint64_t)v2);
  return PKCanvasView.tool.setter((uint64_t)v2);
}

void __swiftcall PKGenerationTool.init()(PencilKit::PKGenerationTool *__return_ptr retstr)
{
  retstr->tool.super.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKGenerationTool), sel_init);
}

uint64_t static PKGenerationTool.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

ValueMetadata *type metadata accessor for PKGenerationTool()
{
  return &type metadata for PKGenerationTool;
}

id static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    v2 = 0;
  }
  *a2 = a1;
  return v2;
}

uint64_t PKStrokePath.init<A>(controlPoints:creationDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  Array.init<A>(_:)();
  v10 = objc_allocWithZone((Class)PKStrokePath);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12 = Date._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v10, sel_initWithControlPoints_creationDate_, isa, v12);

  v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  *a4 = v13;
  return result;
}

id PKStrokePath.interpolatedPoint(at:)@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_interpolatedPointAt_);
  if (result)
  {
    *a1 = result;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void __swiftcall PKStrokePath.init()(PencilKit::PKStrokePath *__return_ptr retstr)
{
  retstr->strokeData.super.isa = (Class)objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
}

void PKStrokePath.creationDate.getter()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, sel_creationDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

}

id PKStrokePath.interpolatedLocation(at:)()
{
  id *v0;

  return objc_msgSend(*v0, sel_interpolatedLocationAt_);
}

void PKStrokePath.interpolatedPoints(in:by:)(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  void **v5;
  uint64_t v7;
  char v8;
  void *v9;
  id v11;
  int64_t v12;
  id v13;
  id v14;
  void *v15;

  v7 = *a4;
  v8 = *((_BYTE *)a4 + 8);
  v9 = *v5;
  if ((a3 & 1) == 0)
    goto LABEL_8;
  v15 = *v5;
  v11 = v9;
  v12 = (int64_t)objc_msgSend(v11, sel_count);
  if (((unint64_t)objc_msgSend(v11, sel_count) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = objc_msgSend(v11, sel_count);

  if (v12 < 0 || (uint64_t)v13 < v12)
    goto LABEL_10;
  if (v12)
  {
    a1 = 0;
    a2 = (double)(v12 - 1);
    v9 = v15;
LABEL_8:
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v7;
    *(_BYTE *)(a5 + 16) = v8;
    *(_QWORD *)(a5 + 24) = a1;
    *(double *)(a5 + 32) = a2;
    *(_QWORD *)(a5 + 40) = a1;
    v14 = v9;
    return;
  }
LABEL_11:
  __break(1u);
}

void PKStrokePath.parametricValue(_:offsetBy:)(uint64_t a1, double a2)
{
  void **v2;
  double v3;
  int v4;
  void *v5;
  double v6;
  const char *v7;
  id v8;
  int64_t v9;
  id v10;

  v3 = *(double *)a1;
  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = *v2;
  if (!v4)
  {
    v6 = v3;
    v7 = sel_parametricValue_offsetByDistance_;
    goto LABEL_5;
  }
  if (v4 == 1)
  {
    v6 = v3;
    v7 = sel_parametricValue_offsetByTime_;
LABEL_5:
    objc_msgSend(v5, v7, a2, v6);
    return;
  }
  v8 = v5;
  v9 = (int64_t)objc_msgSend(v8, sel_count);
  if (((unint64_t)objc_msgSend(v8, sel_count) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  v10 = objc_msgSend(v8, sel_count);

  if (v9 < 0 || (uint64_t)v10 < v9)
    goto LABEL_11;
}

uint64_t PKStrokePath.startIndex.getter()
{
  return 0;
}

id PKStrokePath.endIndex.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_count);
}

id PKStrokePath.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  id result;

  result = objc_msgSend(*v2, sel_objectAtIndexedSubscript_, a1);
  if (result)
  {
    *a2 = result;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(int64_t a1, uint64_t a2, int64_t a3, id a4)
{
  id result;
  uint64_t v9;
  int64_t v10;
  BOOL v11;

  result = objc_msgSend(a4, sel_count);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = objc_msgSend(a4, sel_count);
  if (a3 < 0 || (uint64_t)result < a3)
    goto LABEL_17;
  v9 = a3 - a1;
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_12:
  v11 = __OFADD__(a1, a2);
  v10 = a1 + a2;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = objc_msgSend(a4, sel_count);
  if ((v10 & 0x8000000000000000) == 0 && (uint64_t)result >= v10)
    return (id)v10;
LABEL_19:
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance PKStrokePath@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  id *v2;
  uint64_t v4;

  v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    result = objc_msgSend(*v2, sel_count);
    if ((v4 & 0x8000000000000000) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance PKStrokePath(uint64_t *result)
{
  id *v1;
  uint64_t v2;
  uint64_t *v3;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    result = (uint64_t *)objc_msgSend(*v1, sel_count);
    if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)result)
    {
      *v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for Collection.endIndex.getter in conformance PKStrokePath@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_count);
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance PKStrokePath(_QWORD *a1, _QWORD *a2))(id *a1)
{
  id *v2;
  id v4;
  void (*result)(id *);

  v4 = objc_msgSend(*v2, sel_objectAtIndexedSubscript_, *a2);
  if (v4)
  {
    *a1 = v4;
    return Array.subscript.readspecialized ;
  }
  else
  {
    result = (void (*)(id *))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance PKStrokePath@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  id v7;

  v5 = *a1;
  v4 = a1[1];
  v7 = *v2;
  result = (uint64_t)objc_msgSend(*v2, sel_count);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v4)
  {
    a2[1] = v4;
    a2[2] = v7;
    *a2 = v5;
    return (uint64_t)v7;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.indices.getter in conformance PKStrokePath@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  unint64_t result;

  result = (unint64_t)objc_msgSend(*v1, sel_count);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PKStrokePath()
{
  id *v0;

  return objc_msgSend(*v0, sel_count) == 0;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance PKStrokePath(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance PKStrokePath@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id *v3;
  uint64_t v5;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = objc_msgSend(*v3, sel_count);
    if ((v5 & 0x8000000000000000) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance PKStrokePath@<X0>(int64_t *a1@<X0>, uint64_t a2@<X1>, int64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id *v4;
  id result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

id protocol witness for RandomAccessCollection.distance(from:to:) in conformance PKStrokePath(uint64_t *a1, uint64_t *a2)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id result;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  result = objc_msgSend(*v2, sel_count);
  if (v3 < 0 || (uint64_t)result < v3)
  {
    __break(1u);
  }
  else
  {
    result = objc_msgSend(v5, sel_count);
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
      return (id)(v4 - v3);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance PKStrokePath(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance PKStrokePath(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

id protocol witness for Collection.index(after:) in conformance PKStrokePath@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  uint64_t v4;
  id result;

  v4 = *a1;
  result = objc_msgSend(*v2, sel_count);
  if (v4 < 0 || v4 >= (uint64_t)result)
    __break(1u);
  else
    *a2 = v4 + 1;
  return result;
}

id protocol witness for Collection.formIndex(after:) in conformance PKStrokePath(uint64_t *a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  id result;

  v3 = *v1;
  v4 = *a1;
  result = objc_msgSend(v3, sel_count);
  if (v4 < 0 || v4 >= (uint64_t)result)
    __break(1u);
  else
    *a1 = v4 + 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PKStrokePath(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

int64_t protocol witness for Collection.count.getter in conformance PKStrokePath()
{
  void **v0;
  void *v1;
  int64_t v2;
  int64_t result;

  v1 = *v0;
  v2 = (int64_t)objc_msgSend(v1, sel_count);
  result = (int64_t)objc_msgSend(v1, sel_count);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (int64_t)objc_msgSend(v1, sel_count);
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
      return v2;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PKStrokePath()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PKStrokePath(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  id *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void __swiftcall PKStrokePath._bridgeToObjectiveC()(PKStrokePath *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

id static PKStrokePath._forceBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{

  *a2 = a1;
  return a1;
}

uint64_t static PKStrokePath._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  id v4;

  *a2 = a1;
  v4 = a1;
  return 1;
}

unint64_t lazy protocol witness table accessor for type PKStrokePath and conformance PKStrokePath()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKStrokePath, &type metadata for PKStrokePath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKStrokePath, &type metadata for PKStrokePath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKStrokePath, &type metadata for PKStrokePath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath;
  if (!lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath)
  {
    result = MEMORY[0x1C3B801E4](&protocol conformance descriptor for PKStrokePath, &type metadata for PKStrokePath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1C3B801E4](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Slice<PKStrokePath> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PKStrokePath> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PKStrokePath and conformance PKStrokePath, MEMORY[0x1E0DEDE40]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Slice<PKStrokePath> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PKStrokePath> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PKStrokePath and conformance PKStrokePath, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type Slice<PKStrokePath> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<PKStrokePath>);
    v8 = a2();
    result = MEMORY[0x1C3B801E4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in PKStrokePath()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in PKStrokePath()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x1C3B801E4](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PKStrokePath()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type Slice<PKStrokePath> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<PKStrokePath>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PKStrokePath()
{
  return lazy protocol witness table accessor for type DecodableDefault<CGFloat> and conformance DecodableDefault<A>(&lazy protocol witness table cache variable for type IndexingIterator<PKStrokePath> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<PKStrokePath>, MEMORY[0x1E0DEC908]);
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PKStrokePath@<X0>(id a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = a1;
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone((Class)PKStrokePath), sel_init);
    v2 = 0;
  }
  *a2 = a1;
  return v2;
}

ValueMetadata *type metadata accessor for PKStrokePath()
{
  return &type metadata for PKStrokePath;
}

uint64_t initializeWithCopy for PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for PKStrokePath.InterpolatedSlice(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokePath.InterpolatedSlice(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokePath.InterpolatedSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PKStrokePath.InterpolatedSlice()
{
  return &type metadata for PKStrokePath.InterpolatedSlice;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PKStrokePath.InterpolatedSlice.Stride(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokePath.InterpolatedSlice.Stride(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PKStrokePath.InterpolatedSlice.Stride(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for PKStrokePath.InterpolatedSlice.Stride(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PKStrokePath.InterpolatedSlice.Stride()
{
  return &type metadata for PKStrokePath.InterpolatedSlice.Stride;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8[2];

  v2 = (uint64_t)objc_msgSend(a1, sel_count);
  result = (uint64_t)objc_msgSend(a1, sel_count);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)objc_msgSend(a1, sel_count);
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>);
        v4 = (_QWORD *)swift_allocObject();
        v5 = _swift_stdlib_malloc_size(v4);
        v6 = v5 - 32;
        if (v5 < 32)
          v6 = v5 - 25;
        v4[2] = v2;
        v4[3] = 2 * (v6 >> 3);
        v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v2, a1);

        if (v7 == v2)
          return (uint64_t)v4;
        __break(1u);
      }
      return MEMORY[0x1E0DEE9D8];
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id *v4;
  double v5;
  double v6;
  uint64_t v7;
  int v8;
  double v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  char **v15;
  id v16;
  id v17;
  id v18;
  double v19;
  double v20;
  id v21;
  int64_t v22;
  void *v23;
  id v24;
  uint64_t result;
  uint64_t v26;
  id *v28;
  uint64_t v29;
  double v30;
  int v31;
  uint64_t v32;

  v4 = (id *)v3;
  if (!a2)
  {
    a3 = 0;
    v12 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v3;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
    return a3;
  }
  v6 = *(double *)(v3 + 32);
  v5 = *(double *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(v3 + 16);
  v10 = *(id *)v3;
  v9 = *(double *)(v3 + 8);
  if (!a3)
  {
LABEL_29:
    *(_QWORD *)a1 = v10;
    *(double *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    *(double *)(a1 + 32) = v6;
    *(double *)(a1 + 40) = v5;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_33;
  v29 = a1;
  v30 = *(double *)(v3 + 8);
  if (v6 < v5)
  {
    v11 = 0;
LABEL_27:
    *(_QWORD *)v29 = v10;
    *(double *)(v29 + 8) = v30;
    *(_BYTE *)(v29 + 16) = v8;
    *(_QWORD *)(v29 + 24) = v7;
    *(double *)(v29 + 32) = v6;
    a3 = v11;
    *(double *)(v29 + 40) = v5;
    return a3;
  }
  v13 = a2;
  v11 = 0;
  v14 = v9;
  v26 = a3;
  v32 = a3 - 1;
  v15 = &selRef_initWithBytes_length_;
  v31 = v8;
  v28 = v4;
  while (1)
  {
    v16 = v10;
    v17 = objc_msgSend(v16, v15[328], v5);
    v18 = v17;
    if (v6 <= v5 + 0.001)
    {
      if (!v17)
        goto LABEL_34;
      outlined release of PKStrokePath.InterpolatedSlice(v4);
      v5 = v5 + 1.0;
      goto LABEL_25;
    }
    if (!v17)
      goto LABEL_34;

    if (!v31)
    {
      objc_msgSend(v16, sel_parametricValue_offsetByDistance_, v5, v14);
      v5 = v20;
      LOBYTE(v8) = 0;
      goto LABEL_25;
    }
    if (v31 == 1)
    {
      objc_msgSend(v16, sel_parametricValue_offsetByTime_, v5, v14);
      v5 = v19;
      LOBYTE(v8) = 1;
      goto LABEL_25;
    }
    v21 = v16;
    v22 = (int64_t)objc_msgSend(v21, sel_count);
    if (((unint64_t)objc_msgSend(v21, sel_count) & 0x8000000000000000) != 0)
      break;
    v23 = v10;
    v24 = objc_msgSend(v21, (SEL)&selRef_currentFirstResponder);

    if (v22 < 0 || (uint64_t)v24 < v22)
      goto LABEL_32;
    if (v5 + v14 >= (double)(v22 - 1))
      v5 = (double)(v22 - 1);
    else
      v5 = v5 + v14;
    LOBYTE(v8) = 2;
    if (v5 < 0.0)
      v5 = 0.0;
    v10 = v23;
    v15 = &selRef_initWithBytes_length_;
    v13 = a2;
    v4 = v28;
LABEL_25:
    *(_QWORD *)(v13 + 8 * v11) = v18;
    if (v32 == v11)
    {
      a3 = v26;
      a1 = v29;
      v9 = v30;
      LOBYTE(v8) = v31;
      goto LABEL_29;
    }
    ++v11;
    if (v6 < v5)
      goto LABEL_27;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, id a4)
{
  uint64_t v8;
  id v9;
  id v10;
  uint64_t result;

  if (!a2)
  {
    v8 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_11:
    v8 = a3;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    if (objc_msgSend(a4, sel_count))
    {
      do
      {
        v9 = objc_msgSend(a4, sel_objectAtIndexedSubscript_, v8);
        if (!v9)
          goto LABEL_15;
        v10 = v9;
        if (v8 >= (uint64_t)objc_msgSend(a4, sel_count))
        {
          __break(1u);
          goto LABEL_14;
        }
        *(_QWORD *)(a2 + 8 * v8) = v10;
        if (a3 - 1 == v8)
          goto LABEL_11;
      }
      while ((id)++v8 != objc_msgSend(a4, sel_count));
    }
LABEL_12:
    *a1 = a4;
    a1[1] = v8;
    return v8;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

void sub_1BE258BD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE259424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_1BE259580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2595E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2598B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  a25 = (void **)&a22;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a25);

  _Unwind_Resume(a1);
}

void sub_1BE2599BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE25A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  void *v23;

  if (__p)
    operator delete(__p);
  a23 = &a12;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);

  _Unwind_Resume(a1);
}

void sub_1BE25A738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void **a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  a17 = (void **)(v23 - 120);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  ClipperLib::ClipperBase *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E7774540;
  *((_QWORD *)this + 18) = &off_1E7774588;
  v2 = (ClipperLib::Clipper *)((char *)this + 144);
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);
}

{
  ClipperLib::ClipperBase *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E7774540;
  *((_QWORD *)this + 18) = &off_1E7774588;
  v2 = (ClipperLib::Clipper *)((char *)this + 144);
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);
  JUMPOUT(0x1C3B7F770);
}

void sub_1BE25A928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::vector<CGPoint>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7770A58, MEMORY[0x1E0DE42D0]);
}

void sub_1BE25A9A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

_QWORD *std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1BE25AAD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v15 += 24;
  std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1BE25ABE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE25AC54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::vector<ClipperLib::IntPoint>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::__list_imp<long long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_1BE25B138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE25B388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE25B410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE25B494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE25B518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_1BE25B5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE25B5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE25B808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE25BA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v21 = v17;

  _Unwind_Resume(a1);
}

void sub_1BE25BD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE25BEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE25C098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE25C250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE25C480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE25C648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE25C884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE25CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;

  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1BE25CCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE25CF24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE25D228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE25D6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE25D9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE25DB40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE25DCCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE25DF5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE25E084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE25E308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE25E6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE25E94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t drawing::Color::Color(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774948;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774948;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void drawing::Color::~Color(drawing::Color *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawing::Color::Color(drawing::Color *this, const drawing::Color *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774948;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 = 8;
    *((_BYTE *)this + 24) = 8;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 3) = result;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t drawing::Color::operator=(uint64_t a1, const drawing::Color *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const drawing::Color *)a1 != a2)
  {
    drawing::Color::Color((drawing::Color *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float drawing::swap(drawing *this, drawing::Color *a2, drawing::Color *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float drawing::Color::Color(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774948;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774948;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t drawing::Color::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(drawing::Color *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7774948;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t drawing::Color::formatText(drawing::Color *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "alpha", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "green", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "blue", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "red", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawing::Color::readFrom(drawing::Color *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t drawing::Color::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL drawing::Color::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t drawing::Color::hash_value(drawing::Color *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 5);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 3);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1BE2601C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getBETextDocumentRequestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE6070)
  {
    qword_1ECEE6070 = _sl_dlopen();
    if (!qword_1ECEE6070)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("BETextDocumentRequest");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEE6068 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE260A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE260B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKSelectionView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE260CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE260E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE260EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE260F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE261004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE261060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE261490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2617D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE261AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE261BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE261E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE261F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE261FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE262028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE262094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE262100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26216C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2621D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE262244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2622B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE262388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2625A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE262800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE262A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE262B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE262D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE262E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE262E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE262F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE263300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE263830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE263978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE263B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE263CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE263DEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE263EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2641C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE264278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2642DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26440C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2647D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE26491C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2649C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE264B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE264BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE264C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE264E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE264FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v15;

  _Unwind_Resume(a1);
}

void sub_1BE26514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v15;

  _Unwind_Resume(a1);
}

void sub_1BE265238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2652F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2654D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE2655EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2656C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE265798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE265830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE265940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE266624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE266890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE266928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1BE2669CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE266B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE266CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  objc_destroyWeak((id *)(v5 - 96));

  _Unwind_Resume(a1);
}

void sub_1BE267064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE26717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE267400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1BE2674A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2678AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE267ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE267BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE267D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2681B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1BE2683FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE2686D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1BE2688A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE268A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26AB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE26C418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PKTiledView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE26C76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26C8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26CA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE26CB40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26CC9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26CD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26CDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26CE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE26D0B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26D354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26D454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE26D4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26D9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE26DB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26DBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26DC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26DDAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26DE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26DF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE26E030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE26E0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26E1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE26E370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26E47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26E588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE26E61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26E6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26E820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE26E8AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26E9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE26EBB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26EDBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26EF58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26F0E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26F1A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26F320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a18, 8);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE26F508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26F5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE26F748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE26F7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE26F938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE26FB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE26FF28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE2701C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2702F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2705B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2706BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE2707AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE270900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE270A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE270BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a10);

  PKTransformAppliedStrokeData::~PKTransformAppliedStrokeData((id *)va);
  _Unwind_Resume(a1);
}

void sub_1BE270D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PKTransformAppliedStrokeData::~PKTransformAppliedStrokeData(id *this)
{

}

void sub_1BE271158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1BE271598(_Unwind_Exception *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  va_list va;

  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE271724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2717B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE271920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE2719A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE271A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  PKTransformAppliedStrokeData::~PKTransformAppliedStrokeData((id *)va);
  _Unwind_Resume(a1);
}

void sub_1BE271BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE271CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE271FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1BE272054()
{
  JUMPOUT(0x1BE272038);
}

void sub_1BE27258C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v18;

  _Unwind_Resume(a1);
}

void sub_1BE2727E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE272C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE273318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__411(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__412(uint64_t a1)
{

}

void sub_1BE273514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2736A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE273854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE2739D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE273B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE273D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE273E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE273FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BE2740A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2741BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE274448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2745BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE274768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE274870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE2749C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE274B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE274CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE274E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE274F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE274FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE275064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE275504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1BE275734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2757A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE275808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE275944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE275ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE275BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE275C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE275D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2760B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2764E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2765F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2766E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE27678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2768C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BE2769D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE276C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE276CE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE276D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE276F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2770D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE277B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;

  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&STACK[0x340], 8);
  objc_destroyWeak((id *)&STACK[0x430]);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__433(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1BE278204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE278B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE2791B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2794E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2795D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2798F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE279C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1BE279ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE27A184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE27A39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27A650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE27A938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE27AE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;

  a33 = (void **)&a48;
  std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100](&a33);

  _Unwind_Resume(a1);
}

void sub_1BE27B5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  void *v61;
  void *v62;

  STACK[0x228] = (unint64_t)&a60;
  std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);

  _Unwind_Resume(a1);
}

void sub_1BE27BB4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27C2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE27C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE27C9B4()
{
  JUMPOUT(0x1BE27C998);
}

void sub_1BE27C9C0()
{
  JUMPOUT(0x1BE27C9A4);
}

void sub_1BE27CAFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27CE88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE27D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE27D22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE27D348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE27D3E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27D508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE27D5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27D654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27D6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27D758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27D8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE27DA24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27DAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27DC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE27DC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27DE18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27DEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE27DF58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE27E0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE27E180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27E3E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE27E50C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27E56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27E944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE27EB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE27ED94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27EE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27F674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  _Unwind_Resume(a1);
}

void sub_1BE27FA1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27FBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE27FC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27FCFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27FDDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE27FEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE27FF54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2800C0(_Unwind_Exception *a1)
{
  void *v1;
  char v2;
  void *v3;
  void *v4;

  if ((v2 & 1) == 0)
  _Unwind_Resume(a1);
}

void sub_1BE280218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE280324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE280374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2804C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE280610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2808D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE280A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE280C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2817AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id location)
{
  void *v50;
  void *v51;
  void *v52;

  _Unwind_Resume(a1);
}

void sub_1BE281994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE282064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE2826A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2827FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE282874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE282978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2829F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE282AB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE282CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2830A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, id a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  objc_destroyWeak(location);
  objc_destroyWeak(&a18);

  _Unwind_Resume(a1);
}

void sub_1BE2832F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2833E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE283568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2835F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE283664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::vector<AttachmentTileInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        v4 -= 32;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

LABEL_1:
  v118 = (uint64_t)(a2 - 4);
  v8 = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 1) < *(double *)(a1 + 24))
        {
          v50 = a1;
          v51 = (uint64_t)(a2 - 4);
          goto LABEL_58;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1, a1 + 32, v118);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1, a1 + 32, a1 + 64, v118);
        return;
      case 5:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1, a1 + 32, a1 + 64, a1 + 96);
        if (*(a2 - 1) < *(double *)(a1 + 120))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1 + 96, v118);
          if (*(double *)(a1 + 120) < *(double *)(a1 + 88))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1 + 64, a1 + 96);
            if (*(double *)(a1 + 88) < *(double *)(a1 + 56))
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1 + 32, a1 + 64);
              if (*(double *)(a1 + 56) < *(double *)(a1 + 24))
              {
                v50 = a1;
                v51 = a1 + 32;
LABEL_58:
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(v50, v51);
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v52 = (double *)(a1 + 32);
          v54 = (double *)a1 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = a1;
              do
              {
                v57 = v52;
                if (*(double *)(v56 + 56) < *(double *)(v56 + 24))
                {
                  v58 = *(_QWORD *)v52;
                  *v52 = 0.0;
                  v123 = *(_OWORD *)(v56 + 40);
                  v59 = *(double *)(v56 + 56);
                  v60 = v55;
                  while (1)
                  {
                    v61 = a1 + v60;
                    v62 = *(_QWORD *)(a1 + v60);
                    *(_QWORD *)v61 = 0;
                    v63 = *(void **)(a1 + v60 + 32);
                    *(_QWORD *)(v61 + 32) = v62;

                    *(_OWORD *)(v61 + 40) = *(_OWORD *)(v61 + 8);
                    *(_QWORD *)(v61 + 56) = *(_QWORD *)(v61 + 24);
                    if (!v60)
                      break;
                    v60 -= 32;
                    if (v59 >= *(double *)(v61 - 8))
                    {
                      v64 = a1 + v60 + 32;
                      goto LABEL_81;
                    }
                  }
                  v64 = a1;
LABEL_81:
                  v65 = *(void **)v64;
                  *(_QWORD *)v64 = v58;

                  *(_OWORD *)(v61 + 8) = v123;
                  *(double *)(v64 + 24) = v59;
                }
                v52 = v57 + 4;
                v55 += 32;
                v56 = (uint64_t)v57;
              }
              while (v57 + 4 != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v109 = v52;
              if (*(double *)(a1 + 56) < *(double *)(a1 + 24))
              {
                v110 = *(_QWORD *)v52;
                *v52 = 0.0;
                v126 = *(_OWORD *)(a1 + 40);
                v111 = *(double *)(a1 + 56);
                v112 = v52;
                v113 = v52;
                do
                {
                  v114 = *((_QWORD *)v113 - 4);
                  v113 -= 4;
                  *v113 = 0.0;
                  v115 = *(void **)v112;
                  *(_QWORD *)v112 = v114;

                  *(_OWORD *)(v112 + 1) = *(_OWORD *)(v112 - 3);
                  v112[3] = *(v112 - 1);
                  v116 = *(v112 - 5);
                  v112 = v113;
                }
                while (v111 < v116);
                v117 = *(void **)v113;
                *(_QWORD *)v113 = v110;

                *(_OWORD *)(v113 + 1) = v126;
                v113[3] = v111;
              }
              v52 = v109 + 4;
              a1 = (uint64_t)v109;
            }
            while (v109 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((double *)a1 != a2)
          {
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = a1 + 32 * v69;
                if (2 * v68 + 2 < v10 && *(double *)(v70 + 24) < *(double *)(v70 + 56))
                {
                  v70 += 32;
                  v69 = 2 * v68 + 2;
                }
                v71 = a1 + 32 * v68;
                v72 = *(double *)(v71 + 24);
                if (*(double *)(v70 + 24) >= v72)
                {
                  v73 = a1 + 32 * v68;
                  v74 = *(void **)v73;
                  *(_QWORD *)v73 = 0;
                  v124 = *(_OWORD *)(v71 + 8);
                  do
                  {
                    v75 = v73;
                    v73 = v70;
                    v76 = *(_QWORD *)v70;
                    *(_QWORD *)v73 = 0;
                    v77 = *(void **)v75;
                    *(_QWORD *)v75 = v76;

                    v78 = *(_OWORD *)(v73 + 8);
                    *(_QWORD *)(v75 + 24) = *(_QWORD *)(v73 + 24);
                    *(_OWORD *)(v75 + 8) = v78;
                    if (v66 < v69)
                      break;
                    v79 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = a1 + 32 * v69;
                    v80 = v79 + 2;
                    if (v80 < v10 && *(double *)(v70 + 24) < *(double *)(v70 + 56))
                    {
                      v70 += 32;
                      v69 = v80;
                    }
                  }
                  while (*(double *)(v70 + 24) >= v72);
                  v81 = *(void **)v73;
                  *(_QWORD *)v73 = v74;

                  *(_OWORD *)(v73 + 8) = v124;
                  *(double *)(v73 + 24) = v72;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v82 = (unint64_t)v9 >> 5;
            do
            {
              v83 = 0;
              v84 = *(double *)a1;
              *(_QWORD *)a1 = 0;
              v125 = *(_OWORD *)(a1 + 8);
              v128 = *(_QWORD *)(a1 + 24);
              v85 = a1;
              do
              {
                v86 = v85;
                v85 += 32 * (v83 + 1);
                v87 = 2 * v83;
                v83 = (2 * v83) | 1;
                v88 = v87 + 2;
                if (v88 < v82 && *(double *)(v85 + 24) < *(double *)(v85 + 56))
                {
                  v85 += 32;
                  v83 = v88;
                }
                v89 = *(void **)v85;
                *(_QWORD *)v85 = 0;
                v90 = *(void **)v86;
                *(_QWORD *)v86 = v89;

                v91 = *(_OWORD *)(v85 + 8);
                *(_QWORD *)(v86 + 24) = *(_QWORD *)(v85 + 24);
                *(_OWORD *)(v86 + 8) = v91;
              }
              while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              v92 = (__int128 *)(v85 + 8);
              v93 = a2 - 4;
              if ((double *)v85 == a2 - 4)
              {
                v107 = *(void **)v85;
                *(double *)v85 = v84;

                *(_QWORD *)(v85 + 24) = v128;
                *v92 = v125;
              }
              else
              {
                v94 = *((_QWORD *)a2 - 4);
                *(a2 - 4) = 0.0;
                v95 = *(void **)v85;
                *(_QWORD *)v85 = v94;

                v96 = *(_OWORD *)(a2 - 3);
                *(double *)(v85 + 24) = *(a2 - 1);
                *v92 = v96;
                v97 = (void *)*((_QWORD *)a2 - 4);
                *(a2 - 4) = v84;

                *((_QWORD *)a2 - 1) = v128;
                *(_OWORD *)(a2 - 3) = v125;
                v98 = v85 - a1 + 32;
                if (v98 >= 33)
                {
                  v99 = (((unint64_t)v98 >> 5) - 2) >> 1;
                  v100 = *(double *)(v85 + 24);
                  if (*(double *)(a1 + 32 * v99 + 24) < v100)
                  {
                    v101 = *(void **)v85;
                    *(_QWORD *)v85 = 0;
                    v119 = *v92;
                    do
                    {
                      v102 = v85;
                      v85 = a1 + 32 * v99;
                      v103 = *(void **)v85;
                      *(_QWORD *)v85 = 0;
                      v104 = *(void **)v102;
                      *(_QWORD *)v102 = v103;

                      v105 = *(_OWORD *)(v85 + 8);
                      *(_QWORD *)(v102 + 24) = *(_QWORD *)(v85 + 24);
                      *(_OWORD *)(v102 + 8) = v105;
                      if (!v99)
                        break;
                      v99 = (v99 - 1) >> 1;
                    }
                    while (*(double *)(a1 + 32 * v99 + 24) < v100);
                    v106 = *(void **)v85;
                    *(_QWORD *)v85 = v101;

                    *(_OWORD *)(v85 + 8) = v119;
                    *(double *)(v85 + 24) = v100;
                  }
                }
              }
              a2 = v93;
            }
            while (v82-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(v12, a1, v118);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1, v12, v118);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1 + 32, v12 - 32, (uint64_t)(a2 - 8));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1 + 64, a1 + 32 + 32 * v11, (uint64_t)(a2 - 12));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(v12 - 32, v12, a1 + 32 + 32 * v11);
          v13 = *(double *)a1;
          *(_QWORD *)a1 = 0;
          v120 = *(_OWORD *)(a1 + 8);
          v127 = *(_QWORD *)(a1 + 24);
          v14 = *(void **)v12;
          *(_QWORD *)v12 = 0;
          v15 = *(void **)a1;
          *(_QWORD *)a1 = v14;

          v16 = *(_OWORD *)(v12 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 24);
          *(_OWORD *)(a1 + 8) = v16;
          v17 = *(void **)v12;
          *(double *)v12 = v13;

          *(_QWORD *)(v12 + 24) = v127;
          *(_OWORD *)(v12 + 8) = v120;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(double *)(a1 + 24);
          if (*(double *)(a1 - 8) < v18)
            goto LABEL_11;
          v36 = *(double *)a1;
          *(_QWORD *)a1 = 0;
          v122 = *(_OWORD *)(a1 + 8);
          if (v18 >= *(a2 - 1))
          {
            v39 = (double *)(a1 + 32);
            do
            {
              v8 = v39;
              if (v39 >= a2)
                break;
              v40 = v39[3];
              v39 += 4;
            }
            while (v18 >= v40);
          }
          else
          {
            v37 = a1;
            do
            {
              v8 = (double *)(v37 + 32);
              v38 = *(double *)(v37 + 56);
              v37 += 32;
            }
            while (v18 >= v38);
          }
          v41 = (unint64_t)a2;
          if (v8 < a2)
          {
            v42 = a2;
            do
            {
              v41 = (unint64_t)(v42 - 4);
              v43 = *(v42 - 1);
              v42 -= 4;
            }
            while (v18 < v43);
          }
          while ((unint64_t)v8 < v41)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)v8, v41);
            do
            {
              v44 = v8[7];
              v8 += 4;
            }
            while (v18 >= v44);
            do
            {
              v45 = *(double *)(v41 - 8);
              v41 -= 32;
            }
            while (v18 < v45);
          }
          if (v8 - 4 != (double *)a1)
          {
            v46 = *((_QWORD *)v8 - 4);
            *(v8 - 4) = 0.0;
            v47 = *(void **)a1;
            *(_QWORD *)a1 = v46;

            v48 = *(_OWORD *)(v8 - 3);
            *(double *)(a1 + 24) = *(v8 - 1);
            *(_OWORD *)(a1 + 8) = v48;
          }
          v49 = (void *)*((_QWORD *)v8 - 4);
          *(v8 - 4) = v36;

          a4 = 0;
          *(_OWORD *)(v8 - 3) = v122;
          *(v8 - 1) = v18;
          continue;
        }
        v18 = *(double *)(a1 + 24);
LABEL_11:
        v19 = 0;
        v20 = *(double *)a1;
        *(_QWORD *)a1 = 0;
        v121 = *(_OWORD *)(a1 + 8);
        do
        {
          v21 = *(double *)(a1 + v19 + 56);
          v19 += 32;
        }
        while (v21 < v18);
        v22 = (double *)(a1 + v19);
        v23 = a2;
        if (v19 == 32)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = (unint64_t)(v26 - 4);
            v27 = *(v26 - 1);
            v26 -= 4;
            if (v27 < v18)
              goto LABEL_21;
          }
          v24 = (unint64_t)v26;
        }
        else
        {
          do
          {
            v24 = (unint64_t)(v23 - 4);
            v25 = *(v23 - 1);
            v23 -= 4;
          }
          while (v25 >= v18);
        }
LABEL_21:
        if ((unint64_t)v22 >= v24)
        {
          v8 = v22;
        }
        else
        {
          v28 = v24;
          v8 = v22;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)v8, v28);
            do
            {
              v29 = v8[7];
              v8 += 4;
            }
            while (v29 < v18);
            do
            {
              v30 = *(double *)(v28 - 8);
              v28 -= 32;
            }
            while (v30 >= v18);
          }
          while ((unint64_t)v8 < v28);
        }
        if (v8 - 4 != (double *)a1)
        {
          v31 = *((_QWORD *)v8 - 4);
          *(v8 - 4) = 0.0;
          v32 = *(void **)a1;
          *(_QWORD *)a1 = v31;

          v33 = *(_OWORD *)(v8 - 3);
          *(double *)(a1 + 24) = *(v8 - 1);
          *(_OWORD *)(a1 + 8) = v33;
        }
        v34 = (void *)*((_QWORD *)v8 - 4);
        *(v8 - 4) = v20;

        *(_OWORD *)(v8 - 3) = v121;
        *(v8 - 1) = v18;
        if ((unint64_t)v22 < v24)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *,false>(a1, v8 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((double *)a1, v8 - 4);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(v8, a2))
        {
          if (v35)
            continue;
          goto LABEL_34;
        }
        a2 = v8 - 4;
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(_QWORD *)(a2 - 24);
        v38 = a2 - 24;
        if (*(_QWORD *)v8 < v39)
        {
          v95 = *(_QWORD *)(v8 + 16);
          v87 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
          *(_OWORD *)v8 = v40;
          *(_QWORD *)(v38 + 16) = v95;
          *(_OWORD *)v38 = v87;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)v8, (uint64_t *)(v8 + 24), (uint64_t *)(a2 - 24));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v8, (uint64_t *)(v8 + 24), (uint64_t *)(v8 + 48), a2 - 24);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)v8, (uint64_t *)(v8 + 24), (uint64_t *)(v8 + 48), (__n128 *)(v8 + 72), (__n128 *)(a2 - 24));
        return;
      default:
        if (v9 <= 575)
        {
          v41 = v8 + 24;
          v43 = v8 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v46 = v41;
                v47 = *(_QWORD *)(v45 + 24);
                if (*(_QWORD *)v45 < v47)
                {
                  v88 = *(_OWORD *)(v45 + 32);
                  v48 = v44;
                  while (1)
                  {
                    v49 = v8 + v48;
                    *(_OWORD *)(v49 + 24) = *(_OWORD *)(v8 + v48);
                    *(_QWORD *)(v49 + 40) = *(_QWORD *)(v8 + v48 + 16);
                    if (!v48)
                      break;
                    v48 -= 24;
                    if (*(_QWORD *)(v49 - 24) >= v47)
                    {
                      v50 = v8 + v48 + 24;
                      goto LABEL_71;
                    }
                  }
                  v50 = v8;
LABEL_71:
                  *(_QWORD *)v50 = v47;
                  *(_OWORD *)(v50 + 8) = v88;
                }
                v41 = v46 + 24;
                v44 += 24;
                v45 = v46;
              }
              while (v46 + 24 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v78 = v41;
              v79 = *(_QWORD *)(a1 + 24);
              if (*(_QWORD *)a1 < v79)
              {
                v91 = *(_OWORD *)(a1 + 32);
                do
                {
                  *(_OWORD *)v41 = *(_OWORD *)(v41 - 24);
                  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v41 - 8);
                  v80 = *(_QWORD *)(v41 - 48);
                  v41 -= 24;
                }
                while (v80 < v79);
                *(_QWORD *)v41 = v79;
                *(_OWORD *)(v41 + 8) = v91;
              }
              v41 = v78 + 24;
              a1 = v78;
            }
            while (v78 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = (_QWORD *)(v8 + 24 * v54);
                if (2 * v53 + 2 >= v10)
                {
                  v56 = *v55;
                }
                else
                {
                  v56 = v55[3];
                  if (v56 < *v55)
                  {
                    v55 += 3;
                    v54 = 2 * v53 + 2;
                  }
                  else
                  {
                    v56 = *v55;
                  }
                }
                v57 = (_QWORD *)(v8 + 24 * v53);
                v58 = *v57;
                if (*v57 >= v56)
                {
                  v89 = *(_OWORD *)(v57 + 1);
                  do
                  {
                    v59 = v57;
                    v57 = v55;
                    v60 = *(_OWORD *)v55;
                    v59[2] = v55[2];
                    *(_OWORD *)v59 = v60;
                    if (v51 < v54)
                      break;
                    v61 = (2 * v54) | 1;
                    v55 = (_QWORD *)(v8 + 24 * v61);
                    v54 = 2 * v54 + 2;
                    if (v54 >= v10)
                    {
                      v62 = *v55;
                      v54 = v61;
                    }
                    else
                    {
                      v62 = v55[3];
                      if (v62 < *v55)
                      {
                        v55 += 3;
                      }
                      else
                      {
                        v62 = *v55;
                        v54 = v61;
                      }
                    }
                  }
                  while (v58 >= v62);
                  *v57 = v58;
                  *(_OWORD *)(v57 + 1) = v89;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v63 = v9 / 0x18uLL;
            do
            {
              v64 = 0;
              v96 = *(_QWORD *)(v8 + 16);
              v90 = *(_OWORD *)v8;
              v65 = v8;
              do
              {
                v66 = v65 + 24 * v64 + 24;
                v67 = (2 * v64) | 1;
                v68 = 2 * v64 + 2;
                if (v68 < v63 && *(_QWORD *)(v66 + 24) < *(_QWORD *)v66)
                {
                  v66 += 24;
                  v67 = v68;
                }
                v69 = *(_OWORD *)v66;
                *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
                *(_OWORD *)v65 = v69;
                v65 = v66;
                v64 = v67;
              }
              while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
              a2 -= 24;
              if (v66 == a2)
              {
                *(_QWORD *)(v66 + 16) = v96;
                *(_OWORD *)v66 = v90;
              }
              else
              {
                v70 = *(_OWORD *)a2;
                *(_QWORD *)(v66 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v66 = v70;
                *(_QWORD *)(a2 + 16) = v96;
                *(_OWORD *)a2 = v90;
                v71 = v66 - v8 + 24;
                if (v71 >= 25)
                {
                  v72 = (v71 / 0x18uLL - 2) >> 1;
                  v73 = v8 + 24 * v72;
                  v74 = *(_QWORD *)v66;
                  if (*(_QWORD *)v66 < *(_QWORD *)v73)
                  {
                    v83 = *(_OWORD *)(v66 + 8);
                    do
                    {
                      v75 = v66;
                      v66 = v73;
                      v76 = *(_OWORD *)v73;
                      *(_QWORD *)(v75 + 16) = *(_QWORD *)(v73 + 16);
                      *(_OWORD *)v75 = v76;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = v8 + 24 * v72;
                    }
                    while (v74 < *(_QWORD *)v73);
                    *(_QWORD *)v66 = v74;
                    *(_OWORD *)(v66 + 8) = v83;
                  }
                }
              }
            }
            while (v63-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (uint64_t *)(v8 + 24 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)(a1 + 24 * v11), (uint64_t *)a1, (uint64_t *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)a1, (uint64_t *)(a1 + 24 * v11), (uint64_t *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (uint64_t *)(a1 + 24 * v11 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)(a1 + 24), v14, (uint64_t *)(a2 - 48));
          v15 = (uint64_t *)(a1 + 24 + 8 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)(a1 + 48), v15, (uint64_t *)(a2 - 72));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)v14, v12, v15);
          v92 = *(_QWORD *)(a1 + 16);
          v84 = *(_OWORD *)a1;
          v16 = v12[2];
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          v12[2] = v92;
          *(_OWORD *)v12 = v84;
        }
        --a3;
        v17 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && v17 >= *(_QWORD *)(a1 - 24))
        {
          v82 = *(_OWORD *)(a1 + 8);
          if (*(_QWORD *)(a2 - 24) >= v17)
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (*(_QWORD *)v8 >= v17);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v30 >= v17);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (v33 < v17);
          }
          while (v8 < v32)
          {
            v94 = *(_QWORD *)(v8 + 16);
            v86 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v8 = v34;
            *(_QWORD *)(v32 + 16) = v94;
            *(_OWORD *)v32 = v86;
            do
            {
              v35 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v35 >= v17);
            do
            {
              v36 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (v36 < v17);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 24) = v17;
          *(_OWORD *)(v8 - 16) = v82;
          continue;
        }
        v18 = 0;
        v81 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v17 < v19);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(_QWORD *)(v21 - 24);
            v21 -= 24;
          }
          while (v17 >= v23);
        }
        else
        {
          do
          {
            v22 = *(_QWORD *)(v21 - 24);
            v21 -= 24;
          }
          while (v17 >= v22);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            v93 = *(_QWORD *)(v8 + 16);
            v85 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v8 = v25;
            *(_QWORD *)(v24 + 16) = v93;
            *(_OWORD *)v24 = v85;
            do
            {
              v26 = *(_QWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v17 < v26);
            do
            {
              v27 = *(_QWORD *)(v24 - 24);
              v24 -= 24;
            }
            while (v17 >= v27);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v28;
        }
        *(_QWORD *)(v8 - 24) = v17;
        *(_OWORD *)(v8 - 16) = v81;
        if (v20 < v21)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, v8 - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v32 = *(a2 - 2);
        v31 = a2 - 2;
        if (v32 < *(double *)v8)
        {
          v83 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v31;
          *(_OWORD *)v31 = v83;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)v8, (double *)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), (unint64_t *)a2 - 2);
        return;
      case 5uLL:
        v33 = (__int128 *)(v8 + 16);
        v34 = (__int128 *)(v8 + 32);
        v35 = (__int128 *)(v8 + 48);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), (unint64_t *)(v8 + 48));
        v37 = *(a2 - 2);
        v36 = a2 - 2;
        if (v37 < *(double *)(v8 + 48))
        {
          v38 = *v35;
          *v35 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v38;
          if (*(double *)v35 < *(double *)v34)
          {
            v39 = *v34;
            *v34 = *v35;
            *v35 = v39;
            if (*(double *)v34 < *(double *)v33)
            {
              v40 = *v33;
              *v33 = *v34;
              *v34 = v40;
              if (*(double *)(v8 + 16) < *(double *)v8)
              {
                v84 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v33;
                *v33 = v84;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v41 = (double *)(v8 + 16);
          v43 = (double *)v8 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v46 = v41;
                v47 = *(double *)(v45 + 16);
                if (v47 < *(double *)v45)
                {
                  v48 = *(_QWORD *)(v45 + 24);
                  v49 = v44;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v49 + 16) = *(_OWORD *)(v8 + v49);
                    if (!v49)
                      break;
                    v50 = *(double *)(v8 + v49 - 16);
                    v49 -= 16;
                    if (v47 >= v50)
                    {
                      v51 = v8 + v49 + 16;
                      goto LABEL_76;
                    }
                  }
                  v51 = v8;
LABEL_76:
                  *(double *)v51 = v47;
                  *(_QWORD *)(v51 + 8) = v48;
                }
                v41 = v46 + 2;
                v44 += 16;
                v45 = (unint64_t)v46;
              }
              while (v46 + 2 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = v41;
              v76 = *(double *)(a1 + 16);
              if (v76 < *(double *)a1)
              {
                v77 = *(_QWORD *)(a1 + 24);
                v78 = v41;
                do
                {
                  *(_OWORD *)v78 = *((_OWORD *)v78 - 1);
                  v79 = *(v78 - 4);
                  v78 -= 2;
                }
                while (v76 < v79);
                *v78 = v76;
                *((_QWORD *)v78 + 1) = v77;
              }
              v41 += 2;
              a1 = (unint64_t)v75;
            }
            while (v75 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((double *)v8 != a2)
          {
            v52 = (v10 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = (double *)(v8 + 16 * v55);
                if (2 * v54 + 2 < (uint64_t)v10 && *v56 < v56[2])
                {
                  v56 += 2;
                  v55 = 2 * v54 + 2;
                }
                v57 = (double *)(v8 + 16 * v54);
                v58 = *(_OWORD *)v57;
                if (*v56 >= *v57)
                {
                  do
                  {
                    v59 = v56;
                    *(_OWORD *)v57 = *(_OWORD *)v56;
                    if (v52 < v55)
                      break;
                    v60 = 2 * v55;
                    v55 = (2 * v55) | 1;
                    v56 = (double *)(v8 + 16 * v55);
                    v61 = v60 + 2;
                    if (v61 < (uint64_t)v10 && *v56 < v56[2])
                    {
                      v56 += 2;
                      v55 = v61;
                    }
                    v57 = v59;
                  }
                  while (*v56 >= *(double *)&v58);
                  *(_OWORD *)v59 = v58;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v62 = (unint64_t)v9 >> 4;
            do
            {
              v63 = 0;
              v85 = *(_OWORD *)v8;
              v64 = (double *)v8;
              do
              {
                v65 = v64;
                v64 += 2 * v63 + 2;
                v66 = 2 * v63;
                v63 = (2 * v63) | 1;
                v67 = v66 + 2;
                if (v67 < v62 && *v64 < v64[2])
                {
                  v64 += 2;
                  v63 = v67;
                }
                *(_OWORD *)v65 = *(_OWORD *)v64;
              }
              while (v63 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              a2 -= 2;
              if (v64 == a2)
              {
                *(_OWORD *)v64 = v85;
              }
              else
              {
                *(_OWORD *)v64 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v85;
                v68 = (uint64_t)v64 - v8 + 16;
                if (v68 >= 17)
                {
                  v69 = (((unint64_t)v68 >> 4) - 2) >> 1;
                  v70 = (double *)(v8 + 16 * v69);
                  v71 = *v64;
                  if (*v70 < *v64)
                  {
                    v72 = *((_QWORD *)v64 + 1);
                    do
                    {
                      v73 = v70;
                      *(_OWORD *)v64 = *(_OWORD *)v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = (double *)(v8 + 16 * v69);
                      v64 = v73;
                    }
                    while (*v70 < v71);
                    *v73 = v71;
                    *((_QWORD *)v73 + 1) = v72;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (double *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)(a1 + 16 * (v10 >> 1)), (double *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)a1, (double *)(a1 + 16 * (v10 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)(a1 + 16), v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v11), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>(v12 - 2, v12, (double *)(a1 + 16 + 16 * v11));
          v80 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v80;
        }
        --a3;
        v13 = *(double *)a1;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 8);
          if (*(double *)(a1 - 16) < v13)
            goto LABEL_11;
          if (v13 >= *(a2 - 2))
          {
            v26 = a1 + 16;
            do
            {
              v8 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v26 += 16;
            }
            while (v13 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v25 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v25);
          }
          v27 = a2;
          if (v8 < (unint64_t)a2)
          {
            v27 = a2;
            do
            {
              v28 = *(v27 - 2);
              v27 -= 2;
            }
            while (v13 < v28);
          }
          while (v8 < (unint64_t)v27)
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v27;
            *(_OWORD *)v27 = v82;
            do
            {
              v29 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v29);
            do
            {
              v30 = *(v27 - 2);
              v27 -= 2;
            }
            while (v13 < v30);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(double *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        do
        {
          v16 = *(double *)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v16 < v13);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 16)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v13);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v13);
        }
        v8 = a1 + v15;
        if (v17 < (unint64_t)v18)
        {
          v21 = v18;
          do
          {
            v81 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v21;
            *(_OWORD *)v21 = v81;
            do
            {
              v22 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v22 < v13);
            do
            {
              v23 = *(v21 - 2);
              v21 -= 2;
            }
            while (v23 >= v13);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(double *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v14;
        if (v17 < (unint64_t)v18)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((__int128 *)a1, (double *)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((__int128 *)v8, a2))
        {
          if (v24)
            continue;
          goto LABEL_30;
        }
        a2 = (double *)(v8 - 16);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  void *v8;
  __n128 result;
  __n128 v10;
  uint64_t v11;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v10 = *(__n128 *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v7;
  v8 = *(void **)a2;
  *(_QWORD *)a2 = v4;

  result = v10;
  *(__n128 *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

double std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;
  double v7;
  uint64_t v8;

  v5 = a1;
  result = *(double *)(a2 + 24);
  v7 = *(double *)(a3 + 24);
  if (result < *(double *)(a1 + 24))
  {
    if (v7 >= result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1, a2);
      result = *(double *)(a3 + 24);
      if (result >= *(double *)(a2 + 24))
        return result;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a2, a3);
    result = *(double *)(a2 + 24);
    if (result < *(double *)(v5 + 24))
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1, v8).n128_u64[0];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[3])
      {
        v6 = (uint64_t)(a2 - 4);
        v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a2 - 4));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a2 - 4));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a1 + 12));
      if (*(a2 - 1) < a1[15])
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
        if (a1[15] < a1[11])
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)(a1 + 8), (uint64_t)(a1 + 12));
          if (a1[11] < a1[7])
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>((uint64_t)(a1 + 4), (uint64_t)(a1 + 8));
            if (a1[7] < a1[3])
            {
              v7 = (uint64_t)a1;
              v6 = (uint64_t)(a1 + 4);
LABEL_4:
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>((uint64_t)a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8));
      v9 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = v9[3];
    if (v12 < v8[3])
    {
      v13 = *(_QWORD *)v9;
      *v9 = 0.0;
      v20 = *(_OWORD *)(v9 + 1);
      v14 = v10;
      while (1)
      {
        v15 = (char *)a1 + v14;
        v16 = *(_QWORD *)((char *)a1 + v14 + 64);
        *((_QWORD *)v15 + 8) = 0;
        v17 = *(void **)((char *)a1 + v14 + 96);
        *((_QWORD *)v15 + 12) = v16;

        *(_OWORD *)(v15 + 104) = *(_OWORD *)(v15 + 72);
        *((_QWORD *)v15 + 15) = *((_QWORD *)v15 + 11);
        if (v14 == -64)
          break;
        v14 -= 32;
        if (v12 >= *((double *)v15 + 7))
        {
          v18 = (uint64_t)a1 + v14 + 96;
          goto LABEL_14;
        }
      }
      v18 = (uint64_t)a1;
LABEL_14:
      v19 = *(void **)v18;
      *(_QWORD *)v18 = v13;

      *(_OWORD *)(v15 + 72) = v20;
      *(double *)(v18 + 24) = v12;
      if (++v11 == 8)
        return v9 + 4 == a2;
    }
    v8 = v9;
    v10 += 32;
    v9 += 4;
    if (v9 == a2)
      return 1;
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKTiledView updateTilesForVisibleRectRendering:offscreen:overrideAdditionalStrokes:]::$_0 &,AttachmentTileInfo *>(a1, a2, a3);
  result = *(double *)(a4 + 24);
  if (result < *(double *)(a3 + 24))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a3, a4);
    result = *(double *)(a3 + 24);
    if (result < *(double *)(a2 + 24))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a2, a3);
      result = *(double *)(a2 + 24);
      if (result < *(double *)(a1 + 24))
        *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AttachmentTileInfo *&,AttachmentTileInfo *&>(a1, a2).n128_u64[0];
    }
  }
  return result;
}

void sub_1BE287C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1BE28AB14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BE292B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE293408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE293488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE293530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE293590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE293698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE29387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  objc_sync_exit(v9);

  _Unwind_Resume(a1);
}

void sub_1BE293A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE293B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE293CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE293E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE293FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE294158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2942BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29434C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29444C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE294760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE294AA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE294CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE294D9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double _PKVectorSafeGet(_QWORD *a1, int a2)
{
  unint64_t v2;

  v2 = ((uint64_t)(a1[1] - *a1) >> 3) - 1;
  if (v2 >= a2)
    v2 = a2;
  return *(double *)(*a1 + 8 * v2);
}

void _PKTriangularWindow(int a1, uint64_t a2)
{
  int v4;
  double v5;
  double v6;
  _QWORD *v7;
  double *v8;
  int v9;
  double v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;

  if (a1 >= 1)
  {
    v4 = 0;
    v5 = (double)a1;
    v6 = (float)(2.0 / (float)a1);
    v7 = (_QWORD *)(a2 + 16);
    v8 = *(double **)(a2 + 8);
    do
    {
      v9 = 2 * v4 - a1;
      if (v9 < 0)
        v9 = a1 - 2 * v4;
      v10 = (double)(a1 - v9) / v5 * v6;
      if ((unint64_t)v8 >= *v7)
      {
        v12 = *(double **)a2;
        v13 = ((uint64_t)v8 - *(_QWORD *)a2) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v15 = *v7 - (_QWORD)v12;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v7, v16);
          v12 = *(double **)a2;
          v8 = *(double **)(a2 + 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = (double *)&v17[8 * v13];
        *v18 = v10;
        v11 = v18 + 1;
        while (v8 != v12)
        {
          v19 = *((_QWORD *)v8-- - 1);
          *((_QWORD *)v18-- - 1) = v19;
        }
        *(_QWORD *)a2 = v18;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = &v17[8 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v8 = v10;
        v11 = v8 + 1;
      }
      *(_QWORD *)(a2 + 8) = v11;
      ++v4;
      v8 = v11;
    }
    while (v4 != a1);
  }
}

void _PKTrapezoidWindow(int a1, int a2, uint64_t a3)
{
  int v3;
  int v5;
  float v6;
  int v7;
  int v8;
  int v9;
  double v10;
  int v11;
  _QWORD *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  double *v26;
  double *v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  double *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  double *v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  double *v47;
  uint64_t v48;

  v3 = a1 - 1;
  if (a1 >= 1)
  {
    if ((a2 & ~(a2 >> 31)) < v3)
      v3 = a2 & ~(a2 >> 31);
    v5 = (((_BYTE)a1 - (_BYTE)v3) & 1) + v3;
    v7 = a1 - v5;
    if (a1 >= v5)
      v8 = a1 - v5;
    else
      v8 = v7 + 1;
    v9 = v8 >> 1;
    v6 = 2.0 / (double)(v5 + a1);
    v10 = v6;
    if (v7 > 1)
    {
      v11 = 0;
      v12 = (_QWORD *)(a3 + 16);
      v13 = *(double **)(a3 + 8);
      do
      {
        v14 = (double)v11 / (double)v9 * v10;
        if ((unint64_t)v13 >= *v12)
        {
          v16 = *(double **)a3;
          v17 = ((uint64_t)v13 - *(_QWORD *)a3) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
LABEL_65:
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v19 = *v12 - (_QWORD)v16;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v20);
            v16 = *(double **)a3;
            v13 = *(double **)(a3 + 8);
          }
          else
          {
            v21 = 0;
          }
          v22 = (double *)&v21[8 * v17];
          *v22 = v14;
          v15 = v22 + 1;
          while (v13 != v16)
          {
            v23 = *((_QWORD *)v13-- - 1);
            *((_QWORD *)v22-- - 1) = v23;
          }
          *(_QWORD *)a3 = v22;
          *(_QWORD *)(a3 + 8) = v15;
          *(_QWORD *)(a3 + 16) = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v13 = v14;
          v15 = v13 + 1;
        }
        *(_QWORD *)(a3 + 8) = v15;
        ++v11;
        v13 = v15;
      }
      while (v11 != v9);
    }
    if (v5 >= 1)
    {
      v24 = 0;
      v25 = (_QWORD *)(a3 + 16);
      v26 = *(double **)(a3 + 8);
      do
      {
        if ((unint64_t)v26 >= *v25)
        {
          v28 = *(double **)a3;
          v29 = ((uint64_t)v26 - *(_QWORD *)a3) >> 3;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
            goto LABEL_65;
          v31 = *v25 - (_QWORD)v28;
          if (v31 >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v32);
            v28 = *(double **)a3;
            v26 = *(double **)(a3 + 8);
          }
          else
          {
            v33 = 0;
          }
          v34 = (double *)&v33[8 * v29];
          *v34 = v10;
          v27 = v34 + 1;
          while (v26 != v28)
          {
            v35 = *((_QWORD *)v26-- - 1);
            *((_QWORD *)v34-- - 1) = v35;
          }
          *(_QWORD *)a3 = v34;
          *(_QWORD *)(a3 + 8) = v27;
          *(_QWORD *)(a3 + 16) = &v33[8 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v26 = v10;
          v27 = v26 + 1;
        }
        *(_QWORD *)(a3 + 8) = v27;
        ++v24;
        v26 = v27;
      }
      while (v24 != v5);
    }
    if (v7 > 1)
    {
      v36 = 0;
      v37 = (_QWORD *)(a3 + 16);
      v38 = *(double **)(a3 + 8);
      do
      {
        v39 = (1.0 - (double)v36 / (double)v9) * v10;
        if ((unint64_t)v38 >= *v37)
        {
          v41 = *(double **)a3;
          v42 = ((uint64_t)v38 - *(_QWORD *)a3) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_65;
          v44 = *v37 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v45);
            v41 = *(double **)a3;
            v38 = *(double **)(a3 + 8);
          }
          else
          {
            v46 = 0;
          }
          v47 = (double *)&v46[8 * v42];
          *v47 = v39;
          v40 = v47 + 1;
          while (v38 != v41)
          {
            v48 = *((_QWORD *)v38-- - 1);
            *((_QWORD *)v47-- - 1) = v48;
          }
          *(_QWORD *)a3 = v47;
          *(_QWORD *)(a3 + 8) = v40;
          *(_QWORD *)(a3 + 16) = &v46[8 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v38 = v39;
          v40 = v38 + 1;
        }
        *(_QWORD *)(a3 + 8) = v40;
        ++v36;
        v38 = v40;
      }
      while (v36 != v9);
    }
  }
}

void _PKConvolve(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double *v26;
  uint64_t v27;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v6 = 0;
    v7 = a3 + 16;
    do
    {
      v8 = a2[1] - *a2;
      if (v8)
      {
        v9 = 0;
        v10 = v8 >> 3;
        v11 = 0.0;
        do
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v25, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
          if (v9 >= (uint64_t)(a2[1] - *a2) >> 3)
            std::vector<double>::__throw_out_of_range[abi:ne180100]();
          v12 = v26 - v25 - 1;
          if ((v10 & 0x80000000) == 0)
            v13 = v10;
          else
            v13 = v10 + 1;
          if (v12 >= (int)v6 + (int)v9 - (v13 >> 1) + 1)
            v12 = (int)v6 + (int)v9 - (v13 >> 1) + 1;
          v11 = v11 + v25[v12] * *(double *)(*a2 + 8 * v9);
          v26 = v25;
          operator delete(v25);
          ++v9;
          v10 = (uint64_t)(a2[1] - *a2) >> 3;
        }
        while (v10 > v9);
      }
      else
      {
        v11 = 0.0;
      }
      v15 = *(double **)(a3 + 8);
      v14 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v15 >= v14)
      {
        v17 = *(double **)a3;
        v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v21);
          v17 = *(double **)a3;
          v15 = *(double **)(a3 + 8);
        }
        else
        {
          v22 = 0;
        }
        v23 = (double *)&v22[8 * v18];
        *v23 = v11;
        v16 = v23 + 1;
        while (v15 != v17)
        {
          v24 = *((_QWORD *)v15-- - 1);
          *((_QWORD *)v23-- - 1) = v24;
        }
        *(_QWORD *)a3 = v23;
        *(_QWORD *)(a3 + 8) = v16;
        *(_QWORD *)(a3 + 16) = &v22[8 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v15 = v11;
        v16 = v15 + 1;
      }
      *(_QWORD *)(a3 + 8) = v16;
      ++v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  }
}

void sub_1BE295834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _PKCurvature(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  double *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  double *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  unint64_t v49;
  double *v50;
  double *v51;
  double *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  double *v58;
  uint64_t v59;
  _BYTE v60[32];
  double *__p;
  double *v62;
  char *v63;

  __p = 0;
  v62 = 0;
  v63 = 0;
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      *(_OWORD *)&v60[16] = 0u;
      *(_QWORD *)v60 = 0;
      *(_OWORD *)&v60[8] = *(_OWORD *)(v2 + 16 * v6);
      if (v5 >= (double *)v63)
      {
        v7 = __p;
        v8 = 0x2E8BA2E8BA2E8BA3 * (v5 - __p);
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) > 0x2E8BA2E8BA2E8BALL)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        if (0x5D1745D1745D1746 * ((v63 - (char *)__p) >> 3) > v9)
          v9 = 0x5D1745D1745D1746 * ((v63 - (char *)__p) >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v63 - (char *)__p) >> 3)) >= 0x1745D1745D1745DLL)
          v10 = 0x2E8BA2E8BA2E8BALL;
        else
          v10 = v9;
        if (v10)
        {
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)&v63, v10);
          v7 = __p;
          v5 = v62;
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[88 * v8];
        *((_OWORD *)v12 + 2) = 0u;
        *((_OWORD *)v12 + 3) = 0u;
        *((_OWORD *)v12 + 4) = 0u;
        *((_QWORD *)v12 + 10) = 0;
        *(_OWORD *)v12 = *(_OWORD *)v60;
        *((_OWORD *)v12 + 1) = *(_OWORD *)&v60[16];
        if (v5 == v7)
        {
          v18 = &v11[88 * v8];
        }
        else
        {
          v13 = &v11[88 * v8];
          do
          {
            v14 = *(_OWORD *)(v5 - 11);
            *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 9);
            *(_OWORD *)(v13 - 88) = v14;
            v15 = *(_OWORD *)(v5 - 7);
            v16 = *(_OWORD *)(v5 - 5);
            v17 = *(_OWORD *)(v5 - 3);
            v18 = v13 - 88;
            *((double *)v13 - 1) = *(v5 - 1);
            *(_OWORD *)(v13 - 24) = v17;
            *(_OWORD *)(v13 - 40) = v16;
            *(_OWORD *)(v13 - 56) = v15;
            v5 -= 11;
            v13 -= 88;
          }
          while (v5 != v7);
        }
        v5 = (double *)(v12 + 88);
        __p = (double *)v18;
        v63 = &v11[88 * v10];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)v60;
        *((_OWORD *)v5 + 1) = *(_OWORD *)&v60[16];
        v5[10] = 0.0;
        *((_OWORD *)v5 + 3) = 0u;
        *((_OWORD *)v5 + 4) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        v5 += 11;
      }
      v62 = v5;
      ++v6;
      v2 = *a1;
      v19 = a1[1];
    }
    while (v6 < (v19 - *a1) >> 4);
    if (v19 != v2)
    {
      v20 = 0;
      v21 = (double *)MEMORY[0x1E0C9D538];
      v22 = -80;
      do
      {
        v23 = *v21;
        v24 = v21[1];
        v25 = -4;
        v26 = v22;
        do
        {
          if ((uint64_t)(v20 + v25 + 2) > -2)
          {
            v29 = v20 + v25 + 3;
            v30 = 0x2E8BA2E8BA2E8BA3 * (v62 - __p);
            v31 = v29 >= v30;
            if (v29 >= v30)
              v28 = v62 - 9;
            else
              v28 = (double *)((char *)__p + v26 + 8);
            if (v31)
              v27 = v62 - 10;
            else
              v27 = (double *)((char *)__p + v26);
          }
          else
          {
            v27 = __p + 1;
            v28 = __p + 2;
          }
          v32 = *v27;
          v33 = *v28;
          v34 = b2((int)v25 + 2, 0.0);
          v23 = v23 + v34 * v32;
          v24 = v24 + v34 * v33;
          v26 += 88;
          v31 = __CFADD__(v25++, 1);
        }
        while (!v31);
        v36 = *v21;
        v35 = v21[1];
        v37 = -4;
        v38 = v22;
        do
        {
          if ((uint64_t)(v20 + v37 + 2) > -2)
          {
            v41 = v20 + v37 + 3;
            v42 = 0x2E8BA2E8BA2E8BA3 * (v62 - __p);
            v43 = v41 >= v42;
            if (v41 >= v42)
              v40 = v62 - 9;
            else
              v40 = (double *)((char *)__p + v38 + 8);
            if (v43)
              v39 = v62 - 10;
            else
              v39 = (double *)((char *)__p + v38);
          }
          else
          {
            v39 = __p + 1;
            v40 = __p + 2;
          }
          v44 = *v39;
          v45 = *v40;
          v46 = b3((int)v37 + 2, 0.0);
          v36 = v36 + v46 * v44;
          v35 = v35 + v46 * v45;
          v38 += 88;
          v31 = __CFADD__(v37++, 1);
        }
        while (!v31);
        v47 = pow(v24 * v24 + v23 * v23, 1.5);
        if (v47 <= 0.001)
          v48 = 100.0;
        else
          v48 = fabs((v23 * v35 - v24 * v36) / v47);
        v50 = *(double **)(a2 + 8);
        v49 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v50 >= v49)
        {
          v52 = *(double **)a2;
          v53 = ((uint64_t)v50 - *(_QWORD *)a2) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v55 = v49 - (_QWORD)v52;
          if (v55 >> 2 > v54)
            v54 = v55 >> 2;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 16, v56);
            v52 = *(double **)a2;
            v50 = *(double **)(a2 + 8);
          }
          else
          {
            v57 = 0;
          }
          v58 = (double *)&v57[8 * v53];
          *v58 = v48;
          v51 = v58 + 1;
          while (v50 != v52)
          {
            v59 = *((_QWORD *)v50-- - 1);
            *((_QWORD *)v58-- - 1) = v59;
          }
          *(_QWORD *)a2 = v58;
          *(_QWORD *)(a2 + 8) = v51;
          *(_QWORD *)(a2 + 16) = &v57[8 * v56];
          if (v52)
            operator delete(v52);
        }
        else
        {
          *v50 = v48;
          v51 = v50 + 1;
        }
        *(_QWORD *)(a2 + 8) = v51;
        ++v20;
        v22 += 88;
      }
      while (v20 < (a1[1] - *a1) >> 4);
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_1BE295CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PKSmoothedCurvature(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&v12, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  _PKCurvature((uint64_t *)&v12, (uint64_t)&v15);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  _PKTrapezoidWindow(15, 5, (uint64_t)&v9);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v6, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 3);
  __p = 0;
  v4 = 0;
  v5 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, v9, (uint64_t)v10, (v10 - (_BYTE *)v9) >> 3);
  _PKConvolve((uint64_t)&v6, &__p, a2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_1BE295DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  v19 = *(void **)(v17 - 40);
  if (v19)
  {
    *(_QWORD *)(v17 - 32) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void PKIntegrate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  uint64_t v17;

  v2 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 16);
    v7 = *(double **)(a2 + 8);
    v8 = 0.0;
    do
    {
      v8 = v8 + *(double *)(v2 + 8 * v5);
      if ((unint64_t)v7 >= *v6)
      {
        v10 = *(double **)a2;
        v11 = ((uint64_t)v7 - *(_QWORD *)a2) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v13 = *v6 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v14);
          v10 = *(double **)a2;
          v7 = *(double **)(a2 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = (double *)&v15[8 * v11];
        *v16 = v8;
        v9 = v16 + 1;
        while (v7 != v10)
        {
          v17 = *((_QWORD *)v7-- - 1);
          *((_QWORD *)v16-- - 1) = v17;
        }
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v9;
        *(_QWORD *)(a2 + 16) = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v7 = v8;
        v9 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v9;
      ++v5;
      v2 = *a1;
      v7 = v9;
    }
    while (v5 < (a1[1] - *a1) >> 3);
  }
}

double PKInterpolatedValue(uint64_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  unint64_t v6;
  signed int v7;
  int v8;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 3;
  v4 = (double)(unint64_t)v3 * a2;
  if (v4 < 0.0)
    return *(double *)v2;
  v6 = v3 - 1;
  if (v4 > (double)v6)
    return *(double *)(v2 + 8 * v6);
  v7 = vcvtmd_s64_f64(v4);
  v8 = vcvtpd_s64_f64(v4);
  if (v7 == v8)
    return *(double *)(v2 + 8 * v7);
  else
    return (1.0 - ((double)v8 - v4)) * *(double *)(v2 + 8 * v8) + ((double)v8 - v4) * *(double *)(v2 + 8 * v7);
}

void PKRunningStat::PKRunningStat(PKRunningStat *this, BOOL a2)
{
  this->isAngle = a2;
  this->limit = 0.0;
  this->lock._os_unfair_lock_opaque = 0;
  this->numValues = 0;
  this->numValuesOverLimit = 0;
}

{
  this->isAngle = a2;
  this->limit = 0.0;
  this->lock._os_unfair_lock_opaque = 0;
  this->numValues = 0;
  this->numValuesOverLimit = 0;
}

void PKRunningStat::clear(PKRunningStat *this, double a2)
{
  os_unfair_lock_s *p_lock;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  this->numValues = 0;
  this->numValuesOverLimit = 0;
  this->limit = a2;
  os_unfair_lock_unlock(p_lock);
}

void PKRunningStat::push(PKRunningStat *this, long double a2)
{
  os_unfair_lock_s *p_lock;
  int64_t numValues;
  uint64_t v6;
  double minValue;
  double maxValue;
  long double oldM;
  double v10;
  double v11;
  double oldS;
  double v13;
  double v14;
  double v15;
  double v16;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  numValues = this->numValues;
  v6 = numValues + 1;
  this->numValues = numValues + 1;
  if (this->limit < a2)
    ++this->numValuesOverLimit;
  if (numValues)
  {
    minValue = this->minValue;
    maxValue = this->maxValue;
    if (minValue > a2)
      minValue = a2;
    if (maxValue < a2)
      maxValue = a2;
    this->minValue = minValue;
    this->maxValue = maxValue;
    oldM = this->oldM;
    if (this->isAngle)
    {
      DKDMixAnglesInRadians(this->oldM, a2, 1.0 / (double)v6);
      v11 = v10;
      oldS = this->oldS;
      DKDDiffAngleInRadians(a2, oldM);
      v14 = v13;
      DKDDiffAngleInRadians(a2, v11);
      v16 = oldS + v14 * v15;
      a2 = v11;
    }
    else
    {
      v16 = this->oldS + (a2 - oldM) * (a2 - (oldM + (a2 - oldM) / (double)v6));
      a2 = oldM + (a2 - oldM) / (double)v6;
    }
    this->newM = a2;
    this->newS = v16;
  }
  else
  {
    this->minValue = a2;
    this->maxValue = a2;
    v16 = 0.0;
    this->newM = a2;
  }
  this->oldM = a2;
  this->oldS = v16;
  os_unfair_lock_unlock(p_lock);
}

uint64_t PKRunningStat::count(PKRunningStat *this)
{
  os_unfair_lock_s *p_lock;
  int64_t numValues;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  numValues = this->numValues;
  os_unfair_lock_unlock(p_lock);
  return numValues;
}

uint64_t PKRunningStat::countOverLimit(PKRunningStat *this)
{
  os_unfair_lock_s *p_lock;
  int64_t numValuesOverLimit;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  numValuesOverLimit = this->numValuesOverLimit;
  os_unfair_lock_unlock(p_lock);
  return numValuesOverLimit;
}

double PKRunningStat::min(PKRunningStat *this)
{
  os_unfair_lock_s *p_lock;
  double minValue;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  if (this->numValues < 1)
    minValue = 0.0;
  else
    minValue = this->minValue;
  os_unfair_lock_unlock(p_lock);
  return minValue;
}

double PKRunningStat::max(PKRunningStat *this)
{
  os_unfair_lock_s *p_lock;
  double maxValue;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  if (this->numValues < 1)
    maxValue = 0.0;
  else
    maxValue = this->maxValue;
  os_unfair_lock_unlock(p_lock);
  return maxValue;
}

double PKRunningStat::mean(PKRunningStat *this)
{
  os_unfair_lock_s *p_lock;
  double newM;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  if (this->numValues < 1)
    newM = 0.0;
  else
    newM = this->newM;
  os_unfair_lock_unlock(p_lock);
  return newM;
}

double PKRunningStat::variance(PKRunningStat *this)
{
  os_unfair_lock_s *p_lock;
  int64_t numValues;
  double v4;

  p_lock = &this->lock;
  os_unfair_lock_lock(&this->lock);
  numValues = this->numValues;
  v4 = 0.0;
  if (numValues >= 2)
    v4 = this->newS / (double)(numValues - 1);
  os_unfair_lock_unlock(p_lock);
  return v4;
}

double PKRunningStat::standardDeviation(PKRunningStat *this)
{
  return sqrt(PKRunningStat::variance(this));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE2963FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<double>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7770A60, MEMORY[0x1E0DE42E0]);
}

void sub_1BE2964A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

_QWORD *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE296584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double legacy_drawing::VectorTimestampClock::VectorTimestampClock(legacy_drawing::VectorTimestampClock *this)
{
  double result;

  *(_QWORD *)this = &off_1E7774670;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7774670;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void legacy_drawing::VectorTimestampClock::~VectorTimestampClock(void ***this)
{
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;

  *this = (void **)&off_1E7774670;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 4, 0);
  v2 = this[1];
  if (v2)
  {
    v3 = this[2];
    v4 = this[1];
    if (v3 != v2)
    {
      do
      {
        v6 = (uint64_t)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = this[1];
    }
    this[2] = v2;
    operator delete(v4);
  }
  PB::Base::~Base((PB::Base *)this);
}

{
  legacy_drawing::VectorTimestampClock::~VectorTimestampClock(this);
  JUMPOUT(0x1C3B7F770);
}

legacy_drawing::VectorTimestampClock *legacy_drawing::VectorTimestampClock::VectorTimestampClock(legacy_drawing::VectorTimestampClock *this, const PB::Data **a2)
{
  uint64_t **v4;
  PB::Data *v5;
  uint64_t *v6;
  uint64_t *v7;
  void **v9;

  *(_QWORD *)this = &off_1E7774670;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2[4])
  {
    v5 = (PB::Data *)operator new();
    PB::Data::Data(v5, a2[4]);
    v9 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 4, (void **)v5);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v9, 0);
  }
  v7 = (uint64_t *)a2[1];
  v6 = (uint64_t *)a2[2];
  while (v7 != v6)
    PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<legacy_drawing::VectorTimestampClockReplicaClock const&>(v4, *v7++);
  return this;
}

uint64_t PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<legacy_drawing::VectorTimestampClockReplicaClock const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_1E77746A8;
  *(_DWORD *)(v4 + 16) = 0;
  v6 = *(_BYTE *)(a2 + 16);
  if ((v6 & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(v4 + 16) = 1;
    *(_DWORD *)(v4 + 8) = v8;
    v7 = 3;
    if ((v6 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    v9 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(v4 + 16) = v7;
    *(_DWORD *)(v4 + 12) = v9;
  }
LABEL_6:
  result = (uint64_t)(a1 + 2);
  v11 = (unint64_t)a1[2];
  v12 = a1[1];
  if ((unint64_t)v12 >= v11)
  {
    v14 = v12 - *a1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v15 = v11 - (_QWORD)*a1;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v29 = a1 + 2;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v17);
    else
      v18 = 0;
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    v28 = v20;
    *v19 = v5;
    v13 = v19 + 1;
    v27.i64[1] = (uint64_t)(v19 + 1);
    v22 = *a1;
    v21 = a1[1];
    if (v21 == *a1)
    {
      v24 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      do
      {
        v23 = *--v21;
        *v21 = 0;
        *--v19 = v23;
      }
      while (v21 != v22);
      v24 = *(int64x2_t *)a1;
      v13 = (uint64_t *)v27.i64[1];
      v20 = v28;
    }
    *a1 = v19;
    a1[1] = v13;
    v27 = v24;
    v25 = (char *)a1[2];
    a1[2] = (uint64_t *)v20;
    v28 = v25;
    v26 = v24.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    *v12 = v5;
    v13 = v12 + 1;
  }
  a1[1] = v13;
  return result;
}

void sub_1BE29874C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestampClock::operator=(uint64_t a1, const PB::Data **a2)
{
  __int128 v3;
  __int128 v4;
  void **v6;
  __int128 v7;
  __int128 v8;

  if ((const PB::Data **)a1 != a2)
  {
    legacy_drawing::VectorTimestampClock::VectorTimestampClock((legacy_drawing::VectorTimestampClock *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    legacy_drawing::VectorTimestampClock::~VectorTimestampClock(&v6);
  }
  return a1;
}

_QWORD *legacy_drawing::swap(_QWORD *this, legacy_drawing::VectorTimestampClock *a2, legacy_drawing::VectorTimestampClock *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t legacy_drawing::VectorTimestampClock::VectorTimestampClock(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E7774670;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(void ***)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 32), v5);
  v6 = (_QWORD *)*v4;
  if (*v4)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = (_QWORD *)*v4;
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v6);
      v8 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t legacy_drawing::VectorTimestampClock::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void **v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    legacy_drawing::VectorTimestampClock::VectorTimestampClock((uint64_t)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v7 = v3;
    v8 = v4;
    legacy_drawing::VectorTimestampClock::~VectorTimestampClock(&v6);
  }
  return a1;
}

uint64_t legacy_drawing::VectorTimestampClock::formatText(legacy_drawing::VectorTimestampClock *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "replicaClock");
  }
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::VectorTimestampClock::readFrom(legacy_drawing::VectorTimestampClock *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  void ***v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void **v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    v9 = (void ***)((char *)this + 32);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_25;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<>(v8);
        v23 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v13 >> 3) == 1)
      {
        v21 = operator new();
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        v24 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v9, (void **)v21);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](&v24, 0);
        PB::Reader::read(a2, (PB::Data *)*v9);
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
      if (v16)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E77746A8;
  *(_DWORD *)(v2 + 16) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE298CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestampClock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Data *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(const PB::Data **)(this + 32);
  if (v4)
    this = PB::Writer::write(a2, v4);
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

BOOL legacy_drawing::VectorTimestampClock::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v4 && ((PB::Data::operator==() & 1) != 0 || !(*(_QWORD *)(a1 + 32) | *(_QWORD *)(a2 + 32))))
      return PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::operator==((uint64_t *)(a1 + 8), a2 + 8);
  }
  else if (!v4)
  {
    return PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::operator==((uint64_t *)(a1 + 8), a2 + 8);
  }
  return 0;
}

BOOL PB::PtrVector<legacy_drawing::VectorTimestampClockReplicaClock>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = legacy_drawing::VectorTimestampClockReplicaClock::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t legacy_drawing::VectorTimestampClock::hash_value(legacy_drawing::VectorTimestampClock *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_QWORD *)this + 4))
    v2 = PBHashBytes();
  else
    v2 = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  if (v3 != v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *v3;
      if ((*(_BYTE *)(*v3 + 16) & 1) != 0)
      {
        v7 = *(unsigned int *)(v6 + 8);
        if ((*(_BYTE *)(*v3 + 16) & 2) == 0)
        {
LABEL_10:
          v8 = 0;
          goto LABEL_11;
        }
      }
      else
      {
        v7 = 0;
        if ((*(_BYTE *)(*v3 + 16) & 2) == 0)
          goto LABEL_10;
      }
      v8 = *(unsigned int *)(v6 + 12);
LABEL_11:
      v5 ^= v7 ^ v8;
      if (++v3 == v4)
        return v5 ^ v2;
    }
  }
  v5 = 0;
  return v5 ^ v2;
}

void ***std::unique_ptr<PB::Data>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x1C3B7F770);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE299128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1BE299364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE299510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2995AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE299674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE299748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2997C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE299930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE299AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE299B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE299CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE299E88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE29A0F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE29A21C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29A30C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29A498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE29A664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE29A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE29AB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE29AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE29ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE29AF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE29B014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29B0EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29B1B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29B284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE29B314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE29B394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE29B460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE29B530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE29B5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1BE29B6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE29B7CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE29B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE29BB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE29BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE29BFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE29C5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE29C778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE29C808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE29C964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE29CA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE29CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE29CE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100]((PB::Writer ***)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E7774C90;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

PB::Writer ***std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100](PB::Writer ***result, PB::Writer **a2)
{
  PB::Writer **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<PB::Writer>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x1C3B7F770);
  }
  return result;
}

void std::__shared_ptr_pointer<PKProtobufUnknownFields  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B7F770);
}

uint64_t std::__shared_ptr_pointer<PKProtobufUnknownFields  *>::__on_zero_shared(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
  {
    std::unique_ptr<PB::Writer>::reset[abi:ne180100](*(PB::Writer ***)(result + 24), 0);
    JUMPOUT(0x1C3B7F770);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PKProtobufUnknownFields  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1BE2A2604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A2700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PKTiledCanvasView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE2A2874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A29E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A2A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A2CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A2D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A2EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A30EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A3288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A35D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A36B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A3B10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A3D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A3F84(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BE2A4024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A4088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A4170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A42A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A43A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A457C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A5228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1BE2A5424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A5490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A54F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A55D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE2A5754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE2A5A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  _Unwind_Resume(a1);
}

void sub_1BE2A5BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A5C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A5D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A5E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A605C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A6180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2A623C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A62CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A638C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A6420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A6470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A64B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A6550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A65CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A6670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A66F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A6870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A6B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A7040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2A7154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A7208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2A72A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2A73A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2A7488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void LogTouchIfEnabled(UITouch *a1, int a2)
{
  UITouch *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const __CFString *v17;
  void *v18;
  int v19;
  const __CFString *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    if (qword_1EF560408 != -1)
      dispatch_once(&qword_1EF560408, &__block_literal_global_819);
    if (_MergedGlobals_281)
    {
      -[UITouch timestamp](v3, "timestamp");
      v5 = v4;
      -[UITouch preciseLocationInView:](v3, "preciseLocationInView:", 0);
      v7 = v6;
      v9 = v8;
      -[UITouch azimuthAngleInView:](v3, "azimuthAngleInView:", 0);
      v11 = v10;
      -[UITouch altitudeAngle](v3, "altitudeAngle");
      v13 = v12;
      -[UITouch force](v3, "force");
      v15 = v14;
      v16 = os_log_create("com.apple.pencilkit", "PencilKit Touch Events");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
          v17 = CFSTR("Update");
        else
          v17 = CFSTR("Touch");
        -[UITouch estimationUpdateIndex](v3, "estimationUpdateIndex");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138414082;
        v20 = v17;
        v21 = 2048;
        v22 = v5;
        v23 = 2048;
        v24 = v7;
        v25 = 2048;
        v26 = v9;
        v27 = 2048;
        v28 = v11;
        v29 = 2048;
        v30 = v13;
        v31 = 2048;
        v32 = v15;
        v33 = 2048;
        v34 = objc_msgSend(v18, "unsignedIntegerValue");
        _os_log_impl(&dword_1BE213000, v16, OS_LOG_TYPE_DEFAULT, "%@: Timestamp: %.4f, location: %.3f %.3f, azimuth: %g, altitude: %g, force: %g, updateCorrelationToken: %lu", (uint8_t *)&v19, 0x52u);

      }
    }
  }

}

void sub_1BE2A7684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2A81EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void std::vector<PKInputPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 7;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 7);
  }
  else
  {
    std::vector<PKInputPoint>::__append((void **)a1, a2 - v2);
  }
}

void sub_1BE2A8498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A8638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A87BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2A88E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2A965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v68;
  void *v69;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<PKInputPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 7)
  {
    if (a2 >> 57)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    v9 = &v6[128 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 8);
        v14 = *((_OWORD *)v10 - 7);
        v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        v16 = *((_OWORD *)v10 - 4);
        v17 = *((_OWORD *)v10 - 3);
        v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1BE2A9CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2A9F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2AA618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE2AAF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE2AB328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  id *v20;
  void *v21;

  objc_destroyWeak(v20);
  _Unwind_Resume(a1);
}

void sub_1BE2AB504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2AB6C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2ABA70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2ABBAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2ABC58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2ABED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2AC058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE2AC8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE2AC9DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2ACBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2ACE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2ACF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2AD0E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2AD1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2AD304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2AD3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2AD6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE2AD7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2ADC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2ADD8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2AE01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_1BE2AE138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2AE324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE2AE768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AE7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AE8A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AEAC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2AEE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  id *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  objc_destroyWeak(v30);
  objc_destroyWeak((id *)(v34 - 128));

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__158(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__159(uint64_t a1)
{

}

void sub_1BE2AF27C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE2AF380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2AF41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2AF4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2AF554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2AF818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2AF8E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AF95C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AFA6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2AFAF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2AFE14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2AFF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2AFFB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL22PKShouldLogTouchEventsv_block_invoke()
{
  id v0;

  if (os_variant_has_internal_diagnostics())
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v0 = (id)objc_claimAutoreleasedReturnValue();
    _MergedGlobals_281 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PKLogTouchEventsInPencilKit"));

  }
  else
  {
    _MergedGlobals_281 = 0;
  }
}

void sub_1BE2B08C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<PKInputPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += 128 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 7);
    if (v9 >> 57)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 7;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 6 > v9)
      v9 = v11 >> 6;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80)
      v12 = 0x1FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[128 * v10];
    v15 = &v13[128 * v12];
    bzero(v14, a2 << 7);
    v16 = &v14[128 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 8);
        v20 = *((_OWORD *)v17 - 7);
        v21 = *((_OWORD *)v17 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v17 - 6);
        *((_OWORD *)v14 - 5) = v21;
        *((_OWORD *)v14 - 8) = v19;
        *((_OWORD *)v14 - 7) = v20;
        v22 = *((_OWORD *)v17 - 4);
        v23 = *((_OWORD *)v17 - 3);
        v24 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v24;
        *((_OWORD *)v14 - 4) = v22;
        *((_OWORD *)v14 - 3) = v23;
        v14 -= 128;
        v17 -= 128;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 7);
}

void ___ZL25PKRenderFullStrokePreviewv_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EF560401 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PKRenderFullStrokePreview"));

}

void sub_1BE2B0A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL29PKRenderAfterTouchRollUpdatesv_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EF560402 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PKRenderAfterTouchRollUpdates"));

}

void sub_1BE2B0AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<PKInputPoint>::__init_with_size[abi:ne180100]<PKInputPoint*,PKInputPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<PKInputPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE2B0B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PKInputPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void ___ZL34PKAlwaysRenderLiveStrokesAsPreviewv_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EF560403 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PKAlwaysRenderLiveStrokesAsPreview"));

}

void sub_1BE2B0BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2B0D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2B0D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2B0DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2B0E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKTitleQuery;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE2B0E9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2B0FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE2B1220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2B28C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2B296C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE2B65CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BE2B7AC8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1BE2B9098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2B924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PKSpecificCast(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "isMemberOfClass:", a1))
    v5 = v4;
  else
    v5 = 0;

  return v5;
}

id PKProtocolCast(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4 && objc_msgSend(v4, "conformsToProtocol:", v3))
    v6 = v5;
  else
    v6 = 0;

  return v6;
}

id PKClassAndProtocolCast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t *v11;
  id v12;
  uint64_t *v14;

  v10 = a1;
  if (!v10 || (objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v14 = &a9;
  if (a3)
  {
    do
    {
      v11 = v14++;
      if ((objc_msgSend(v10, "conformsToProtocol:", *v11) & 1) == 0)
        goto LABEL_7;
    }
    while (--a3);
  }
  v12 = v10;
LABEL_8:

  return v12;
}

CFTypeRef PKCFTypeCast(uint64_t a1, CFTypeRef cf)
{
  if (!cf)
    return 0;
  if (CFGetTypeID(cf) == a1)
    return cf;
  return 0;
}

id PKCheckedProtocolCast(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v10;
  const char *Name;
  int v12;
  id v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v5 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl(&dword_1BE213000, v5, OS_LOG_TYPE_ERROR, "Protocol is nil", (uint8_t *)&v12, 2u);
    }

  }
  PKProtocolCast(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v4 && !v6)
  {
    v8 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = (id)objc_opt_class();
      if (v3)
        Name = protocol_getName((Protocol *)v3);
      else
        Name = "<No protocol supplied>";
      v12 = 138412546;
      v13 = v10;
      v14 = 2080;
      v15 = Name;
      _os_log_error_impl(&dword_1BE213000, v8, OS_LOG_TYPE_ERROR, "Unexpected object type in checked protocol cast %@ expects %s", (uint8_t *)&v12, 0x16u);

    }
  }

  return v7;
}

void sub_1BE2BCC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2BEE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a67;
  id *v67;

  objc_destroyWeak(v67);
  _Block_object_dispose(&a39, 8);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(&a67);
  _Unwind_Resume(a1);
}

void sub_1BE2C0178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  id *v10;

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double drawing::Stroke::Stroke(drawing::Stroke *this)
{
  double result;

  *(_QWORD *)this = &off_1E77749B8;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E77749B8;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  return result;
}

void drawing::Stroke::~Stroke(drawing::Stroke *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &off_1E77749B8;
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v10 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 15, 0);
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 11, 0);
  v10 = (void **)((char *)this + 64);
  std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 5, 0);
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  drawing::Stroke::~Stroke(this);
  JUMPOUT(0x1C3B7F770);
}

drawing::Stroke *drawing::Stroke::Stroke(drawing::Stroke *this, const drawing::Stroke *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  void ***v7;
  drawing::Stroke ***v8;
  PB::Data *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  drawing::StrokeData *v17;
  drawing::StrokeData *v18;
  uint64_t v19;
  drawing::Rectangle *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  drawing::Transform *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const drawing::Stroke **v32;
  const drawing::Stroke **v33;
  _BYTE *v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  void *v47;
  char *v48;
  PB::Data *v49;
  uint64_t v50;
  drawing::Transform *v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  PB::Data *v55;
  void ***v57;
  void ***v58;
  void **v59;

  *(_QWORD *)this = &off_1E77749B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 5) = 0;
  v58 = (void ***)((char *)this + 40);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (uint64_t *)((char *)this + 56);
  *((_QWORD *)this + 11) = 0;
  v57 = (void ***)((char *)this + 88);
  *((_QWORD *)this + 13) = 0;
  v6 = (uint64_t *)((char *)this + 104);
  *((_QWORD *)this + 15) = 0;
  v7 = (void ***)((char *)this + 120);
  *(_OWORD *)((char *)this + 136) = 0u;
  v8 = (drawing::Stroke ***)((char *)this + 136);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]((_QWORD *)this + 24, (uint64_t *)a2 + 24);
  *((_DWORD *)this + 46) = 0;
  if (*((_QWORD *)a2 + 15))
  {
    v9 = (PB::Data *)operator new();
    PB::Data::Data(v9, *((const PB::Data **)a2 + 15));
    v59 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v7, (void **)v9);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v59, 0);
  }
  if (*((_QWORD *)a2 + 13))
  {
    v10 = operator new();
    v11 = drawing::StrokeID::StrokeID(v10, *((const drawing::StrokeID **)a2 + 13));
    v12 = *v6;
    *v6 = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 22))
  {
    v13 = operator new();
    v14 = drawing::StrokeID::StrokeID(v13, *((const drawing::StrokeID **)a2 + 22));
    v15 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if ((*((_BYTE *)a2 + 184) & 1) != 0)
  {
    v16 = *((_QWORD *)a2 + 6);
    *((_BYTE *)this + 184) |= 1u;
    *((_QWORD *)this + 6) = v16;
  }
  if (*((_QWORD *)a2 + 14))
  {
    v17 = (drawing::StrokeData *)operator new();
    v18 = drawing::StrokeData::StrokeData(v17, *((const drawing::StrokeData **)a2 + 14));
    v19 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v20 = (drawing::Rectangle *)operator new();
    v21 = drawing::Rectangle::Rectangle(v20, *((const drawing::Rectangle **)a2 + 4));
    v22 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v23;
    if (v22)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v22 + 8))(v22, v21);
  }
  if (*((_QWORD *)a2 + 21))
  {
    v24 = (drawing::Transform *)operator new();
    v25 = drawing::Transform::Transform(v24, *((const drawing::Transform **)a2 + 21));
    v26 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v27;
    if (v26)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v26 + 8))(v26, v25);
  }
  if ((*((_BYTE *)a2 + 184) & 4) != 0)
  {
    v28 = *((_QWORD *)a2 + 16);
    *((_BYTE *)this + 184) |= 4u;
    *((_QWORD *)this + 16) = v28;
  }
  if (*((_QWORD *)a2 + 20))
  {
    v29 = operator new();
    v30 = drawing::StrokeID::StrokeID(v29, *((const drawing::StrokeID **)a2 + 20));
    v31 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v30;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  if (this != a2)
    std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>((uint64_t)this + 64, *((PB::Data **)a2 + 8), *((PB::Data **)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4);
  v32 = (const drawing::Stroke **)*((_QWORD *)a2 + 17);
  v33 = (const drawing::Stroke **)*((_QWORD *)a2 + 18);
  while (v32 != v33)
    PB::PtrVector<drawing::Stroke>::emplace_back<drawing::Stroke const&>(v8, *v32++);
  if (this != a2)
  {
    v35 = (char *)*((_QWORD *)a2 + 1);
    v34 = (_BYTE *)*((_QWORD *)a2 + 2);
    v36 = v34 - v35;
    v37 = (v34 - v35) >> 2;
    v38 = *((_QWORD *)this + 3);
    v39 = (char *)*((_QWORD *)this + 1);
    if (v37 <= (v38 - (uint64_t)v39) >> 2)
    {
      v42 = (void **)((char *)this + 16);
      v44 = (_BYTE *)*((_QWORD *)this + 2);
      v45 = (v44 - v39) >> 2;
      if (v45 < v37)
      {
        v46 = &v35[4 * v45];
        if (v44 != v39)
        {
          memmove(*((void **)this + 1), *((const void **)a2 + 1), v44 - v39);
          v39 = (char *)*v42;
        }
        v36 = v34 - v46;
        if (v34 == v46)
          goto LABEL_50;
        v47 = v39;
        v48 = v46;
        goto LABEL_49;
      }
    }
    else
    {
      if (v39)
      {
        *((_QWORD *)this + 2) = v39;
        operator delete(v39);
        v38 = 0;
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v36 & 0x8000000000000000) != 0)
        goto LABEL_61;
      v40 = v38 >> 1;
      if (v38 >> 1 <= v37)
        v40 = (v34 - v35) >> 2;
      v41 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v40;
      if (v41 >> 62)
LABEL_61:
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 24, v41);
      *((_QWORD *)this + 2) = v39;
      v42 = (void **)((char *)this + 16);
      *((_QWORD *)this + 1) = v39;
      *((_QWORD *)this + 3) = &v39[4 * v43];
    }
    if (v34 == v35)
    {
LABEL_50:
      *v42 = &v39[v36];
      goto LABEL_51;
    }
    v47 = v39;
    v48 = v35;
LABEL_49:
    memmove(v47, v48, v36);
    goto LABEL_50;
  }
LABEL_51:
  if (*((_QWORD *)a2 + 5))
  {
    v49 = (PB::Data *)operator new();
    PB::Data::Data(v49, *((const PB::Data **)a2 + 5));
    v59 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v58, (void **)v49);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v59, 0);
  }
  if ((*((_BYTE *)a2 + 184) & 2) != 0)
  {
    v50 = *((_QWORD *)a2 + 12);
    *((_BYTE *)this + 184) |= 2u;
    *((_QWORD *)this + 12) = v50;
  }
  if (*((_QWORD *)a2 + 7))
  {
    v51 = (drawing::Transform *)operator new();
    v52 = drawing::Transform::Transform(v51, *((const drawing::Transform **)a2 + 7));
    v53 = *v5;
    *v5 = v54;
    if (v53)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v53 + 8))(v53, v52);
  }
  if (*((_QWORD *)a2 + 11))
  {
    v55 = (PB::Data *)operator new();
    PB::Data::Data(v55, *((const PB::Data **)a2 + 11));
    v59 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v57, (void **)v55);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v59, 0);
  }
  return this;
}

uint64_t PB::PtrVector<drawing::Stroke>::emplace_back<drawing::Stroke const&>(drawing::Stroke ***a1, const drawing::Stroke *a2)
{
  drawing::Stroke *v4;
  uint64_t result;
  unint64_t v6;
  drawing::Stroke **v7;
  drawing::Stroke **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  drawing::Stroke **v14;
  char *v15;
  drawing::Stroke **v16;
  drawing::Stroke **v17;
  drawing::Stroke *v18;
  int64x2_t v19;
  drawing::Stroke **v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = (drawing::Stroke *)operator new();
  drawing::Stroke::Stroke(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v12);
    else
      v13 = 0;
    v14 = (drawing::Stroke **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (drawing::Stroke **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (drawing::Stroke **)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1BE2C0D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t drawing::Stroke::operator=(uint64_t a1, const drawing::Stroke *a2)
{
  drawing::Stroke *v3;
  _BYTE v5[208];

  if ((const drawing::Stroke *)a1 != a2)
  {
    drawing::Stroke::Stroke((drawing::Stroke *)v5, a2);
    drawing::swap(a1, (drawing::Stroke *)v5, v3);
    drawing::Stroke::~Stroke((drawing::Stroke *)v5);
  }
  return a1;
}

uint64_t drawing::swap(uint64_t this, drawing::Stroke *a2, drawing::Stroke *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(this + 192);
  *(_QWORD *)(this + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v3;
  v4 = *(_QWORD *)(this + 200);
  *(_QWORD *)(this + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 184);
  *(_DWORD *)(this + 184) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v4;
  v5 = *(_QWORD *)(this + 120);
  *(_QWORD *)(this + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v5;
  v6 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v6;
  v7 = *(_QWORD *)(this + 176);
  *(_QWORD *)(this + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v7;
  v8 = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v8;
  v9 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *(_QWORD *)(this + 168);
  *(_QWORD *)(this + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v10;
  v11 = *(_QWORD *)(this + 160);
  *(_QWORD *)(this + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v11;
  v12 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v14;
  v15 = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v15;
  v16 = *(_QWORD *)(this + 144);
  *(_QWORD *)(this + 144) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v16;
  v17 = *(_QWORD *)(this + 152);
  *(_QWORD *)(this + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v17;
  v18 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v18;
  v19 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v19;
  v20 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v22 = *(_QWORD *)(this + 40);
  v21 = *(_QWORD *)(this + 48);
  v23 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(this + 48) = v23;
  *((_QWORD *)a2 + 6) = v21;
  v24 = *(_QWORD *)(this + 128);
  *(_QWORD *)(this + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v24;
  *((_QWORD *)a2 + 5) = v22;
  v25 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v25;
  v27 = *(_QWORD *)(this + 88);
  v26 = *(_QWORD *)(this + 96);
  v28 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(this + 96) = v28;
  *((_QWORD *)a2 + 11) = v27;
  *((_QWORD *)a2 + 12) = v26;
  return this;
}

uint64_t drawing::Stroke::Stroke(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void ***v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  *(_QWORD *)a1 = &off_1E77749B8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (void ***)(a1 + 40);
  *(_OWORD *)(a1 + 136) = 0u;
  v6 = (_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](a1 + 192, (__int128 *)(a2 + 192));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 184) = 0;
  v7 = *(void ***)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 120), v7);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v11 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v17 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v19 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  std::vector<PB::Data>::__vdeallocate((void **)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(v6);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v20 = *(void **)(a1 + 8);
  if (v20)
  {
    *(_QWORD *)(a1 + 16) = v20;
    operator delete(v20);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v21 = *(void ***)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, v21);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(void ***)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 88), v24);
  return a1;
}

uint64_t std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t drawing::Stroke::operator=(uint64_t a1, uint64_t a2)
{
  drawing::Stroke *v3;
  _BYTE v5[208];

  if (a1 != a2)
  {
    drawing::Stroke::Stroke((uint64_t)v5, a2);
    drawing::swap(a1, (drawing::Stroke *)v5, v3);
    drawing::Stroke::~Stroke((drawing::Stroke *)v5);
  }
  return a1;
}

uint64_t drawing::Stroke::formatText(drawing::Stroke *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "bounds");
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "centerlineSlices", v8);
  }
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 184) & 1) != 0)
    PB::TextFormatter::format(a2, "inkIndex");
  v9 = *((_QWORD *)this + 7);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "inkTransform");
  v10 = *((_QWORD *)this + 8);
  for (i = *((_QWORD *)this + 9); v10 != i; v10 += 16)
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 11))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 184) & 2) != 0)
    PB::TextFormatter::format(a2, "shapeType");
  v12 = *((_QWORD *)this + 13);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "sortID");
  v13 = *((_QWORD *)this + 14);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "strokeData");
  if (*((_QWORD *)this + 15))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 184) & 4) != 0)
    PB::TextFormatter::format(a2, "styleFlags");
  v14 = (uint64_t *)*((_QWORD *)this + 17);
  v15 = (uint64_t *)*((_QWORD *)this + 18);
  while (v14 != v15)
  {
    v16 = *v14++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "substrokes");
  }
  v17 = *((_QWORD *)this + 20);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "substrokesVersion");
  v18 = *((_QWORD *)this + 21);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "transform");
  v19 = *((_QWORD *)this + 22);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, a2, "version");
  return PB::TextFormatter::endObject(a2);
}

BOOL drawing::Stroke::readFrom(drawing::Stroke *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  void ***v9;
  void ***v10;
  PKProtobufUnknownFields **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  PKProtobufUnknownFields *v25;
  PKProtobufUnknownFields *v26;
  PB::Writer **v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void **v93;
  unint64_t v94;
  char *v95;
  _DWORD *v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  void **v107;
  char *v108;
  int v109;
  unint64_t v110;
  void **v113;
  char *v114;
  uint64_t **v115;
  uint64_t *v116;
  void **v117;
  void **v118[5];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 88);
  v9 = (void ***)((char *)this + 40);
  v114 = (char *)this + 24;
  v115 = (uint64_t **)((char *)this + 136);
  v116 = (uint64_t *)((char *)this + 64);
  v117 = (void **)((char *)this + 8);
  v113 = (void **)((char *)this + 80);
  v10 = (void ***)((char *)this + 120);
  v11 = (PKProtobufUnknownFields **)((char *)this + 192);
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
      break;
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v2 = v21;
      v18 = v20++ > 8;
    }
    while (!v18);
LABEL_20:
    v23 = 0;
    LODWORD(v24) = 0;
LABEL_21:
    v25 = *v11;
    if (!*v11)
    {
      v26 = (PKProtobufUnknownFields *)operator new();
      PKProtobufUnknownFields::PKProtobufUnknownFields(v26);
      v118[0] = (void **)v26;
      std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(v11, (uint64_t *)v118);
      v27 = (PB::Writer **)v118[0];
      v118[0] = 0;
      if (v27)
      {
        std::unique_ptr<PB::Writer>::reset[abi:ne180100](v27, 0);
        MEMORY[0x1C3B7F770](v27, 0x1020C40EDED9539);
      }
      v25 = *v11;
    }
    if (!PKProtobufUnknownFields::add(v25, v24, v23, a2))
      return 0;
LABEL_163:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = v2 + 1;
    *((_QWORD *)a2 + 1) = v2 + 1;
    v17 = *(_BYTE *)(v12 + v2);
    v15 |= (unint64_t)(v17 & 0x7F) << v13;
    if ((v17 & 0x80) == 0)
      break;
    v13 += 7;
    v2 = v16;
    v18 = v14++ > 8;
    if (v18)
      goto LABEL_20;
  }
LABEL_27:
  v23 = v15 & 7;
  if (v23 != 4)
  {
    v24 = v15 >> 3;
    switch((v15 >> 3))
    {
      case 1u:
        v28 = operator new();
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 8) = 0;
        v118[0] = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v10, (void **)v28);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v118, 0);
        v29 = *v10;
        goto LABEL_139;
      case 2u:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7774A28;
        *(_DWORD *)(v30 + 32) = 0;
        v31 = *((_QWORD *)this + 13);
        *((_QWORD *)this + 13) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *((_QWORD *)this + 13);
        }
        goto LABEL_93;
      case 3u:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7774A28;
        *(_DWORD *)(v30 + 32) = 0;
        v32 = *((_QWORD *)this + 22);
        *((_QWORD *)this + 22) = v30;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v30 = *((_QWORD *)this + 22);
        }
        goto LABEL_93;
      case 4u:
        *((_BYTE *)this + 184) |= 1u;
        v33 = *((_QWORD *)a2 + 1);
        v34 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
        {
          v36 = 0;
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v40 = *(_BYTE *)(v35 + v33);
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if ((v40 & 0x80) == 0)
              goto LABEL_145;
            v36 += 7;
            v33 = v39;
            v18 = v37++ > 8;
          }
          while (!v18);
LABEL_103:
          v38 = 0;
          goto LABEL_145;
        }
        v81 = 0;
        v82 = 0;
        v38 = 0;
        if (v34 <= v33)
          v34 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v34 == v33)
          {
            v38 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v83 = v33 + 1;
            v84 = *(_BYTE *)(v35 + v33);
            *((_QWORD *)a2 + 1) = v83;
            v38 |= (unint64_t)(v84 & 0x7F) << v81;
            if (v84 < 0)
            {
              v81 += 7;
              v33 = v83;
              v18 = v82++ > 8;
              if (v18)
                goto LABEL_103;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v38 = 0;
          }
          break;
        }
LABEL_145:
        *((_QWORD *)this + 6) = v38;
        goto LABEL_163;
      case 5u:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E77748A0;
        *(_QWORD *)(v30 + 24) = 0;
        *(_QWORD *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 64) = 0;
        *(_QWORD *)(v30 + 92) = 0;
        *(_QWORD *)(v30 + 84) = 0;
        *(_DWORD *)(v30 + 100) = 0;
        v41 = *((_QWORD *)this + 14);
        *((_QWORD *)this + 14) = v30;
        if (v41)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          v30 = *((_QWORD *)this + 14);
        }
        goto LABEL_93;
      case 6u:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7774A60;
        *(_DWORD *)(v30 + 24) = 0;
        v42 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v30;
        if (v42)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v30 = *((_QWORD *)this + 4);
        }
        goto LABEL_93;
      case 7u:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7774A98;
        *(_DWORD *)(v30 + 32) = 0;
        v43 = *((_QWORD *)this + 21);
        *((_QWORD *)this + 21) = v30;
        if (v43)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          v30 = *((_QWORD *)this + 21);
        }
        goto LABEL_93;
      case 8u:
        *((_BYTE *)this + 184) |= 4u;
        v44 = *((_QWORD *)a2 + 1);
        v45 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            v50 = v44 + 1;
            *((_QWORD *)a2 + 1) = v44 + 1;
            v51 = *(_BYTE *)(v46 + v44);
            v49 |= (unint64_t)(v51 & 0x7F) << v47;
            if ((v51 & 0x80) == 0)
              goto LABEL_148;
            v47 += 7;
            v44 = v50;
            v18 = v48++ > 8;
          }
          while (!v18);
LABEL_110:
          v49 = 0;
          goto LABEL_148;
        }
        v85 = 0;
        v86 = 0;
        v49 = 0;
        if (v45 <= v44)
          v45 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v45 == v44)
          {
            v49 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v87 = v44 + 1;
            v88 = *(_BYTE *)(v46 + v44);
            *((_QWORD *)a2 + 1) = v87;
            v49 |= (unint64_t)(v88 & 0x7F) << v85;
            if (v88 < 0)
            {
              v85 += 7;
              v44 = v87;
              v18 = v86++ > 8;
              if (v18)
                goto LABEL_110;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v49 = 0;
          }
          break;
        }
LABEL_148:
        *((_QWORD *)this + 16) = v49;
        goto LABEL_163;
      case 9u:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7774A28;
        *(_DWORD *)(v30 + 32) = 0;
        v52 = *((_QWORD *)this + 20);
        *((_QWORD *)this + 20) = v30;
        if (v52)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
          v30 = *((_QWORD *)this + 20);
        }
        goto LABEL_93;
      case 0xAu:
        v54 = (_QWORD *)*((_QWORD *)this + 9);
        v53 = *((_QWORD *)this + 10);
        if ((unint64_t)v54 >= v53)
        {
          v89 = ((uint64_t)v54 - *v116) >> 4;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 60)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v91 = v53 - *v116;
          if (v91 >> 3 > v90)
            v90 = v91 >> 3;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
            v92 = 0xFFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          v118[4] = v113;
          if (v92)
            v93 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v113, v92);
          else
            v93 = 0;
          v107 = &v93[2 * v89];
          v118[0] = v93;
          v118[1] = v107;
          v118[3] = &v93[2 * v92];
          *v107 = 0;
          v107[1] = 0;
          v118[2] = v107 + 2;
          std::vector<PB::Data>::__swap_out_circular_buffer(v116, v118);
          v55 = (_QWORD *)*((_QWORD *)this + 9);
          std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v118);
        }
        else
        {
          *v54 = 0;
          v54[1] = 0;
          v55 = v54 + 2;
          *((_QWORD *)this + 9) = v54 + 2;
        }
        *((_QWORD *)this + 9) = v55;
        v29 = (void **)(v55 - 2);
        goto LABEL_139;
      case 0xBu:
        PB::PtrVector<drawing::Stroke>::emplace_back<>(v115);
        v30 = *(_QWORD *)(*((_QWORD *)this + 18) - 8);
        goto LABEL_93;
      case 0xCu:
        if (v23 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v56 = *((_QWORD *)a2 + 1);
          v57 = *((_QWORD *)a2 + 2);
          while (v56 < v57 && !*((_BYTE *)a2 + 24))
          {
            v59 = (char *)*((_QWORD *)this + 2);
            v58 = *((_QWORD *)this + 3);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v117;
              v62 = (v59 - (_BYTE *)*v117) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_173;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v114, v65);
                v61 = (char *)*((_QWORD *)this + 1);
                v59 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((_QWORD *)this + 1) = v67;
              *((_QWORD *)this + 2) = v60;
              *((_QWORD *)this + 3) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *((_QWORD *)this + 2) = v60;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            v57 = *((_QWORD *)a2 + 2);
            v56 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v56;
          }
LABEL_95:
          PB::Reader::recallMark();
        }
        else
        {
          v95 = (char *)*((_QWORD *)this + 2);
          v94 = *((_QWORD *)this + 3);
          if ((unint64_t)v95 >= v94)
          {
            v101 = (char *)*v117;
            v102 = (v95 - (_BYTE *)*v117) >> 2;
            v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 62)
LABEL_173:
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v104 = v94 - (_QWORD)v101;
            if (v104 >> 1 > v103)
              v103 = v104 >> 1;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
              v105 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v105 = v103;
            if (v105)
            {
              v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v114, v105);
              v101 = (char *)*((_QWORD *)this + 1);
              v95 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v106 = 0;
            }
            v108 = &v106[4 * v102];
            *(_DWORD *)v108 = 0;
            v96 = v108 + 4;
            while (v95 != v101)
            {
              v109 = *((_DWORD *)v95 - 1);
              v95 -= 4;
              *((_DWORD *)v108 - 1) = v109;
              v108 -= 4;
            }
            *((_QWORD *)this + 1) = v108;
            *((_QWORD *)this + 2) = v96;
            *((_QWORD *)this + 3) = &v106[4 * v105];
            if (v101)
              operator delete(v101);
          }
          else
          {
            *(_DWORD *)v95 = 0;
            v96 = v95 + 4;
          }
          *((_QWORD *)this + 2) = v96;
          v110 = *((_QWORD *)a2 + 1);
          if (v110 <= 0xFFFFFFFFFFFFFFFBLL && v110 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v96 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 0xDu:
        v70 = operator new();
        *(_QWORD *)v70 = 0;
        *(_QWORD *)(v70 + 8) = 0;
        v118[0] = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v9, (void **)v70);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v118, 0);
        v29 = *v9;
        goto LABEL_139;
      case 0xEu:
        *((_BYTE *)this + 184) |= 2u;
        v71 = *((_QWORD *)a2 + 1);
        v72 = *((_QWORD *)a2 + 2);
        v73 = *(_QWORD *)a2;
        if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          do
          {
            v77 = v71 + 1;
            *((_QWORD *)a2 + 1) = v71 + 1;
            v78 = *(_BYTE *)(v73 + v71);
            v76 |= (unint64_t)(v78 & 0x7F) << v74;
            if ((v78 & 0x80) == 0)
              goto LABEL_151;
            v74 += 7;
            v71 = v77;
            v18 = v75++ > 8;
          }
          while (!v18);
LABEL_127:
          v76 = 0;
          goto LABEL_151;
        }
        v97 = 0;
        v98 = 0;
        v76 = 0;
        if (v72 <= v71)
          v72 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v72 == v71)
          {
            v76 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v99 = v71 + 1;
            v100 = *(_BYTE *)(v73 + v71);
            *((_QWORD *)a2 + 1) = v99;
            v76 |= (unint64_t)(v100 & 0x7F) << v97;
            if (v100 < 0)
            {
              v97 += 7;
              v71 = v99;
              v18 = v98++ > 8;
              if (v18)
                goto LABEL_127;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v76 = 0;
          }
          break;
        }
LABEL_151:
        *((_QWORD *)this + 12) = v76;
        goto LABEL_163;
      case 0xFu:
        v30 = operator new();
        *(_QWORD *)v30 = &off_1E7774A98;
        *(_DWORD *)(v30 + 32) = 0;
        v79 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v30;
        if (v79)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
          v30 = *((_QWORD *)this + 7);
        }
LABEL_93:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) != 0)
        {
          goto LABEL_95;
        }
        return 0;
      case 0x10u:
        v80 = operator new();
        *(_QWORD *)v80 = 0;
        *(_QWORD *)(v80 + 8) = 0;
        v118[0] = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v80);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v118, 0);
        v29 = *v8;
LABEL_139:
        PB::Reader::read(a2, (PB::Data *)v29);
        goto LABEL_163;
      default:
        goto LABEL_21;
    }
    goto LABEL_163;
  }
  v4 = 0;
  return v4 == 0;
}

void sub_1BE2C1F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<drawing::Stroke>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E77749B8;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_DWORD *)(v2 + 184) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE2C213C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

const void ***drawing::Stroke::writeTo(drawing::Stroke *this, PB::Writer *a2)
{
  const PB::Data *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Data *v11;
  const PB::Data *v12;
  const PB::Base **v13;
  const PB::Base **v14;
  const PB::Base *v15;
  float *v16;
  float *v17;
  float v18;
  const PB::Data *v19;
  const PB::Base *v20;
  const PB::Data *v21;
  const void ***result;

  v4 = (const PB::Data *)*((_QWORD *)this + 15);
  if (v4)
    PB::Writer::write(a2, v4);
  v5 = (const PB::Base *)*((_QWORD *)this + 13);
  if (v5)
    PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)*((_QWORD *)this + 22);
  if (v6)
    PB::Writer::writeSubmessage(a2, v6);
  if ((*((_BYTE *)this + 184) & 1) != 0)
    PB::Writer::writeVarInt(a2);
  v7 = (const PB::Base *)*((_QWORD *)this + 14);
  if (v7)
    PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)*((_QWORD *)this + 4);
  if (v8)
    PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)*((_QWORD *)this + 21);
  if (v9)
    PB::Writer::writeSubmessage(a2, v9);
  if ((*((_BYTE *)this + 184) & 4) != 0)
    PB::Writer::writeVarInt(a2);
  v10 = (const PB::Base *)*((_QWORD *)this + 20);
  if (v10)
    PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Data *)*((_QWORD *)this + 8);
  v12 = (const PB::Data *)*((_QWORD *)this + 9);
  while (v11 != v12)
  {
    PB::Writer::write(a2, v11);
    v11 = (const PB::Data *)((char *)v11 + 16);
  }
  v13 = (const PB::Base **)*((_QWORD *)this + 17);
  v14 = (const PB::Base **)*((_QWORD *)this + 18);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::Writer::writeSubmessage(a2, v15);
  }
  v16 = (float *)*((_QWORD *)this + 1);
  v17 = (float *)*((_QWORD *)this + 2);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::Writer::write(a2, v18);
  }
  v19 = (const PB::Data *)*((_QWORD *)this + 5);
  if (v19)
    PB::Writer::write(a2, v19);
  if ((*((_BYTE *)this + 184) & 2) != 0)
    PB::Writer::writeVarInt(a2);
  v20 = (const PB::Base *)*((_QWORD *)this + 7);
  if (v20)
    PB::Writer::writeSubmessage(a2, v20);
  v21 = (const PB::Data *)*((_QWORD *)this + 11);
  if (v21)
    PB::Writer::write(a2, v21);
  result = (const void ***)*((_QWORD *)this + 24);
  if (result)
    return PKProtobufUnknownFields::writeTo(result, (char **)a2);
  return result;
}

uint64_t drawing::Stroke::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = PKProtobufUnknownFieldsCompare((_QWORD ***)(a1 + 192), (_QWORD ***)(a2 + 192));
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 120);
    if (*(_QWORD *)(a1 + 120))
    {
      if (!v5 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 120) | *(_QWORD *)(a2 + 120))
        return 0;
    }
    else if (v5)
    {
      return 0;
    }
    v6 = *(_QWORD *)(a1 + 104);
    v7 = *(_QWORD *)(a2 + 104);
    if (v6)
    {
      if (!v7 || !drawing::StrokeID::operator==(v6, v7))
        return 0;
    }
    else if (v7)
    {
      return 0;
    }
    v8 = *(_QWORD *)(a1 + 176);
    v9 = *(_QWORD *)(a2 + 176);
    if (v8)
    {
      if (!v9 || !drawing::StrokeID::operator==(v8, v9))
        return 0;
    }
    else if (v9)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 184) & 1) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 184) & 1) != 0)
    {
      return 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    v11 = *(_QWORD *)(a2 + 112);
    if (v10)
    {
      if (!v11 || !drawing::StrokeData::operator==(v10, v11) && *(_QWORD *)(a1 + 112) | *(_QWORD *)(a2 + 112))
        return 0;
    }
    else if (v11)
    {
      return 0;
    }
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a2 + 32);
    if (v12)
    {
      if (!v13 || !drawing::Rectangle::operator==(v12, v13))
        return 0;
    }
    else if (v13)
    {
      return 0;
    }
    v14 = *(_QWORD *)(a1 + 168);
    v15 = *(_QWORD *)(a2 + 168);
    if (v14)
    {
      if (!v15 || !drawing::Transform::operator==(v14, v15))
        return 0;
    }
    else if (v15)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 184) & 4) != 0)
    {
      if ((*(_BYTE *)(a2 + 184) & 4) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 184) & 4) != 0)
    {
      return 0;
    }
    v16 = *(_QWORD *)(a1 + 160);
    v17 = *(_QWORD *)(a2 + 160);
    if (v16)
    {
      if (!v17 || !drawing::StrokeID::operator==(v16, v17))
        return 0;
    }
    else if (v17)
    {
      return 0;
    }
    v18 = *(_QWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a2 + 64);
    if (v19 - v18 != *(_QWORD *)(a2 + 72) - v20)
      return 0;
    while (v18 != v19)
    {
      result = PB::Data::operator==();
      if (!(_DWORD)result)
        return result;
      v18 += 16;
      v20 += 16;
    }
    result = PB::PtrVector<drawing::Stroke>::operator==((_QWORD *)(a1 + 136), (_QWORD *)(a2 + 136));
    if ((_DWORD)result)
    {
      v22 = *(float **)(a1 + 8);
      v21 = *(float **)(a1 + 16);
      v23 = *(float **)(a2 + 8);
      if ((char *)v21 - (char *)v22 == *(_QWORD *)(a2 + 16) - (_QWORD)v23)
      {
        while (v22 != v21)
        {
          if (*v22 != *v23)
            return 0;
          ++v22;
          ++v23;
        }
        v24 = *(_QWORD *)(a2 + 40);
        if (*(_QWORD *)(a1 + 40))
        {
          if (!v24 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 40) | *(_QWORD *)(a2 + 40))
            return 0;
        }
        else if (v24)
        {
          return 0;
        }
        if ((*(_BYTE *)(a1 + 184) & 2) != 0)
        {
          if ((*(_BYTE *)(a2 + 184) & 2) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
            return 0;
        }
        else if ((*(_BYTE *)(a2 + 184) & 2) != 0)
        {
          return 0;
        }
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(a2 + 56);
        if (v25)
        {
          if (!v26 || !drawing::Transform::operator==(v25, v26))
            return 0;
LABEL_74:
          if (!*(_QWORD *)(a1 + 88))
            return *(_QWORD *)(a2 + 88) == 0;
          if (*(_QWORD *)(a2 + 88))
          {
            if ((PB::Data::operator==() & 1) != 0)
              return 1;
            if (!*(_QWORD *)(a1 + 88))
              return *(_QWORD *)(a2 + 88) == 0;
          }
          return 0;
        }
        if (!v26)
          goto LABEL_74;
      }
      return 0;
    }
  }
  return result;
}

uint64_t PB::PtrVector<drawing::Stroke>::operator==(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  v3 = (_QWORD *)*a1;
  v2 = (_QWORD *)a1[1];
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)((char *)v2 - *a1) != (_QWORD *)(a2[1] - *a2))
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    result = drawing::Stroke::operator==(*v3, *v4);
    if (!(_DWORD)result)
      break;
    ++v3;
    ++v4;
  }
  while (v3 != (_QWORD *)a1[1]);
  return result;
}

uint64_t drawing::Stroke::hash_value(drawing::Stroke *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  drawing::StrokeData *v13;
  drawing::Rectangle *v14;
  drawing::Transform *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  drawing::Stroke **v24;
  drawing::Stroke **v25;
  uint64_t v26;
  drawing::Stroke *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  drawing::Transform *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*((_QWORD *)this + 15))
    v2 = PBHashBytes();
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 13);
  if (!v3)
  {
    v7 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v3 + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(v3 + 32) & 2) != 0)
      goto LABEL_7;
LABEL_11:
    v5 = 0;
    if ((*(_BYTE *)(v3 + 32) & 4) != 0)
      goto LABEL_8;
LABEL_12:
    v6 = 0;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 32) & 2) == 0)
    goto LABEL_11;
LABEL_7:
  v5 = *(_QWORD *)(v3 + 16);
  if ((*(_BYTE *)(v3 + 32) & 4) == 0)
    goto LABEL_12;
LABEL_8:
  v6 = *(_QWORD *)(v3 + 24);
LABEL_13:
  v7 = v5 ^ v4 ^ v6;
LABEL_14:
  v8 = *((_QWORD *)this + 22);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(v8 + 32) & 1) == 0)
  {
    v9 = 0;
    if ((*(_BYTE *)(v8 + 32) & 2) != 0)
      goto LABEL_17;
LABEL_21:
    v10 = 0;
    if ((*(_BYTE *)(v8 + 32) & 4) != 0)
      goto LABEL_18;
LABEL_22:
    v11 = 0;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 32) & 2) == 0)
    goto LABEL_21;
LABEL_17:
  v10 = *(_QWORD *)(v8 + 16);
  if ((*(_BYTE *)(v8 + 32) & 4) == 0)
    goto LABEL_22;
LABEL_18:
  v11 = *(_QWORD *)(v8 + 24);
LABEL_23:
  v12 = v10 ^ v9 ^ v11;
LABEL_24:
  v40 = v2;
  if ((*((_BYTE *)this + 184) & 1) != 0)
    v36 = *((_QWORD *)this + 6);
  else
    v36 = 0;
  v13 = (drawing::StrokeData *)*((_QWORD *)this + 14);
  if (v13)
    v39 = drawing::StrokeData::hash_value(v13);
  else
    v39 = 0;
  v14 = (drawing::Rectangle *)*((_QWORD *)this + 4);
  if (v14)
    v38 = drawing::Rectangle::hash_value(v14);
  else
    v38 = 0;
  v15 = (drawing::Transform *)*((_QWORD *)this + 21);
  if (v15)
    v37 = drawing::Transform::hash_value(v15);
  else
    v37 = 0;
  if ((*((_BYTE *)this + 184) & 4) != 0)
    v35 = *((_QWORD *)this + 16);
  else
    v35 = 0;
  v16 = *((_QWORD *)this + 20);
  if (!v16)
  {
    v20 = 0;
    goto LABEL_49;
  }
  if ((*(_BYTE *)(v16 + 32) & 1) == 0)
  {
    v17 = 0;
    if ((*(_BYTE *)(v16 + 32) & 2) != 0)
      goto LABEL_42;
LABEL_46:
    v18 = 0;
    if ((*(_BYTE *)(v16 + 32) & 4) != 0)
      goto LABEL_43;
LABEL_47:
    v19 = 0;
    goto LABEL_48;
  }
  v17 = *(_QWORD *)(v16 + 8);
  if ((*(_BYTE *)(v16 + 32) & 2) == 0)
    goto LABEL_46;
LABEL_42:
  v18 = *(_QWORD *)(v16 + 16);
  if ((*(_BYTE *)(v16 + 32) & 4) == 0)
    goto LABEL_47;
LABEL_43:
  v19 = *(_QWORD *)(v16 + 24);
LABEL_48:
  v20 = v18 ^ v17 ^ v19;
LABEL_49:
  v21 = *((_QWORD *)this + 8);
  v22 = *((_QWORD *)this + 9);
  if (v21 == v22)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    do
    {
      v21 += 16;
      v23 ^= PBHashBytes();
    }
    while (v21 != v22);
  }
  v24 = (drawing::Stroke **)*((_QWORD *)this + 17);
  v25 = (drawing::Stroke **)*((_QWORD *)this + 18);
  if (v24 == v25)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = *v24++;
      v26 ^= drawing::Stroke::hash_value(v27);
    }
    while (v24 != v25);
  }
  v28 = PBHashBytes();
  if (*((_QWORD *)this + 5))
    v29 = PBHashBytes();
  else
    v29 = 0;
  if ((*((_BYTE *)this + 184) & 2) != 0)
    v30 = *((_QWORD *)this + 12);
  else
    v30 = 0;
  v31 = (drawing::Transform *)*((_QWORD *)this + 7);
  if (v31)
    v32 = drawing::Transform::hash_value(v31);
  else
    v32 = 0;
  if (*((_QWORD *)this + 11))
    v33 = PBHashBytes();
  else
    v33 = 0;
  return v7 ^ v40 ^ v12 ^ v36 ^ v39 ^ v38 ^ v37 ^ v28 ^ v35 ^ v20 ^ v23 ^ v26 ^ v29 ^ v30 ^ v32 ^ v33;
}

_QWORD *drawing::Stroke::makeSortID(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[13])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A28;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[13];
    v1[13] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Stroke::makeVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[22])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A28;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[22];
    v1[22] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Stroke::makeStrokeData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[14])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77748A0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 92) = 0;
    *(_QWORD *)(v2 + 84) = 0;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[14];
    v1[14] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Stroke::makeBounds(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A60;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Stroke::makeTransform(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[21])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A98;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[21];
    v1[21] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Stroke::makeSubstrokesVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[20])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A28;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[20];
    v1[20] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Stroke::makeInkTransform(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A98;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 2);
        v4 -= 16;
        free(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>(uint64_t a1, PB::Data *a2, PB::Data *a3, unint64_t a4)
{
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  PB::Data *v13;
  unint64_t v14;
  PB::Data *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<PB::Data>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<PB::Data>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PB::Data>,PB::Data*,PB::Data*,PB::Data*>(v8, a2, a3, *(PB::Data **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4;
  if (v14 < a4)
  {
    v15 = (PB::Data *)((char *)a2 + 16 * v14);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PB::Data *,PB::Data *,PB::Data *>((int)&v20, a2, v15, (uint64_t)v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PB::Data>,PB::Data*,PB::Data*,PB::Data*>(v8, v15, a3, *(PB::Data **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PB::Data *,PB::Data *,PB::Data *>((int)&v21, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v19 = *(void **)(v18 - 16);
      v18 -= 16;
      free(v19);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1BE2C2E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE2C2E94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<PB::Data>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 2);
        v3 -= 16;
        free(v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<PB::Data>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

PB::Data *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PB::Data>,PB::Data*,PB::Data*,PB::Data*>(int a1, PB::Data *a2, PB::Data *a3, PB::Data *this)
{
  const PB::Data *v5;
  PB::Data *v7;

  v7 = this;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      PB::Data::Data(this, v5);
      v5 = (const PB::Data *)((char *)v5 + 16);
      this = (PB::Data *)((char *)v7 + 16);
      v7 = (PB::Data *)((char *)v7 + 16);
    }
    while (v5 != a3);
  }
  return this;
}

void sub_1BE2C2FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PB::Data>,PB::Data*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PB::Data>,PB::Data*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 16);
      v3 -= 16;
      free(v5);
    }
  }
  return a1;
}

PB::Data *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PB::Data *,PB::Data *,PB::Data *>(int a1, PB::Data *a2, PB::Data *a3, uint64_t a4)
{
  const PB::Data *v5;
  void *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      PB::Data::Data((PB::Data *)&v8, v5);
      free(v8);
      v5 = (const PB::Data *)((char *)v5 + 16);
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<PB::Data>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>>((uint64_t)(a1 + 2), a1[1], (const PB::Data *)a1[1], *a1, (const PB::Data *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>,std::reverse_iterator<PB::Data*>>(uint64_t a1, uint64_t a2, const PB::Data *a3, uint64_t a4, const PB::Data *a5, uint64_t a6, uint64_t a7)
{
  const PB::Data *v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a6;
  v11 = a7;
  if (a3 != a5)
  {
    v8 = a3;
    do
    {
      v8 = (const PB::Data *)((char *)v8 - 16);
      PB::Data::Data((PB::Data *)(a7 - 16), v8);
      a7 = v11 - 16;
      v11 -= 16;
    }
    while (v8 != a5);
    return v10;
  }
  return a6;
}

void sub_1BE2C3218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PB::Data>,std::reverse_iterator<PB::Data*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *v3;
      v3 += 2;
      free(v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<PB::Data>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void **)(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    free(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE2C3678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE2C3918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE2C3FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

id PKPaletteEraserNameForEraserType(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  if (a1 == 1)
  {
    _PencilKitBundle();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("Object Eraser");
  }
  else
  {
    if (a1)
    {
      v4 = 0;
      return v4;
    }
    _PencilKitBundle();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("Pixel Eraser");
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, v3, CFSTR("Localizable"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t drawingV1::Color::Color(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774B08;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774B08;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void drawingV1::Color::~Color(drawingV1::Color *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawingV1::Color::Color(drawingV1::Color *this, const drawingV1::Color *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774B08;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 = 8;
    *((_BYTE *)this + 24) = 8;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 3) = result;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t drawingV1::Color::operator=(uint64_t a1, const drawingV1::Color *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const drawingV1::Color *)a1 != a2)
  {
    drawingV1::Color::Color((drawingV1::Color *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float drawingV1::swap(drawingV1 *this, drawingV1::Color *a2, drawingV1::Color *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float drawingV1::Color::Color(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774B08;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774B08;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t drawingV1::Color::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(drawingV1::Color *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7774B08;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t drawingV1::Color::formatText(drawingV1::Color *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "alpha", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "green", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "blue", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "red", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Color::readFrom(drawingV1::Color *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t drawingV1::Color::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL drawingV1::Color::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t drawingV1::Color::hash_value(drawingV1::Color *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 5);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 3);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1BE2C7A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2C7B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2C7C84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2C7CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2C7F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _PKStrokeIDCompare(_PKStrokeID *a1, _PKStrokeID *a2)
{
  uint64_t result;
  int v5;
  unsigned int subclock;
  unsigned int v7;
  BOOL v8;
  _BOOL8 v9;

  if (a1->clock < a2->clock)
    return -1;
  if (a1->clock > a2->clock)
    return 1;
  v5 = uuid_compare(a1->replicaUUID, a2->replicaUUID);
  if (v5 < 0)
    result = -1;
  else
    result = v5 != 0;
  if (result != -1 && result != 1)
  {
    subclock = a1->subclock;
    v7 = a2->subclock;
    v8 = subclock >= v7;
    v9 = subclock > v7;
    if (v8)
      return v9;
    else
      return -1;
  }
  return result;
}

BOOL _PKStrokeIDEqual(_PKStrokeID *a1, _PKStrokeID *a2)
{
  return a1->clock == a2->clock && !uuid_compare(a1->replicaUUID, a2->replicaUUID) && a1->subclock == a2->subclock;
}

__n128 _PKStrokeIDCreate@<Q0>(__n128 *a1@<X1>, int a2@<W0>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 result;

  *(_DWORD *)a4 = a2;
  result = *a1;
  *(__n128 *)(a4 + 4) = *a1;
  *(_DWORD *)(a4 + 20) = a3;
  return result;
}

void _PKStrokeIDUnique(void)
{
  JUMPOUT(0x1C3B80370);
}

double PKLengthOfPointArray(uint64_t a1)
{
  double *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double *v7;
  double v8;
  double v9;
  double result;
  double v11;
  double v12;

  v1 = *(double **)a1;
  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v3 = v2 - 1;
  if (v2 == 1)
    return 0.0;
  if (v2 <= 1)
    v4 = 1;
  else
    v4 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v5 = v4 - 1;
  if (v2 >= v5)
    v6 = v5;
  else
    v6 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (v6 >= v2 - 2)
    v6 = v2 - 2;
  if (v2 == v6 || v5 == v6)
    std::vector<double>::__throw_out_of_range[abi:ne180100]();
  v9 = *v1;
  v8 = v1[1];
  v7 = v1 + 3;
  result = 0.0;
  do
  {
    v11 = *(v7 - 1);
    v12 = *v7;
    result = result + sqrt((v8 - *v7) * (v8 - *v7) + (v9 - v11) * (v9 - v11));
    v7 += 2;
    v8 = v12;
    v9 = v11;
    --v3;
  }
  while (v3);
  return result;
}

void _PKSplitPathApplier(CGMutablePathRef **a1, const CGPathElement *a2)
{
  CGMutablePathRef Mutable;
  CGPath *v5;
  unint64_t v6;
  CGMutablePathRef *v7;
  CGMutablePathRef *v8;
  CGMutablePathRef *v9;
  CGMutablePathRef *v10;
  CGMutablePathRef *v11;
  CGPath *v12;
  CGPoint *points;
  CGMutablePathRef *v14;
  CGMutablePathRef *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  CGPath **v21;
  CGPath *v22;

  switch(a2->type)
  {
    case kCGPathElementMoveToPoint:
      Mutable = CGPathCreateMutable();
      v5 = Mutable;
      v7 = a1[1];
      v6 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v6)
      {
        v15 = *a1;
        v16 = v7 - *a1;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v18 = v6 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = (CGPath **)&v20[8 * v16];
        *v21 = v5;
        v8 = v21 + 1;
        if (v7 != v15)
        {
          do
          {
            v22 = *--v7;
            *--v21 = v22;
          }
          while (v7 != v15);
          v7 = *a1;
        }
        *a1 = v21;
        a1[1] = v8;
        a1[2] = (CGMutablePathRef *)&v20[8 * v19];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v7 = Mutable;
        v8 = v7 + 1;
      }
      a1[1] = v8;
      CGPathMoveToPoint(v5, 0, a2->points->x, a2->points->y);
      return;
    case kCGPathElementAddLineToPoint:
      v9 = a1[1];
      if (v9 == *a1)
        goto LABEL_28;
      CGPathAddLineToPoint(*(v9 - 1), 0, a2->points->x, a2->points->y);
      break;
    case kCGPathElementAddQuadCurveToPoint:
      v10 = a1[1];
      if (v10 == *a1)
        goto LABEL_28;
      CGPathAddQuadCurveToPoint(*(v10 - 1), 0, a2->points->x, a2->points->y, a2->points[1].x, a2->points[1].y);
      break;
    case kCGPathElementAddCurveToPoint:
      v11 = a1[1];
      if (v11 == *a1)
        goto LABEL_28;
      v12 = *(v11 - 1);
      points = a2->points;
      CGPathAddCurveToPoint(v12, 0, points->x, points->y, points[1].x, points[1].y, points[2].x, points[2].y);
      break;
    case kCGPathElementCloseSubpath:
      v14 = a1[1];
      if (v14 == *a1)
LABEL_28:
        std::vector<double>::__throw_out_of_range[abi:ne180100]();
      CGPathCloseSubpath(*(v14 - 1));
      break;
    default:
      return;
  }
}

void PKSplitPath(const CGPath *a1, void *a2)
{
  CGPathApply(a1, a2, (CGPathApplierFunction)_PKSplitPathApplier);
}

void CGPathAddFlattenedCurve(CGPath *a1, CGPoint a2, CGPoint a3, CGPoint a4, double a5)
{
  double y;
  double x;
  double v7;
  double v8;
  double v9;
  double v10;
  CGPoint CurrentPoint;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  int v31;
  unsigned int v32;
  CGFloat v34;
  CGFloat v35;

  y = a4.y;
  x = a4.x;
  v7 = a3.y;
  v8 = a3.x;
  v9 = a2.y;
  v10 = a2.x;
  CurrentPoint = CGPathGetCurrentPoint(a1);
  v13 = CurrentPoint.x;
  v14 = CurrentPoint.y;
  v15 = v10 - CurrentPoint.x;
  v34 = x;
  v35 = y;
  v16 = v8 - v10 - (v10 - CurrentPoint.x);
  v17 = x - v8 - (v8 - v10);
  v18 = v7 - v9 - (v9 - CurrentPoint.y);
  v19 = y - v7 - (v7 - v9);
  v20 = v18 * v18 + v16 * v16;
  if (v20 <= v19 * v19 + v17 * v17)
    v20 = v19 * v19 + v17 * v17;
  v21 = v20 * 9.0 * 0.0625;
  if (v21 > a5 * a5)
  {
    v22 = v19 - v18;
    v23 = v22 + (v9 - CurrentPoint.y + v18) * 3.0;
    v24 = (v18 + v22) * 6.0;
    v25 = v22 * 6.0;
    v26 = v17 - v16;
    v27 = v26 + (v15 + v16) * 3.0;
    v28 = (v16 + v26) * 6.0;
    v29 = v26 * 6.0;
    v30 = 1;
    do
    {
      v31 = v30;
      v29 = v29 * 0.125;
      v28 = v28 * 0.25 - v29;
      v27 = v27 * 0.5 - v28 * 0.5;
      v25 = v25 * 0.125;
      v24 = v24 * 0.25 - v25;
      v23 = v23 * 0.5 - v24 * 0.5;
      v30 *= 2;
      v21 = v21 * 0.0625;
    }
    while (v21 > a5 * a5 && v30 <= 0x10000);
    if (v30 >= 2)
    {
      v32 = (2 * v31) | 1;
      do
      {
        v13 = v27 + v13;
        v27 = v28 + v27;
        v28 = v29 + v28;
        v14 = v14 + v23;
        v23 = v24 + v23;
        v24 = v25 + v24;
        CGPathAddLineToPoint(a1, 0, v13, v14);
        --v32;
      }
      while (v32 > 2);
    }
  }
  CGPathAddLineToPoint(a1, 0, v34, v35);
}

void CGPathAddFlattenedQuadCurve(CGPath *a1, CGPoint a2, CGPoint a3, double a4)
{
  double y;
  double x;
  double v7;
  double v8;
  CGPoint CurrentPoint;
  CGPoint v11;
  CGPoint v12;
  CGPoint v13;

  y = a3.y;
  x = a3.x;
  v7 = a2.y;
  v8 = a2.x;
  CurrentPoint = CGPathGetCurrentPoint(a1);
  v11.x = (CurrentPoint.x + v8 * 2.0) / 3.0;
  v11.y = (CurrentPoint.y + v7 * 2.0) / 3.0;
  v12.x = (x + v8 * 2.0) / 3.0;
  v12.y = (y + v7 * 2.0) / 3.0;
  v13.x = x;
  v13.y = y;
  CGPathAddFlattenedCurve(a1, v11, v12, v13, a4);
}

void _PKAddFlattenedElementApplier(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      CGPathMoveToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 1:
      CGPathAddLineToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 2:
      CGPathAddFlattenedQuadCurve(*(CGPath **)a1, *(CGPoint *)*(_QWORD *)(a2 + 8), *(CGPoint *)(*(_QWORD *)(a2 + 8) + 16), *(double *)(a1 + 8));
      break;
    case 3:
      CGPathAddFlattenedCurve(*(CGPath **)a1, *(CGPoint *)*(_QWORD *)(a2 + 8), *(CGPoint *)(*(_QWORD *)(a2 + 8) + 16), *(CGPoint *)(*(_QWORD *)(a2 + 8) + 32), *(double *)(a1 + 8));
      break;
    case 4:
      CGPathCloseSubpath(*(CGMutablePathRef *)a1);
      break;
    default:
      return;
  }
}

void _PKControlPointsFromFlattenedPathApplier(uint64_t a1, int *a2)
{
  int v3;
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;

  v3 = *a2;
  if (*a2 == 4)
  {
    v14 = *(_OWORD **)a1;
    v13 = *(_OWORD **)(a1 + 8);
    v15 = (uint64_t)v13 - *(_QWORD *)a1;
    if (v13 == *(_OWORD **)a1)
      return;
    v16 = a1 + 16;
    v17 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v13 >= v17)
    {
      v26 = v15 >> 4;
      v27 = (v15 >> 4) + 1;
      if (!(v27 >> 60))
      {
        v28 = v17 - (_QWORD)v14;
        v29 = (uint64_t)(v17 - (_QWORD)v14) >> 3;
        if (v29 > v27)
          v27 = v29;
        if (v28 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v27;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v16, v30);
        else
          v31 = 0;
        v32 = &v31[16 * v26];
        v33 = &v31[16 * v30];
        *(_OWORD *)v32 = *v14;
        v18 = v32 + 16;
        v37 = *(_OWORD **)a1;
        v34 = *(_OWORD **)(a1 + 8);
        if (v34 == *(_OWORD **)a1)
          goto LABEL_46;
        do
        {
          *((_OWORD *)v32 - 1) = *(v34 - 1);
          v32 -= 16;
          --v34;
        }
        while (v34 != v37);
        goto LABEL_45;
      }
LABEL_50:
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    *v13 = *v14;
    v18 = v13 + 1;
  }
  else
  {
    if (v3 == 1)
    {
      v4 = (_OWORD *)*((_QWORD *)a2 + 1);
      v19 = a1 + 16;
      v20 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD **)(a1 + 8);
      if ((unint64_t)v7 >= v20)
      {
        v21 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
        v22 = v21 + 1;
        if (!((unint64_t)(v21 + 1) >> 60))
        {
          v23 = v20 - *(_QWORD *)a1;
          if (v23 >> 3 > v22)
            v22 = v23 >> 3;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v19, v24);
          else
            v25 = 0;
          v32 = &v25[16 * v21];
          v33 = &v25[16 * v24];
          *(_OWORD *)v32 = *v4;
          v18 = v32 + 16;
          v36 = *(_OWORD **)a1;
          v34 = *(_OWORD **)(a1 + 8);
          if (v34 == *(_OWORD **)a1)
            goto LABEL_46;
          do
          {
            *((_OWORD *)v32 - 1) = *(v34 - 1);
            v32 -= 16;
            --v34;
          }
          while (v34 != v36);
          goto LABEL_45;
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (v3)
        __assert_rtn("_PKControlPointsFromFlattenedPathApplier", "PKCGPathUtility.mm", 218, "element->type == kCGPathElementCloseSubpath");
      v4 = (_OWORD *)*((_QWORD *)a2 + 1);
      v5 = a1 + 16;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD **)(a1 + 8);
      if ((unint64_t)v7 >= v6)
      {
        v8 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
        v9 = v8 + 1;
        if (!((unint64_t)(v8 + 1) >> 60))
        {
          v10 = v6 - *(_QWORD *)a1;
          if (v10 >> 3 > v9)
            v9 = v10 >> 3;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v9;
          if (v11)
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v5, v11);
          else
            v12 = 0;
          v32 = &v12[16 * v8];
          v33 = &v12[16 * v11];
          *(_OWORD *)v32 = *v4;
          v18 = v32 + 16;
          v35 = *(_OWORD **)a1;
          v34 = *(_OWORD **)(a1 + 8);
          if (v34 == *(_OWORD **)a1)
            goto LABEL_46;
          do
          {
            *((_OWORD *)v32 - 1) = *(v34 - 1);
            v32 -= 16;
            --v34;
          }
          while (v34 != v35);
LABEL_45:
          v34 = *(_OWORD **)a1;
LABEL_46:
          *(_QWORD *)a1 = v32;
          *(_QWORD *)(a1 + 8) = v18;
          *(_QWORD *)(a1 + 16) = v33;
          if (v34)
            operator delete(v34);
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
    *v7 = *v4;
    v18 = v7 + 1;
  }
LABEL_48:
  *(_QWORD *)(a1 + 8) = v18;
}

void PKPointsFromPath(const CGPath *a1, const void **a2, double a3, double a4)
{
  const CGPath *Mutable;
  double v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  void *v15;
  uint64_t v16;
  _QWORD info[2];

  if (a1)
  {
    Mutable = CGPathCreateMutable();
    info[0] = Mutable;
    v9 = 0.01;
    if (a4 > 0.0)
      v9 = a4;
    *(double *)&info[1] = v9;
    CGPathApply(a1, info, (CGPathApplierFunction)_PKAddFlattenedElementApplier);
    CGPathApply(Mutable, a2, (CGPathApplierFunction)_PKControlPointsFromFlattenedPathApplier);
    CGPathRelease(Mutable);
    v10 = *a2;
    v11 = (uint64_t)a2[1];
    v12 = v11 - (_QWORD)*a2;
    if (a3 < 1.79769313e308 && (unint64_t)v12 >= 0x11)
    {
      __p = 0;
      v15 = 0;
      v16 = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&__p, v10, v11, v12 >> 4);
      PKPointsFromLineSegments((uint64_t *)&__p, (double **)a2, a3);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1BE2C893C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PKPointsFromLineSegments(uint64_t *a1, double **a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  double *v34;
  double *v35;
  uint64_t v36;

  v7 = *a1;
  v6 = a1[1];
  v8 = ((v6 - *a1) >> 4) - 1;
  std::vector<CGPoint>::resize((uint64_t)a2, 0);
  v36 = v8;
  if (v6 != v7 && v8 != 0)
  {
    v10 = 0;
    v11 = a2 + 2;
    do
    {
      v12 = (double *)(*a1 + 16 * v10);
      v13 = *v12;
      v14 = v12[1];
      ++v10;
      v15 = (double *)(*a1 + 16 * v10);
      v16 = v15[1];
      v17 = sqrt((v14 - v16) * (v14 - v16) + (*v12 - *v15) * (*v12 - *v15));
      if (v17 != 0.0)
      {
        v18 = 1.0;
        if (a3 > 0.0)
          v18 = ceil(v17 / a3);
        v19 = 0;
        v20 = (unint64_t)v18;
        v21 = (double)(unint64_t)v18;
        v22 = *v15 - v13;
        v23 = v16 - v14;
        v24 = a2[1];
        do
        {
          v25 = (double)v19 / v21;
          v26 = v13 + v22 * v25;
          v27 = v14 + v23 * v25;
          if ((unint64_t)v24 >= *v11)
          {
            v28 = *a2;
            v29 = ((char *)v24 - (char *)*a2) >> 4;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 60)
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            v31 = *v11 - (_QWORD)v28;
            if (v31 >> 3 > v30)
              v30 = v31 >> 3;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
              v32 = 0xFFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a2 + 2), v32);
              v28 = *a2;
              v24 = a2[1];
            }
            else
            {
              v33 = 0;
            }
            v34 = (double *)&v33[16 * v29];
            *v34 = v26;
            v34[1] = v27;
            v35 = v34;
            if (v24 != v28)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v24 - 1);
                v35 -= 2;
                v24 -= 2;
              }
              while (v24 != v28);
              v28 = *a2;
            }
            v24 = v34 + 2;
            *a2 = v35;
            a2[1] = v34 + 2;
            a2[2] = (double *)&v33[16 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v24 = v26;
            v24[1] = v27;
            v24 += 2;
          }
          a2[1] = v24;
          ++v19;
        }
        while (v19 <= v20);
      }
    }
    while (v10 != v36);
  }
}

void std::vector<CGPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<CGPoint>::__append((void **)a1, a2 - v2);
  }
}

void PKArcLengthsFromPointArray(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;

  v5 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 >= v4)
  {
    v8 = *(double **)a2;
    v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
LABEL_40:
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v12);
      v8 = *(double **)a2;
      v6 = *(double **)(a2 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = 0;
    v7 = (double *)(v14 + 8);
    while (v6 != v8)
    {
      v16 = *((_QWORD *)v6-- - 1);
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = 0.0;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v17 = *a1;
  v18 = a1[1] - *a1;
  if (v18 != 16)
  {
    v19 = 0;
    v20 = v18 >> 4;
    do
    {
      if (v20 <= v19 || (v21 = v19 + 1, v20 <= v19 + 1))
        std::vector<double>::__throw_out_of_range[abi:ne180100]();
      v22 = (double *)(v17 + 16 * v19);
      v23 = sqrt((v22[1] - *(double *)(v17 + 16 * v21 + 8)) * (v22[1] - *(double *)(v17 + 16 * v21 + 8))+ (*v22 - *(double *)(v17 + 16 * v21)) * (*v22 - *(double *)(v17 + 16 * v21)));
      if ((unint64_t)v7 >= *v5)
      {
        v25 = *(double **)a2;
        v26 = ((uint64_t)v7 - *(_QWORD *)a2) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_40;
        v28 = *v5 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v29);
          v25 = *(double **)a2;
          v7 = *(double **)(a2 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v23;
        v24 = v31 + 1;
        while (v7 != v25)
        {
          v32 = *((_QWORD *)v7-- - 1);
          *((_QWORD *)v31-- - 1) = v32;
        }
        *(_QWORD *)a2 = v31;
        *(_QWORD *)(a2 + 8) = v24;
        *(_QWORD *)(a2 + 16) = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v7 = v23;
        v24 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v24;
      v17 = *a1;
      v20 = (a1[1] - *a1) >> 4;
      v7 = v24;
      v19 = v21;
    }
    while (v20 - 1 > v21);
  }
}

void std::vector<CGPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t drawing::Transform::Transform(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774A98;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774A98;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawing::Transform::~Transform(drawing::Transform *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawing::Transform::Transform(drawing::Transform *this, const drawing::Transform *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774A98;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *((float *)a2 + 7);
    *((_BYTE *)this + 32) = v3 | 0x20;
    *((float *)this + 7) = result;
    return result;
  }
LABEL_13:
  result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((_BYTE *)a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t drawing::Transform::operator=(uint64_t a1, const drawing::Transform *a2)
{
  int v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  int v9;

  if ((const drawing::Transform *)a1 != a2)
  {
    drawing::Transform::Transform((drawing::Transform *)v6, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float drawing::swap(drawing *this, drawing::Transform *a2, drawing::Transform *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float drawing::Transform::Transform(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774A98;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774A98;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t drawing::Transform::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(drawing::Transform *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_1E7774A98;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 24) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t drawing::Transform::formatText(drawing::Transform *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "a", *((float *)this + 2));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "b", *((float *)this + 3));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "c", *((float *)this + 4));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "tx", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "d", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "ty", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawing::Transform::readFrom(drawing::Transform *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_43;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((_BYTE *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_42:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t drawing::Transform::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 28));
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 28));
  return this;
}

BOOL drawing::Transform::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x20) != 0 && *(float *)(a1 + 28) == *(float *)(a2 + 28);
  return v2;
}

uint64_t drawing::Transform::hash_value(drawing::Transform *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
LABEL_21:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_6;
LABEL_22:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_9;
LABEL_23:
    v7 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v12 = *((float *)this + 2);
  v1 = LODWORD(v12);
  if (v12 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_22;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_23;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
LABEL_12:
    v8 = *((float *)this + 6);
    v9 = LODWORD(v8);
    if (v8 == 0.0)
      v9 = 0;
    if ((*((_BYTE *)this + 32) & 0x20) != 0)
      goto LABEL_15;
LABEL_25:
    v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  v9 = 0;
  if ((*((_BYTE *)this + 32) & 0x20) == 0)
    goto LABEL_25;
LABEL_15:
  v10 = *((float *)this + 7);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

uint64_t legacy_drawing::Color::Color(uint64_t this)
{
  *(_QWORD *)this = &off_1E77746E0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E77746E0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void legacy_drawing::Color::~Color(legacy_drawing::Color *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float legacy_drawing::Color::Color(legacy_drawing::Color *this, const legacy_drawing::Color *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E77746E0;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 = 8;
    *((_BYTE *)this + 24) = 8;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 3) = result;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t legacy_drawing::Color::operator=(uint64_t a1, const legacy_drawing::Color *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const legacy_drawing::Color *)a1 != a2)
  {
    legacy_drawing::Color::Color((legacy_drawing::Color *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Color *a2, legacy_drawing::Color *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float legacy_drawing::Color::Color(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E77746E0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E77746E0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t legacy_drawing::Color::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(legacy_drawing::Color *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E77746E0;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t legacy_drawing::Color::formatText(legacy_drawing::Color *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "alpha", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "green", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "blue", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "red", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::Color::readFrom(legacy_drawing::Color *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t legacy_drawing::Color::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL legacy_drawing::Color::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t legacy_drawing::Color::hash_value(legacy_drawing::Color *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 5);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 3);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

id hidQueue()
{
  if (qword_1ECEE6130 != -1)
    dispatch_once(&qword_1ECEE6130, &__block_literal_global_41);
  return (id)qword_1ECEE6138;
}

void stylusDeviceAddedCallback(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    if (PKQueryIsRollSupported())
      v2 = 4;
    else
      v2 = 0;
    v3 = os_log_create("com.apple.pencilkit", "PencilDevice");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v8 = v2;
      _os_log_impl(&dword_1BE213000, v3, OS_LOG_TYPE_DEFAULT, "HID pencil device added callback: %lu", buf, 0xCu);
    }

    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __stylusDeviceAddedCallback_block_invoke;
    v4[3] = &unk_1E7778048;
    v5 = v1;
    v6 = v2;
    dispatch_async(MEMORY[0x1E0C80D38], v4);

  }
}

void stylusDeviceRemovedCallback(void *a1)
{
  id v1;
  NSObject *v2;
  _QWORD block[4];
  id v4;
  uint8_t buf[16];

  v1 = a1;
  if (v1)
  {
    v2 = os_log_create("com.apple.pencilkit", "PencilDevice");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE213000, v2, OS_LOG_TYPE_DEFAULT, "HID pencil device removed callback.", buf, 2u);
    }

    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __stylusDeviceRemovedCallback_block_invoke;
    block[3] = &unk_1E7778020;
    v4 = v1;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

uint64_t PKQueryIsRollSupported()
{
  uint64_t v0;
  __IOHIDEventSystemClient *v1;
  void *v2;
  const __CFArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v0 = IOHIDEventSystemClientCreateWithType();
  if (!v0)
    return 0;
  v1 = (__IOHIDEventSystemClient *)v0;
  v16[0] = CFSTR("PrimaryUsagePage");
  v16[1] = CFSTR("PrimaryUsage");
  v17[0] = &unk_1E77EB910;
  v17[1] = &unk_1E77EB9D0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IOHIDEventSystemClientSetMatching();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = IOHIDEventSystemClientCopyServices(v1);
  v4 = -[__CFArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(*((_QWORD *)&v11 + 1) + 8 * v7), CFSTR("IsRollSupported"));
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v9 = objc_msgSend(v8, "BOOLValue", (_QWORD)v11);

          goto LABEL_12;
        }

        ++v7;
      }
      while (v5 != v7);
      v5 = -[__CFArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_12:

  CFRelease(v1);
  return v9;
}

void __hidQueue_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_UTILITY, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("com.apple.pencilkit.pencildevice", attr);
  v2 = (void *)qword_1ECEE6138;
  qword_1ECEE6138 = (uint64_t)v1;

}

void __stylusDeviceAddedCallback_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    *(_QWORD *)(v1 + 48) = *(_QWORD *)(a1 + 40);
    -[PKPencilDevice resetRollSupportedState](*(_QWORD *)(a1 + 32));
  }
  else
  {
    -[PKPencilDevice resetRollSupportedState](0);
  }
}

void __stylusDeviceRemovedCallback_block_invoke(uint64_t a1)
{
  -[PKPencilDevice resetRollSupportedState](*(_QWORD *)(a1 + 32));
}

void sub_1BE2CD190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2CD238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2CD298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKLRUCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE2CD390(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1BE2CD3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2CD4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2CD624(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1BE2CD7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2CD870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2CDA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  os_unfair_lock_s *v11;
  void *v12;
  void *v13;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_1BE2CDB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2CDBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;
  void *v11;
  void *v12;

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1BE2D1ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);

  _Unwind_Resume(a1);
}

uint64_t PKProtobufUtilitiesParseArchiveFromNSDataWithHeader<drawing::StrokeDelta>(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  id v8;
  const unsigned __int8 *v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int8 v15;
  _BYTE v16[36];
  int v17;

  v5 = a2;
  if ((unint64_t)objc_msgSend(v5, "length") <= 7)
  {
    PKProtobufUtilitiesMalformedError(a3);
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  v17 = 0;
  objc_msgSend(v5, "getBytes:range:", &v17, 0, 4);
  if (v17 == -260869013)
  {
    v15 = 0;
    objc_msgSend(v5, "getBytes:range:", &v15, 4, 1);
    if (v15 >= 2u)
    {
      PKProtobufUtilitiesFormatTooNew(a3);
      goto LABEL_3;
    }
    v14 = 0;
    objc_msgSend(v5, "getBytes:range:", &v14, 6, 2);
    v10 = v14;
    if (v14 < 8uLL || objc_msgSend(v5, "length") <= v10)
    {
      PKProtobufUtilitiesMalformedError(a3);
      goto LABEL_3;
    }
    v11 = objc_retainAutorelease(v5);
    v12 = objc_msgSend(v11, "bytes");
    v13 = v14;
    objc_msgSend(v11, "length");
    PB::Reader::Reader((PB::Reader *)v16, (const unsigned __int8 *)(v12 + v13));
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v16);
    if ((v6 & 1) == 0)
      PKProtobufUtilitiesMalformedError(a3);
  }
  else
  {
    v8 = objc_retainAutorelease(v5);
    v9 = (const unsigned __int8 *)objc_msgSend(v8, "bytes");
    objc_msgSend(v8, "length");
    PB::Reader::Reader((PB::Reader *)v16, v9);
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v16);
    if ((v6 & 1) == 0)
      PKProtobufUtilitiesMalformedError(a3);
  }
LABEL_4:

  return v6;
}

void sub_1BE2D1CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2D1D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2D1E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);
  _Unwind_Resume(a1);
}

id PKProtobufUtilitiesNSDataFromArchiveWithHeader<drawing::StrokeDelta>(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;

  v11 = -260869013;
  v10 = 1;
  v9 = 0;
  PB::Writer::Writer((PB::Writer *)&v7);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v7);
  v2 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v3 = (void *)objc_msgSend(v2, "initWithCapacity:", v7 - v8 + 8);
  objc_msgSend(v3, "appendBytes:length:", &v11, 4);
  objc_msgSend(v3, "appendBytes:length:", &v10, 1);
  objc_msgSend(v3, "appendBytes:length:", &v9, 1);
  v6 = 8;
  objc_msgSend(v3, "appendBytes:length:", &v6, 2);
  objc_msgSend(v3, "appendBytes:length:", v8, v7 - v8);
  v4 = (void *)objc_msgSend(v3, "copy");

  PB::Writer::~Writer((PB::Writer *)&v7);
  return v4;
}

void sub_1BE2D1F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_1BE2D20E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BE2D2234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2D2318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2D2344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2D2388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2D23B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2D2468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);

  _Unwind_Resume(a1);
}

void sub_1BE2D25E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2D2690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)va);
  _Unwind_Resume(a1);
}

void sub_1BE2D2950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2D2B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2D2D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2D3384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2D3940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void _PKPaletteViewUpdateUI(void *a1, uint64_t a2)
{
  int v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  id v16;

  v16 = a1;
  v3 = objc_msgSend(v16, "isToolPreviewInstalled");
  objc_msgSend(v16, "traitCollection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v16, "wantsToolPreviewForTraitCollection:", v4);

  if (!v5 || (v3 & 1) != 0)
  {
    v7 = v16;
    if (((v5 | v3 ^ 1) & 1) != 0)
      goto LABEL_7;
    objc_msgSend(v16, "_uninstallToolPreview");
  }
  else
  {
    objc_msgSend(v16, "clippingView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "_installToolPreviewInView:", v6);

  }
  v7 = v16;
LABEL_7:
  v8 = 1.0;
  if ((objc_msgSend(v7, "useCompactSize") & 1) == 0)
  {
    objc_msgSend(v16, "paletteScaleFactorPolicy");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "adjustedWindowSceneBounds");
    objc_msgSend(v9, "scaleFactorForWindowBounds:");
    v8 = v10;

  }
  objc_msgSend(v16, "_setPaletteScaleFactor:notifyDidChange:", a2, v8);
  objc_msgSend(v16, "traitCollection");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "window");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "windowScene");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = PKUseCompactSize(v11, v13);

  objc_msgSend(v16, "clippingView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setClipsToBounds:", !v14);

}

void sub_1BE2DAA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2DAAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2DACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE2DAE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE2DAFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2DB0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE2DB4F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2DB578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2DB604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2DBD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL PKIsRightHandedGrip(double a1)
{
  if (a1 < 0.0)
    a1 = -a1;
  return a1 < 1.57079633;
}

double PKSqueezePaletteViewStartAngle(int a1, double a2)
{
  double v2;
  BOOL v3;
  double result;

  if (a2 < 0.0)
    a2 = -a2;
  v2 = 4.38077642;
  if (a1)
    v2 = 5.70722665;
  v3 = a2 < 1.57079633;
  result = 3.45575192;
  if (!v3)
    return v2;
  return result;
}

double PKSqueezePaletteViewSize()
{
  double v0;
  void *v1;
  double v2;
  double v3;

  v0 = *(double *)&PKSqueezePaletteViewRadius
     + *(double *)&PKSqueezePaletteViewContentHeight * 0.5
     + *(double *)&PKSqueezePaletteViewRadius
     + *(double *)&PKSqueezePaletteViewContentHeight * 0.5;
  objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "scale");
  v3 = round(v0 * v2) / v2;

  return v3;
}

void PKSqueezePaletteViewConfigureShadow(void *a1, int a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  id v7;
  id v8;

  v3 = a1;
  v8 = v3;
  LODWORD(v4) = 1034147594;
  if (a2)
  {
    *(float *)&v4 = 0.13;
    v5 = 16.0;
  }
  else
  {
    v5 = 0.5;
  }
  if (a2)
    v6 = 5.0;
  else
    v6 = 0.0;
  objc_msgSend(v3, "setShadowOpacity:", v4);
  objc_msgSend(v8, "setShadowRadius:", v5);
  objc_msgSend(v8, "setShadowOffset:", 0.0, v6);
  objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v8, "setShadowColor:", objc_msgSend(v7, "CGColor"));

}

double PKSqueezePaletteViewDisplayRectForWindowBounds()
{
  return 20.0;
}

double PKSqueezePaletteViewScaleFactor(void *a1, double a2, double a3, double a4, double a5, double a6)
{
  id v8;
  void *v9;
  double v10;

  v8 = a1;
  v9 = v8;
  if (v8)
    v10 = -[PKToolPicker _fullScreenWindowScaleFactor]((uint64_t)v8);
  else
    v10 = 1.0;
  if (a6 > a4)
    v10 = a4 / a6 * v10;

  return v10;
}

double PKSqueezePaletteViewExpandedToolsLayoutEndAngleOffsetX(double a1)
{
  return a1 / 6.0;
}

double PKSqueezePaletteViewAdjustedHoverLocation(double a1, double a2, double a3)
{
  BOOL v3;
  double v4;

  if (a3 < 0.0)
    a3 = -a3;
  v3 = a3 < 1.57079633;
  v4 = -30.0;
  if (v3)
    v4 = 30.0;
  return a1 + v4;
}

double PKSqueezePaletteButtonSize()
{
  return 37.0;
}

id PKSqueezePaletteButtonBaseBackgroundColor(void *a1)
{
  void *v1;
  void *v2;
  double v3;
  void *v4;

  if (objc_msgSend(a1, "userInterfaceStyle") == 2)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = 0.1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = 0.05;
  }
  objc_msgSend(v1, "colorWithAlphaComponent:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PKSqueezePaletteButtonBaseForegroundColor(void *a1)
{
  void *v1;
  void *v2;

  if (objc_msgSend(a1, "userInterfaceStyle") == 2)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "colorWithAlphaComponent:", 0.6);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 0.235294119, 0.235294119, 0.262745112, 1.0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id PKSqueezePaletteButtonExpandedLayoutBaseBackgroundColor(void *a1)
{
  void *v1;
  void *v2;

  if (objc_msgSend(a1, "userInterfaceStyle") == 2)
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  else
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "colorWithAlphaComponent:", 0.95);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKSqueezePaletteStrokeWeightButtonForegroundColor(void *a1)
{
  if (objc_msgSend(a1, "userInterfaceStyle") == 2)
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  else
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

id PKSqueezePaletteStrokeWeightButtonSelectedForegroundColor(void *a1)
{
  if (objc_msgSend(a1, "userInterfaceStyle") == 2)
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  else
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t PKSqueezePaletteStrokeWeightButtonBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "clearColor");
}

id PKSqueezePaletteStrokeWeightButtonSelectedBackgroundColor(void *a1)
{
  if (objc_msgSend(a1, "userInterfaceStyle") == 2)
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  else
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  return (id)objc_claimAutoreleasedReturnValue();
}

double PKSqueezePaletteToolClipIndicatorCenterXOffset(int a1)
{
  double result;

  result = 10.0;
  if (a1)
    return 17.0;
  return result;
}

uint64_t PKSqueezePaletteToolClipIndicatorColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithDynamicProvider:", &__block_literal_global_19);
}

double PKSqueezePaletteToolOffsetY(int a1)
{
  double result;

  result = 8.0;
  if (a1)
    return -16.0;
  return result;
}

double PKSqueezePaletteExpandedLassoToolTrailingMargin()
{
  return 0.0523598776;
}

void sub_1BE2DD39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2DD508(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE2E1604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2E2A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2E2BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2E2CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2E2DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2E2F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<PKCompressedStrokePoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<PKCompressedStrokePoint>::__append((void **)a1, a2 - v2);
  }
}

void sub_1BE2E30D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2E32A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, PKStrokePathPointsPrivate *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void PKStrokePathPointsPrivate::~PKStrokePathPointsPrivate(PKStrokePathPointsPrivate *this)
{
  char *begin;

  begin = this->pointsData.__begin_;
  if (begin)
  {
    this->pointsData.__end_ = begin;
    operator delete(begin);
  }
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_1BE2E34CC(_Unwind_Exception *a1, char a2, uint64_t a3, PKStrokePathPointsPrivate *a4)
{
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE2E3678(_Unwind_Exception *a1, char a2, uint64_t a3, PKStrokePathPointsPrivate *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  PKStrokePathPointsPrivate::~PKStrokePathPointsPrivate((PKStrokePathPointsPrivate *)&a12);

  _Unwind_Resume(a1);
}

void sub_1BE2E37B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t PKStrokePathPointsPrivate::count(PKStrokePathPointsPrivate *this)
{
  unint64_t v1;

  v1 = this->pointsData.__end_ - this->pointsData.__begin_;
  if (v1)
    return v1 / *((_QWORD *)this->constants.__ptr_ + 6);
  else
    return 0;
}

double PKStrokePathPointsPrivate::locationAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v5;
  unint64_t v6;
  char *v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v5 = end - begin;
  if (end != begin && (v6 = *((_QWORD *)ptr + 6), v5 / v6 > a2) && (*((_BYTE *)ptr + 32) & 1) != 0)
    v7 = &begin[*((unsigned __int8 *)ptr + 88) + v6 * a2];
  else
    v7 = (char *)ptr + 56;
  return *(float *)v7;
}

float PKStrokePathPointsPrivate::setLocation(PKStrokePathPointsPrivate *this, CGPoint a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  char *v8;
  float y;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 1) != 0)
    {
      v8 = &begin[*((unsigned __int8 *)ptr + 88) + v7 * a3];
      *(float *)&a2.x = a2.x;
      y = a2.y;
      *(_DWORD *)v8 = LODWORD(a2.x);
      *((float *)v8 + 1) = y;
    }
  }
  return *(float *)&a2.x;
}

uint64_t PKStrokePathPointsPrivate::pointFlags(PKStrokePathPointsPrivate *this)
{
  return *((_QWORD *)this->constants.__ptr_ + 4);
}

double PKStrokePathPointsPrivate::radiusAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v5;
  unint64_t v6;
  char *v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v5 = end - begin;
  if (end != begin && (v6 = *((_QWORD *)ptr + 6), v5 / v6 > a2) && (*((_BYTE *)ptr + 32) & 4) != 0)
    v7 = &begin[*((unsigned __int8 *)ptr + 90) + v6 * a2];
  else
    v7 = (char *)ptr + 68;
  return *(float *)v7;
}

float PKStrokePathPointsPrivate::setRadius(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 4) != 0)
    {
      *(float *)&a2 = a2;
      *(_DWORD *)&begin[*((unsigned __int8 *)ptr + 90) + v7 * a3] = LODWORD(a2);
    }
  }
  return *(float *)&a2;
}

PKStrokePathPointsShared *PKStrokePathPointsShared::updateFromCachedValues(PKStrokePathPointsShared *this)
{
  uint64_t v1;
  PKStrokePathPointsShared *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 0;
    v5 = *((_QWORD *)this + 1);
    do
    {
      if ((v1 & (1 << v3)) != 0)
        v4 = v3;
      ++v3;
    }
    while (v3 != 10);
    v6 = 0;
    v7 = 0;
    do
    {
      if ((*((_QWORD *)v2 + 5) & (1 << v6)) != 0)
      {
      }
      ++v6;
    }
    while (v6 <= v4);
  }
  return this;
}

double PKStrokePathPointsPrivate::radius2AtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v5;
  unint64_t v6;
  char *v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v5 = end - begin;
  if (end != begin && (v6 = *((_QWORD *)ptr + 6), v5 / v6 > a2) && (*((_BYTE *)ptr + 33) & 2) != 0)
    v7 = &begin[*((unsigned __int8 *)ptr + 97) + v6 * a2];
  else
    v7 = (char *)ptr + 84;
  return *(float *)v7;
}

float PKStrokePathPointsPrivate::setRadius2(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 33) & 2) != 0)
    {
      *(float *)&a2 = a2;
      *(_DWORD *)&begin[*((unsigned __int8 *)ptr + 97) + v7 * a3] = LODWORD(a2);
    }
  }
  return *(float *)&a2;
}

uint64_t PKStrokePathPointsPrivate::constantFlags(PKStrokePathPointsPrivate *this)
{
  return *((_QWORD *)this->constants.__ptr_ + 5);
}

double PKStrokePathPointsPrivate::timestampAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v5;
  unint64_t v6;
  char *v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v5 = end - begin;
  if (end != begin && (v6 = *((_QWORD *)ptr + 6), v5 / v6 > a2) && (*((_BYTE *)ptr + 32) & 2) != 0)
    v7 = &begin[*((unsigned __int8 *)ptr + 89) + v6 * a2];
  else
    v7 = (char *)ptr + 64;
  return *(float *)v7;
}

double PKStrokePathPointsPrivate::azimuthAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v6 = end - begin;
  if (end != begin && (v7 = *((_QWORD *)ptr + 6), v6 / v7 > a2) && (*((_BYTE *)ptr + 32) & 0x40) != 0)
    v8 = &begin[*((unsigned __int8 *)ptr + 94) + v7 * a2];
  else
    v8 = (char *)ptr + 78;
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 10430.2192;
}

void sub_1BE2E4138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

PKStrokePathPointsShared *PKStrokePathPointsShared::computeCachedValues(PKStrokePathPointsShared *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  PKStrokePathPointsShared *v14;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  v14 = this;
  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *((_QWORD *)this + 1);
    do
    {
      if ((v1 & (1 << v2)) != 0)
        v3 = v2;
      ++v2;
    }
    while (v2 != 10);
    v5 = 0;
    v6 = 0;
    do
    {
      if ((v1 & (1 << v5)) != 0)
      {
        v6 += v7;
      }
      ++v5;
    }
    while (v5 <= v3);
  }
  v8 = 0;
  v9 = 0;
  v10 = *((_QWORD *)v14 + 4);
  do
  {
    *((_BYTE *)v14 + v8 + 88) = v9;
    if ((v10 & (1 << v8)) != 0)
    ++v8;
  }
  while (v8 != 10);
  v11 = 0;
  v12 = 0;
  v13 = v16;
  *(_OWORD *)((char *)v14 + 56) = v15;
  *(_OWORD *)((char *)v14 + 72) = v13;
  do
  {
    if ((v10 & (1 << v11)) != 0)
      v12 = v11;
    ++v11;
  }
  while (v11 != 10);
  *((_QWORD *)v14 + 13) = v12;
  return this;
}

double PKStrokePathPointsPrivate::slice(PKStrokePathPointsPrivate *this, _NSRange a2, PKStrokePathPointsPrivate *a3)
{
  NSUInteger length;
  NSUInteger location;
  uint64_t v7;
  char *begin;
  char *v9;
  double result;
  __int128 v11;
  char *v12;

  length = a2.length;
  location = a2.location;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](a3, (uint64_t *)this);
  v7 = *((_QWORD *)this->constants.__ptr_ + 6);
  begin = this->pointsData.__begin_;
  v12 = 0;
  v11 = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v11, &begin[v7 * location], (uint64_t)&begin[v7 * (location + length)], v7 * length);
  v9 = a3->pointsData.__begin_;
  if (v9)
  {
    a3->pointsData.__end_ = v9;
    operator delete(v9);
  }
  result = *(double *)&v11;
  *(_OWORD *)&a3->pointsData.__begin_ = v11;
  a3->pointsData.__end_cap_.__value_ = v12;
  return result;
}

_QWORD *PKStrokePathPointsPrivate::operator[]@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;

  v4 = (_QWORD *)*result;
  v5 = *(_OWORD *)(*result + 72);
  *a3 = *(_OWORD *)(*result + 56);
  a3[1] = v5;
  v6 = v4[4];
  if (v6)
  {
    v7 = result[2];
    v8 = v4[6];
    v9 = v8 * a2;
    if (v8 * a2 + v8 <= (unint64_t)(result[3] - v7))
    {
      v10 = 0;
      v11 = v4[13];
      do
      {
        if ((v6 & (1 << v10)) != 0)
        {
          v9 += v12;
        }
        ++v10;
      }
      while (v10 <= v11);
    }
  }
  return result;
}

void sub_1BE2E4D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float PKStrokePathPointsPrivate::setTimestamp(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 2) != 0)
    {
      *(float *)&a2 = a2;
      *(_DWORD *)&begin[*((unsigned __int8 *)ptr + 89) + v7 * a3] = LODWORD(a2);
    }
  }
  return *(float *)&a2;
}

double PKStrokePathPointsPrivate::aspectRatioAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v6 = end - begin;
  if (end != begin && (v7 = *((_QWORD *)ptr + 6), v6 / v7 > a2) && (*((_BYTE *)ptr + 32) & 8) != 0)
    v8 = &begin[*((unsigned __int8 *)ptr + 91) + v7 * a2];
  else
    v8 = (char *)ptr + 72;
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 1000.0;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setAspectRatio(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 8) != 0)
    {
      v8 = *((unsigned __int8 *)ptr + 91) + v7 * a3;
      v9 = a2 * 1000.0;
      v10 = 0.0;
      if (v9 >= 0.0)
      {
        v10 = v9;
        if (v9 > 65535.0)
          v10 = 65535.0;
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::edgeWidthAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v6 = end - begin;
  if (end != begin && (v7 = *((_QWORD *)ptr + 6), v6 / v7 > a2) && (*((_BYTE *)ptr + 32) & 0x10) != 0)
    v8 = &begin[*((unsigned __int8 *)ptr + 92) + v7 * a2];
  else
    v8 = (char *)ptr + 74;
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 10.0;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setEdgeWidth(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 0x10) != 0)
    {
      v8 = *((unsigned __int8 *)ptr + 92) + v7 * a3;
      v9 = a2 * 10.0;
      v10 = 0.0;
      if (v9 >= 0.0)
      {
        v10 = v9;
        if (v9 > 65535.0)
          v10 = 65535.0;
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::forceAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v6 = end - begin;
  if (end != begin && (v7 = *((_QWORD *)ptr + 6), v6 / v7 > a2) && (*((_BYTE *)ptr + 32) & 0x20) != 0)
    v8 = &begin[*((unsigned __int8 *)ptr + 93) + v7 * a2];
  else
    v8 = (char *)ptr + 76;
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 1000.0;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setForce(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 0x20) != 0)
    {
      v8 = *((unsigned __int8 *)ptr + 93) + v7 * a3;
      v9 = a2 * 1000.0;
      v10 = 0.0;
      if (v9 >= 0.0)
      {
        v10 = v9;
        if (v9 > 65535.0)
          v10 = 65535.0;
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setAzimuth(PKStrokePathPointsPrivate *this, long double a2, unint64_t a3)
{
  char *end;
  char *begin;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  unint64_t v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 0x40) != 0)
    {
      v8 = *((unsigned __int8 *)ptr + 94) + v7 * a3;
      this = (PKStrokePathPointsPrivate *)PKCompressedStrokePoint::compressAzimuth((PKCompressedStrokePoint *)this, a2);
      *(_WORD *)&begin[v8] = (_WORD)this;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::altitudeAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v6 = end - begin;
  if (end != begin && (v7 = *((_QWORD *)ptr + 6), v6 / v7 > a2) && (*((_BYTE *)ptr + 32) & 0x80) != 0)
    v8 = &begin[*((unsigned __int8 *)ptr + 95) + v7 * a2];
  else
    v8 = (char *)ptr + 80;
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 41720.8768;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setAltitude(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 32) & 0x80) != 0)
    {
      v8 = *((unsigned __int8 *)ptr + 95) + v7 * a3;
      v9 = a2 * 41720.8768;
      v10 = 0.0;
      if (v9 >= 0.0)
      {
        v10 = v9;
        if (v9 > 65535.0)
          v10 = 65535.0;
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::opacityAtIndex(PKStrokePathPointsPrivate *this, unint64_t a2, double a3)
{
  char *begin;
  char *end;
  PKStrokePathPointsShared *ptr;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  ptr = this->constants.__ptr_;
  v6 = end - begin;
  if (end != begin && (v7 = *((_QWORD *)ptr + 6), v6 / v7 > a2) && (*((_BYTE *)ptr + 33) & 1) != 0)
    v8 = &begin[*((unsigned __int8 *)ptr + 96) + v7 * a2];
  else
    v8 = (char *)ptr + 82;
  LOWORD(a3) = *(_WORD *)v8;
  return (double)*(unint64_t *)&a3 / 32767.5;
}

PKStrokePathPointsPrivate *PKStrokePathPointsPrivate::setOpacity(PKStrokePathPointsPrivate *this, double a2, unint64_t a3)
{
  char *begin;
  char *end;
  unint64_t v5;
  PKStrokePathPointsShared *ptr;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;

  begin = this->pointsData.__begin_;
  end = this->pointsData.__end_;
  v5 = end - begin;
  if (end != begin)
  {
    ptr = this->constants.__ptr_;
    v7 = *((_QWORD *)this->constants.__ptr_ + 6);
    if (v5 / v7 > a3 && (*((_BYTE *)ptr + 33) & 1) != 0)
    {
      v8 = *((unsigned __int8 *)ptr + 96) + v7 * a3;
      v9 = a2 * 32767.5;
      v10 = 0.0;
      if (v9 >= 0.0)
      {
        v10 = v9;
        if (v9 > 65535.0)
          v10 = 65535.0;
      }
      *(_WORD *)&begin[v8] = (int)v10;
    }
  }
  return this;
}

double PKStrokePathPointsPrivate::pointAtIndex@<D0>(PKStrokePathPointsPrivate *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  PKCompressedStrokePoint v6;
  PKCompressedStrokePoint v7;

  memset(&v7, 0, sizeof(v7));
  PKStrokePathPointsPrivate::operator[](this, a2, &v7);
  v6 = v7;
  return PKDecompressStrokePoint(&v6, *(double *)this->constants.__ptr_, a3);
}

void sub_1BE2E56D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2E5AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2E5BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2E5C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2E6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE2E634C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2E6438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  drawing::StrokeData::~StrokeData((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1BE2E64E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  drawing::StrokeData::~StrokeData((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1BE2E6548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<PKCompressedStrokePoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE2E6A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE2E6C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<PKStrokePathPointsShared>::shared_ptr[abi:ne180100]<PKStrokePathPointsShared,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E7774CC8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BE2E6C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<PKStrokePathPointsShared>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PKStrokePathPointsShared *,std::shared_ptr<PKStrokePathPointsShared>::__shared_ptr_default_delete<PKStrokePathPointsShared,PKStrokePathPointsShared>,std::allocator<PKStrokePathPointsShared>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B7F770);
}

void std::__shared_ptr_pointer<PKStrokePathPointsShared *,std::shared_ptr<PKStrokePathPointsShared>::__shared_ptr_default_delete<PKStrokePathPointsShared,PKStrokePathPointsShared>,std::allocator<PKStrokePathPointsShared>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<PKStrokePathPointsShared>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<PKStrokePathPointsShared *,std::shared_ptr<PKStrokePathPointsShared>::__shared_ptr_default_delete<PKStrokePathPointsShared,PKStrokePathPointsShared>,std::allocator<PKStrokePathPointsShared>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<PKStrokePathPointsShared>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 8);
    if (v2)
    {
      *(_QWORD *)(a2 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C3B7F770);
  }
}

void NotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  +[PKTextInputLanguageSelectionController sharedInstance](PKTextInputLanguageSelectionController, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "performSelectorOnMainThread:withObject:waitUntilDone:", sel__pencilPreferencesChangedCallback_, a3, 0);

}

void sub_1BE2E8E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1BE2E9158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE2EC43C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__assign_with_size[abi:ne180100]<std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1BE2EC640(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE2EC648(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BE2EC6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<ClipperLib::IntPoint>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void sub_1BE2EDBF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2EDC8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2EDD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2EDE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2EE324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2EEBB8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1BE2EF51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, id *a13)
{
  id *v13;

  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  _Unwind_Resume(a1);
}

double DKULinearstep(double a1, double a2, double a3)
{
  double v3;
  double result;

  v3 = (a3 - a1) / (a2 - a1);
  result = 0.0;
  if (v3 >= 0.0)
  {
    result = v3;
    if (v3 > 1.0)
      return 1.0;
  }
  return result;
}

double DKUClamp(double a1, double a2, double a3)
{
  if (a1 >= a2)
  {
    a2 = a1;
    if (a1 > a3)
      return a3;
  }
  return a2;
}

double DKUSmoothstep(double a1, double a2, double a3)
{
  double v3;
  double v4;

  v3 = (a3 - a1) / (a2 - a1);
  v4 = 0.0;
  if (v3 >= 0.0)
  {
    v4 = v3;
    if (v3 > 1.0)
      v4 = 1.0;
  }
  return v4 * v4 * (v4 * -2.0 + 3.0);
}

double DKURound(double a1)
{
  return round(a1);
}

double DKUFractionalPart(double a1)
{
  BOOL v1;
  double v2;
  double result;

  v1 = a1 <= 0.0;
  v2 = -(-a1 - floor(-a1));
  result = a1 - floor(a1);
  if (v1)
    return v2;
  return result;
}

double DKUMix(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

double DKURandom()
{
  return (double)random() / 2147483650.0;
}

double DKURandomBetween(double a1, double a2)
{
  return a1 + (a2 - a1) * ((double)random() / 2147483650.0);
}

double DKUReverseSquare(double a1)
{
  return 1.0 - (1.0 - a1) * (1.0 - a1);
}

long double DKUSineMap(double a1)
{
  return (sin(a1 * 3.14159265 + -1.57079633) + 1.0) * 0.5;
}

uint64_t PKSqueezePaletteViewLayoutIsExpandedOptionsLayout(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t PKSqueezePaletteViewLayoutIsUndoRedoLayout(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

double PKPointOnArc(double a1, double a2, double a3, double a4)
{
  double v4;
  void *v5;
  double v6;
  double v7;

  v4 = a1 + a3 * __sincos_stret(a4).__cosval;
  objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "scale");
  v7 = 1.0 / v6 * round(v4 * v6);

  return v7;
}

void PKAngleForOffsetPosition(double a1, double a2, double a3, double a4)
{
  long double v4;

  v4 = atan2(a2 - a4, a1 - a3);
  fmod(v4, 6.28318531);
}

void sub_1BE2F265C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2F2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE2F3324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getTUICandidateLabelClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF560480)
  {
    qword_1EF560480 = _sl_dlopen();
    if (!qword_1EF560480)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("TUICandidateLabel");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE2F3FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2F4040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2F40F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE2F415C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F41A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F4288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE2F42FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F43B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F4488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F4548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F4608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F46C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F47B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F48A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE2F49E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE2F4A20()
{
  JUMPOUT(0x1BE2F4A14);
}

void sub_1BE2F4AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE2F4BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2F5378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE2F5618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

double PKFunctionPiecewiseSimpleLinear::_solveLinearPiecewise(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double *v5;
  double v6;
  double v7;

  if (*a1 >= a5)
    return *(double *)a3;
  if (*(double *)(a2 - 8) <= a5)
    return *(double *)(a4 - 8);
  v5 = (double *)(a3 - 8);
  do
  {
    v6 = *a1++;
    v7 = v6;
    ++v5;
  }
  while (v6 < a5);
  return *(v5 - 1) + (a5 - *(a1 - 2)) / (v7 - *(a1 - 2)) * (*v5 - *(v5 - 1));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,WeightInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,WeightInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,WeightInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,WeightInfo>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,WeightInfo>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t PKPencilSqueezeThresholdMap(void *a1)
{
  id v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "doubleValue");
  v3 = llround(v2);
  if (v3 <= 449)
  {
    if (v3 > 199)
    {
      if (v3 == 200)
      {
        v4 = 3;
        goto LABEL_25;
      }
      if (v3 == 300)
      {
        v4 = 4;
        goto LABEL_25;
      }
    }
    else
    {
      if (v3 == 100)
      {
        v4 = 1;
        goto LABEL_25;
      }
      if (v3 == 135)
      {
        v4 = 2;
        goto LABEL_25;
      }
    }
  }
  else if (v3 <= 999)
  {
    if (v3 == 450)
    {
      v4 = 5;
      goto LABEL_25;
    }
    if (v3 == 675)
    {
      v4 = 6;
      goto LABEL_25;
    }
  }
  else
  {
    switch(v3)
    {
      case 1000:
        v4 = 7;
        goto LABEL_25;
      case 1500:
        v4 = 8;
        goto LABEL_25;
      case 2275:
        v4 = 9;
        goto LABEL_25;
    }
  }
  PKPencilSqueezeAnalyticsLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v7 = 138412290;
    v8 = v1;
    _os_log_error_impl(&dword_1BE213000, v5, OS_LOG_TYPE_ERROR, "Unable to map squeeze threshold: %@", (uint8_t *)&v7, 0xCu);
  }

  v4 = 0;
LABEL_25:

  return v4;
}

CGImageRef createDiffImageIfImageComparisonFails(CGImage *a1, CGImage *a2, int a3, int32x4_t *a4, int32x4_t *a5, float64x2_t *a6, int64x2_t *a7, int *a8, double a9)
{
  unint64_t Width;
  unint64_t Height;
  CGImageRef v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  CGColorSpace *v26;
  CGContext *v27;
  CGContext *v28;
  void *v29;
  CGContext *v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  char *v35;
  char *v36;
  void *v37;
  char *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int32x4_t *v45;
  uint64_t i;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  double v50;
  int64x2_t v51;
  float64x2_t v52;
  int8x8_t v53;
  int8x8_t v54;
  uint64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int8x8_t v58;
  int8x8_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  int64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  int8x16_t v78;
  CGDataProvider *v79;
  CGDataProvider *v80;
  void *v82;
  float64x2_t v83;
  float64x2_t v84;
  int64x2_t v85;
  float64x2_t v86;
  int64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  int64x2_t *v91;
  char *v92;
  char *v93;
  int32x4_t *v94;
  float64x2_t *v95;
  int32x4_t *v96;
  CGRect v97;
  CGRect v98;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  if (CGImageGetWidth(a2) == Width && CGImageGetHeight(a2) == Height)
  {
    v96 = a5;
    v20 = 0;
    v21 = 2;
    if (Width && Height)
    {
      v94 = a4;
      v95 = a6;
      v22 = 4 * Width;
      v23 = (char *)malloc_type_calloc(Height, 4 * Width, 0xE0BBBF5EuLL);
      v24 = (char *)malloc_type_calloc(Height, 4 * Width, 0x97FC31EBuLL);
      v25 = (char *)malloc_type_calloc(Height, 4 * Width, 0x81E45F04uLL);
      if (v23 && v24 && v25)
      {
        v92 = v25;
        v93 = v24;
        v91 = a7;
        v26 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
        v27 = CGBitmapContextCreate(v23, Width, Height, 8uLL, 4 * Width, v26, 0x2002u);
        if (v27)
        {
          v28 = v27;
          v97.origin.x = 0.0;
          v97.origin.y = 0.0;
          v97.size.width = (double)Width;
          v97.size.height = (double)Height;
          CGContextDrawImage(v27, v97, a1);
          CGContextFlush(v28);
          CGContextRelease(v28);
          v29 = v93;
          v30 = CGBitmapContextCreate(v93, Width, Height, 8uLL, 4 * Width, v26, 0x2002u);
          CGColorSpaceRelease(v26);
          if (v30)
          {
            v98.origin.x = 0.0;
            v98.origin.y = 0.0;
            v98.size.width = (double)Width;
            v98.size.height = (double)Height;
            CGContextDrawImage(v30, v98, a2);
            CGContextFlush(v30);
            CGContextRelease(v30);
            LODWORD(v31) = 0;
            v32 = 0;
            v33 = (float64x2_t)vdupq_n_s64(0x4070000000000000uLL);
            v34 = 0uLL;
            v35 = v23;
            v36 = v93;
            v37 = v92;
            v38 = v92;
            v39 = 0uLL;
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = v33;
            v45 = v94;
            do
            {
              for (i = 0; i != Width; ++i)
              {
                v47 = *(_DWORD *)&v35[4 * i];
                v48 = *(_DWORD *)&v36[4 * i];
                if (v47 == v48)
                {
                  v49 = (v47 & 0xFF000000) != 0;
                  v33 = 0uLL;
                  v50 = 0.0;
                  v44 = 0uLL;
                  v51 = 0uLL;
                }
                else
                {
                  v52.f64[0] = (double)HIBYTE(v47);
                  v53.i32[0] = v47 >> 8;
                  v53.i32[1] = *(_DWORD *)&v35[4 * i];
                  v54 = vand_s8(v53, (int8x8_t)0xFF000000FFLL);
                  v55.i64[0] = v54.u32[0];
                  v55.i64[1] = v54.u32[1];
                  v56 = vcvtq_f64_u64(v55);
                  v57.f64[0] = (double)HIBYTE(v48);
                  v58.i32[0] = v48 >> 8;
                  v58.i32[1] = *(_DWORD *)&v36[4 * i];
                  v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
                  v55.i64[0] = v59.u32[0];
                  v55.i64[1] = v59.u32[1];
                  v52.f64[1] = (double)BYTE2(v47);
                  v57.f64[1] = (double)BYTE2(v48);
                  v60 = vsubq_f64(v52, v57);
                  v61 = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v60), (int8x16_t)v60, (int8x16_t)vnegq_f64(v60));
                  v50 = v61.f64[1];
                  v39 = vaddq_f64(v39, v61);
                  v62 = vsubq_f64(v56, vcvtq_f64_u64(v55));
                  v63 = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v62), (int8x16_t)v62, (int8x16_t)vnegq_f64(v62));
                  v33 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, v33), (int8x16_t)v33, (int8x16_t)v61);
                  v44 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v63, v44), (int8x16_t)v44, (int8x16_t)v63);
                  v42 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v61), (int8x16_t)v42, (int8x16_t)v61);
                  v43 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v43, v63), (int8x16_t)v43, (int8x16_t)v63);
                  v41 = vaddq_f64(v41, v63);
                  v34 = vaddq_f64(v34, vmulq_f64(v61, v61));
                  v40 = vaddq_f64(v40, vmulq_f64(v63, v63));
                  if (a3)
                  {
                    if (v63.f64[1] > v61.f64[0])
                      v61.f64[0] = v63.f64[1];
                    if (v63.f64[0] <= v61.f64[0])
                      v63.f64[0] = v61.f64[0];
                    if (v61.f64[1] <= v63.f64[0])
                      v50 = v63.f64[0];
                    v51 = vdupq_lane_s64(*(uint64_t *)&v50, 0);
                  }
                  else
                  {
                    if (v61.f64[1] > 255.0)
                      v50 = 255.0;
                    v64 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
                    v51 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v63, v64), (int8x16_t)v64, (int8x16_t)v63);
                  }
                  v49 = 1;
                }
                v31 = (v49 + v31);
                *(_DWORD *)&v38[4 * i] = *(double *)&v51.i64[1] | (*(double *)v51.i64 << 8) | (v50 << 16) | 0xFF000000;
              }
              v35 += v22;
              v36 += v22;
              v38 += v22;
              ++v32;
            }
            while (v32 != Height);
            if (!(_DWORD)v31)
              v31 = Height * Width;
            v65 = 1.0 / (double)v31;
            v66 = vmulq_n_f64(v39, v65);
            v67 = vsubq_f64(vmulq_n_f64(v34, v65), vmulq_f64(v66, v66));
            v68 = (int64x2_t)vsqrtq_f64((float64x2_t)vbicq_s8((int8x16_t)v67, (int8x16_t)vcltzq_f64(v67)));
            v69 = vmulq_n_f64(v41, v65);
            v70 = vsubq_f64(vmulq_n_f64(v40, v65), vmulq_f64(v69, v69));
            v71 = (int64x2_t)vsqrtq_f64((float64x2_t)vbicq_s8((int8x16_t)v70, (int8x16_t)vcltzq_f64(v70)));
            v72 = (float64x2_t)vzip1q_s64((int64x2_t)v66, v68);
            v87 = v68;
            v88 = v66;
            v73 = (float64x2_t)vzip2q_s64((int64x2_t)v66, v68);
            v74 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v72, v73), (int8x16_t)v72, (int8x16_t)v73);
            v75 = (float64x2_t)vzip1q_s64((int64x2_t)v69, v71);
            v76 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v74, v75), (int8x16_t)v74, (int8x16_t)v75);
            v85 = v71;
            v86 = v69;
            v77 = (float64x2_t)vzip2q_s64((int64x2_t)v69, v71);
            v78 = vbslq_s8((int8x16_t)vcgtq_f64(v76, v77), (int8x16_t)v76, (int8x16_t)v77);
            if (*(double *)v78.i64 <= *(double *)&v78.i64[1])
              v78.i64[0] = v78.i64[1];
            v83 = v44;
            v84 = v33;
            v89 = v43;
            v90 = v42;
            if (*(double *)v78.i64 <= a9)
            {
              v20 = 0;
            }
            else
            {
              v79 = CGDataProviderCreateWithData(0, v92, v22 * Height, (CGDataProviderReleaseDataCallback)free_ptr);
              v20 = CGImageCreate(Width, Height, 8uLL, 0x20uLL, 4 * Width, v26, 0x2002u, v79, 0, 1, kCGRenderingIntentDefault);
              v80 = v79;
              v45 = v94;
              CGDataProviderRelease(v80);
              v37 = v92;
              v29 = v93;
            }
            if (v20)
              v82 = 0;
            else
              v82 = v37;
            cleanup(v23, v29, v82);
            if (v45)
              *v45 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v84), (int32x4_t)vcvtq_s64_f64(v83));
            if (v96)
              *v96 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v90), (int32x4_t)vcvtq_s64_f64(v89));
            if (v95)
            {
              *v95 = v88;
              v95[1] = v86;
            }
            v21 = 0;
            if (v91)
            {
              *v91 = v87;
              v91[1] = v85;
            }
          }
          else
          {
            cleanup(v23, v93, v92);
            v20 = 0;
            v21 = 4;
          }
        }
        else
        {
          free(v23);
          free(v93);
          free(v92);
          CGColorSpaceRelease(v26);
          v20 = 0;
          v21 = 3;
        }
      }
      else
      {
        cleanup(v23, v24, v25);
        v20 = 0;
        v21 = 2;
      }
    }
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  *a8 = v21;
  return v20;
}

void cleanup(void *a1, void *a2, void *a3)
{
  if (a1)
    free(a1);
  if (a2)
    free(a2);
  if (a3)
    free(a3);
}

void free_ptr(int a1, void *a2)
{
  free(a2);
}

void _PKHandleAutoRefineSettingsDidChange(uint64_t a1, void *a2)
{
  _BOOL4 v3;
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  const __CFString *v9;
  __int16 v10;
  _BOOL4 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = +[PKSettingsDaemon autoRefineEnabled](PKSettingsDaemon, "autoRefineEnabled");
  v4 = os_log_create("com.apple.pencilkit", "PKAutoRefineSettingsObserver");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = CFSTR("PKRemoteAutoRefineSettingsDidChange");
    v10 = 1024;
    v11 = v3;
    _os_log_impl(&dword_1BE213000, v4, OS_LOG_TYPE_DEFAULT, "Handle remote notification %@, autoRefineEnabled = %{BOOL}d", (uint8_t *)&v8, 0x12u);
  }

  v5 = a2;
  v6 = v5;
  if (v5)
  {
    v7 = *((_QWORD *)v5 + 1);
    if (v7)
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v6);
  }

}

void sub_1BE2F71F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void vSyncCallback(__IOMobileFramebuffer *a1, unsigned int a2, const __CFDictionary *a3, _QWORD *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  const __CFDictionary *v12;
  _QWORD block[7];

  v12 = a3;
  -[__CFDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", CFSTR("Presentation_delta"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "integerValue");
  v7 = timebase_info;
  v8 = *(unsigned int *)algn_1EF55D0DC;

  -[__CFDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", CFSTR("Presentation_time"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "unsignedIntegerValue");

  if (a4)
  {
    block[1] = 3221225472;
    v11 = a4[1];
    block[0] = MEMORY[0x1E0C809B0];
    block[2] = __67__PKRendererVSyncController_signalVSyncSemaphore_presentationTime___block_invoke;
    block[3] = &unk_1E77771C0;
    block[4] = a4;
    *(double *)&block[5] = (double)(v6 * v7 / v8) / 1000000000.0;
    block[6] = v10;
    dispatch_async(v11, block);
  }

}

void sub_1BE2F775C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE2F7884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F7AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CGColorRef CGColorCreateRGBA(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *DeviceRGB;
  CGColorRef v9;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  v9 = CGColorCreate(DeviceRGB, components);
  CGColorSpaceRelease(DeviceRGB);
  CFAutorelease(v9);
  return v9;
}

void sub_1BE2F7FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F8144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE2F8344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE2F8444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);
  drawing::Ink::~Ink((drawing::Ink *)va);

  _Unwind_Resume(a1);
}

void sub_1BE2F84F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  drawing::Ink::~Ink((drawing::Ink *)va);
  _Unwind_Resume(a1);
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x1C3B7F770);
  }
}

void sub_1BE2F8684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE2F87AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PKMetalRenderState;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE2F8C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_1BE2F8E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F8EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2F9004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE2F9054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2F90A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE2F9134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *PKTextInputDescriptionForHandwritingShotState(unint64_t a1)
{
  if (a1 > 4)
    return &stru_1E777DEE8;
  else
    return off_1E7779190[a1];
}

void sub_1BE2FA94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_1BE2FB0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE2FB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE2FC998(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1BE2FD584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v48 - 216), 8);
  _Block_object_dispose((const void *)(v48 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t drawingV1::Point::Point(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774B40;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774B40;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void drawingV1::Point::~Point(drawingV1::Point *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawingV1::Point::Point(drawingV1::Point *this, const drawingV1::Point *a2)
{
  char v2;
  float result;

  *(_QWORD *)this = &off_1E7774B40;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  float result;

  *(_QWORD *)this = &off_1E7774B40;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t drawingV1::Point::operator=(uint64_t a1, uint64_t a2, float a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v10[0] = &off_1E7774B40;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      a3 = *(float *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v11;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a3;
    *(float *)(a1 + 12) = a4;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float drawingV1::swap(drawingV1 *this, drawingV1::Point *a2, drawingV1::Point *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float drawingV1::Point::Point(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774B40;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774B40;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t drawingV1::Point::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E7774B40;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t drawingV1::Point::formatText(drawingV1::Point *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "x", *((float *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "y", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Point::readFrom(drawingV1::Point *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 16) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t drawingV1::Point::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

BOOL drawingV1::Point::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t drawingV1::Point::hash_value(drawingV1::Point *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v4 = *((float *)this + 2);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

void sub_1BE2FECF4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

uint64_t _UIColorFromRGB(int a1, int a2, int a3)
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", (double)a1 / 255.0, (double)a2 / 255.0, (double)a3 / 255.0, 1.0);
}

unint64_t PKHashUInt(unint64_t a1)
{
  unint64_t v1;

  v1 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
  return v1 ^ (v1 >> 31);
}

void PKCrash()
{
  abort();
}

void sub_1BE3032B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

uint64_t PKHasScribbleInteractionInView(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(a1, "interactions", 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
        {
          v6 = 1;
          goto LABEL_13;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v6 = 0;
      if (v3)
        continue;
      break;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_13:

  return v6;
}

id PKScribbleInteractionInView(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(v1, "interactions", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v2);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v9, "scribbleInteractionWrapper");
          v11 = objc_claimAutoreleasedReturnValue();

          v6 = (id)v11;
          goto LABEL_16;
        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          objc_msgSend(v9, "scribbleInteractionWrapper");
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v10, "isElementContainer"))
          {
            v6 = v10;

            v5 = v6;
          }
          else
          {
            v6 = v10;
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_16:

  if (v5)
    v12 = v5;
  else
    v12 = v6;
  v13 = v12;

  return v13;
}

id PKScribbleInteractionInTextInput(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || (PKScribbleInteractionInView(v1), (v2 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v1, "textInputView");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      PKScribbleInteractionInView(v3);
      v2 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v2 = 0;
    }
  }

  return v2;
}

void sub_1BE3049E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE304AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE304B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE304BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE304C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE304D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE304E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE305070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE30517C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3052A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PKMetalUnpurgeableStrokeRenderCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE30534C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3053BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE305464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3085F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE308988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1BE309034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKMetalRendererController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE30944C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE309614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE309760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE3099B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE309A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE309CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE30A788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  a36 = (void **)&a24;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a36);
  _Unwind_Resume(a1);
}

void sub_1BE30A9C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30AF60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE30B854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30BBD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30BF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE30C298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30C650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30C7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE30CDB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30D1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE30D308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE30D9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30DB94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30E35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE30E52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE30E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE30E888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id CacheFileURLForUUID(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 0;
  if (v1 && v3)
  {
    objc_msgSend(v1, "uniqueCacheFilePath");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingPathExtension:", CFSTR("sessionCache"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x1E0C99E98];
    v10[0] = v3;
    v10[1] = CFSTR("com.apple.PencilKit.handwriting");
    v10[2] = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "fileURLWithPathComponents:", v8);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

id PKLoadRecognitionSession(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v14;
  id v15;
  uint8_t buf[4];
  NSObject *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  CacheFileURLForUUID(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "AES128Key");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v15 = 0;
    +[PKDataEncryption decryptFile:key:error:]((uint64_t)PKDataEncryption, v2, v3, (uint64_t)&v15);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v15;
    v6 = v5;
    if (!v4)
    {
      if (!v5 || -[NSObject code](v5, "code") == 4)
      {
        v7 = 0;
LABEL_17:

        goto LABEL_18;
      }
      v11 = os_log_create("com.apple.pencilkit", "");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v6;
        _os_log_error_impl(&dword_1BE213000, v11, OS_LOG_TYPE_ERROR, "Failed to load session cache data file: %@", buf, 0xCu);
      }
      v7 = 0;
LABEL_16:

      goto LABEL_17;
    }
    v14 = v5;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v4, &v14);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v14;

    if (v7 && !v8)
    {

LABEL_13:
      v11 = os_log_create("com.apple.pencilkit", "");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v1, "uniqueCacheFilePath");
        v12 = objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v17 = v12;
        _os_log_impl(&dword_1BE213000, v11, OS_LOG_TYPE_DEFAULT, "Successfully loaded recognition session for: %@", buf, 0xCu);

      }
      v6 = v11;
      goto LABEL_16;
    }
    v9 = v8;
    v10 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_error_impl(&dword_1BE213000, v10, OS_LOG_TYPE_ERROR, "Failed to unarchive session cache data: %@", buf, 0xCu);
    }

    if (v7)
      goto LABEL_13;
  }
  else
  {
    v7 = 0;
  }
LABEL_18:

  return v7;
}

uint64_t PKSaveRecognitionSession(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  char v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    CacheFileURLForUUID(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v17 = 0;
LABEL_16:

      goto LABEL_17;
    }
    v21 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v21);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v21;
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "URLByDeletingLastPathComponent");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v8;
      v11 = objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v10, 1, 0, &v20);
      v12 = v20;

      if ((v11 & 1) != 0)
      {
        objc_msgSend(v5, "AES128Key");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v12;
        v14 = +[PKDataEncryption encryptData:to:key:error:]((uint64_t)PKDataEncryption, v7, v6, v13, (uint64_t)&v19);
        v8 = v19;

        if ((v14 & 1) != 0)
        {
          v15 = os_log_create("com.apple.pencilkit", "");
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v5, "uniqueCacheFilePath");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v23 = v16;
            _os_log_impl(&dword_1BE213000, v15, OS_LOG_TYPE_DEFAULT, "Successfully saved recognition session for: %@", buf, 0xCu);

          }
          v17 = 1;
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {
        v8 = v12;
      }
    }
    v15 = os_log_create("com.apple.pencilkit", "");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v8;
      _os_log_error_impl(&dword_1BE213000, v15, OS_LOG_TYPE_ERROR, "Failed to save session cache: %@", buf, 0xCu);
    }
    v17 = 0;
    goto LABEL_15;
  }
  v17 = 0;
LABEL_17:

  return v17;
}

void sub_1BE30F948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  id *v42;
  id *v43;
  id *v44;

  objc_destroyWeak(v42);
  objc_destroyWeak(v44);
  objc_destroyWeak(v43);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a42);
  _Unwind_Resume(a1);
}

void sub_1BE30FD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE31066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE313FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31404C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE314090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3140CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31424C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3142DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE314384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3143D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3144D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3145CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE314634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3147D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void sub_1BE314A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE314B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE314C2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE314CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE314ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE31508C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3150EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE315298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE315454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE315518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE315558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE315670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3156B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3156DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE315718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3157F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE315898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE315930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE315C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE315CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE315E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE315F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE315FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE316078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31611C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE316148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE316174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3162CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE316478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1BE316808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1BE316910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31694C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31698C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3169CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE316A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE316AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE316BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE316D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1BE316E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE316F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE316FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31700C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE317038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE317068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE317248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3172F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE317350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3173F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE317504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3177EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE317860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3178B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE317A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE317B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE317B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE317D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE317E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE317FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE318368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE318500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE31865C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE318920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE318AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE318BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE318D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE318DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

void sub_1BE319824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  uint64_t v17;

  v17 = *(_QWORD *)(a10 + 32);
  *(_QWORD *)(a10 + 32) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);

  _Unwind_Resume(a1);
}

void sub_1BE319A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE319C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE319E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE319F7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31A050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE31A368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31AB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE31B1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE31B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;
  uint64_t v45;

  *(_QWORD *)(v45 - 144) = &a35;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(_QWORD *)(v45 - 144) = &a38;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(_QWORD *)(v45 - 144) = &a41;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(_QWORD *)(v45 - 144) = &a44;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(_QWORD *)(v45 - 144) = v45 - 240;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));
  *(_QWORD *)(v45 - 144) = v45 - 216;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 144));

  _Unwind_Resume(a1);
}

void sub_1BE31B7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE31B894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE31BB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE31BD7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1BE31C4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);

  _Unwind_Resume(a1);
}

void sub_1BE31C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE31C8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 8) = v18;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);

  _Unwind_Resume(a1);
}

void sub_1BE31CB28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31CE44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31CEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31CFB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31D130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31D210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31D64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31D6A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31D6F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double PKFunctionPiecewiseBezier::solveForInput(double **this, double a2, double a3)
{
  double v6;

  v6 = PKFunctionPiecewiseBezier::solveForMinValue(this, a2);
  return (a3 + 1.0) * 0.5 * PKFunctionPiecewiseBezier::solveForMaxValue(this, a2) + (1.0 - (a3 + 1.0) * 0.5) * v6;
}

double PKFunctionPiecewiseBezier::maxInput(PKFunctionPiecewiseBezier *this)
{
  return *(double *)(*((_QWORD *)this + 8) - 8);
}

uint64_t PKFunctionPiecewiseBezier::isKindOfFunction(PKFunctionPiecewiseBezier *this)
{
  return 3;
}

double PKFunction::solveForInput(PKFunction *this, double a2, double a3)
{
  return 0.0;
}

double PKFunction::maxInput(PKFunction *this)
{
  return 1.0;
}

uint64_t PKFunction::isKindOfFunction(PKFunction *this)
{
  return 0;
}

double PKFunctionPiecewiseBezier::solveForMinValue(double **this, double a2)
{
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (PKFunctionPiecewiseBezier::solveForMinValue(double)::onceToken != -1)
      dispatch_once(&PKFunctionPiecewiseBezier::solveForMinValue(double)::onceToken, &__block_literal_global_380);
    return *this[1];
  }
  v3 = this[7];
  if (*v3 >= a2)
    return *this[1];
  if (*(this[8] - 1) <= a2)
    return *(this[2] - 1);
  v4 = 0x1FFFFFFFFFFFFFFALL;
  do
  {
    v5 = *v3++;
    v6 = v5;
    v4 += 3;
  }
  while (v5 < a2);
  v7 = (a2 - *(v3 - 2)) / (v6 - *(v3 - 2));
  v8 = this[16][v4];
  v9 = *(double *)(*(_QWORD *)&v8 + 8 * vcvtmd_u64_f64(v7 * 10.0));
  return v9 + (*(double *)(*(_QWORD *)&v8 + 8 * vcvtpd_u64_f64(v7 * 10.0)) - v9) * -(floor(v7 * 10.0) - v7 * 10.0);
}

double PKFunctionPiecewiseBezier::solveForMaxValue(double **this, double a2)
{
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (PKFunctionPiecewiseBezier::solveForMaxValue(double)::onceToken != -1)
      dispatch_once(&PKFunctionPiecewiseBezier::solveForMaxValue(double)::onceToken, &__block_literal_global_383);
    return *this[4];
  }
  v3 = this[7];
  if (*v3 >= a2)
    return *this[4];
  if (*(this[8] - 1) <= a2)
    return *(this[5] - 1);
  v4 = 0x1FFFFFFFFFFFFFFALL;
  do
  {
    v5 = *v3++;
    v6 = v5;
    v4 += 3;
  }
  while (v5 < a2);
  v7 = (a2 - *(v3 - 2)) / (v6 - *(v3 - 2));
  v8 = this[19][v4];
  v9 = *(double *)(*(_QWORD *)&v8 + 8 * vcvtmd_u64_f64(v7 * 10.0));
  return v9 + (*(double *)(*(_QWORD *)&v8 + 8 * vcvtpd_u64_f64(v7 * 10.0)) - v9) * -(floor(v7 * 10.0) - v7 * 10.0);
}

void ___ZN25PKFunctionPiecewiseBezier16solveForMinValueEd_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = os_log_create("com.apple.pencilkit", "");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1BE213000, v0, OS_LOG_TYPE_FAULT, "Detected invalid inValue", v1, 2u);
  }

}

void ___ZN25PKFunctionPiecewiseBezier16solveForMaxValueEd_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = os_log_create("com.apple.pencilkit", "");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1BE213000, v0, OS_LOG_TYPE_FAULT, "Detected invalid inValue", v1, 2u);
  }

}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<double>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1BE31DD7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE31DD84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<double>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BE31DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<PKOutputFunction>::__assign_with_size[abi:ne180100]<PKOutputFunction*,PKOutputFunction*>(uint64_t a1, PKOutputFunction *a2, PKOutputFunction *a3, unint64_t a4)
{
  int v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  PKOutputFunction *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<PKOutputFunction>::__vdeallocate((void **)a1);
    if (a4 > 0x666666666666666)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<PKOutputFunction>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>(v8, a2, a3, *(PKOutputFunction **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (PKOutputFunction *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PKOutputFunction *,PKOutputFunction *,PKOutputFunction *>(a2, v13, (uint64_t)v9);
    result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>(v8, v13, a3, *(PKOutputFunction **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PKOutputFunction *,PKOutputFunction *,PKOutputFunction *>(a2, a3, (uint64_t)v9);
  v14 = result;
  v15 = *(_QWORD *)(a1 + 8);
  if (v15 != result)
  {
    do
    {
      result = *(_QWORD *)(v15 - 8);
      *(_QWORD *)(v15 - 8) = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v15 -= 40;
    }
    while (v15 != v14);
  }
  *(_QWORD *)(a1 + 8) = v14;
  return result;
}

void sub_1BE31E16C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE31E174(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<PKOutputFunction>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKOutputFunction>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

PKOutputFunction *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>(int a1, PKOutputFunction *a2, PKOutputFunction *a3, PKOutputFunction *this)
{
  const PKOutputFunction *v5;
  PKOutputFunction *v7;

  v7 = this;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      PKOutputFunction::PKOutputFunction(this, v5);
      v5 = (const PKOutputFunction *)((char *)v5 + 40);
      this = (PKOutputFunction *)((char *)v7 + 40);
      v7 = (PKOutputFunction *)((char *)v7 + 40);
    }
    while (v5 != a3);
  }
  return this;
}

void sub_1BE31E240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,PKOutputFunction*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,PKOutputFunction*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 8) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v3 -= 40;
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PKOutputFunction *,PKOutputFunction *,PKOutputFunction *>(PKOutputFunction *a1, PKOutputFunction *a2, uint64_t a3)
{
  const PKOutputFunction *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      PKOutputFunction::PKOutputFunction((PKOutputFunction *)v11, v5);
      v6 = v11[1];
      *(_OWORD *)a3 = v11[0];
      *(_OWORD *)(a3 + 16) = v6;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v8 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = v7;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      v5 = (const PKOutputFunction *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1BE31E360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 40))(a13);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKOutputFunction>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

void std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

PKOutputFunction *std::vector<PKOutputFunction>::__init_with_size[abi:ne180100]<PKOutputFunction*,PKOutputFunction*>(PKOutputFunction *result, PKOutputFunction *a2, PKOutputFunction *a3, unint64_t a4)
{
  PKOutputFunction *v6;

  if (a4)
  {
    v6 = result;
    std::vector<PKOutputFunction>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PKOutputFunction>,PKOutputFunction*,PKOutputFunction*,PKOutputFunction*>((int)v6 + 16, a2, a3, *((PKOutputFunction **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1BE31E4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<PKOutputFunction>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PKOutputFunction>::__push_back_slow_path<PKOutputFunction>(uint64_t *a1, const PKOutputFunction *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  PKOutputFunction *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKOutputFunction>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (PKOutputFunction *)&v10[40 * v4];
  v16 = &v10[40 * v9];
  PKOutputFunction::PKOutputFunction(v14, a2);
  v15 = (char *)v14 + 40;
  std::vector<PKOutputFunction>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<PKOutputFunction>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BE31E5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PKOutputFunction>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>,std::reverse_iterator<PKOutputFunction*>>(uint64_t a1, uint64_t a2, const PKOutputFunction *a3, uint64_t a4, const PKOutputFunction *a5, uint64_t a6, uint64_t a7)
{
  const PKOutputFunction *v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a6;
  v11 = a7;
  if (a3 != a5)
  {
    v8 = a3;
    do
    {
      v8 = (const PKOutputFunction *)((char *)v8 - 40);
      PKOutputFunction::PKOutputFunction((PKOutputFunction *)(a7 - 40), v8);
      a7 = v11 - 40;
      v11 -= 40;
    }
    while (v8 != a5);
    return v10;
  }
  return a6;
}

void sub_1BE31E650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PKOutputFunction>,std::reverse_iterator<PKOutputFunction*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v3 += 40;
    }
  }
  return a1;
}

double PKFunctionConstant::solveForInput(PKFunctionConstant *this, double a2, double a3)
{
  return (a3 + 1.0) * 0.5 * *((double *)this + 9) + (1.0 - (a3 + 1.0) * 0.5) * *((double *)this + 8);
}

double PKFunctionConstant::maxInput(PKFunctionConstant *this)
{
  return *((double *)this + 7);
}

uint64_t PKFunctionConstant::isKindOfFunction(PKFunctionConstant *this)
{
  return 1;
}

uint64_t PKFunctionConstant::clone(PKFunctionConstant *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 7);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)v2 = &unk_1E7773E40;
  *(_QWORD *)(v2 + 56) = v3;
  if ((PKFunctionConstant *)v2 != this)
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v2 + 8), *((char **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v2 + 32), *((char **)this + 4), *((_QWORD *)this + 5), (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
  }
  *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)this + 56);
  *(_QWORD *)(v2 + 72) = *((_QWORD *)this + 9);
  return v2;
}

void PKFunctionConstant::~PKFunctionConstant(PKFunction *this)
{
  PKFunction::~PKFunction(this);
  JUMPOUT(0x1C3B7F770);
}

void sub_1BE31E814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31E8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31E988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31EA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE31EAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE31EC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE31ECAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31F00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v1;

  _Unwind_Resume(a1);
}

void sub_1BE31F1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE31F3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE31F9A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE31FB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE31FE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE31FFE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3206C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE32090C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3209C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE320B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CGFloat DKDNearestTValueOnLineToPoint(CGPoint *a1, CGPoint a2)
{
  double y;

  y = a1->y;
  return ((a2.y - y) * (a1[1].y - y) + (a2.x - a1->x) * (a1[1].x - a1->x))
       / ((a1[1].y - y) * (a1[1].y - y) + (a1[1].x - a1->x) * (a1[1].x - a1->x));
}

void sub_1BE320DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3210C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3217AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE321B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE321D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PKTouchDetectionUpdateCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a2, "didUpdateWithUserInfo:", a5);
}

void sub_1BE3233A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE323438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3235AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3236B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE3237C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3238C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE323B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE323CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE323DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE32455C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE324750(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE324F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  id *v32;
  id *v33;

  objc_destroyWeak(v32);
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE3250A4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE32521C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE3267B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id location;
  id *v69;
  id *v70;
  id *v71;
  id *v72;
  int v73;
  int v74;

  objc_destroyWeak(v69);
  objc_destroyWeak(v70);
  if (v74)
    objc_destroyWeak(v72);
  if (v73)
    objc_destroyWeak(v71);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE327608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE32951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE32B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE32BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BE32C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE32FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE3301A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3302F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE330368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE330528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3306D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE330760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3308F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE330C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE330E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE330F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE331030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE331114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE331260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE331D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v21;

  v21 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

void sub_1BE331EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE332128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE332330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3323C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE332724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE332828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE332880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKPaintAreaViewSurface;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE33298C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE332A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE332DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_1BE332FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3331A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3332DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE333474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3335A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE333690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE33373C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE33393C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE333CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1BE333DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE333EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE334000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE334240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3343A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE334524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE334684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE334810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double PKSmoothstep(double a1, double a2, double a3, double a4, double a5)
{
  double v5;

  v5 = fmax(fmin((a1 - a2) / (a3 - a2), 1.0), 0.0);
  return a4 + (v5 * (v5 * (v5 * -2.0)) + v5 * 3.0 * v5) * (a5 - a4);
}

double PKLinearstep(double a1, double a2, double a3, double a4, double a5)
{
  return a4 + fmax(fmin((a1 - a2) / (a3 - a2), 1.0), 0.0) * (a5 - a4);
}

void sub_1BE334FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

id getDDDetectionControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_128;
  v7 = _MergedGlobals_128;
  if (!_MergedGlobals_128)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getDDDetectionControllerClass_block_invoke;
    v3[3] = &unk_1E7777068;
    v3[4] = &v4;
    __getDDDetectionControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE335974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDDDetectionControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE61F8)
  {
    qword_1ECEE61F8 = _sl_dlopen();
    if (!qword_1ECEE61F8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("DDDetectionController");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t versioned_document::Document::Document(uint64_t this)
{
  *(_QWORD *)this = off_1E7774868;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E7774868;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void versioned_document::Document::~Document(versioned_document::Document *this)
{
  void **v2;

  *(_QWORD *)this = off_1E7774868;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7774868;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7774868;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x1C3B7F770]();
}

versioned_document::Document *versioned_document::Document::Document(versioned_document::Document *this, const versioned_document::Document *a2)
{
  versioned_document::Version ***v3;
  int v4;
  const versioned_document::Version **v5;
  const versioned_document::Version **v6;

  *(_QWORD *)this = off_1E7774868;
  *((_QWORD *)this + 1) = 0;
  v3 = (versioned_document::Version ***)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 36) = 1;
    *((_DWORD *)this + 8) = v4;
  }
  v5 = (const versioned_document::Version **)*((_QWORD *)a2 + 1);
  v6 = (const versioned_document::Version **)*((_QWORD *)a2 + 2);
  while (v5 != v6)
    PB::PtrVector<versioned_document::Version>::emplace_back<versioned_document::Version const&>(v3, *v5++);
  return this;
}

uint64_t PB::PtrVector<versioned_document::Version>::emplace_back<versioned_document::Version const&>(versioned_document::Version ***a1, const versioned_document::Version *a2)
{
  versioned_document::Version *v4;
  uint64_t result;
  unint64_t v6;
  versioned_document::Version **v7;
  versioned_document::Version **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  versioned_document::Version **v14;
  char *v15;
  versioned_document::Version **v16;
  versioned_document::Version **v17;
  versioned_document::Version *v18;
  int64x2_t v19;
  versioned_document::Version **v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = (versioned_document::Version *)operator new();
  versioned_document::Version::Version(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v12);
    else
      v13 = 0;
    v14 = (versioned_document::Version **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (versioned_document::Version **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (versioned_document::Version **)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1BE335DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Document::operator=(uint64_t a1, const versioned_document::Document *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (**v7)(versioned_document::Document *__hidden);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  if ((const versioned_document::Document *)a1 != a2)
  {
    versioned_document::Document::Document((versioned_document::Document *)&v7, a2);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    v7 = off_1E7774868;
    v11 = (void **)&v8;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v11);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t versioned_document::swap(uint64_t this, versioned_document::Document *a2, versioned_document::Document *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return this;
}

uint64_t versioned_document::Document::Document(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_1E7774868;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(_QWORD *)a1 = off_1E7774868;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t versioned_document::Document::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(versioned_document::Document *__hidden);
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  void **v16;

  if (a1 != a2)
  {
    v12 = off_1E7774868;
    v13 = 0uLL;
    v14 = 0;
    v5 = *(_DWORD *)(a2 + 32);
    v4 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v15 = __PAIR64__(v4, v5);
    std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(&v13);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    v14 = v10;
    v12 = off_1E7774868;
    v16 = (void **)&v13;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v16);
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t versioned_document::Document::formatText(versioned_document::Document *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "serializationVersion");
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "version");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t versioned_document::Document::readFrom(versioned_document::Document *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_31;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        PB::PtrVector<versioned_document::Version>::emplace_back<>(v8);
        v29 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v12 >> 3) == 1)
      {
        *((_BYTE *)this + 36) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v30 = 0;
          v31 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_46;
            }
            v32 = v20 + 1;
            v33 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v32;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v20 = v32;
            v15 = v31++ > 8;
            if (v15)
            {
LABEL_42:
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v15 = v24++ > 8;
            if (v15)
              goto LABEL_42;
          }
        }
LABEL_46:
        *((_DWORD *)this + 8) = v25;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t PB::PtrVector<versioned_document::Version>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E7774830;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE3364E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Document::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if ((*(_BYTE *)(this + 36) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base ***)(v3 + 8);
  v4 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

BOOL versioned_document::Document::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  v3 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v3)
    return 0;
  if (v5 == v4)
    return 1;
  do
  {
    result = versioned_document::Version::operator==(*v5, *v3);
    if (!result)
      break;
    ++v5;
    ++v3;
  }
  while (v5 != *(uint64_t **)(a1 + 16));
  return result;
}

uint64_t versioned_document::Document::hash_value(versioned_document::Document *this)
{
  uint64_t v1;
  versioned_document::Version **v2;
  versioned_document::Version **v3;
  uint64_t v4;
  versioned_document::Version *v5;

  if ((*((_BYTE *)this + 36) & 1) != 0)
    v1 = *((unsigned int *)this + 8);
  else
    v1 = 0;
  v2 = (versioned_document::Version **)*((_QWORD *)this + 1);
  v3 = (versioned_document::Version **)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= versioned_document::Version::hash_value(v5);
    }
    while (v2 != v3);
  }
  return v4 ^ v1;
}

void sub_1BE336768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3368BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE336B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE336E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3370B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE3371A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE337284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE337360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3374EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE3375F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3376B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3378C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE337B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE337C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE337D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE337DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE338078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE338268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE338480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE338534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE338844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE338CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE338E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100]((PB::Writer ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_1BE33A948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_1BE33B9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE33C5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void std::vector<CGPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<PKCompressedStrokePoint>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<PKCompressedStrokePoint>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1BE33C964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PKCompressedStrokePoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1BE33CB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE33CC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE33CC88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE33CD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE33CDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE33CDE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33CE44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33CF7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE33CFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D3CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D4AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D50C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE33D6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33D890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE33D8C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33DB14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void PKBSplineFilter::splineFromStroke(id *this, PKStrokePath *a2, PKInk *a3, double a4)
{
  PKStrokePath *v8;
  PKInk *v9;
  PKStrokePath *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  PKStrokePath *v14;

  v8 = a2;
  v9 = a3;
  PKBSplineFilter::configureForInk((PKBSplineFilter *)this, v9);
  v10 = v8;
  v14 = v10;
  objc_storeStrong(this + 14, a2);
  v11 = -[PKStrokePath count](v10, "count", &unk_1E7774240);
  this[20] = 0;
  *((double *)this + 21) = (double)(unint64_t)(v11 - 1);
  this[16] = 0;
  (*((void (**)(id *))*this + 4))(this);
  (*(void (**)(id *, PKInk *, _QWORD, double))*this)(this, v9, 0, 1.0);
  if (a4 >= 0.0)
    *((double *)this + 15) = a4;
  this[1] = &v13;
  (*((void (**)(id *))*this + 5))(this);
  (*((void (**)(id *))*this + 1))(this);
  v12 = this[14];
  this[14] = 0;

  this[1] = 0;
}

void sub_1BE33DCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE33DF7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33E08C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE33E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v43 - 208), 8);
  _Block_object_dispose((const void *)(v43 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_1BE33E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE33E558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33E594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE33E938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33E984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33EB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE33ECB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33EF1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33EF50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE33F2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BE33F400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE33F52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE33F594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F5F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33F84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE33F8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE33FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE33FCB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33FDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B7F770](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_1BE33FEA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE33FEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE340068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3401C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE340250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE340360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3403AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE340434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void PKBSplineFilter::drawingBeganWithInk(PKBSplineFilter *a1, void *a2, uint64_t a3, double a4)
{
  PKInk *v7;

  v7 = a2;
  PKBSplineFilter::configureForInk(a1, v7);
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk((uint64_t)a1, v7, a3, a4);
  *((_BYTE *)a1 + 108) = 0;

}

void sub_1BE3404C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKBSplineFilter::drawingEnded(PKBSplineFilter *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 9) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
  *((_BYTE *)this + 108) = 1;
  return result;
}

_QWORD *PKInputProvider<_PKStrokePoint>::getUpdatedRangeFromIndex(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *a2 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a1 + 24))(a1, *a2, v4);
  return v4;
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  std::vector<_PKStrokePoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<_PKStrokePoint*>,std::__wrap_iter<_PKStrokePoint*>>(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 88 * a2), *(char **)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 88 * a2)) >> 3));
  return a1[9];
}

_QWORD *PKBSplineFilter::reset(PKBSplineFilter *this)
{
  _QWORD *result;

  result = PKInputFilter<_PKStrokePoint,_PKStrokePoint>::reset((uint64_t)this);
  *((_BYTE *)this + 108) = 1;
  return result;
}

uint64_t PKBSplineFilter::fetchInput(PKBSplineFilter *this)
{
  if (*((_BYTE *)this + 108))
    return (*(uint64_t (**)(PKBSplineFilter *))(*(_QWORD *)this + 56))(this);
  else
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::fetchInput((uint64_t)this);
}

uint64_t PKInputFilter<_PKStrokePoint,_PKStrokePoint>::outputVector(uint64_t a1)
{
  return a1 + 80;
}

void PKBSplineFilter::run(PKBSplineFilter *this)
{
  void **v2;
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float64x2_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float64x2_t v35;
  _BYTE v36[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  if (*((_QWORD *)this + 7) != *((_QWORD *)this + 6) && !*((_BYTE *)this + 108))
  {
    v2 = (void **)((char *)this + 80);
    std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, *((_QWORD *)this + 9));
    if (*((_QWORD *)this + 14) && (v3 = *((double *)this + 20), v4 = *((double *)this + 21), v3 < v4))
    {
      PKBSplineFilter::calcSplinePathInRange(this, v3, v4);
      if (*((double *)this + 20) > 0.01)
      {
        v5 = *((_QWORD *)this + 10);
        v6 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)v36 = *(_OWORD *)v5;
        *(_OWORD *)&v36[16] = v6;
        v7 = *(_OWORD *)(v5 + 32);
        v8 = *(_OWORD *)(v5 + 48);
        v9 = *(_OWORD *)(v5 + 64);
        v40 = *(_QWORD *)(v5 + 80);
        v38 = v8;
        v39 = v9;
        v37 = v7;
        v10 = vsubq_f64(*(float64x2_t *)&v36[8], *(float64x2_t *)(v5 + 96));
        *(float64x2_t *)&v36[8] = vaddq_f64(*(float64x2_t *)&v36[8], vmulq_n_f64(vmulq_n_f64(v10, 1.0/ sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v10, v10).f64[1]), v10.f64[0], v10.f64[0]))), *(double *)&v36[24] + 0.0 + *((double *)this + 16)));
        std::vector<_PKStrokePoint>::insert((uint64_t)this + 80, (char *)v5, (unint64_t)v36);
      }
      v11 = *((double *)this + 21);
      if (v11 < (double)(unint64_t)(objc_msgSend(*((id *)this + 14), "_pointsCount") - 1) + -0.01)
      {
        v13 = *((_QWORD *)this + 10);
        v12 = *((_QWORD *)this + 11);
        v14 = *(_QWORD *)(v12 - 88);
        v15 = *(double *)(v12 - 64);
        *(_OWORD *)v36 = *(_OWORD *)(v12 - 56);
        *(_OWORD *)&v36[16] = *(_OWORD *)(v12 - 40);
        v37 = *(_OWORD *)(v12 - 24);
        *(_QWORD *)&v38 = *(_QWORD *)(v12 - 8);
        v16 = *((_QWORD *)this + 12);
        v17 = *(float64x2_t *)(v12 - 80);
        v18 = vsubq_f64(v17, *(float64x2_t *)(v12 - 168));
        v19 = vaddq_f64(v17, vmulq_n_f64(vmulq_n_f64(v18, 1.0/ sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v18, v18).f64[1]), v18.f64[0], v18.f64[0]))), v15 + 0.0 + *((double *)this + 16)));
        if (v12 >= v16)
        {
          v22 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v13) >> 3);
          if ((unint64_t)(v22 + 1) > 0x2E8BA2E8BA2E8BALL)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - v13) >> 3);
          v24 = 2 * v23;
          if (2 * v23 <= v22 + 1)
            v24 = v22 + 1;
          if (v23 >= 0x1745D1745D1745DLL)
            v25 = 0x2E8BA2E8BA2E8BALL;
          else
            v25 = v24;
          if (v25)
          {
            v35 = v19;
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v25);
            v19 = v35;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[88 * v22];
          v28 = &v26[88 * v25];
          *(_QWORD *)v27 = v14;
          *(float64x2_t *)(v27 + 8) = v19;
          *((double *)v27 + 3) = v15;
          *((_OWORD *)v27 + 2) = *(_OWORD *)v36;
          *((_OWORD *)v27 + 3) = *(_OWORD *)&v36[16];
          *((_OWORD *)v27 + 4) = v37;
          *((_QWORD *)v27 + 10) = v38;
          v21 = v27 + 88;
          v30 = (char *)*((_QWORD *)this + 10);
          v29 = (char *)*((_QWORD *)this + 11);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 88);
              *(_OWORD *)(v27 - 72) = *(_OWORD *)(v29 - 72);
              *(_OWORD *)(v27 - 88) = v31;
              v32 = *(_OWORD *)(v29 - 56);
              v33 = *(_OWORD *)(v29 - 40);
              v34 = *(_OWORD *)(v29 - 24);
              *((_QWORD *)v27 - 1) = *((_QWORD *)v29 - 1);
              *(_OWORD *)(v27 - 24) = v34;
              *(_OWORD *)(v27 - 40) = v33;
              *(_OWORD *)(v27 - 56) = v32;
              v27 -= 88;
              v29 -= 88;
            }
            while (v29 != v30);
            v29 = (char *)*v2;
          }
          *((_QWORD *)this + 10) = v27;
          *((_QWORD *)this + 11) = v21;
          *((_QWORD *)this + 12) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v12 = v14;
          *(float64x2_t *)(v12 + 8) = v19;
          *(double *)(v12 + 24) = v15;
          v20 = *(_OWORD *)&v36[16];
          *(_OWORD *)(v12 + 32) = *(_OWORD *)v36;
          *(_OWORD *)(v12 + 48) = v20;
          *(_OWORD *)(v12 + 64) = v37;
          *(_QWORD *)(v12 + 80) = v38;
          v21 = (char *)(v12 + 88);
        }
        *((_QWORD *)this + 11) = v21;
      }
    }
    else
    {
      PKBSplineFilter::calcSplinePathInRange(this, (double)*((uint64_t *)this + 5), (double)(unint64_t)(0x2E8BA2E8BA2E8BA3* ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3)- 1));
    }
  }
}

uint64_t PKInputFilter<_PKStrokePoint,_PKStrokePoint>::complete()
{
  return 0;
}

void PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void (***v7)(_QWORD, id, uint64_t, double);
  id v8;

  v8 = a2;
  v7 = *(void (****)(_QWORD, id, uint64_t, double))(a1 + 8);
  if (v7)
    (**v7)(v7, v8, a3, a4);
  *(double *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 16) = 0;

}

void sub_1BE340A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingEnded(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_QWORD *PKInputFilter<_PKStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result[1] = *result;
  return result;
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::fetchInput(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::vector<_PKStrokePoint>::resize(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void std::vector<_PKStrokePoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<_PKStrokePoint>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 88 * a2;
  }
}

void std::vector<_PKStrokePoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 88 * ((88 * a2 - 88) / 0x58) + 88;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[88 * v8];
    v15 = &v12[88 * v11];
    v16 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v20;
        v21 = *(_OWORD *)(v18 - 56);
        v22 = *(_OWORD *)(v18 - 40);
        v23 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v23;
        *(_OWORD *)(v14 - 40) = v22;
        *(_OWORD *)(v14 - 56) = v21;
        v14 -= 88;
        v18 -= 88;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void PKBSplineFilter::configureForInk(PKBSplineFilter *this, PKInk *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  double v7;

  -[PKInk behavior](a2, "behavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "renderingDescriptor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "type");

  if (v5 == 1)
    v6 = 2;
  else
    v6 = 4;
  v7 = 0.2;
  if (v5 == 1)
    v7 = 0.5;
  *((_DWORD *)this + 38) = v6;
  *((double *)this + 15) = v7;
}

void sub_1BE340E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *std::vector<_PKStrokePoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<_PKStrokePoint*>,std::__wrap_iter<_PKStrokePoint*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0x2E8BA2E8BA2E8BALL)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v15 = 0x2E8BA2E8BA2E8BA3 * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x1745D1745D1745DLL)
      v18 = 0x2E8BA2E8BA2E8BALL;
    else
      v18 = v17;
    v43 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(v9, v18);
    else
      v19 = 0;
    v31 = &v19[88 * v15];
    __p = v19;
    v40 = v31;
    v42 = &v19[88 * v18];
    v32 = 88 * a5;
    v33 = &v31[88 * a5];
    do
    {
      v34 = *((_OWORD *)v7 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v7;
      *((_OWORD *)v31 + 1) = v34;
      v35 = *((_OWORD *)v7 + 2);
      v36 = *((_OWORD *)v7 + 3);
      v37 = *((_OWORD *)v7 + 4);
      *((_QWORD *)v31 + 10) = *((_QWORD *)v7 + 10);
      *((_OWORD *)v31 + 3) = v36;
      *((_OWORD *)v31 + 4) = v37;
      *((_OWORD *)v31 + 2) = v35;
      v31 += 88;
      v7 += 88;
      v32 -= 88;
    }
    while (v32);
    v41 = v33;
    v5 = (char *)std::vector<_PKStrokePoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v41 != v40)
      v41 = &v40[(v41 - v40 - 88) % 0x58uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - __dst) >> 3) >= a5)
  {
    v21 = &__src[88 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[88 * a5];
    v25 = &v23[-88 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v25;
        *((_OWORD *)v26 + 1) = v27;
        v28 = *((_OWORD *)v25 + 2);
        v29 = *((_OWORD *)v25 + 3);
        v30 = *((_OWORD *)v25 + 4);
        *((_QWORD *)v26 + 10) = *((_QWORD *)v25 + 10);
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 88;
        v26 += 88;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[88 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1BE3410C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<_PKStrokePoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  void *v18;
  void *v19;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v10;
      v11 = *(_OWORD *)(v8 - 56);
      v12 = *(_OWORD *)(v8 - 40);
      v13 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 88);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v13;
      *(_OWORD *)(v9 - 40) = v12;
      *(_OWORD *)(v9 - 56) = v11;
      v8 -= 88;
      v9 -= 88;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v14 = a1[1];
  v15 = *(_QWORD *)(a2 + 16);
  v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v14 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v15 + v16;
  v17 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v17;
  v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v18;
  v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void PKBSplineFilter::calcSplinePathInRange(PKBSplineFilter *this, double a2, double a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  double v28;
  unint64_t v29;
  char v30;
  CGPoint *p_location;
  CGPoint *v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  float64x2_t *v42;
  CGPoint *v43;
  CGPoint *v44;
  unint64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  double v48;
  double v49;
  float64_t v50;
  double v51;
  float64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  double *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  double v99;
  unint64_t v100;
  double altitude;
  __int128 v102;
  __int128 v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  char *v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char *v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  char *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  double v151;
  double v152;
  unint64_t v153;
  char *v154;
  void **v155;
  double v156;
  double v157;
  unint64_t v158;
  double v159;
  int64_t v160;
  double v161;
  float64x2_t v162;
  double v163;
  double v164;
  _PKStrokePoint v165;
  _PKStrokePoint v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7) - (_QWORD)v4;
  v6 = 0x2E8BA2E8BA2E8BA3 * (v5 >> 3);
  if ((double)(v6 - 1) >= a3)
    v7 = a3;
  else
    v7 = (double)(v6 - 1);
  if (v6 > 1)
  {
    if (v5 == 176)
    {
      v16 = *((_QWORD *)this + 12);
      v12 = (_QWORD *)((char *)this + 80);
      v17 = *((_QWORD *)this + 11);
      if (v17 >= v16)
      {
        v86 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v17 - *v12) >> 3);
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_127;
        v88 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - *v12) >> 3);
        if (2 * v88 > v87)
          v87 = 2 * v88;
        if (v88 >= 0x1745D1745D1745DLL)
          v89 = 0x2E8BA2E8BA2E8BALL;
        else
          v89 = v87;
        if (v89)
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v89);
        else
          v90 = 0;
        v118 = &v90[88 * v86];
        v119 = &v90[88 * v89];
        v120 = *((_OWORD *)v4 + 1);
        *(_OWORD *)v118 = *(_OWORD *)v4;
        *((_OWORD *)v118 + 1) = v120;
        v121 = *((_OWORD *)v4 + 2);
        v122 = *((_OWORD *)v4 + 3);
        v123 = *((_OWORD *)v4 + 4);
        *((_QWORD *)v118 + 10) = v4[10];
        *((_OWORD *)v118 + 3) = v122;
        *((_OWORD *)v118 + 4) = v123;
        *((_OWORD *)v118 + 2) = v121;
        v22 = v118 + 88;
        v125 = (char *)*((_QWORD *)this + 10);
        v124 = (char *)*((_QWORD *)this + 11);
        if (v124 != v125)
        {
          do
          {
            v126 = *(_OWORD *)(v124 - 88);
            *(_OWORD *)(v118 - 72) = *(_OWORD *)(v124 - 72);
            *(_OWORD *)(v118 - 88) = v126;
            v127 = *(_OWORD *)(v124 - 56);
            v128 = *(_OWORD *)(v124 - 40);
            v129 = *(_OWORD *)(v124 - 24);
            *((_QWORD *)v118 - 1) = *((_QWORD *)v124 - 1);
            *(_OWORD *)(v118 - 24) = v129;
            *(_OWORD *)(v118 - 40) = v128;
            *(_OWORD *)(v118 - 56) = v127;
            v118 -= 88;
            v124 -= 88;
          }
          while (v124 != v125);
          v124 = (char *)*v12;
        }
        *((_QWORD *)this + 10) = v118;
        *((_QWORD *)this + 11) = v22;
        *((_QWORD *)this + 12) = v119;
        if (v124)
          operator delete(v124);
      }
      else
      {
        v18 = *((_OWORD *)v4 + 1);
        *(_OWORD *)v17 = *(_OWORD *)v4;
        *(_OWORD *)(v17 + 16) = v18;
        v19 = *((_OWORD *)v4 + 2);
        v20 = *((_OWORD *)v4 + 3);
        v21 = *((_OWORD *)v4 + 4);
        *(_QWORD *)(v17 + 80) = v4[10];
        *(_OWORD *)(v17 + 48) = v20;
        *(_OWORD *)(v17 + 64) = v21;
        *(_OWORD *)(v17 + 32) = v19;
        v22 = (char *)(v17 + 88);
      }
      *((_QWORD *)this + 11) = v22;
      v130 = *((_QWORD *)this + 6) + 88;
      v131 = *((_QWORD *)this + 12);
      if ((unint64_t)v22 < v131)
      {
        v132 = *(_OWORD *)(*((_QWORD *)this + 6) + 104);
        *(_OWORD *)v22 = *(_OWORD *)v130;
        *((_OWORD *)v22 + 1) = v132;
        v133 = *(_OWORD *)(v130 + 32);
        v134 = *(_OWORD *)(v130 + 48);
        v135 = *(_OWORD *)(v130 + 64);
        *((_QWORD *)v22 + 10) = *(_QWORD *)(v130 + 80);
        *((_OWORD *)v22 + 3) = v134;
        *((_OWORD *)v22 + 4) = v135;
        *((_OWORD *)v22 + 2) = v133;
        v104 = v22 + 88;
        goto LABEL_123;
      }
      v136 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v22[-*v12] >> 3);
      if ((unint64_t)(v136 + 1) <= 0x2E8BA2E8BA2E8BALL)
      {
        v137 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v131 - *v12) >> 3);
        v138 = 2 * v137;
        if (2 * v137 <= v136 + 1)
          v138 = v136 + 1;
        if (v137 >= 0x1745D1745D1745DLL)
          v139 = 0x2E8BA2E8BA2E8BALL;
        else
          v139 = v138;
        if (v139)
          v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v139);
        else
          v140 = 0;
        v110 = &v140[88 * v136];
        v111 = &v140[88 * v139];
        v141 = *(_OWORD *)(v130 + 16);
        *(_OWORD *)v110 = *(_OWORD *)v130;
        *((_OWORD *)v110 + 1) = v141;
        v142 = *(_OWORD *)(v130 + 32);
        v143 = *(_OWORD *)(v130 + 48);
        v144 = *(_OWORD *)(v130 + 64);
        *((_QWORD *)v110 + 10) = *(_QWORD *)(v130 + 80);
        *((_OWORD *)v110 + 3) = v143;
        *((_OWORD *)v110 + 4) = v144;
        *((_OWORD *)v110 + 2) = v142;
        v104 = v110 + 88;
        v145 = (char *)*((_QWORD *)this + 10);
        v112 = (char *)*((_QWORD *)this + 11);
        if (v112 == v145)
          goto LABEL_121;
        do
        {
          v146 = *(_OWORD *)(v112 - 88);
          *(_OWORD *)(v110 - 72) = *(_OWORD *)(v112 - 72);
          *(_OWORD *)(v110 - 88) = v146;
          v147 = *(_OWORD *)(v112 - 56);
          v148 = *(_OWORD *)(v112 - 40);
          v149 = *(_OWORD *)(v112 - 24);
          *((_QWORD *)v110 - 1) = *((_QWORD *)v112 - 1);
          *(_OWORD *)(v110 - 24) = v149;
          *(_OWORD *)(v110 - 40) = v148;
          *(_OWORD *)(v110 - 56) = v147;
          v110 -= 88;
          v112 -= 88;
        }
        while (v112 != v145);
        goto LABEL_120;
      }
LABEL_127:
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    }
    v28 = fmax(a2, 0.0);
    v156 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v157 = *MEMORY[0x1E0C9D538];
    PKBSplineFilter::calculateVStartAndVEnd(this, &v166, &v165);
    v153 = (unint64_t)v28;
    if ((unint64_t)v28 > (unint64_t)v7)
      return;
    v29 = (unint64_t)v7;
    v30 = 0;
    v151 = v7 - (double)(unint64_t)v7;
    v152 = v28 - (double)(unint64_t)v28;
    p_location = &v166.location;
    v32 = &v165.location;
    v154 = (char *)this + 96;
    v155 = (void **)((char *)this + 80);
    v33 = (unint64_t)v28;
    v150 = (unint64_t)v7;
    while (1)
    {
      v34 = v33 != v153;
      v35 = v152;
      if (v33 != v153)
        v35 = 0.0;
      v161 = v35;
      v36 = v33 == v29 ? v151 : 1.0;
      v37 = (v36 - v35) / (1.0 / (double)(int)PKBSplineFilter::calculateStepsForSegment(this, v33, &v166, &v165));
      v160 = vcvtpd_s64_f64(v37);
      if (v34 <= v160)
        break;
LABEL_68:
      if ((int64_t)(v33 + 2) >= *((_QWORD *)this + 4))
      {
        ++v33;
      }
      else
      {
        *((_QWORD *)this + 9) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
        *((_QWORD *)this + 5) = ++v33;
      }
      v29 = v150;
      if (v33 > v150)
        return;
    }
    v158 = v33 + 1;
    v159 = (v36 - v161) / (double)(uint64_t)ceil(v37);
    while (1)
    {
      v164 = v161 + v159 * (double)v34;
      v38 = PKBSplineFilter::bsplineInterpolate(this, v33, v6, v164, p_location, v32);
      v40 = v39;
      v41 = *((_QWORD *)this + 6);
      v42 = (float64x2_t *)(v41 + 88 * v33);
      if (v158 >= 0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 7) - v41) >> 3))
      {
        v53 = v42->f64[0];
        v48 = v42[1].f64[1];
        v162 = v42[2];
        v54 = v42[3].f64[0];
        v50 = v42[3].f64[1];
        v52 = v42[4].f64[0];
        v163 = v42[4].f64[1];
        v56 = v42[5].f64[0];
        if ((v30 & 1) == 0)
        {
LABEL_29:
          v58 = *((_QWORD *)this + 11);
          v57 = *((_QWORD *)this + 12);
          if (v58 < v57)
          {
            *(double *)v58 = v53;
            *(double *)(v58 + 8) = v38;
            *(double *)(v58 + 16) = v40;
            *(double *)(v58 + 24) = v48;
            *(float64x2_t *)(v58 + 32) = v162;
            *(double *)(v58 + 48) = v54;
            *(float64_t *)(v58 + 56) = v50;
            *(float64_t *)(v58 + 64) = v52;
            *(double *)(v58 + 72) = v163;
            v59 = (char *)(v58 + 88);
            goto LABEL_35;
          }
          v61 = *v155;
          v62 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v58 - (_QWORD)*v155) >> 3);
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) > 0x2E8BA2E8BA2E8BALL)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v64 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v57 - (_QWORD)v61) >> 3);
          if (2 * v64 > v63)
            v63 = 2 * v64;
          if (v64 >= 0x1745D1745D1745DLL)
            v65 = 0x2E8BA2E8BA2E8BALL;
          else
            v65 = v63;
          if (v65)
          {
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v154, v65);
            v61 = (void *)*((_QWORD *)this + 10);
            v58 = *((_QWORD *)this + 11);
          }
          else
          {
            v66 = 0;
          }
          v73 = (float64x2_t *)&v66[88 * v62];
          v73->f64[0] = v53;
          v73->f64[1] = v38;
          v73[1].f64[0] = v40;
          v73[1].f64[1] = v48;
          v73[2] = v162;
          v73[3].f64[0] = v54;
          v73[3].f64[1] = v50;
          v73[4].f64[0] = v52;
          v73[4].f64[1] = v163;
          v73[5].f64[0] = v56;
          v74 = v73;
          if ((void *)v58 != v61)
          {
            do
            {
              v75 = *(float64x2_t *)(v58 - 88);
              *(float64x2_t *)((char *)v74 - 72) = *(float64x2_t *)(v58 - 72);
              *(float64x2_t *)((char *)v74 - 88) = v75;
              v76 = *(float64x2_t *)(v58 - 56);
              v77 = *(float64x2_t *)(v58 - 40);
              v78 = *(float64x2_t *)(v58 - 24);
              v74[-1].f64[1] = *(float64_t *)(v58 - 8);
              *(float64x2_t *)((char *)v74 - 24) = v78;
              *(float64x2_t *)((char *)v74 - 40) = v77;
              *(float64x2_t *)((char *)v74 - 56) = v76;
              v74 = (float64x2_t *)((char *)v74 - 88);
              v58 -= 88;
            }
            while ((void *)v58 != v61);
            v61 = *v155;
          }
          v59 = (char *)&v73[5].f64[1];
          *((_QWORD *)this + 10) = v74;
          *((_QWORD *)this + 11) = (char *)v73 + 88;
          *((_QWORD *)this + 12) = &v66[88 * v65];
          if (v61)
            operator delete(v61);
LABEL_65:
          *((_QWORD *)this + 11) = v59;
          goto LABEL_66;
        }
      }
      else
      {
        v43 = v32;
        v44 = p_location;
        v45 = v6;
        v46 = (float64x2_t *)(v41 + 88 * v33);
        v47 = (float64x2_t *)(v41 + 88 * v158);
        v163 = v164 * v47[4].f64[1] + v46[4].f64[1] * (1.0 - v164);
        v48 = v164 * v47[1].f64[1] + v46[1].f64[1] * (1.0 - v164);
        DKDMixAnglesInRadians(v46[3].f64[1], v47[3].f64[1], v164);
        v50 = v49;
        DKDMixAnglesInRadians(v46[4].f64[0], v47[4].f64[0], v164);
        v52 = v51;
        v162 = vmlaq_n_f64(vmulq_n_f64(v47[2], v164), v46[2], 1.0 - v164);
        v53 = v164 * v47->f64[0] + v42->f64[0] * (1.0 - v164);
        v54 = v164 * v47[3].f64[0] + v46[3].f64[0] * (1.0 - v164);
        v55 = v46[5].f64[0];
        v6 = v45;
        p_location = v44;
        v32 = v43;
        v56 = v164 * v47[5].f64[0] + v55 * (1.0 - v164);
        if ((v30 & 1) == 0)
          goto LABEL_29;
      }
      if ((v156 - v40) * (v156 - v40) + (v157 - v38) * (v157 - v38) > 0.01)
      {
        v58 = *((_QWORD *)this + 11);
        v60 = *((_QWORD *)this + 12);
        if (v58 >= v60)
        {
          v67 = *v155;
          v68 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v58 - (_QWORD)*v155) >> 3);
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) > 0x2E8BA2E8BA2E8BALL)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v70 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v60 - (_QWORD)v67) >> 3);
          if (2 * v70 > v69)
            v69 = 2 * v70;
          if (v70 >= 0x1745D1745D1745DLL)
            v71 = 0x2E8BA2E8BA2E8BALL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v154, v71);
            v67 = (void *)*((_QWORD *)this + 10);
            v58 = *((_QWORD *)this + 11);
          }
          else
          {
            v72 = 0;
          }
          v79 = (float64x2_t *)&v72[88 * v68];
          v79->f64[0] = v53;
          v79->f64[1] = v38;
          v79[1].f64[0] = v40;
          v79[1].f64[1] = v48;
          v79[2] = v162;
          v79[3].f64[0] = v54;
          v79[3].f64[1] = v50;
          v79[4].f64[0] = v52;
          v79[4].f64[1] = v163;
          v79[5].f64[0] = v56;
          v80 = v79;
          if ((void *)v58 != v67)
          {
            do
            {
              v81 = *(float64x2_t *)(v58 - 88);
              *(float64x2_t *)((char *)v80 - 72) = *(float64x2_t *)(v58 - 72);
              *(float64x2_t *)((char *)v80 - 88) = v81;
              v82 = *(float64x2_t *)(v58 - 56);
              v83 = *(float64x2_t *)(v58 - 40);
              v84 = *(float64x2_t *)(v58 - 24);
              v80[-1].f64[1] = *(float64_t *)(v58 - 8);
              *(float64x2_t *)((char *)v80 - 24) = v84;
              *(float64x2_t *)((char *)v80 - 40) = v83;
              *(float64x2_t *)((char *)v80 - 56) = v82;
              v80 = (float64x2_t *)((char *)v80 - 88);
              v58 -= 88;
            }
            while ((void *)v58 != v67);
            v67 = *v155;
          }
          v59 = (char *)&v79[5].f64[1];
          *((_QWORD *)this + 10) = v80;
          *((_QWORD *)this + 11) = (char *)v79 + 88;
          *((_QWORD *)this + 12) = &v72[88 * v71];
          if (v67)
            operator delete(v67);
          v156 = v40;
          v157 = v38;
        }
        else
        {
          *(double *)v58 = v53;
          *(double *)(v58 + 8) = v38;
          *(double *)(v58 + 16) = v40;
          *(double *)(v58 + 24) = v48;
          *(float64x2_t *)(v58 + 32) = v162;
          *(double *)(v58 + 48) = v54;
          *(float64_t *)(v58 + 56) = v50;
          *(float64_t *)(v58 + 64) = v52;
          *(double *)(v58 + 72) = v163;
          v59 = (char *)(v58 + 88);
          v156 = v40;
          v157 = v38;
LABEL_35:
          *(double *)(v58 + 80) = v56;
        }
        goto LABEL_65;
      }
LABEL_66:
      v30 = 1;
      if (v34++ == v160)
        goto LABEL_68;
    }
  }
  v8 = *v4;
  v9 = *((double *)v4 + 1);
  v10 = *((_OWORD *)v4 + 3);
  *(_OWORD *)&v166.location.y = *((_OWORD *)v4 + 2);
  *(_OWORD *)&v166.aspectRatio = v10;
  *(_OWORD *)&v166.force = *((_OWORD *)v4 + 4);
  *(_QWORD *)&v166.altitude = v4[10];
  *(_OWORD *)&v166.timestamp = *((_OWORD *)v4 + 1);
  v11 = *((_QWORD *)this + 12);
  v12 = (_QWORD *)((char *)this + 80);
  v13 = *((_QWORD *)this + 11);
  if (v13 >= v11)
  {
    v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 3);
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) > 0x2E8BA2E8BA2E8BALL)
      goto LABEL_127;
    v25 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *v12) >> 3);
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x1745D1745D1745DLL)
      v26 = 0x2E8BA2E8BA2E8BALL;
    else
      v26 = v24;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v26);
    else
      v27 = 0;
    v91 = (double *)&v27[88 * v23];
    v92 = &v27[88 * v26];
    *(_QWORD *)v91 = v8;
    v91[1] = v9;
    *((_OWORD *)v91 + 1) = *(_OWORD *)&v166.timestamp;
    v91[10] = v166.altitude;
    *((_OWORD *)v91 + 4) = *(_OWORD *)&v166.force;
    *((_OWORD *)v91 + 3) = *(_OWORD *)&v166.aspectRatio;
    *((_OWORD *)v91 + 2) = *(_OWORD *)&v166.location.y;
    v15 = (char *)(v91 + 11);
    v94 = (char *)*((_QWORD *)this + 10);
    v93 = (char *)*((_QWORD *)this + 11);
    if (v93 != v94)
    {
      do
      {
        v95 = *(_OWORD *)(v93 - 88);
        *(_OWORD *)(v91 - 9) = *(_OWORD *)(v93 - 72);
        *(_OWORD *)(v91 - 11) = v95;
        v96 = *(_OWORD *)(v93 - 56);
        v97 = *(_OWORD *)(v93 - 40);
        v98 = *(_OWORD *)(v93 - 24);
        *(v91 - 1) = *((double *)v93 - 1);
        *(_OWORD *)(v91 - 3) = v98;
        *(_OWORD *)(v91 - 5) = v97;
        *(_OWORD *)(v91 - 7) = v96;
        v91 -= 11;
        v93 -= 88;
      }
      while (v93 != v94);
      v93 = (char *)*v12;
    }
    *((_QWORD *)this + 10) = v91;
    *((_QWORD *)this + 11) = v15;
    *((_QWORD *)this + 12) = v92;
    if (v93)
      operator delete(v93);
  }
  else
  {
    *(_QWORD *)v13 = v8;
    *(double *)(v13 + 8) = v9;
    v14 = *(_OWORD *)&v166.timestamp;
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v166.location.y;
    *(_OWORD *)(v13 + 48) = *(_OWORD *)&v166.aspectRatio;
    *(_OWORD *)(v13 + 64) = *(_OWORD *)&v166.force;
    *(double *)(v13 + 80) = v166.altitude;
    *(_OWORD *)(v13 + 16) = v14;
    v15 = (char *)(v13 + 88);
  }
  *((_QWORD *)this + 11) = v15;
  v99 = v9 + 0.01;
  v100 = *((_QWORD *)this + 12);
  if ((unint64_t)v15 >= v100)
  {
    v105 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v15[-*v12] >> 3);
    if ((unint64_t)(v105 + 1) <= 0x2E8BA2E8BA2E8BALL)
    {
      v106 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v100 - *v12) >> 3);
      v107 = 2 * v106;
      if (2 * v106 <= v105 + 1)
        v107 = v105 + 1;
      if (v106 >= 0x1745D1745D1745DLL)
        v108 = 0x2E8BA2E8BA2E8BALL;
      else
        v108 = v107;
      if (v108)
        v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v108);
      else
        v109 = 0;
      v110 = &v109[88 * v105];
      v111 = &v109[88 * v108];
      *(_QWORD *)v110 = v8;
      *((double *)v110 + 1) = v99;
      *((_OWORD *)v110 + 1) = *(_OWORD *)&v166.timestamp;
      *((_QWORD *)v110 + 10) = *(_QWORD *)&v166.altitude;
      *((_OWORD *)v110 + 4) = *(_OWORD *)&v166.force;
      *((_OWORD *)v110 + 3) = *(_OWORD *)&v166.aspectRatio;
      *((_OWORD *)v110 + 2) = *(_OWORD *)&v166.location.y;
      v104 = v110 + 88;
      v113 = (char *)*((_QWORD *)this + 10);
      v112 = (char *)*((_QWORD *)this + 11);
      if (v112 == v113)
        goto LABEL_121;
      do
      {
        v114 = *(_OWORD *)(v112 - 88);
        *(_OWORD *)(v110 - 72) = *(_OWORD *)(v112 - 72);
        *(_OWORD *)(v110 - 88) = v114;
        v115 = *(_OWORD *)(v112 - 56);
        v116 = *(_OWORD *)(v112 - 40);
        v117 = *(_OWORD *)(v112 - 24);
        *((_QWORD *)v110 - 1) = *((_QWORD *)v112 - 1);
        *(_OWORD *)(v110 - 24) = v117;
        *(_OWORD *)(v110 - 40) = v116;
        *(_OWORD *)(v110 - 56) = v115;
        v110 -= 88;
        v112 -= 88;
      }
      while (v112 != v113);
LABEL_120:
      v112 = (char *)*v12;
LABEL_121:
      *((_QWORD *)this + 10) = v110;
      *((_QWORD *)this + 11) = v104;
      *((_QWORD *)this + 12) = v111;
      if (v112)
        operator delete(v112);
      goto LABEL_123;
    }
    goto LABEL_127;
  }
  *(_QWORD *)v15 = v8;
  *((double *)v15 + 1) = v99;
  altitude = v166.altitude;
  v102 = *(_OWORD *)&v166.force;
  *((_OWORD *)v15 + 3) = *(_OWORD *)&v166.aspectRatio;
  *((_OWORD *)v15 + 4) = v102;
  *((double *)v15 + 10) = altitude;
  v103 = *(_OWORD *)&v166.location.y;
  *((_OWORD *)v15 + 1) = *(_OWORD *)&v166.timestamp;
  *((_OWORD *)v15 + 2) = v103;
  v104 = v15 + 88;
LABEL_123:
  *((_QWORD *)this + 11) = v104;
}

char *std::vector<_PKStrokePoint>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v16 = *(char **)a1;
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v17 > 0x2E8BA2E8BA2E8BALL)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v18 = __src - v16;
    v19 = 0x2E8BA2E8BA2E8BA3 * ((__src - v16) >> 3);
    v20 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - (_QWORD)v16) >> 3);
    if (2 * v20 > v17)
      v17 = 2 * v20;
    if (v20 >= 0x1745D1745D1745DLL)
      v21 = 0x2E8BA2E8BA2E8BALL;
    else
      v21 = v17;
    v45 = a1 + 16;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(a1 + 16, v21);
    else
      v22 = 0;
    v31 = &v22[88 * v19];
    __p = v22;
    v42 = v31;
    v43 = v31;
    v44 = &v22[88 * v21];
    if (v19 == v21)
    {
      if (v18 < 1)
      {
        if (v16 == v4)
          v33 = 1;
        else
          v33 = 2 * v19;
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>(v8, v33);
        v31 = &v34[88 * (v33 >> 2)];
        __p = v34;
        v42 = v31;
        v44 = &v34[88 * v35];
        if (v22)
          operator delete(v22);
      }
      else
      {
        v32 = v19 + 2;
        if (v19 >= -1)
          v32 = v19 + 1;
        v31 -= 88 * (v32 >> 1);
        v42 = v31;
      }
    }
    v36 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)v31 = *(_OWORD *)v3;
    *((_OWORD *)v31 + 1) = v36;
    v37 = *(_OWORD *)(v3 + 32);
    v38 = *(_OWORD *)(v3 + 48);
    v39 = *(_OWORD *)(v3 + 64);
    *((_QWORD *)v31 + 10) = *(_QWORD *)(v3 + 80);
    *((_OWORD *)v31 + 3) = v38;
    *((_OWORD *)v31 + 4) = v39;
    *((_OWORD *)v31 + 2) = v37;
    v43 = v31 + 88;
    v4 = (char *)std::vector<_PKStrokePoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v43 != v42)
      v43 = &v42[(v43 - v42 - 88) % 0x58uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v27 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)__src = *(_OWORD *)a3;
    *((_OWORD *)__src + 1) = v27;
    v28 = *(_OWORD *)(a3 + 32);
    v29 = *(_OWORD *)(a3 + 48);
    v30 = *(_OWORD *)(a3 + 64);
    *((_QWORD *)__src + 10) = *(_QWORD *)(a3 + 80);
    *((_OWORD *)__src + 3) = v29;
    *((_OWORD *)__src + 4) = v30;
    *((_OWORD *)__src + 2) = v28;
    *(_QWORD *)(a1 + 8) = __src + 88;
  }
  else
  {
    v9 = __src + 88;
    v10 = v6 - 88;
    v11 = *(_QWORD *)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v10;
      *(_OWORD *)(v11 + 16) = v12;
      v13 = *((_OWORD *)v10 + 2);
      v14 = *((_OWORD *)v10 + 3);
      v15 = *((_OWORD *)v10 + 4);
      *(_QWORD *)(v11 + 80) = *((_QWORD *)v10 + 10);
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)(v11 + 64) = v15;
      *(_OWORD *)(v11 + 32) = v13;
      v10 += 88;
      v11 += 88;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(__src + 88, __src, v6 - v9);
    if ((unint64_t)v4 <= v3)
      v3 += 88 * (*(_QWORD *)(a1 + 8) > v3);
    v23 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v23;
    v24 = *(_OWORD *)(v3 + 32);
    v25 = *(_OWORD *)(v3 + 48);
    v26 = *(_OWORD *)(v3 + 64);
    *((_QWORD *)v4 + 10) = *(_QWORD *)(v3 + 80);
    *((_OWORD *)v4 + 3) = v25;
    *((_OWORD *)v4 + 4) = v26;
    *((_OWORD *)v4 + 2) = v24;
  }
  return v4;
}

void sub_1BE3420F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float64x2_t PKBSplineFilter::calculateVStartAndVEnd(PKBSplineFilter *this, _PKStrokePoint *a2, _PKStrokePoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  float64x2_t result;

  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7) - v3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)&a2->timestamp = *(_OWORD *)v3;
  *(_OWORD *)&a2->location.y = v5;
  v6 = *(_OWORD *)(v3 + 32);
  v7 = *(_OWORD *)(v3 + 48);
  v8 = *(_OWORD *)(v3 + 64);
  a2->radius2 = *(double *)(v3 + 80);
  *(_OWORD *)&a2->force = v7;
  *(_OWORD *)&a2->altitude = v8;
  *(_OWORD *)&a2->aspectRatio = v6;
  v9 = *((_QWORD *)this + 7);
  __asm { FMOV            V2.2D, #2.0 }
  a2->location = (CGPoint)vmlaq_f64(vnegq_f64(*(float64x2_t *)(*((_QWORD *)this + 6) + 96)), _Q2, *(float64x2_t *)(*((_QWORD *)this + 6) + 8));
  v15 = *(_OWORD *)(v9 - 56);
  v16 = *(_OWORD *)(v9 - 40);
  v17 = *(_OWORD *)(v9 - 24);
  a3->radius2 = *(double *)(v9 - 8);
  *(_OWORD *)&a3->force = v16;
  *(_OWORD *)&a3->altitude = v17;
  *(_OWORD *)&a3->aspectRatio = v15;
  v18 = *(_OWORD *)(v9 - 72);
  *(_OWORD *)&a3->timestamp = *(_OWORD *)(v9 - 88);
  *(_OWORD *)&a3->location.y = v18;
  v19 = v4 + *((_QWORD *)this + 6);
  result = *(float64x2_t *)(v19 - 80);
  a3->location = (CGPoint)vmlaq_f64(vnegq_f64(*(float64x2_t *)(v19 - 168)), _Q2, result);
  return result;
}

uint64_t PKBSplineFilter::calculateStepsForSegment(PKBSplineFilter *this, uint64_t a2, const _PKStrokePoint *a3, const _PKStrokePoint *a4)
{
  uint64_t result;
  double *v7;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double x;
  double y;
  int v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  CGPoint *p_location;
  CGPoint *v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  double *v35;
  uint64_t i;
  uint64_t v37;
  _BOOL4 v38;
  double *v39;
  int v40;
  uint64_t v41;
  double v42;
  int v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _OWORD v52[33];
  uint64_t v53;
  __int128 v54;
  _QWORD v55[65];

  v55[63] = *MEMORY[0x1E0C80C00];
  result = *((unsigned int *)this + 26);
  if ((int)result <= 0)
  {
    v7 = (double *)*((_QWORD *)this + 6);
    v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v7) >> 3);
    if (*((_BYTE *)this + 109))
    {
      if (a2)
      {
        v9 = &v7[11 * a2];
        v10 = *(v9 - 10);
        v11 = *(v9 - 9);
        v12 = v9[1];
        v13 = v9[2];
        v14 = v9[12];
        v15 = v9[13];
        if (a2 + 2 >= v8)
        {
          x = a4->location.x;
          y = a4->location.y;
        }
        else
        {
          v16 = &v7[11 * a2 + 22];
          x = v16[1];
          y = v16[2];
        }
      }
      else
      {
        v10 = a3->location.x;
        v11 = a3->location.y;
        v12 = v7[1];
        v13 = v7[2];
        v14 = v7[12];
        v15 = v7[13];
        x = v7[23];
        y = v7[24];
      }
      v48 = vcvtpd_s64_f64(approximateSplineLength(v10, v11, v12, v13, v14, v15, x, y) / *((double *)this + 17));
      if (v48 >= 8)
        v48 = 8;
      v49 = *((_DWORD *)this + 38);
      if (v48 <= v49)
        return v49;
      else
        return v48;
    }
    else
    {
      v19 = 8 * *((_DWORD *)this + 36);
      if (v19 >= 32)
        v20 = 32;
      else
        v20 = v19;
      if ((v20 & 0x80000000) != 0)
        goto LABEL_31;
      v21 = 0;
      v22 = (double)(int)v20;
      p_location = &a3->location;
      v24 = &a4->location;
      v25 = (double *)&v54 + 1;
      do
      {
        *(v25 - 1) = PKBSplineFilter::bsplineInterpolate(this, a2, v8, (double)(int)v21 / v22, p_location, v24);
        *(_QWORD *)v25 = v26;
        ++v21;
        v25 += 2;
      }
      while ((v20 | 1) != v21);
      if ((int)v20 < 2)
      {
LABEL_31:
        v38 = 0;
        v33 = 1;
      }
      else
      {
        v27 = *((double *)this + 15) / (double)(uint64_t)(*((_QWORD *)this + 18) * *((_QWORD *)this + 18));
        v28 = v27 * v27;
        v29 = 1;
        v30 = v20;
        do
        {
          v51 = v29;
          v50 = v30;
          v31 = v30 + v29;
          if (v30 + v29 < 0 != __OFADD__(v30, v29))
            v32 = v31 + 1;
          else
            v32 = v30 + v29;
          v33 = v32 >> 1;
          v52[0] = v54;
          v52[v32 >> 1] = *(_OWORD *)&v55[2 * v20 - 1];
          if (v31 >= 4)
          {
            if (v33 <= 2)
              v34 = 2;
            else
              v34 = v33;
            v35 = (double *)&v53;
            for (i = 1; i != v34; ++i)
            {
              *(v35 - 1) = PKBSplineFilter::bsplineInterpolate(this, a2, v8, (double)(int)i / (double)v33, p_location, v24);
              *(_QWORD *)v35 = v37;
              v35 += 2;
            }
          }
          v38 = 0;
          v39 = (double *)v55;
          v40 = v33;
          v41 = 1;
          do
          {
            v42 = (double)v40 / v22;
            v43 = vcvtmd_s64_f64(v42);
            v44 = v42 - (double)v43;
            v45 = (double *)&v52[v43];
            v46 = v45[2] * v44 + *v45 * (1.0 - v44);
            v47 = v45[3] * v44 + v45[1] * (1.0 - v44);
            if ((v47 - *v39) * (v47 - *v39) + (v46 - *(v39 - 1)) * (v46 - *(v39 - 1)) > v28)
              break;
            v38 = ++v41 >= v20;
            v40 += v33;
            v39 += 2;
          }
          while (v20 != v41);
          v30 = v50;
          if (v38)
          {
            v30 = v33 - 1;
            v29 = v51;
          }
          else
          {
            v29 = v33 + 1;
          }
        }
        while (v29 < v30);
      }
      return v33 + (v33 < (int)v20 && !v38);
    }
  }
  return result;
}

double PKBSplineFilter::bsplineInterpolate(PKBSplineFilter *this, uint64_t a2, uint64_t a3, double a4, const CGPoint *a5, const CGPoint *a6)
{
  double v12;
  double v13;
  CGFloat *p_y;
  CGFloat *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double *v19;
  const CGPoint *v20;
  double x;
  double v22;
  double v23;

  v13 = *MEMORY[0x1E0C9D538];
  v12 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  p_y = &a6->y;
  v15 = &a5->y;
  v16 = 88 * a2 - 80;
  v17 = 0.0;
  v18 = -4;
  do
  {
    v19 = v15;
    v20 = a5;
    if (a2 + v18 + 2 >= -1)
    {
      v19 = p_y;
      v20 = a6;
      if (a2 + v18 + 3 < a3)
      {
        v20 = (const CGPoint *)(*((_QWORD *)this + 6) + v16);
        v19 = &v20->y;
      }
    }
    x = v20->x;
    v22 = *v19;
    v23 = b((int)v18 + 2, a4);
    v13 = v13 + v23 * x;
    v12 = v12 + v23 * v22;
    v17 = v17 + v23;
    v16 += 88;
  }
  while (!__CFADD__(v18++, 1));
  return v13 / v17;
}

uint64_t PKStrokeInputProvider::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v5 = objc_msgSend(*(id *)(a1 + 8), "_pointsCount");
  v6 = a3[1] - *a3;
  std::vector<_PKStrokePoint>::resize((uint64_t)a3, v5 + 0x2E8BA2E8BA2E8BA3 * (v6 >> 3));
  if (v5)
  {
    v7 = 0;
    v8 = *a3 + v6;
    do
    {
      v9 = *(void **)(a1 + 8);
      if (v9)
      {
        objc_msgSend(v9, "decompressedPointAt:", v7);
      }
      else
      {
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
        v12 = 0u;
        v13 = 0u;
        v11 = 0u;
      }
      *(_OWORD *)v8 = v11;
      *(_OWORD *)(v8 + 16) = v12;
      *(_QWORD *)(v8 + 80) = v16;
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v15;
      *(_OWORD *)(v8 + 32) = v13;
      ++v7;
      v8 += 88;
    }
    while (v5 != v7);
  }
  return objc_msgSend(*(id *)(a1 + 8), "_pointsCount", v11, v12, v13, v14, v15, v16);
}

void std::default_delete<PKBSplineFilter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {

    *(_QWORD *)a2 = &unk_1E7773B78;
    v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(_QWORD *)(a2 + 88) = v3;
      operator delete(v3);
    }
    *(_QWORD *)a2 = &unk_1E7774148;
    v4 = *(void **)(a2 + 48);
    if (v4)
    {
      *(_QWORD *)(a2 + 56) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1C3B7F770);
  }
}

void sub_1BE342948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE342A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE342A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE342B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE342C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE342D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE342E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE34306C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE3433EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE343910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE343E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t drawingV1::StrokeID::StrokeID(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774BE8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774BE8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawingV1::StrokeID::~StrokeID(drawingV1::StrokeID *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

uint64_t drawingV1::StrokeID::StrokeID(uint64_t this, const drawingV1::StrokeID *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7774BE8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 32) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    *(_BYTE *)(this + 32) = v3 | 4;
    *(_QWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t drawingV1::StrokeID::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (**v5)(drawingV1::StrokeID *__hidden);
  char v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(drawingV1::StrokeID *__hidden);
  __int128 v13;
  uint64_t v14;
  int v15;

  if (a1 != a2)
  {
    v5 = &off_1E7774BE8;
    v12 = &off_1E7774BE8;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 1) != 0)
    {
      v5 = *(void (***)(drawingV1::StrokeID *__hidden))(a2 + 8);
      v7 = 1;
      LOBYTE(v15) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v2 = *(_QWORD *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 32) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v3 = *(_QWORD *)(a2 + 24);
      LOBYTE(v15) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v2;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(drawingV1::StrokeID *__hidden);
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a1 != a2)
  {
    v9 = &off_1E7774BE8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t drawingV1::swap(uint64_t this, drawingV1::StrokeID *a2, drawingV1::StrokeID *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t drawingV1::StrokeID::StrokeID(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7774BE8;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = &off_1E7774BE8;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t drawingV1::StrokeID::formatText(drawingV1::StrokeID *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "replicaIndex");
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "clock");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "subclock");
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::StrokeID::readFrom(drawingV1::StrokeID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 32) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27++;
            v46 = *(_BYTE *)(v28 + v45);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              v31 = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
LABEL_82:
          v3 = v45 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              v31 = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_QWORD *)this + 3) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 32) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33++;
            v50 = *(_BYTE *)(v34 + v49);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              v37 = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
LABEL_87:
          v3 = v49 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              v37 = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_QWORD *)this + 2) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 32) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20++;
            v42 = *(_BYTE *)(v21 + v41);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_77:
          v3 = v41 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_QWORD *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t drawingV1::StrokeID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL drawingV1::StrokeID::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 4) == 0;
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    return (*(_BYTE *)(a2 + 32) & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v2;
}

uint64_t drawingV1::StrokeID::hash_value(drawingV1::StrokeID *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((_QWORD *)this + 2);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((_QWORD *)this + 3);
  return v2 ^ v1 ^ v3;
}

double drawingV1::Drawing::Drawing(drawingV1::Drawing *this)
{
  double result;

  *(_QWORD *)this = &off_1E7774BB0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7774BB0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  return result;
}

void drawingV1::Drawing::~Drawing(void ***this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = (void **)&off_1E7774BB0;
  v4 = (void **)(this + 14);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 13, 0);
  v4 = (void **)(this + 10);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(this + 6);
  std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(this + 3);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*((void (**)(void **))*v2 + 1))(v2);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    (*((void (**)(void **))*v3 + 1))(v3);
  PB::Base::~Base((PB::Base *)this);
}

{
  drawingV1::Drawing::~Drawing(this);
  JUMPOUT(0x1C3B7F770);
}

drawingV1::Drawing *drawingV1::Drawing::Drawing(const PB::Data **this, const PB::Data **a2)
{
  char *v4;
  int64x2_t *v5;
  int64x2_t *v6;
  int64x2_t *v7;
  PB::Data *v8;
  const PB::Data *v9;
  const drawingV1::StrokeID **i;
  const drawingV1::StrokeID **v11;
  const drawingV1::StrokeID *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  const PB::Data *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  const PB::Data *v23;
  const PB::Data *v24;
  const PB::Data *v25;
  uint64_t v26;
  int64x2_t v27;
  const PB::Data *v28;
  const drawingV1::Color ***v29;
  const drawingV1::Color ***j;
  const drawingV1::Color **v31;
  drawingV1::Ink *v32;
  unint64_t v33;
  drawingV1::Ink **v34;
  const PB::Data *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  drawingV1::Ink **v41;
  const PB::Data *v42;
  const PB::Data *v43;
  const PB::Data *v44;
  drawingV1::Ink *v45;
  int64x2_t v46;
  const PB::Data *v47;
  const drawingV1::StrokeID ***v48;
  const drawingV1::StrokeID ***k;
  const drawingV1::StrokeID **v50;
  drawingV1::Stroke *v51;
  unint64_t v52;
  drawingV1::Stroke **v53;
  const PB::Data *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  drawingV1::Stroke **v60;
  const PB::Data *v61;
  const PB::Data *v62;
  const PB::Data *v63;
  drawingV1::Stroke *v64;
  int64x2_t v65;
  const PB::Data *v66;
  drawingV1::Rectangle *v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const PB::Data *v73;
  uint64_t *v75;
  void **v76;
  int64x2_t v77;
  const PB::Data *v78;
  char *v79;

  *(_OWORD *)(this + 1) = 0u;
  v4 = (char *)(this + 1);
  *(_OWORD *)(this + 3) = 0u;
  v5 = (int64x2_t *)(this + 3);
  *((_OWORD *)this + 5) = 0u;
  v6 = (int64x2_t *)(this + 10);
  *((_OWORD *)this + 7) = 0u;
  v7 = (int64x2_t *)(this + 14);
  *this = (const PB::Data *)&off_1E7774BB0;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 7) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  if (a2[13])
  {
    v8 = (PB::Data *)operator new();
    PB::Data::Data(v8, a2[13]);
    v76 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 13, (void **)v8);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v76, 0);
  }
  if (((_BYTE)a2[17] & 1) != 0)
  {
    v9 = a2[9];
    *((_BYTE *)this + 136) |= 1u;
    this[9] = v9;
  }
  if (this != a2)
    std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>((uint64_t)(this + 6), a2[6], a2[7], (a2[7] - a2[6]) >> 4);
  v75 = (uint64_t *)v4;
  v11 = (const drawingV1::StrokeID **)a2[14];
  for (i = (const drawingV1::StrokeID **)a2[15]; v11 != i; ++v11)
  {
    v12 = *v11;
    v13 = operator new();
    drawingV1::StrokeID::StrokeID(v13, v12);
    v15 = (uint64_t *)this[15];
    v14 = (unint64_t)this[16];
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((uint64_t)v15 - v7->i64[0]) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v18 = v14 - v7->i64[0];
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v79 = (char *)(this + 16);
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(this + 16), v20);
      else
        v21 = 0;
      v22 = (uint64_t *)&v21[8 * v17];
      v23 = (const PB::Data *)&v21[8 * v20];
      v78 = v23;
      *v22 = v13;
      v16 = (const PB::Data *)(v22 + 1);
      v77.i64[1] = (uint64_t)(v22 + 1);
      v25 = this[14];
      v24 = this[15];
      if (v24 == v25)
      {
        v27 = vdupq_n_s64((unint64_t)v24);
      }
      else
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 = (const PB::Data *)((char *)v24 - 8);
          *(_QWORD *)v24 = 0;
          *--v22 = v26;
        }
        while (v24 != v25);
        v27 = *v7;
        v16 = (const PB::Data *)v77.i64[1];
        v23 = v78;
      }
      this[14] = (const PB::Data *)v22;
      this[15] = v16;
      v77 = v27;
      v28 = this[16];
      this[16] = v23;
      v78 = v28;
      v76 = (void **)v27.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v76);
    }
    else
    {
      *v15 = v13;
      v16 = (const PB::Data *)(v15 + 1);
    }
    this[15] = v16;
  }
  v29 = (const drawingV1::Color ***)a2[3];
  for (j = (const drawingV1::Color ***)a2[4]; v29 != j; ++v29)
  {
    v31 = *v29;
    v32 = (drawingV1::Ink *)operator new();
    drawingV1::Ink::Ink(v32, v31);
    v34 = (drawingV1::Ink **)this[4];
    v33 = (unint64_t)this[5];
    if ((unint64_t)v34 >= v33)
    {
      v36 = ((uint64_t)v34 - v5->i64[0]) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v37 = v33 - v5->i64[0];
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      v79 = (char *)(this + 5);
      if (v39)
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(this + 5), v39);
      else
        v40 = 0;
      v41 = (drawingV1::Ink **)&v40[8 * v36];
      v42 = (const PB::Data *)&v40[8 * v39];
      v78 = v42;
      *v41 = v32;
      v35 = (const PB::Data *)(v41 + 1);
      v77.i64[1] = (uint64_t)(v41 + 1);
      v44 = this[3];
      v43 = this[4];
      if (v43 == v44)
      {
        v46 = vdupq_n_s64((unint64_t)v43);
      }
      else
      {
        do
        {
          v45 = (drawingV1::Ink *)*((_QWORD *)v43 - 1);
          v43 = (const PB::Data *)((char *)v43 - 8);
          *(_QWORD *)v43 = 0;
          *--v41 = v45;
        }
        while (v43 != v44);
        v46 = *v5;
        v35 = (const PB::Data *)v77.i64[1];
        v42 = v78;
      }
      this[3] = (const PB::Data *)v41;
      this[4] = v35;
      v77 = v46;
      v47 = this[5];
      this[5] = v42;
      v78 = v47;
      v76 = (void **)v46.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v76);
    }
    else
    {
      *v34 = v32;
      v35 = (const PB::Data *)(v34 + 1);
    }
    this[4] = v35;
  }
  v48 = (const drawingV1::StrokeID ***)a2[10];
  for (k = (const drawingV1::StrokeID ***)a2[11]; v48 != k; ++v48)
  {
    v50 = *v48;
    v51 = (drawingV1::Stroke *)operator new();
    drawingV1::Stroke::Stroke(v51, v50);
    v53 = (drawingV1::Stroke **)this[11];
    v52 = (unint64_t)this[12];
    if ((unint64_t)v53 >= v52)
    {
      v55 = ((uint64_t)v53 - v6->i64[0]) >> 3;
      if ((unint64_t)(v55 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v56 = v52 - v6->i64[0];
      v57 = v56 >> 2;
      if (v56 >> 2 <= (unint64_t)(v55 + 1))
        v57 = v55 + 1;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v58 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v58 = v57;
      v79 = (char *)(this + 12);
      if (v58)
        v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(this + 12), v58);
      else
        v59 = 0;
      v60 = (drawingV1::Stroke **)&v59[8 * v55];
      v61 = (const PB::Data *)&v59[8 * v58];
      v78 = v61;
      *v60 = v51;
      v54 = (const PB::Data *)(v60 + 1);
      v77.i64[1] = (uint64_t)(v60 + 1);
      v63 = this[10];
      v62 = this[11];
      if (v62 == v63)
      {
        v65 = vdupq_n_s64((unint64_t)v62);
      }
      else
      {
        do
        {
          v64 = (drawingV1::Stroke *)*((_QWORD *)v62 - 1);
          v62 = (const PB::Data *)((char *)v62 - 8);
          *(_QWORD *)v62 = 0;
          *--v60 = v64;
        }
        while (v62 != v63);
        v65 = *v6;
        v54 = (const PB::Data *)v77.i64[1];
        v61 = v78;
      }
      this[10] = (const PB::Data *)v60;
      this[11] = v54;
      v77 = v65;
      v66 = this[12];
      this[12] = v61;
      v78 = v66;
      v76 = (void **)v65.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v76);
    }
    else
    {
      *v53 = v51;
      v54 = (const PB::Data *)(v53 + 1);
    }
    this[11] = v54;
  }
  if (a2[1])
  {
    v67 = (drawingV1::Rectangle *)operator new();
    v68 = drawingV1::Rectangle::Rectangle(v67, a2[1]);
    v69 = *v75;
    *v75 = v70;
    if (v69)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v69 + 8))(v69, v68);
  }
  if (a2[2])
  {
    v71 = operator new();
    v72 = drawingV1::StrokeID::StrokeID(v71, a2[2]);
    v73 = this[2];
    this[2] = (const PB::Data *)v72;
    if (v73)
      (*(void (**)(const PB::Data *))(*(_QWORD *)v73 + 8))(v73);
  }
  return (drawingV1::Drawing *)this;
}

void sub_1BE347E5C(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t drawingV1::Drawing::operator=(uint64_t a1, const PB::Data **a2)
{
  drawingV1::Drawing *v3;
  void **v5[18];

  if ((const PB::Data **)a1 != a2)
  {
    drawingV1::Drawing::Drawing((const PB::Data **)v5, a2);
    drawingV1::swap(a1, (drawingV1::Drawing *)v5, v3);
    drawingV1::Drawing::~Drawing(v5);
  }
  return a1;
}

uint64_t drawingV1::swap(uint64_t this, drawingV1::Drawing *a2, drawingV1::Drawing *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(this + 136);
  *(_DWORD *)(this + 136) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v4;
  v5 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v8 = *(_QWORD *)(this + 64);
  v7 = *(_QWORD *)(this + 72);
  v9 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(this + 72) = v9;
  *((_QWORD *)a2 + 8) = v8;
  *((_QWORD *)a2 + 9) = v7;
  v10 = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v10;
  v11 = *(_QWORD *)(this + 120);
  *(_QWORD *)(this + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  v12 = *(_QWORD *)(this + 128);
  *(_QWORD *)(this + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v12;
  v13 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v16;
  v17 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v17;
  v18 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v18;
  v19 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v19;
  v20 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v20;
  return this;
}

uint64_t drawingV1::Drawing::Drawing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = &off_1E7774BB0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = a1 + 24;
  v5 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 80) = 0u;
  v6 = a1 + 80;
  *(_OWORD *)(a1 + 112) = 0u;
  v7 = (_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  v8 = *(void ***)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 104), v8);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  std::vector<PB::Data>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (_QWORD *)*v7;
  if (*v7)
  {
    v10 = *(_QWORD **)(a1 + 120);
    v11 = (_QWORD *)*v7;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*v7;
    }
    *(_QWORD *)(a1 + 120) = v9;
    operator delete(v11);
    *v7 = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v14 = *(_QWORD **)(a1 + 24);
  if (v14)
  {
    v15 = *(_QWORD **)(a1 + 32);
    v16 = *(void **)(a1 + 24);
    if (v15 != v14)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      while (v15 != v14);
      v16 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 32) = v14;
    operator delete(v16);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v19 = *(_QWORD **)(a1 + 80);
  if (v19)
  {
    v20 = *(_QWORD **)(a1 + 88);
    v21 = *(void **)(a1 + 80);
    if (v20 != v19)
    {
      do
      {
        v23 = *--v20;
        v22 = v23;
        *v20 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      while (v20 != v19);
      v21 = *(void **)v6;
    }
    *(_QWORD *)(a1 + 88) = v19;
    operator delete(v21);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v24 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v25 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v27 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  return a1;
}

uint64_t drawingV1::Drawing::operator=(uint64_t a1, uint64_t a2)
{
  drawingV1::Drawing *v3;
  void **v5[18];

  if (a1 != a2)
  {
    drawingV1::Drawing::Drawing((uint64_t)v5, a2);
    drawingV1::swap(a1, (drawingV1::Drawing *)v5, v3);
    drawingV1::Drawing::~Drawing(v5);
  }
  return a1;
}

uint64_t drawingV1::Drawing::formatText(drawingV1::Drawing *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "bounds");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "boundsVersion");
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "inks");
  }
  v10 = *((_QWORD *)this + 6);
  for (i = *((_QWORD *)this + 7); v10 != i; v10 += 16)
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 136) & 1) != 0)
    PB::TextFormatter::format(a2, "serializationVersion");
  v12 = (uint64_t *)*((_QWORD *)this + 10);
  v13 = (uint64_t *)*((_QWORD *)this + 11);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "strokes");
  }
  if (*((_QWORD *)this + 13))
    PB::TextFormatter::format();
  v15 = (uint64_t *)*((_QWORD *)this + 14);
  v16 = (uint64_t *)*((_QWORD *)this + 15);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "versionVector");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Drawing::readFrom(drawingV1::Drawing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void **v49;
  void **v50;
  void **v52;
  uint64_t **v53;
  void **v54[5];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 104);
  v9 = (uint64_t **)((char *)this + 24);
  v10 = (uint64_t **)((char *)this + 112);
  v11 = (uint64_t *)((char *)this + 48);
  v52 = (void **)((char *)this + 64);
  v53 = (uint64_t **)((char *)this + 80);
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_22:
      if ((v15 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 136) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_67;
              v27 += 7;
              v24 = v30;
              v18 = v28++ > 8;
            }
            while (!v18);
LABEL_51:
            v29 = 0;
            goto LABEL_67;
          }
          v41 = 0;
          v42 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              v29 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v43 = v24 + 1;
              v44 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v43;
              v29 |= (unint64_t)(v44 & 0x7F) << v41;
              if (v44 < 0)
              {
                v41 += 7;
                v24 = v43;
                v18 = v42++ > 8;
                if (v18)
                  goto LABEL_51;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v29 = 0;
            }
            break;
          }
LABEL_67:
          *((_QWORD *)this + 9) = v29;
          goto LABEL_68;
        case 2u:
          v33 = (_QWORD *)*((_QWORD *)this + 7);
          v32 = *((_QWORD *)this + 8);
          if ((unint64_t)v33 >= v32)
          {
            v45 = ((uint64_t)v33 - *v11) >> 4;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 60)
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v47 = v32 - *v11;
            if (v47 >> 3 > v46)
              v46 = v47 >> 3;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
              v48 = 0xFFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            v54[4] = v52;
            if (v48)
              v49 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v52, v48);
            else
              v49 = 0;
            v50 = &v49[2 * v45];
            v54[0] = v49;
            v54[1] = v50;
            v54[3] = &v49[2 * v48];
            *v50 = 0;
            v50[1] = 0;
            v54[2] = v50 + 2;
            std::vector<PB::Data>::__swap_out_circular_buffer(v11, v54);
            v34 = (_QWORD *)*((_QWORD *)this + 7);
            std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v54);
          }
          else
          {
            *v33 = 0;
            v33[1] = 0;
            v34 = v33 + 2;
            *((_QWORD *)this + 7) = v33 + 2;
          }
          *((_QWORD *)this + 7) = v34;
          v39 = (void **)(v34 - 2);
          goto LABEL_63;
        case 3u:
          PB::PtrVector<drawingV1::StrokeID>::emplace_back<>(v10);
          v35 = *((_QWORD *)this + 15);
          goto LABEL_36;
        case 4u:
          PB::PtrVector<drawingV1::Ink>::emplace_back<>(v9);
          v35 = *((_QWORD *)this + 4);
          goto LABEL_36;
        case 5u:
          PB::PtrVector<drawingV1::Stroke>::emplace_back<>(v53);
          v35 = *((_QWORD *)this + 11);
LABEL_36:
          v36 = *(_DWORD **)(v35 - 8);
          goto LABEL_37;
        case 8u:
          v36 = (_DWORD *)operator new();
          *(_QWORD *)v36 = &off_1E7774C20;
          v36[6] = 0;
          v37 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v36;
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            v36 = (_DWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_37;
        case 9u:
          v38 = operator new();
          *(_QWORD *)v38 = 0;
          *(_QWORD *)(v38 + 8) = 0;
          v54[0] = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v38);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v54, 0);
          v39 = *v8;
LABEL_63:
          PB::Reader::read(a2, (PB::Data *)v39);
          goto LABEL_68;
        case 0xAu:
          v36 = (_DWORD *)operator new();
          *(_QWORD *)v36 = &off_1E7774BE8;
          v36[8] = 0;
          v40 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v36;
          if (v40)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            v36 = (_DWORD *)*((_QWORD *)this + 2);
          }
LABEL_37:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v36 + 16))(v36, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_68;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_22;
      v19 += 7;
      v2 = v21;
      v18 = v20++ > 8;
    }
    while (!v18);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_68:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1BE3488AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<drawingV1::StrokeID>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E7774BE8;
  *(_DWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE3489FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<drawingV1::Ink>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_1E7774AD0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE348B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<drawingV1::Stroke>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E7774B78;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 92) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE348CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t drawingV1::Drawing::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Data *v4;
  const PB::Data *v5;
  const PB::Base **v6;
  const PB::Base **v7;
  const PB::Base *v8;
  const PB::Base **v9;
  const PB::Base **v10;
  const PB::Base *v11;
  const PB::Base **v12;
  const PB::Base **v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Data *v16;
  const PB::Base *v17;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 136) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = (const PB::Data *)v3[6];
  v5 = (const PB::Data *)v3[7];
  while (v4 != v5)
  {
    this = PB::Writer::write(a2, v4);
    v4 = (const PB::Data *)((char *)v4 + 16);
  }
  v6 = (const PB::Base **)v3[14];
  v7 = (const PB::Base **)v3[15];
  while (v6 != v7)
  {
    v8 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  v9 = (const PB::Base **)v3[3];
  v10 = (const PB::Base **)v3[4];
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  v12 = (const PB::Base **)v3[10];
  v13 = (const PB::Base **)v3[11];
  while (v12 != v13)
  {
    v14 = *v12++;
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  v15 = (const PB::Base *)v3[1];
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15);
  v16 = (const PB::Data *)v3[13];
  if (v16)
    this = PB::Writer::write(a2, v16);
  v17 = (const PB::Base *)v3[2];
  if (v17)
    return PB::Writer::writeSubmessage(a2, v17);
  return this;
}

uint64_t drawingV1::Drawing::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (!v4 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 104) | *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if (v4)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 136) & 1) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 136) & 1) != 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 48);
  if (v6 - v5 != *(_QWORD *)(a2 + 56) - v7)
    return 0;
  while (v5 != v6)
  {
    result = PB::Data::operator==();
    if (!(_DWORD)result)
      return result;
    v5 += 16;
    v7 += 16;
  }
  v9 = *(uint64_t **)(a1 + 112);
  v10 = *(uint64_t **)(a1 + 120);
  v11 = *(uint64_t **)(a2 + 112);
  if ((char *)v10 - (char *)v9 != *(_QWORD *)(a2 + 120) - (_QWORD)v11)
    return 0;
  while (v9 != v10)
  {
    result = drawingV1::StrokeID::operator==(*v9, *v11);
    if (!(_DWORD)result)
      return result;
    ++v9;
    ++v11;
  }
  v12 = *(uint64_t **)(a2 + 24);
  v14 = *(uint64_t **)(a1 + 24);
  v13 = *(uint64_t **)(a1 + 32);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 32) - (_QWORD)v12)
    return 0;
  while (v14 != v13)
  {
    result = drawingV1::Ink::operator==(*v14, *v12);
    if (!(_DWORD)result)
      return result;
    ++v14;
    ++v12;
    v13 = *(uint64_t **)(a1 + 32);
  }
  result = PB::PtrVector<drawingV1::Stroke>::operator==((uint64_t **)(a1 + 80), *(uint64_t **)(a2 + 80), *(_QWORD *)(a2 + 88));
  if ((_DWORD)result)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a2 + 8);
    if (v15)
    {
      if (!v16 || !drawingV1::Rectangle::operator==(v15, v16))
        return 0;
      goto LABEL_28;
    }
    if (!v16)
    {
LABEL_28:
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(_QWORD *)(a2 + 16);
      result = (v17 | v18) == 0;
      if (v17)
      {
        if (v18)
          return drawingV1::StrokeID::operator==(*(_QWORD *)(a1 + 16), v18);
      }
      return result;
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<drawingV1::Stroke>::operator==(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _BOOL8 result;

  v4 = *a1;
  v3 = a1[1];
  if ((char *)v3 - (char *)*a1 != a3 - (_QWORD)a2)
    return 0;
  if (v4 == v3)
    return 1;
  v5 = a2;
  do
  {
    result = drawingV1::Stroke::operator==(*v4, *v5);
    if (!result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 != a1[1]);
  return result;
}

unint64_t drawingV1::Drawing::hash_value(drawingV1::Drawing *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  drawingV1::Ink **v14;
  drawingV1::Ink **v15;
  uint64_t v16;
  drawingV1::Ink *v17;
  drawingV1::Stroke **v18;
  drawingV1::Stroke **v19;
  uint64_t v20;
  drawingV1::Stroke *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*((_QWORD *)this + 13))
    v2 = PBHashBytes();
  else
    v2 = 0;
  if ((*((_BYTE *)this + 136) & 1) != 0)
    v3 = *((_QWORD *)this + 9);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v4 += 16;
      v6 ^= PBHashBytes();
    }
    while (v4 != v5);
  }
  v7 = *((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 15);
  if (v7 != v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD **)v7;
      if ((*(_BYTE *)(*(_QWORD *)v7 + 32) & 1) != 0)
      {
        v11 = v10[1];
        if ((*(_BYTE *)(*(_QWORD *)v7 + 32) & 2) != 0)
        {
LABEL_16:
          v12 = v10[2];
          if ((*(_BYTE *)(*(_QWORD *)v7 + 32) & 4) == 0)
            goto LABEL_20;
          goto LABEL_17;
        }
      }
      else
      {
        v11 = 0;
        if ((*(_BYTE *)(*(_QWORD *)v7 + 32) & 2) != 0)
          goto LABEL_16;
      }
      v12 = 0;
      if ((*(_BYTE *)(*(_QWORD *)v7 + 32) & 4) == 0)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
LABEL_17:
      v13 = v10[3];
LABEL_21:
      v9 ^= v11 ^ v12 ^ v13;
      v7 += 8;
      if (v7 == v8)
        goto LABEL_24;
    }
  }
  v9 = 0;
LABEL_24:
  v14 = (drawingV1::Ink **)*((_QWORD *)this + 3);
  v15 = (drawingV1::Ink **)*((_QWORD *)this + 4);
  if (v14 == v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = *v14++;
      v16 ^= drawingV1::Ink::hash_value(v17);
    }
    while (v14 != v15);
  }
  v18 = (drawingV1::Stroke **)*((_QWORD *)this + 10);
  v19 = (drawingV1::Stroke **)*((_QWORD *)this + 11);
  if (v18 == v19)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = *v18++;
      v20 ^= drawingV1::Stroke::hash_value(v21);
    }
    while (v18 != v19);
  }
  v22 = *((_QWORD *)this + 1);
  if (v22)
    v22 = drawingV1::Rectangle::hash_value((drawingV1::Rectangle *)v22);
  v23 = *((_QWORD *)this + 2);
  if (v23)
  {
    if ((*(_BYTE *)(v23 + 32) & 1) != 0)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if ((*(_BYTE *)(v23 + 32) & 2) != 0)
      {
LABEL_39:
        v25 = *(_QWORD *)(v23 + 16);
        if ((*(_BYTE *)(v23 + 32) & 4) != 0)
        {
LABEL_40:
          v26 = *(_QWORD *)(v23 + 24);
LABEL_44:
          v23 = v25 ^ v24 ^ v26;
          return v3 ^ v2 ^ v6 ^ v9 ^ v22 ^ v23 ^ v16 ^ v20;
        }
LABEL_43:
        v26 = 0;
        goto LABEL_44;
      }
    }
    else
    {
      v24 = 0;
      if ((*(_BYTE *)(v23 + 32) & 2) != 0)
        goto LABEL_39;
    }
    v25 = 0;
    if ((*(_BYTE *)(v23 + 32) & 4) != 0)
      goto LABEL_40;
    goto LABEL_43;
  }
  return v3 ^ v2 ^ v6 ^ v9 ^ v22 ^ v23 ^ v16 ^ v20;
}

_QWORD *drawingV1::Drawing::makeBounds(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774C20;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawingV1::Drawing::makeBoundsVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774BE8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t legacy_drawing::Drawing::Drawing(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774788;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774788;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

void legacy_drawing::Drawing::~Drawing(legacy_drawing::Drawing *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7774788;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  PB::Base::~Base(this);
}

{
  legacy_drawing::Drawing::~Drawing(this);
  JUMPOUT(0x1C3B7F770);
}

legacy_drawing::Drawing *legacy_drawing::Drawing::Drawing(legacy_drawing::Drawing *this, const legacy_drawing::Drawing *a2)
{
  int64x2_t *v4;
  legacy_drawing::VectorTimestamp **v5;
  int v6;
  legacy_drawing::VectorTimestamp *v7;
  legacy_drawing::VectorTimestamp *v8;
  legacy_drawing::VectorTimestamp *v9;
  const legacy_drawing::CommandID ***v10;
  const legacy_drawing::CommandID ***i;
  const legacy_drawing::CommandID **v12;
  legacy_drawing::Command *v13;
  unint64_t v14;
  legacy_drawing::Command **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  legacy_drawing::Command **v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  legacy_drawing::Command *v26;
  int64x2_t v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  legacy_drawing::Rectangle *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int64x2_t v38;
  unint64_t v39;
  char *v40;

  *(_QWORD *)this = &off_1E7774788;
  *((_QWORD *)this + 1) = 0;
  v4 = (int64x2_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  v5 = (legacy_drawing::VectorTimestamp **)((char *)this + 40);
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 64) & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 15);
    *((_BYTE *)this + 64) = 4;
    *((_DWORD *)this + 15) = v6;
  }
  if (*((_QWORD *)a2 + 5))
  {
    v7 = (legacy_drawing::VectorTimestamp *)operator new();
    v8 = legacy_drawing::VectorTimestamp::VectorTimestamp(v7, *((const legacy_drawing::VectorTimestamp **)a2 + 5));
    v9 = *v5;
    *v5 = v8;
    if (v9)
      (*(void (**)(legacy_drawing::VectorTimestamp *))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = (const legacy_drawing::CommandID ***)*((_QWORD *)a2 + 1);
  for (i = (const legacy_drawing::CommandID ***)*((_QWORD *)a2 + 2); v10 != i; ++v10)
  {
    v12 = *v10;
    v13 = (legacy_drawing::Command *)operator new();
    legacy_drawing::Command::Command(v13, v12);
    v15 = (legacy_drawing::Command **)*((_QWORD *)this + 2);
    v14 = *((_QWORD *)this + 3);
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((uint64_t)v15 - v4->i64[0]) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v18 = v14 - v4->i64[0];
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v40 = (char *)this + 24;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v20);
      else
        v21 = 0;
      v22 = (legacy_drawing::Command **)(v20 + 8 * v17);
      v23 = v20 + 8 * v21;
      v39 = v23;
      *v22 = v13;
      v16 = v22 + 1;
      v38.i64[1] = (uint64_t)(v22 + 1);
      v25 = (_QWORD *)*((_QWORD *)this + 1);
      v24 = (_QWORD *)*((_QWORD *)this + 2);
      if (v24 == v25)
      {
        v27 = vdupq_n_s64((unint64_t)v24);
      }
      else
      {
        do
        {
          v26 = (legacy_drawing::Command *)*--v24;
          *v24 = 0;
          *--v22 = v26;
        }
        while (v24 != v25);
        v27 = *v4;
        v16 = (_QWORD *)v38.i64[1];
        v23 = v39;
      }
      *((_QWORD *)this + 1) = v22;
      *((_QWORD *)this + 2) = v16;
      v38 = v27;
      v28 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v23;
      v39 = v28;
      v37 = v27.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    *((_QWORD *)this + 2) = v16;
  }
  v29 = *((_BYTE *)a2 + 64);
  if ((v29 & 2) != 0)
  {
    v30 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 64) |= 2u;
    *((_DWORD *)this + 14) = v30;
    v29 = *((_BYTE *)a2 + 64);
  }
  if ((v29 & 1) != 0)
  {
    v31 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 64) |= 1u;
    *((_QWORD *)this + 4) = v31;
  }
  if (*((_QWORD *)a2 + 6))
  {
    v32 = (legacy_drawing::Rectangle *)operator new();
    v33 = legacy_drawing::Rectangle::Rectangle(v32, *((const legacy_drawing::Rectangle **)a2 + 6));
    v34 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v35;
    if (v34)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v34 + 8))(v34, v33);
  }
  return this;
}

void sub_1BE3495F4(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t legacy_drawing::Drawing::operator=(uint64_t a1, const legacy_drawing::Drawing *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  if ((const legacy_drawing::Drawing *)a1 != a2)
  {
    legacy_drawing::Drawing::Drawing((legacy_drawing::Drawing *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v5;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v4;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v7;
    legacy_drawing::Drawing::~Drawing((legacy_drawing::Drawing *)v9);
  }
  return a1;
}

double legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Drawing *a2, legacy_drawing::Drawing *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t legacy_drawing::Drawing::Drawing(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E7774788;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_QWORD *)*v4;
  if (*v4)
  {
    v8 = *(_QWORD **)(a1 + 16);
    v9 = (_QWORD *)*v4;
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

uint64_t legacy_drawing::Drawing::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  if (a1 != a2)
  {
    legacy_drawing::Drawing::Drawing((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v5;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v4;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v7;
    legacy_drawing::Drawing::~Drawing((legacy_drawing::Drawing *)v9);
  }
  return a1;
}

uint64_t legacy_drawing::Drawing::formatText(legacy_drawing::Drawing *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "command");
  }
  v8 = *((_BYTE *)this + 64);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "orientation");
    v8 = *((_BYTE *)this + 64);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 64) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "orientationTimestamp", *((double *)this + 4));
  if ((*((_BYTE *)this + 64) & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "serializationVersion");
LABEL_7:
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "timestamp");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "unrotatedBounds");
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::Drawing::readFrom(legacy_drawing::Drawing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  void (**v9)(legacy_drawing::Command *__hidden);
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (**v34)(legacy_drawing::Command *__hidden);
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int64x2_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64x2_t v72;
  unint64_t v73;
  char *v74;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 24;
  v9 = &off_1E7774750;
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v15 = *(_BYTE *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0)
        break;
      v11 += 7;
      v2 = v14;
      v16 = v12++ > 8;
      if (v16)
        goto LABEL_20;
    }
LABEL_26:
    if ((v13 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 64) |= 4u;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_93;
            v26 += 7;
            v23 = v29;
            v16 = v27++ > 8;
          }
          while (!v16);
LABEL_75:
          LODWORD(v28) = 0;
          goto LABEL_93;
        }
        v59 = 0;
        v60 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v61 = v23 + 1;
            v62 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v61;
            v28 |= (unint64_t)(v62 & 0x7F) << v59;
            if (v62 < 0)
            {
              v59 += 7;
              v23 = v61;
              v16 = v60++ > 8;
              if (v16)
                goto LABEL_75;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_93:
        *((_DWORD *)this + 15) = v28;
        goto LABEL_21;
      case 2u:
        v46 = (_QWORD *)operator new();
        *v46 = off_1E7774638;
        v46[1] = 0;
        v46[2] = 0;
        v46[3] = 0;
        v47 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v46;
        if (v47)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          v46 = (_QWORD *)*((_QWORD *)this + 5);
        }
        goto LABEL_51;
      case 3u:
        v32 = operator new();
        v33 = v32;
        v34 = v9;
        *(_QWORD *)v32 = v9;
        *(_DWORD *)(v32 + 100) = 0;
        *(_OWORD *)(v32 + 8) = 0u;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_OWORD *)(v32 + 56) = 0u;
        *(_OWORD *)(v32 + 72) = 0u;
        *(_QWORD *)(v32 + 88) = 0;
        v36 = (uint64_t *)*((_QWORD *)this + 2);
        v35 = *((_QWORD *)this + 3);
        if ((unint64_t)v36 >= v35)
        {
          v49 = *((_QWORD *)this + 1);
          v50 = ((uint64_t)v36 - v49) >> 3;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v51 = v35 - v49;
          v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          v74 = v8;
          if (v53)
            v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v53);
          else
            v54 = 0;
          v63 = (uint64_t *)(v53 + 8 * v50);
          v64 = v53 + 8 * v54;
          v73 = v64;
          *v63 = v33;
          v37 = v63 + 1;
          v72.i64[1] = (uint64_t)(v63 + 1);
          v66 = (_QWORD *)*((_QWORD *)this + 1);
          v65 = (_QWORD *)*((_QWORD *)this + 2);
          if (v65 == v66)
          {
            v68 = vdupq_n_s64((unint64_t)v65);
          }
          else
          {
            do
            {
              v67 = *--v65;
              *v65 = 0;
              *--v63 = v67;
            }
            while (v65 != v66);
            v68 = *(int64x2_t *)((char *)this + 8);
            v37 = (_QWORD *)v72.i64[1];
            v64 = v73;
          }
          *((_QWORD *)this + 1) = v63;
          *((_QWORD *)this + 2) = v37;
          v72 = v68;
          v69 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v64;
          v73 = v69;
          v71 = v68.i64[0];
          std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v71);
        }
        else
        {
          *v36 = v32;
          v37 = v36 + 1;
        }
        *((_QWORD *)this + 2) = v37;
        v70 = *(v37 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v70 + 16))(v70, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
        v9 = v34;
        goto LABEL_21;
      case 4u:
        *((_BYTE *)this + 64) |= 2u;
        v38 = *((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          do
          {
            v44 = v38 + 1;
            *((_QWORD *)a2 + 1) = v38 + 1;
            v45 = *(_BYTE *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0)
              goto LABEL_90;
            v41 += 7;
            v38 = v44;
            v16 = v42++ > 8;
          }
          while (!v16);
LABEL_68:
          LODWORD(v43) = 0;
          goto LABEL_90;
        }
        v55 = 0;
        v56 = 0;
        v43 = 0;
        if (v39 <= v38)
          v39 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v39 == v38)
          {
            LODWORD(v43) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v57 = v38 + 1;
            v58 = *(_BYTE *)(v40 + v38);
            *((_QWORD *)a2 + 1) = v57;
            v43 |= (unint64_t)(v58 & 0x7F) << v55;
            if (v58 < 0)
            {
              v55 += 7;
              v38 = v57;
              v16 = v56++ > 8;
              if (v16)
                goto LABEL_68;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v43) = 0;
          }
          break;
        }
LABEL_90:
        *((_DWORD *)this + 14) = v43;
        goto LABEL_21;
      case 5u:
        *((_BYTE *)this + 64) |= 1u;
        v31 = *((_QWORD *)a2 + 1);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v31);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_21;
      case 6u:
        v46 = (_QWORD *)operator new();
        *v46 = &off_1E77747F8;
        *((_DWORD *)v46 + 6) = 0;
        v48 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v46;
        if (v48)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
          v46 = (_QWORD *)*((_QWORD *)this + 6);
        }
LABEL_51:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v46 + 16))(v46, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_21:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      default:
        goto LABEL_20;
    }
  }
  v17 = 0;
  v18 = 0;
  v13 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v19 = v2 + 1;
    v20 = *(_BYTE *)(v10 + v2);
    *((_QWORD *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0)
      goto LABEL_26;
    v17 += 7;
    v2 = v19;
    v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_21;
  return result;
}

void sub_1BE34A028(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::Drawing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  char v8;
  const PB::Base *v9;

  v3 = this;
  if ((*(_BYTE *)(this + 64) & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(const PB::Base **)(v3 + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base ***)(v3 + 8);
  v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v8 = *(_BYTE *)(v3 + 64);
  }
  if ((v8 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v9 = *(const PB::Base **)(v3 + 48);
  if (v9)
    return PB::Writer::writeSubmessage(a2, v9);
  return this;
}

BOOL legacy_drawing::Drawing::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5)
      return 0;
    if (PB::PtrVector<legacy_drawing::VectorTimestampClock>::operator==((uint64_t **)(v4 + 8), v5 + 8))
      goto LABEL_11;
    v5 = *(_QWORD *)(a1 + 40) | *(_QWORD *)(a2 + 40);
  }
  if (v5)
    return 0;
LABEL_11:
  v6 = *(uint64_t **)(a2 + 8);
  v8 = *(uint64_t **)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 16);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v8 != v7)
  {
    result = legacy_drawing::Command::operator==(*v8, *v6);
    if (!result)
      return result;
    ++v8;
    ++v6;
    v7 = *(uint64_t **)(a1 + 16);
  }
  if ((*(_BYTE *)(a1 + 64) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 2) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a2 + 48);
  result = (v10 | v11) == 0;
  if (v10)
  {
    if (v11)
      return legacy_drawing::Rectangle::operator==(*(_QWORD *)(a1 + 48), v11);
  }
  return result;
}

unint64_t legacy_drawing::Drawing::hash_value(legacy_drawing::Drawing *this)
{
  uint64_t v2;
  uint64_t v3;
  legacy_drawing::VectorTimestampClock **v4;
  legacy_drawing::VectorTimestampClock **v5;
  uint64_t v6;
  legacy_drawing::VectorTimestampClock *v7;
  legacy_drawing::Command **v8;
  legacy_drawing::Command **v9;
  uint64_t v10;
  legacy_drawing::Command *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if ((*((_BYTE *)this + 64) & 4) != 0)
    v2 = *((unsigned int *)this + 15);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 5);
  if (!v3
    || (v4 = *(legacy_drawing::VectorTimestampClock ***)(v3 + 8),
        v5 = *(legacy_drawing::VectorTimestampClock ***)(v3 + 16),
        v4 == v5))
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= legacy_drawing::VectorTimestampClock::hash_value(v7);
    }
    while (v4 != v5);
  }
  v8 = (legacy_drawing::Command **)*((_QWORD *)this + 1);
  v9 = (legacy_drawing::Command **)*((_QWORD *)this + 2);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 ^= legacy_drawing::Command::hash_value(v11);
    }
    while (v8 != v9);
  }
  if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    v12 = 0;
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_17;
LABEL_21:
    v13 = 0;
    goto LABEL_22;
  }
  v12 = *((unsigned int *)this + 14);
  if ((*((_BYTE *)this + 64) & 1) == 0)
    goto LABEL_21;
LABEL_17:
  if (*((double *)this + 4) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 4);
LABEL_22:
  v14 = *((_QWORD *)this + 6);
  if (v14)
    v14 = legacy_drawing::Rectangle::hash_value((legacy_drawing::Rectangle *)v14);
  return v6 ^ v2 ^ v13 ^ v14 ^ v10 ^ v12;
}

_QWORD *legacy_drawing::Drawing::makeTimestamp(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = off_1E7774638;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Drawing::makeUnrotatedBounds(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77747F8;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

double PKPaletteToolsContainerMinimumWidth()
{
  _BOOL4 v0;
  double result;

  v0 = PKIsVisionDevice();
  result = 372.0;
  if (v0)
    return 534.0;
  return result;
}

double PKPaletteToolsContainerMaximumWidth(int a1)
{
  BOOL v2;
  double result;
  double v4;

  if (PKIsVisionDevice())
  {
    v2 = !PKIsVisionDevice();
    result = 372.0;
    v4 = 534.0;
  }
  else
  {
    v2 = a1 == 0;
    result = 394.0;
    v4 = 268.0;
  }
  if (!v2)
    return v4;
  return result;
}

double PKPaletteToolSizeWidth(int a1)
{
  double result;

  result = 46.0;
  if (a1)
    return 34.0;
  return result;
}

double PKPaletteToolsInterItemSpacing(uint64_t a1)
{
  double result;

  result = 15.0;
  if (a1 < 8)
    return 12.0;
  return result;
}

double PKPaletteToolsInterItemSpacingInCompactSize(uint64_t a1)
{
  double result;

  result = 7.0;
  if (a1 < 8)
    return 5.0;
  return result;
}

BOOL PKToolPickerCanScroll(uint64_t a1)
{
  return a1 > 7;
}

double PKPaletteButtonSize(int a1)
{
  double result;

  result = 36.0;
  if (a1)
    return 28.0;
  return result;
}

double PKPaletteDragHandleSize(int a1)
{
  if (a1)
    return 6.0;
  else
    return 40.0;
}

double PKPaletteColorSwatchSize(int a1)
{
  double result;

  result = 36.0;
  if (a1)
    return 28.0;
  return result;
}

double PKPaletteColorSwatchesSize(int a1)
{
  if (a1)
    return 84.0;
  else
    return 132.0;
}

_QWORD *legacy_drawing::VectorTimestamp::VectorTimestamp(_QWORD *this)
{
  *this = off_1E7774638;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1E7774638;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void legacy_drawing::VectorTimestamp::~VectorTimestamp(legacy_drawing::VectorTimestamp *this)
{
  void **v2;

  *(_QWORD *)this = off_1E7774638;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7774638;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7774638;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x1C3B7F770]();
}

legacy_drawing::VectorTimestamp *legacy_drawing::VectorTimestamp::VectorTimestamp(legacy_drawing::VectorTimestamp *this, const legacy_drawing::VectorTimestamp *a2)
{
  legacy_drawing::VectorTimestampClock ***v3;
  const PB::Data ***v4;
  const PB::Data ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (legacy_drawing::VectorTimestampClock ***)((char *)this + 8);
  *(_QWORD *)this = off_1E7774638;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const PB::Data ***)*((_QWORD *)a2 + 1);
  v5 = (const PB::Data ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<legacy_drawing::VectorTimestampClock const&>(v3, *v4++);
  return this;
}

uint64_t PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<legacy_drawing::VectorTimestampClock const&>(legacy_drawing::VectorTimestampClock ***a1, const PB::Data **a2)
{
  legacy_drawing::VectorTimestampClock *v4;
  uint64_t result;
  unint64_t v6;
  legacy_drawing::VectorTimestampClock **v7;
  legacy_drawing::VectorTimestampClock **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  legacy_drawing::VectorTimestampClock **v14;
  char *v15;
  legacy_drawing::VectorTimestampClock **v16;
  legacy_drawing::VectorTimestampClock **v17;
  legacy_drawing::VectorTimestampClock *v18;
  int64x2_t v19;
  legacy_drawing::VectorTimestampClock **v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = (legacy_drawing::VectorTimestampClock *)operator new();
  legacy_drawing::VectorTimestampClock::VectorTimestampClock(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v12);
    else
      v13 = 0;
    v14 = (legacy_drawing::VectorTimestampClock **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (legacy_drawing::VectorTimestampClock **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (legacy_drawing::VectorTimestampClock **)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1BE34B7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestamp::operator=(uint64_t a1, const legacy_drawing::VectorTimestamp *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(legacy_drawing::VectorTimestamp *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const legacy_drawing::VectorTimestamp *)a1 != a2)
  {
    legacy_drawing::VectorTimestamp::VectorTimestamp((legacy_drawing::VectorTimestamp *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_1E7774638;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *legacy_drawing::swap(_QWORD *this, legacy_drawing::VectorTimestamp *a2, legacy_drawing::VectorTimestamp *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *legacy_drawing::VectorTimestamp::VectorTimestamp(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_1E7774638;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_1E7774638;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t legacy_drawing::VectorTimestamp::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(legacy_drawing::VectorTimestamp *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_1E7774638;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_1E7774638;
    std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t legacy_drawing::VectorTimestamp::formatText(legacy_drawing::VectorTimestamp *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "clock");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::VectorTimestamp::readFrom(legacy_drawing::VectorTimestamp *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t PB::PtrVector<legacy_drawing::VectorTimestampClock>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E7774670;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE34BD74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestamp::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL legacy_drawing::VectorTimestamp::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<legacy_drawing::VectorTimestampClock>::operator==((uint64_t **)(a1 + 8), a2 + 8);
}

BOOL PB::PtrVector<legacy_drawing::VectorTimestampClock>::operator==(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(uint64_t **)a2;
  if ((char *)v2 - (char *)*a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    result = legacy_drawing::VectorTimestampClock::operator==(*v3, *v4);
    if (!result)
      break;
    ++v3;
    ++v4;
  }
  while (v3 != a1[1]);
  return result;
}

uint64_t legacy_drawing::VectorTimestamp::hash_value(legacy_drawing::VectorTimestamp *this)
{
  legacy_drawing::VectorTimestampClock **v1;
  legacy_drawing::VectorTimestampClock **v2;
  uint64_t v3;
  legacy_drawing::VectorTimestampClock *v4;

  v1 = (legacy_drawing::VectorTimestampClock **)*((_QWORD *)this + 1);
  v2 = (legacy_drawing::VectorTimestampClock **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= legacy_drawing::VectorTimestampClock::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t legacy_drawing::Point::Point(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774718;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774718;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void legacy_drawing::Point::~Point(legacy_drawing::Point *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float legacy_drawing::Point::Point(legacy_drawing::Point *this, const legacy_drawing::Point *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774718;
  *((_DWORD *)this + 9) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    result = *((float *)a2 + 7);
    v3 = 32;
    *((_BYTE *)this + 36) = 32;
    *((float *)this + 7) = result;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 0x40) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 8);
    v3 |= 0x40u;
    *((_BYTE *)this + 36) = v3;
    *((float *)this + 8) = result;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((float *)a2 + 6);
    v3 |= 0x10u;
    *((_BYTE *)this + 36) = v3;
    *((float *)this + 6) = result;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_BYTE *)this + 36) = v3;
  *((float *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_BYTE *)this + 36) = v3;
  *((float *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      return result;
LABEL_16:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 36) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
LABEL_15:
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_BYTE *)this + 36) = v3;
  *((float *)this + 4) = result;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
    goto LABEL_16;
  return result;
}

uint64_t legacy_drawing::Point::operator=(uint64_t a1, const legacy_drawing::Point *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((const legacy_drawing::Point *)a1 != a2)
  {
    legacy_drawing::Point::Point((legacy_drawing::Point *)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v3;
    v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Point *a2, legacy_drawing::Point *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float result;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float legacy_drawing::Point::Point(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774718;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774718;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t legacy_drawing::Point::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(legacy_drawing::Point *__hidden);
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_1E7774718;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_DWORD *)(a2 + 32);
    v13 = *(_DWORD *)(a1 + 36);
    v12 = *(_DWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t legacy_drawing::Point::formatText(legacy_drawing::Point *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aspectRatio", *((float *)this + 2));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "azimuth", *((float *)this + 3));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "edgeWidth", *((float *)this + 4));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "opacity", *((float *)this + 5));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "x", *((float *)this + 7));
    if ((*((_BYTE *)this + 36) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "radius", *((float *)this + 6));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "y", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::Point::readFrom(legacy_drawing::Point *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_46;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 2u:
        *((_BYTE *)this + 36) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((_BYTE *)this + 36) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((_BYTE *)this + 36) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((_BYTE *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_45:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_46:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t legacy_drawing::Point::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL legacy_drawing::Point::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 1) == 0;
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    return (*(_BYTE *)(a2 + 36) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t legacy_drawing::Point::hash_value(legacy_drawing::Point *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;

  if ((*((_BYTE *)this + 36) & 0x20) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 36) & 0x40) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v14 = *((float *)this + 7);
  v1 = LODWORD(v14);
  if (v14 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 36) & 0x40) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 8);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 3);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 36) & 4) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 4);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 2);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void sub_1BE34F948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE34FA18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE34FAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE34FD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1BE34FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE34FE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE34FF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE350120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE3501CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3502A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3504A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE35060C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE3506C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE3507A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v11);

  _Unwind_Resume(a1);
}

void sub_1BE350830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1BE350944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE350A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE350BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE350DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE350ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE351058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3594B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE359A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PKSelectionController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE359AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE359B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE359CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE359DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35A080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE35A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE35A3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE35A674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE35A844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE35A9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE35AD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE35ADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE35AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  id *v15;

  objc_destroyWeak(v15);

  _Unwind_Resume(a1);
}

void sub_1BE35B0D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE35B168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE35B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE35B554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE35B694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE35B9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE35BB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE35BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE35BC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE35BD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE35C35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE35C550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE35C694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35C7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE35CE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, _Unwind_Exception *exception_object, id *location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;

  objc_destroyWeak(location);
  objc_destroyWeak(&a30);

  _Unwind_Resume(a1);
}

void sub_1BE35D09C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE35D2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE35D448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35D65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35D728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35D880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE35DA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE35DCAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE35DEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35E088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE35E3E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE35E9AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE35EAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE35ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v25 = v22;

  _Unwind_Resume(a1);
}

void sub_1BE35EF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE35F08C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE35F164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE35FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,_Unwind_Exception *exception_object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  _Unwind_Resume(a1);
}

void sub_1BE3600B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE360138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3601CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE36028C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE36055C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE36076C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3608C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE360B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE360CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE360EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36138C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE361498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3615C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3616D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE361754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE361860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE36197C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE361C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE361E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3620B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE362144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE362368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE362D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE363520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE363714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE363898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE3639FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE363AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE363D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id *v25;

  objc_destroyWeak(v25);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE363DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3640F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3641E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE36433C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE364508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE364740(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE364974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE364B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE364CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE364E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE365014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE365058()
{
  JUMPOUT(0x1BE365048);
}

void sub_1BE365060()
{
  JUMPOUT(0x1BE36504CLL);
}

void sub_1BE365198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE3655D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3656E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE3657B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE365A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE365B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE365C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE365D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE365E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE36600C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE36674C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3668EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE366974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3669E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE366B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE366C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE366CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE366D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE366DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE366E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE366F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE366FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE367350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE3678F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE367A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE367C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE367D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE367F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE368034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE368154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE368208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE368288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE368318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE36846C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3685F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36874C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v14;

  _Unwind_Resume(a1);
}

void sub_1BE3688DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE368A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE368B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE368DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE368F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE36907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE3691F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3692BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE369388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3694C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE369648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE3697CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v15;

  _Unwind_Resume(a1);
}

void sub_1BE36995C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v15;

  _Unwind_Resume(a1);
}

void sub_1BE369A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE369A84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE369E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE36A080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE36A1E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36A2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE36A42C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE36A4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE36A5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE36A7F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36AA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_1BE36AB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE36AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE36AD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE36AE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE36AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  _Unwind_Resume(a1);
}

id getLTUITranslationViewControllerClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getLTUITranslationViewControllerClass(void)::softClass;
  v7 = getLTUITranslationViewControllerClass(void)::softClass;
  if (!getLTUITranslationViewControllerClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL37getLTUITranslationViewControllerClassv_block_invoke;
    v3[3] = &unk_1E777A710;
    v3[4] = &v4;
    ___ZL37getLTUITranslationViewControllerClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE36B0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE36B190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE36B268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE36B35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE36B4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36BD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,id location,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t a72;
  id *v72;
  void *v73;
  void *v74;
  uint64_t v75;

  objc_destroyWeak(v72);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1BE36C0F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36C3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, id location)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE36C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE36C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

Class ___ZL37getLTUITranslationViewControllerClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!TranslationUIServicesLibraryCore(char **)::frameworkLibrary)
  {
    TranslationUIServicesLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (!TranslationUIServicesLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("LTUITranslationViewController");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getLTUITranslationViewControllerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *PKTextInputDescriptionForCursorStyle(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E777A748[a1];
}

__CFString *PKTextInputDescriptionForCursorMode(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E777A768[a1];
}

void sub_1BE36D3DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BE36E5D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36E6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36E798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE36E810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE36E8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE36EA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36EC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE36EFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE36F080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKRulerController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE36F31C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36F3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36F454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE36F6E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE36F830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE36F934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE36F9F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3704D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE370834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE370954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE370ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *PKClipperPathsFromCGPath(const CGPath *a1, double a2)
{
  uint64_t *v3;
  _BYTE v5[24];
  void **v6;

  CGPathRandomAccess::CGPathRandomAccess((CGPathRandomAccess *)v5, a1);
  v3 = CGPathRandomAccess::clipperPaths((CGPathRandomAccess *)v5, a2);
  v6 = (void **)v5;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v3;
}

void sub_1BE370BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *CGPathRandomAccess::clipperPaths(CGPathRandomAccess *this, double a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char **v28;
  uint64_t v29;
  float64x2_t **v30;
  int32x2_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(uint64_t, double, double);
  id v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  __n128 v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  __n128 v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x2_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v97;
  int64_t v98;
  uint64_t *v99;
  CGPathRandomAccess *v100;
  uint64_t v101;
  float64x2_t v102;
  float64x2_t v103;
  uint64_t v104;
  _QWORD *v105;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  _QWORD v114[2];
  void (*v115)(uint64_t, double, double);
  void *v116;
  char **v117;
  _QWORD *v118;
  double v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t);
  uint64_t (*v124)();
  const char *v125;
  uint64_t v126;

  v3 = (uint64_t *)operator new();
  v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v100 = this;
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = v5 / 0x30uLL;
    if (v7 <= 1)
      v7 = 1;
    v97 = (uint64_t)(v3 + 2);
    v98 = v7;
    __asm
    {
      FMOV            V1.2D, #3.0
      FMOV            V0.2D, #6.0
    }
    v102 = _Q0;
    v103 = _Q1;
    __asm
    {
      FMOV            V1.2D, #0.125
      FMOV            V0.2D, #0.25
    }
    v112 = _Q0;
    v113 = _Q1;
    __asm { FMOV            V0.2D, #0.5 }
    v111 = _Q0;
    v99 = v3;
    do
    {
      v17 = (_QWORD *)v4[1];
      v16 = v4[2];
      if ((unint64_t)v17 >= v16)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *v4) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v4) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        v124 = (uint64_t (*)())v97;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v97, v22);
        else
          v23 = 0;
        v24 = &v23[24 * v19];
        v120 = v23;
        v121 = v24;
        v123 = (uint64_t (*)(uint64_t, uint64_t))&v23[24 * v22];
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        v122 = (uint64_t)(v24 + 24);
        std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(v4, &v120);
        v18 = (_QWORD *)v4[1];
        std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v120);
      }
      else
      {
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
        v18 = v17 + 3;
        v4[1] = (uint64_t)(v17 + 3);
      }
      v4[1] = (uint64_t)v18;
      v101 = v6;
      v25 = (uint64_t *)(*(_QWORD *)v100 + 48 * v6);
      v26 = *v25;
      if (v25[1] != *v25)
      {
        v27 = 0;
        v28 = (char **)(v18 - 3);
        v29 = *(_QWORD *)v100 + 48 * v101;
        v30 = (float64x2_t **)(v29 + 24);
        v104 = (uint64_t)(v18 - 1);
        v105 = (_QWORD *)(v29 + 32);
        do
        {
          if (!v27)
          {
            v31 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(**v30, a2)));
            v32 = *(v18 - 2);
            v33 = *(v18 - 1);
            if (v32 >= v33)
            {
              v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)*v28) >> 3);
              v37 = v36 + 1;
              if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_70;
              v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)*v28) >> 3);
              if (2 * v38 > v37)
                v37 = 2 * v38;
              if (v38 >= 0x555555555555555)
                v39 = 0xAAAAAAAAAAAAAAALL;
              else
                v39 = v37;
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v104, v39);
              v42 = &v40[24 * v36];
              *(_QWORD *)&v43 = v31.i32[0];
              *((_QWORD *)&v43 + 1) = v31.i32[1];
              *(_OWORD *)v42 = v43;
              *((_QWORD *)v42 + 2) = 0;
              v45 = (char *)*(v18 - 3);
              v44 = (char *)*(v18 - 2);
              v46 = v42;
              if (v44 != v45)
              {
                do
                {
                  v47 = *(_OWORD *)(v44 - 24);
                  *((_QWORD *)v46 - 1) = *((_QWORD *)v44 - 1);
                  *(_OWORD *)(v46 - 24) = v47;
                  v46 -= 24;
                  v44 -= 24;
                }
                while (v44 != v45);
                v44 = *v28;
              }
              v35 = v42 + 24;
              *(v18 - 3) = v46;
              *(v18 - 2) = v42 + 24;
              *(v18 - 1) = &v40[24 * v41];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)&v34 = v31.i32[0];
              *((_QWORD *)&v34 + 1) = v31.i32[1];
              *(_OWORD *)v32 = v34;
              *(_QWORD *)(v32 + 16) = 0;
              v35 = (char *)(v32 + 24);
            }
            *(v18 - 2) = v35;
            v26 = *v25;
          }
          v48 = v26 + 16 * v27;
          if (*(_BYTE *)(v48 + 8))
          {
            v120 = 0;
            v121 = (char *)&v120;
            v122 = 0x3812000000;
            v123 = __Block_byref_object_copy__7;
            v124 = __Block_byref_object_dispose__8;
            v125 = "";
            v126 = 0;
            v49 = (uint64_t)&(*v30)[*(_QWORD *)v48];
            v114[0] = MEMORY[0x1E0C809B0];
            v114[1] = 3221225472;
            v115 = ___ZNK25CGPathRandomAccessSubpath11clipperPathEdRNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEE_block_invoke;
            v116 = &unk_1E777A7D8;
            v119 = a2;
            v117 = &v120;
            v118 = v18 - 3;
            v50 = v114;
            v51 = ___ZNK25CGPathRandomAccessSubpath11clipperPathEdRNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEE_block_invoke;
            v52 = v50;
            v54 = *(float64x2_t *)v49;
            v53 = *(float64x2_t *)(v49 + 16);
            v55 = vsubq_f64(v53, *(float64x2_t *)v49);
            v57 = *(float64x2_t *)(v49 + 32);
            v56 = *(__n128 *)(v49 + 48);
            v58 = vsubq_f64(v57, v53);
            v59 = vsubq_f64(v58, v55);
            v60 = vsubq_f64(vsubq_f64((float64x2_t)v56, v57), v58);
            v61 = (float64x2_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)v60);
            v62 = (float64x2_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v60);
            v63 = (__n128)vmlaq_f64(vmulq_f64(v61, v61), v62, v62);
            if (v63.n128_f64[0] <= v63.n128_f64[1])
              v63.n128_f64[0] = v63.n128_f64[1];
            v64 = v63.n128_f64[0] * 9.0 * 0.0625;
            v63.n128_u64[0] = *(_QWORD *)(v49 + 56);
            if (v64 > 0.04)
            {
              v65 = vsubq_f64(v60, v59);
              v66 = vmulq_f64(v65, v102);
              v67 = vmlaq_f64(v65, v103, vaddq_f64(v55, v59));
              v68 = vmulq_f64(vaddq_f64(v59, v65), v102);
              v69 = 1;
              do
              {
                v66 = vmulq_f64(v66, v113);
                v68 = vsubq_f64(vmulq_f64(v68, v112), v66);
                v67 = vsubq_f64(vmulq_f64(v67, v111), vmulq_f64(v68, v111));
                v69 *= 2;
                v64 = v64 * 0.0625;
              }
              while (v64 > 0.04 && v69 <= 0x10000);
              v51 = ___ZNK25CGPathRandomAccessSubpath11clipperPathEdRNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEE_block_invoke;
              if (v69 >= 2)
              {
                v70 = 1;
                v107 = v66;
                do
                {
                  v108 = v67;
                  v109 = v68;
                  v110 = vaddq_f64(v54, v67);
                  ((void (*)(id, double, double, double))v115)(v52, v110.f64[0], v110.f64[1], (double)(int)v70 / (double)v69);
                  v63.n128_u64[1] = *(_QWORD *)&v108.f64[1];
                  v56.n128_u64[1] = *(_QWORD *)&v109.f64[1];
                  v67 = vaddq_f64(v108, v109);
                  v68 = vaddq_f64(v107, v109);
                  ++v70;
                  v54 = v110;
                }
                while (v69 != v70);
                v56.n128_u64[0] = *(_QWORD *)(v49 + 48);
                v63.n128_u64[0] = *(_QWORD *)(v49 + 56);
                v51 = v115;
              }
            }
            ((void (*)(id, __n128, __n128, double))v51)(v52, v56, v63, 1.0);

            _Block_object_dispose(&v120, 8);
          }
          else
          {
            v71 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64((*v30)[(*(_QWORD *)v48 + 1) % (unint64_t)((uint64_t)(*v105 - (_QWORD)*v30) >> 4)], a2)));
            v72 = *(v18 - 2);
            v73 = *(v18 - 1);
            if (v72 >= v73)
            {
              v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (_QWORD)*v28) >> 3);
              v77 = v76 + 1;
              if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_70:
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)*v28) >> 3);
              if (2 * v78 > v77)
                v77 = 2 * v78;
              if (v78 >= 0x555555555555555)
                v79 = 0xAAAAAAAAAAAAAAALL;
              else
                v79 = v77;
              v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v104, v79);
              v82 = &v80[24 * v76];
              *(_QWORD *)&v83 = v71.i32[0];
              *((_QWORD *)&v83 + 1) = v71.i32[1];
              *(_OWORD *)v82 = v83;
              *((_QWORD *)v82 + 2) = 0;
              v85 = (char *)*(v18 - 3);
              v84 = (char *)*(v18 - 2);
              v86 = v82;
              if (v84 != v85)
              {
                do
                {
                  v87 = *(_OWORD *)(v84 - 24);
                  *((_QWORD *)v86 - 1) = *((_QWORD *)v84 - 1);
                  *(_OWORD *)(v86 - 24) = v87;
                  v86 -= 24;
                  v84 -= 24;
                }
                while (v84 != v85);
                v84 = *v28;
              }
              v75 = v82 + 24;
              *(v18 - 3) = v86;
              *(v18 - 2) = v82 + 24;
              *(v18 - 1) = &v80[24 * v81];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_QWORD *)&v74 = v71.i32[0];
              *((_QWORD *)&v74 + 1) = v71.i32[1];
              *(_OWORD *)v72 = v74;
              *(_QWORD *)(v72 + 16) = 0;
              v75 = (char *)(v72 + 24);
            }
            *(v18 - 2) = v75;
          }
          ++v27;
          v26 = *v25;
        }
        while (v27 < (v25[1] - *v25) >> 4);
      }
      v89 = (uint64_t *)*(v18 - 3);
      v88 = *(v18 - 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v88 - (uint64_t)v89) >> 3) > 1)
      {
        v91 = *(_QWORD *)(v88 - 24);
        v92 = *(_QWORD *)(v88 - 16);
        v90 = v88 - 24;
        v94 = *v89;
        v93 = v89[1];
        if (v91 == v94 && v92 == v93)
          *(v18 - 2) = v90;
      }
      v6 = v101 + 1;
      v4 = v99;
    }
    while (v101 + 1 != v98);
  }
  return v4;
}

void sub_1BE371220(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer(v1 - 192);
  _Unwind_Resume(a1);
}

void CGPathRandomAccess::CGPathRandomAccess(CGPathRandomAccess *this, const CGPath *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  CGPathRandomAccess::addPath(this, a2);
}

void sub_1BE37129C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t CGPathRandomAccess::addPath(CGPathRandomAccess *this, CGPathRef path)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[8];
  _QWORD v8[6];
  __int128 v9;
  _QWORD block[5];
  _QWORD v11[6];
  void *v12;
  void *v13;
  uint64_t v14;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x4812000000;
  v11[3] = __Block_byref_object_copy__15;
  v11[4] = __Block_byref_object_dispose__15;
  v11[5] = "";
  v12 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v13 = 0;
  v14 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke;
  block[3] = &unk_1E777A788;
  block[4] = v11;
  CGPathApplyWithBlock(path, block);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  v8[0] = 0;
  v8[1] = v8;
  v8[3] = __Block_byref_object_copy__2;
  v8[4] = __Block_byref_object_dispose__3;
  v8[2] = 0x4012000000;
  v8[5] = "";
  v9 = *MEMORY[0x1E0C9D538];
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke_5;
  v7[3] = &unk_1E777A7B0;
  v7[6] = this;
  v7[7] = v5;
  v7[4] = v11;
  v7[5] = v8;
  CGPathApplyWithBlock(path, v7);
  CGPathRandomAccessSubpath::closeIfNeeded((CGPathRandomAccessSubpath *)(*((_QWORD *)this + 1) - 48));
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v11, 8);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_1BE371448(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__15(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke(uint64_t a1, int *a2)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;
  int64x2_t *v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int64x2_t *v17;

  v2 = *a2;
  if ((*a2 - 2) < 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
    ++*(_QWORD *)(v7 - 16);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
    v9 = *(_QWORD *)(v8 - 8) + 3;
LABEL_8:
    *(_QWORD *)(v8 - 8) = v9;
    return;
  }
  if (v2 == 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
    ++*(_QWORD *)(v10 - 16);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
    v9 = *(_QWORD *)(v8 - 8) + 1;
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (int64x2_t *)v3[7];
    v4 = v3[8];
    if ((unint64_t)v5 >= v4)
    {
      v11 = (int64x2_t *)v3[6];
      v12 = v5 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v14 = v4 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(16 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (int64x2_t *)&v16[16 * v12];
      *v17 = vdupq_n_s64(1uLL);
      v6 = v17 + 1;
      if (v5 != v11)
      {
        do
        {
          v17[-1] = v5[-1];
          --v17;
          --v5;
        }
        while (v5 != v11);
        v5 = (int64x2_t *)v3[6];
      }
      v3[6] = v17;
      v3[7] = v6;
      v3[8] = &v16[16 * v15];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = vdupq_n_s64(1uLL);
      v6 = v5 + 1;
    }
    v3[7] = v6;
  }
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void ___ZN18CGPathRandomAccess7addPathEPK6CGPath_block_invoke_5(_QWORD *a1, uint64_t a2)
{
  char **v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  char v35;
  char *v36;
  float64x2_t *v37;
  float64x2_t v38;
  unint64_t v39;
  _OWORD *f64;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  char v84;
  char *v85;
  _OWORD *v86;
  _OWORD *v87;
  unint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  float64x2_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  float64x2_t *v109;
  char *v110;
  char *v111;
  float64x2_t v112;
  char *v113;
  unint64_t v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  _OWORD *v127;
  char *v128;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  _BYTE *v139;
  _BYTE *v140;
  char *v141;
  uint64_t v142;
  char v143;
  char *v144;
  _OWORD *v145;
  _OWORD *v146;
  unint64_t v147;
  _OWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  float64x2_t *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  float64x2_t v169;
  float64x2_t v170;
  void *__p;
  char *v172;
  char *v173;
  char *v174;
  _QWORD *v175;

  v4 = (char **)a1[6];
  switch(*(_DWORD *)a2)
  {
    case 0:
      v5 = v4[1];
      if (v5 != *v4)
      {
        CGPathRandomAccessSubpath::closeIfNeeded((CGPathRandomAccessSubpath *)(v5 - 48));
        v5 = v4[1];
      }
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v5 >= v6)
      {
        v67 = *v4;
        v68 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 4);
        v69 = v68 + 1;
        if (v68 + 1 > 0x555555555555555)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v67) >> 4) > v69)
          v69 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v67) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v67) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v70 = 0x555555555555555;
        else
          v70 = v69;
        v175 = v4 + 2;
        if (v70)
        {
          if (v70 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v71 = (char *)operator new(48 * v70);
        }
        else
        {
          v71 = 0;
        }
        v103 = &v71[48 * v68];
        v104 = &v71[48 * v70];
        *(_OWORD *)v103 = 0u;
        *((_OWORD *)v103 + 1) = 0u;
        *((_OWORD *)v103 + 2) = 0u;
        v7 = v103 + 48;
        v173 = v103 + 48;
        v174 = v104;
        if (v5 == v67)
        {
          v108 = v5;
        }
        else
        {
          v105 = 0;
          do
          {
            v106 = &v103[v105];
            v107 = &v5[v105];
            *((_QWORD *)v106 - 6) = 0;
            *((_QWORD *)v106 - 5) = 0;
            *((_QWORD *)v106 - 4) = 0;
            *((_OWORD *)v106 - 3) = *(_OWORD *)&v5[v105 - 48];
            *((_QWORD *)v106 - 4) = *(_QWORD *)&v5[v105 - 32];
            *((_QWORD *)v107 - 6) = 0;
            *((_QWORD *)v107 - 5) = 0;
            *((_QWORD *)v107 - 4) = 0;
            *((_QWORD *)v106 - 3) = 0;
            *((_QWORD *)v106 - 2) = 0;
            *((_QWORD *)v106 - 1) = 0;
            *(_OWORD *)(v106 - 24) = *(_OWORD *)&v5[v105 - 24];
            *((_QWORD *)v106 - 1) = *(_QWORD *)&v5[v105 - 8];
            *((_QWORD *)v107 - 3) = 0;
            *((_QWORD *)v107 - 2) = 0;
            *((_QWORD *)v107 - 1) = 0;
            v105 -= 48;
          }
          while (&v5[v105] != v67);
          v108 = *v4;
          v5 = v4[1];
          v6 = (unint64_t)v4[2];
          v103 += v105;
          v7 = v173;
          v104 = v174;
        }
        *v4 = v103;
        __p = v108;
        v172 = v108;
        v4[1] = v7;
        v173 = v5;
        v4[2] = v104;
        v174 = (char *)v6;
        std::__split_buffer<CGPathRandomAccessSubpath>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *(_OWORD *)v5 = 0u;
        v7 = v5 + 48;
        v4[1] = v5 + 48;
      }
      v4[1] = v7;
      v130 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48)
                                + 16 * (~a1[7] - 0x5555555555555555 * ((unint64_t)(v7 - *v4) >> 4)));
      v131 = *v130;
      v132 = v130[1];
      v133 = *((_QWORD *)v7 - 6);
      if (v131 <= (*((_QWORD *)v7 - 4) - v133) >> 4)
        goto LABEL_124;
      if (v131 >> 60)
        goto LABEL_165;
      v134 = *((_QWORD *)v7 - 5) - v133;
      v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v131);
      v136 = &v135[v134];
      v138 = &v135[16 * v137];
      v140 = (_BYTE *)*((_QWORD *)v7 - 6);
      v139 = (_BYTE *)*((_QWORD *)v7 - 5);
      v141 = v136;
      if (v139 != v140)
      {
        do
        {
          v142 = *((_QWORD *)v139 - 2);
          v139 -= 16;
          v143 = v139[8];
          *((_QWORD *)v141 - 2) = v142;
          v141 -= 16;
          v141[8] = v143;
        }
        while (v139 != v140);
        v139 = (_BYTE *)*((_QWORD *)v7 - 6);
      }
      *((_QWORD *)v7 - 6) = v141;
      *((_QWORD *)v7 - 5) = v136;
      *((_QWORD *)v7 - 4) = v138;
      if (v139)
        operator delete(v139);
LABEL_124:
      std::vector<CGPoint>::reserve((void **)v4[1] - 3, v132);
      *(_OWORD *)(*(_QWORD *)(a1[5] + 8) + 48) = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v144 = v4[1];
      v145 = (_OWORD *)(*(_QWORD *)(a1[5] + 8) + 48);
      v146 = (_OWORD *)*((_QWORD *)v144 - 2);
      v147 = *((_QWORD *)v144 - 1);
      if ((unint64_t)v146 < v147)
      {
        *v146 = *v145;
        v148 = v146 + 1;
LABEL_156:
        *((_QWORD *)v144 - 2) = v148;
        return;
      }
      v149 = *((_QWORD *)v144 - 3);
      v150 = ((uint64_t)v146 - v149) >> 4;
      v151 = v150 + 1;
      if (!((unint64_t)(v150 + 1) >> 60))
      {
        v152 = v147 - v149;
        if (v152 >> 3 > v151)
          v151 = v152 >> 3;
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0)
          v153 = 0xFFFFFFFFFFFFFFFLL;
        else
          v153 = v151;
        if (v153)
          v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v144 - 8), v153);
        else
          v154 = 0;
        v164 = &v154[16 * v150];
        v165 = &v154[16 * v153];
        *(_OWORD *)v164 = *v145;
        v148 = v164 + 16;
        v167 = (char *)*((_QWORD *)v144 - 3);
        v166 = (char *)*((_QWORD *)v144 - 2);
        if (v166 != v167)
        {
          do
          {
            *((_OWORD *)v164 - 1) = *((_OWORD *)v166 - 1);
            v164 -= 16;
            v166 -= 16;
          }
          while (v166 != v167);
          v166 = (char *)*((_QWORD *)v144 - 3);
        }
        *((_QWORD *)v144 - 3) = v164;
        *((_QWORD *)v144 - 2) = v148;
        *((_QWORD *)v144 - 1) = v165;
        if (v166)
          operator delete(v166);
        goto LABEL_156;
      }
      goto LABEL_166;
    case 1:
      v18 = v4[1];
      v19 = ((uint64_t)(*((_QWORD *)v18 - 2) - *((_QWORD *)v18 - 3)) >> 4) - 1;
      v21 = *((_QWORD *)v18 - 5);
      v20 = *((_QWORD *)v18 - 4);
      if (v21 < v20)
      {
        *(_QWORD *)v21 = v19;
        *(_BYTE *)(v21 + 8) = 0;
        v22 = (char *)(v21 + 16);
        goto LABEL_65;
      }
      v72 = *((_QWORD *)v18 - 6);
      v73 = (uint64_t)(v21 - v72) >> 4;
      v74 = v73 + 1;
      if (!((unint64_t)(v73 + 1) >> 60))
      {
        v75 = v20 - v72;
        if (v75 >> 3 > v74)
          v74 = v75 >> 3;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
          v76 = 0xFFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v76);
        v78 = &v77[16 * v73];
        v80 = &v77[16 * v79];
        *(_QWORD *)v78 = v19;
        v78[8] = 0;
        v22 = v78 + 16;
        v82 = (_BYTE *)*((_QWORD *)v18 - 6);
        v81 = (_BYTE *)*((_QWORD *)v18 - 5);
        if (v81 != v82)
        {
          do
          {
            v83 = *((_QWORD *)v81 - 2);
            v81 -= 16;
            v84 = v81[8];
            *((_QWORD *)v78 - 2) = v83;
            v78 -= 16;
            v78[8] = v84;
          }
          while (v81 != v82);
          v81 = (_BYTE *)*((_QWORD *)v18 - 6);
        }
        *((_QWORD *)v18 - 6) = v78;
        *((_QWORD *)v18 - 5) = v22;
        *((_QWORD *)v18 - 4) = v80;
        if (v81)
          operator delete(v81);
LABEL_65:
        *((_QWORD *)v18 - 5) = v22;
        v85 = v4[1];
        v86 = *(_OWORD **)(a2 + 8);
        v87 = (_OWORD *)*((_QWORD *)v85 - 2);
        v88 = *((_QWORD *)v85 - 1);
        if ((unint64_t)v87 >= v88)
        {
          v89 = (void **)(v85 - 24);
          v90 = *((_QWORD *)v85 - 3);
          v91 = ((uint64_t)v87 - v90) >> 4;
          v92 = v91 + 1;
          if (!((unint64_t)(v91 + 1) >> 60))
          {
            v93 = v88 - v90;
            if (v93 >> 3 > v92)
              v92 = v93 >> 3;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
              v94 = 0xFFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
              v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v85 - 8), v94);
            else
              v95 = 0;
            v125 = &v95[16 * v91];
            v126 = &v95[16 * v94];
            *(_OWORD *)v125 = *v86;
            v127 = v125 + 16;
            v129 = (char *)*((_QWORD *)v85 - 3);
            v128 = (char *)*((_QWORD *)v85 - 2);
            if (v128 == v129)
              goto LABEL_161;
            do
            {
              *((_OWORD *)v125 - 1) = *((_OWORD *)v128 - 1);
              v125 -= 16;
              v128 -= 16;
            }
            while (v128 != v129);
LABEL_160:
            v128 = (char *)*v89;
LABEL_161:
            *((_QWORD *)v85 - 3) = v125;
            *((_QWORD *)v85 - 2) = v127;
            *((_QWORD *)v85 - 1) = v126;
            if (v128)
              operator delete(v128);
            goto LABEL_163;
          }
          goto LABEL_166;
        }
        goto LABEL_141;
      }
      goto LABEL_165;
    case 2:
      v8 = v4[1];
      v9 = ((uint64_t)(*((_QWORD *)v8 - 2) - *((_QWORD *)v8 - 3)) >> 4) - 1;
      v11 = *((_QWORD *)v8 - 5);
      v10 = *((_QWORD *)v8 - 4);
      if (v11 < v10)
      {
        *(_QWORD *)v11 = v9;
        *(_BYTE *)(v11 + 8) = 1;
        v12 = (char *)(v11 + 16);
        goto LABEL_23;
      }
      v23 = *((_QWORD *)v8 - 6);
      v24 = (uint64_t)(v11 - v23) >> 4;
      v25 = v24 + 1;
      if (!((unint64_t)(v24 + 1) >> 60))
      {
        v26 = v10 - v23;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v27);
        v29 = &v28[16 * v24];
        v31 = &v28[16 * v30];
        *(_QWORD *)v29 = v9;
        v29[8] = 1;
        v12 = v29 + 16;
        v33 = (_BYTE *)*((_QWORD *)v8 - 6);
        v32 = (_BYTE *)*((_QWORD *)v8 - 5);
        if (v32 != v33)
        {
          do
          {
            v34 = *((_QWORD *)v32 - 2);
            v32 -= 16;
            v35 = v32[8];
            *((_QWORD *)v29 - 2) = v34;
            v29 -= 16;
            v29[8] = v35;
          }
          while (v32 != v33);
          v32 = (_BYTE *)*((_QWORD *)v8 - 6);
        }
        *((_QWORD *)v8 - 6) = v29;
        *((_QWORD *)v8 - 5) = v12;
        *((_QWORD *)v8 - 4) = v31;
        if (v32)
          operator delete(v32);
LABEL_23:
        *((_QWORD *)v8 - 5) = v12;
        v36 = v4[1];
        v37 = (float64x2_t *)*((_QWORD *)v36 - 2);
        v38 = vmlaq_f64(v37[-1], (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), vsubq_f64(*(float64x2_t *)*(_QWORD *)(a2 + 8), v37[-1]));
        v39 = *((_QWORD *)v36 - 1);
        if ((unint64_t)v37 >= v39)
        {
          v96 = (float64x2_t *)*((_QWORD *)v36 - 3);
          v97 = v37 - v96;
          v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 60)
            goto LABEL_167;
          v99 = v39 - (_QWORD)v96;
          if (v99 >> 3 > v98)
            v98 = v99 >> 3;
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0)
            v100 = 0xFFFFFFFFFFFFFFFLL;
          else
            v100 = v98;
          if (v100)
          {
            v169 = v38;
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v36 - 8), v100);
            v38 = v169;
            v102 = v101;
            v96 = (float64x2_t *)*((_QWORD *)v36 - 3);
            v37 = (float64x2_t *)*((_QWORD *)v36 - 2);
          }
          else
          {
            v102 = 0;
          }
          v109 = (float64x2_t *)&v102[16 * v97];
          v110 = &v102[16 * v100];
          *v109 = v38;
          f64 = (_OWORD *)v109[1].f64;
          if (v37 != v96)
          {
            do
            {
              v109[-1] = v37[-1];
              --v109;
              --v37;
            }
            while (v37 != v96);
            v96 = (float64x2_t *)*((_QWORD *)v36 - 3);
          }
          *((_QWORD *)v36 - 3) = v109;
          *((_QWORD *)v36 - 2) = f64;
          *((_QWORD *)v36 - 1) = v110;
          if (v96)
            operator delete(v96);
        }
        else
        {
          *v37 = v38;
          f64 = (_OWORD *)v37[1].f64;
        }
        *((_QWORD *)v36 - 2) = f64;
        v111 = v4[1];
        v112 = vmlaq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 8) + 16), (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), vsubq_f64(*(float64x2_t *)*(_QWORD *)(a2 + 8), *(float64x2_t *)(*(_QWORD *)(a2 + 8) + 16)));
        v113 = (char *)*((_QWORD *)v111 - 2);
        v114 = *((_QWORD *)v111 - 1);
        if ((unint64_t)v113 < v114)
        {
          *(float64x2_t *)v113 = v112;
          v115 = v113 + 16;
          goto LABEL_140;
        }
        v116 = (char *)*((_QWORD *)v111 - 3);
        v117 = (v113 - v116) >> 4;
        v118 = v117 + 1;
        if (!((unint64_t)(v117 + 1) >> 60))
        {
          v119 = v114 - (_QWORD)v116;
          if (v119 >> 3 > v118)
            v118 = v119 >> 3;
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
            v120 = 0xFFFFFFFFFFFFFFFLL;
          else
            v120 = v118;
          if (v120)
          {
            v170 = v112;
            v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v111 - 8), v120);
            v112 = v170;
            v122 = v121;
            v116 = (char *)*((_QWORD *)v111 - 3);
            v113 = (char *)*((_QWORD *)v111 - 2);
          }
          else
          {
            v122 = 0;
          }
          v155 = (float64x2_t *)&v122[16 * v117];
          v156 = &v122[16 * v120];
          *v155 = v112;
          v115 = (_OWORD *)v155[1].f64;
          if (v113 != v116)
          {
            do
            {
              v155[-1] = *((float64x2_t *)v113 - 1);
              --v155;
              v113 -= 16;
            }
            while (v113 != v116);
            v116 = (char *)*((_QWORD *)v111 - 3);
          }
          *((_QWORD *)v111 - 3) = v155;
          *((_QWORD *)v111 - 2) = v115;
          *((_QWORD *)v111 - 1) = v156;
          if (v116)
            operator delete(v116);
LABEL_140:
          *((_QWORD *)v111 - 2) = v115;
          v85 = v4[1];
          v86 = (_OWORD *)(*(_QWORD *)(a2 + 8) + 16);
          v87 = (_OWORD *)*((_QWORD *)v85 - 2);
          v157 = *((_QWORD *)v85 - 1);
          if ((unint64_t)v87 >= v157)
          {
            v89 = (void **)(v85 - 24);
            v158 = *((_QWORD *)v85 - 3);
            v159 = ((uint64_t)v87 - v158) >> 4;
            v160 = v159 + 1;
            if (!((unint64_t)(v159 + 1) >> 60))
            {
              v161 = v157 - v158;
              if (v161 >> 3 > v160)
                v160 = v161 >> 3;
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0)
                v162 = 0xFFFFFFFFFFFFFFFLL;
              else
                v162 = v160;
              if (v162)
                v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v85 - 8), v162);
              else
                v163 = 0;
              v125 = &v163[16 * v159];
              v126 = &v163[16 * v162];
              *(_OWORD *)v125 = *v86;
              v127 = v125 + 16;
              v168 = (char *)*((_QWORD *)v85 - 3);
              v128 = (char *)*((_QWORD *)v85 - 2);
              if (v128 == v168)
                goto LABEL_161;
              do
              {
                *((_OWORD *)v125 - 1) = *((_OWORD *)v128 - 1);
                v125 -= 16;
                v128 -= 16;
              }
              while (v128 != v168);
              goto LABEL_160;
            }
LABEL_166:
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          }
LABEL_141:
          *v87 = *v86;
          v127 = v87 + 1;
LABEL_163:
          *((_QWORD *)v85 - 2) = v127;
          return;
        }
LABEL_167:
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      }
      goto LABEL_165;
    case 3:
      v13 = v4[1];
      v14 = ((uint64_t)(*((_QWORD *)v13 - 2) - *((_QWORD *)v13 - 3)) >> 4) - 1;
      v16 = *((_QWORD *)v13 - 5);
      v15 = *((_QWORD *)v13 - 4);
      if (v16 >= v15)
      {
        v41 = *((_QWORD *)v13 - 6);
        v42 = (uint64_t)(v16 - v41) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
LABEL_165:
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v44 = v15 - v41;
        if (v44 >> 3 > v43)
          v43 = v44 >> 3;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v45);
        v47 = &v46[16 * v42];
        v49 = &v46[16 * v48];
        *(_QWORD *)v47 = v14;
        v47[8] = 1;
        v17 = v47 + 16;
        v51 = (_BYTE *)*((_QWORD *)v13 - 6);
        v50 = (_BYTE *)*((_QWORD *)v13 - 5);
        if (v50 != v51)
        {
          do
          {
            v52 = *((_QWORD *)v50 - 2);
            v50 -= 16;
            v53 = v50[8];
            *((_QWORD *)v47 - 2) = v52;
            v47 -= 16;
            v47[8] = v53;
          }
          while (v50 != v51);
          v50 = (_BYTE *)*((_QWORD *)v13 - 6);
        }
        *((_QWORD *)v13 - 6) = v47;
        *((_QWORD *)v13 - 5) = v17;
        *((_QWORD *)v13 - 4) = v49;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v16 = v14;
        *(_BYTE *)(v16 + 8) = 1;
        v17 = (char *)(v16 + 16);
      }
      *((_QWORD *)v13 - 5) = v17;
      v54 = v4[1];
      v55 = (char *)*((_QWORD *)v54 - 2);
      v56 = *(char **)(a2 + 8);
      v57 = (uint64_t)(v54 - 8);
      v58 = *((_QWORD *)v54 - 1);
      if (v58 - (uint64_t)v55 >= 48)
      {
        memmove(*((void **)v54 - 2), v56, 0x30uLL);
        *((_QWORD *)v54 - 2) = v55 + 48;
      }
      else
      {
        v61 = *((_QWORD *)v54 - 3);
        v60 = (void **)(v54 - 24);
        v59 = v61;
        v62 = (uint64_t)&v55[-v61] >> 4;
        if ((unint64_t)(v62 + 3) >> 60)
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        v63 = v58 - v59;
        v64 = v63 >> 3;
        if (v63 >> 3 <= (unint64_t)(v62 + 3))
          v64 = v62 + 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v65 = 0xFFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        v175 = (_QWORD *)v57;
        if (v65)
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v57, v65);
        else
          v66 = 0;
        v123 = 0;
        v124 = &v66[16 * v62];
        __p = v66;
        v172 = v124;
        v174 = &v66[16 * v65];
        do
        {
          *(_OWORD *)&v124[v123] = *(_OWORD *)&v56[v123];
          v123 += 16;
        }
        while (v123 != 48);
        v173 = v124 + 48;
        std::vector<CGPoint>::__swap_out_circular_buffer(v60, (uint64_t)&__p, v55);
        if (v173 != v172)
          v173 += (v172 - v173 + 15) & 0xFFFFFFFFFFFFFFF0;
        if (__p)
          operator delete(__p);
      }
      return;
    default:
      return;
  }
}

void sub_1BE372120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CGPathRandomAccessSubpath::closeIfNeeded(CGPathRandomAccessSubpath *this)
{
  unint64_t v1;
  uint64_t v2;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;

  v1 = *((_QWORD *)this + 1);
  v2 = v1 - *(_QWORD *)this;
  if ((unint64_t)v2 >= 0x20)
  {
    v4 = (double *)*((_QWORD *)this + 3);
    v5 = *((_QWORD *)this + 4);
    v6 = ((v5 - (uint64_t)v4) >> 4) - 1;
    if (*(_QWORD *)(v1 - 16) != v6 && (*(double *)(v5 - 16) != *v4 || *(double *)(v5 - 8) != v4[1]))
    {
      v8 = *((_QWORD *)this + 2);
      if (v1 >= v8)
      {
        v10 = v2 >> 4;
        v11 = (v2 >> 4) + 1;
        if (v11 >> 60)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v12 = v8 - *(_QWORD *)this;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v13);
        v15 = &v14[16 * v10];
        v17 = &v14[16 * v16];
        *(_QWORD *)v15 = v6;
        v15[8] = 0;
        v9 = v15 + 16;
        v19 = *(_BYTE **)this;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if (v18 != *(_BYTE **)this)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 2);
            v18 -= 16;
            v21 = v18[8];
            *((_QWORD *)v15 - 2) = v20;
            v15 -= 16;
            v15[8] = v21;
          }
          while (v18 != v19);
          v18 = *(_BYTE **)this;
        }
        *(_QWORD *)this = v15;
        *((_QWORD *)this + 1) = v9;
        *((_QWORD *)this + 2) = v17;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v1 = v6;
        *(_BYTE *)(v1 + 8) = 0;
        v9 = (char *)(v1 + 16);
      }
      *((_QWORD *)this + 1) = v9;
    }
  }
}

void std::__destroy_at[abi:ne180100]<CGPathRandomAccessSubpath,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<CGPathRandomAccessSubpath>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<CGPathRandomAccessSubpath,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void *std::vector<CGPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<CGPathRandomAccessSubpath,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZNK25CGPathRandomAccessSubpath11clipperPathEdRNSt3__16vectorIN10ClipperLib8IntPointENS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1, double a2, double a3)
{
  double v3;
  int v4;
  int v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  v3 = *(double *)(a1 + 48);
  v4 = (int)(a2 * v3);
  v5 = (int)(a3 * v3);
  v6 = *(void ***)(a1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = v6[1];
  v9 = (unint64_t)v6[2];
  if ((unint64_t)v8 >= v9)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*v6) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*v6) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)(v6 + 2), v14);
    v16 = &v15[24 * v11];
    v18 = &v15[24 * v17];
    *(_QWORD *)v16 = v4;
    *((_QWORD *)v16 + 1) = v5;
    *((_QWORD *)v16 + 2) = *(_QWORD *)(v7 + 48);
    v10 = v16 + 24;
    v20 = (char *)*v6;
    v19 = (char *)v6[1];
    if (v19 != *v6)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v16 - 24) = v21;
        v16 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      v19 = (char *)*v6;
    }
    *v6 = v16;
    v6[1] = v10;
    v6[2] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v8 = v4;
    v8[1] = v5;
    v8[2] = *(_QWORD *)(v7 + 48);
    v10 = v8 + 3;
  }
  v6[1] = v10;
}

void sub_1BE372780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE37282C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE372AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE372B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PKTextInputCanvasController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE372C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE372CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE372DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE372E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE373480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3736BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE37370C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE37378C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3738AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE373A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE373B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE373CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE373E78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3742E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1BE37447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1BE374610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE37471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1BE374884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE37493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE374A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE374BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE374D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE374E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE375030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3750CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE37512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3751DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE375354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE375504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  int v13;

  if (v13)
  {

  }
  _Unwind_Resume(a1);
}

void PKInputSmoother::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v10, a3, a4);
  objc_msgSend(v10, "behavior");
  if (a3 == 1)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "smoothingDescriptor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stylusSmoothing");
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "smoothingDescriptor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "touchSmoothing");
  }
  *(_QWORD *)(a1 + 104) = v9;

}

void sub_1BE375EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void PKInputSmoother::run(PKInputSmoother *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  PKInputSmoother *v4;
  uint64_t v5;
  uint64_t v6;
  PKInputSmoother *v7;
  PKInputSmoother *v8;
  PKInputSmoother *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  double *v47;
  double *v48;
  double *v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double *v65;
  double *v66;
  double *v67;
  BOOL v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  unint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int64_t v94;
  _BYTE *v95;
  _OWORD *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  char *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  double v124;
  int64_t v125;
  double *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  int64_t v133;
  BOOL v134;
  uint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char *v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  unint64_t v159;
  _OWORD *v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  char *v181;
  char *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t *v187;
  double v188;
  double v189;
  void **v190;
  _OWORD __s2[5];
  uint64_t v192;
  _OWORD __s1[5];
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;

  v1 = *((_QWORD *)this + 5);
  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
  v134 = v2 > v1;
  v3 = v2 - v1;
  if (v134)
  {
    v4 = this;
    v5 = *((_QWORD *)this + 14);
    v187 = (uint64_t *)((char *)this + 112);
    if (*((_QWORD *)this + 15) != v5)
      *((_QWORD *)this + 15) = v5;
    if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 16) - v5) >> 3) < 8 * v3)
    {
      if (8 * v3 > 0x492492492492492)
LABEL_139:
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      this = (PKInputSmoother *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKSmoothingPoint>>(8 * v3);
      v8 = (PKInputSmoother *)*((_QWORD *)v4 + 14);
      v7 = (PKInputSmoother *)*((_QWORD *)v4 + 15);
      v9 = this;
      if (v7 != v8)
      {
        do
        {
          v10 = *(_OWORD *)((char *)v7 - 56);
          v11 = *(_OWORD *)((char *)v7 - 40);
          v12 = *(_OWORD *)((char *)v7 - 24);
          *((_QWORD *)v9 - 1) = *((_QWORD *)v7 - 1);
          *(_OWORD *)((char *)v9 - 24) = v12;
          *(_OWORD *)((char *)v9 - 40) = v11;
          *(_OWORD *)((char *)v9 - 56) = v10;
          v9 = (PKInputSmoother *)((char *)v9 - 56);
          v7 = (PKInputSmoother *)((char *)v7 - 56);
        }
        while (v7 != v8);
        v7 = (PKInputSmoother *)*v187;
      }
      *((_QWORD *)v4 + 14) = v9;
      *((_QWORD *)v4 + 15) = this;
      *((_QWORD *)v4 + 16) = (char *)this + 56 * v6;
      if (v7)
        operator delete(v7);
    }
    v13 = *((_QWORD *)v4 + 5);
    if (v13 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)v4 + 7) - *((_QWORD *)v4 + 6)) >> 3) - 1)
    {
      v14 = 88 * v13 - 80;
      v15 = (double *)MEMORY[0x1E0C9D538];
      v188 = 1.0 / *((double *)v4 + 3);
      do
      {
        v16 = 0;
        v17 = v13 + 1;
        do
        {
          v18 = 0;
          v20 = *v15;
          v19 = v15[1];
          v21 = v14;
          do
          {
            if ((uint64_t)(v13 + v18 - 2) > -2)
            {
              v25 = v13 + v18 - 1;
              v27 = *((_QWORD *)v4 + 6);
              v26 = *((_QWORD *)v4 + 7);
              v28 = 0x2E8BA2E8BA2E8BA3 * ((v26 - v27) >> 3);
              v29 = (double *)(v27 + v21);
              v30 = (double *)(v26 - 80);
              v31 = (double *)(v26 - 72);
              v32 = v25 >= v28;
              if (v25 >= v28)
                v24 = v31;
              else
                v24 = v29 + 1;
              if (v32)
                v23 = v30;
              else
                v23 = v29;
            }
            else
            {
              v22 = *((_QWORD *)v4 + 6);
              v23 = (double *)(v22 + 8);
              v24 = (double *)(v22 + 16);
            }
            v33 = *v23;
            v34 = *v24;
            v35 = b((int)v18 - 2, (double)v16 * 0.125);
            v20 = v20 + v35 * v33;
            v19 = v19 + v35 * v34;
            ++v18;
            v21 += 88;
          }
          while (v18 != 4);
          v36 = 0;
          v38 = *v15;
          v37 = v15[1];
          v39 = v14;
          do
          {
            if ((uint64_t)(v13 + v36 - 2) > -2)
            {
              v43 = v13 + v36 - 1;
              v45 = *((_QWORD *)v4 + 6);
              v44 = *((_QWORD *)v4 + 7);
              v46 = 0x2E8BA2E8BA2E8BA3 * ((v44 - v45) >> 3);
              v47 = (double *)(v45 + v39);
              v48 = (double *)(v44 - 80);
              v49 = (double *)(v44 - 72);
              v50 = v43 >= v46;
              if (v43 >= v46)
                v42 = v49;
              else
                v42 = v47 + 1;
              if (v50)
                v41 = v48;
              else
                v41 = v47;
            }
            else
            {
              v40 = *((_QWORD *)v4 + 6);
              v41 = (double *)(v40 + 8);
              v42 = (double *)(v40 + 16);
            }
            v51 = *v41;
            v52 = *v42;
            v53 = b2((int)v36 - 2, (double)v16 * 0.125);
            v38 = v38 + v53 * v51;
            v37 = v37 + v53 * v52;
            ++v36;
            v39 += 88;
          }
          while (v36 != 4);
          v189 = (double)v16 * 0.125;
          v54 = 0;
          v56 = *v15;
          v55 = v15[1];
          v57 = v14;
          do
          {
            if ((uint64_t)(v13 + v54 - 2) > -2)
            {
              v61 = v13 + v54 - 1;
              v63 = *((_QWORD *)v4 + 6);
              v62 = *((_QWORD *)v4 + 7);
              v64 = 0x2E8BA2E8BA2E8BA3 * ((v62 - v63) >> 3);
              v65 = (double *)(v63 + v57);
              v66 = (double *)(v62 - 80);
              v67 = (double *)(v62 - 72);
              v68 = v61 >= v64;
              if (v61 >= v64)
                v60 = v67;
              else
                v60 = v65 + 1;
              if (v68)
                v59 = v66;
              else
                v59 = v65;
            }
            else
            {
              v58 = *((_QWORD *)v4 + 6);
              v59 = (double *)(v58 + 8);
              v60 = (double *)(v58 + 16);
            }
            v69 = *v59;
            v70 = *v60;
            v71 = b3((int)v54 - 2, v189);
            v56 = v56 + v71 * v69;
            v55 = v55 + v71 * v70;
            ++v54;
            v57 += 88;
          }
          while (v54 != 4);
          v72 = pow(v37 * v37 + v38 * v38, 1.5);
          if (v72 <= 0.001)
            v73 = 100.0;
          else
            v73 = fabs((v38 * v55 - v37 * v56) / v72);
          this = (PKInputSmoother *)*((_QWORD *)v4 + 14);
          v74 = *((_QWORD *)v4 + 15);
          v75 = 0.0;
          if ((PKInputSmoother *)v74 != this)
            v75 = sqrt((v19 - *(double *)(v74 - 48)) * (v19 - *(double *)(v74 - 48))+ (v20 - *(double *)(v74 - 56)) * (v20 - *(double *)(v74 - 56)));
          v76 = fmax(v73 * *((double *)v4 + 3), 0.0);
          v77 = *((_QWORD *)v4 + 6);
          v78 = (double *)(v77 + 88 * v13);
          v79 = (double *)(v77 + 88 * v17);
          v80 = v189 * *v79 + *v78 * (1.0 - v189);
          v81 = v189 * v79[3] + v78[3] * (1.0 - v189);
          v82 = v188 * v75;
          v83 = *((_QWORD *)v4 + 16);
          if (v74 >= v83)
          {
            v85 = (uint64_t)(v74 - (_QWORD)this) / 56;
            v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) > 0x492492492492492)
              goto LABEL_139;
            v87 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v83 - (_QWORD)this) >> 3);
            if (2 * v87 > v86)
              v86 = 2 * v87;
            if (v87 >= 0x249249249249249)
              v86 = 0x492492492492492;
            if (v86)
            {
              v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PKSmoothingPoint>>(v86);
              this = (PKInputSmoother *)*((_QWORD *)v4 + 14);
              v74 = *((_QWORD *)v4 + 15);
            }
            else
            {
              v88 = 0;
            }
            v89 = v86 + 56 * v85;
            *(double *)v89 = v20;
            *(double *)(v89 + 8) = v19;
            *(double *)(v89 + 16) = v76;
            *(_QWORD *)(v89 + 24) = 0;
            *(double *)(v89 + 32) = v82;
            *(double *)(v89 + 40) = v80;
            *(double *)(v89 + 48) = v81;
            v90 = v89;
            if ((PKInputSmoother *)v74 != this)
            {
              do
              {
                v91 = *(_OWORD *)(v74 - 56);
                v92 = *(_OWORD *)(v74 - 40);
                v93 = *(_OWORD *)(v74 - 24);
                *(_QWORD *)(v90 - 8) = *(_QWORD *)(v74 - 8);
                *(_OWORD *)(v90 - 24) = v93;
                *(_OWORD *)(v90 - 40) = v92;
                *(_OWORD *)(v90 - 56) = v91;
                v90 -= 56;
                v74 -= 56;
              }
              while ((PKInputSmoother *)v74 != this);
              this = (PKInputSmoother *)*v187;
            }
            v84 = v89 + 56;
            *((_QWORD *)v4 + 14) = v90;
            *((_QWORD *)v4 + 15) = v89 + 56;
            *((_QWORD *)v4 + 16) = v86 + 56 * v88;
            if (this)
              operator delete(this);
          }
          else
          {
            *(double *)v74 = v20;
            *(double *)(v74 + 8) = v19;
            *(double *)(v74 + 16) = v76;
            *(_QWORD *)(v74 + 24) = 0;
            *(double *)(v74 + 32) = v82;
            *(double *)(v74 + 40) = v80;
            v84 = v74 + 56;
            *(double *)(v74 + 48) = v81;
          }
          *((_QWORD *)v4 + 15) = v84;
          ++v16;
        }
        while (v16 != 8);
        v14 += 88;
        ++v13;
      }
      while (v17 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)v4 + 7) - *((_QWORD *)v4 + 6)) >> 3) - 1);
    }
    PKInputSmoother::smoothCurvaturesDistance((uint64_t)this, v187);
    v94 = *((_QWORD *)v4 + 5);
    v190 = (void **)((char *)v4 + 80);
    std::vector<_PKStrokePoint>::resize((uint64_t)v4 + 80, *((_QWORD *)v4 + 9));
    v95 = (_BYTE *)*((_QWORD *)v4 + 10);
    v96 = (_OWORD *)*((_QWORD *)v4 + 11);
    if (v96 == (_OWORD *)v95)
    {
      v97 = *((_QWORD *)v4 + 12);
      v98 = *((_QWORD *)v4 + 6);
      if ((unint64_t)v96 >= v97)
      {
        v103 = ((char *)v96 - v95) / 88;
        v104 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v97 - (_QWORD)v95) >> 3);
        v105 = 2 * v104;
        if (2 * v104 <= v103 + 1)
          v105 = v103 + 1;
        if (v104 >= 0x1745D1745D1745DLL)
          v106 = 0x2E8BA2E8BA2E8BALL;
        else
          v106 = v105;
        v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v4 + 96, v106);
        v108 = &v107[88 * v103];
        v110 = &v107[88 * v109];
        v111 = *(_OWORD *)(v98 + 16);
        *(_OWORD *)v108 = *(_OWORD *)v98;
        *((_OWORD *)v108 + 1) = v111;
        v112 = *(_OWORD *)(v98 + 32);
        v113 = *(_OWORD *)(v98 + 48);
        v114 = *(_OWORD *)(v98 + 64);
        *((_QWORD *)v108 + 10) = *(_QWORD *)(v98 + 80);
        *((_OWORD *)v108 + 3) = v113;
        *((_OWORD *)v108 + 4) = v114;
        *((_OWORD *)v108 + 2) = v112;
        v96 = v108 + 88;
        v116 = (char *)*((_QWORD *)v4 + 10);
        v115 = (char *)*((_QWORD *)v4 + 11);
        if (v115 != v116)
        {
          do
          {
            v117 = *(_OWORD *)(v115 - 88);
            *(_OWORD *)(v108 - 72) = *(_OWORD *)(v115 - 72);
            *(_OWORD *)(v108 - 88) = v117;
            v118 = *(_OWORD *)(v115 - 56);
            v119 = *(_OWORD *)(v115 - 40);
            v120 = *(_OWORD *)(v115 - 24);
            *((_QWORD *)v108 - 1) = *((_QWORD *)v115 - 1);
            *(_OWORD *)(v108 - 24) = v120;
            *(_OWORD *)(v108 - 40) = v119;
            *(_OWORD *)(v108 - 56) = v118;
            v108 -= 88;
            v115 -= 88;
          }
          while (v115 != v116);
          v115 = (char *)*v190;
        }
        *((_QWORD *)v4 + 10) = v108;
        *((_QWORD *)v4 + 11) = v96;
        *((_QWORD *)v4 + 12) = v110;
        if (v115)
          operator delete(v115);
      }
      else
      {
        v99 = *(_OWORD *)(v98 + 16);
        *v96 = *(_OWORD *)v98;
        v96[1] = v99;
        v100 = *(_OWORD *)(v98 + 32);
        v101 = *(_OWORD *)(v98 + 48);
        v102 = *(_OWORD *)(v98 + 64);
        *((_QWORD *)v96 + 10) = *(_QWORD *)(v98 + 80);
        v96[3] = v101;
        v96[4] = v102;
        v96[2] = v100;
        v96 = (_OWORD *)((char *)v96 + 88);
      }
      *((_QWORD *)v4 + 11) = v96;
    }
    v121 = *((_QWORD *)v4 + 14);
    v122 = *((_QWORD *)v4 + 15) - v121;
    if (!v122 || v122 == 56)
    {
      v133 = v94;
    }
    else
    {
      v123 = 0;
      v124 = 0.0;
      v125 = v94;
      do
      {
        v126 = (double *)(v121 + 56 * v123);
        v127 = v126[11];
        v128 = v126[6];
        v129 = v126[13];
        v130 = (v126[12] - v126[5]) * 1000.0;
        if (v130 > 2.0)
          v130 = 2.0;
        if (v127 >= v130)
          v130 = v126[11];
        v131 = v127 * 0.4 + (v126[3] + v126[10]) * 0.5 * v130;
        v132 = v128 - v129;
        if (v128 - v129 < 0.0)
          v132 = -(v128 - v129);
        v124 = v124 + v132 + v131;
        v133 = *((_QWORD *)v4 + 5) + (v123 >> 3);
        v134 = v124 > *((double *)v4 + 13) && v125 < v133;
        if (v134)
        {
          v135 = *((_QWORD *)v4 + 6) + 88 * v133;
          v136 = *((_QWORD *)v4 + 12);
          if ((unint64_t)v96 >= v136)
          {
            v141 = 0x2E8BA2E8BA2E8BA3 * (((char *)v96 - (_BYTE *)*v190) >> 3);
            v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) > 0x2E8BA2E8BA2E8BALL)
              goto LABEL_140;
            v143 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v136 - (_QWORD)*v190) >> 3);
            if (2 * v143 > v142)
              v142 = 2 * v143;
            if (v143 >= 0x1745D1745D1745DLL)
              v144 = 0x2E8BA2E8BA2E8BALL;
            else
              v144 = v142;
            if (v144)
              v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v4 + 96, v144);
            else
              v145 = 0;
            v146 = &v145[88 * v141];
            v147 = *(_OWORD *)(v135 + 16);
            *(_OWORD *)v146 = *(_OWORD *)v135;
            *((_OWORD *)v146 + 1) = v147;
            v148 = *(_OWORD *)(v135 + 32);
            v149 = *(_OWORD *)(v135 + 48);
            v150 = *(_OWORD *)(v135 + 64);
            *((_QWORD *)v146 + 10) = *(_QWORD *)(v135 + 80);
            *((_OWORD *)v146 + 3) = v149;
            *((_OWORD *)v146 + 4) = v150;
            *((_OWORD *)v146 + 2) = v148;
            v152 = (char *)*((_QWORD *)v4 + 10);
            v151 = (char *)*((_QWORD *)v4 + 11);
            v153 = v146;
            if (v151 != v152)
            {
              do
              {
                v154 = *(_OWORD *)(v151 - 88);
                *(_OWORD *)(v153 - 72) = *(_OWORD *)(v151 - 72);
                *(_OWORD *)(v153 - 88) = v154;
                v155 = *(_OWORD *)(v151 - 56);
                v156 = *(_OWORD *)(v151 - 40);
                v157 = *(_OWORD *)(v151 - 24);
                *((_QWORD *)v153 - 1) = *((_QWORD *)v151 - 1);
                *(_OWORD *)(v153 - 24) = v157;
                *(_OWORD *)(v153 - 40) = v156;
                *(_OWORD *)(v153 - 56) = v155;
                v153 -= 88;
                v151 -= 88;
              }
              while (v151 != v152);
              v151 = (char *)*v190;
            }
            v96 = v146 + 88;
            *((_QWORD *)v4 + 10) = v153;
            *((_QWORD *)v4 + 11) = v146 + 88;
            *((_QWORD *)v4 + 12) = &v145[88 * v144];
            if (v151)
              operator delete(v151);
          }
          else
          {
            v137 = *(_OWORD *)(v135 + 16);
            *v96 = *(_OWORD *)v135;
            v96[1] = v137;
            v138 = *(_OWORD *)(v135 + 32);
            v139 = *(_OWORD *)(v135 + 48);
            v140 = *(_OWORD *)(v135 + 64);
            *((_QWORD *)v96 + 10) = *(_QWORD *)(v135 + 80);
            v96[3] = v139;
            v96[4] = v140;
            v96[2] = v138;
            v96 = (_OWORD *)((char *)v96 + 88);
          }
          *((_QWORD *)v4 + 11) = v96;
          v124 = 0.0;
          if (v133 < *((_QWORD *)v4 + 4))
          {
            *((_QWORD *)v4 + 9) = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v96 - *((_QWORD *)v4 + 10)) >> 3);
            v94 = v133;
          }
        }
        else
        {
          v133 = v125;
        }
        ++v123;
        v121 = *((_QWORD *)v4 + 14);
        v125 = v133;
      }
      while (v123 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v4 + 15) - v121) >> 3) - 1);
    }
    *((_QWORD *)v4 + 5) = v94;
    v158 = *((_QWORD *)v4 + 7);
    v159 = 0x2E8BA2E8BA2E8BA3 * ((v158 - *((_QWORD *)v4 + 6)) >> 3);
    if (v133 + 1 < v159)
    {
      v160 = (_OWORD *)(v158 - 88);
      v161 = *(_OWORD *)(v158 - 40);
      v197 = *(_OWORD *)(v158 - 56);
      v198 = v161;
      v199 = *(_OWORD *)(v158 - 24);
      v200 = *(_QWORD *)(v158 - 8);
      v162 = *(_OWORD *)(v158 - 72);
      v195 = *(_OWORD *)(v158 - 88);
      v196 = v162;
      v163 = *v190;
      v164 = (char *)v96 - (_BYTE *)*v190;
      if (v96 == *v190)
        goto LABEL_119;
      v165 = *(_OWORD *)((char *)v96 - 72);
      __s1[0] = *(_OWORD *)((char *)v96 - 88);
      __s1[1] = v165;
      v166 = *(_OWORD *)((char *)v96 - 56);
      v167 = *(_OWORD *)((char *)v96 - 40);
      v168 = *(_OWORD *)((char *)v96 - 24);
      v194 = *((_QWORD *)v96 - 1);
      __s1[3] = v167;
      __s1[4] = v168;
      __s1[2] = v166;
      v169 = *(_OWORD *)(v158 - 40);
      __s2[2] = *(_OWORD *)(v158 - 56);
      __s2[3] = v169;
      __s2[4] = *(_OWORD *)(v158 - 24);
      v192 = *(_QWORD *)(v158 - 8);
      v170 = *(_OWORD *)(v158 - 72);
      __s2[0] = *v160;
      __s2[1] = v170;
      if (memcmp(__s1, __s2, 0x58uLL))
      {
LABEL_119:
        v171 = *((_QWORD *)v4 + 12);
        if ((unint64_t)v96 >= v171)
        {
          v172 = 0x2E8BA2E8BA2E8BA3 * (v164 >> 3) + 1;
          if (v172 > 0x2E8BA2E8BA2E8BALL)
LABEL_140:
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v173 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v171 - (_QWORD)v163) >> 3);
          if (2 * v173 > v172)
            v172 = 2 * v173;
          if (v173 >= 0x1745D1745D1745DLL)
            v174 = 0x2E8BA2E8BA2E8BALL;
          else
            v174 = v172;
          if (v174)
            v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)v4 + 96, v174);
          else
            v175 = 0;
          v176 = &v175[8 * (v164 >> 3)];
          v177 = &v175[88 * v174];
          v178 = v196;
          *(_OWORD *)v176 = v195;
          *((_OWORD *)v176 + 1) = v178;
          *((_QWORD *)v176 + 10) = v200;
          v179 = v199;
          v180 = v197;
          *((_OWORD *)v176 + 3) = v198;
          *((_OWORD *)v176 + 4) = v179;
          *((_OWORD *)v176 + 2) = v180;
          v96 = v176 + 88;
          v182 = (char *)*((_QWORD *)v4 + 10);
          v181 = (char *)*((_QWORD *)v4 + 11);
          if (v181 != v182)
          {
            do
            {
              v183 = *(_OWORD *)(v181 - 88);
              *(_OWORD *)(v176 - 72) = *(_OWORD *)(v181 - 72);
              *(_OWORD *)(v176 - 88) = v183;
              v184 = *(_OWORD *)(v181 - 56);
              v185 = *(_OWORD *)(v181 - 40);
              v186 = *(_OWORD *)(v181 - 24);
              *((_QWORD *)v176 - 1) = *((_QWORD *)v181 - 1);
              *(_OWORD *)(v176 - 24) = v186;
              *(_OWORD *)(v176 - 40) = v185;
              *(_OWORD *)(v176 - 56) = v184;
              v176 -= 88;
              v181 -= 88;
            }
            while (v181 != v182);
            v181 = (char *)*v190;
          }
          *((_QWORD *)v4 + 10) = v176;
          *((_QWORD *)v4 + 11) = v96;
          *((_QWORD *)v4 + 12) = v177;
          if (v181)
            operator delete(v181);
        }
        else
        {
          memmove(v96, v160, 0x58uLL);
          v96 = (_OWORD *)((char *)v96 + 88);
        }
        *((_QWORD *)v4 + 11) = v96;
        v159 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)v4 + 7) - *((_QWORD *)v4 + 6)) >> 3);
      }
      if (*((_QWORD *)v4 + 4) >= v159)
        *((_QWORD *)v4 + 9) = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v96 - *((_QWORD *)v4 + 10)) >> 3);
    }
  }
}

void PKInputSmoother::smoothCurvaturesDistance(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if (v3)
  {
    v4 = 0;
    v5 = v3 / 56;
    v6 = v3 / 56 != 0;
    v7 = v3 / 56 - 1;
    if (v7 == 0 || !v6)
      v5 = 1;
    v8 = v2 + 88;
    do
    {
      v9 = v4 - 1;
      if (!v4)
        v9 = 0;
      if (v4 >= 2)
      {
        v10 = (double *)(v8 - 56 * (v4 != 0));
        v11 = 0.0;
        do
        {
          v12 = v9--;
          if (v12 < 2)
            break;
          v13 = *v10;
          v10 -= 7;
          v11 = v11 + v13;
        }
        while (v11 < 0.85);
      }
      if (v4 < v7)
        v14 = v4 + 1;
      else
        v14 = v7;
      if (v14 < v7)
      {
        v15 = (double *)(v2 + 32 + 56 * v14);
        v16 = 0.0;
        do
        {
          if (++v14 >= v7)
            break;
          v17 = *v15;
          v15 += 7;
          v16 = v16 + v17;
        }
        while (v16 < 0.85);
      }
      v18 = 0.0;
      if (v9 <= (uint64_t)v14)
      {
        v19 = v14 - v9 + 1;
        v20 = (double *)(v2 + 16 + 56 * v9);
        do
        {
          v21 = *v20;
          v20 += 7;
          v22 = v21;
          if (v18 < v21)
            v18 = v22;
          --v19;
        }
        while (v19);
      }
      *(double *)(v2 + 56 * v4 + 24) = v18;
      v8 += 56;
      ++v4;
    }
    while (v4 != v5);
  }
}

uint64_t PKInputSmoother::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  int v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 136));
  v7 = objc_msgSend(WeakRetained, "isSnappedToRuler");

  if (v7)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3);
  else
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex((_QWORD *)a1, a2, a3);
}

void sub_1BE376C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKSmoothingPoint>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

id PKPencilSqueezeAnalyticsLog()
{
  if (PKPencilSqueezeAnalyticsLog_onceToken != -1)
    dispatch_once(&PKPencilSqueezeAnalyticsLog_onceToken, &__block_literal_global_43);
  return (id)PKPencilSqueezeAnalyticsLog_log;
}

void sub_1BE3785F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

double std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = 48271 * (*a1 % 0xADC8);
  v2 = 3399 * (*a1 / 0xADC8);
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    v5 = 0;
  else
    v5 = 0x7FFFFFFF;
  v6 = v5 + v4;
  v7 = v6 - 1;
  v8 = v6 / 0xADC8;
  v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  v3 = v9 >= v8;
  v10 = v9 - v8;
  if (v3)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

void ClipperLib::PolyTree::Clear(ClipperLib::PolyTree *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  v4 = (char *)this + 80;
  if (v3 != v2)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v2 + 8 * v5);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v2 = *((_QWORD *)this + 10);
        v3 = *((_QWORD *)this + 11);
      }
      ++v5;
    }
    while (v5 < (v3 - v2) >> 3);
  }
  std::vector<ClipperLib::PolyNode *>::resize((uint64_t)v4, 0);
  std::vector<ClipperLib::PolyNode *>::resize((uint64_t)this + 32, 0);
}

void std::vector<ClipperLib::PolyNode *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<ClipperLib::PolyNode *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t ClipperLib::PolyTree::GetFirst(ClipperLib::PolyTree *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1 == *((_QWORD *)this + 5))
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t ClipperLib::PolyTree::Total(ClipperLib::PolyTree *this)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)*((_QWORD *)this + 10);
  result = (*((_QWORD *)this + 11) - (_QWORD)v2) >> 3;
  if ((int)result >= 1)
    return result - (**((_QWORD **)this + 4) != *v2);
  return result;
}

double ClipperLib::PolyNode::PolyNode(ClipperLib::PolyNode *this)
{
  double result;

  *(_QWORD *)this = &unk_1E77745C0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 53) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &unk_1E77745C0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 53) = 0u;
  return result;
}

uint64_t ClipperLib::PolyNode::ChildCount(ClipperLib::PolyNode *this)
{
  return (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3;
}

void ClipperLib::PolyNode::AddChild(ClipperLib::PolyNode *this, ClipperLib::PolyNode *a2)
{
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = *((_QWORD *)this + 4);
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = (void **)((char *)this + 32);
  v7 = (uint64_t)v6 - v4;
  v8 = (char *)this + 32;
  v11 = *((_QWORD *)v8 + 2);
  v9 = (uint64_t)(v8 + 16);
  v10 = v11;
  if ((unint64_t)v6 >= v11)
  {
    v13 = (v7 >> 3) + 1;
    if (v13 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v14 = v10 - v4;
    v15 = v14 >> 2;
    if (v14 >> 2 <= v13)
      v15 = (v7 >> 3) + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v16);
    else
      v17 = 0;
    v18 = &v17[8 * (v7 >> 3)];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = a2;
    v12 = v18 + 8;
    v21 = (char *)*((_QWORD *)this + 4);
    v20 = (char *)*((_QWORD *)this + 5);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)*v5;
    }
    *((_QWORD *)this + 4) = v18;
    *((_QWORD *)this + 5) = v12;
    *((_QWORD *)this + 6) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v6 = a2;
    v12 = v6 + 1;
  }
  *((_QWORD *)this + 5) = v12;
  *((_QWORD *)a2 + 7) = this;
  *((_DWORD *)a2 + 16) = (unint64_t)v7 >> 3;
}

uint64_t ClipperLib::PolyNode::GetNext(ClipperLib::PolyNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 4);
  if (v1 == *((_QWORD *)this + 5))
  {
    do
    {
      v4 = *((_QWORD *)this + 7);
      if (!v4)
        return 0;
      v2 = *((unsigned int *)this + 16);
      v3 = *(_QWORD *)(v4 + 32);
      this = (ClipperLib::PolyNode *)*((_QWORD *)this + 7);
    }
    while (((*(_QWORD *)(v4 + 40) - v3) >> 3) - 1 == v2);
    v1 = v3 + 8 * (v2 + 1);
  }
  return *(_QWORD *)v1;
}

uint64_t ClipperLib::PolyNode::GetNextSiblingUp(ClipperLib::PolyNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  while (1)
  {
    v1 = *((_QWORD *)this + 7);
    if (!v1)
      break;
    v2 = *((unsigned int *)this + 16);
    v3 = *(_QWORD *)(v1 + 32);
    this = (ClipperLib::PolyNode *)*((_QWORD *)this + 7);
    if (((*(_QWORD *)(v1 + 40) - v3) >> 3) - 1 != v2)
      return *(_QWORD *)(v3 + 8 * (v2 + 1));
  }
  return 0;
}

uint64_t ClipperLib::PolyNode::IsHole(ClipperLib::PolyNode *this)
{
  int v1;
  char v2;

  v1 = 1;
  do
  {
    v2 = v1;
    this = (ClipperLib::PolyNode *)*((_QWORD *)this + 7);
    v1 ^= 1u;
  }
  while (this);
  return v2 & 1;
}

uint64_t ClipperLib::PolyNode::IsOpen(ClipperLib::PolyNode *this)
{
  return *((unsigned __int8 *)this + 68);
}

unint64_t ClipperLib::Int128Mul@<X0>(unint64_t this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if ((this & 0x8000000000000000) == 0)
    v3 = this;
  else
    v3 = -(uint64_t)this;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  v5 = v4 * (unint64_t)v3;
  v6 = ((HIDWORD(v4) * (unint64_t)v3 + v4 * (unint64_t)HIDWORD(v3)) >> 32)
     + HIDWORD(v4) * (unint64_t)HIDWORD(v3);
  v7 = v4 * v3;
  *a3 = v7;
  a3[1] = v6;
  if (v7 < v5)
    a3[1] = ++v6;
  if (this >> 63 != (unint64_t)a2 >> 63)
  {
    v8 = -(uint64_t)v6;
    if (v7)
      v8 = ~v6;
    *a3 = -(uint64_t)v7;
    a3[1] = v8;
  }
  return this;
}

BOOL ClipperLib::Orientation(uint64_t *a1)
{
  return ClipperLib::Area(a1) >= 0.0;
}

double ClipperLib::Area(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  double result;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;

  v1 = *a1;
  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  result = 0.0;
  if ((int)v2 >= 3)
  {
    v4 = 0;
    v5 = v2 - 1;
    v6 = (uint64_t *)(v1 + 8);
    do
    {
      v7 = (uint64_t *)(v1 + 24 * v5);
      v8 = (double)*v7 + (double)*(v6 - 1);
      v9 = *v6;
      v6 += 3;
      result = result + v8 * ((double)v7[1] - (double)v9);
      v5 = v4++;
    }
    while (-1431655765 * ((a1[1] - *a1) >> 3) != v4);
    return result * -0.5;
  }
  return result;
}

double ClipperLib::Area(_QWORD *a1)
{
  double result;
  _QWORD *v2;

  result = 0.0;
  if (a1)
  {
    v2 = a1;
    do
    {
      result = result
             + (double)(uint64_t)(v2[1] + *(_QWORD *)(v2[5] + 8))
             * (double)(uint64_t)(*(_QWORD *)(v2[5] + 16) - v2[2]);
      v2 = (_QWORD *)v2[4];
    }
    while (v2 != a1);
    return result * 0.5;
  }
  return result;
}

double ClipperLib::Area(uint64_t a1)
{
  _QWORD *v1;
  double v2;
  _QWORD *v3;

  v1 = *(_QWORD **)(a1 + 24);
  if (!v1)
    return 0.0;
  v2 = 0.0;
  v3 = *(_QWORD **)(a1 + 24);
  do
  {
    v2 = v2 + (double)(uint64_t)(v3[1] + *(_QWORD *)(v3[5] + 8)) * (double)(uint64_t)(*(_QWORD *)(v3[5] + 16) - v3[2]);
    v3 = (_QWORD *)v3[4];
  }
  while (v3 != v1);
  return v2 * 0.5;
}

uint64_t ClipperLib::PointIsVertex(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a2;
  do
  {
    v5 = v4[1] == v2 && v4[2] == v3;
    result = v5;
    if (v5)
      break;
    v4 = (_QWORD *)v4[4];
  }
  while (v4 != a2);
  return result;
}

uint64_t ClipperLib::PointInPolygon(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double v20;

  v2 = *(uint64_t **)a2;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v3 < 3)
    return 0;
  result = 0;
  v6 = *v2;
  v7 = v2[1];
  v8 = 1;
  v11 = a1;
  v9 = *a1;
  v10 = v11[1];
  while (1)
  {
    v12 = v3 == v8 ? 0 : v8;
    v13 = &v2[3 * v12];
    v14 = *v13;
    v15 = v13[1];
    if (v15 == v10 && (v14 == v9 || v7 == v10 && v6 < v9 != v14 <= v9))
      return 0xFFFFFFFFLL;
    if (v7 >= v10 == v15 < v10)
    {
      v17 = __OFSUB__(v6, v9);
      v16 = v6 - v9 < 0;
      v18 = v6 - v9;
      if (v16 != v17)
      {
        v19 = v14 - v9;
        if (v14 <= v9)
          goto LABEL_22;
      }
      else
      {
        v19 = v14 - v9;
        if (v14 > v9)
        {
          result = (1 - result);
          goto LABEL_22;
        }
      }
      v20 = (double)v18 * (double)(v15 - v10) - (double)v19 * (double)(v7 - v10);
      if (v20 == 0.0)
        return 0xFFFFFFFFLL;
      if (v15 > v7 != v20 <= 0.0)
        result = (1 - result);
      else
        result = result;
    }
LABEL_22:
    ++v8;
    v6 = v14;
    v7 = v15;
    if (v8 > v3)
      return result;
  }
}

uint64_t ClipperLib::PointInPolygon(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  double v19;

  result = 0;
  v6 = a1;
  v4 = *a1;
  v5 = v6[1];
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = (_QWORD *)v7[4];
    v9 = v7[2];
    if (v9 == v5)
    {
      v10 = v7[1];
      if (v10 == v4)
        return 0xFFFFFFFFLL;
      v11 = v8[2];
      if (v11 == v5)
      {
        if (v10 <= v4 != v8[1] < v4)
          return 0xFFFFFFFFLL;
        goto LABEL_20;
      }
    }
    else
    {
      v11 = v8[2];
    }
    if (v9 < v5 != v11 >= v5)
      goto LABEL_20;
    v12 = v8[1];
    v13 = v7[1];
    v15 = __OFSUB__(v12, v4);
    v14 = v12 - v4 < 0;
    v16 = v12 - v4;
    if (v14 == v15)
      break;
    v15 = __OFSUB__(v13, v4);
    v17 = v13 == v4;
    v14 = v13 - v4 < 0;
    v18 = v13 - v4;
    if (!(v14 ^ v15 | v17))
      goto LABEL_16;
LABEL_20:
    if (v7 == a2)
      return result;
  }
  v15 = __OFSUB__(v13, v4);
  v17 = v13 == v4;
  v14 = v13 - v4 < 0;
  v18 = v13 - v4;
  if (!(v14 ^ v15 | v17))
  {
    result = (1 - result);
    goto LABEL_20;
  }
LABEL_16:
  v19 = (double)v16 * (double)(v9 - v5) - (double)v18 * (double)(v11 - v5);
  if (v19 != 0.0)
  {
    if (v9 > v11 != v19 <= 0.0)
      result = (1 - result);
    else
      result = result;
    goto LABEL_20;
  }
  return 0xFFFFFFFFLL;
}

BOOL ClipperLib::Poly2ContainsPoly1(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;

  v4 = a1;
  while (1)
  {
    v5 = ClipperLib::PointInPolygon((_QWORD *)(v4 + 8), a2);
    if ((v5 & 0x80000000) == 0)
      break;
    v4 = *(_QWORD *)(v4 + 32);
    if (v4 == a1)
      return 1;
  }
  return v5 != 0;
}

BOOL ClipperLib::SlopesEqual(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v7[2];
  unint64_t v8[2];

  if (a3)
  {
    ClipperLib::Int128Mul(a1[7] - a1[1], a2[6] - *a2, v8);
    ClipperLib::Int128Mul(a1[6] - *a1, a2[7] - a2[1], v7);
    return v8[1] == v7[1] && v8[0] == v7[0];
  }
  else
  {
    return (a2[6] - *a2) * (a1[7] - a1[1]) == (a2[7] - a2[1]) * (a1[6] - *a1);
  }
}

BOOL ClipperLib::SlopesEqual(_QWORD *a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v10[2];
  unint64_t v11[2];

  if (a4)
  {
    v7 = *a2;
    v6 = a2[1];
    ClipperLib::Int128Mul(a1[1] - v6, *a2 - *a3, v11);
    ClipperLib::Int128Mul(*a1 - v7, v6 - a3[1], v10);
    return v11[1] == v10[1] && v11[0] == v10[0];
  }
  else
  {
    return (*a2 - *a3) * (a1[1] - a2[1]) == (a2[1] - a3[1]) * (*a1 - *a2);
  }
}

BOOL ClipperLib::SlopesEqual(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v11[2];
  unint64_t v12[2];

  if (a5)
  {
    ClipperLib::Int128Mul(a1[1] - a2[1], *a3 - *a4, v12);
    ClipperLib::Int128Mul(*a1 - *a2, a3[1] - a4[1], v11);
    return v12[1] == v11[1] && v12[0] == v11[0];
  }
  else
  {
    return (*a3 - *a4) * (a1[1] - a2[1]) == (a3[1] - a4[1]) * (*a1 - *a2);
  }
}

uint64_t ClipperLib::IntersectPoint(uint64_t result, uint64_t a2, uint64_t *a3)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;

  a3[2] = 0xBF800000BF800000;
  v3 = *(double *)(result + 72);
  v4 = *(double *)(a2 + 72);
  if (v3 == v4)
  {
    v5 = *(_QWORD *)(result + 32);
    a3[1] = v5;
    if (*(_QWORD *)(result + 56) != v5)
    {
      v11 = v3 * (double)(v5 - *(_QWORD *)(result + 8));
      v12 = 0.5;
      if (v11 < 0.0)
        v12 = -0.5;
      v6 = *(_QWORD *)result + (uint64_t)(v11 + v12);
      goto LABEL_55;
    }
    goto LABEL_3;
  }
  if (v3 == 0.0)
  {
    v7 = *(_QWORD *)result;
    *a3 = *(_QWORD *)result;
    v8 = *(_QWORD *)(a2 + 8);
    if (v4 != -1.0e40)
    {
      v9 = (double)v8 - (double)*(uint64_t *)a2 / v4;
      v10 = (double)v7 / v4;
LABEL_13:
      v14 = v10 + v9;
      v15 = 0.5;
      if (v14 < 0.0)
        v15 = -0.5;
      v8 = (uint64_t)(v14 + v15);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  if (v4 == 0.0)
  {
    v13 = *(_QWORD *)a2;
    *a3 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(result + 8);
    if (v3 != -1.0e40)
    {
      v9 = (double)v8 - (double)*(uint64_t *)result / v3;
      v10 = (double)v13 / v3;
      goto LABEL_13;
    }
LABEL_16:
    a3[1] = v8;
    goto LABEL_17;
  }
  v20 = (double)*(uint64_t *)result - (double)*(uint64_t *)(result + 8) * v3;
  v21 = (double)*(uint64_t *)a2 - (double)*(uint64_t *)(a2 + 8) * v4;
  v22 = (v21 - v20) / (v3 - v4);
  if (v22 >= 0.0)
    v23 = 0.5;
  else
    v23 = -0.5;
  v8 = (uint64_t)(v22 + v23);
  v24 = v21 + v4 * v22;
  v25 = v20 + v3 * v22;
  if (fabs(v3) >= fabs(v4))
    v25 = v24;
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  *a3 = (uint64_t)(v25 + v26);
  a3[1] = v8;
LABEL_17:
  v16 = *(_QWORD *)(result + 56);
  v17 = *(_QWORD *)(a2 + 56);
  if (v8 < v16 || v8 < v17)
  {
    if (v16 <= v17)
      v8 = *(_QWORD *)(a2 + 56);
    else
      v8 = *(_QWORD *)(result + 56);
    a3[1] = v8;
    if (fabs(v3) >= fabs(v4))
    {
      if (*(_QWORD *)(a2 + 56) == v8)
      {
        v19 = *(_QWORD *)(a2 + 48);
        goto LABEL_44;
      }
      v27 = *(_QWORD *)a2;
      v28 = v4 * (double)(v8 - *(_QWORD *)(a2 + 8));
    }
    else
    {
      if (*(_QWORD *)(result + 56) == v8)
      {
        v19 = *(_QWORD *)(result + 48);
LABEL_44:
        *a3 = v19;
        goto LABEL_45;
      }
      v27 = *(_QWORD *)result;
      v28 = v3 * (double)(v8 - *(_QWORD *)(result + 8));
    }
    v29 = 0.5;
    if (v28 < 0.0)
      v29 = -0.5;
    v19 = v27 + (uint64_t)(v28 + v29);
    goto LABEL_44;
  }
LABEL_45:
  v30 = *(_QWORD *)(result + 32);
  if (v8 <= v30)
    return result;
  a3[1] = v30;
  if (fabs(v3) > fabs(v4))
  {
    if (*(_QWORD *)(a2 + 56) == v30)
    {
      v6 = *(_QWORD *)(a2 + 48);
      goto LABEL_55;
    }
    v31 = *(_QWORD *)a2;
    v32 = v4 * (double)(v30 - *(_QWORD *)(a2 + 8));
LABEL_52:
    v33 = 0.5;
    if (v32 < 0.0)
      v33 = -0.5;
    v6 = v31 + (uint64_t)(v32 + v33);
    goto LABEL_55;
  }
  if (*(_QWORD *)(result + 56) != v30)
  {
    v31 = *(_QWORD *)result;
    v32 = v3 * (double)(v30 - *(_QWORD *)(result + 8));
    goto LABEL_52;
  }
LABEL_3:
  v6 = *(_QWORD *)(result + 48);
LABEL_55:
  *a3 = v6;
  return result;
}

int8x16_t ClipperLib::ReversePolyPtLinks(__n128 *a1)
{
  __n128 *v1;
  int8x16_t result;

  if (a1)
  {
    v1 = a1;
    do
    {
      result = (int8x16_t)v1[2];
      v1[2] = (__n128)vextq_s8(result, result, 8uLL);
      v1 = (__n128 *)result.i64[0];
    }
    while ((__n128 *)result.i64[0] != a1);
  }
  return result;
}

_QWORD *ClipperLib::DisposeOutPts(_QWORD *result)
{
  _QWORD **v1;

  if (*result)
  {
    v1 = (_QWORD **)result;
    *(_QWORD *)(*(_QWORD *)(*result + 40) + 32) = 0;
    while (1)
    {
      result = *v1;
      if (!*v1)
        break;
      *v1 = (_QWORD *)result[4];
      MEMORY[0x1C3B7F770]();
    }
  }
  return result;
}

uint64_t ClipperLib::InitEdge2(uint64_t result, int a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v2 = (_OWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 104);
  if (*(_QWORD *)(result + 32) >= *(_QWORD *)(v3 + 32))
  {
    *(_OWORD *)result = *v2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 40);
    v5 = *(_QWORD *)(v3 + 40);
    *(_OWORD *)(result + 48) = *(_OWORD *)(v3 + 24);
    *(_QWORD *)(result + 64) = v5;
  }
  else
  {
    *(_OWORD *)(result + 48) = *v2;
    *(_QWORD *)(result + 64) = *(_QWORD *)(result + 40);
    v4 = *(_QWORD *)(v3 + 40);
    *(_OWORD *)result = *(_OWORD *)(v3 + 24);
    *(_QWORD *)(result + 16) = v4;
  }
  v6 = *(_QWORD *)(result + 56) - *(_QWORD *)(result + 8);
  if (v6)
    v7 = (double)(uint64_t)(*(_QWORD *)(result + 48) - *(_QWORD *)result) / (double)v6;
  else
    v7 = -1.0e40;
  *(double *)(result + 72) = v7;
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t ClipperLib::RemoveEdge(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v1 + 104) = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v2 + 112) = v1;
  *(_QWORD *)(a1 + 112) = 0;
  return v2;
}

__n128 ClipperLib::SwapPoints(ClipperLib *this, IntPoint *a2, IntPoint *a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  v3 = *((_QWORD *)this + 2);
  result = *(__n128 *)this;
  v5 = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = v5;
  *(__n128 *)a2 = result;
  *((_QWORD *)a2 + 2) = v3;
  return result;
}

BOOL ClipperLib::GetOverlapSegment(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  __int128 v32;

  v6 = a1[1];
  v7 = a2[1];
  v8 = *a1 - *a2;
  if (v8 < 0)
    v8 = *a2 - *a1;
  v9 = v6 - v7;
  if (v6 - v7 < 0)
    v9 = v7 - v6;
  if (v8 <= v9)
  {
    if (v6 < v7)
    {
      v22 = a1[2];
      v23 = *(_OWORD *)a1;
      v24 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v24;
      *(_OWORD *)a2 = v23;
      a2[2] = v22;
    }
    v25 = a3[1];
    if (v25 < a4[1])
    {
      v26 = a3[2];
      v27 = *(_OWORD *)a3;
      v28 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v28;
      *(_OWORD *)a4 = v27;
      a4[2] = v26;
      v25 = a3[1];
    }
    if (a1[1] >= v25)
      v29 = a3;
    else
      v29 = a1;
    v30 = *(_OWORD *)v29;
    *(_QWORD *)(a5 + 16) = v29[2];
    *(_OWORD *)a5 = v30;
    if (a2[1] <= a4[1])
      v31 = a4;
    else
      v31 = a2;
    v32 = *(_OWORD *)v31;
    *(_QWORD *)(a6 + 16) = v31[2];
    *(_OWORD *)a6 = v32;
    return *(_QWORD *)(a5 + 8) > *(_QWORD *)(a6 + 8);
  }
  else
  {
    if (*a1 > *a2)
    {
      v10 = a1[2];
      v11 = *(_OWORD *)a1;
      v12 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v12;
      *(_OWORD *)a2 = v11;
      a2[2] = v10;
    }
    v13 = *a3;
    if (*a3 > *a4)
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      v13 = *a3;
    }
    if (*a1 <= v13)
      v17 = a3;
    else
      v17 = a1;
    v18 = *(_OWORD *)v17;
    *(_QWORD *)(a5 + 16) = v17[2];
    *(_OWORD *)a5 = v18;
    if (*a2 >= *a4)
      v19 = a4;
    else
      v19 = a2;
    v20 = *(_OWORD *)v19;
    *(_QWORD *)(a6 + 16) = v19[2];
    *(_OWORD *)a6 = v20;
    return *(_QWORD *)a5 < *(_QWORD *)a6;
  }
}

uint64_t ClipperLib::FirstIsBottomPt(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double v26;
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  _QWORD *v42;
  _BOOL4 v43;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  v4 = (_QWORD *)result;
  do
  {
    v4 = (_QWORD *)v4[5];
    v5 = v4[1];
    v6 = v4[2];
  }
  while (v4 != (_QWORD *)result && v5 == v2 && v6 == v3);
  v9 = v6 - v3;
  if (v9)
    v10 = (double)(v5 - v2) / (double)v9;
  else
    v10 = -1.0e40;
  v11 = (_QWORD *)result;
  do
  {
    v11 = (_QWORD *)v11[4];
    v12 = v11[1];
    v13 = v11[2];
  }
  while (v11 != (_QWORD *)result && v12 == v2 && v13 == v3);
  v16 = v13 - v3;
  if (v16)
    v17 = (double)(v12 - v2) / (double)v16;
  else
    v17 = -1.0e40;
  v18 = fabs(v10);
  v19 = a2[1];
  v20 = a2[2];
  v21 = a2;
  do
  {
    v21 = (_QWORD *)v21[5];
    v22 = v21[1];
    v23 = v21[2];
  }
  while (v21 != a2 && v22 == v19 && v23 == v20);
  if (v23 == v20)
    v26 = -1.0e40;
  else
    v26 = (double)(v22 - v19) / (double)(v23 - v20);
  v27 = fabs(v17);
  v28 = a2;
  do
  {
    v28 = (_QWORD *)v28[4];
    v29 = v28[1];
    v30 = v28[2];
  }
  while (v28 != a2 && v29 == v19 && v30 == v20);
  v33 = fabs(v26);
  v34 = v30 - v20;
  if (v34)
    v35 = (double)(v29 - v19) / (double)v34;
  else
    v35 = -1.0e40;
  v36 = fabs(v35);
  if (v18 >= v27)
    v37 = v18;
  else
    v37 = v27;
  if (v33 >= v36)
    v38 = v33;
  else
    v38 = v36;
  if (v37 == v38 && (v27 >= v18 ? (v39 = v18) : (v39 = v27), v36 >= v33 ? (v40 = v33) : (v40 = v36), v39 == v40))
  {
    if (result)
    {
      v41 = 0.0;
      v42 = (_QWORD *)result;
      do
      {
        v41 = v41
            + (double)(uint64_t)(v42[1] + *(_QWORD *)(v42[5] + 8))
            * (double)(uint64_t)(*(_QWORD *)(v42[5] + 16) - v42[2]);
        v42 = (_QWORD *)v42[4];
      }
      while (v42 != (_QWORD *)result);
      return v41 * 0.5 > 0.0;
    }
  }
  else
  {
    v43 = v27 >= v33;
    if (v27 < v36)
      v43 = 0;
    return v18 >= v33 && v18 >= v36 || v43;
  }
  return result;
}

uint64_t ClipperLib::GetBottomPt(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (uint64_t)a1;
  v2 = (_QWORD *)a1[4];
  if (v2 == a1)
    return v1;
  v3 = 0;
  do
  {
    v4 = v2[2];
    v5 = *(_QWORD *)(v1 + 16);
    if (v4 > v5)
    {
LABEL_4:
      v3 = 0;
      v1 = (uint64_t)v2;
      goto LABEL_11;
    }
    if (v4 == v5)
    {
      v6 = v2[1];
      v7 = *(_QWORD *)(v1 + 8);
      if (v6 <= v7)
      {
        if (v6 < v7)
          goto LABEL_4;
        if (v2[4] != v1 && v2[5] != v1)
          v3 = v2;
      }
    }
LABEL_11:
    v2 = (_QWORD *)v2[4];
  }
  while (v2 != (_QWORD *)v1);
  if (!v3 || v3 == (_QWORD *)v1)
    return v1;
  v8 = (_QWORD *)v1;
  do
  {
    if (!ClipperLib::FirstIsBottomPt(v1, v3))
      v8 = v3;
    do
      v3 = (_QWORD *)v3[4];
    while (v3[1] != v8[1] || v3[2] != v8[2]);
  }
  while (v3 != (_QWORD *)v1);
  return (uint64_t)v8;
}

uint64_t ClipperLib::Pt2IsBetweenPt1AndPt3(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a3;
  v6 = a3[1];
  if (*a1 == *a3 && v4 == v6)
    return 0;
  v8 = *a2;
  v9 = a2[1];
  if (v3 == *a2 && v4 == v9)
    return 0;
  if (v5 == v8 && v6 == v9)
    return 0;
  v12 = (v9 <= v4) ^ (v9 < v6);
  v13 = (v8 <= v3) ^ (v8 < v5);
  if (v3 == v5)
    return v12;
  else
    return v13;
}

BOOL ClipperLib::HorzSegmentsOverlap(ClipperLib *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ClipperLib *v4;
  ClipperLib *v5;
  uint64_t v6;
  uint64_t v7;

  if ((uint64_t)this >= a2)
    v4 = (ClipperLib *)a2;
  else
    v4 = this;
  if ((uint64_t)this <= a2)
    v5 = (ClipperLib *)a2;
  else
    v5 = this;
  if (a3 >= a4)
    v6 = a4;
  else
    v6 = a3;
  if (a3 <= a4)
    v7 = a4;
  else
    v7 = a3;
  return (uint64_t)v4 < v7 && v6 < (uint64_t)v5;
}

double ClipperLib::ClipperBase::ClipperBase(ClipperLib::ClipperBase *this)
{
  double result;

  *(_QWORD *)this = &off_1E77744D8;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E77744D8;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

void ClipperLib::ClipperBase::~ClipperBase(ClipperLib::ClipperBase *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E77744D8;
  ClipperLib::ClipperBase::Clear(this);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  ClipperLib::ClipperBase::~ClipperBase(this);
  JUMPOUT(0x1C3B7F770);
}

uint64_t *ClipperLib::RangeTest(uint64_t *this, IntPoint *a2, BOOL *a3)
{
  uint64_t v3;
  BOOL v6;
  ClipperLib::clipperException *exception;

  v3 = *this;
  if (!*(_BYTE *)a2)
  {
    if (v3 <= 0x3FFFFFFF && v3 >= -1073741823 && (unint64_t)(this[1] - 0x40000000) >= 0xFFFFFFFF80000001)
      return this;
    *(_BYTE *)a2 = 1;
  }
  if (v3 > 0x3FFFFFFFFFFFFFFFLL
    || (v3 >= (uint64_t)0xC000000000000001
      ? (v6 = (unint64_t)(this[1] - 0x4000000000000000) > 0x8000000000000000)
      : (v6 = 0),
        !v6))
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "Coordinate outside allowed range");
  }
  return this;
}

void sub_1BE37B554(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::FindNextLocMin(uint64_t result)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  while (1)
  {
    while (1)
    {
      v1 = *(_QWORD *)(result + 112);
      if (*(_QWORD *)result == *(_QWORD *)v1
        && *(_QWORD *)(result + 8) == *(_QWORD *)(v1 + 8)
        && (*(_QWORD *)(result + 24) != *(_QWORD *)(result + 48) || *(_QWORD *)(result + 32) != *(_QWORD *)(result + 56)))
      {
        break;
      }
      result = *(_QWORD *)(result + 104);
    }
    if (*(double *)(result + 72) != -1.0e40 && *(double *)(v1 + 72) != -1.0e40)
      break;
    v4 = result;
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 112);
    }
    while (*(double *)(v4 + 72) == -1.0e40);
    v6 = v4;
    result = v5;
    if (*(double *)(v5 + 72) == -1.0e40)
    {
      result = v5;
      do
        result = *(_QWORD *)(result + 104);
      while (*(double *)(result + 72) == -1.0e40);
      v6 = *(_QWORD *)(result + 112);
    }
    if (*(_QWORD *)(result + 56) != *(_QWORD *)(v6 + 8))
    {
      if (*(_QWORD *)v4 < *(_QWORD *)result)
        return v5;
      return result;
    }
  }
  return result;
}

uint64_t ClipperLib::ClipperBase::ProcessBound(_QWORD *a1, uint64_t *a2, int a3, __n128 a4)
{
  double *v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  double *v25;
  double *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  double *v35;
  double *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;

  if (*((_DWORD *)a2 + 25) == -2)
  {
    v5 = (double *)a2;
    if ((a3 & 1) != 0)
    {
      do
      {
        v6 = v5;
        v7 = *((_QWORD *)v5 + 7);
        v5 = (double *)*((_QWORD *)v5 + 13);
      }
      while (v7 == *((_QWORD *)v5 + 1));
      if (v6 == (double *)a2)
        goto LABEL_27;
      a4.n128_u64[0] = 0xC83D6329F1C35CA5;
      while (v6[9] == -1.0e40)
      {
        v6 = (double *)*((_QWORD *)v6 + 14);
        if (v6 == (double *)a2)
          goto LABEL_27;
      }
    }
    else
    {
      do
      {
        v6 = v5;
        v8 = *((_QWORD *)v5 + 7);
        v5 = (double *)*((_QWORD *)v5 + 14);
      }
      while (v8 == *((_QWORD *)v5 + 1));
      if (v6 == (double *)a2)
        goto LABEL_27;
      a4.n128_u64[0] = 0xC83D6329F1C35CA5;
      while (v6[9] == -1.0e40)
      {
        v6 = (double *)*((_QWORD *)v6 + 13);
        if (v6 == (double *)a2)
          goto LABEL_27;
      }
    }
    if (v6 != (double *)a2)
    {
      v13 = 14;
      if (a3)
        v13 = 13;
      v14 = a2[v13];
      v15 = *(_QWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 88) = 0;
      v16 = ClipperLib::ClipperBase::ProcessBound(a1, v14, a4);
      v18 = (_QWORD *)a1[3];
      v17 = a1[4];
      if ((unint64_t)v18 >= v17)
      {
        v43 = a1[2];
        v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v43) >> 3);
        v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v43) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x555555555555555)
          v47 = 0xAAAAAAAAAAAAAAALL;
        else
          v47 = v45;
        if (v47)
          v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(v47);
        else
          v48 = 0;
        v49 = (_QWORD *)(v47 + 24 * v44);
        v50 = v47 + 24 * v48;
        *v49 = v15;
        v49[1] = 0;
        v49[2] = v14;
        v19 = v49 + 3;
        v52 = (char *)a1[2];
        v51 = (char *)a1[3];
        if (v51 != v52)
        {
          do
          {
            v53 = *(_OWORD *)(v51 - 24);
            *(v49 - 1) = *((_QWORD *)v51 - 1);
            *(_OWORD *)(v49 - 3) = v53;
            v49 -= 3;
            v51 -= 24;
          }
          while (v51 != v52);
          v51 = (char *)a1[2];
        }
        a1[2] = v49;
        a1[3] = v19;
        a1[4] = v50;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v18 = v15;
        v18[1] = 0;
        v19 = v18 + 3;
        v18[2] = v14;
      }
      a1[3] = v19;
      return v16;
    }
LABEL_27:
    if (a3)
      return a2[13];
    else
      return a2[14];
  }
  if (*((double *)a2 + 9) == -1.0e40)
  {
    v9 = 13;
    if (a3)
      v9 = 14;
    v10 = (double *)a2[v9];
    v11 = *v10;
    v12 = *(double *)a2;
    if (v10[9] == -1.0e40)
    {
      if (*(_QWORD *)&v11 == *(_QWORD *)&v12 || *((_QWORD *)v10 + 6) == *(_QWORD *)&v12)
        goto LABEL_32;
      goto LABEL_31;
    }
    if (*(_QWORD *)&v11 != *(_QWORD *)&v12)
    {
LABEL_31:
      v20 = a2[6];
      *((double *)a2 + 6) = v12;
      *a2 = v20;
      v21 = a2[8];
      a2[8] = a2[2];
      a2[2] = v21;
    }
  }
LABEL_32:
  v22 = a2;
  if ((a3 & 1) != 0)
  {
    do
    {
      v23 = v22;
      v24 = v22[7];
      v22 = (uint64_t *)v22[13];
    }
    while (v24 == v22[1] && *((_DWORD *)v22 + 25) != -2);
    if (*((double *)v23 + 9) == -1.0e40 && *((_DWORD *)v22 + 25) != -2)
    {
      v25 = (double *)v23;
      do
        v25 = (double *)*((_QWORD *)v25 + 14);
      while (v25[9] == -1.0e40);
      if (*((_QWORD *)v25 + 6) > v22[6])
        v23 = (uint64_t *)v25;
    }
    if (v23 != a2)
    {
      v26 = (double *)a2;
      do
      {
        v27 = (uint64_t *)*((_QWORD *)v26 + 13);
        *((_QWORD *)v26 + 15) = v27;
        if (v26 != (double *)a2 && v26[9] == -1.0e40 && *(_QWORD *)v26 != *(_QWORD *)(*((_QWORD *)v26 + 14) + 48))
        {
          v28 = *((_QWORD *)v26 + 6);
          v26[6] = *v26;
          *(_QWORD *)v26 = v28;
          v29 = *((_QWORD *)v26 + 8);
          v26[8] = v26[2];
          *((_QWORD *)v26 + 2) = v29;
        }
        v26 = (double *)v27;
      }
      while (v27 != v23);
      if (*((double *)v23 + 9) == -1.0e40 && *v23 != *(_QWORD *)(v23[14] + 48))
      {
        v30 = v23[6];
        v23[6] = *v23;
        *v23 = v30;
        v31 = v23[8];
        v23[8] = v23[2];
        v23[2] = v31;
      }
    }
    v32 = v23 + 13;
  }
  else
  {
    do
    {
      v33 = v22;
      v34 = v22[7];
      v22 = (uint64_t *)v22[14];
    }
    while (v34 == v22[1] && *((_DWORD *)v22 + 25) != -2);
    if (*((double *)v33 + 9) == -1.0e40 && *((_DWORD *)v22 + 25) != -2)
    {
      v35 = (double *)v33;
      do
        v35 = (double *)*((_QWORD *)v35 + 13);
      while (v35[9] == -1.0e40);
      if (*((_QWORD *)v35 + 6) >= v22[6])
        v33 = (uint64_t *)v35;
    }
    if (v33 != a2)
    {
      v36 = (double *)a2;
      do
      {
        v37 = (uint64_t *)*((_QWORD *)v36 + 14);
        *((_QWORD *)v36 + 15) = v37;
        if (v36 != (double *)a2 && v36[9] == -1.0e40 && *(_QWORD *)v36 != *(_QWORD *)(*((_QWORD *)v36 + 13) + 48))
        {
          v38 = *((_QWORD *)v36 + 6);
          v36[6] = *v36;
          *(_QWORD *)v36 = v38;
          v39 = *((_QWORD *)v36 + 8);
          v36[8] = v36[2];
          *((_QWORD *)v36 + 2) = v39;
        }
        v36 = (double *)v37;
      }
      while (v37 != v33);
      if (*((double *)v33 + 9) == -1.0e40 && *v33 != *(_QWORD *)(v33[13] + 48))
      {
        v40 = v33[6];
        v33[6] = *v33;
        *v33 = v40;
        v41 = v33[8];
        v33[8] = v33[2];
        v33[2] = v41;
      }
    }
    v32 = v33 + 14;
  }
  return *v32;
}

uint64_t ClipperLib::ClipperBase::AddPath(uint64_t a1, uint64_t **a2, int a3, int a4)
{
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int64x2_t *v15;
  int64x2_t v17;
  int32x2_t v18;
  BOOL *v19;
  uint64_t v20;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL *v27;
  BOOL *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 *v49;
  uint64_t v51;
  _BOOL4 v52;
  char IsBetweenPt1AndPt3;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t NextLocMin;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  __n128 v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *i;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  unint64_t v129;
  uint64_t *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  ClipperLib::clipperException *exception;
  int v145;
  uint64_t v146;
  IntPoint *v147;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;

  if (a3 == 1 && (a4 & 1) == 0)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "AddPath: Open paths must be subject.");
  }
  v7 = *a2;
  v8 = -1431655765 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3);
  v9 = v8 - 1;
  if (a4 && v8 >= 2)
  {
    do
    {
      v10 = &v7[3 * --v8];
      v12 = *v10;
      v11 = v10[1];
      if (v12 != *v7 || v11 != v7[1])
      {
        v9 = v8;
        goto LABEL_12;
      }
    }
    while (v8 > 1);
    v9 = 0;
  }
LABEL_12:
  v14 = v9 & (v9 >> 31);
  v15 = (int64x2_t *)&v7[3 * v9];
  while (1)
  {
    _VF = __OFSUB__(v9--, 1);
    if (v9 < 0 != _VF)
      break;
    v17 = *v15;
    v15 = (int64x2_t *)((char *)v15 - 24);
    v18 = vmovn_s64(vceqq_s64(v17, *(int64x2_t *)&v7[3 * v9]));
    if ((v18.i32[0] & v18.i32[1] & 1) == 0)
    {
      v14 = v9 + 1;
      break;
    }
  }
  if (v14 <= a4)
    return 0;
  is_mul_ok(v14 + 1, 0xA0uLL);
  v20 = operator new[]();
  __asm { FMOV            V0.2S, #-1.0 }
  v24 = (_QWORD *)v20;
  do
  {
    *v24 = 0;
    v24[1] = 0;
    v24[2] = _D0;
    v24[3] = 0;
    v24[4] = 0;
    v24[5] = _D0;
    v24[6] = 0;
    v24[7] = 0;
    v24[8] = _D0;
    v24 += 20;
  }
  while (v24 != (_QWORD *)(v20 + 160 * (v14 + 1)));
  v145 = a3;
  v25 = *a2;
  v26 = (*a2)[5];
  *(_OWORD *)(v20 + 184) = *(_OWORD *)(*a2 + 3);
  *(_QWORD *)(v20 + 200) = v26;
  v146 = v20;
  ClipperLib::RangeTest(v25, (IntPoint *)(a1 + 40), v19);
  ClipperLib::RangeTest(&(*a2)[3 * v14], (IntPoint *)(a1 + 40), v27);
  v147 = (IntPoint *)(a1 + 40);
  v29 = *a2;
  v30 = v20 + 160 * v14;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_QWORD *)(v20 + 104) = v20 + 160;
  *(_QWORD *)(v20 + 112) = v30;
  v31 = *(_OWORD *)v29;
  *(_QWORD *)(v20 + 40) = v29[2];
  *(_OWORD *)(v20 + 24) = v31;
  *(_DWORD *)(v20 + 100) = -1;
  v32 = (v14 - 1);
  v33 = &v29[3 * v14];
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_QWORD *)(v30 + 104) = v20;
  *(_QWORD *)(v30 + 112) = v20 + 160 * v32;
  v34 = v33[2];
  *(_OWORD *)(v30 + 24) = *(_OWORD *)v33;
  *(_QWORD *)(v30 + 40) = v34;
  v35 = (_QWORD *)v20;
  v36 = (_QWORD *)v20;
  *(_DWORD *)(v30 + 100) = -1;
  if (v14 >= 2)
  {
    v37 = v32 + 1;
    v38 = v20 + 160 * v32 + 160;
    v39 = 3 * v32;
    do
    {
      ClipperLib::RangeTest(&v29[v39], v147, v28);
      v29 = *a2;
      v40 = (uint64_t)&(*a2)[v39];
      *(_OWORD *)(v38 - 144) = 0u;
      *(_OWORD *)(v38 - 128) = 0u;
      *(_OWORD *)(v38 - 112) = 0u;
      *(_OWORD *)(v38 - 96) = 0u;
      *(_OWORD *)(v38 - 80) = 0u;
      *(_OWORD *)(v38 - 64) = 0u;
      *(_OWORD *)(v38 - 48) = 0u;
      *(_OWORD *)(v38 - 32) = 0u;
      *(_OWORD *)(v38 - 160) = 0u;
      *(_OWORD *)(v38 - 16) = 0u;
      *(_QWORD *)(v38 - 56) = v38;
      *(_QWORD *)(v38 - 48) = v20 + 160 * (v37 - 2);
      v41 = *(_OWORD *)v40;
      *(_QWORD *)(v38 - 120) = *(_QWORD *)(v40 + 16);
      *(_OWORD *)(v38 - 136) = v41;
      *(_DWORD *)(v38 - 60) = -1;
      --v37;
      v39 -= 3;
      v38 -= 160;
    }
    while (v37 > 1);
    v35 = (_QWORD *)v20;
    v36 = (_QWORD *)v20;
  }
LABEL_23:
  while (2)
  {
    v42 = v36[3];
    v43 = v36[4];
    v44 = v36;
    v45 = a4;
    while (1)
    {
      v46 = v42;
      v47 = v43;
      v48 = (_QWORD *)v44[13];
      v49 = (__int128 *)(v48 + 3);
      v42 = v48[3];
      v43 = v48[4];
      if (v46 == v42 && v47 == v43)
        break;
      v51 = v44[14];
      if ((_QWORD *)v51 == v48)
        goto LABEL_51;
      if (!v45)
      {
        if (v48 != v36)
          goto LABEL_41;
        v44 = v36;
LABEL_55:
        if (v44 == (_QWORD *)v44[13])
          goto LABEL_65;
        *(_BYTE *)(a1 + 73) = 1;
        *(_DWORD *)(v35[14] + 100) = -2;
        goto LABEL_57;
      }
      v159 = *(_OWORD *)(v51 + 24);
      v160 = *(_QWORD *)(v51 + 40);
      v157 = *(_OWORD *)(v44 + 3);
      v158 = v44[5];
      v155 = *v49;
      v156 = v48[5];
      v52 = ClipperLib::SlopesEqual(&v159, (uint64_t *)&v157, &v155, *(_BYTE *)v147);
      v45 = a4;
      if (v52)
      {
        if (!*(_BYTE *)(a1 + 72))
          goto LABEL_47;
        v153 = *(_OWORD *)(v51 + 24);
        v154 = *(_QWORD *)(v51 + 40);
        v151 = *(_OWORD *)(v44 + 3);
        v152 = v44[5];
        v149 = *v49;
        v150 = v48[5];
        IsBetweenPt1AndPt3 = ClipperLib::Pt2IsBetweenPt1AndPt3((uint64_t *)&v153, (uint64_t *)&v151, (uint64_t *)&v149);
        v45 = a4;
        if ((IsBetweenPt1AndPt3 & 1) == 0)
        {
LABEL_47:
          if (v44 == v35)
            v35 = v48;
          *(_QWORD *)(v51 + 104) = v48;
          v55 = v44[13];
          *(_QWORD *)(v55 + 112) = v51;
          v44[14] = 0;
          v36 = *(_QWORD **)(v55 + 112);
          goto LABEL_23;
        }
      }
LABEL_37:
      if (v48 == v36)
      {
        v44 = v36;
        goto LABEL_51;
      }
      v44 = v48;
      if ((v45 & 1) == 0)
      {
LABEL_41:
        v44 = v48;
        if ((_QWORD *)v48[13] == v35)
          goto LABEL_55;
      }
    }
    if ((v45 & 1) == 0 && v48 == v35)
    {
      if ((_QWORD *)v44[14] == v35)
        goto LABEL_55;
      goto LABEL_37;
    }
    if (v44 != v48)
    {
      if (v44 == v35)
        v35 = (_QWORD *)v44[13];
      v54 = v44[14];
      *(_QWORD *)(v54 + 104) = v48;
      v36 = (_QWORD *)v44[13];
      v36[14] = v54;
      v44[14] = 0;
      continue;
    }
    break;
  }
LABEL_51:
  if ((v45 & 1) == 0)
    goto LABEL_55;
  if (v44[14] != v44[13])
  {
LABEL_57:
    v56 = 1;
    v57 = (uint64_t)v35;
    do
    {
      while (1)
      {
        ClipperLib::InitEdge2(v57, v145);
        v57 = *(_QWORD *)(v57 + 104);
        if (v56)
          break;
        v56 = 0;
        if ((_QWORD *)v57 == v35)
          goto LABEL_67;
      }
      v58 = *(_QWORD *)(v57 + 32);
      v59 = v35[4];
      v56 = v58 == v59;
    }
    while ((_QWORD *)v57 != v35);
    if (v58 == v59)
    {
      if (a4)
        goto LABEL_65;
      v109 = v35[14];
      *(_DWORD *)(v109 + 100) = -2;
      v110 = v35[1];
      *(_QWORD *)((char *)v35 + 84) = 2;
      for (i = v35; ; i = (_QWORD *)v114)
      {
        if (*i != *(_QWORD *)(v109 + 48))
        {
          v112 = i[6];
          i[6] = *i;
          *i = v112;
          v113 = i[8];
          i[8] = i[2];
          i[2] = v113;
        }
        v114 = i[13];
        if (*(_DWORD *)(v114 + 100) == -2)
          break;
        i[15] = v114;
        v109 = *(_QWORD *)(v114 + 112);
      }
      v116 = *(_QWORD **)(a1 + 24);
      v115 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v116 >= v115)
      {
        v118 = *(_QWORD *)(a1 + 16);
        v119 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v116 - v118) >> 3);
        v120 = v119 + 1;
        if (v119 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_173:
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - v118) >> 3);
        if (2 * v121 > v120)
          v120 = 2 * v121;
        if (v121 >= 0x555555555555555)
          v122 = 0xAAAAAAAAAAAAAAALL;
        else
          v122 = v120;
        if (v122)
          v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(v122);
        else
          v123 = 0;
        v124 = (_QWORD *)(v122 + 24 * v119);
        v125 = v122 + 24 * v123;
        *v124 = v110;
        v124[1] = 0;
        v124[2] = v35;
        v117 = v124 + 3;
        v127 = *(char **)(a1 + 16);
        v126 = *(char **)(a1 + 24);
        if (v126 != v127)
        {
          do
          {
            v128 = *(_OWORD *)(v126 - 24);
            *(v124 - 1) = *((_QWORD *)v126 - 1);
            *(_OWORD *)(v124 - 3) = v128;
            v124 -= 3;
            v126 -= 24;
          }
          while (v126 != v127);
          v126 = *(char **)(a1 + 16);
        }
        *(_QWORD *)(a1 + 16) = v124;
        *(_QWORD *)(a1 + 24) = v117;
        *(_QWORD *)(a1 + 32) = v125;
        if (v126)
          operator delete(v126);
      }
      else
      {
        *v116 = v110;
        v116[1] = 0;
        v117 = v116 + 3;
        v116[2] = v35;
      }
      *(_QWORD *)(a1 + 24) = v117;
      v130 = *(uint64_t **)(a1 + 56);
      v129 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v130 < v129)
      {
        *v130 = v146;
        v131 = v130 + 1;
LABEL_170:
        *(_QWORD *)(a1 + 56) = v131;
        return 1;
      }
      v132 = *(_QWORD *)(a1 + 48);
      v133 = ((uint64_t)v130 - v132) >> 3;
      if (!((unint64_t)(v133 + 1) >> 61))
      {
        v134 = v129 - v132;
        v135 = v134 >> 2;
        if (v134 >> 2 <= (unint64_t)(v133 + 1))
          v135 = v133 + 1;
        if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
          v136 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v136 = v135;
        if (v136)
          v136 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v136);
        else
          v137 = 0;
        v138 = (uint64_t *)(v136 + 8 * v133);
        v139 = v136 + 8 * v137;
        *v138 = v146;
        v131 = v138 + 1;
        v141 = *(char **)(a1 + 48);
        v140 = *(char **)(a1 + 56);
        if (v140 != v141)
        {
          do
          {
            v142 = *((_QWORD *)v140 - 1);
            v140 -= 8;
            *--v138 = v142;
          }
          while (v140 != v141);
          v140 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v138;
        *(_QWORD *)(a1 + 56) = v131;
        *(_QWORD *)(a1 + 64) = v139;
        if (v140)
          operator delete(v140);
        goto LABEL_170;
      }
LABEL_175:
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    }
LABEL_67:
    v62 = *(uint64_t **)(a1 + 56);
    v61 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v62 >= v61)
    {
      v64 = *(_QWORD *)(a1 + 48);
      v65 = ((uint64_t)v62 - v64) >> 3;
      if ((unint64_t)(v65 + 1) >> 61)
        goto LABEL_175;
      v66 = v61 - v64;
      v67 = v66 >> 2;
      if (v66 >> 2 <= (unint64_t)(v65 + 1))
        v67 = v65 + 1;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      if (v68)
        v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v68);
      else
        v69 = 0;
      v70 = (uint64_t *)(v68 + 8 * v65);
      v71 = v68 + 8 * v69;
      *v70 = v146;
      v63 = v70 + 1;
      v73 = *(char **)(a1 + 48);
      v72 = *(char **)(a1 + 56);
      if (v72 != v73)
      {
        do
        {
          v74 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          *--v70 = v74;
        }
        while (v72 != v73);
        v72 = *(char **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v70;
      *(_QWORD *)(a1 + 56) = v63;
      *(_QWORD *)(a1 + 64) = v71;
      if (v72)
        operator delete(v72);
    }
    else
    {
      *v62 = v146;
      v63 = v62 + 1;
    }
    *(_QWORD *)(a1 + 56) = v63;
    v75 = (uint64_t *)v35[14];
    v76 = *v75;
    v77 = v75[1];
    v79 = v75[6];
    v78 = v75[7];
    if (v76 == v79 && v77 == v78)
      v35 = (_QWORD *)v35[13];
    NextLocMin = ClipperLib::FindNextLocMin((uint64_t)v35);
    v60 = 1;
    if (!NextLocMin)
      return v60;
    v83 = 0;
    do
    {
      if (!v83)
        v83 = NextLocMin;
      v84 = *(_QWORD *)(NextLocMin + 8);
      v85 = *(double *)(NextLocMin + 72);
      v86 = *(double *)(*(_QWORD *)(NextLocMin + 112) + 72);
      if (v85 < v86)
        v87 = NextLocMin;
      else
        v87 = *(_QWORD *)(NextLocMin + 112);
      if (v85 < v86)
        v88 = *(_QWORD *)(NextLocMin + 112);
      else
        v88 = NextLocMin;
      if ((a4 & 1) != 0)
      {
        if (*(_QWORD *)(v88 + 104) == v87)
        {
          *(_DWORD *)(v88 + 88) = -1;
          v89 = 1;
        }
        else
        {
          *(_DWORD *)(v88 + 88) = 1;
          v89 = -1;
        }
      }
      else
      {
        v89 = 0;
        *(_DWORD *)(v88 + 88) = 0;
      }
      *(_DWORD *)(v87 + 88) = v89;
      v90 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v88, v85 >= v86, v82);
      if (*(_DWORD *)(v90 + 100) == -2)
        v90 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v90, v85 >= v86, v91);
      v92 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v87, v85 < v86, v91);
      if (*(_DWORD *)(v92 + 100) == -2)
        v92 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v92, v85 < v86, v93);
      if (*(_DWORD *)(v88 + 100) == -2)
      {
        v88 = 0;
      }
      else if (*(_DWORD *)(v87 + 100) == -2)
      {
        v87 = 0;
      }
      v95 = *(_QWORD **)(a1 + 24);
      v94 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v95 >= v94)
      {
        v97 = *(_QWORD *)(a1 + 16);
        v98 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v95 - v97) >> 3);
        v99 = v98 + 1;
        if (v98 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_173;
        v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v97) >> 3);
        if (2 * v100 > v99)
          v99 = 2 * v100;
        if (v100 >= 0x555555555555555)
          v101 = 0xAAAAAAAAAAAAAAALL;
        else
          v101 = v99;
        if (v101)
          v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(v101);
        else
          v102 = 0;
        v103 = (_QWORD *)(v101 + 24 * v98);
        *v103 = v84;
        v103[1] = v88;
        v103[2] = v87;
        v105 = *(char **)(a1 + 16);
        v104 = *(char **)(a1 + 24);
        v106 = v103;
        if (v104 != v105)
        {
          do
          {
            v107 = *(_OWORD *)(v104 - 24);
            *(v106 - 1) = *((_QWORD *)v104 - 1);
            *(_OWORD *)(v106 - 3) = v107;
            v106 -= 3;
            v104 -= 24;
          }
          while (v104 != v105);
          v104 = *(char **)(a1 + 16);
        }
        v96 = v103 + 3;
        *(_QWORD *)(a1 + 16) = v106;
        *(_QWORD *)(a1 + 24) = v103 + 3;
        *(_QWORD *)(a1 + 32) = v101 + 24 * v102;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *v95 = v84;
        v95[1] = v88;
        v96 = v95 + 3;
        v95[2] = v87;
      }
      *(_QWORD *)(a1 + 24) = v96;
      if (v85 < v86)
        v108 = v92;
      else
        v108 = v90;
      NextLocMin = ClipperLib::FindNextLocMin(v108);
    }
    while (NextLocMin != v83);
    return 1;
  }
LABEL_65:
  MEMORY[0x1C3B7F758](v146, 0x1020C80A8A5F671);
  return 0;
}

void sub_1BE37C4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::ClipperBase::AddPaths(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v4 = *a2;
  if (a2[1] == *a2)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v11 |= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4 + v9, a3, a4);
      ++v10;
      v4 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return v11 & 1;
}

_QWORD *ClipperLib::ClipperBase::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = this;
  v2 = this[2];
  this[3] = v2;
  this[1] = v2;
  v4 = this[6];
  v3 = this[7];
  if (v3 == v4)
  {
    v4 = this[7];
  }
  else
  {
    v5 = 0;
    do
    {
      this = *(_QWORD **)(v4 + 8 * v5);
      if (this)
      {
        this = (_QWORD *)MEMORY[0x1C3B7F758](this, 0x1020C80A8A5F671);
        v4 = v1[6];
        v3 = v1[7];
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  v1[7] = v4;
  *((_BYTE *)v1 + 40) = 0;
  *((_BYTE *)v1 + 73) = 0;
  return this;
}

_QWORD *ClipperLib::ClipperBase::DisposeLocalMinimaList(_QWORD *this)
{
  uint64_t v1;

  v1 = this[2];
  this[3] = v1;
  this[1] = v1;
  return this;
}

void ClipperLib::ClipperBase::Reset(ClipperLib::ClipperBase *this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = v2;
  if (v2 != v3)
  {
    std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(v2, v3, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 3)), 1);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v4)
    {
      *((_QWORD *)this + 15) = v4;
      operator delete(v4);
    }
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    v5 = (uint64_t *)*((_QWORD *)this + 2);
    if (v5 != *((uint64_t **)this + 3))
    {
      do
      {
        std::priority_queue<long long>::push((uint64_t)this + 112, *v5);
        v6 = v5[1];
        if (v6)
        {
          *(_OWORD *)(v6 + 24) = *(_OWORD *)v6;
          *(_QWORD *)(v6 + 40) = *(_QWORD *)(v6 + 16);
          *(_DWORD *)(v6 + 84) = 1;
          *(_DWORD *)(v6 + 100) = -1;
        }
        v7 = v5[2];
        if (v7)
        {
          *(_OWORD *)(v7 + 24) = *(_OWORD *)v7;
          *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 16);
          *(_DWORD *)(v7 + 84) = 2;
          *(_DWORD *)(v7 + 100) = -1;
        }
        v5 += 3;
      }
      while (v5 != *((uint64_t **)this + 3));
      v5 = (uint64_t *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 1) = v5;
  }
}

void ClipperLib::ClipperBase::InsertScanbeam(ClipperLib::ClipperBase *this, uint64_t a2)
{
  std::priority_queue<long long>::push((uint64_t)this + 112, a2);
}

uint64_t ClipperLib::ClipperBase::PopLocalMinima(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3 == *(_QWORD **)(a1 + 24) || *v3 != a2)
    return 0;
  *a3 = v3;
  *(_QWORD *)(a1 + 8) += 24;
  return 1;
}

double ClipperLib::ClipperBase::GetBounds@<D0>(ClipperLib::ClipperBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  double result;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 == v3)
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    v4 = *(uint64_t **)(v2 + 8);
    v6 = *v4;
    v5 = v4[1];
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    v7 = v6;
    v8 = v5;
    do
    {
      v9 = *(uint64_t **)(v2 + 8);
      v10 = *(uint64_t **)(v2 + 16);
      if (v5 <= v9[1])
        v5 = v9[1];
      *(_QWORD *)(a2 + 24) = v5;
      v11 = v9;
      do
      {
        v12 = (uint64_t *)v11[15];
        if (v12)
        {
          v13 = v11;
          do
          {
            v14 = *v13;
            v13 = v12;
            if (v14 < v6)
            {
              *(_QWORD *)a2 = v14;
              v6 = v14;
            }
            if (v14 > v7)
            {
              *(_QWORD *)(a2 + 16) = v14;
              v7 = v14;
            }
            v12 = (uint64_t *)v12[15];
          }
          while (v12);
        }
        else
        {
          v13 = v11;
        }
        if (*v13 < v6)
          v6 = *v13;
        *(_QWORD *)a2 = v6;
        if (v7 <= *v13)
          v7 = *v13;
        *(_QWORD *)(a2 + 16) = v7;
        if (v13[6] < v6)
          v6 = v13[6];
        *(_QWORD *)a2 = v6;
        if (v7 <= v13[6])
          v7 = v13[6];
        *(_QWORD *)(a2 + 16) = v7;
        v15 = v13[7];
        if (v15 < v8)
          v8 = v15;
        *(_QWORD *)(a2 + 8) = v8;
        v16 = v11 == v9;
        v11 = v10;
      }
      while (v16);
      v2 += 24;
    }
    while (v2 != v3);
  }
  return result;
}

void std::priority_queue<long long>::push(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    while (v5 != v7)
    {
      v14 = *--v5;
      *((_QWORD *)v13 - 1) = v14;
      v13 -= 8;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v12[8 * v11];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
  v15 = *(_QWORD **)a1;
  v16 = (uint64_t)v6 - *(_QWORD *)a1;
  if (v16 >= 9)
  {
    v17 = (((unint64_t)v16 >> 3) - 2) >> 1;
    v18 = &v15[v17];
    v21 = *(v6 - 1);
    v20 = v6 - 1;
    v19 = v21;
    v22 = *v18;
    if (*v18 < v21)
    {
      do
      {
        *v20 = v22;
        v20 = v18;
        if (!v17)
          break;
        v17 = (v17 - 1) >> 1;
        v18 = &v15[v17];
        v22 = *v18;
      }
      while (*v18 < v19);
      *v20 = v19;
    }
  }
}

BOOL ClipperLib::ClipperBase::PopScanbeam(ClipperLib::ClipperBase *this, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v2 = (uint64_t *)*((_QWORD *)this + 14);
  v3 = (uint64_t *)*((_QWORD *)this + 15);
  if (v2 != v3)
  {
    *a2 = *v2;
    v4 = (char *)v3 - (char *)v2;
    if ((char *)v3 - (char *)v2 >= 9)
    {
      v5 = 0;
      v6 = v4 >> 3;
      v7 = *v2;
      v8 = (unint64_t)((v4 >> 3) - 2) >> 1;
      v9 = v2;
      do
      {
        v10 = &v9[v5 + 1];
        v11 = (2 * v5) | 1;
        v5 = 2 * v5 + 2;
        if (v5 >= v6)
        {
          v12 = *v10;
          v5 = v11;
        }
        else
        {
          v12 = *v10;
          v13 = v10[1];
          if (*v10 <= v13)
            v12 = v10[1];
          if (*v10 >= v13)
            v5 = v11;
          else
            ++v10;
        }
        *v9 = v12;
        v9 = v10;
      }
      while (v5 <= v8);
      v14 = v3 - 1;
      if (v10 == v3 - 1)
      {
        *v10 = v7;
      }
      else
      {
        *v10 = *v14;
        *v14 = v7;
        v15 = (char *)v10 - (char *)v2 + 8;
        if (v15 >= 9)
        {
          v16 = (((unint64_t)v15 >> 3) - 2) >> 1;
          v17 = &v2[v16];
          v18 = *v17;
          v19 = *v10;
          if (*v17 < *v10)
          {
            do
            {
              *v10 = v18;
              v10 = v17;
              if (!v16)
                break;
              v16 = (v16 - 1) >> 1;
              v17 = &v2[v16];
              v18 = *v17;
            }
            while (*v17 < v19);
            *v10 = v19;
          }
        }
      }
    }
    v20 = v3 - 1;
    if (v2 == v3 - 1)
    {
LABEL_40:
      v21 = v2;
    }
    else
    {
      v21 = v3;
      while (1)
      {
        v22 = v21;
        v21 = v20;
        v23 = *a2;
        if (*a2 != *v2)
          break;
        v24 = (char *)v20 - (char *)v2;
        if ((char *)v21 - (char *)v2 >= 9)
        {
          v25 = 0;
          v26 = v24 >> 3;
          v27 = (unint64_t)((v24 >> 3) - 2) >> 1;
          v28 = v2;
          do
          {
            v29 = &v28[v25 + 1];
            v30 = (2 * v25) | 1;
            v25 = 2 * v25 + 2;
            if (v25 >= v26)
            {
              v31 = *v29;
              v25 = v30;
            }
            else
            {
              v31 = *v29;
              v32 = v29[1];
              if (*v29 <= v32)
                v31 = v29[1];
              if (*v29 >= v32)
                v25 = v30;
              else
                ++v29;
            }
            *v28 = v31;
            v28 = v29;
          }
          while (v25 <= v27);
          v33 = v22 - 2;
          if (v29 == v33)
          {
            *v29 = v23;
          }
          else
          {
            *v29 = *v33;
            *v33 = v23;
            v34 = (char *)v29 - (char *)v2 + 8;
            if (v34 >= 9)
            {
              v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
              v36 = &v2[v35];
              v37 = *v36;
              v38 = *v29;
              if (*v36 < *v29)
              {
                do
                {
                  *v29 = v37;
                  v29 = v36;
                  if (!v35)
                    break;
                  v35 = (v35 - 1) >> 1;
                  v36 = &v2[v35];
                  v37 = *v36;
                }
                while (*v36 < v38);
                *v29 = v38;
              }
            }
          }
        }
        v20 = v21 - 1;
        if (v2 == v21 - 1)
          goto LABEL_40;
      }
    }
    *((_QWORD *)this + 15) = v21;
  }
  return v2 != v3;
}

ClipperLib::ClipperBase *ClipperLib::ClipperBase::DisposeAllOutRecs(ClipperLib::ClipperBase *this)
{
  ClipperLib::ClipperBase *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = *((_QWORD *)this + 11);
  if (v2 != *((_QWORD *)this + 10))
  {
    v3 = 0;
    do
    {
      this = (ClipperLib::ClipperBase *)ClipperLib::ClipperBase::DisposeOutRec(v1, v3++);
      v2 = *((_QWORD *)v1 + 10);
    }
    while (v3 < (*((_QWORD *)v1 + 11) - v2) >> 3);
  }
  *((_QWORD *)v1 + 11) = v2;
  return this;
}

uint64_t ClipperLib::ClipperBase::DisposeOutRec(ClipperLib::ClipperBase *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * a2);
  if (*(_QWORD *)(v4 + 24))
    ClipperLib::DisposeOutPts((_QWORD *)(v4 + 24));
  result = MEMORY[0x1C3B7F770](v4, 0x1020C401FC46325);
  *(_QWORD *)(*((_QWORD *)this + 10) + 8 * a2) = 0;
  return result;
}

uint64_t ClipperLib::ClipperBase::DeleteFromAEL(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 136);
  if (*(_OWORD *)(a2 + 128) == 0)
  {
    if (*(_QWORD *)(result + 104) != a2)
      return result;
    goto LABEL_5;
  }
  if (!v3)
  {
LABEL_5:
    v4 = (_QWORD *)(result + 104);
    goto LABEL_6;
  }
  v4 = (_QWORD *)(v3 + 128);
LABEL_6:
  *v4 = v2;
  if (v2)
    *(_QWORD *)(v2 + 136) = v3;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  return result;
}

_DWORD *ClipperLib::ClipperBase::CreateOutRec(ClipperLib::ClipperBase *this)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v2 = operator new();
  v3 = (_DWORD *)v2;
  *(_WORD *)(v2 + 4) = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v5 = (uint64_t *)*((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 10);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = v3;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (uint64_t *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 10) = v13;
    *((_QWORD *)this + 11) = v6;
    *((_QWORD *)this + 12) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 11) = v6;
  *v3 = (((unint64_t)v6 - *((_QWORD *)this + 10)) >> 3) - 1;
  return v3;
}

uint64_t ClipperLib::ClipperBase::SwapPositionsInAEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 136);
  if (v4 != v3)
  {
    v6 = *(_QWORD *)(a3 + 128);
    v5 = *(_QWORD *)(a3 + 136);
    if (v6 != v5)
    {
      if (v4 == a3)
      {
        if (v6)
        {
          *(_QWORD *)(v6 + 136) = a2;
          v3 = *(_QWORD *)(a2 + 136);
        }
        if (v3)
          *(_QWORD *)(v3 + 128) = a3;
        *(_QWORD *)(a3 + 128) = a2;
        *(_QWORD *)(a3 + 136) = v3;
        *(_QWORD *)(a2 + 128) = v6;
        *(_QWORD *)(a2 + 136) = a3;
        v3 = *(_QWORD *)(a3 + 136);
      }
      else
      {
        if (v6 == a2)
        {
          if (v4)
          {
            *(_QWORD *)(v4 + 136) = a3;
            v5 = *(_QWORD *)(a3 + 136);
          }
          if (v5)
            *(_QWORD *)(v5 + 128) = a2;
          *(_QWORD *)(a2 + 128) = a3;
          *(_QWORD *)(a2 + 136) = v5;
          v3 = a2;
          *(_QWORD *)(a3 + 128) = v4;
          *(_QWORD *)(a3 + 136) = a2;
        }
        else
        {
          *(_QWORD *)(a2 + 128) = v6;
          if (v6)
          {
            *(_QWORD *)(v6 + 136) = a2;
            v5 = *(_QWORD *)(a3 + 136);
          }
          *(_QWORD *)(a2 + 136) = v5;
          if (v5)
            *(_QWORD *)(v5 + 128) = a2;
          *(_QWORD *)(a3 + 128) = v4;
          if (v4)
            *(_QWORD *)(v4 + 136) = a3;
          *(_QWORD *)(a3 + 136) = v3;
          if (v3)
            *(_QWORD *)(v3 + 128) = a3;
        }
        if (!*(_QWORD *)(a2 + 136))
          goto LABEL_26;
      }
      a2 = a3;
      if (v3)
        return result;
LABEL_26:
      *(_QWORD *)(result + 104) = a2;
    }
  }
  return result;
}

void ClipperLib::ClipperBase::UpdateEdgeIntoAEL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  ClipperLib::clipperException *exception;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 120);
  if (!v3)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "UpdateEdgeIntoAEL: invalid call");
  }
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(v2 + 100);
  v6 = v2 + 128;
  v5 = *(_QWORD *)(v2 + 128);
  v4 = *(_QWORD *)(v6 + 8);
  v7 = (_QWORD *)(a1 + 104);
  if (v4)
    v7 = (_QWORD *)(v4 + 128);
  *v7 = v3;
  if (v5)
    *(_QWORD *)(v5 + 136) = *(_QWORD *)(*a2 + 120);
  v8 = *(_QWORD *)(*a2 + 120);
  *(_OWORD *)(v8 + 84) = *(_OWORD *)(*a2 + 84);
  *a2 = v8;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(*a2 + 136) = v4;
  *(_QWORD *)(*a2 + 128) = v5;
  if (*(double *)(*a2 + 72) != -1.0e40)
    std::priority_queue<long long>::push(a1 + 112, *(_QWORD *)(*a2 + 56));
}

void sub_1BE37CFBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ClipperLib::ClipperBase::LocalMinimaPending(ClipperLib::ClipperBase *this)
{
  return *((_QWORD *)this + 1) != *((_QWORD *)this + 3);
}

double ClipperLib::Clipper::Clipper(ClipperLib::Clipper *this, uint64_t *a2, char a3)
{
  uint64_t v3;
  double result;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  *((_QWORD *)this + 9) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 120) = 0;
  v5 = *(_QWORD *)this;
  *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40) = 0;
  *((_BYTE *)this + 132) = a3 & 1;
  *((_BYTE *)this + 134) = (a3 & 2) != 0;
  *((_BYTE *)this + *(_QWORD *)(v5 - 24) + 72) = (a3 & 4) != 0;
  *((_BYTE *)this + *(_QWORD *)(v5 - 24) + 73) = 0;
  *((_QWORD *)this + 17) = 0;
  return result;
}

double ClipperLib::Clipper::Clipper(ClipperLib::Clipper *this, char a2)
{
  double result;

  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_BYTE *)this + 132) = a2 & 1;
  *((_BYTE *)this + 134) = (a2 & 2) != 0;
  *(_QWORD *)this = &off_1E7774540;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 216) = (a2 & 4) != 0;
  *((_BYTE *)this + 217) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = &off_1E7774588;
  return result;
}

uint64_t ClipperLib::Clipper::ZFillFunction(uint64_t this, void (*a2)(IntPoint *, IntPoint *, IntPoint *, IntPoint *, IntPoint *))
{
  *(_QWORD *)(this + 136) = a2;
  return this;
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  return ClipperLib::Clipper::Execute(a1, a2, a3, a4, a4);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v5;
  ClipperLib::clipperException *exception;

  if (*(_BYTE *)(a1 + 120))
    return 0;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 73))
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "Error: PolyTree struct is needed for open path clipping.");
  }
  *(_BYTE *)(a1 + 120) = 1;
  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a3, 0);
  *(_DWORD *)(a1 + 124) = a5;
  *(_DWORD *)(a1 + 128) = a4;
  *(_DWORD *)(a1 + 80) = a2;
  *(_BYTE *)(a1 + 133) = 0;
  v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if ((_DWORD)v5)
    ClipperLib::Clipper::BuildResult((uint64_t *)a1, a3);
  ClipperLib::ClipperBase::DisposeAllOutRecs((ClipperLib::ClipperBase *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
  *(_BYTE *)(a1 + 120) = 0;
  return v5;
}

void sub_1BE37D1E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, ClipperLib::PolyTree *a3, int a4)
{
  return ClipperLib::Clipper::Execute(a1, a2, a3, a4, a4);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, ClipperLib::PolyTree *a3, int a4, int a5)
{
  uint64_t v5;

  if (*(_BYTE *)(a1 + 120))
    return 0;
  *(_BYTE *)(a1 + 120) = 1;
  *(_DWORD *)(a1 + 124) = a5;
  *(_DWORD *)(a1 + 128) = a4;
  *(_DWORD *)(a1 + 80) = a2;
  *(_BYTE *)(a1 + 133) = 1;
  v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if ((_DWORD)v5)
    ClipperLib::Clipper::BuildResult2((ClipperLib::Clipper *)a1, a3);
  ClipperLib::ClipperBase::DisposeAllOutRecs((ClipperLib::ClipperBase *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
  *(_BYTE *)(a1 + 120) = 0;
  return v5;
}

void std::vector<std::vector<ClipperLib::IntPoint>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void ClipperLib::Clipper::BuildResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  void *__p;
  char *v32;
  char *v33;

  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 88) - *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 80)) >> 3);
  v4 = *a1;
  v29 = a1 + 10;
  v30 = a1;
  v5 = (_QWORD *)(*a1 - 24);
  v6 = *(uint64_t *)((char *)a1 + *v5 + 80);
  if (*(uint64_t *)((char *)a1 + *v5 + 88) != v6)
  {
    v7 = 0;
    v28 = a2;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v6 + 8 * v7) + 24))
      {
        __p = 0;
        v32 = 0;
        v33 = 0;
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v29 + *v5) + 8 * v7) + 24);
        v9 = *(_QWORD *)(v8 + 40);
        if (v9)
        {
          v10 = 0;
          v11 = *(_QWORD *)(v8 + 40);
          do
          {
            v11 = *(_QWORD *)(v11 + 32);
            ++v10;
          }
          while (v11 != v9);
          if ((_DWORD)v10 != 1)
          {
            std::vector<ClipperLib::IntPoint>::reserve(&__p, v10);
            v12 = 0;
            v13 = v32;
            do
            {
              v14 = (__int128 *)(v9 + 8);
              if (v13 >= v33)
              {
                v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)__p) >> 3);
                v17 = v16 + 1;
                if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 3) > v17)
                  v17 = 0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
                  v18 = 0xAAAAAAAAAAAAAAALL;
                else
                  v18 = v17;
                if (v18)
                  v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v33, v18);
                else
                  v19 = 0;
                v20 = &v19[24 * v16];
                v21 = *v14;
                *((_QWORD *)v20 + 2) = *(_QWORD *)(v9 + 24);
                *(_OWORD *)v20 = v21;
                v23 = (char *)__p;
                v22 = v32;
                v24 = v20;
                if (v32 != __p)
                {
                  do
                  {
                    v25 = *(_OWORD *)(v22 - 24);
                    *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
                    *(_OWORD *)(v24 - 24) = v25;
                    v24 -= 24;
                    v22 -= 24;
                  }
                  while (v22 != v23);
                  v22 = (char *)__p;
                }
                v13 = v20 + 24;
                __p = v24;
                v32 = v20 + 24;
                v33 = &v19[24 * v18];
                if (v22)
                  operator delete(v22);
              }
              else
              {
                v15 = *v14;
                *((_QWORD *)v13 + 2) = *(_QWORD *)(v9 + 24);
                *(_OWORD *)v13 = v15;
                v13 += 24;
              }
              v32 = v13;
              v9 = *(_QWORD *)(v9 + 40);
              ++v12;
            }
            while ((_DWORD)v10 != v12);
            v26 = v28[1];
            if (v26 >= v28[2])
            {
              v27 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v28, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v28, (uint64_t)&__p);
              v27 = v26 + 24;
            }
            v28[1] = v27;
            if (__p)
            {
              v32 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        v4 = *v30;
      }
      v5 = (_QWORD *)(v4 - 24);
      ++v7;
      v6 = *(uint64_t *)((char *)v30 + *(_QWORD *)(v4 - 24) + 80);
    }
    while (v7 < (*(uint64_t *)((char *)v30 + *(_QWORD *)(v4 - 24) + 88) - v6) >> 3);
  }
}

void sub_1BE37D59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ClipperLib::Clipper::BuildResult2(ClipperLib::Clipper *this, ClipperLib::PolyTree *a2)
{
  ClipperLib::PolyTree *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  __int128 *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  ClipperLib::PolyNode *v50;
  ClipperLib::PolyNode *v51;
  uint64_t v52;
  uint64_t v53;
  char **v54;
  ClipperLib::Clipper *v55;
  ClipperLib::PolyTree *v56;

  v2 = a2;
  ClipperLib::PolyTree::Clear(a2);
  v54 = (char **)((char *)v2 + 80);
  std::vector<ClipperLib::PolyNode *>::reserve((void **)v2 + 10, (uint64_t)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88)- *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80)) >> 3);
  v5 = *(_QWORD *)this;
  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  v7 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) - v6;
  if (v7)
  {
    v8 = 0;
    v53 = (uint64_t)v2 + 96;
    v56 = v2;
    v55 = this;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)(v9 + 24);
        do
        {
          v12 = *(_QWORD *)(v12 + 32);
          --v11;
        }
        while (v12 != v10);
        v13 = *(_BYTE *)(v9 + 5) ? 1 : 2;
        v14 = ~(_DWORD)v11;
        if (~(_DWORD)v11 >= v13)
        {
          ClipperLib::Clipper::FixHoleLinkage((uint64_t)v4, v9);
          v15 = operator new();
          v16 = v15;
          *(_QWORD *)v15 = &unk_1E77745C0;
          *(_OWORD *)(v15 + 8) = 0u;
          v17 = (void **)(v15 + 8);
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 53) = 0u;
          v19 = (uint64_t *)*((_QWORD *)v2 + 11);
          v18 = *((_QWORD *)v2 + 12);
          if ((unint64_t)v19 >= v18)
          {
            v21 = ((char *)v19 - *v54) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v22 = v18 - (_QWORD)*v54;
            v23 = v22 >> 2;
            if (v22 >> 2 <= (unint64_t)(v21 + 1))
              v23 = v21 + 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v53, v24);
            else
              v25 = 0;
            v26 = (uint64_t *)&v25[8 * v21];
            *v26 = v16;
            v20 = v26 + 1;
            v28 = (char *)*((_QWORD *)v2 + 10);
            v27 = (char *)*((_QWORD *)v2 + 11);
            if (v27 != v28)
            {
              do
              {
                v29 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *--v26 = v29;
              }
              while (v27 != v28);
              v27 = *v54;
            }
            *((_QWORD *)v2 + 10) = v26;
            *((_QWORD *)v2 + 11) = v20;
            *((_QWORD *)v2 + 12) = &v25[8 * v24];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v19 = v15;
            v20 = v19 + 1;
          }
          *((_QWORD *)v2 + 11) = v20;
          *(_QWORD *)(v9 + 16) = v16;
          *(_QWORD *)(v16 + 56) = 0;
          *(_DWORD *)(v16 + 64) = 0;
          std::vector<ClipperLib::IntPoint>::reserve(v17, -v11);
          v30 = 0;
          v31 = *(_QWORD *)(v9 + 24);
          v32 = (_QWORD *)(v16 + 24);
          v33 = *(char **)(v16 + 16);
          do
          {
            v31 = *(_QWORD *)(v31 + 40);
            v34 = (__int128 *)(v31 + 8);
            if ((unint64_t)v33 >= *v32)
            {
              v36 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)*v17) >> 3);
              v37 = v36 + 1;
              if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(*v32 - (_QWORD)*v17) >> 3) > v37)
                v37 = 0x5555555555555556 * ((uint64_t)(*v32 - (_QWORD)*v17) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v32 - (_QWORD)*v17) >> 3) >= 0x555555555555555)
                v38 = 0xAAAAAAAAAAAAAAALL;
              else
                v38 = v37;
              if (v38)
                v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v16 + 24, v38);
              else
                v4 = 0;
              v39 = &v4[24 * v36];
              v40 = *v34;
              *((_QWORD *)v39 + 2) = *(_QWORD *)(v31 + 24);
              *(_OWORD *)v39 = v40;
              v42 = *(char **)(v16 + 8);
              v41 = *(char **)(v16 + 16);
              v43 = v39;
              if (v41 != v42)
              {
                do
                {
                  v44 = *(_OWORD *)(v41 - 24);
                  *((_QWORD *)v43 - 1) = *((_QWORD *)v41 - 1);
                  *(_OWORD *)(v43 - 24) = v44;
                  v43 -= 24;
                  v41 -= 24;
                }
                while (v41 != v42);
                v41 = (char *)*v17;
              }
              v33 = v39 + 24;
              *(_QWORD *)(v16 + 8) = v43;
              *(_QWORD *)(v16 + 16) = v39 + 24;
              *(_QWORD *)(v16 + 24) = &v4[24 * v38];
              if (v41)
                operator delete(v41);
            }
            else
            {
              v35 = *v34;
              *((_QWORD *)v33 + 2) = *(_QWORD *)(v31 + 24);
              *(_OWORD *)v33 = v35;
              v33 += 24;
            }
            *(_QWORD *)(v16 + 16) = v33;
          }
          while (v14 != v30++);
          this = v55;
          v2 = v56;
          v5 = *(_QWORD *)v55;
        }
      }
      ++v8;
      v6 = *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24) + 80);
      v7 = *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24) + 88) - v6;
    }
    while (v8 < v7 >> 3);
  }
  std::vector<ClipperLib::PolyNode *>::reserve((void **)v2 + 4, v7 >> 3);
  v46 = *(_QWORD *)this;
  v47 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  if (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) != v47)
  {
    v48 = 0;
    while (1)
    {
      v49 = *(_QWORD *)(v47 + 8 * v48);
      v50 = *(ClipperLib::PolyNode **)(v49 + 16);
      if (v50)
        break;
LABEL_54:
      ++v48;
      v47 = *(_QWORD *)((char *)this + *(_QWORD *)(v46 - 24) + 80);
      if (v48 >= (*(_QWORD *)((char *)this + *(_QWORD *)(v46 - 24) + 88) - v47) >> 3)
        return;
    }
    if (*(_BYTE *)(v49 + 5))
    {
      *((_BYTE *)v50 + 68) = 1;
    }
    else
    {
      v52 = *(_QWORD *)(v49 + 8);
      if (v52)
      {
        v51 = *(ClipperLib::PolyNode **)(v52 + 16);
        if (v51)
          goto LABEL_53;
      }
    }
    v51 = v2;
LABEL_53:
    ClipperLib::PolyNode::AddChild(v51, v50);
    v46 = *(_QWORD *)this;
    goto LABEL_54;
  }
}

void ClipperLib::Clipper::FixHoleLinkage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a2 + 4);
    if (v3 == *(unsigned __int8 *)(v2 + 4) || !*(_QWORD *)(v2 + 24))
    {
      do
      {
        if (*(unsigned __int8 *)(v2 + 4) != v3 && *(_QWORD *)(v2 + 24))
          break;
        v2 = *(_QWORD *)(v2 + 8);
      }
      while (v2);
      *(_QWORD *)(a2 + 8) = v2;
    }
  }
}

uint64_t ClipperLib::Clipper::ExecuteInternal(ClipperLib::Clipper *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int8x16_t *v16;
  int v17;
  int8x16_t *v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  (*(void (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 32))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v25 = (uint64_t)&v25;
  v26 = &v25;
  v27 = 0;
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v2 = v27;
  if (v27)
  {
    v4 = v25;
    v3 = v26;
    v5 = *v26;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v25 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = *((_QWORD *)this + 11);
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    *((_QWORD *)this + 11) = v4;
    *(_QWORD *)(v4 + 8) = (char *)this + 88;
    *((_QWORD *)this + 13) += v2;
    v27 = 0;
  }
  std::__list_imp<long long>::clear(&v25);
  *((_QWORD *)this + 14) = 0;
  v24 = 0;
  v25 = 0;
  if (!ClipperLib::ClipperBase::PopScanbeam((ClipperLib::Clipper *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), &v25))return 0;
  ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v25);
  while (1)
  {
    v7 = ClipperLib::ClipperBase::PopScanbeam((ClipperLib::Clipper *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), &v24);
    if ((v7 & 1) == 0)
    {
      v8 = *(_QWORD *)this;
      v9 = *(_QWORD *)(*(_QWORD *)this - 24);
      v10 = (char *)this + v9;
      if (*(_QWORD *)((char *)this + v9 + 8) == *(_QWORD *)((char *)this + v9 + 24))
        break;
    }
    ClipperLib::Clipper::ProcessHorizontals(this);
    ClipperLib::Clipper::ClearGhostJoins((uint64_t)this);
    v11 = v24;
    if (!ClipperLib::Clipper::ProcessIntersections(this, v24))
    {
      v12 = 0;
      goto LABEL_32;
    }
    ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(this, v11);
    ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v11);
  }
  v14 = v10 + 80;
  v13 = *((_QWORD *)v10 + 10);
  if (*((_QWORD *)v14 + 1) != v13)
  {
    v15 = 0;
    do
    {
      v7 = *(_QWORD *)(v13 + 8 * v15);
      v16 = *(int8x16_t **)(v7 + 24);
      if (v16)
      {
        if (!*(_BYTE *)(v7 + 5))
        {
          v17 = *((unsigned __int8 *)this + 132) ^ *(unsigned __int8 *)(v7 + 4);
          if (v17 == ClipperLib::Area(v7) > 0.0)
          {
            v18 = v16;
            do
            {
              v19 = v18[2];
              v18[2] = vextq_s8(v19, v19, 8uLL);
              v18 = (int8x16_t *)v19.i64[0];
            }
            while ((int8x16_t *)v19.i64[0] != v16);
            v9 = *(_QWORD *)(v8 - 24);
          }
        }
      }
      ++v15;
      v13 = *(_QWORD *)((char *)this + v9 + 80);
    }
    while (v15 < (*(_QWORD *)((char *)this + v9 + 88) - v13) >> 3);
  }
  if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2))
  {
    ClipperLib::Clipper::JoinCommonEdges(this);
    v9 = *(_QWORD *)(*(_QWORD *)this - 24);
  }
  v20 = *(_QWORD *)((char *)this + v9 + 80);
  if (*(_QWORD *)((char *)this + v9 + 88) != v20)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(v20 + 8 * v21);
      if (*(_QWORD *)(v22 + 24))
      {
        if (*(_BYTE *)(v22 + 5))
          v7 = (uint64_t)ClipperLib::Clipper::FixupOutPolyline(v7, v22);
        else
          v7 = ClipperLib::Clipper::FixupOutPolygon((uint64_t)this, v22);
      }
      ++v21;
      v20 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
    }
    while (v21 < (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) - v20) >> 3);
  }
  if (*((_BYTE *)this + 134))
    ClipperLib::Clipper::DoSimplePolygons((uint64_t)this);
  v12 = 1;
LABEL_32:
  ClipperLib::Clipper::ClearJoins((uint64_t)this);
  ClipperLib::Clipper::ClearGhostJoins((uint64_t)this);
  return v12;
}

void ClipperLib::Clipper::InsertLocalMinimaIntoAEL(ClipperLib::Clipper *this, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  v2 = (char *)this + 40;
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = (_QWORD *)*((_QWORD *)v3 + 1);
  v4 = v3 + 8;
  v5 = v6;
  if (v6 != (_QWORD *)v4[2])
  {
    v9 = (uint64_t *)((char *)this + 112);
    do
    {
      if (*v5 != a2)
        return;
      *v4 = v5 + 3;
      v10 = v5[1];
      v11 = v5[2];
      if (v10)
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v5[1], 0);
        if (!v11)
        {
          ClipperLib::Clipper::SetWindingCount((uint64_t)this, v10);
          if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v10))
            ClipperLib::Clipper::AddOutPt(this, (_DWORD *)v10, v10);
          std::priority_queue<long long>::push((uint64_t)v9 + *(_QWORD *)(*(_QWORD *)this - 24), *(_QWORD *)(v10 + 56));
          goto LABEL_65;
        }
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v11, v10);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v10);
        *(_QWORD *)(v11 + 92) = *(_QWORD *)(v10 + 92);
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v10))
          v12 = ClipperLib::Clipper::AddLocalMinPoly(this, v10, v11, v10);
        else
          v12 = 0;
        std::priority_queue<long long>::push((uint64_t)v9 + *(_QWORD *)(*(_QWORD *)this - 24), *(_QWORD *)(v10 + 56));
      }
      else
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v5[2], 0);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v11);
        v12 = 0;
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v11))
          v12 = ClipperLib::Clipper::AddOutPt(this, (_DWORD *)v11, v11);
        if (!v11)
          goto LABEL_65;
      }
      v13 = v11;
      if (*(double *)(v11 + 72) != -1.0e40)
        goto LABEL_21;
      v14 = *v9;
      *(_QWORD *)(v11 + 152) = 0;
      if (v14)
        *(_QWORD *)(v14 + 152) = v11;
      *v9 = v11;
      *(_QWORD *)(v11 + 144) = v14;
      v13 = *(_QWORD *)(v11 + 120);
      if (v13)
LABEL_21:
        std::priority_queue<long long>::push((uint64_t)v9 + *(_QWORD *)(*(_QWORD *)this - 24), *(_QWORD *)(v13 + 56));
      if (v10)
      {
        if (v12)
        {
          if (*(double *)(v11 + 72) == -1.0e40)
          {
            v16 = *((_QWORD *)this + 4);
            v15 = *((_QWORD *)this + 5);
            if (v15 != v16)
            {
              if (*(_DWORD *)(v11 + 88))
              {
                v17 = 0;
                do
                {
                  v18 = *(uint64_t **)(v16 + 8 * v17);
                  v19 = *v18;
                  v20 = *(_QWORD *)(*v18 + 8);
                  v23 = v18[2];
                  v21 = v18 + 2;
                  v22 = v23;
                  v24 = *(_QWORD *)v11;
                  v25 = *(_QWORD *)(v11 + 48);
                  v26 = v20 <= v23;
                  if (v20 >= v23)
                    v27 = v22;
                  else
                    v27 = v20;
                  if (v26)
                    v20 = v22;
                  if (v24 >= v25)
                    v28 = *(_QWORD *)(v11 + 48);
                  else
                    v28 = *(_QWORD *)v11;
                  if (v24 <= v25)
                    v24 = *(_QWORD *)(v11 + 48);
                  if (v27 < v24 && v28 < v20)
                  {
                    v58 = *(_OWORD *)v21;
                    v59 = v21[2];
                    ClipperLib::Clipper::AddJoin(this, v19, v12, (uint64_t)&v58);
                    v16 = *((_QWORD *)this + 4);
                    v15 = *((_QWORD *)this + 5);
                  }
                  ++v17;
                }
                while (v17 < (v15 - v16) >> 3);
              }
            }
          }
        }
        if ((*(_DWORD *)(v10 + 100) & 0x80000000) == 0)
        {
          v30 = *(__int128 **)(v10 + 136);
          if (v30)
          {
            if (*((_QWORD *)v30 + 3) == *(_QWORD *)v10 && (*((_DWORD *)v30 + 25) & 0x80000000) == 0)
            {
              v56 = *v30;
              v57 = *((_QWORD *)v30 + 2);
              v54 = v30[3];
              v55 = *((_QWORD *)v30 + 8);
              v52 = *(_OWORD *)(v10 + 24);
              v53 = *(_QWORD *)(v10 + 40);
              v51 = *(_QWORD *)(v10 + 64);
              v50 = *(_OWORD *)(v10 + 48);
              if (ClipperLib::SlopesEqual(&v56, &v54, &v52, &v50, v2[*(_QWORD *)(*(_QWORD *)this - 24)])&& *(_DWORD *)(v10 + 88)&& *((_DWORD *)v30 + 22))
              {
                v31 = ClipperLib::Clipper::AddOutPt(this, v30, v10);
                v48 = *(_OWORD *)(v10 + 48);
                v49 = *(_QWORD *)(v10 + 64);
                ClipperLib::Clipper::AddJoin(this, v12, v31, (uint64_t)&v48);
              }
            }
          }
        }
        v32 = *(_QWORD *)(v10 + 128);
        if (v32 != v11)
        {
          if ((*(_DWORD *)(v11 + 100) & 0x80000000) == 0)
          {
            v33 = *(_QWORD *)(v11 + 136);
            if ((*(_DWORD *)(v33 + 100) & 0x80000000) == 0)
            {
              v46 = *(_OWORD *)(v33 + 24);
              v47 = *(_QWORD *)(v33 + 40);
              v44 = *(_OWORD *)(v33 + 48);
              v45 = *(_QWORD *)(v33 + 64);
              v42 = *(_OWORD *)(v11 + 24);
              v43 = *(_QWORD *)(v11 + 40);
              v41 = *(_QWORD *)(v11 + 64);
              v40 = *(_OWORD *)(v11 + 48);
              if (ClipperLib::SlopesEqual(&v46, &v44, &v42, &v40, v2[*(_QWORD *)(*(_QWORD *)this - 24)])&& *(_DWORD *)(v11 + 88)&& *(_DWORD *)(v33 + 88))
              {
                v34 = ClipperLib::Clipper::AddOutPt(this, (_DWORD *)v33, v11);
                v38 = *(_OWORD *)(v11 + 48);
                v39 = *(_QWORD *)(v11 + 64);
                ClipperLib::Clipper::AddJoin(this, v12, v34, (uint64_t)&v38);
                v32 = *(_QWORD *)(v10 + 128);
              }
            }
          }
          if (v32 && v32 != v11)
          {
            v35 = v10 + 24;
            do
            {
              ClipperLib::Clipper::IntersectEdges((uint64_t)this, (_DWORD *)v11, (_DWORD *)v32, v35);
              v32 = *(_QWORD *)(v32 + 128);
            }
            while (v32 != v11);
          }
        }
      }
LABEL_65:
      v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v37 = (_QWORD *)*((_QWORD *)v36 + 1);
      v4 = v36 + 8;
      v5 = v37;
    }
    while (v37 != (_QWORD *)v4[2]);
  }
}

void ClipperLib::Clipper::ProcessHorizontals(ClipperLib::Clipper *this)
{
  uint64_t *i;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = (uint64_t *)((char *)this + 112);
  for (i = (uint64_t *)*((_QWORD *)this + 14); i; i = (uint64_t *)*((_QWORD *)this + 14))
  {
    v4 = i[18];
    v5 = i[19];
    if (*((_OWORD *)i + 9) == 0)
    {
      *v2 = 0;
    }
    else
    {
      v6 = (uint64_t *)(v5 + 144);
      if (!v5)
        v6 = v2;
      *v6 = v4;
      if (v4)
        *(_QWORD *)(v4 + 152) = v5;
    }
    i[18] = 0;
    i[19] = 0;
    ClipperLib::Clipper::ProcessHorizontal(this, i);
  }
}

uint64_t ClipperLib::Clipper::ClearGhostJoins(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(_QWORD *)(this + 40);
  if (v2 != v1)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x1C3B7F770](this, 0x1020C40E349F4B1);
        v1 = *(_QWORD *)(v3 + 32);
        v2 = *(_QWORD *)(v3 + 40);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1)
      *(_QWORD *)(v3 + 40) = v1;
  }
  return this;
}

BOOL ClipperLib::Clipper::ProcessIntersections(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v3;
  _BOOL8 result;

  if (!*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 104))
    return 1;
  ClipperLib::Clipper::BuildIntersectList(this, a2);
  v3 = (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
  if (!v3)
    return 1;
  if (v3 == 1 || (result = ClipperLib::Clipper::FixupIntersectionOrder(this)))
  {
    ClipperLib::Clipper::ProcessIntersectList(this);
    *((_QWORD *)this + 14) = 0;
    return 1;
  }
  return result;
}

void sub_1BE37E21C(void *a1)
{
  uint64_t v1;
  ClipperLib::clipperException *exception;

  __cxa_begin_catch(a1);
  *(_QWORD *)(v1 + 112) = 0;
  ClipperLib::Clipper::DisposeIntersectNodes(v1);
  exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
  ClipperLib::clipperException::clipperException(exception, "ProcessIntersections error");
}

void sub_1BE37E264(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(ClipperLib::Clipper *this, uint64_t a2)
{
  _QWORD *v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _DWORD *, _DWORD *, __int128 *);
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _DWORD *v57;

  v4 = (_QWORD *)((char *)this + 104);
  v5 = *(_DWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 104);
  v57 = v5;
  if (v5)
  {
    v6 = (uint64_t *)((char *)this + 88);
    do
    {
      if (*((_QWORD *)v5 + 7) == a2)
      {
        v7 = *((_QWORD *)v5 + 15);
        if (v7)
        {
          if (*(double *)(v7 + 72) == -1.0e40)
          {
            ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)&v57);
            v5 = v57;
            if ((v57[25] & 0x80000000) == 0)
              ClipperLib::Clipper::AddOutPt(this, v57, (uint64_t)v57);
            v8 = *((_QWORD *)this + 14);
            *((_QWORD *)v5 + 19) = 0;
            if (v8)
              *(_QWORD *)(v8 + 152) = v5;
            *((_QWORD *)this + 14) = v5;
            *((_QWORD *)v5 + 18) = v8;
            goto LABEL_23;
          }
        }
        else
        {
          ClipperLib::GetMaximaPairEx(v5);
          if (!v12 || *(double *)(v12 + 72) != -1.0e40)
          {
            if (*((_BYTE *)this + 134))
            {
              v13 = operator new(0x18uLL);
              v14 = *((_QWORD *)v5 + 6);
              v13[1] = v6;
              v13[2] = v14;
              v15 = *v6;
              *v13 = *v6;
              *(_QWORD *)(v15 + 8) = v13;
              *v6 = (uint64_t)v13;
              ++*v4;
            }
            v16 = *((_QWORD *)v5 + 17);
            ClipperLib::Clipper::DoMaxima(this, (uint64_t)v5);
            if (v16)
              v17 = (_DWORD **)(v16 + 128);
            else
              v17 = (_DWORD **)((char *)v4 + *(_QWORD *)(*(_QWORD *)this - 24));
            goto LABEL_34;
          }
        }
        v11 = *((_QWORD *)v5 + 6);
      }
      else
      {
        v9 = *((double *)v5 + 9) * (double)(a2 - *((_QWORD *)v5 + 1));
        if (v9 >= 0.0)
          v10 = 0.5;
        else
          v10 = -0.5;
        v11 = *(_QWORD *)v5 + (uint64_t)(v9 + v10);
      }
      *((_QWORD *)v5 + 3) = v11;
      *((_QWORD *)v5 + 4) = a2;
LABEL_23:
      if (*((_BYTE *)this + 134))
      {
        if ((v5[25] & 0x80000000) == 0)
        {
          if (v5[22])
          {
            v18 = *((_QWORD *)v5 + 17);
            if (v18)
            {
              if ((*(_DWORD *)(v18 + 100) & 0x80000000) == 0
                && *(_QWORD *)(v18 + 24) == *((_QWORD *)v5 + 3)
                && *(_DWORD *)(v18 + 88))
              {
                v55 = *(_OWORD *)(v5 + 6);
                v56 = *((_QWORD *)v5 + 5);
                v19 = (void (*)(uint64_t, uint64_t, _DWORD *, _DWORD *, __int128 *))*((_QWORD *)this + 17);
                if (v19)
                  v19(v18, v18 + 48, v5, v5 + 12, &v55);
                v20 = ClipperLib::Clipper::AddOutPt(this, (_DWORD *)v18, (uint64_t)&v55);
                v21 = ClipperLib::Clipper::AddOutPt(this, v5, (uint64_t)&v55);
                v53 = v55;
                v54 = v56;
                ClipperLib::Clipper::AddJoin(this, v20, v21, (uint64_t)&v53);
                v5 = v57;
              }
            }
          }
        }
      }
      v17 = (_DWORD **)(v5 + 32);
LABEL_34:
      v57 = *v17;
      v5 = v57;
    }
    while (v57);
  }
  std::list<long long>::__sort<std::__less<void,void>>(*((uint64_t **)this + 12), (uint64_t *)this + 11, *((_QWORD *)this + 13));
  ClipperLib::Clipper::ProcessHorizontals(this);
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v22 = *(_DWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 104);
  v57 = v22;
  if (v22)
  {
    v23 = (char *)this + 40;
    do
    {
      if (*((_QWORD *)v22 + 7) == a2 && *((_QWORD *)v22 + 15))
      {
        if ((v22[25] & 0x80000000) != 0)
          v24 = 0;
        else
          v24 = ClipperLib::Clipper::AddOutPt(this, v22, (uint64_t)(v22 + 12));
        ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)&v57);
        v22 = v57;
        v25 = *((_QWORD *)v57 + 16);
        v26 = *((_QWORD *)v57 + 17);
        if (!v26 || *(_QWORD *)(v26 + 24) != *(_QWORD *)v57)
          goto LABEL_72;
        v27 = *(_QWORD *)(v26 + 32);
        if (v27 != *((_QWORD *)v57 + 1) || v24 == 0)
          goto LABEL_72;
        if ((*(_DWORD *)(v26 + 100) & 0x80000000) != 0)
          goto LABEL_72;
        if (v27 <= *(_QWORD *)(v26 + 56))
          goto LABEL_72;
        v51 = *(_OWORD *)(v57 + 6);
        v52 = *((_QWORD *)v57 + 5);
        v49 = *((_OWORD *)v57 + 3);
        v50 = *((_QWORD *)v57 + 8);
        v47 = *(_OWORD *)(v26 + 24);
        v48 = *(_QWORD *)(v26 + 40);
        v46 = *(_QWORD *)(v26 + 64);
        v45 = *(_OWORD *)(v26 + 48);
        if (!ClipperLib::SlopesEqual(&v51, &v49, &v47, &v45, v23[*(_QWORD *)(*(_QWORD *)this - 24)]))
          goto LABEL_72;
        if (v22[22] && *(_DWORD *)(v26 + 88))
        {
          v29 = ClipperLib::Clipper::AddOutPt(this, (_DWORD *)v26, (uint64_t)v22);
          v43 = *((_OWORD *)v22 + 3);
          v44 = *((_QWORD *)v22 + 8);
          v30 = &v43;
        }
        else
        {
LABEL_72:
          if (!v25 || *(_QWORD *)(v25 + 24) != *(_QWORD *)v22)
            goto LABEL_69;
          v31 = *(_QWORD *)(v25 + 32);
          if (v31 != *((_QWORD *)v22 + 1) || v24 == 0)
            goto LABEL_69;
          if ((*(_DWORD *)(v25 + 100) & 0x80000000) != 0)
            goto LABEL_69;
          if (v31 <= *(_QWORD *)(v25 + 56))
            goto LABEL_69;
          v41 = *(_OWORD *)(v22 + 6);
          v42 = *((_QWORD *)v22 + 5);
          v39 = *((_OWORD *)v22 + 3);
          v40 = *((_QWORD *)v22 + 8);
          v37 = *(_OWORD *)(v25 + 24);
          v38 = *(_QWORD *)(v25 + 40);
          v36 = *(_QWORD *)(v25 + 64);
          v35 = *(_OWORD *)(v25 + 48);
          if (!ClipperLib::SlopesEqual(&v41, &v39, &v37, &v35, v23[*(_QWORD *)(*(_QWORD *)this - 24)])|| !v22[22]|| !*(_DWORD *)(v25 + 88))
          {
            goto LABEL_69;
          }
          v29 = ClipperLib::Clipper::AddOutPt(this, (_DWORD *)v25, (uint64_t)v22);
          v33 = *((_OWORD *)v22 + 3);
          v34 = *((_QWORD *)v22 + 8);
          v30 = &v33;
        }
        ClipperLib::Clipper::AddJoin(this, v24, v29, (uint64_t)v30);
      }
LABEL_69:
      v22 = (_DWORD *)*((_QWORD *)v22 + 16);
      v57 = v22;
    }
    while (v22);
  }
}

void ClipperLib::Clipper::JoinCommonEdges(ClipperLib::Clipper *this)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  int **v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t LowermostRec;
  uint64_t v14;
  _DWORD *OutRec;
  int *v17;
  int v18;
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  int v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  int v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t v35;

  v1 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v1)
  {
    v3 = 0;
    v4 = (char *)this + 80;
    do
    {
      v5 = *(int ***)(v1 + 8 * v3);
      v6 = *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)this - 24)];
      v7 = *(int **)(v6 + 8 * **v5);
      do
      {
        v8 = (uint64_t)v7;
        v7 = *(int **)(v6 + 8 * *v7);
      }
      while ((int *)v8 != v7);
      v9 = *(int **)(v6 + 8 * *v5[1]);
      do
      {
        v10 = (uint64_t)v9;
        v9 = *(int **)(v6 + 8 * *v9);
      }
      while ((int *)v10 != v9);
      if (*(_QWORD *)(v8 + 24) && *(_QWORD *)(v10 + 24) && !*(_BYTE *)(v8 + 5) && !*(_BYTE *)(v10 + 5))
      {
        if (v8 == v10)
        {
          if (ClipperLib::Clipper::JoinPoints(this, v5, v8, v8))
          {
            *(_QWORD *)(v8 + 24) = *v5;
            *(_QWORD *)(v8 + 32) = 0;
            OutRec = ClipperLib::ClipperBase::CreateOutRec((ClipperLib::Clipper *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)));
            v17 = v5[1];
            *((_QWORD *)OutRec + 3) = v17;
            v18 = *OutRec;
            v19 = v17;
            do
            {
              *v19 = v18;
              v19 = (int *)*((_QWORD *)v19 + 5);
            }
            while (v19 != v17);
            v20 = *(_QWORD **)(v8 + 24);
            v21 = v20;
            v22 = v17;
            while (1)
            {
              v23 = ClipperLib::PointInPolygon((_QWORD *)v22 + 1, v20);
              if ((v23 & 0x80000000) == 0)
                break;
              v22 = (int *)*((_QWORD *)v22 + 4);
              if (v22 == v17)
                goto LABEL_42;
            }
            if (v23)
            {
LABEL_42:
              v24 = *(_BYTE *)(v8 + 4) ^ 1;
              *((_BYTE *)OutRec + 4) = v24;
              *((_QWORD *)OutRec + 1) = v8;
              if (*((_BYTE *)this + 133))
              {
                ClipperLib::Clipper::FixupFirstLefts2((uint64_t)this, (uint64_t)OutRec, v8);
                v24 = *((_BYTE *)OutRec + 4);
              }
              v25 = *((unsigned __int8 *)this + 132) ^ v24;
              if (v25 == ClipperLib::Area((uint64_t)OutRec) > 0.0)
              {
                v26 = *((_QWORD *)OutRec + 3);
                if (v26)
                {
                  v27 = (int8x16_t *)*((_QWORD *)OutRec + 3);
                  do
                  {
                    v28 = v27[2];
                    v27[2] = vextq_s8(v28, v28, 8uLL);
                    v27 = (int8x16_t *)v28.i64[0];
                  }
                  while (v28.i64[0] != v26);
                }
              }
              goto LABEL_11;
            }
            while (1)
            {
              v29 = ClipperLib::PointInPolygon(v21 + 1, v17);
              if ((v29 & 0x80000000) == 0)
                break;
              v21 = (_QWORD *)v21[4];
              if (v21 == v20)
                goto LABEL_53;
            }
            if (v29)
            {
LABEL_53:
              v30 = *(_BYTE *)(v8 + 4);
              *((_BYTE *)OutRec + 4) = v30;
              v31 = v30 ^ 1;
              *(_BYTE *)(v8 + 4) = v31;
              *((_QWORD *)OutRec + 1) = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = OutRec;
              if (*((_BYTE *)this + 133))
              {
                ClipperLib::Clipper::FixupFirstLefts2((uint64_t)this, v8, (uint64_t)OutRec);
                v31 = *(_BYTE *)(v8 + 4);
              }
              v32 = *((unsigned __int8 *)this + 132) ^ v31;
              if (v32 == ClipperLib::Area(v8) > 0.0)
              {
                v33 = *(_QWORD *)(v8 + 24);
                if (v33)
                {
                  v34 = *(int8x16_t **)(v8 + 24);
                  do
                  {
                    v35 = v34[2];
                    v34[2] = vextq_s8(v35, v35, 8uLL);
                    v34 = (int8x16_t *)v35.i64[0];
                  }
                  while (v35.i64[0] != v33);
                }
              }
              goto LABEL_11;
            }
            *((_BYTE *)OutRec + 4) = *(_BYTE *)(v8 + 4);
            *((_QWORD *)OutRec + 1) = *(_QWORD *)(v8 + 8);
            if (*((_BYTE *)this + 133))
              ClipperLib::Clipper::FixupFirstLefts1((uint64_t)this, v8, (uint64_t)OutRec);
          }
        }
        else
        {
          v11 = v8;
          do
            v11 = *(_QWORD *)(v11 + 8);
          while (v11 != v10 && v11 != 0);
          LowermostRec = v10;
          if (v11 != v10)
          {
            v14 = v10;
            do
              v14 = *(_QWORD *)(v14 + 8);
            while (v14 != v8 && v14 != 0);
            LowermostRec = v8;
            if (v14 != v8)
              LowermostRec = ClipperLib::GetLowermostRec(v8, v10);
          }
          if ((ClipperLib::Clipper::JoinPoints(this, v5, v8, v10) & 1) != 0)
          {
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 32) = 0;
            *(_DWORD *)v10 = *(_DWORD *)v8;
            *(_BYTE *)(v8 + 4) = *(_BYTE *)(LowermostRec + 4);
            if (LowermostRec == v10)
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v10 + 8);
            *(_QWORD *)(v10 + 8) = v8;
            if (*((_BYTE *)this + 133))
              ClipperLib::Clipper::FixupFirstLefts3((uint64_t *)this, v10, v8);
          }
        }
      }
LABEL_11:
      ++v3;
      v1 = *((_QWORD *)this + 1);
    }
    while (v3 < (*((_QWORD *)this + 2) - v1) >> 3);
  }
}

_QWORD *ClipperLib::Clipper::FixupOutPolyline(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  result = *(_QWORD **)(a2 + 24);
  v4 = (_QWORD *)result[5];
  if (result == v4)
  {
    v8 = *(_QWORD **)(a2 + 24);
LABEL_14:
    result = ClipperLib::DisposeOutPts(&v8);
    *(_QWORD *)(a2 + 24) = 0;
    return result;
  }
  do
  {
    result = (_QWORD *)result[4];
    v5 = (_QWORD *)result[5];
    if (result[1] == v5[1] && result[2] == v5[2])
    {
      if (result == v4)
        v4 = (_QWORD *)result[5];
      v5[4] = result[4];
      *(_QWORD *)(result[4] + 40) = v5;
      MEMORY[0x1C3B7F770]();
      result = v5;
    }
  }
  while (result != v4);
  v7 = (_QWORD *)result[5];
  v8 = result;
  if (result == v7)
    goto LABEL_14;
  return result;
}

uint64_t ClipperLib::Clipper::FixupOutPolygon(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v15;
  __int128 v17;
  uint64_t result;
  __int128 v19;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;

  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD **)(a2 + 24);
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 72))
    v5 = 1;
  else
    v5 = *(_BYTE *)(a1 + 134) != 0;
  v20 = v5;
  v6 = v4 + 5;
  v7 = (_QWORD *)v4[5];
  if (v7 != v4)
  {
    v8 = 0;
    v21 = a1 + 40;
    while (1)
    {
      v9 = (_QWORD *)v4[4];
      if (v7 == v9)
        break;
      v10 = v4[1];
      v11 = v4[2];
      v12 = (__int128 *)(v4 + 1);
      v13 = (__int128 *)(v9 + 1);
      if (v10 == v9[1] && v11 == v9[2])
        goto LABEL_22;
      v15 = (__int128 *)(v7 + 1);
      if (v10 == v7[1] && v11 == v7[2])
        goto LABEL_22;
      v33 = v7[3];
      v32 = *v15;
      v17 = *v12;
      v31 = v4[3];
      v30 = v17;
      v28 = *v13;
      v29 = v9[3];
      result = ClipperLib::SlopesEqual(&v32, (uint64_t *)&v30, &v28, *(unsigned __int8 *)(v21 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
      if (!(_DWORD)result)
        goto LABEL_18;
      if (!v20)
        goto LABEL_22;
      v27 = v7[3];
      v26 = *v15;
      v19 = *v12;
      v25 = v4[3];
      v24 = v19;
      v22 = *v13;
      v23 = v9[3];
      result = ClipperLib::Pt2IsBetweenPt1AndPt3((uint64_t *)&v26, (uint64_t *)&v24, (uint64_t *)&v22);
      if ((result & 1) == 0)
      {
LABEL_22:
        v7[4] = v9;
        *(_QWORD *)(v4[4] + 40) = v7;
        v9 = (_QWORD *)*v6;
        MEMORY[0x1C3B7F770](v4, 0x1020C404ACFEA97);
        v8 = 0;
      }
      else
      {
LABEL_18:
        if (v4 == v8)
          goto LABEL_27;
        if (!v8)
          v8 = v4;
      }
      v6 = v9 + 5;
      v7 = (_QWORD *)v9[5];
      v4 = v9;
      if (v7 == v9)
        goto LABEL_26;
    }
  }
  v9 = v4;
LABEL_26:
  v34 = v9;
  result = (uint64_t)ClipperLib::DisposeOutPts(&v34);
  v8 = 0;
LABEL_27:
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t ClipperLib::Clipper::DoSimplePolygons(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *OutRec;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  if (*(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) != v2)
  {
    v3 = this;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      v6 = *(_QWORD **)(v5 + 24);
      if (v6 && !*(_BYTE *)(v5 + 5))
      {
        v7 = *(_QWORD **)(v5 + 24);
        do
        {
          if ((_QWORD *)v7[4] == v6)
            break;
          v6 = (_QWORD *)v7[4];
          do
          {
            if (v7[1] == v6[1] && v7[2] == v6[2] && (_QWORD *)v6[4] != v7)
            {
              v9 = (_QWORD *)v6[5];
              if (v9 != v7)
              {
                v10 = v7[5];
                v7[5] = v9;
                v9[4] = v7;
                v6[5] = v10;
                *(_QWORD *)(v10 + 32) = v6;
                *(_QWORD *)(v5 + 24) = v7;
                OutRec = ClipperLib::ClipperBase::CreateOutRec((ClipperLib::ClipperBase *)(v3
                                                                                         + *(_QWORD *)(*(_QWORD *)v3 - 24)));
                *((_QWORD *)OutRec + 3) = v6;
                v12 = *OutRec;
                v13 = v6;
                do
                {
                  *(_DWORD *)v13 = v12;
                  v13 = (_QWORD *)v13[5];
                }
                while (v13 != v6);
                v14 = *(_QWORD **)(v5 + 24);
                v15 = v14;
                v16 = v6;
                while (1)
                {
                  this = ClipperLib::PointInPolygon(v16 + 1, v14);
                  if ((this & 0x80000000) == 0)
                    break;
                  v16 = (_QWORD *)v16[4];
                  if (v16 == v6)
                    goto LABEL_22;
                }
                if (!(_DWORD)this)
                {
                  while (1)
                  {
                    this = ClipperLib::PointInPolygon(v15 + 1, v6);
                    if ((this & 0x80000000) == 0)
                      break;
                    v15 = (_QWORD *)v15[4];
                    if (v15 == v14)
                      goto LABEL_32;
                  }
                  if ((_DWORD)this)
                  {
LABEL_32:
                    v20 = *(_BYTE *)(v5 + 4);
                    *((_BYTE *)OutRec + 4) = v20;
                    *(_BYTE *)(v5 + 4) = v20 ^ 1;
                    *((_QWORD *)OutRec + 1) = *(_QWORD *)(v5 + 8);
                    *(_QWORD *)(v5 + 8) = OutRec;
                    v6 = v7;
                    if (!*(_BYTE *)(v3 + 133))
                      goto LABEL_26;
                    v17 = v3;
                    v18 = v5;
                    v19 = (uint64_t)OutRec;
                    goto LABEL_24;
                  }
                  *((_BYTE *)OutRec + 4) = *(_BYTE *)(v5 + 4);
                  *((_QWORD *)OutRec + 1) = *(_QWORD *)(v5 + 8);
                  v6 = v7;
                  if (!*(_BYTE *)(v3 + 133))
                    goto LABEL_26;
                  this = ClipperLib::Clipper::FixupFirstLefts1(v3, v5, (uint64_t)OutRec);
                  goto LABEL_25;
                }
LABEL_22:
                *((_BYTE *)OutRec + 4) = *(_BYTE *)(v5 + 4) ^ 1;
                *((_QWORD *)OutRec + 1) = v5;
                v6 = v7;
                if (!*(_BYTE *)(v3 + 133))
                  goto LABEL_26;
                v17 = v3;
                v18 = (uint64_t)OutRec;
                v19 = v5;
LABEL_24:
                this = ClipperLib::Clipper::FixupFirstLefts2(v17, v18, v19);
LABEL_25:
                v6 = v7;
              }
            }
LABEL_26:
            v6 = (_QWORD *)v6[4];
          }
          while (v6 != *(_QWORD **)(v5 + 24));
          v7 = (_QWORD *)v7[4];
        }
        while (v7 != v6);
        v1 = *(_QWORD *)v3;
      }
      ++v4;
      v2 = *(_QWORD *)(v3 + *(_QWORD *)(v1 - 24) + 80);
    }
    while (v4 < (*(_QWORD *)(v3 + *(_QWORD *)(v1 - 24) + 88) - v2) >> 3);
  }
  return this;
}

uint64_t ClipperLib::Clipper::ClearJoins(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16);
  if (v2 != v1)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x1C3B7F770](this, 0x1020C40E349F4B1);
        v1 = *(_QWORD *)(v3 + 8);
        v2 = *(_QWORD *)(v3 + 16);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1)
      *(_QWORD *)(v3 + 16) = v1;
  }
  return this;
}

uint64_t ClipperLib::Clipper::SetWindingCount(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char i;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a2 + 136);
  v3 = *(_DWORD *)(a2 + 80);
  if (v2)
  {
    while (1)
    {
      if (*(_DWORD *)(v2 + 80) == v3)
      {
        v4 = *(_DWORD *)(v2 + 88);
        if (v4)
          break;
      }
      v2 = *(_QWORD *)(v2 + 136);
      if (!v2)
        goto LABEL_5;
    }
    v9 = *(_DWORD *)(a2 + 88);
    if (v9)
    {
      v10 = 124;
      if (!v3)
        v10 = 128;
      if (!*(_DWORD *)(result + v10))
        goto LABEL_45;
      v11 = *(_DWORD *)(v2 + 92);
      if (((v11 * v4) & 0x80000000) == 0)
      {
        if (((v9 * v4) & 0x80000000) == 0)
          v12 = *(_DWORD *)(a2 + 88);
        else
          v12 = 0;
        v9 = v11 + v12;
        goto LABEL_45;
      }
LABEL_28:
      if (v11 >= 0)
        v14 = v11;
      else
        v14 = -v11;
      if (v9 <= 1)
        v15 = 1;
      else
        v15 = *(_DWORD *)(a2 + 88);
      if (((v9 * v4) & 0x80000000) == 0)
        v16 = *(_DWORD *)(a2 + 88);
      else
        v16 = 0;
      v17 = v11 + v16;
      if (v14 >= 2)
        v9 = v17;
      else
        v9 = v15;
      goto LABEL_45;
    }
    if (*(_DWORD *)(result + 80) == 1)
    {
      v13 = 124;
      if (!v3)
        v13 = 128;
      if (!*(_DWORD *)(result + v13))
      {
        v18 = *(_QWORD *)(v2 + 136);
        for (i = 1; v18; v18 = *(_QWORD *)(v18 + 136))
        {
          if (*(_DWORD *)(v18 + 80) == v3)
            i ^= *(_DWORD *)(v18 + 88) != 0;
        }
        v9 = (i & 1) == 0;
        goto LABEL_45;
      }
      v11 = *(_DWORD *)(v2 + 92);
      if (v11 * v4 < 0)
        goto LABEL_28;
      v9 = ((v11 >> 31) | 1) + v11;
    }
    else
    {
      v9 = 1;
    }
LABEL_45:
    v7 = *(_DWORD *)(v2 + 96);
    *(_DWORD *)(a2 + 92) = v9;
    *(_DWORD *)(a2 + 96) = v7;
    v8 = (uint64_t *)(v2 + 128);
    goto LABEL_46;
  }
LABEL_5:
  v5 = *(_DWORD *)(a2 + 88);
  if (!v5)
  {
    v6 = 124;
    if (!v3)
      v6 = 128;
    if (*(_DWORD *)(result + v6) == 3)
      v5 = -1;
    else
      v5 = 1;
  }
  v7 = 0;
  *(_DWORD *)(a2 + 92) = v5;
  *(_DWORD *)(a2 + 96) = 0;
  v8 = (uint64_t *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 104);
LABEL_46:
  v20 = *v8;
  v21 = v3 == 0;
  v22 = 128;
  if (v21)
    v22 = 124;
  if (*(_DWORD *)(result + v22))
  {
    if (v20 != a2)
    {
      do
      {
        v7 += *(_DWORD *)(v20 + 88);
        v20 = *(_QWORD *)(v20 + 128);
      }
      while (v20 != a2);
      *(_DWORD *)(a2 + 96) = v7;
    }
  }
  else
  {
    while (v20 != a2)
    {
      if (*(_DWORD *)(v20 + 88))
      {
        v7 = v7 == 0;
        *(_DWORD *)(a2 + 96) = v7;
      }
      v20 = *(_QWORD *)(v20 + 128);
    }
  }
  return result;
}

BOOL ClipperLib::Clipper::IsEvenOddFillType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 124;
  if (!*(_DWORD *)(a2 + 80))
    v2 = 128;
  return *(_DWORD *)(a1 + v2) == 0;
}

BOOL ClipperLib::Clipper::IsEvenOddAltFillType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 128;
  if (!*(_DWORD *)(a2 + 80))
    v2 = 124;
  return *(_DWORD *)(a1 + v2) == 0;
}

uint64_t ClipperLib::Clipper::IsContributing(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v10;

  v2 = a2[20];
  v3 = 124;
  if (v2)
    v4 = 124;
  else
    v4 = 128;
  if (v2)
    v3 = 128;
  v5 = *(_DWORD *)(a1 + v3);
  v6 = *(_DWORD *)(a1 + v4);
  switch(v6)
  {
    case 2:
LABEL_10:
      v7 = a2[23];
      goto LABEL_13;
    case 1:
      v7 = a2[23];
      if (v7 < 0)
        v7 = -v7;
LABEL_13:
      if (v7 == 1)
        goto LABEL_14;
      return 0;
    case 0:
      if (a2[22])
        goto LABEL_14;
      goto LABEL_10;
  }
  if (a2[23] != -1)
    return 0;
LABEL_14:
  switch(*(_DWORD *)(a1 + 80))
  {
    case 0:
      v8 = v5 == 2;
      if (v5 >= 2)
        goto LABEL_21;
      return a2[24] != 0;
    case 1:
      goto LABEL_26;
    case 2:
      v8 = v5 == 2;
      if (v2)
      {
        if (v5 < 2)
          return a2[24] != 0;
LABEL_21:
        if (v8)
          return a2[24] > 0;
        v10 = a2[24];
      }
      else
      {
        if (v5 < 2)
          return a2[24] == 0;
LABEL_29:
        if (v8)
          return a2[24] < 1;
        v10 = ~a2[24];
      }
      result = v10 >> 31;
      break;
    case 3:
      if (a2[22])
        return 1;
LABEL_26:
      v8 = v5 == 2;
      if (v5 < 2)
        return a2[24] == 0;
      goto LABEL_29;
    default:
      return 1;
  }
  return result;
}

uint64_t ClipperLib::Clipper::AddLocalMinPoly(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[3];
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];

  v6 = a2;
  v8 = *(double *)(a3 + 72);
  if (v8 != -1.0e40 && *(double *)(a2 + 72) <= v8)
  {
    v9 = ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)a3, a4);
    *(_DWORD *)(v6 + 100) = *(_DWORD *)(a3 + 100);
    *(_DWORD *)(v6 + 84) = 2;
    *(_DWORD *)(a3 + 84) = 1;
    v10 = *(_QWORD *)(a3 + 136);
    v11 = v6;
    _ZF = v10 == v6;
    v6 = a3;
    if (!_ZF)
      goto LABEL_5;
    goto LABEL_4;
  }
  v9 = ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)a2, a4);
  *(_DWORD *)(a3 + 100) = *(_DWORD *)(v6 + 100);
  *(_DWORD *)(v6 + 84) = 1;
  *(_DWORD *)(a3 + 84) = 2;
  v10 = *(_QWORD *)(v6 + 136);
  v11 = a3;
  if (v10 == a3)
LABEL_4:
    v10 = *(_QWORD *)(v11 + 136);
LABEL_5:
  if (v10 && (*(_DWORD *)(v10 + 100) & 0x80000000) == 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)(v10 + 56) == v12)
    {
      v13 = *(_QWORD *)(v10 + 48);
    }
    else
    {
      v14 = *(double *)(v10 + 72) * (double)(v12 - *(_QWORD *)(v10 + 8));
      v15 = 0.5;
      if (v14 < 0.0)
        v15 = -0.5;
      v13 = *(_QWORD *)v10 + (uint64_t)(v14 + v15);
    }
    if (*(_QWORD *)(v6 + 56) == v12)
    {
      v16 = *(_QWORD *)(v6 + 48);
    }
    else
    {
      v17 = *(double *)(v6 + 72) * (double)(v12 - *(_QWORD *)(v6 + 8));
      v18 = 0.5;
      if (v17 < 0.0)
        v18 = -0.5;
      v16 = *(_QWORD *)v6 + (uint64_t)(v17 + v18);
    }
    if (v13 == v16)
    {
      if (*(_DWORD *)(v6 + 88))
      {
        if (*(_DWORD *)(v10 + 88))
        {
          v33[0] = v13;
          v33[1] = v12;
          __asm { FMOV            V0.2S, #-1.0 }
          v33[2] = _D0;
          v31 = *(_OWORD *)(v10 + 48);
          v32 = *(_QWORD *)(v10 + 64);
          v30[0] = v13;
          v30[1] = v12;
          v30[2] = _D0;
          v28 = *(_OWORD *)(v6 + 48);
          v29 = *(_QWORD *)(v6 + 64);
          if (ClipperLib::SlopesEqual(v33, &v31, v30, &v28, *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40)))
          {
            v24 = ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)v10, a4);
            v26 = *(_OWORD *)(v6 + 48);
            v27 = *(_QWORD *)(v6 + 64);
            ClipperLib::Clipper::AddJoin(a1, v9, v24, (uint64_t)&v26);
          }
        }
      }
    }
  }
  return v9;
}

uint64_t ClipperLib::Clipper::AddOutPt(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  ClipperLib::ClipperBase *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v12;
  _DWORD *OutRec;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[25];
  v7 = (ClipperLib::ClipperBase *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if ((v6 & 0x80000000) != 0)
  {
    OutRec = ClipperLib::ClipperBase::CreateOutRec(v7);
    *((_BYTE *)OutRec + 5) = a2[22] == 0;
    v12 = operator new();
    *((_QWORD *)OutRec + 3) = v12;
    v14 = *OutRec;
    *(_DWORD *)v12 = *OutRec;
    v15 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
    *(_QWORD *)(v12 + 24) = v15;
    *(_QWORD *)(v12 + 32) = v12;
    *(_QWORD *)(v12 + 40) = v12;
    if (!*((_BYTE *)OutRec + 5))
    {
      ClipperLib::Clipper::SetHoleState(a1, (uint64_t)a2, (uint64_t)OutRec);
      v14 = *OutRec;
    }
    a2[25] = v14;
  }
  else
  {
    v8 = *(_QWORD *)(*((_QWORD *)v7 + 10) + 8 * v6);
    v9 = *(_QWORD **)(v8 + 24);
    v10 = a2[21];
    if (v10 == 1)
    {
      if (*(_QWORD *)a3 == v9[1] && *(_QWORD *)(a3 + 8) == v9[2])
        return *(_QWORD *)(v8 + 24);
      goto LABEL_16;
    }
    v12 = v9[5];
    if (*(_QWORD *)a3 != *(_QWORD *)(v12 + 8) || *(_QWORD *)(a3 + 8) != *(_QWORD *)(v12 + 16))
    {
LABEL_16:
      v17 = operator new();
      v12 = v17;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)(v17 + 8) = *(_OWORD *)a3;
      *(_QWORD *)(v17 + 24) = v18;
      *(_QWORD *)(v17 + 32) = v9;
      v19 = v9[5];
      *(_QWORD *)(v17 + 40) = v19;
      *(_QWORD *)(v19 + 32) = v17;
      v9[5] = v17;
      if (v10 == 1)
        *(_QWORD *)(v8 + 24) = v17;
    }
  }
  return v12;
}

void ClipperLib::Clipper::AddJoin(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v8 = operator new();
  v9 = v8;
  *(_QWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = a3;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a4;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a4 + 16);
  v11 = (uint64_t *)a1[2];
  v10 = a1[3];
  if ((unint64_t)v11 >= v10)
  {
    v13 = a1[1];
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v17);
    else
      v18 = 0;
    v19 = (uint64_t *)(v17 + 8 * v14);
    v20 = v17 + 8 * v18;
    *v19 = v9;
    v12 = v19 + 1;
    v22 = (char *)a1[1];
    v21 = (char *)a1[2];
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)a1[1];
    }
    a1[1] = v19;
    a1[2] = v12;
    a1[3] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = v8;
    v12 = v11 + 1;
  }
  a1[2] = v12;
}

uint64_t ClipperLib::Clipper::AddLocalMaxPoly(_QWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  result = ClipperLib::Clipper::AddOutPt(a1, a2, a4);
  if (!a3[22])
    result = ClipperLib::Clipper::AddOutPt(a1, a3, a4);
  v9 = a2[25];
  v10 = a3[25];
  if (v9 == v10)
  {
    a2[25] = -1;
    a3[25] = -1;
  }
  else
  {
    if (v9 < v10)
    {
      v11 = (uint64_t)a2;
      v12 = (uint64_t)a3;
    }
    else
    {
      v11 = (uint64_t)a3;
      v12 = (uint64_t)a2;
    }
    return ClipperLib::Clipper::AppendPolygon(a1, v11, v12);
  }
  return result;
}

uint64_t ClipperLib::Clipper::AppendPolygon(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 80);
  v7 = *(_QWORD *)(v6 + 8 * *(int *)(a2 + 100));
  v8 = *(_QWORD *)(v6 + 8 * *(int *)(a3 + 100));
  v9 = v7;
  do
    v9 = *(_QWORD *)(v9 + 8);
  while (v9 != v8 && v9 != 0);
  result = v8;
  if (v9 != v8)
  {
    v12 = v8;
    do
      v12 = *(_QWORD *)(v12 + 8);
    while (v12 != v7 && v12 != 0);
    result = v7;
    if (v12 != v7)
      result = ClipperLib::GetLowermostRec(v7, v8);
  }
  v14 = *(_QWORD *)(v7 + 24);
  v15 = *(_QWORD *)(v14 + 40);
  v16 = *(_QWORD *)(v8 + 24);
  v17 = *(_QWORD *)(v16 + 40);
  v18 = *(_DWORD *)(a2 + 84);
  v19 = *(_DWORD *)(a3 + 84);
  if (v18 == 1)
  {
    if (v19 == 1)
    {
      v20 = *(int8x16_t **)(v8 + 24);
      do
      {
        v21 = v20[2];
        v20[2] = vextq_s8(v21, v21, 8uLL);
        v20 = (int8x16_t *)v21.i64[0];
      }
      while (v21.i64[0] != v16);
      *(_QWORD *)(v16 + 32) = v14;
      *(_QWORD *)(v14 + 40) = v16;
      *(_QWORD *)(v15 + 32) = v17;
      *(_QWORD *)(v17 + 40) = v15;
      *(_QWORD *)(v7 + 24) = v17;
    }
    else
    {
      *(_QWORD *)(v17 + 32) = v14;
      *(_QWORD *)(v14 + 40) = v17;
      *(_QWORD *)(v16 + 40) = v15;
      *(_QWORD *)(v15 + 32) = v16;
      *(_QWORD *)(v7 + 24) = v16;
    }
  }
  else if (v19 == 2)
  {
    v22 = *(int8x16_t **)(v8 + 24);
    do
    {
      v23 = v22[2];
      v22[2] = vextq_s8(v23, v23, 8uLL);
      v22 = (int8x16_t *)v23.i64[0];
    }
    while (v23.i64[0] != v16);
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v17 + 40) = v15;
    *(_QWORD *)(v16 + 32) = v14;
    *(_QWORD *)(v14 + 40) = v16;
  }
  else
  {
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v16 + 40) = v15;
    *(_QWORD *)(v14 + 40) = v17;
    *(_QWORD *)(v17 + 32) = v14;
  }
  *(_QWORD *)(v7 + 32) = 0;
  if (result == v8)
  {
    v24 = *(_QWORD *)(v8 + 8);
    if (v24 != v7)
      *(_QWORD *)(v7 + 8) = v24;
    *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 + 4);
  }
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 8) = v7;
  v25 = *(_DWORD *)(a2 + 100);
  v26 = *(_DWORD *)(a3 + 100);
  *(_DWORD *)(a2 + 100) = -1;
  *(_DWORD *)(a3 + 100) = -1;
  v27 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 104);
  if (v27)
  {
    while (*(_DWORD *)(v27 + 100) != v26)
    {
      v27 = *(_QWORD *)(v27 + 128);
      if (!v27)
        goto LABEL_36;
    }
    *(_DWORD *)(v27 + 100) = v25;
    *(_DWORD *)(v27 + 84) = v18;
  }
LABEL_36:
  *(_DWORD *)v8 = *(_DWORD *)v7;
  return result;
}

uint64_t ClipperLib::Clipper::AddEdgeToSEL(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 112);
  *(_QWORD *)(a2 + 152) = 0;
  if (v2)
    *(_QWORD *)(v2 + 152) = a2;
  *(_QWORD *)(result + 112) = a2;
  *(_QWORD *)(a2 + 144) = v2;
  return result;
}

BOOL ClipperLib::Clipper::PopEdgeFromSEL(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 112);
  v2 = (_QWORD *)(a1 + 112);
  v3 = v4;
  if (v4)
  {
    *a2 = v3;
    v6 = *(_QWORD *)(*v2 + 144);
    v7 = *(_QWORD *)(*v2 + 152);
    v5 = *v2 + 144;
    if (*(_OWORD *)v5 == 0)
    {
      *v2 = 0;
    }
    else
    {
      v8 = (_QWORD *)(v7 + 144);
      if (!v7)
        v8 = v2;
      *v8 = v6;
      if (v6)
        *(_QWORD *)(v6 + 152) = v7;
    }
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  return v3 != 0;
}

uint64_t ClipperLib::Clipper::DeleteFromSEL(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a2 + 144);
  v3 = *(_QWORD *)(a2 + 152);
  if (*(_OWORD *)(a2 + 144) == 0)
  {
    if (*(_QWORD *)(result + 112) != a2)
      return result;
    goto LABEL_5;
  }
  if (!v3)
  {
LABEL_5:
    v4 = (_QWORD *)(result + 112);
    goto LABEL_6;
  }
  v4 = (_QWORD *)(v3 + 144);
LABEL_6:
  *v4 = v2;
  if (v2)
    *(_QWORD *)(v2 + 152) = v3;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  return result;
}

__n128 ClipperLib::Clipper::CopyAELToSEL(ClipperLib::Clipper *this)
{
  __n128 *v1;
  __n128 result;

  v1 = *(__n128 **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 104);
  *((_QWORD *)this + 14) = v1;
  if (v1)
  {
    do
    {
      result = v1[8];
      v1[9] = result;
      v1 = (__n128 *)result.n128_u64[0];
    }
    while (result.n128_u64[0]);
  }
  return result;
}

void ClipperLib::Clipper::AddGhostJoin(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a3 + 16);
  v9 = (uint64_t *)a1[5];
  v8 = a1[6];
  if ((unint64_t)v9 >= v8)
  {
    v11 = a1[4];
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v15);
    else
      v16 = 0;
    v17 = (uint64_t *)(v15 + 8 * v12);
    v18 = v15 + 8 * v16;
    *v17 = v7;
    v10 = v17 + 1;
    v20 = (char *)a1[4];
    v19 = (char *)a1[5];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)a1[4];
    }
    a1[4] = v17;
    a1[5] = v10;
    a1[6] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[5] = v10;
}

uint64_t *ClipperLib::Clipper::InsertEdgeIntoAEL(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;

  v3 = *result;
  if (!*(uint64_t *)((char *)result + *(_QWORD *)(*result - 24) + 104))
  {
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
LABEL_43:
    v16 = (uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 104);
    goto LABEL_44;
  }
  if (!a3)
  {
    a3 = *(uint64_t *)((char *)result + *(_QWORD *)(*result - 24) + 104);
    v18 = *(_QWORD *)(a2 + 24);
    v19 = *(_QWORD *)(a3 + 24);
    v20 = v18 < v19;
    if (v18 == v19)
    {
      v21 = *(_QWORD *)(a2 + 56);
      v22 = *(_QWORD *)(a3 + 56);
      if (v21 <= v22)
      {
        if (v21 == v22)
        {
          v25 = *(_QWORD *)(a2 + 48);
        }
        else
        {
          v26 = *(double *)(a2 + 72) * (double)(v22 - *(_QWORD *)(a2 + 8));
          v27 = 0.5;
          if (v26 < 0.0)
            v27 = -0.5;
          v25 = *(_QWORD *)a2 + (uint64_t)(v26 + v27);
        }
        if (*(_QWORD *)(a3 + 48) <= v25)
          goto LABEL_3;
LABEL_42:
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 128) = *(uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 104);
        *(_QWORD *)(*(uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 104) + 136) = a2;
        goto LABEL_43;
      }
      v23 = *(double *)(a3 + 72) * (double)(v21 - *(_QWORD *)(a3 + 8));
      v24 = 0.5;
      if (v23 < 0.0)
        v24 = -0.5;
      v20 = *(_QWORD *)(a2 + 48) < *(_QWORD *)a3 + (uint64_t)(v23 + v24);
    }
    if (!v20)
      goto LABEL_3;
    goto LABEL_42;
  }
LABEL_3:
  v4 = *(_QWORD *)(a3 + 128);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = a3;
    while (1)
    {
      a3 = v6;
      v6 = v4;
      v7 = *(_QWORD *)(v4 + 24);
      v8 = v5 < v7;
      if (v5 == v7)
      {
        v9 = *(_QWORD *)(a2 + 56);
        v10 = *(_QWORD *)(v6 + 56);
        if (v9 <= v10)
        {
          if (v9 == v10)
          {
            v13 = *(_QWORD *)(a2 + 48);
          }
          else
          {
            v14 = *(double *)(a2 + 72) * (double)(v10 - *(_QWORD *)(a2 + 8));
            if (v14 >= 0.0)
              v15 = 0.5;
            else
              v15 = -0.5;
            v13 = *(_QWORD *)a2 + (uint64_t)(v14 + v15);
          }
          if (*(_QWORD *)(v6 + 48) > v13)
            goto LABEL_24;
          goto LABEL_21;
        }
        v11 = *(double *)(v6 + 72) * (double)(v9 - *(_QWORD *)(v6 + 8));
        if (v11 >= 0.0)
          v12 = 0.5;
        else
          v12 = -0.5;
        v8 = *(_QWORD *)(a2 + 48) < *(_QWORD *)v6 + (uint64_t)(v11 + v12);
      }
      if (v8)
        goto LABEL_24;
LABEL_21:
      v4 = *(_QWORD *)(v6 + 128);
      if (!v4)
      {
        a3 = v6;
        break;
      }
    }
  }
  v6 = 0;
LABEL_24:
  *(_QWORD *)(a2 + 128) = v6;
  v16 = (_QWORD *)(a3 + 128);
  v17 = *(_QWORD *)(a3 + 128);
  if (v17)
    *(_QWORD *)(v17 + 136) = a2;
  *(_QWORD *)(a2 + 136) = a3;
LABEL_44:
  *v16 = a2;
  return result;
}

uint64_t ClipperLib::Clipper::IntersectEdges(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t (*v10)(_DWORD *, _DWORD *, _DWORD *, _DWORD *, uint64_t);
  int v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int *v35;
  int *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  v7 = result;
  v8 = a2[25];
  v9 = a3[25];
  v10 = *(uint64_t (**)(_DWORD *, _DWORD *, _DWORD *, _DWORD *, uint64_t))(result + 136);
  if (v10)
    result = v10(a2, a2 + 12, a3, a3 + 12, a4);
  v11 = a2[22];
  v12 = a3[22];
  if (!v11)
  {
    if (!v12)
      return result;
    if (a2[20] == a3[20])
    {
      if (*(_DWORD *)(v7 + 80) != 1 || v9 < 0)
        return result;
    }
    else
    {
      v26 = a3[23];
      if (v26 < 0)
        v26 = -v26;
      if (v26 != 1 || *(_DWORD *)(v7 + 80) == 1 && a3[24])
        return result;
    }
    result = ClipperLib::Clipper::AddOutPt((_QWORD *)v7, a2, a4);
    if ((v8 & 0x80000000) == 0)
      a2[25] = -1;
    return result;
  }
  v13 = a2[20];
  v14 = a3[20];
  if (!v12)
  {
    if (v13 == v14)
    {
      if (*(_DWORD *)(v7 + 80) != 1 || v8 < 0)
        return result;
    }
    else
    {
      v27 = a2[23];
      if (v27 < 0)
        v27 = -v27;
      if (v27 != 1 || *(_DWORD *)(v7 + 80) == 1 && a2[24])
        return result;
    }
    result = ClipperLib::Clipper::AddOutPt((_QWORD *)v7, a3, a4);
    if (v9 < 0)
      return result;
    v28 = -1;
    goto LABEL_98;
  }
  v15 = (int *)(v7 + 128);
  if (v13 == v14)
  {
    if (v13)
      v16 = (int *)(v7 + 124);
    else
      v16 = (int *)(v7 + 128);
    v17 = *v16;
    v18 = a2[23];
    if (v17)
    {
      v19 = v18 + v12;
      if (!v19)
        v19 = -v18;
      a2[23] = v19;
      v20 = a3[23] - v11;
      if (v20)
        a3[23] = v20;
      else
        a3[23] = -v11;
      goto LABEL_59;
    }
    a2[23] = a3[23];
    a3[23] = v18;
LABEL_49:
    v29 = v13 == 0;
    if (v13)
      v30 = (int *)(v7 + 128);
    else
      v30 = (int *)(v7 + 124);
    v31 = *v30;
    if (v14)
      v32 = (int *)(v7 + 124);
    else
      v32 = (int *)(v7 + 128);
    if (!v14)
      v15 = (int *)(v7 + 124);
    v33 = *v15;
    v34 = *v32;
    goto LABEL_70;
  }
  if (v14)
    v21 = (_DWORD *)(v7 + 124);
  else
    v21 = (_DWORD *)(v7 + 128);
  v22 = a2[24];
  v23 = v22 + v12;
  if (!*v21)
    v23 = v22 == 0;
  a2[24] = v23;
  if (v13)
    v24 = (int *)(v7 + 124);
  else
    v24 = (int *)(v7 + 128);
  v17 = *v24;
  v25 = a3[24];
  if (!v17)
  {
    a3[24] = v25 == 0;
    goto LABEL_49;
  }
  a3[24] = v25 - v11;
LABEL_59:
  v29 = v13 == 0;
  if (v13)
    v35 = (int *)(v7 + 128);
  else
    v35 = (int *)(v7 + 124);
  v31 = *v35;
  if (v14)
    v36 = (int *)(v7 + 124);
  else
    v36 = (int *)(v7 + 128);
  if (!v14)
    v15 = (int *)(v7 + 124);
  v33 = *v15;
  v34 = *v36;
  if (v17 == 3)
  {
    v37 = -(uint64_t)(int)a2[23];
    goto LABEL_74;
  }
  if (v17 == 2)
  {
    v37 = (int)a2[23];
    goto LABEL_74;
  }
LABEL_70:
  LODWORD(v37) = a2[23];
  if ((v37 & 0x80000000) == 0)
    v37 = v37;
  else
    v37 = -(int)v37;
LABEL_74:
  if (v34 == 3)
  {
    v38 = -(uint64_t)(int)a3[23];
    if (v8 < 0)
      goto LABEL_90;
LABEL_84:
    if ((v9 & 0x80000000) == 0)
    {
      if (v37 > 1 || v38 > 1 || v13 != v14 && *(_DWORD *)(v7 + 80) != 3)
        return ClipperLib::Clipper::AddLocalMaxPoly((_QWORD *)v7, a2, a3, a4);
      ClipperLib::Clipper::AddOutPt((_QWORD *)v7, a2, a4);
LABEL_96:
      v39 = (_QWORD *)v7;
      v40 = a3;
LABEL_97:
      result = ClipperLib::Clipper::AddOutPt(v39, v40, a4);
      v41 = a2[21];
      a2[21] = a3[21];
      a3[21] = v41;
      v28 = a2[25];
      a2[25] = a3[25];
LABEL_98:
      a3[25] = v28;
      return result;
    }
    goto LABEL_90;
  }
  if (v34 != 2)
  {
    LODWORD(v38) = a3[23];
    if ((v38 & 0x80000000) == 0)
      v38 = v38;
    else
      v38 = -(int)v38;
    if (v8 < 0)
      goto LABEL_90;
    goto LABEL_84;
  }
  v38 = (int)a3[23];
  if ((v8 & 0x80000000) == 0)
    goto LABEL_84;
LABEL_90:
  if ((v8 & 0x80000000) == 0)
  {
    if (v38 > 1)
      return result;
    v39 = (_QWORD *)v7;
    v40 = a2;
    goto LABEL_97;
  }
  if ((v9 & 0x80000000) == 0)
  {
    if (v37 > 1)
      return result;
    goto LABEL_96;
  }
  if (v37 <= 1 && v38 <= 1)
  {
    if (v31 == 3)
    {
      v42 = -(uint64_t)(int)a2[24];
    }
    else if (v31 == 2)
    {
      v42 = (int)a2[24];
    }
    else
    {
      LODWORD(v42) = a2[24];
      if ((int)v42 >= 0)
        v42 = v42;
      else
        v42 = -(int)v42;
    }
    if (v33 == 3)
    {
      v43 = -(uint64_t)(int)a3[24];
    }
    else if (v33 == 2)
    {
      v43 = (int)a3[24];
    }
    else
    {
      LODWORD(v43) = a3[24];
      if ((int)v43 >= 0)
        v43 = v43;
      else
        v43 = -(int)v43;
    }
    if (v13 == v14)
    {
      if (v37 == 1 && v38 == 1)
      {
        switch(*(_DWORD *)(v7 + 80))
        {
          case 0:
            if (v42 >= 1 && v43 >= 1)
              return ClipperLib::Clipper::AddLocalMinPoly((_QWORD *)v7, (uint64_t)a2, (uint64_t)a3, a4);
            return result;
          case 1:
            if (v42 > 0)
              return result;
            goto LABEL_133;
          case 2:
            if (v13 == 1 && v42 >= 1 && v43 > 0)
              return ClipperLib::Clipper::AddLocalMinPoly((_QWORD *)v7, (uint64_t)a2, (uint64_t)a3, a4);
            if (v42 >= 1 || !v29)
              return result;
LABEL_133:
            if (v43 <= 0)
              return ClipperLib::Clipper::AddLocalMinPoly((_QWORD *)v7, (uint64_t)a2, (uint64_t)a3, a4);
            return result;
          case 3:
            return ClipperLib::Clipper::AddLocalMinPoly((_QWORD *)v7, (uint64_t)a2, (uint64_t)a3, a4);
          default:
            return result;
        }
      }
      v44 = a2[21];
      a2[21] = a3[21];
      a3[21] = v44;
    }
    else
    {
      return ClipperLib::Clipper::AddLocalMinPoly((_QWORD *)v7, (uint64_t)a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t ClipperLib::Clipper::SetZ(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 136);
  if (v4)
    return v4(a3, a3 + 48, a4, a4 + 48, a2);
  return result;
}

_QWORD *ClipperLib::Clipper::SetHoleState(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a2 + 136);
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = v4;
      v6 = *(_DWORD *)(v3 + 100);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v3 + 88))
        {
          v4 = v3;
          if (v5)
          {
            if (*(_DWORD *)(v5 + 100) == v6)
              v4 = 0;
            else
              v4 = v5;
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 136);
    }
    while (v3);
    if (v4)
    {
      v3 = *(_QWORD *)(*(_QWORD *)((char *)result + *(_QWORD *)(*result - 24) + 80) + 8 * *(int *)(v4 + 100));
      LOBYTE(v4) = *(_BYTE *)(v3 + 4) ^ 1;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  *(_QWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 4) = v4;
  return result;
}

uint64_t ClipperLib::GetLowermostRec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *BottomPt;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  BottomPt = *(_QWORD **)(a1 + 32);
  if (!BottomPt)
  {
    BottomPt = (_QWORD *)ClipperLib::GetBottomPt(*(_QWORD **)(v3 + 24));
    *(_QWORD *)(v3 + 32) = BottomPt;
  }
  v5 = *(_QWORD **)(a2 + 32);
  if (!v5)
  {
    v5 = (_QWORD *)ClipperLib::GetBottomPt(*(_QWORD **)(a2 + 24));
    *(_QWORD *)(a2 + 32) = v5;
    BottomPt = *(_QWORD **)(v3 + 32);
  }
  v6 = BottomPt[2];
  v7 = v5[2];
  if (v6 <= v7)
  {
    if (v6 < v7)
      return a2;
    v8 = BottomPt[1];
    v9 = v5[1];
    if (v8 < v9)
      return v3;
    if (v8 > v9 || (_QWORD *)BottomPt[4] == BottomPt)
    {
      return a2;
    }
    else if ((_QWORD *)v5[4] != v5 && !ClipperLib::FirstIsBottomPt((uint64_t)BottomPt, v5))
    {
      return a2;
    }
  }
  return v3;
}

BOOL ClipperLib::OutRec1RightOfOutRec2(uint64_t a1, uint64_t a2)
{
  do
    a1 = *(_QWORD *)(a1 + 8);
  while (a1 != a2 && a1 != 0);
  return a1 == a2;
}

int *ClipperLib::Clipper::GetOutRec(ClipperLib::Clipper *this, int a2)
{
  uint64_t v2;
  int *v3;
  int *result;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  v3 = *(int **)(v2 + 8 * a2);
  do
  {
    result = v3;
    v3 = *(int **)(v2 + 8 * *v3);
  }
  while (result != v3);
  return result;
}

uint64_t ClipperLib::Clipper::GetLastOutPt(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 80) + 8 * *(int *)(a2 + 100)) + 24;
  if (*(_DWORD *)(a2 + 84) != 1)
    v2 = *(_QWORD *)v2 + 40;
  return *(_QWORD *)v2;
}

void ClipperLib::Clipper::ProcessHorizontal(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *MaximaPair;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *j;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111[2];

  v2 = a2;
  v111[0] = a2;
  v4 = *((_DWORD *)a2 + 22);
  v5 = *a2;
  v6 = a2[6];
  v7 = *a2 < v6;
  if (*a2 >= v6)
    v8 = a2[6];
  else
    v8 = *a2;
  if (*a2 < v6)
    v9 = a2[6];
  else
    v9 = *a2;
  v91 = v9;
  v92 = v8;
  v10 = a2;
  while (1)
  {
    v11 = v10;
    v10 = (uint64_t *)v10[15];
    if (!v10)
      break;
    if (*((double *)v10 + 9) != -1.0e40)
    {
      MaximaPair = 0;
      goto LABEL_12;
    }
  }
  MaximaPair = ClipperLib::GetMaximaPair(v11);
LABEL_12:
  v13 = a1 + 11;
  v90 = MaximaPair;
  if (a1[13])
  {
    v14 = (_QWORD *)a1[12];
    if (v5 < v6)
    {
      while (1)
      {
        if (v14 == v13)
        {
          v14 = 0;
          v16 = a1 + 11;
          goto LABEL_30;
        }
        v15 = v14[2];
        if (v15 > v5)
          break;
        v14 = (_QWORD *)v14[1];
      }
      if (v15 >= v11[6])
        v16 = a1 + 11;
      else
        v16 = v14;
      v14 = 0;
      goto LABEL_30;
    }
    v17 = a1 + 11;
    while (v17 != v14)
    {
      v18 = v17;
      v17 = (_QWORD *)*v17;
      v19 = v17[2];
      if (v19 <= v5)
      {
        v16 = 0;
        if (v19 > v11[6])
          v14 = v18;
        goto LABEL_30;
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = 0;
LABEL_30:
  v93 = v11;
  v20 = 0;
  v95 = a1 + 10;
  __asm { FMOV            V9.2S, #-1.0 }
  while (1)
  {
    v89 = v2 + 16;
    v26 = 17;
    if (v7)
      v26 = 16;
    v27 = v2[v26];
    if (v27)
    {
      v94 = v2 + 6;
      do
      {
        if (a1[13])
        {
          if (v7)
          {
            if (v16 == v13)
            {
              v16 = a1 + 11;
              goto LABEL_55;
            }
            while (v16[2] < *(_QWORD *)(v27 + 24))
            {
              if ((*((_DWORD *)v2 + 25) & 0x80000000) == 0 && v4)
              {
                v28 = v2[1];
                v108 = v16[2];
                v109 = v28;
                v110 = _D9;
                ClipperLib::Clipper::AddOutPt(a1, v2, (uint64_t)&v108);
              }
              v16 = (_QWORD *)v16[1];
              if (v16 == v13)
              {
                v16 = a1 + 11;
                break;
              }
            }
          }
          else
          {
            v29 = (_QWORD *)a1[12];
            if (v14 == v29)
              goto LABEL_52;
            while (1)
            {
              v30 = (_QWORD *)*v14;
              if (*(_QWORD *)(*v14 + 16) <= *(_QWORD *)(v27 + 24))
                break;
              if ((*((_DWORD *)v2 + 25) & 0x80000000) == 0 && v4)
              {
                v31 = v2[1];
                v108 = *(_QWORD *)(*v14 + 16);
                v109 = v31;
                v110 = _D9;
                ClipperLib::Clipper::AddOutPt(a1, v2, (uint64_t)&v108);
                v30 = (_QWORD *)*v14;
                v29 = (_QWORD *)a1[12];
              }
              v14 = v30;
              if (v30 == v29)
              {
                v14 = v29;
                break;
              }
            }
          }
        }
        if (!v7)
        {
LABEL_52:
          v32 = *(_QWORD *)(v27 + 24);
          if (v32 < v92)
            break;
          goto LABEL_56;
        }
LABEL_55:
        v32 = *(_QWORD *)(v27 + 24);
        if (v32 > v91)
          break;
LABEL_56:
        if (v32 == *v94)
        {
          v33 = v2[15];
          if (v33)
          {
            if (*(double *)(v27 + 72) < *(double *)(v33 + 72))
              break;
          }
        }
        if ((*((_DWORD *)v2 + 25) & 0x80000000) == 0 && v4)
        {
          v20 = ClipperLib::Clipper::AddOutPt(a1, v2, v27 + 24);
          for (i = (uint64_t *)a1[14]; i; i = (uint64_t *)i[18])
          {
            v35 = *((unsigned int *)i + 25);
            if ((v35 & 0x80000000) == 0)
            {
              v36 = *v2;
              v37 = v2[6];
              v38 = *i;
              v39 = i[6];
              if (*v2 >= v37)
                v40 = v2[6];
              else
                v40 = *v2;
              if (*v2 <= v37)
                v36 = v2[6];
              if (v38 >= v39)
                v41 = i[6];
              else
                v41 = *i;
              if (v38 <= v39)
                v38 = i[6];
              if (v40 < v38 && v41 < v36)
              {
                v43 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)v95 + *(_QWORD *)(*a1 - 24)) + 8 * v35) + 24);
                if (*((_DWORD *)i + 21) != 1)
                  v43 = (uint64_t *)(*v43 + 40);
                v44 = *v43;
                v106 = *((_OWORD *)i + 3);
                v107 = i[8];
                ClipperLib::Clipper::AddJoin(a1, v44, v20, (uint64_t)&v106);
              }
            }
          }
          v104 = *(_OWORD *)v2;
          v105 = v2[2];
          ClipperLib::Clipper::AddGhostJoin(a1, v20, (uint64_t)&v104);
        }
        if (v2 == (_QWORD *)v93 && (_QWORD *)v27 == v90)
        {
          if ((v93[25] & 0x80000000) == 0)
            ClipperLib::Clipper::AddLocalMaxPoly(a1, v93, v90, (uint64_t)v94);
          v54 = *(_QWORD *)(*a1 - 24);
          v55 = (char *)a1 + v54;
          v57 = v2[16];
          v56 = v2[17];
          if (*((_OWORD *)v2 + 8) == 0)
          {
            if (*((_DWORD **)v55 + 13) == v93)
              goto LABEL_107;
          }
          else
          {
            if (v56)
            {
              v58 = (_QWORD *)(v56 + 128);
              goto LABEL_108;
            }
LABEL_107:
            v58 = v55 + 104;
LABEL_108:
            *v58 = v57;
            if (v57)
              *(_QWORD *)(v57 + 136) = v56;
            *v89 = 0;
            v2[17] = 0;
            v54 = *(_QWORD *)(*a1 - 24);
          }
          v59 = (char *)a1 + v54;
          v60 = v90[16];
          v61 = v90[17];
          if (*((_OWORD *)v90 + 8) == 0)
          {
            if (*((_QWORD **)v59 + 13) == v90)
              goto LABEL_115;
          }
          else
          {
            if (v61)
            {
              v62 = (_QWORD *)(v61 + 128);
              goto LABEL_116;
            }
LABEL_115:
            v62 = v59 + 104;
LABEL_116:
            *v62 = v60;
            if (v60)
              *(_QWORD *)(v60 + 136) = v61;
            v90[16] = 0;
            v90[17] = 0;
          }
          return;
        }
        v45 = v2[4];
        v108 = *(_QWORD *)(v27 + 24);
        v109 = v45;
        v110 = _D9;
        if (v7)
        {
          v46 = v2;
          v47 = (_DWORD *)v27;
        }
        else
        {
          v46 = (_DWORD *)v27;
          v47 = v2;
        }
        ClipperLib::Clipper::IntersectEdges((uint64_t)a1, v46, v47, (uint64_t)&v108);
        v48 = 136;
        if (v7)
          v48 = 128;
        v49 = *(_QWORD *)(v27 + v48);
        ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)v2, v27);
        v27 = v49;
      }
      while (v49);
    }
    v50 = v2[15];
    if (!v50 || *(double *)(v50 + 72) != -1.0e40)
      break;
    ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t *)v111);
    v2 = v111[0];
    if ((*((_DWORD *)v111[0] + 25) & 0x80000000) == 0)
      ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)v111[0], (uint64_t)v111[0]);
    v51 = *v2;
    v52 = v2[6];
    v7 = *v2 < v52;
    if (*v2 >= v52)
      v53 = v2[6];
    else
      v53 = *v2;
    if (*v2 < v52)
      v51 = v2[6];
    v91 = v51;
    v92 = v53;
  }
  v63 = *((unsigned int *)v2 + 25);
  if ((v63 & 0x80000000) == 0 && !v20)
  {
    v64 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 80) + 8 * v63) + 24);
    if (*((_DWORD *)v2 + 21) != 1)
      v64 = (uint64_t *)(*v64 + 40);
    v65 = *v64;
    for (j = (uint64_t *)a1[14]; j; j = (uint64_t *)j[18])
    {
      v67 = *((unsigned int *)j + 25);
      if ((v67 & 0x80000000) == 0)
      {
        v68 = *v2;
        v69 = v2[6];
        v70 = *j;
        v71 = j[6];
        if (*v2 >= v69)
          v72 = v2[6];
        else
          v72 = *v2;
        if (*v2 <= v69)
          v68 = v2[6];
        if (v70 >= v71)
          v73 = j[6];
        else
          v73 = *j;
        if (v70 <= v71)
          v70 = j[6];
        if (v72 < v70 && v73 < v68)
        {
          v75 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)v95 + *(_QWORD *)(*a1 - 24)) + 8 * v67) + 24);
          if (*((_DWORD *)j + 21) != 1)
            v75 = (uint64_t *)(*v75 + 40);
          v76 = *v75;
          v102 = *((_OWORD *)j + 3);
          v103 = j[8];
          ClipperLib::Clipper::AddJoin(a1, v76, v65, (uint64_t)&v102);
        }
      }
    }
    v100 = *((_OWORD *)v2 + 3);
    v101 = v2[8];
    ClipperLib::Clipper::AddGhostJoin(a1, v65, (uint64_t)&v100);
    v50 = v2[15];
    LODWORD(v63) = *((_DWORD *)v2 + 25);
  }
  if (!v50)
  {
    if ((v63 & 0x80000000) == 0)
      ClipperLib::Clipper::AddOutPt(a1, v2, (uint64_t)(v2 + 6));
    v84 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v86 = v2[16];
    v85 = v2[17];
    if (*((_OWORD *)v2 + 8) == 0)
    {
      if (*((_QWORD **)v84 + 13) != v2)
        return;
    }
    else if (v85)
    {
      v87 = (_QWORD *)(v85 + 128);
LABEL_174:
      *v87 = v86;
      if (v86)
        *(_QWORD *)(v86 + 136) = v85;
      *v89 = 0;
      v2[17] = 0;
      return;
    }
    v87 = v84 + 104;
    goto LABEL_174;
  }
  if ((v63 & 0x80000000) != 0)
  {
    ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t *)v111);
    return;
  }
  v77 = ClipperLib::Clipper::AddOutPt(a1, v2, (uint64_t)(v2 + 6));
  ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t *)v111);
  v78 = v111[0];
  if (*((_DWORD *)v111[0] + 22))
  {
    v79 = v111[0][16];
    v80 = v111[0][17];
    if (v80
      && *(_QWORD *)(v80 + 24) == *v111[0]
      && (v81 = *(_QWORD *)(v80 + 32), v81 == v111[0][1])
      && *(_DWORD *)(v80 + 88)
      && (*(_DWORD *)(v80 + 100) & 0x80000000) == 0
      && v81 > *(_QWORD *)(v80 + 56)
      && ClipperLib::SlopesEqual(v111[0], *((_QWORD **)v111[0] + 17), *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40)))
    {
      v82 = ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)v80, (uint64_t)v78);
      v98 = *((_OWORD *)v78 + 3);
      v99 = v78[8];
      v83 = &v98;
    }
    else
    {
      if (!v79)
        return;
      if (*(_QWORD *)(v79 + 24) != *v78)
        return;
      v88 = *(_QWORD *)(v79 + 32);
      if (v88 != v78[1]
        || !*(_DWORD *)(v79 + 88)
        || (*(_DWORD *)(v79 + 100) & 0x80000000) != 0
        || v88 <= *(_QWORD *)(v79 + 56)
        || !ClipperLib::SlopesEqual(v78, (_QWORD *)v79, *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40)))
      {
        return;
      }
      v82 = ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)v79, (uint64_t)v78);
      v96 = *((_OWORD *)v78 + 3);
      v97 = v78[8];
      v83 = &v96;
    }
    ClipperLib::Clipper::AddJoin(a1, v77, v82, (uint64_t)v83);
  }
}

_QWORD *ClipperLib::GetMaximaPair(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  result = (_QWORD *)a1[13];
  v4 = a1[6];
  v3 = a1[7];
  v5 = result[6] == v4 && result[7] == v3;
  if (!v5 || result[15])
  {
    result = (_QWORD *)a1[14];
    v6 = result[6] == v4 && result[7] == v3;
    if (!v6 || result[15])
      return 0;
  }
  return result;
}

double ClipperLib::GetMaximaPairEx(_QWORD *a1)
{
  double *MaximaPair;
  double result;

  MaximaPair = (double *)ClipperLib::GetMaximaPair(a1);
  if (MaximaPair && *((_DWORD *)MaximaPair + 25) != -2 && *((_QWORD *)MaximaPair + 16) == *((_QWORD *)MaximaPair + 17))
    return MaximaPair[9];
  return result;
}

uint64_t ClipperLib::Clipper::SwapPositionsInSEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 144);
  if (!v3 && !*(_QWORD *)(a2 + 152))
    return result;
  v4 = *(_QWORD *)(a3 + 144);
  if (!v4)
  {
    v6 = (_QWORD *)(a3 + 152);
    v7 = *(_QWORD *)(a3 + 152);
    if (!v7)
      return result;
    if (v3 != a3)
    {
      v5 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = v7;
LABEL_11:
      *(_QWORD *)(v7 + 144) = a2;
      goto LABEL_12;
    }
LABEL_17:
    v8 = *(_QWORD *)(a2 + 152);
    if (v8)
      *(_QWORD *)(v8 + 144) = a3;
    *(_QWORD *)(a3 + 144) = a2;
    *(_QWORD *)(a3 + 152) = v8;
    *(_QWORD *)(a2 + 144) = v4;
    *(_QWORD *)(a2 + 152) = a3;
    goto LABEL_25;
  }
  if (v3 == a3)
  {
    *(_QWORD *)(v4 + 152) = a2;
    goto LABEL_17;
  }
  if (v4 == a2)
  {
    if (v3)
      *(_QWORD *)(v3 + 152) = a3;
    v9 = *(_QWORD *)(a3 + 152);
    if (v9)
      *(_QWORD *)(v9 + 144) = a2;
    *(_QWORD *)(a2 + 144) = a3;
    *(_QWORD *)(a2 + 152) = v9;
    *(_QWORD *)(a3 + 144) = v3;
    *(_QWORD *)(a3 + 152) = a2;
    goto LABEL_25;
  }
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(v4 + 152) = a2;
  v6 = (_QWORD *)(a3 + 152);
  v7 = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a2 + 144) = v4;
  *(_QWORD *)(a2 + 152) = v7;
  if (v7)
    goto LABEL_11;
LABEL_12:
  *(_QWORD *)(a3 + 144) = v3;
  if (v3)
    *(_QWORD *)(v3 + 152) = a3;
  *v6 = v5;
  if (v5)
    *(_QWORD *)(v5 + 144) = a3;
LABEL_25:
  if (!*(_QWORD *)(a2 + 152) || (a2 = a3, !*(_QWORD *)(a3 + 152)))
    *(_QWORD *)(result + 112) = a2;
  return result;
}

uint64_t ClipperLib::GetNextInAEL(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 136;
  if (a2 == 1)
    v2 = 128;
  return *(_QWORD *)(a1 + v2);
}

uint64_t *ClipperLib::GetHorzDirection(uint64_t *result, int *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v4 = *result;
  v5 = result[6];
  v6 = *result < v5;
  if (*result >= v5)
    v4 = result[6];
  *a3 = v4;
  if (v6)
    v7 = result + 6;
  else
    v7 = result;
  v8 = *v7;
  v9 = v6;
  *a4 = v8;
  *a2 = v9;
  return result;
}

_QWORD *ClipperLib::Clipper::BuildIntersectList(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*this - 24) + 104);
  if (v2)
  {
    v4 = this;
    this[14] = v2;
    do
    {
      v5 = *(_OWORD *)(v2 + 128);
      *(_OWORD *)(v2 + 144) = v5;
      if (*(_QWORD *)(v2 + 56) == a2)
      {
        v6 = *(_QWORD *)(v2 + 48);
      }
      else
      {
        v7 = *(double *)(v2 + 72) * (double)(a2 - *(_QWORD *)(v2 + 8));
        if (v7 >= 0.0)
          v8 = 0.5;
        else
          v8 = -0.5;
        v6 = *(_QWORD *)v2 + (uint64_t)(v7 + v8);
      }
      *(_QWORD *)(v2 + 24) = v6;
      v2 = v5;
    }
    while ((_QWORD)v5);
    __asm { FMOV            V8.2S, #-1.0 }
    while (1)
    {
      v14 = v4[14];
      v15 = *(_QWORD *)(v14 + 144);
      if (!v15)
        break;
      v16 = 0;
      do
      {
        v35 = 0uLL;
        v36 = _D8;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v15 + 24))
        {
          v14 = v15;
        }
        else
        {
          ClipperLib::IntersectPoint(v14, v15, (uint64_t *)&v35);
          if (*((uint64_t *)&v35 + 1) < a2)
          {
            if (*(_QWORD *)(v14 + 56) == a2)
            {
              v17 = *(_QWORD *)(v14 + 48);
            }
            else
            {
              v18 = *(double *)(v14 + 72) * (double)(a2 - *(_QWORD *)(v14 + 8));
              if (v18 >= 0.0)
                v19 = 0.5;
              else
                v19 = -0.5;
              v17 = *(_QWORD *)v14 + (uint64_t)(v18 + v19);
            }
            *(_QWORD *)&v35 = v17;
            *((_QWORD *)&v35 + 1) = a2;
            v36 = _D8;
          }
          v20 = operator new();
          v21 = v20;
          *(_QWORD *)v20 = v14;
          *(_QWORD *)(v20 + 8) = v15;
          *(_OWORD *)(v20 + 16) = v35;
          *(_QWORD *)(v20 + 32) = v36;
          v23 = (uint64_t *)v4[8];
          v22 = v4[9];
          if ((unint64_t)v23 >= v22)
          {
            v25 = (_QWORD *)v4[7];
            v26 = v23 - v25;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              if (v29 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v30 = (char *)operator new(8 * v29);
            }
            else
            {
              v30 = 0;
            }
            v31 = (uint64_t *)&v30[8 * v26];
            *v31 = v21;
            v24 = v31 + 1;
            if (v23 != v25)
            {
              do
              {
                v32 = *--v23;
                *--v31 = v32;
              }
              while (v23 != v25);
              v23 = (uint64_t *)v4[7];
            }
            v4[7] = v31;
            v4[8] = v24;
            v4[9] = &v30[8 * v29];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *v23 = v20;
            v24 = v23 + 1;
          }
          v4[8] = v24;
          this = (_QWORD *)ClipperLib::Clipper::SwapPositionsInSEL((uint64_t)v4, v14, v15);
          v16 = 1;
        }
        v15 = *(_QWORD *)(v14 + 144);
      }
      while (v15);
      v33 = *(_QWORD *)(v14 + 152);
      if (v33)
      {
        *(_QWORD *)(v33 + 144) = 0;
        if ((v16 & 1) != 0)
          continue;
      }
      goto LABEL_47;
    }
    v34 = *(_QWORD *)(v14 + 152);
    if (v34)
      *(_QWORD *)(v34 + 144) = 0;
LABEL_47:
    v4[14] = 0;
  }
  return this;
}

BOOL ClipperLib::Clipper::FixupIntersectionOrder(ClipperLib::Clipper *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  BOOL (*v27)(uint64_t, uint64_t);

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 104);
  *((_QWORD *)this + 14) = v2;
  if (v2)
  {
    do
    {
      v3 = *(_OWORD *)(v2 + 128);
      *(_OWORD *)(v2 + 144) = v3;
      v2 = v3;
    }
    while ((_QWORD)v3);
  }
  v4 = *((_QWORD *)this + 7);
  v5 = (uint64_t *)*((_QWORD *)this + 8);
  v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
  v27 = ClipperLib::IntersectListSort;
  if (v5 == (uint64_t *)v4)
    v7 = 0;
  else
    v7 = v6;
  v8 = 1;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v4, v5, (uint64_t (**)(_QWORD))&v27, v7, 1);
  v9 = *((_QWORD *)this + 8) - *((_QWORD *)this + 7);
  if (v9)
  {
    v8 = 0;
    v10 = 0;
    v11 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1)
      v12 = 1;
    else
      v12 = v9 >> 3;
    v13 = 1;
    do
    {
      if (v11 <= v13)
        v14 = v13;
      else
        v14 = v11;
      v15 = *((_QWORD *)this + 7);
      v16 = *(uint64_t **)(v15 + 8 * v10);
      v17 = *v16;
      v18 = v16[1];
      v19 = *(_QWORD *)(*v16 + 144);
      if (v19 != v18)
      {
        if (*(_QWORD *)(v17 + 152) == v18)
        {
          v19 = v16[1];
        }
        else
        {
          v20 = v13;
          v21 = v10;
          while (1)
          {
            if (v20 >= v11)
            {
              v21 = v14;
              goto LABEL_24;
            }
            v22 = *(uint64_t **)(v15 + 8 * v20);
            v24 = *v22;
            v23 = v22[1];
            if (*(_QWORD *)(v24 + 144) == v23)
              break;
            ++v20;
            ++v21;
            if (*(_QWORD *)(v24 + 152) == v23)
              goto LABEL_24;
          }
          v21 = v20;
LABEL_24:
          if (v21 == v11)
            return v8;
          *(_QWORD *)(v15 + 8 * v10) = *(_QWORD *)(v15 + 8 * v21);
          *(_QWORD *)(v15 + 8 * v21) = v16;
          v25 = *(uint64_t **)(*((_QWORD *)this + 7) + 8 * v10);
          v17 = *v25;
          v19 = v25[1];
        }
      }
      ClipperLib::Clipper::SwapPositionsInSEL((uint64_t)this, v17, v19);
      v8 = ++v10 >= v11;
      ++v13;
    }
    while (v10 != v12);
  }
  return v8;
}

_QWORD *ClipperLib::Clipper::ProcessIntersectList(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;

  v1 = this;
  v2 = this[8];
  if (v2 != this[7])
  {
    v3 = 0;
    v2 = this[7];
    do
    {
      v4 = *(uint64_t **)(v2 + 8 * v3);
      ClipperLib::Clipper::IntersectEdges((uint64_t)v1, (_DWORD *)*v4, (_DWORD *)v4[1], (uint64_t)(v4 + 2));
      ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)v1 + *(_QWORD *)(*v1 - 24), *v4, v4[1]);
      this = (_QWORD *)MEMORY[0x1C3B7F770](v4, 0x1020C40E349F4B1);
      ++v3;
      v2 = v1[7];
    }
    while (v3 < (v1[8] - v2) >> 3);
  }
  v1[8] = v2;
  return this;
}

uint64_t ClipperLib::Clipper::DisposeIntersectNodes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v3 = *(_QWORD *)(this + 56);
  v2 = *(_QWORD *)(this + 64);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(this + 64);
  }
  else
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v3 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x1C3B7F770](this, 0x1020C40E349F4B1);
        v3 = *(_QWORD *)(v1 + 56);
        v2 = *(_QWORD *)(v1 + 64);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(_QWORD *)(v1 + 64) = v3;
  return this;
}

BOOL ClipperLib::IntersectListSort(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) < *(_QWORD *)(a1 + 24);
}

void ClipperLib::Clipper::DoMaxima(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  BOOL v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  ClipperLib::clipperException *exception;

  ClipperLib::GetMaximaPairEx((_QWORD *)a2);
  if (v4)
  {
    v5 = v4;
    v7 = (_QWORD *)(a2 + 128);
    v6 = *(_QWORD *)(a2 + 128);
    v8 = v6 != 0;
    if (v6)
      v9 = v6 == v4;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        ClipperLib::Clipper::IntersectEdges((uint64_t)a1, (_DWORD *)a2, (_DWORD *)v6, a2 + 48);
        ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a2, v6);
        v6 = *(_QWORD *)(a2 + 128);
        v8 = v6 != 0;
        if (v6)
          v10 = v6 == v5;
        else
          v10 = 1;
      }
      while (!v10);
    }
    v11 = *(_DWORD *)(a2 + 100);
    if (v11 != -1)
    {
      if ((v11 & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(v5 + 100) & 0x80000000) == 0)
        {
          ClipperLib::Clipper::AddLocalMaxPoly(a1, (_DWORD *)a2, (_DWORD *)v5, a2 + 48);
          v12 = *(_QWORD *)(*a1 - 24);
          v13 = (char *)a1 + v12;
          v15 = *(_QWORD *)(a2 + 128);
          v14 = *(_QWORD *)(a2 + 136);
          if (*(_OWORD *)(a2 + 128) != 0)
          {
            if (v14)
            {
              v16 = (_QWORD *)(v14 + 128);
              goto LABEL_46;
            }
LABEL_45:
            v16 = v13 + 104;
LABEL_46:
            *v16 = v15;
            if (v15)
              *(_QWORD *)(v15 + 136) = v14;
LABEL_52:
            *v7 = 0;
            *(_QWORD *)(a2 + 136) = 0;
            v12 = *(_QWORD *)(*a1 - 24);
            goto LABEL_53;
          }
          if (*((_QWORD *)v13 + 13) == a2)
            goto LABEL_45;
LABEL_53:
          v17 = (char *)a1 + v12;
          goto LABEL_54;
        }
        if (!*(_DWORD *)(a2 + 88))
        {
          ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)a2, a2 + 48);
          *(_DWORD *)(a2 + 100) = -1;
          v6 = *(_QWORD *)(a2 + 128);
LABEL_27:
          v21 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          v22 = *(_QWORD *)(a2 + 136);
          if (v22 | v6)
          {
            if (v22)
            {
              v23 = (uint64_t *)(v22 + 128);
LABEL_32:
              *v23 = v6;
              if (v6)
                *(_QWORD *)(v6 + 136) = v22;
              *v7 = 0;
              *(_QWORD *)(a2 + 136) = 0;
              goto LABEL_35;
            }
          }
          else if (*((_QWORD *)v21 + 13) != a2)
          {
LABEL_35:
            if ((*(_DWORD *)(v5 + 100) & 0x80000000) == 0)
            {
              ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)v5, a2 + 48);
              *(_DWORD *)(v5 + 100) = -1;
            }
            v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
LABEL_54:
            v19 = *(_QWORD *)(v5 + 128);
            v20 = *(_QWORD *)(v5 + 136);
            v18 = (_QWORD *)(v5 + 128);
            if (*(_OWORD *)(v5 + 128) == 0)
            {
              if (*((_QWORD *)v17 + 13) != v5)
                return;
              goto LABEL_58;
            }
            goto LABEL_55;
          }
          v23 = (uint64_t *)(v21 + 104);
          goto LABEL_32;
        }
LABEL_63:
        exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
        ClipperLib::clipperException::clipperException(exception, "DoMaxima error");
      }
LABEL_23:
      if (!*(_DWORD *)(a2 + 88))
        goto LABEL_27;
      goto LABEL_63;
    }
    if (*(_DWORD *)(v5 + 100) != -1)
      goto LABEL_23;
    v12 = *(_QWORD *)(*a1 - 24);
    v24 = (char *)a1 + v12;
    v25 = *(_QWORD *)(a2 + 136);
    if (v25)
      v26 = 1;
    else
      v26 = v8;
    if ((v26 & 1) != 0)
    {
      if (v25)
      {
        v27 = (uint64_t *)(v25 + 128);
        goto LABEL_50;
      }
    }
    else if (*((_QWORD *)v24 + 13) != a2)
    {
      goto LABEL_53;
    }
    v27 = (uint64_t *)(v24 + 104);
LABEL_50:
    *v27 = v6;
    if (v8)
      *(_QWORD *)(v6 + 136) = v25;
    goto LABEL_52;
  }
  if ((*(_DWORD *)(a2 + 100) & 0x80000000) == 0)
    ClipperLib::Clipper::AddOutPt(a1, (_DWORD *)a2, a2 + 48);
  v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v18 = (_QWORD *)(a2 + 128);
  if (*(_OWORD *)(a2 + 128) == 0)
  {
    if (*((_QWORD *)v17 + 13) != a2)
      return;
    goto LABEL_58;
  }
LABEL_55:
  if (!v20)
  {
LABEL_58:
    v28 = v17 + 104;
    goto LABEL_59;
  }
  v28 = (_QWORD *)(v20 + 128);
LABEL_59:
  *v28 = v19;
  if (v19)
    *(_QWORD *)(v19 + 136) = v20;
  *v18 = 0;
  v18[1] = 0;
}

void sub_1BE3815C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::PointCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  if (a1)
  {
    v2 = a1;
    do
    {
      v1 = (v1 + 1);
      v2 = *(_QWORD *)(v2 + 32);
    }
    while (v2 != a1);
  }
  return v1;
}

uint64_t std::vector<std::vector<ClipperLib::IntPoint>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1BE38169C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<ClipperLib::IntPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<ClipperLib::PolyNode *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

__n128 ClipperLib::SwapIntersectNodes(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *((_QWORD *)a1 + 4);
  v4 = *a1;
  v3 = a1[1];
  *a1 = *a2;
  result = (__n128)a2[1];
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  a1[1] = (__int128)result;
  *a2 = v4;
  a2[1] = v3;
  *((_QWORD *)a2 + 4) = v2;
  return result;
}

BOOL ClipperLib::GetOverlap(ClipperLib *this, uint64_t a2, uint64_t a3, uint64_t a4, ClipperLib **a5, ClipperLib **a6, uint64_t *a7)
{
  ClipperLib *v7;
  ClipperLib *v8;
  uint64_t v9;
  ClipperLib *v10;
  uint64_t v11;

  if ((uint64_t)this >= a2)
  {
    if (a3 >= a4)
    {
      if (a2 <= a4)
        v11 = a4;
      else
        v11 = a2;
      *a5 = (ClipperLib *)v11;
      if (a3 >= (uint64_t)this)
        v8 = this;
      else
        v8 = (ClipperLib *)a3;
    }
    else
    {
      if (a2 <= a3)
        v9 = a3;
      else
        v9 = a2;
      *a5 = (ClipperLib *)v9;
      if (a4 >= (uint64_t)this)
        v8 = this;
      else
        v8 = (ClipperLib *)a4;
    }
  }
  else if (a3 >= a4)
  {
    if ((uint64_t)this <= a4)
      v10 = (ClipperLib *)a4;
    else
      v10 = this;
    *a5 = v10;
    if (a3 >= a2)
      v8 = (ClipperLib *)a2;
    else
      v8 = (ClipperLib *)a3;
  }
  else
  {
    if ((uint64_t)this <= a3)
      v7 = (ClipperLib *)a3;
    else
      v7 = this;
    *a5 = v7;
    if (a4 >= a2)
      v8 = (ClipperLib *)a2;
    else
      v8 = (ClipperLib *)a4;
  }
  *a6 = v8;
  return (uint64_t)*a5 < (uint64_t)v8;
}

uint64_t ClipperLib::DupOutPt(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  result = operator new();
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)result = *(_DWORD *)a1;
  if (a2)
  {
    v5 = (uint64_t *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (uint64_t *)(v6 + 40);
  }
  else
  {
    v6 = a1;
    v5 = (uint64_t *)(a1 + 40);
    a1 = *(_QWORD *)(a1 + 40);
    v7 = (uint64_t *)(a1 + 32);
  }
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = a1;
  *v7 = result;
  *v5 = result;
  return result;
}

uint64_t ClipperLib::JoinHorz(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  int v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v34;
  int v35;
  uint64_t v36;
  __int128 v38;
  uint64_t *v39;
  unsigned int v41;

  v6 = a1[1];
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v6 <= v7;
  v9 = a3[1];
  v10 = *(_QWORD *)(a4 + 8);
  v11 = v9 <= v10;
  v12 = v8 ^ v11;
  if (v8 == v11)
    return v12;
  v15 = a3;
  v41 = v8 ^ v11;
  v16 = *a5;
  if (v6 > v7)
  {
    do
    {
      v17 = (uint64_t)a1;
      a1 = (_QWORD *)a1[4];
      v24 = a1[1];
    }
    while (v24 >= v16 && v24 <= *(_QWORD *)(v17 + 8) && a1[2] == a5[1]);
    if ((a6 & 1) == 0 && *(_QWORD *)(v17 + 8) != v16)
      v17 = (uint64_t)a1;
    v19 = ClipperLib::DupOutPt(v17, a6);
    v20 = v19;
    if (*(_QWORD *)(v19 + 8) != *a5 || *(_QWORD *)(v19 + 16) != a5[1])
    {
      v26 = *(_OWORD *)a5;
      *(_QWORD *)(v19 + 24) = a5[2];
      *(_OWORD *)(v19 + 8) = v26;
      v23 = a6;
      goto LABEL_25;
    }
  }
  else
  {
    do
    {
      v17 = (uint64_t)a1;
      a1 = (_QWORD *)a1[4];
      v18 = a1[1];
    }
    while (v18 <= v16 && v18 >= *(_QWORD *)(v17 + 8) && a1[2] == a5[1]);
    if (a6 && *(_QWORD *)(v17 + 8) != v16)
      v17 = (uint64_t)a1;
    v19 = ClipperLib::DupOutPt(v17, a6 ^ 1u);
    v20 = v19;
    if (*(_QWORD *)(v19 + 8) != *a5 || *(_QWORD *)(v19 + 16) != a5[1])
    {
      v22 = *(_OWORD *)a5;
      *(_QWORD *)(v19 + 24) = a5[2];
      *(_OWORD *)(v19 + 8) = v22;
      v23 = a6 ^ 1;
LABEL_25:
      v27 = ClipperLib::DupOutPt(v19, v23);
      goto LABEL_27;
    }
  }
  v27 = v20;
  v20 = v17;
LABEL_27:
  v28 = *a5;
  if (v9 > v10)
  {
    do
    {
      v29 = v15;
      v15 = (_QWORD *)v15[4];
      v36 = v15[1];
    }
    while (v36 >= v28 && v36 <= v29[1] && v15[2] == a5[1]);
    if ((a6 & 1) == 0 && v29[1] != v28)
      v29 = v15;
    v31 = (_QWORD *)ClipperLib::DupOutPt((uint64_t)v29, a6);
    v32 = (uint64_t)v31;
    if (v31[1] == *a5 && v31[2] == a5[1])
      goto LABEL_51;
    v38 = *(_OWORD *)a5;
    v31[3] = a5[2];
    *(_OWORD *)(v31 + 1) = v38;
    v35 = a6;
  }
  else
  {
    do
    {
      v29 = v15;
      v15 = (_QWORD *)v15[4];
      v30 = v15[1];
    }
    while (v30 <= v28 && v30 >= v29[1] && v15[2] == a5[1]);
    if (a6 && v29[1] != v28)
      v29 = v15;
    v31 = (_QWORD *)ClipperLib::DupOutPt((uint64_t)v29, a6 ^ 1u);
    v32 = (uint64_t)v31;
    if (v31[1] == *a5 && v31[2] == a5[1])
      goto LABEL_51;
    v34 = *(_OWORD *)a5;
    v31[3] = a5[2];
    *(_OWORD *)(v31 + 1) = v34;
    v35 = a6 ^ 1;
  }
  v29 = (_QWORD *)v32;
  v32 = ClipperLib::DupOutPt((uint64_t)v31, v35);
LABEL_51:
  v12 = v41;
  if ((((v6 <= v7) ^ a6) & 1) != 0)
  {
    *(_QWORD *)(v20 + 32) = v29;
    v29[5] = v20;
    v39 = (uint64_t *)(v32 + 32);
    *(_QWORD *)(v27 + 40) = v32;
  }
  else
  {
    *(_QWORD *)(v20 + 40) = v29;
    v29[4] = v20;
    v39 = (uint64_t *)(v32 + 40);
    *(_QWORD *)(v27 + 32) = v32;
  }
  *v39 = v27;
  return v12;
}

uint64_t ClipperLib::Clipper::JoinPoints(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 *v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v17;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int *v47;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v55;
  uint64_t v56;
  int v59;
  uint64_t result;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v70;
  uint64_t v71;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134[2];
  int v135;
  int v136;

  v6 = (_QWORD *)*a2;
  v5 = (_QWORD *)a2[1];
  v8 = (uint64_t *)(*a2 + 8);
  v7 = *v8;
  v9 = *(_QWORD *)(*a2 + 16);
  v10 = a2 + 2;
  if (v9 != a2[3])
  {
    v49 = (uint64_t)(v6 + 4);
    do
    {
      v50 = *(_QWORD **)v49;
      v52 = *(_QWORD *)(*(_QWORD *)v49 + 8);
      v51 = *(_QWORD *)(*(_QWORD *)v49 + 16);
      v49 = *(_QWORD *)v49 + 32;
    }
    while (v50 != v6 && v52 == v7 && v51 == v9);
    if (v51 <= v9
      && (v132 = *(_OWORD *)v8,
          v133 = v8[2],
          v130 = *(_OWORD *)(v50 + 1),
          v131 = v50[3],
          v128 = *(_OWORD *)v10,
          v129 = a2[4],
          v55 = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40),
          ClipperLib::SlopesEqual(&v132, (uint64_t *)&v130, &v128, v55)))
    {
      v106 = 0;
      v107 = v55;
    }
    else
    {
      v50 = v6;
      do
      {
        v50 = (_QWORD *)v50[5];
        v56 = v50[2];
      }
      while (v50 != v6 && v50[1] == v7 && v56 == v9);
      if (v56 > v9)
        return 0;
      v126 = *(_OWORD *)v8;
      v127 = v8[2];
      v124 = *(_OWORD *)(v50 + 1);
      v125 = v50[3];
      v122 = *(_OWORD *)v10;
      v123 = v10[2];
      v59 = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      result = ClipperLib::SlopesEqual(&v126, (uint64_t *)&v124, &v122, v59);
      if (!(_DWORD)result)
        return result;
      v106 = 1;
      v107 = v59;
    }
    v62 = (__int128 *)(v5 + 1);
    v61 = v5[1];
    v63 = (uint64_t)(v5 + 4);
    v64 = v5[2];
    do
    {
      v65 = *(_QWORD **)v63;
      v67 = *(_QWORD *)(*(_QWORD *)v63 + 8);
      v66 = *(_QWORD *)(*(_QWORD *)v63 + 16);
      v63 = *(_QWORD *)v63 + 32;
    }
    while (v67 == v61 && v66 == v64 && v65 != v5);
    if (v66 <= v64
      && (v120 = *v62,
          v121 = v5[3],
          v118 = *(_OWORD *)(v65 + 1),
          v119 = v65[3],
          v116 = *(_OWORD *)v10,
          v117 = v10[2],
          ClipperLib::SlopesEqual(&v120, (uint64_t *)&v118, &v116, v107 != 0)))
    {
      v70 = 0;
    }
    else
    {
      v65 = v5;
      do
      {
        v65 = (_QWORD *)v65[5];
        v71 = v65[2];
      }
      while (v65[1] == v61 && v71 == v64 && v65 != v5);
      if (v71 > v64)
        return 0;
      v114 = *v62;
      v115 = v5[3];
      v112 = *(_OWORD *)(v65 + 1);
      v113 = v65[3];
      v110 = *(_OWORD *)v10;
      v111 = v10[2];
      result = ClipperLib::SlopesEqual(&v114, (uint64_t *)&v112, &v110, v107 != 0);
      if (!(_DWORD)result)
        return result;
      v70 = 1;
    }
    result = 0;
    if (v50 == v65 || v50 == v6 || v65 == v5)
      return result;
    if (a3 != a4 || v106 != v70)
    {
      v74 = operator new();
      v75 = v74;
      v76 = *(_OWORD *)v8;
      *(_QWORD *)(v74 + 24) = v8[2];
      *(_OWORD *)(v74 + 8) = v76;
      *(_DWORD *)v74 = *(_DWORD *)v6;
      if (v106)
      {
        v77 = v6[5];
        *(_QWORD *)(v74 + 32) = v6;
        *(_QWORD *)(v74 + 40) = v77;
        *(_QWORD *)(v77 + 32) = v74;
        v6[5] = v74;
        v78 = operator new();
        v79 = *v62;
        *(_QWORD *)(v78 + 24) = v5[3];
        *(_OWORD *)(v78 + 8) = v79;
        *(_DWORD *)v78 = *(_DWORD *)v5;
        v80 = v5[4];
        *(_QWORD *)(v78 + 32) = v80;
        *(_QWORD *)(v80 + 40) = v78;
        v6[5] = v5;
        v5[4] = v6;
        *(_QWORD *)(v75 + 32) = v78;
        *(_QWORD *)(v78 + 40) = v75;
      }
      else
      {
        v95 = v6[4];
        *(_QWORD *)(v74 + 32) = v95;
        *(_QWORD *)(v74 + 40) = v6;
        *(_QWORD *)(v95 + 40) = v74;
        v6[4] = v74;
        v96 = operator new();
        v97 = *v62;
        *(_QWORD *)(v96 + 24) = v5[3];
        *(_OWORD *)(v96 + 8) = v97;
        *(_DWORD *)v96 = *(_DWORD *)v5;
        v98 = v5[5];
        *(_QWORD *)(v96 + 40) = v98;
        *(_QWORD *)(v98 + 32) = v96;
        v6[4] = v5;
        v5[5] = v6;
        *(_QWORD *)(v75 + 40) = v96;
        *(_QWORD *)(v96 + 32) = v75;
      }
      *a2 = v6;
      a2[1] = v75;
      return 1;
    }
    return 0;
  }
  v11 = (_QWORD *)*a2;
  if (*v10 != v7
    || ((v12 = (__int128 *)(v5 + 1), v7 == v5[1]) ? (v13 = v9 == v5[2]) : (v13 = 0), v11 = (_QWORD *)*a2, !v13))
  {
    do
    {
      v14 = v11;
      v11 = (_QWORD *)v11[5];
    }
    while (v11 != v6 && v11[2] == v9 && v11 != v5);
    do
    {
      v17 = (uint64_t)v6;
      v6 = (_QWORD *)v6[4];
    }
    while (v6 != v14 && v6[2] == v9 && v6 != v5);
    if (v6 != v14 && v6 != v5)
    {
      v21 = v14 + 2;
      v22 = v5[2];
      v23 = v5;
      do
      {
        v24 = v23;
        v23 = (_QWORD *)v23[5];
      }
      while (v23 != (_QWORD *)v17 && v23[2] == v22 && v23 != v5);
      do
      {
        v27 = (uint64_t)v5;
        v5 = (_QWORD *)v5[4];
      }
      while (v5 != v14 && v5 != v24 && v5[2] == v22);
      if (v5 != v24 && v5 != v14)
      {
        v31 = v14[1];
        v32 = *(_QWORD *)(v17 + 8);
        v33 = v24[1];
        v34 = *(_QWORD *)(v27 + 8);
        v35 = v33 < v34;
        v36 = v32 <= v34 ? *(_QWORD *)(v27 + 8) : *(_QWORD *)(v17 + 8);
        v37 = v33 >= v31 ? v14[1] : v24[1];
        v38 = v32 <= v33 ? v24[1] : *(_QWORD *)(v17 + 8);
        v39 = v34 >= v31 ? v14[1] : *(_QWORD *)(v27 + 8);
        if (v33 >= v34)
          v39 = v37;
        else
          v36 = v38;
        v40 = v31 <= v34 ? *(_QWORD *)(v27 + 8) : v14[1];
        v41 = v33 >= v32 ? *(_QWORD *)(v17 + 8) : v24[1];
        v42 = v31 <= v33 ? v24[1] : v14[1];
        v43 = v34 >= v32 ? *(_QWORD *)(v17 + 8) : *(_QWORD *)(v27 + 8);
        if (v33 >= v34)
        {
          v44 = v41;
        }
        else
        {
          v40 = v42;
          v44 = v43;
        }
        if (v31 < v32)
        {
          v45 = v44;
        }
        else
        {
          v40 = v36;
          v45 = v39;
        }
        if (v40 < v45)
        {
          if (v31 < v40 || v31 > v45)
          {
            if (v33 < v40 || v33 > v45)
            {
              if (v32 < v40 || v32 > v45)
              {
                v21 = (uint64_t *)(v27 + 16);
                v46 = (int *)(v27 + 24);
                v47 = (int *)(v27 + 28);
              }
              else
              {
                v46 = (int *)(v17 + 24);
                v47 = (int *)(v17 + 28);
                v21 = (uint64_t *)(v17 + 16);
                v34 = *(_QWORD *)(v17 + 8);
                v35 = v31 < v32;
              }
            }
            else
            {
              v21 = v24 + 2;
              v46 = (int *)(v24 + 3);
              v47 = (int *)v24 + 7;
              v35 = v33 > v34;
              v34 = v24[1];
            }
          }
          else
          {
            v46 = (int *)(v14 + 3);
            v47 = (int *)v14 + 7;
            v35 = v31 > v32;
            v34 = v14[1];
          }
          v103 = *v21;
          v104 = *v46;
          v105 = *v47;
          *a2 = v14;
          a2[1] = v24;
          v134[0] = v34;
          v134[1] = v103;
          v135 = v104;
          v136 = v105;
          return ClipperLib::JoinHorz(v14, v17, v24, v27, v134, v35);
        }
      }
    }
    return 0;
  }
  if (a3 != a4)
    return 0;
  v81 = (_QWORD *)*a2;
  while (1)
  {
    v81 = (_QWORD *)v81[4];
    if (v81 == v6)
      break;
    v82 = v81[2];
    if (v81[1] != v7 || v82 != v9)
      goto LABEL_151;
  }
  v82 = *(_QWORD *)(*a2 + 16);
LABEL_151:
  v84 = (_QWORD *)a2[1];
  while (1)
  {
    v84 = (_QWORD *)v84[4];
    if (v84 == v5)
      break;
    v85 = v84[2];
    if (v84[1] != v7 || v85 != v9)
    {
      if (v82 > v9 != v85 <= v9)
        return 0;
      goto LABEL_160;
    }
  }
  if (v82 <= v9)
    return 0;
LABEL_160:
  v87 = operator new();
  v88 = v87;
  v89 = *(_OWORD *)v8;
  *(_QWORD *)(v87 + 24) = v8[2];
  *(_OWORD *)(v87 + 8) = v89;
  *(_DWORD *)v87 = *(_DWORD *)v6;
  if (v82 <= v9)
  {
    v99 = v6[4];
    *(_QWORD *)(v87 + 32) = v99;
    *(_QWORD *)(v87 + 40) = v6;
    *(_QWORD *)(v99 + 40) = v87;
    v6[4] = v87;
    v100 = operator new();
    v101 = *v12;
    *(_QWORD *)(v100 + 24) = v5[3];
    *(_OWORD *)(v100 + 8) = v101;
    *(_DWORD *)v100 = *(_DWORD *)v5;
    v102 = v5[5];
    *(_QWORD *)(v100 + 40) = v102;
    v94 = (uint64_t *)(v100 + 32);
    *(_QWORD *)(v102 + 32) = v100;
    v6[4] = v5;
    v5[5] = v6;
    *(_QWORD *)(v88 + 40) = v100;
  }
  else
  {
    v90 = v6[5];
    *(_QWORD *)(v87 + 32) = v6;
    *(_QWORD *)(v87 + 40) = v90;
    *(_QWORD *)(v90 + 32) = v87;
    v6[5] = v87;
    v91 = operator new();
    v92 = *v12;
    *(_QWORD *)(v91 + 24) = v5[3];
    *(_OWORD *)(v91 + 8) = v92;
    *(_DWORD *)v91 = *(_DWORD *)v5;
    v93 = v5[4];
    *(_QWORD *)(v91 + 32) = v93;
    v94 = (uint64_t *)(v91 + 40);
    *(_QWORD *)(v93 + 40) = v91;
    v6[5] = v5;
    v5[4] = v6;
    *(_QWORD *)(v88 + 32) = v91;
  }
  *v94 = v88;
  result = 1;
  *a2 = v6;
  a2[1] = v88;
  return result;
}

uint64_t ClipperLib::Clipper::FixupFirstLefts1(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result - 24);
  v5 = *(_QWORD *)(result + v4 + 80);
  if (*(_QWORD *)(result + v4 + 88) != v5)
  {
    v8 = result;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v5 + 8 * v9);
      for (i = *(_QWORD *)(v10 + 8); i; i = *(_QWORD *)(i + 8))
      {
        if (*(_QWORD *)(i + 24))
          break;
      }
      if (i == a2)
      {
        v12 = *(_QWORD *)(v10 + 24);
        if (v12)
        {
          v13 = *(_QWORD **)(a3 + 24);
          v14 = *(_QWORD *)(v10 + 24);
          while (1)
          {
            result = ClipperLib::PointInPolygon((_QWORD *)(v14 + 8), v13);
            if ((result & 0x80000000) == 0)
              break;
            v14 = *(_QWORD *)(v14 + 32);
            if (v14 == v12)
              goto LABEL_13;
          }
          if (!(_DWORD)result)
            goto LABEL_14;
LABEL_13:
          *(_QWORD *)(v10 + 8) = a3;
          v4 = *(_QWORD *)(v3 - 24);
        }
      }
LABEL_14:
      ++v9;
      v5 = *(_QWORD *)(v8 + v4 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + v4 + 88) - v5) >> 3);
  }
  return result;
}

uint64_t ClipperLib::Clipper::FixupFirstLefts2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = *(_QWORD *)result;
  v3 = *(_QWORD *)(*(_QWORD *)result - 24);
  v4 = *(_QWORD *)(result + v3 + 80);
  if (*(_QWORD *)(result + v3 + 88) != v4)
  {
    v7 = result;
    v8 = 0;
    v21 = *(_QWORD *)(a3 + 8);
    do
    {
      v9 = *(_QWORD *)(v4 + 8 * v8);
      v10 = *(_QWORD *)(v9 + 24);
      if (v9 != a2 && v9 != a3 && v10 != 0)
      {
        v13 = *(_QWORD *)(v9 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v9 + 8);
          do
          {
            if (*(_QWORD *)(v14 + 24))
              break;
            v14 = *(_QWORD *)(v14 + 8);
          }
          while (v14);
        }
        else
        {
          v14 = 0;
        }
        if (v14 == a3 || v14 == v21 || v14 == a2)
        {
          v15 = *(_QWORD **)(a2 + 24);
          v16 = *(_QWORD *)(v9 + 24);
          while (1)
          {
            result = ClipperLib::PointInPolygon((_QWORD *)(v16 + 8), v15);
            if ((result & 0x80000000) == 0)
              break;
            v16 = *(_QWORD *)(v16 + 32);
            if (v16 == v10)
            {
              v17 = a2;
LABEL_29:
              *(_QWORD *)(v9 + 8) = v17;
              v3 = *(_QWORD *)(v20 - 24);
              goto LABEL_30;
            }
          }
          v17 = a2;
          if ((_DWORD)result)
            goto LABEL_29;
          v18 = *(_QWORD **)(a3 + 24);
          v19 = v10;
          while (1)
          {
            result = ClipperLib::PointInPolygon((_QWORD *)(v19 + 8), v18);
            if ((result & 0x80000000) == 0)
              break;
            v19 = *(_QWORD *)(v19 + 32);
            if (v19 == v10)
            {
              v17 = a3;
              goto LABEL_29;
            }
          }
          v17 = a3;
          if ((_DWORD)result)
            goto LABEL_29;
          v17 = v21;
          if (v13 == a2)
            goto LABEL_29;
          v17 = v21;
          if (v13 == a3)
            goto LABEL_29;
        }
      }
LABEL_30:
      ++v8;
      v4 = *(_QWORD *)(v7 + v3 + 80);
    }
    while (v8 < (*(_QWORD *)(v7 + v3 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t *ClipperLib::Clipper::FixupFirstLefts3(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *result;
  v4 = *(_QWORD *)(*result - 24);
  v5 = *(uint64_t *)((char *)result + v4 + 80);
  if (*(uint64_t *)((char *)result + v4 + 88) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (*(_QWORD *)(v7 + 8) == a2 && *(_QWORD *)(v7 + 24) != 0)
      {
        *(_QWORD *)(v7 + 8) = a3;
        v4 = *(_QWORD *)(v3 - 24);
      }
      ++v6;
      v5 = *(uint64_t *)((char *)result + v4 + 80);
    }
    while (v6 < (*(uint64_t *)((char *)result + v4 + 88) - v5) >> 3);
  }
  return result;
}

double ClipperLib::GetUnitNormal(ClipperLib *this, const IntPoint *a2, const IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  double result;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)a2 == *(_QWORD *)this && v3 == v4;
  result = 0.0;
  if (!v5)
    return 1.0
         / sqrt((double)(v3 - v4) * (double)(v3 - v4)+ (double)(uint64_t)(*(_QWORD *)a2 - *(_QWORD *)this) * (double)(uint64_t)(*(_QWORD *)a2 - *(_QWORD *)this))* (double)(v3 - v4);
  return result;
}

double ClipperLib::ClipperOffset::ClipperOffset(ClipperLib::ClipperOffset *this, double a2, double a3)
{
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  __asm { FMOV            V3.2S, #-1.0 }
  *((_QWORD *)this + 22) = _D3;
  *((_QWORD *)this + 23) = &unk_1E77745C0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 237) = 0u;
  *(double *)this = a2;
  *((double *)this + 1) = a3;
  result = NAN;
  *((_OWORD *)this + 10) = xmmword_1BE4FD2B0;
  return result;
}

{
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  __asm { FMOV            V3.2S, #-1.0 }
  *((_QWORD *)this + 22) = _D3;
  *((_QWORD *)this + 23) = &unk_1E77745C0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 237) = 0u;
  *(double *)this = a2;
  *((double *)this + 1) = a3;
  result = NAN;
  *((_OWORD *)this + 10) = xmmword_1BE4FD2B0;
  return result;
}

void ClipperLib::ClipperOffset::~ClipperOffset(ClipperLib::ClipperOffset *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  ClipperLib::ClipperOffset::Clear(this);
  ClipperLib::PolyNode::~PolyNode((ClipperLib::ClipperOffset *)((char *)this + 184));
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 16);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

_QWORD *ClipperLib::ClipperOffset::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = this[27];
  v3 = this[28];
  if ((int)((unint64_t)(v3 - v2) >> 3) >= 1)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[27];
        v3 = v1[28];
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v3 - v2) >> 3));
  }
  v1[28] = v2;
  v1[20] = -1;
  return this;
}

double ClipperLib::ClipperOffset::AddPath(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  int v4;
  int v5;
  uint64_t v10;
  ClipperLib::PolyNode *v11;
  char **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  int64x2_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  int v35;
  int v36;
  char *v37;
  __int128 *v38;
  uint64_t v39;
  int64x2_t *v40;
  int32x2_t v41;
  int64x2_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int64x2_t *v48;
  int64x2_t v49;
  char *v50;
  char *v51;
  int64x2_t *v52;
  int64x2_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  double result;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v70;
  unsigned int v71;
  char **v72;

  v4 = -1431655765 * ((a2[1] - *a2) >> 3);
  v5 = v4 - 1;
  if (v4 >= 1)
  {
    v10 = operator new();
    v11 = (ClipperLib::PolyNode *)v10;
    *(_QWORD *)v10 = &unk_1E77745C0;
    *(_OWORD *)(v10 + 8) = 0u;
    v12 = (char **)(v10 + 8);
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 53) = 0u;
    *(_DWORD *)(v10 + 72) = a3;
    *(_DWORD *)(v10 + 76) = a4;
    if (a4 <= 1 && v4 != 1)
    {
      do
      {
        v13 = (uint64_t *)(*a2 + 24 * --v4);
        v15 = *v13;
        v14 = v13[1];
        if (*(_QWORD *)*a2 != v15 || *(_QWORD *)(*a2 + 8) != v14)
        {
          v5 = v4;
          goto LABEL_11;
        }
      }
      while (v4 > 1);
      v5 = 0;
    }
LABEL_11:
    v17 = (v5 + 1);
    std::vector<ClipperLib::IntPoint>::reserve((void **)(v10 + 8), v17);
    v18 = (__int128 *)*a2;
    v20 = (_QWORD *)((char *)v11 + 24);
    v19 = *((_QWORD *)v11 + 3);
    v21 = *((_QWORD *)v11 + 2);
    if (v21 >= v19)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)*v12) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)*v12) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v11 + 24, v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      v30 = &v28[24 * v27];
      v31 = *v18;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v18 + 2);
      *(_OWORD *)v29 = v31;
      v23 = (int64x2_t *)(v29 + 24);
      v33 = (char *)*((_QWORD *)v11 + 1);
      v32 = (char *)*((_QWORD *)v11 + 2);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 24);
          *((_QWORD *)v29 - 1) = *((_QWORD *)v32 - 1);
          *(_OWORD *)(v29 - 24) = v34;
          v29 -= 24;
          v32 -= 24;
        }
        while (v32 != v33);
        v32 = *v12;
      }
      *((_QWORD *)v11 + 1) = v29;
      *((_QWORD *)v11 + 2) = v23;
      *((_QWORD *)v11 + 3) = v30;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v22 = *v18;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v18 + 2);
      *(_OWORD *)v21 = v22;
      v23 = (int64x2_t *)(v21 + 24);
    }
    v72 = v12;
    v71 = a4;
    v70 = a1;
    *((_QWORD *)v11 + 2) = v23;
    if (v5 < 1)
    {
      v36 = 0;
      v35 = 0;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      v37 = *v72;
      v38 = (__int128 *)*a2;
      v39 = 1;
      do
      {
        v40 = (int64x2_t *)((char *)v38 + 24 * v39);
        v41 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(*(int64x2_t *)&v37[24 * v35], *v40)));
        if (((v41.i32[0] | v41.i32[1]) & 1) != 0)
        {
          if ((unint64_t)v23 >= *v20)
          {
            v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - v37) >> 3);
            if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v20 - (_QWORD)v37) >> 3);
            v45 = 2 * v44;
            if (2 * v44 <= v43 + 1)
              v45 = v43 + 1;
            if (v44 >= 0x555555555555555)
              v46 = 0xAAAAAAAAAAAAAAALL;
            else
              v46 = v45;
            if (v46)
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v11 + 24, v46);
            else
              v47 = 0;
            v48 = (int64x2_t *)&v47[24 * v43];
            v49 = *v40;
            v48[1].i64[0] = v40[1].i64[0];
            *v48 = v49;
            v51 = (char *)*((_QWORD *)v11 + 1);
            v50 = (char *)*((_QWORD *)v11 + 2);
            v52 = v48;
            if (v50 != v51)
            {
              do
              {
                v53 = *(int64x2_t *)(v50 - 24);
                v52[-1].i64[1] = *((_QWORD *)v50 - 1);
                *(int64x2_t *)((char *)v52 - 24) = v53;
                v52 = (int64x2_t *)((char *)v52 - 24);
                v50 -= 24;
              }
              while (v50 != v51);
              v50 = *v72;
            }
            v23 = (int64x2_t *)((char *)v48 + 24);
            *((_QWORD *)v11 + 1) = v52;
            *((_QWORD *)v11 + 2) = (char *)v48 + 24;
            *((_QWORD *)v11 + 3) = &v47[24 * v46];
            if (v50)
              operator delete(v50);
          }
          else
          {
            v42 = *v40;
            v23[1].i64[0] = v40[1].i64[0];
            *v23 = v42;
            v23 = (int64x2_t *)((char *)v23 + 24);
          }
          ++v35;
          *((_QWORD *)v11 + 2) = v23;
          v38 = (__int128 *)*a2;
          v54 = (_QWORD *)(*a2 + 24 * v39);
          v55 = v54[1];
          v37 = (char *)*((_QWORD *)v11 + 1);
          v56 = &v37[24 * v36];
          v57 = *((_QWORD *)v56 + 1);
          if (v55 > v57 || v55 == v57 && *v54 < *(_QWORD *)v56)
            v36 = v35;
        }
        ++v39;
      }
      while (v39 != v17);
    }
    if (!v71 && v35 < 2)
    {
      (*(void (**)(ClipperLib::PolyNode *))(*(_QWORD *)v11 + 8))(v11);
      return result;
    }
    ClipperLib::PolyNode::AddChild((ClipperLib::PolyNode *)(v70 + 184), v11);
    if (!v71)
    {
      v59 = *(_QWORD *)(v70 + 160);
      v60 = *(_QWORD *)(v70 + 216);
      if (v59 < 0)
      {
        v66 = (((*(_QWORD *)(v70 + 224) - v60) << 29) - 0x100000000) >> 32;
        v65 = v36;
        goto LABEL_63;
      }
      v61 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 8 * (int)v59) + 8) + 24 * *(int *)(v70 + 168));
      v62 = v61[1];
      v63 = &(*v72)[24 * v36];
      v64 = *((_QWORD *)v63 + 1);
      if (v64 > v62 || v64 == v62 && *(_QWORD *)v63 < *v61)
      {
        v65 = v36;
        v66 = (((*(_QWORD *)(v70 + 224) - v60) << 29) - 0x100000000) >> 32;
LABEL_63:
        *(_QWORD *)(v70 + 160) = v66;
        *(_QWORD *)(v70 + 168) = v65;
        __asm { FMOV            V0.2S, #-1.0 }
        *(double *)(v70 + 176) = result;
      }
    }
  }
  return result;
}

void ClipperLib::ClipperOffset::AddPaths(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v4 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      ClipperLib::ClipperOffset::AddPath(a1, (_QWORD *)(v4 + v9), a3, a4);
      ++v10;
      v4 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
}

void ClipperLib::ClipperOffset::FixOrientations(ClipperLib::ClipperOffset *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v2 = *((_QWORD *)this + 20);
  if (v2 < 0)
  {
    v3 = *((_QWORD *)this + 27);
  }
  else
  {
    v3 = *((_QWORD *)this + 27);
    if (ClipperLib::Area((uint64_t *)(*(_QWORD *)(v3 + 8 * (int)v2) + 8)) < 0.0)
    {
      v4 = *((_QWORD *)this + 28);
      if ((int)((unint64_t)(v4 - v3) >> 3) >= 1)
      {
        v5 = 0;
        do
        {
          v6 = *(_QWORD *)(v3 + 8 * v5);
          v7 = *(_DWORD *)(v6 + 76);
          if (!v7 || v7 == 1 && ClipperLib::Area((uint64_t *)(v6 + 8)) >= 0.0)
          {
            v8 = *(_QWORD *)(v6 + 8);
            v9 = *(_QWORD *)(v6 + 16);
            v10 = v9 - 24;
            if (v8 != v9 && v10 > v8)
            {
              v12 = v8 + 24;
              do
              {
                v13 = *(_QWORD *)(v12 - 8);
                v14 = *(_OWORD *)(v12 - 24);
                v15 = *(_QWORD *)(v10 + 16);
                *(_OWORD *)(v12 - 24) = *(_OWORD *)v10;
                *(_QWORD *)(v12 - 8) = v15;
                *(_OWORD *)v10 = v14;
                *(_QWORD *)(v10 + 16) = v13;
                v10 -= 24;
                v16 = v12 >= v10;
                v12 += 24;
              }
              while (!v16);
              v3 = *((_QWORD *)this + 27);
              v4 = *((_QWORD *)this + 28);
            }
          }
          ++v5;
        }
        while (v5 < (int)((unint64_t)(v4 - v3) >> 3));
      }
      return;
    }
  }
  v17 = *((_QWORD *)this + 28);
  if ((int)((unint64_t)(v17 - v3) >> 3) >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v3 + 8 * v18);
      if (*(_DWORD *)(v19 + 76) == 1 && ClipperLib::Area((uint64_t *)(v19 + 8)) < 0.0)
      {
        v20 = *(_QWORD *)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 16);
        v22 = v21 - 24;
        if (v20 != v21 && v22 > v20)
        {
          v24 = v20 + 24;
          do
          {
            v25 = *(_QWORD *)(v24 - 8);
            v26 = *(_OWORD *)(v24 - 24);
            v27 = *(_QWORD *)(v22 + 16);
            *(_OWORD *)(v24 - 24) = *(_OWORD *)v22;
            *(_QWORD *)(v24 - 8) = v27;
            *(_OWORD *)v22 = v26;
            *(_QWORD *)(v22 + 16) = v25;
            v22 -= 24;
            v16 = v24 >= v22;
            v24 += 24;
          }
          while (!v16);
          v3 = *((_QWORD *)this + 27);
          v17 = *((_QWORD *)this + 28);
        }
      }
      ++v18;
    }
    while (v18 < (int)((unint64_t)(v17 - v3) >> 3));
  }
}

__n128 ClipperLib::ReversePath(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = a1[1];
  v3 = v2 - 24;
  if (*a1 != v2 && v3 > v1)
  {
    v5 = v1 + 24;
    do
    {
      v6 = *(_QWORD *)(v5 - 8);
      result = *(__n128 *)(v5 - 24);
      v8 = *(_QWORD *)(v3 + 16);
      *(_OWORD *)(v5 - 24) = *(_OWORD *)v3;
      *(_QWORD *)(v5 - 8) = v8;
      *(__n128 *)v3 = result;
      *(_QWORD *)(v3 + 16) = v6;
      v3 -= 24;
      v9 = v5 >= v3;
      v5 += 24;
    }
    while (!v9);
  }
  return result;
}

void ClipperLib::ClipperOffset::Execute(uint64_t *a1, uint64_t *a2, double a3)
{
  ClipperLib::ClipperBase *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27[3];
  __int128 v28;
  __int128 v29;
  uint64_t (**v30)(ClipperLib::Clipper *__hidden);
  void *v31[2];
  void *v32[2];
  __int128 v33;
  void *__p[2];
  uint64_t v35;
  _QWORD v36[4];
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  void (**v41)(ClipperLib::Clipper *__hidden);
  __int128 v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a2);
  ClipperLib::ClipperOffset::FixOrientations((ClipperLib::ClipperOffset *)a1);
  ClipperLib::ClipperOffset::DoOffset((ClipperLib::ClipperOffset *)a1, a3);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v42 = 0u;
  v43 = 0u;
  v30 = &off_1E7774540;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  *(_OWORD *)__p = 0u;
  v35 = 0;
  v36[0] = v36;
  v36[1] = v36;
  v36[2] = 0;
  v37 = 0;
  v44 = 0;
  v38 = 0;
  v39 = 0;
  v48 = 0;
  v40 = 0;
  v41 = &off_1E7774588;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v41, a1 + 2, 0, 1);
  if (a3 <= 0.0)
  {
    v28 = 0u;
    v29 = 0u;
    v6 = (ClipperLib::ClipperBase *)((char *)&v31[-1] + (_QWORD)*(v30 - 3));
    ClipperLib::ClipperBase::GetBounds(v6, (uint64_t)&v28);
    v7 = (uint64_t *)operator new(0x60uLL);
    v8 = v7;
    v9 = 0;
    v27[0] = v7;
    v27[2] = v7 + 12;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      v15 = &v7[v9];
      *v15 = 0;
      v15[1] = 0;
      v15[2] = _D0;
      v9 += 3;
    }
    while (v9 != 12);
    v27[1] = v7 + 12;
    v16 = *((_QWORD *)&v28 + 1);
    v17 = v28 - 10;
    v18 = v29;
    v19 = *((_QWORD *)&v29 + 1) + 10;
    *v7 = v28 - 10;
    v7[1] = v19;
    v18 += 10;
    v7[3] = v18;
    v7[4] = v19;
    v7[2] = _D0;
    v7[5] = _D0;
    v16 -= 10;
    v7[6] = v18;
    v7[7] = v16;
    v7[8] = _D0;
    v7[9] = v17;
    v7[10] = v16;
    v7[11] = _D0;
    ClipperLib::ClipperBase::AddPath((uint64_t)v6, v27, 0, 1);
    v38 = 1;
    ClipperLib::Clipper::Execute((uint64_t)&v30, 1, a2, 3, 3);
    v20 = *a2;
    v21 = a2[1];
    if (v21 != *a2)
    {
      if (v20 + 24 != v21)
      {
        do
        {
          v22 = v20 + 24;
          std::vector<ClipperLib::IntPoint>::__move_assign(v20, (__n128 *)(v20 + 24));
          v23 = v20 + 48;
          v20 += 24;
        }
        while (v23 != v21);
        v21 = a2[1];
        v20 = v22;
      }
      if (v21 != v20)
      {
        v24 = v21;
        do
        {
          v26 = *(void **)(v24 - 24);
          v24 -= 24;
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v21 - 16) = v25;
            operator delete(v25);
          }
          v21 = v24;
        }
        while (v24 != v20);
      }
      a2[1] = v20;
    }
    operator delete(v8);
  }
  else
  {
    ClipperLib::Clipper::Execute((uint64_t)&v30, 1, a2, 2, 2);
  }
  v30 = &off_1E7774540;
  v41 = &off_1E7774588;
  std::__list_imp<long long>::clear(v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v32[1])
  {
    *(void **)&v33 = v32[1];
    operator delete(v32[1]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v41);
}

void sub_1BE3831F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

unint64_t ClipperLib::ClipperOffset::DoOffset(ClipperLib::ClipperOffset *this, double a2)
{
  uint64_t *v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __double2 v18;
  const IntPoint *v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t **v22;
  int64x2_t **v23;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t *v34;
  void **v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  int64x2_t v39;
  int64x2_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int64x2_t *v46;
  int64x2_t *v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double UnitNormal;
  uint64_t v61;
  double v62;
  uint64_t v63;
  unint64_t v64;
  double *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _OWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  int v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  int64x2_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t *v98;
  __int128 v99;
  double v100;
  double v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _OWORD *v116;
  char *v117;
  char *v118;
  _OWORD *v119;
  int v120;
  int v121;
  unint64_t v122;
  uint64_t *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  float64x2_t v129;
  int64x2_t v130;
  int64x2_t *v131;
  int64x2_t *v132;
  int64x2_t *v133;
  float64x2_t *v134;
  float64x2_t v135;
  unint64_t v136;
  BOOL v137;
  int v138;
  int64x2_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  int64x2_t *v146;
  int64x2_t *v147;
  int64x2_t v148;
  float64x2_t v149;
  int64x2_t v150;
  __int8 *v151;
  int64x2_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  int64x2_t *v159;
  int64x2_t *v160;
  int64x2_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  float64x2_t v165;
  int64x2_t v166;
  int64x2_t *v167;
  int64x2_t *v168;
  uint64_t *v169;
  int64x2_t *v170;
  int64x2_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  int64x2_t *v178;
  int64x2_t *v179;
  int64x2_t v180;
  float64x2_t v181;
  int64x2_t v182;
  __int8 *v183;
  int64x2_t *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  int64x2_t *v191;
  int64x2_t *v192;
  int64x2_t v193;
  uint64_t *v194;
  int v195[4];
  int v196;
  float64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  int8x16_t v202;
  int8x16_t v203;
  float64x2_t v204;
  void **v205;
  int v207[8];

  v3 = (uint64_t *)((char *)this + 16);
  std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100]((uint64_t *)this + 2);
  *((double *)this + 14) = a2;
  if (a2 > -1.0e-20 && a2 < 1.0e-20)
  {
    result = std::vector<std::vector<ClipperLib::IntPoint>>::reserve(v3, (int)((uint64_t)(*((_QWORD *)this + 28) - *((_QWORD *)this + 27)) >> 3));
    v6 = *((_QWORD *)this + 27);
    v5 = *((_QWORD *)this + 28);
    if ((int)((unint64_t)(v5 - v6) >> 3) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(v6 + 8 * v7);
        if (!*(_DWORD *)(v8 + 76))
        {
          v9 = v8 + 8;
          v10 = *((_QWORD *)this + 3);
          if (v10 >= *((_QWORD *)this + 4))
          {
            result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v3, v9);
          }
          else
          {
            std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v3, v9);
            result = v10 + 24;
          }
          *((_QWORD *)this + 3) = result;
          v6 = *((_QWORD *)this + 27);
          v5 = *((_QWORD *)this + 28);
        }
        ++v7;
      }
      while (v7 < (int)((unint64_t)(v5 - v6) >> 3));
    }
    return result;
  }
  v11 = 0.5;
  if (*(double *)this > 2.0)
    v11 = 2.0 / (*(double *)this * *(double *)this);
  *((double *)this + 18) = v11;
  v12 = *((double *)this + 1);
  v13 = fabs(a2);
  v14 = v13 * 0.25;
  if (v12 <= v13 * 0.25)
    v14 = *((double *)this + 1);
  if (v12 <= 0.0)
    v15 = 0.25;
  else
    v15 = v14;
  v16 = 3.14159265 / acos(1.0 - v15 / v13);
  if (v16 <= v13 * 3.14159265)
    v17 = v16;
  else
    v17 = v13 * 3.14159265;
  v18 = __sincos_stret(6.28318531 / v17);
  *((__double2 *)this + 8) = v18;
  *((double *)this + 19) = v17 / 6.28318531;
  if (a2 < 0.0)
    *((double *)this + 16) = -v18.__sinval;
  result = std::vector<std::vector<ClipperLib::IntPoint>>::reserve(v3, (int)((uint64_t)(*((_QWORD *)this + 28) - *((_QWORD *)this + 27)) >> 2) & 0xFFFFFFFFFFFFFFFELL);
  v20 = *((_QWORD *)this + 27);
  if ((int)((unint64_t)(*((_QWORD *)this + 28) - v20) >> 3) >= 1)
  {
    v21 = 0;
    v22 = (int64x2_t **)((char *)this + 40);
    v204 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v205 = (void **)((char *)this + 64);
    v23 = (int64x2_t **)((char *)this + 80);
    __asm
    {
      FMOV            V1.2D, #0.5
      FMOV            V0.2D, #-0.5
    }
    v202 = _Q0;
    v203 = _Q1;
    __asm { FMOV            V12.2S, #-1.0 }
    v194 = v3;
    do
    {
      v31 = *(_QWORD *)(v20 + 8 * v21);
      if (v22 != (int64x2_t **)(v31 + 8))
        result = (unint64_t)std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>((char *)this + 40, *(char **)(v31 + 8), *(_QWORD *)(v31 + 16), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 3));
      v32 = (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3;
      v33 = 0xAAAAAAAAAAAAAAABLL * v32;
      if (!(-1431655765 * (_DWORD)v32))
        goto LABEL_266;
      if (a2 <= 0.0)
      {
        if ((int)v33 < 3 || *(_DWORD *)(v31 + 76))
          goto LABEL_266;
        *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
      }
      else
      {
        v34 = (int64x2_t *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 9) = v34;
        if ((_DWORD)v33 == 1)
        {
          if (*(_DWORD *)(v31 + 72) == 1)
          {
            v35 = (void **)((char *)this + 64);
            if (v17 >= 1.0)
            {
              v36 = 1;
              v37 = (float64x2_t)xmmword_1BE4FD2C0;
              do
              {
                v38 = vmlaq_f64(vcvtq_f64_s64(**v22), v204, v37);
                v39 = vcvtq_s64_f64(vaddq_f64(v38, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v38), v202, v203)));
                if (v34 >= *v23)
                {
                  v40 = (int64x2_t *)*v205;
                  v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (_BYTE *)*v205) >> 3);
                  v42 = v41 + 1;
                  if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                  v197 = v37;
                  if (0x5555555555555556 * (((char *)*v23 - (char *)v40) >> 3) > v42)
                    v42 = 0x5555555555555556 * (((char *)*v23 - (char *)v40) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)*v23 - (char *)v40) >> 3) >= 0x555555555555555)
                    v43 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v43 = v42;
                  if (v43)
                  {
                    *(int64x2_t *)v195 = v39;
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v43);
                    v39 = *(int64x2_t *)v195;
                    v45 = v44;
                    v40 = (int64x2_t *)*((_QWORD *)this + 8);
                    v34 = (int64x2_t *)*((_QWORD *)this + 9);
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = (int64x2_t *)&v45[24 * v41];
                  *v46 = v39;
                  v46[1].i64[0] = _D12;
                  v47 = v46;
                  if (v34 != v40)
                  {
                    do
                    {
                      v48 = *(int64x2_t *)((char *)v34 - 24);
                      v47[-1].i64[1] = v34[-1].i64[1];
                      *(int64x2_t *)((char *)v47 - 24) = v48;
                      v47 = (int64x2_t *)((char *)v47 - 24);
                      v34 = (int64x2_t *)((char *)v34 - 24);
                    }
                    while (v34 != v40);
                    v40 = (int64x2_t *)*v205;
                  }
                  v34 = (int64x2_t *)((char *)v46 + 24);
                  *((_QWORD *)this + 8) = v47;
                  *((_QWORD *)this + 9) = (char *)v46 + 24;
                  *((_QWORD *)this + 10) = &v45[24 * v43];
                  if (v40)
                    operator delete(v40);
                  v37 = v197;
                }
                else
                {
                  *v34 = v39;
                  v34[1].i64[0] = _D12;
                  v34 = (int64x2_t *)((char *)v34 + 24);
                }
                *((_QWORD *)this + 9) = v34;
                v49 = *((float64x2_t *)this + 8);
                v50 = (float64x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
                v49.f64[0] = -v49.f64[0];
                ++v36;
                v37 = vmlaq_n_f64(vmulq_laneq_f64(v49, v37, 1), v50, v37.f64[0]);
              }
              while (v17 >= (double)v36);
            }
          }
          else
          {
            v83 = 0;
            v84 = -1.0;
            v85 = -1.0;
            v35 = (void **)((char *)this + 64);
            do
            {
              v86 = (double)(*v22)->i64[0] + v84 * a2;
              if (v86 >= 0.0)
                v87 = 0.5;
              else
                v87 = -0.5;
              v88 = (uint64_t)(v86 + v87);
              v89 = (double)(*v22)->i64[1] + v85 * a2;
              if (v89 >= 0.0)
                v90 = 0.5;
              else
                v90 = -0.5;
              v91 = (uint64_t)(v89 + v90);
              if (v34 >= *v23)
              {
                v92 = (int64x2_t *)*v35;
                v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (_BYTE *)*v35) >> 3);
                v94 = v93 + 1;
                if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_269;
                if (0x5555555555555556 * (((char *)*v23 - (char *)v92) >> 3) > v94)
                  v94 = 0x5555555555555556 * (((char *)*v23 - (char *)v92) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)*v23 - (char *)v92) >> 3) >= 0x555555555555555)
                  v95 = 0xAAAAAAAAAAAAAAALL;
                else
                  v95 = v94;
                if (v95)
                {
                  v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v95);
                  v92 = (int64x2_t *)*((_QWORD *)this + 8);
                  v34 = (int64x2_t *)*((_QWORD *)this + 9);
                }
                else
                {
                  v96 = 0;
                }
                v97 = (uint64_t *)&v96[24 * v93];
                *v97 = v88;
                v97[1] = v91;
                v97[2] = _D12;
                v98 = v97;
                if (v34 == v92)
                {
                  v35 = (void **)((char *)this + 64);
                }
                else
                {
                  v35 = (void **)((char *)this + 64);
                  do
                  {
                    v99 = *(__int128 *)((char *)&v34[-2] + 8);
                    *(v98 - 1) = v34[-1].i64[1];
                    *(_OWORD *)(v98 - 3) = v99;
                    v98 -= 3;
                    v34 = (int64x2_t *)((char *)v34 - 24);
                  }
                  while (v34 != v92);
                  v92 = (int64x2_t *)*v205;
                }
                v34 = (int64x2_t *)(v97 + 3);
                *((_QWORD *)this + 8) = v98;
                *((_QWORD *)this + 9) = v97 + 3;
                *((_QWORD *)this + 10) = &v96[24 * v95];
                if (v92)
                  operator delete(v92);
              }
              else
              {
                v34->i64[0] = v88;
                v34->i64[1] = v91;
                v34[1].i64[0] = _D12;
                v34 = (int64x2_t *)((char *)v34 + 24);
              }
              *((_QWORD *)this + 9) = v34;
              if (v85 >= 0.0)
                v100 = v85;
              else
                v100 = 1.0;
              if (v85 >= 0.0)
                v101 = -1.0;
              else
                v101 = v84;
              if (v84 < 0.0)
              {
                v84 = 1.0;
              }
              else
              {
                v85 = v100;
                v84 = v101;
              }
              ++v83;
            }
            while (v83 != 4);
          }
          v102 = *((_QWORD *)this + 3);
          if (v102 >= *((_QWORD *)this + 4))
          {
            result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v194, (uint64_t)v35);
          }
          else
          {
            std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v194, (uint64_t)v35);
            result = v102 + 24;
          }
          *((_QWORD *)this + 3) = result;
          goto LABEL_266;
        }
      }
      v51 = *((_QWORD *)this + 11);
      *((_QWORD *)this + 12) = v51;
      if ((int)v33 > (unint64_t)((*((_QWORD *)this + 13) - v51) >> 4))
      {
        if (((v33 << 32) & 0x8000000000000000) != 0)
          goto LABEL_268;
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>((int)v33);
        v55 = (char *)*((_QWORD *)this + 11);
        v54 = (char *)*((_QWORD *)this + 12);
        v56 = v52;
        if (v54 != v55)
        {
          do
          {
            *((_OWORD *)v56 - 1) = *((_OWORD *)v54 - 1);
            v56 -= 16;
            v54 -= 16;
          }
          while (v54 != v55);
          v54 = (char *)*((_QWORD *)this + 11);
        }
        *((_QWORD *)this + 11) = v56;
        *((_QWORD *)this + 12) = v52;
        *((_QWORD *)this + 13) = &v52[16 * v53];
        if (v54)
          operator delete(v54);
      }
      v57 = (v33 - 1);
      v196 = v33 - 2;
      if ((int)v33 >= 2)
      {
        v58 = 0;
        v59 = (double *)*((_QWORD *)this + 12);
        do
        {
          UnitNormal = ClipperLib::GetUnitNormal((ClipperLib *)(*((_QWORD *)this + 5) + 24 * v58), (const IntPoint *)(*((_QWORD *)this + 5) + 24 * v58 + 24), v19);
          v62 = UnitNormal;
          v63 = v61;
          v64 = *((_QWORD *)this + 13);
          if ((unint64_t)v59 >= v64)
          {
            v65 = (double *)*((_QWORD *)this + 11);
            v66 = ((char *)v59 - (char *)v65) >> 4;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 60)
              goto LABEL_268;
            v68 = v64 - (_QWORD)v65;
            if (v68 >> 3 > v67)
              v67 = v68 >> 3;
            _CF = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0;
            v69 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v69 = v67;
            if (v69)
            {
              v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v69);
              v65 = (double *)*((_QWORD *)this + 11);
              v59 = (double *)*((_QWORD *)this + 12);
            }
            else
            {
              v70 = 0;
            }
            v71 = (_QWORD *)(v69 + 16 * v66);
            *(double *)v71 = v62;
            v71[1] = v63;
            v72 = v71;
            if (v59 != v65)
            {
              do
              {
                *((_OWORD *)v72 - 1) = *((_OWORD *)v59 - 1);
                v72 -= 2;
                v59 -= 2;
              }
              while (v59 != v65);
              v65 = (double *)*((_QWORD *)this + 11);
            }
            v59 = (double *)(v71 + 2);
            *((_QWORD *)this + 11) = v72;
            *((_QWORD *)this + 12) = v71 + 2;
            *((_QWORD *)this + 13) = v69 + 16 * v70;
            if (v65)
              operator delete(v65);
          }
          else
          {
            *v59 = UnitNormal;
            *((_QWORD *)v59 + 1) = v61;
            v59 += 2;
          }
          ++v58;
          *((_QWORD *)this + 12) = v59;
        }
        while (v58 != v57);
      }
      if (*(_DWORD *)(v31 + 76) >= 2u)
      {
        v79 = *((_QWORD *)this + 11);
        v78 = (_QWORD *)*((_QWORD *)this + 12);
        v80 = (_OWORD *)(v79 + ((uint64_t)((v33 << 32) - 0x200000000) >> 28));
        *(_OWORD *)v207 = *v80;
        v81 = *((_QWORD *)this + 13);
        if ((unint64_t)v78 < v81)
        {
          *(_OWORD *)v78 = *v80;
          goto LABEL_86;
        }
        v109 = ((uint64_t)v78 - v79) >> 4;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 60)
LABEL_268:
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v111 = v81 - v79;
        if (v111 >> 3 > v110)
          v110 = v111 >> 3;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
          v112 = 0xFFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
          v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v112);
        else
          v113 = 0;
        v116 = (_OWORD *)(v112 + 16 * v109);
        *v116 = *(_OWORD *)v207;
        v118 = (char *)*((_QWORD *)this + 11);
        v117 = (char *)*((_QWORD *)this + 12);
        v119 = v116;
        if (v117 != v118)
        {
          do
          {
            *--v119 = *((_OWORD *)v117 - 1);
            v117 -= 16;
          }
          while (v117 != v118);
          v117 = (char *)*((_QWORD *)this + 11);
        }
        v82 = v116 + 1;
        *((_QWORD *)this + 11) = v119;
        *((_QWORD *)this + 12) = v116 + 1;
        *((_QWORD *)this + 13) = v112 + 16 * v113;
        if (v117)
        {
          v103 = v117;
LABEL_153:
          operator delete(v103);
        }
      }
      else
      {
        v73 = ClipperLib::GetUnitNormal((ClipperLib *)(*((_QWORD *)this + 5) + 24 * (int)v57), *((const IntPoint **)this + 5), v19);
        v75 = v73;
        v76 = v74;
        v78 = (_QWORD *)*((_QWORD *)this + 12);
        v77 = *((_QWORD *)this + 13);
        if ((unint64_t)v78 < v77)
        {
          *(double *)v78 = v73;
          v78[1] = v74;
LABEL_86:
          v82 = v78 + 2;
          goto LABEL_154;
        }
        v103 = (_QWORD *)*((_QWORD *)this + 11);
        v104 = ((char *)v78 - (char *)v103) >> 4;
        v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 60)
          goto LABEL_268;
        v106 = v77 - (_QWORD)v103;
        if (v106 >> 3 > v105)
          v105 = v106 >> 3;
        _CF = (unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0;
        v107 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF)
          v107 = v105;
        if (v107)
        {
          v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v107);
          v103 = (_QWORD *)*((_QWORD *)this + 11);
          v78 = (_QWORD *)*((_QWORD *)this + 12);
        }
        else
        {
          v108 = 0;
        }
        v114 = (_QWORD *)(v107 + 16 * v104);
        *(double *)v114 = v75;
        v114[1] = v76;
        v115 = v114;
        if (v78 != v103)
        {
          do
          {
            *((_OWORD *)v115 - 1) = *((_OWORD *)v78 - 1);
            v115 -= 2;
            v78 -= 2;
          }
          while (v78 != v103);
          v103 = (_QWORD *)*((_QWORD *)this + 11);
        }
        v82 = v114 + 2;
        *((_QWORD *)this + 11) = v115;
        *((_QWORD *)this + 12) = v114 + 2;
        *((_QWORD *)this + 13) = v107 + 16 * v108;
        if (v103)
          goto LABEL_153;
      }
LABEL_154:
      *((_QWORD *)this + 12) = v82;
      v120 = *(_DWORD *)(v31 + 76);
      if (v120 == 1)
      {
        v207[0] = v33 - 1;
        if ((int)v33 >= 1)
        {
          v125 = 0;
          do
            ClipperLib::ClipperOffset::OffsetPoint(this, v125++, v207, *(_DWORD *)(v31 + 72));
          while ((_DWORD)v33 != v125);
        }
        v126 = *((_QWORD *)this + 3);
        if (v126 >= *((_QWORD *)this + 4))
        {
          v127 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v194, (uint64_t)v205);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v194, (uint64_t)v205);
          v127 = v126 + 24;
        }
        *((_QWORD *)this + 3) = v127;
        *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
        v134 = (float64x2_t *)*((_QWORD *)this + 11);
        v135 = v134[(int)v57];
        if ((int)v33 > 1)
        {
          v136 = (v33 - 1);
          do
          {
            v137 = v136 > 1;
            v134[v136] = vnegq_f64(v134[(v136 - 1)]);
            --v136;
          }
          while (v137);
        }
        *v134 = vnegq_f64(v135);
        v207[0] = 0;
        if ((int)v33 >= 1)
        {
          do
          {
            ClipperLib::ClipperOffset::OffsetPoint(this, v57, v207, *(_DWORD *)(v31 + 72));
            LODWORD(v57) = v57 - 1;
          }
          while ((_DWORD)v57 != -1);
          v127 = *((_QWORD *)this + 3);
        }
        if (v127 >= *((_QWORD *)this + 4))
        {
          result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v194, (uint64_t)v205);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v194, (uint64_t)v205);
          result = v127 + 24;
        }
        goto LABEL_265;
      }
      if (v120)
      {
        v207[0] = 0;
        if ((int)v33 >= 3)
        {
          v128 = 2;
          do
            ClipperLib::ClipperOffset::OffsetPoint(this, v128++ - 1, v207, *(_DWORD *)(v31 + 72));
          while ((_DWORD)v33 != v128);
          v120 = *(_DWORD *)(v31 + 76);
        }
        if (v120 == 2)
        {
          v129 = vmlaq_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * (int)v57)), v204, *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v57));
          v130 = vcvtq_s64_f64(vaddq_f64(v129, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v129), v202, v203)));
          v132 = (int64x2_t *)*((_QWORD *)this + 9);
          v131 = (int64x2_t *)*((_QWORD *)this + 10);
          if (v132 >= v131)
          {
            v139 = (int64x2_t *)*v205;
            v140 = 0xAAAAAAAAAAAAAAABLL * (((char *)v132 - (_BYTE *)*v205) >> 3);
            v141 = v140 + 1;
            if (v140 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_269;
            v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v139) >> 3);
            if (2 * v142 > v141)
              v141 = 2 * v142;
            if (v142 >= 0x555555555555555)
              v143 = 0xAAAAAAAAAAAAAAALL;
            else
              v143 = v141;
            if (v143)
            {
              v198 = v130;
              v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v143);
              v130 = v198;
              v145 = v144;
              v139 = (int64x2_t *)*((_QWORD *)this + 8);
              v132 = (int64x2_t *)*((_QWORD *)this + 9);
            }
            else
            {
              v145 = 0;
            }
            v146 = (int64x2_t *)&v145[24 * v140];
            *v146 = v130;
            v146[1].i64[0] = _D12;
            v147 = v146;
            if (v132 != v139)
            {
              do
              {
                v148 = *(int64x2_t *)((char *)v132 - 24);
                v147[-1].i64[1] = v132[-1].i64[1];
                *(int64x2_t *)((char *)v147 - 24) = v148;
                v147 = (int64x2_t *)((char *)v147 - 24);
                v132 = (int64x2_t *)((char *)v132 - 24);
              }
              while (v132 != v139);
              v139 = (int64x2_t *)*v205;
            }
            v131 = (int64x2_t *)&v145[24 * v143];
            v133 = (int64x2_t *)((char *)v146 + 24);
            *((_QWORD *)this + 8) = v147;
            *((_QWORD *)this + 9) = (char *)v146 + 24;
            *((_QWORD *)this + 10) = v131;
            if (v139)
            {
              operator delete(v139);
              v131 = *v23;
            }
          }
          else
          {
            *v132 = v130;
            v132[1].i64[0] = _D12;
            v133 = (int64x2_t *)((char *)v132 + 24);
          }
          *((_QWORD *)this + 9) = v133;
          v149 = vmlsq_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * (int)v57)), v204, *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v57));
          v150 = vcvtq_s64_f64(vaddq_f64(v149, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v149), v202, v203)));
          if (v133 >= v131)
          {
            v152 = (int64x2_t *)*v205;
            v153 = 0xAAAAAAAAAAAAAAABLL * (((char *)v133 - (_BYTE *)*v205) >> 3);
            v154 = v153 + 1;
            if (v153 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_269:
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            v155 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v152) >> 3);
            if (2 * v155 > v154)
              v154 = 2 * v155;
            if (v155 >= 0x555555555555555)
              v156 = 0xAAAAAAAAAAAAAAALL;
            else
              v156 = v154;
            if (v156)
            {
              v199 = v150;
              v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v156);
              v150 = v199;
              v158 = v157;
              v152 = (int64x2_t *)*((_QWORD *)this + 8);
              v133 = (int64x2_t *)*((_QWORD *)this + 9);
            }
            else
            {
              v158 = 0;
            }
            v159 = (int64x2_t *)&v158[24 * v153];
            *v159 = v150;
            v159[1].i64[0] = _D12;
            v160 = v159;
            if (v133 != v152)
            {
              do
              {
                v161 = *(int64x2_t *)((char *)v133 - 24);
                v160[-1].i64[1] = v133[-1].i64[1];
                *(int64x2_t *)((char *)v160 - 24) = v161;
                v160 = (int64x2_t *)((char *)v160 - 24);
                v133 = (int64x2_t *)((char *)v133 - 24);
              }
              while (v133 != v152);
              v152 = (int64x2_t *)*v205;
            }
            v151 = &v159[1].i8[8];
            *((_QWORD *)this + 8) = v160;
            *((_QWORD *)this + 9) = (char *)v159 + 24;
            *((_QWORD *)this + 10) = &v158[24 * v156];
            if (v152)
              operator delete(v152);
          }
          else
          {
            *v133 = v150;
            v133[1].i64[0] = _D12;
            v151 = &v133[1].i8[8];
          }
          *((_QWORD *)this + 9) = v151;
        }
        else
        {
          *((_QWORD *)this + 15) = 0;
          *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v57) = vnegq_f64(*(float64x2_t *)(*((_QWORD *)this + 11)
                                                                                                + 16 * (int)v57));
          v138 = v33 - 1;
          if (v120 == 3)
            ClipperLib::ClipperOffset::DoSquare(this, v138, v196);
          else
            ClipperLib::ClipperOffset::DoRound(this, v138, v196);
        }
        if ((int)v33 >= 2)
        {
          v162 = *((_QWORD *)this + 11);
          v163 = (v33 - 1);
          do
          {
            v137 = v163 > 1;
            *(float64x2_t *)(v162 + 16 * v163) = vnegq_f64(*(float64x2_t *)(v162 + 16 * (v163 - 1)));
            --v163;
          }
          while (v137);
        }
        *(float64x2_t *)*((_QWORD *)this + 11) = vnegq_f64(*(float64x2_t *)(*((_QWORD *)this + 11) + 16));
        v207[0] = v33 - 1;
        if ((int)v33 > 2)
        {
          do
          {
            LODWORD(v57) = v57 - 1;
            ClipperLib::ClipperOffset::OffsetPoint(this, v57, v207, *(_DWORD *)(v31 + 72));
          }
          while (v57 > 1);
        }
        v164 = *(_DWORD *)(v31 + 76);
        if (v164 == 2)
        {
          v165 = vmlsq_f64(vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5)), v204, *(float64x2_t *)*((_QWORD *)this + 11));
          v166 = vcvtq_s64_f64(vaddq_f64(v165, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v165), v202, v203)));
          v168 = (int64x2_t *)*((_QWORD *)this + 9);
          v167 = (int64x2_t *)*((_QWORD *)this + 10);
          v169 = v194;
          if (v168 >= v167)
          {
            v171 = (int64x2_t *)*v205;
            v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (_BYTE *)*v205) >> 3);
            v173 = v172 + 1;
            if (v172 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_271;
            v174 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v171) >> 3);
            if (2 * v174 > v173)
              v173 = 2 * v174;
            if (v174 >= 0x555555555555555)
              v175 = 0xAAAAAAAAAAAAAAALL;
            else
              v175 = v173;
            if (v175)
            {
              v200 = v166;
              v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v175);
              v166 = v200;
              v177 = v176;
              v171 = (int64x2_t *)*((_QWORD *)this + 8);
              v168 = (int64x2_t *)*((_QWORD *)this + 9);
            }
            else
            {
              v177 = 0;
            }
            v178 = (int64x2_t *)&v177[24 * v172];
            *v178 = v166;
            v178[1].i64[0] = _D12;
            v179 = v178;
            if (v168 != v171)
            {
              do
              {
                v180 = *(int64x2_t *)((char *)v168 - 24);
                v179[-1].i64[1] = v168[-1].i64[1];
                *(int64x2_t *)((char *)v179 - 24) = v180;
                v179 = (int64x2_t *)((char *)v179 - 24);
                v168 = (int64x2_t *)((char *)v168 - 24);
              }
              while (v168 != v171);
              v171 = (int64x2_t *)*v205;
            }
            v167 = (int64x2_t *)&v177[24 * v175];
            v170 = (int64x2_t *)((char *)v178 + 24);
            *((_QWORD *)this + 8) = v179;
            *((_QWORD *)this + 9) = (char *)v178 + 24;
            *((_QWORD *)this + 10) = v167;
            if (v171)
            {
              operator delete(v171);
              v167 = *v23;
            }
          }
          else
          {
            *v168 = v166;
            v168[1].i64[0] = _D12;
            v170 = (int64x2_t *)((char *)v168 + 24);
          }
          *((_QWORD *)this + 9) = v170;
          v181 = vmlaq_f64(vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5)), v204, *(float64x2_t *)*((_QWORD *)this + 11));
          v182 = vcvtq_s64_f64(vaddq_f64(v181, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v181), v202, v203)));
          if (v170 >= v167)
          {
            v184 = (int64x2_t *)*v205;
            v185 = 0xAAAAAAAAAAAAAAABLL * (((char *)v170 - (_BYTE *)*v205) >> 3);
            v186 = v185 + 1;
            if (v185 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_271:
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            v187 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v184) >> 3);
            if (2 * v187 > v186)
              v186 = 2 * v187;
            if (v187 >= 0x555555555555555)
              v188 = 0xAAAAAAAAAAAAAAALL;
            else
              v188 = v186;
            if (v188)
            {
              v201 = v182;
              v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v188);
              v182 = v201;
              v190 = v189;
              v184 = (int64x2_t *)*((_QWORD *)this + 8);
              v170 = (int64x2_t *)*((_QWORD *)this + 9);
            }
            else
            {
              v190 = 0;
            }
            v191 = (int64x2_t *)&v190[24 * v185];
            *v191 = v182;
            v191[1].i64[0] = _D12;
            v192 = v191;
            if (v170 == v184)
            {
              v169 = v194;
            }
            else
            {
              v169 = v194;
              do
              {
                v193 = *(int64x2_t *)((char *)v170 - 24);
                v192[-1].i64[1] = v170[-1].i64[1];
                *(int64x2_t *)((char *)v192 - 24) = v193;
                v192 = (int64x2_t *)((char *)v192 - 24);
                v170 = (int64x2_t *)((char *)v170 - 24);
              }
              while (v170 != v184);
              v184 = (int64x2_t *)*v205;
            }
            v183 = &v191[1].i8[8];
            *((_QWORD *)this + 8) = v192;
            *((_QWORD *)this + 9) = (char *)v191 + 24;
            *((_QWORD *)this + 10) = &v190[24 * v188];
            if (v184)
              operator delete(v184);
          }
          else
          {
            *v170 = v182;
            v170[1].i64[0] = _D12;
            v183 = &v170[1].i8[8];
          }
          *((_QWORD *)this + 9) = v183;
        }
        else
        {
          *((_QWORD *)this + 15) = 0;
          v169 = v194;
          if (v164 == 3)
            ClipperLib::ClipperOffset::DoSquare(this, 0, 1);
          else
            ClipperLib::ClipperOffset::DoRound(this, 0, 1);
        }
        v122 = *((_QWORD *)this + 3);
        v123 = v169;
        v124 = (char *)this + 64;
        if (v122 >= *((_QWORD *)this + 4))
          goto LABEL_264;
      }
      else
      {
        v207[0] = v33 - 1;
        if ((int)v33 >= 1)
        {
          v121 = 0;
          do
            ClipperLib::ClipperOffset::OffsetPoint(this, v121++, v207, *(_DWORD *)(v31 + 72));
          while ((_DWORD)v33 != v121);
        }
        v122 = *((_QWORD *)this + 3);
        if (v122 >= *((_QWORD *)this + 4))
        {
          v123 = v194;
          v124 = (char *)this + 64;
LABEL_264:
          result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v123, (uint64_t)v124);
          goto LABEL_265;
        }
        v123 = v194;
        v124 = (char *)this + 64;
      }
      std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)v123, (uint64_t)v124);
      result = v122 + 24;
LABEL_265:
      *((_QWORD *)this + 3) = result;
LABEL_266:
      ++v21;
      v20 = *((_QWORD *)this + 27);
    }
    while (v21 < (int)((unint64_t)(*((_QWORD *)this + 28) - v20) >> 3));
  }
  return result;
}

void ClipperLib::ClipperOffset::Execute(ClipperLib::ClipperOffset *this, void **a2, double a3)
{
  ClipperLib::ClipperBase *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26[3];
  __int128 v27;
  __int128 v28;
  uint64_t (**v29)(ClipperLib::Clipper *__hidden);
  void *v30[2];
  void *v31[2];
  __int128 v32;
  void *__p[2];
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  void (**v40)(ClipperLib::Clipper *__hidden);
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  ClipperLib::PolyTree::Clear((ClipperLib::PolyTree *)a2);
  ClipperLib::ClipperOffset::FixOrientations(this);
  ClipperLib::ClipperOffset::DoOffset(this, a3);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v41 = 0u;
  v42 = 0u;
  v29 = &off_1E7774540;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__p = 0u;
  v34 = 0;
  v35[0] = v35;
  v35[1] = v35;
  v35[2] = 0;
  v36 = 0;
  v43 = 0;
  v37 = 0;
  v38 = 0;
  v47 = 0;
  v39 = 0;
  v40 = &off_1E7774588;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v40, (uint64_t *)this + 2, 0, 1);
  if (a3 <= 0.0)
  {
    v27 = 0u;
    v28 = 0u;
    v6 = (ClipperLib::ClipperBase *)((char *)&v30[-1] + (_QWORD)*(v29 - 3));
    ClipperLib::ClipperBase::GetBounds(v6, (uint64_t)&v27);
    v7 = (uint64_t *)operator new(0x60uLL);
    v8 = v7;
    v9 = 0;
    v26[0] = v7;
    v26[2] = v7 + 12;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      v15 = &v7[v9];
      *v15 = 0;
      v15[1] = 0;
      v15[2] = _D0;
      v9 += 3;
    }
    while (v9 != 12);
    v26[1] = v7 + 12;
    v16 = *((_QWORD *)&v27 + 1);
    v17 = v27 - 10;
    v18 = v28;
    v19 = *((_QWORD *)&v28 + 1) + 10;
    *v7 = v27 - 10;
    v7[1] = v19;
    v18 += 10;
    v7[3] = v18;
    v7[4] = v19;
    v7[2] = _D0;
    v7[5] = _D0;
    v16 -= 10;
    v7[6] = v18;
    v7[7] = v16;
    v7[8] = _D0;
    v7[9] = v17;
    v7[10] = v16;
    v7[11] = _D0;
    ClipperLib::ClipperBase::AddPath((uint64_t)v6, v26, 0, 1);
    v37 = 1;
    ClipperLib::Clipper::Execute((uint64_t)&v29, 1, (ClipperLib::PolyTree *)a2, 3, 3);
    v20 = a2[4];
    v21 = (char *)(a2 + 4);
    if ((((_BYTE *)a2[5] - v20) & 0x7FFFFFFF8) == 8
      && (v22 = *(_QWORD *)v20,
          v23 = *(_QWORD *)(*(_QWORD *)v20 + 40) - *(_QWORD *)(*(_QWORD *)v20 + 32),
          (int)(v23 >> 3) >= 1))
    {
      std::vector<ClipperLib::PolyNode *>::reserve(a2 + 4, (v23 >> 3));
      **(_QWORD **)v21 = **(_QWORD **)(v22 + 32);
      *(_QWORD *)(**(_QWORD **)v21 + 56) = *(_QWORD *)(v22 + 56);
      v24 = *(_QWORD *)(v22 + 32);
      if ((int)((unint64_t)(*(_QWORD *)(v22 + 40) - v24) >> 3) >= 2)
      {
        v25 = 1;
        do
        {
          ClipperLib::PolyNode::AddChild((ClipperLib::PolyNode *)a2, *(ClipperLib::PolyNode **)(v24 + 8 * v25++));
          v24 = *(_QWORD *)(v22 + 32);
        }
        while (v25 < (int)((unint64_t)(*(_QWORD *)(v22 + 40) - v24) >> 3));
      }
    }
    else
    {
      ClipperLib::PolyTree::Clear((ClipperLib::PolyTree *)a2);
    }
    operator delete(v8);
  }
  else
  {
    ClipperLib::Clipper::Execute((uint64_t)&v29, 1, (ClipperLib::PolyTree *)a2, 2, 2);
  }
  v29 = &off_1E7774540;
  v40 = &off_1E7774588;
  std::__list_imp<long long>::clear(v35);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v31[1])
  {
    *(void **)&v32 = v31[1];
    operator delete(v31[1]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v40);
}

void sub_1BE384588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a17);
  _Unwind_Resume(a1);
}

void ClipperLib::ClipperOffset::OffsetPoint(ClipperLib::ClipperOffset *this, int a2, int *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  float64x2_t v20;
  int64x2_t v27;
  int64x2_t *v28;
  int64x2_t *v30;
  void **v31;
  float64x2_t v32;
  int64x2_t v35;
  int64x2_t *v36;
  __int8 *v38;
  double v39;
  int64x2_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int64x2_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int64x2_t *v54;
  int64x2_t v56;
  uint64_t v57;
  __int128 v58;
  int64x2_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  __int128 v70;
  unint64_t v71;
  float64x2_t v72;
  int64x2_t v73;
  __int8 *v75;
  int64x2_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int64x2_t *v83;
  char *v84;
  int64x2_t v86;
  int64x2_t *v87;
  char *v88;
  __int8 *v90;
  int64x2_t v91;
  int64x2_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int64x2_t v95;
  int64x2_t v96;

  v7 = *a3;
  v8 = *((_QWORD *)this + 11);
  v9 = a2;
  v10 = (double *)(v8 + 16 * a2);
  v12 = *v10;
  v11 = v10[1];
  v13 = *(float64x2_t *)(v8 + 16 * v7);
  v14 = *(double *)(v8 + 16 * v7 + 8);
  v15 = vmlad_n_f64(vmuld_lane_f64(-*v10, v13, 1), v11, v13.f64[0]);
  *((double *)this + 15) = v15;
  v16 = *((double *)this + 14);
  v17 = v15 * v16;
  v18 = 1.0;
  if (fabs(v15 * v16) >= 1.0)
  {
    if (v15 > 1.0 || (v18 = -1.0, v15 < -1.0))
    {
      *((double *)this + 15) = v18;
      v17 = v16 * v18;
    }
LABEL_8:
    if (v17 < 0.0)
    {
      v30 = (int64x2_t *)*((_QWORD *)this + 10);
      v31 = (void **)((char *)this + 64);
      v32 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * a2)), v13, v16);
      __asm
      {
        FMOV            V3.2D, #0.5
        FMOV            V4.2D, #-0.5
      }
      v35 = vcvtq_s64_f64(vaddq_f64(v32, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v32), _Q4, _Q3)));
      v36 = (int64x2_t *)*((_QWORD *)this + 9);
      v93 = _Q4;
      v94 = _Q3;
      if (v36 >= v30)
      {
        v40 = (int64x2_t *)*v31;
        v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (_BYTE *)*v31) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_83;
        v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v40) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x555555555555555)
          v44 = 0xAAAAAAAAAAAAAAALL;
        else
          v44 = v42;
        if (v44)
        {
          v92 = v35;
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v44);
          v35 = v92;
          v46 = v45;
          v40 = (int64x2_t *)*((_QWORD *)this + 8);
          v36 = (int64x2_t *)*((_QWORD *)this + 9);
        }
        else
        {
          v46 = 0;
        }
        v54 = (int64x2_t *)&v46[24 * v41];
        v30 = (int64x2_t *)&v46[24 * v44];
        *v54 = v35;
        __asm { FMOV            V0.2S, #-1.0 }
        v54[1].i64[0] = _D0;
        v38 = &v54[1].i8[8];
        if (v36 != v40)
        {
          do
          {
            v56 = *(int64x2_t *)((char *)v36 - 24);
            v54[-1].i64[1] = v36[-1].i64[1];
            *(int64x2_t *)((char *)v54 - 24) = v56;
            v54 = (int64x2_t *)((char *)v54 - 24);
            v36 = (int64x2_t *)((char *)v36 - 24);
          }
          while (v36 != v40);
          v40 = (int64x2_t *)*v31;
        }
        *((_QWORD *)this + 8) = v54;
        *((_QWORD *)this + 9) = v38;
        *((_QWORD *)this + 10) = v30;
        if (v40)
        {
          operator delete(v40);
          v30 = (int64x2_t *)*((_QWORD *)this + 10);
        }
        _Q4 = v93;
        _Q3 = v94;
      }
      else
      {
        *v36 = v35;
        __asm { FMOV            V0.2S, #-1.0 }
        v36[1].i64[0] = _D0;
        v38 = &v36[1].i8[8];
      }
      *((_QWORD *)this + 9) = v38;
      v57 = *((_QWORD *)this + 5) + 24 * (int)v9;
      if (v38 >= (__int8 *)v30)
      {
        v60 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (_BYTE *)*v31) >> 3);
        if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_83;
        v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (_BYTE *)*v31) >> 3);
        v62 = 2 * v61;
        if (2 * v61 <= v60 + 1)
          v62 = v60 + 1;
        if (v61 >= 0x555555555555555)
          v63 = 0xAAAAAAAAAAAAAAALL;
        else
          v63 = v62;
        if (v63)
          v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v63);
        else
          v64 = 0;
        v65 = &v64[24 * v60];
        v66 = &v64[24 * v63];
        v67 = *(_OWORD *)v57;
        *((_QWORD *)v65 + 2) = *(_QWORD *)(v57 + 16);
        *(_OWORD *)v65 = v67;
        v59 = (int64x2_t *)(v65 + 24);
        v69 = (char *)*((_QWORD *)this + 8);
        v68 = (char *)*((_QWORD *)this + 9);
        if (v68 != v69)
        {
          do
          {
            v70 = *(_OWORD *)(v68 - 24);
            *((_QWORD *)v65 - 1) = *((_QWORD *)v68 - 1);
            *(_OWORD *)(v65 - 24) = v70;
            v65 -= 24;
            v68 -= 24;
          }
          while (v68 != v69);
          v68 = (char *)*v31;
        }
        *((_QWORD *)this + 8) = v65;
        *((_QWORD *)this + 9) = v59;
        *((_QWORD *)this + 10) = v66;
        if (v68)
          operator delete(v68);
        _Q4 = v93;
        _Q3 = v94;
      }
      else
      {
        v58 = *(_OWORD *)v57;
        *((_QWORD *)v38 + 2) = *(_QWORD *)(v57 + 16);
        *(_OWORD *)v38 = v58;
        v59 = (int64x2_t *)(v38 + 24);
      }
      *((_QWORD *)this + 9) = v59;
      v71 = *((_QWORD *)this + 10);
      v72 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * (int)v9)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * v9), *((double *)this + 14));
      v73 = vcvtq_s64_f64(vaddq_f64(v72, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v72), _Q4, _Q3)));
      if ((unint64_t)v59 < v71)
      {
        *v59 = v73;
        __asm { FMOV            V0.2S, #-1.0 }
        v59[1].i64[0] = _D0;
        v75 = &v59[1].i8[8];
LABEL_73:
        *((_QWORD *)this + 9) = v75;
        goto LABEL_74;
      }
      v76 = (int64x2_t *)*v31;
      v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v31) >> 3);
      v78 = v77 + 1;
      if (v77 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v76) >> 3);
        if (2 * v79 > v78)
          v78 = 2 * v79;
        if (v79 >= 0x555555555555555)
          v80 = 0xAAAAAAAAAAAAAAALL;
        else
          v80 = v78;
        if (v80)
        {
          v96 = v73;
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v80);
          v73 = v96;
          v82 = v81;
          v76 = (int64x2_t *)*((_QWORD *)this + 8);
          v59 = (int64x2_t *)*((_QWORD *)this + 9);
        }
        else
        {
          v82 = 0;
        }
        v83 = (int64x2_t *)&v82[24 * v77];
        v84 = &v82[24 * v80];
        *v83 = v73;
        __asm { FMOV            V0.2S, #-1.0 }
        v83[1].i64[0] = _D0;
        v75 = &v83[1].i8[8];
        if (v59 != v76)
        {
          do
          {
            v86 = *(int64x2_t *)((char *)v59 - 24);
            v83[-1].i64[1] = v59[-1].i64[1];
            *(int64x2_t *)((char *)v83 - 24) = v86;
            v83 = (int64x2_t *)((char *)v83 - 24);
            v59 = (int64x2_t *)((char *)v59 - 24);
          }
          while (v59 != v76);
          v76 = (int64x2_t *)*v31;
        }
        *((_QWORD *)this + 8) = v83;
        *((_QWORD *)this + 9) = v75;
        *((_QWORD *)this + 10) = v84;
        if (v76)
          operator delete(v76);
        goto LABEL_73;
      }
LABEL_83:
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    }
    if (a4)
    {
      if (a4 == 1)
      {
        ClipperLib::ClipperOffset::DoRound(this, a2, v7);
        goto LABEL_74;
      }
      if (a4 != 2)
      {
LABEL_74:
        *a3 = a2;
        return;
      }
      v39 = v11 * v14 + v12 * v13.f64[0] + 1.0;
      if (v39 >= *((double *)this + 18))
      {
        ClipperLib::ClipperOffset::DoMiter(this, a2, v7, v39);
        goto LABEL_74;
      }
    }
    ClipperLib::ClipperOffset::DoSquare(this, a2, v7);
    goto LABEL_74;
  }
  if (v11 * v14 + v13.f64[0] * v12 <= 0.0)
    goto LABEL_8;
  v19 = *((_QWORD *)this + 10);
  v20 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * a2)), v13, v16);
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v27 = vcvtq_s64_f64(vaddq_f64(v20, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v20), _Q3, _Q1)));
  v28 = (int64x2_t *)*((_QWORD *)this + 9);
  if ((unint64_t)v28 >= v19)
  {
    v47 = (int64x2_t *)*((_QWORD *)this + 8);
    v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v47) >> 3);
    v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v47) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x555555555555555)
      v51 = 0xAAAAAAAAAAAAAAALL;
    else
      v51 = v49;
    if (v51)
    {
      v95 = v27;
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v51);
      v27 = v95;
      v53 = v52;
      v47 = (int64x2_t *)*((_QWORD *)this + 8);
      v28 = (int64x2_t *)*((_QWORD *)this + 9);
    }
    else
    {
      v53 = 0;
    }
    v87 = (int64x2_t *)&v53[24 * v48];
    v88 = &v53[24 * v51];
    *v87 = v27;
    __asm { FMOV            V0.2S, #-1.0 }
    v87[1].i64[0] = _D0;
    v90 = &v87[1].i8[8];
    if (v28 != v47)
    {
      do
      {
        v91 = *(int64x2_t *)((char *)v28 - 24);
        v87[-1].i64[1] = v28[-1].i64[1];
        *(int64x2_t *)((char *)v87 - 24) = v91;
        v87 = (int64x2_t *)((char *)v87 - 24);
        v28 = (int64x2_t *)((char *)v28 - 24);
      }
      while (v28 != v47);
      v47 = (int64x2_t *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 8) = v87;
    *((_QWORD *)this + 9) = v90;
    *((_QWORD *)this + 10) = v88;
    if (v47)
      operator delete(v47);
    *((_QWORD *)this + 9) = v90;
  }
  else
  {
    *v28 = v27;
    __asm { FMOV            V0.2S, #-1.0 }
    v28[1].i64[0] = _D0;
    *((_QWORD *)this + 9) = (char *)v28 + 24;
  }
}

void ClipperLib::ClipperOffset::DoSquare(ClipperLib::ClipperOffset *this, int a2, int a3)
{
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  long double v9;
  double v10;
  int64x2_t *v11;
  uint64_t *v12;
  double v13;
  double v14;
  double v15;
  void **v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  int64x2_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  __int128 v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int64x2_t v42;
  __int8 *v44;
  int64x2_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int64x2_t *v52;
  char *v53;
  int64x2_t v55;
  double v56;
  int64x2_t v57;

  v5 = *((_QWORD *)this + 11);
  v6 = (double *)(v5 + 16 * a3);
  v7 = *v6;
  v8 = v6[1];
  v9 = atan2(*((long double *)this + 15), v8 * *(double *)(v5 + 16 * a2 + 8) + *v6 * *(double *)(v5 + 16 * a2));
  v10 = tan(v9 * 0.25);
  v11 = (int64x2_t *)*((_QWORD *)this + 10);
  v12 = (uint64_t *)(*((_QWORD *)this + 5) + 24 * a2);
  v13 = *((double *)this + 14);
  v14 = (double)*v12 + v13 * (v7 - v8 * v10);
  if (v14 >= 0.0)
    v15 = 0.5;
  else
    v15 = -0.5;
  v16 = (void **)((char *)this + 64);
  v17 = (uint64_t)(v14 + v15);
  v18 = (double)v12[1] + v13 * (v8 + v7 * v10);
  if (v18 >= 0.0)
    v19 = 0.5;
  else
    v19 = -0.5;
  v20 = (uint64_t)(v18 + v19);
  v21 = (uint64_t *)*((_QWORD *)this + 9);
  if (v21 >= (uint64_t *)v11)
  {
    v28 = (uint64_t *)*v16;
    v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)*v16) >> 3);
    v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_41;
    v56 = v10;
    v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v28) >> 3);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x555555555555555)
      v32 = 0xAAAAAAAAAAAAAAALL;
    else
      v32 = v30;
    if (v32)
    {
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v32);
      v28 = (uint64_t *)*((_QWORD *)this + 8);
      v21 = (uint64_t *)*((_QWORD *)this + 9);
    }
    else
    {
      v33 = 0;
    }
    v34 = (uint64_t *)&v33[24 * v29];
    v11 = (int64x2_t *)&v33[24 * v32];
    *v34 = v17;
    v34[1] = v20;
    __asm { FMOV            V0.2S, #-1.0 }
    v34[2] = _D0;
    v27 = (int64x2_t *)(v34 + 3);
    if (v21 != v28)
    {
      do
      {
        v36 = *(_OWORD *)(v21 - 3);
        *(v34 - 1) = *(v21 - 1);
        *(_OWORD *)(v34 - 3) = v36;
        v34 -= 3;
        v21 -= 3;
      }
      while (v21 != v28);
      v28 = (uint64_t *)*v16;
    }
    *((_QWORD *)this + 8) = v34;
    *((_QWORD *)this + 9) = v27;
    *((_QWORD *)this + 10) = v11;
    if (v28)
    {
      operator delete(v28);
      v11 = (int64x2_t *)*((_QWORD *)this + 10);
    }
    v10 = v56;
  }
  else
  {
    *v21 = v17;
    v21[1] = v20;
    __asm { FMOV            V1.2S, #-1.0 }
    v21[2] = _D1;
    v27 = (int64x2_t *)(v21 + 3);
  }
  *((_QWORD *)this + 9) = v27;
  v37 = *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * a2);
  *(_QWORD *)&v38.f64[0] = vdupq_laneq_s64((int64x2_t)v37, 1).u64[0];
  v38.f64[1] = -v37.f64[0];
  v39 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * a2)), vmlaq_n_f64(v37, v38, v10), *((double *)this + 14));
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v42 = vcvtq_s64_f64(vaddq_f64(v39, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v39), _Q3, _Q1)));
  if (v27 < v11)
  {
    *v27 = v42;
    __asm { FMOV            V0.2S, #-1.0 }
    v27[1].i64[0] = _D0;
    v44 = &v27[1].i8[8];
    goto LABEL_40;
  }
  v45 = (int64x2_t *)*v16;
  v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (_BYTE *)*v16) >> 3);
  v47 = v46 + 1;
  if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_41:
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v45) >> 3);
  if (2 * v48 > v47)
    v47 = 2 * v48;
  if (v48 >= 0x555555555555555)
    v49 = 0xAAAAAAAAAAAAAAALL;
  else
    v49 = v47;
  if (v49)
  {
    v57 = v42;
    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v49);
    v42 = v57;
    v51 = v50;
    v45 = (int64x2_t *)*((_QWORD *)this + 8);
    v27 = (int64x2_t *)*((_QWORD *)this + 9);
  }
  else
  {
    v51 = 0;
  }
  v52 = (int64x2_t *)&v51[24 * v46];
  v53 = &v51[24 * v49];
  *v52 = v42;
  __asm { FMOV            V0.2S, #-1.0 }
  v52[1].i64[0] = _D0;
  v44 = &v52[1].i8[8];
  if (v27 != v45)
  {
    do
    {
      v55 = *(int64x2_t *)((char *)v27 - 24);
      v52[-1].i64[1] = v27[-1].i64[1];
      *(int64x2_t *)((char *)v52 - 24) = v55;
      v52 = (int64x2_t *)((char *)v52 - 24);
      v27 = (int64x2_t *)((char *)v27 - 24);
    }
    while (v27 != v45);
    v45 = (int64x2_t *)*v16;
  }
  *((_QWORD *)this + 8) = v52;
  *((_QWORD *)this + 9) = v44;
  *((_QWORD *)this + 10) = v53;
  if (v45)
    operator delete(v45);
LABEL_40:
  *((_QWORD *)this + 9) = v44;
}

void ClipperLib::ClipperOffset::DoRound(ClipperLib::ClipperOffset *this, int a2, int a3)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  int v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  __int128 v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  float64x2_t v42;
  int64x2_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int64x2_t *v54;
  char *v55;
  int64x2_t v56;
  int64x2_t v57;

  v4 = *((_QWORD *)this + 11);
  v5 = (double *)(v4 + 16 * a3);
  v6 = a2;
  v8 = *v5;
  v7 = v5[1];
  v9 = 0;
  v10 = *((double *)this + 19)
      * fabs(atan2(*((long double *)this + 15), v7 * *(double *)(v4 + 16 * a2 + 8) + *v5 * *(double *)(v4 + 16 * a2)));
  if (v10 >= 0.0)
    v11 = 0.5;
  else
    v11 = -0.5;
  if ((int)(uint64_t)(v10 + v11) <= 1)
    v12 = 1;
  else
    v12 = (uint64_t)(v10 + v11);
  v13 = (void **)((char *)this + 64);
  v14 = (uint64_t *)*((_QWORD *)this + 9);
  __asm { FMOV            V8.2S, #-1.0 }
  do
  {
    v20 = (uint64_t *)(*((_QWORD *)this + 5) + 24 * (int)v6);
    v21 = *((double *)this + 14);
    v22 = (double)*v20 + v8 * v21;
    if (v22 >= 0.0)
      v23 = 0.5;
    else
      v23 = -0.5;
    v24 = (uint64_t)(v22 + v23);
    v25 = (double)v20[1] + v7 * v21;
    if (v25 >= 0.0)
      v26 = 0.5;
    else
      v26 = -0.5;
    v27 = (uint64_t)(v25 + v26);
    v28 = *((_QWORD *)this + 10);
    if ((unint64_t)v14 >= v28)
    {
      v29 = (uint64_t *)*v13;
      v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (_BYTE *)*v13) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_48;
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v29) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x555555555555555)
        v33 = 0xAAAAAAAAAAAAAAALL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v33);
        v29 = (uint64_t *)*((_QWORD *)this + 8);
        v14 = (uint64_t *)*((_QWORD *)this + 9);
      }
      else
      {
        v34 = 0;
      }
      v35 = (uint64_t *)&v34[24 * v30];
      *v35 = v24;
      v35[1] = v27;
      v35[2] = _D8;
      v36 = v35;
      if (v14 != v29)
      {
        do
        {
          v37 = *(_OWORD *)(v14 - 3);
          *(v36 - 1) = *(v14 - 1);
          *(_OWORD *)(v36 - 3) = v37;
          v36 -= 3;
          v14 -= 3;
        }
        while (v14 != v29);
        v29 = (uint64_t *)*v13;
      }
      v14 = v35 + 3;
      *((_QWORD *)this + 8) = v36;
      *((_QWORD *)this + 9) = v35 + 3;
      *((_QWORD *)this + 10) = &v34[24 * v33];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v14 = v24;
      v14[1] = v27;
      v14[2] = _D8;
      v14 += 3;
    }
    *((_QWORD *)this + 9) = v14;
    v39 = *((double *)this + 16);
    v38 = *((double *)this + 17);
    v40 = -(v39 * v7);
    v7 = v7 * v38 + v8 * v39;
    v8 = v40 + v8 * v38;
    ++v9;
  }
  while (v9 != v12);
  v41 = *((_QWORD *)this + 10);
  v42 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * (int)v6)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * v6), *((double *)this + 14));
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v45 = vcvtq_s64_f64(vaddq_f64(v42, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v42), _Q3, _Q2)));
  if ((unint64_t)v14 >= v41)
  {
    v47 = (uint64_t *)*v13;
    v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (_BYTE *)*v13) >> 3);
    v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)v47) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x555555555555555)
      v51 = 0xAAAAAAAAAAAAAAALL;
    else
      v51 = v49;
    if (v51)
    {
      v57 = v45;
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)this + 80, v51);
      v45 = v57;
      v53 = v52;
      v47 = (uint64_t *)*((_QWORD *)this + 8);
      v14 = (uint64_t *)*((_QWORD *)this + 9);
    }
    else
    {
      v53 = 0;
    }
    v54 = (int64x2_t *)&v53[24 * v48];
    v55 = &v53[24 * v51];
    *v54 = v45;
    v54[1].i64[0] = _D8;
    v46 = &v54[1].i64[1];
    if (v14 != v47)
    {
      do
      {
        v56 = *(int64x2_t *)(v14 - 3);
        v54[-1].i64[1] = *(v14 - 1);
        *(int64x2_t *)((char *)v54 - 24) = v56;
        v54 = (int64x2_t *)((char *)v54 - 24);
        v14 -= 3;
      }
      while (v14 != v47);
      v47 = (uint64_t *)*v13;
    }
    *((_QWORD *)this + 8) = v54;
    *((_QWORD *)this + 9) = v46;
    *((_QWORD *)this + 10) = v55;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *(int64x2_t *)v14 = v45;
    v14[2] = _D8;
    v46 = v14 + 3;
  }
  *((_QWORD *)this + 9) = v46;
}

void ClipperLib::ClipperOffset::DoMiter(ClipperLib::ClipperOffset *this, int a2, int a3, double a4)
{
  char *v5;
  unint64_t v6;
  float64x2_t v7;
  int64x2_t v14;
  int64x2_t *v15;
  __int8 *v17;
  void **v18;
  int64x2_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int64x2_t *v26;
  char *v27;
  int64x2_t v29;
  int64x2_t v30;

  v5 = (char *)this + 80;
  v6 = *((_QWORD *)this + 10);
  v7 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 24 * a2)), vaddq_f64(*(float64x2_t *)(*((_QWORD *)this + 11) + 16 * a3), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * a2)), *((double *)this + 14) / a4);
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v14 = vcvtq_s64_f64(vaddq_f64(v7, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v7), _Q3, _Q2)));
  v15 = (int64x2_t *)*((_QWORD *)this + 9);
  if ((unint64_t)v15 >= v6)
  {
    v18 = (void **)((char *)this + 64);
    v19 = (int64x2_t *)*((_QWORD *)this + 8);
    v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v19) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v19) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x555555555555555)
      v23 = 0xAAAAAAAAAAAAAAALL;
    else
      v23 = v21;
    if (v23)
    {
      v30 = v14;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v5, v23);
      v14 = v30;
      v25 = v24;
      v19 = (int64x2_t *)*((_QWORD *)this + 8);
      v15 = (int64x2_t *)*((_QWORD *)this + 9);
    }
    else
    {
      v25 = 0;
    }
    v26 = (int64x2_t *)&v25[24 * v20];
    v27 = &v25[24 * v23];
    *v26 = v14;
    __asm { FMOV            V0.2S, #-1.0 }
    v26[1].i64[0] = _D0;
    v17 = &v26[1].i8[8];
    if (v15 != v19)
    {
      do
      {
        v29 = *(int64x2_t *)((char *)v15 - 24);
        v26[-1].i64[1] = v15[-1].i64[1];
        *(int64x2_t *)((char *)v26 - 24) = v29;
        v26 = (int64x2_t *)((char *)v26 - 24);
        v15 = (int64x2_t *)((char *)v15 - 24);
      }
      while (v15 != v19);
      v19 = (int64x2_t *)*v18;
    }
    *((_QWORD *)this + 8) = v26;
    *((_QWORD *)this + 9) = v17;
    *((_QWORD *)this + 10) = v27;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v15 = v14;
    __asm { FMOV            V0.2S, #-1.0 }
    v15[1].i64[0] = _D0;
    v17 = &v15[1].i8[8];
  }
  *((_QWORD *)this + 9) = v17;
}

uint64_t *ClipperLib::ReversePaths(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;

  v2 = *result;
  v1 = result[1];
  if (v1 != *result)
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(v2 + 24 * v3);
      v5 = *v4;
      v6 = v4[1];
      v7 = v6 - 24;
      if (v5 != v6 && v7 > v5)
      {
        v9 = v5 + 24;
        do
        {
          v10 = *(_QWORD *)(v9 - 8);
          v11 = *(_OWORD *)(v9 - 24);
          v12 = *(_QWORD *)(v7 + 16);
          *(_OWORD *)(v9 - 24) = *(_OWORD *)v7;
          *(_QWORD *)(v9 - 8) = v12;
          *(_OWORD *)v7 = v11;
          *(_QWORD *)(v7 + 16) = v10;
          v7 -= 24;
          v13 = v9 >= v7;
          v9 += 24;
        }
        while (!v13);
        v2 = *result;
        v1 = result[1];
      }
      ++v3;
    }
    while (v3 < 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3));
  }
  return result;
}

void ClipperLib::SimplifyPolygon(uint64_t **a1, uint64_t *a2, int a3)
{
  uint64_t (**v5)(ClipperLib::Clipper *__hidden);
  void *v6[2];
  void *v7[2];
  __int128 v8;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  void (**v16)(ClipperLib::Clipper *__hidden);
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v17 = 0u;
  v18 = 0u;
  v5 = &off_1E7774540;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = 0;
  v11[0] = v11;
  v11[1] = v11;
  v11[2] = 0;
  v12 = 0;
  v19 = 0;
  v13 = 0;
  v23 = 0;
  v15 = 0;
  v16 = &off_1E7774588;
  v14 = 1;
  ClipperLib::ClipperBase::AddPath((uint64_t)&v16, a1, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a2, a3, a3);
  v5 = &off_1E7774540;
  v16 = &off_1E7774588;
  std::__list_imp<long long>::clear(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[1])
  {
    *(void **)&v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v16);
}

void sub_1BE385518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void ClipperLib::SimplifyPolygons(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t (**v5)(ClipperLib::Clipper *__hidden);
  void *v6[2];
  void *v7[2];
  __int128 v8;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  void (**v16)(ClipperLib::Clipper *__hidden);
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v17 = 0u;
  v18 = 0u;
  v5 = &off_1E7774540;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = 0;
  v11[0] = v11;
  v11[1] = v11;
  v11[2] = 0;
  v12 = 0;
  v19 = 0;
  v13 = 0;
  v23 = 0;
  v15 = 0;
  v16 = &off_1E7774588;
  v14 = 1;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v16, a1, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a2, a3, a3);
  v5 = &off_1E7774540;
  v16 = &off_1E7774588;
  std::__list_imp<long long>::clear(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[1])
  {
    *(void **)&v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v16);
}

void sub_1BE385654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void ClipperLib::SimplifyPolygons(uint64_t *a1, int a2)
{
  ClipperLib::SimplifyPolygons(a1, a1, a2);
}

double ClipperLib::DistanceFromLineSqrd(ClipperLib *this, const IntPoint *a2, const IntPoint *a3, const IntPoint *a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;

  v4 = *((_QWORD *)a2 + 1);
  v5 = (double)(v4 - *((_QWORD *)a3 + 1));
  v6 = *(_QWORD *)a3 - *(_QWORD *)a2;
  v7 = (double)v6 * (double)*((uint64_t *)this + 1)
     + v5 * (double)*(uint64_t *)this
     - ((double)v4 * (double)v6
      + v5 * (double)*(_QWORD *)a2);
  return v7 * v7 / ((double)v6 * (double)v6 + v5 * v5);
}

BOOL ClipperLib::SlopesNearCollinear(ClipperLib *this, const IntPoint *a2, const IntPoint *a3, const IntPoint *a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;

  v6 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  v8 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  if ((uint64_t)(*(_QWORD *)this - *(_QWORD *)a2) >= 0)
    v9 = *(_QWORD *)this - *(_QWORD *)a2;
  else
    v9 = *(_QWORD *)a2 - *(_QWORD *)this;
  v10 = v5 - v7;
  if (v5 - v7 >= 0)
    v11 = v5 - v7;
  else
    v11 = v7 - v5;
  if (v9 <= v11)
  {
    v15 = *((_QWORD *)a3 + 1);
    if (v5 <= v7 != v5 < v15)
    {
      v13 = (double)(v7 - v15);
      v14 = *(_QWORD *)a3 - v8;
      goto LABEL_12;
    }
    if (v5 >= v7 != v7 < v15)
    {
      v13 = (double)(v5 - v15);
      v16 = (double)(*(_QWORD *)a3 - v6);
      goto LABEL_17;
    }
    v13 = (double)v10;
    v16 = (double)(v8 - v6);
    v17 = (double)v5 * v16 + (double)v10 * (double)v6;
    v18 = (double)*(_QWORD *)a3;
    v22 = (double)v15;
LABEL_21:
    v21 = v16 * v22;
    return (v21 + v13 * v18 - v17) * (v21 + v13 * v18 - v17) / (v16 * v16 + v13 * v13) < a5;
  }
  v12 = *(_QWORD *)a3;
  if (v8 >= v6 == *(_QWORD *)a3 > v6)
  {
    v20 = v8 - v6;
    if (v8 <= v6 != v12 > v8)
    {
      v13 = (double)(v5 - *((_QWORD *)a3 + 1));
      v16 = (double)(*(_QWORD *)a3 - v6);
LABEL_17:
      v17 = (double)v5 * v16 + v13 * (double)v6;
      v18 = (double)v8;
      v19 = (double)v7;
      goto LABEL_18;
    }
    v13 = (double)v10;
    v16 = (double)v20;
    v17 = (double)v5 * (double)v20 + (double)v10 * (double)v6;
    v18 = (double)v12;
    v22 = (double)*((uint64_t *)a3 + 1);
    goto LABEL_21;
  }
  v13 = (double)(v7 - *((_QWORD *)a3 + 1));
  v14 = v12 - v8;
LABEL_12:
  v16 = (double)v14;
  v17 = (double)v7 * (double)v14 + v13 * (double)v8;
  v18 = (double)v6;
  v19 = (double)v5;
LABEL_18:
  v21 = v19 * v16;
  return (v21 + v13 * v18 - v17) * (v21 + v13 * v18 - v17) / (v16 * v16 + v13 * v13) < a5;
}

BOOL ClipperLib::PointsAreClose(uint64_t *a1, uint64_t *a2, double a3)
{
  double v3;
  double v4;

  v3 = (double)*a1 - (double)*a2;
  v4 = (double)a1[1] - (double)a2[1];
  return v4 * v4 + v3 * v3 <= a3;
}

uint64_t ClipperLib::ExcludeOp(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = v1;
  *(_DWORD *)v1 = 0;
  return v1;
}

uint64_t *ClipperLib::CleanPolygon(uint64_t *result, _QWORD *a2, double a3)
{
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  const IntPoint *v10;
  unint64_t v11;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  double v27;
  int *v28;
  int *v29;
  double v30;
  double v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v4 = result[1] - *result;
  if (v4)
  {
    v6 = result;
    v7 = v4 / 24;
    v8 = 48 * (v4 / 24);
    is_mul_ok(v4 / 24, 0x30uLL);
    v9 = (_DWORD *)operator new[]();
    v11 = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      v17 = &v9[v11 / 4];
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = _D0;
      v11 += 48;
    }
    while (v8 != v11);
    if (v7 <= 1)
      v18 = 1;
    else
      v18 = v7;
    v19 = *v6;
    v20 = -v18;
    v21 = 1;
    v22 = v9;
    do
    {
      v23 = *(_QWORD *)(v19 + 16);
      *(_OWORD *)(v22 + 2) = *(_OWORD *)v19;
      if (v7 == v21)
        v24 = 0;
      else
        v24 = v21;
      v25 = &v9[12 * v24];
      *((_QWORD *)v22 + 3) = v23;
      *((_QWORD *)v22 + 4) = v25;
      *((_QWORD *)v25 + 5) = v22;
      *v22 = 0;
      v22 += 12;
      ++v21;
      v19 += 24;
    }
    while (v20 + v21 != 1);
    if (*v9)
    {
      v26 = v9;
      goto LABEL_26;
    }
    v27 = a3 * a3;
    v28 = v9;
    while (1)
    {
      v29 = (int *)*((_QWORD *)v28 + 4);
      v26 = (int *)*((_QWORD *)v28 + 5);
      if (v29 == v26)
      {
        v26 = v28;
LABEL_26:
        if (v7 >= 3)
          v34 = v7;
        else
          v34 = 0;
        std::vector<ClipperLib::IntPoint>::resize((uint64_t)a2, v34);
        if (v7 >= 3)
        {
          v35 = 0;
          do
          {
            v36 = *a2 + v35;
            v37 = *(_OWORD *)(v26 + 2);
            *(_QWORD *)(v36 + 16) = *((_QWORD *)v26 + 3);
            *(_OWORD *)v36 = v37;
            v26 = (int *)*((_QWORD *)v26 + 4);
            v35 += 24;
            --v7;
          }
          while (v7);
        }
        JUMPOUT(0x1C3B7F758);
      }
      v30 = (double)*((uint64_t *)v26 + 1);
      v31 = (double)*((uint64_t *)v26 + 2);
      if (((double)*((uint64_t *)v28 + 2) - v31) * ((double)*((uint64_t *)v28 + 2) - v31)
         + ((double)*((uint64_t *)v28 + 1) - v30) * ((double)*((uint64_t *)v28 + 1) - v30) > v27)
      {
        if ((v31 - (double)*((uint64_t *)v29 + 2)) * (v31 - (double)*((uint64_t *)v29 + 2))
           + (v30 - (double)*((uint64_t *)v29 + 1)) * (v30 - (double)*((uint64_t *)v29 + 1)) <= v27)
        {
          v32 = 0;
          v33 = *((_QWORD *)v29 + 5);
          *(_QWORD *)(v33 + 32) = *((_QWORD *)v29 + 4);
          *(_QWORD *)(*((_QWORD *)v29 + 4) + 40) = v33;
          *(_DWORD *)v33 = 0;
          v26 = (int *)*((_QWORD *)v28 + 5);
          *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 4);
          *(_QWORD *)(*((_QWORD *)v28 + 4) + 40) = v26;
          *v26 = 0;
          v7 -= 2;
          goto LABEL_23;
        }
        if (!ClipperLib::SlopesNearCollinear((ClipperLib *)(v26 + 2), (const IntPoint *)(v28 + 2), (const IntPoint *)(v29 + 2), v10, v27))
        {
          *v28 = 1;
          v32 = *v29;
          v26 = v29;
          goto LABEL_23;
        }
      }
      v32 = 0;
      *((_QWORD *)v26 + 4) = v29;
      *(_QWORD *)(*((_QWORD *)v28 + 4) + 40) = v26;
      *v26 = 0;
      --v7;
LABEL_23:
      v28 = v26;
      if (v32)
        goto LABEL_26;
    }
  }
  a2[1] = *a2;
  return result;
}

void std::vector<ClipperLib::IntPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<ClipperLib::IntPoint>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t *ClipperLib::CleanPolygon(uint64_t *a1, double a2)
{
  return ClipperLib::CleanPolygon(a1, a1, a2);
}

void ClipperLib::CleanPolygons(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ClipperLib::CleanPolygon((uint64_t *)(v6 + v7), (_QWORD *)(*a2 + v7), a3);
      ++v8;
      v6 = *a1;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void ClipperLib::CleanPolygons(uint64_t *a1, double a2)
{
  ClipperLib::CleanPolygons(a1, a1, a2);
}

void ClipperLib::Minkowski(uint64_t *a1, _QWORD *a2, uint64_t *a3, char a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int64x2_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int64x2_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int64x2_t v120;
  int64x2_t v121;
  unint64_t v122;
  void *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  void *__p[2];
  _QWORD v131[2];

  v7 = *a1;
  v6 = a1[1];
  v8 = a2[1] - *a2;
  if (v8)
    _ZF = v6 == v7;
  else
    _ZF = 1;
  if (_ZF)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a3);
  }
  else
  {
    v13 = v8 / 24;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    std::vector<std::vector<ClipperLib::IntPoint>>::reserve(&v127, v8 / 24);
    v116 = a5;
    v14 = (v6 - v7) / 24;
    if (v13 <= 1)
      v15 = 1;
    else
      v15 = v13;
    v117 = v15;
    __asm { FMOV            V8.2S, #-1.0 }
    v20 = 0;
    if ((a4 & 1) != 0)
    {
      v21 = a2;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v131[0] = 0;
        std::vector<ClipperLib::IntPoint>::reserve(__p, v14);
        v22 = *a1;
        if (a1[1] != *a1)
        {
          v23 = 0;
          v24 = (char *)__p[1];
          do
          {
            v25 = vaddq_s64(*(int64x2_t *)(v22 + 24 * v23), *(int64x2_t *)(*v21 + 24 * v20));
            if ((unint64_t)v24 >= v131[0])
            {
              v120 = v25;
              v26 = (char *)__p[0];
              v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (char *)__p[0]) >> 3);
              v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) > v28)
                v28 = 0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555)
                v29 = 0xAAAAAAAAAAAAAAALL;
              else
                v29 = v28;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v131, v29);
                v26 = (char *)__p[0];
                v24 = (char *)__p[1];
              }
              else
              {
                v30 = 0;
              }
              v31 = &v30[24 * v27];
              *(int64x2_t *)v31 = v120;
              *((_QWORD *)v31 + 2) = _D8;
              v32 = v31;
              if (v24 == v26)
              {
                v21 = a2;
              }
              else
              {
                v21 = a2;
                do
                {
                  v33 = *(_OWORD *)(v24 - 24);
                  *((_QWORD *)v32 - 1) = *((_QWORD *)v24 - 1);
                  *(_OWORD *)(v32 - 24) = v33;
                  v32 -= 24;
                  v24 -= 24;
                }
                while (v24 != v26);
                v26 = (char *)__p[0];
              }
              v24 = v31 + 24;
              __p[0] = v32;
              __p[1] = v31 + 24;
              v131[0] = &v30[24 * v29];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(int64x2_t *)v24 = v25;
              *((_QWORD *)v24 + 2) = _D8;
              v24 += 24;
            }
            __p[1] = v24;
            ++v23;
            v22 = *a1;
          }
          while (v23 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
        }
        v34 = v128;
        if ((unint64_t)v128 >= v129)
        {
          v35 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(&v127, (uint64_t)__p);
        }
        else
        {
          *v128 = 0;
          v34[1] = 0;
          v34[2] = 0;
          std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v34, __p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
          v35 = (uint64_t)(v34 + 3);
        }
        v128 = (_QWORD *)v35;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v20;
      }
      while (v20 != v117);
    }
    else
    {
      v36 = a2;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v131[0] = 0;
        std::vector<ClipperLib::IntPoint>::reserve(__p, v14);
        v37 = *a1;
        if (a1[1] != *a1)
        {
          v38 = 0;
          v39 = (char *)__p[1];
          do
          {
            v40 = vsubq_s64(*(int64x2_t *)(*v36 + 24 * v20), *(int64x2_t *)(v37 + 24 * v38));
            if ((unint64_t)v39 >= v131[0])
            {
              v121 = v40;
              v41 = (char *)__p[0];
              v42 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (char *)__p[0]) >> 3);
              v43 = v42 + 1;
              if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) > v43)
                v43 = 0x5555555555555556 * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555)
                v44 = 0xAAAAAAAAAAAAAAALL;
              else
                v44 = v43;
              if (v44)
              {
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)v131, v44);
                v41 = (char *)__p[0];
                v39 = (char *)__p[1];
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[24 * v42];
              *(int64x2_t *)v46 = v121;
              *((_QWORD *)v46 + 2) = _D8;
              v47 = v46;
              if (v39 == v41)
              {
                v36 = a2;
              }
              else
              {
                v36 = a2;
                do
                {
                  v48 = *(_OWORD *)(v39 - 24);
                  *((_QWORD *)v47 - 1) = *((_QWORD *)v39 - 1);
                  *(_OWORD *)(v47 - 24) = v48;
                  v47 -= 24;
                  v39 -= 24;
                }
                while (v39 != v41);
                v41 = (char *)__p[0];
              }
              v39 = v46 + 24;
              __p[0] = v47;
              __p[1] = v46 + 24;
              v131[0] = &v45[24 * v44];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(int64x2_t *)v39 = v40;
              *((_QWORD *)v39 + 2) = _D8;
              v39 += 24;
            }
            __p[1] = v39;
            ++v38;
            v37 = *a1;
          }
          while (v38 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
        }
        v49 = v128;
        if ((unint64_t)v128 >= v129)
        {
          v50 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(&v127, (uint64_t)__p);
        }
        else
        {
          *v128 = 0;
          v49[1] = 0;
          v49[2] = 0;
          std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v49, __p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
          v50 = (uint64_t)(v49 + 3);
        }
        v128 = (_QWORD *)v50;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v20;
      }
      while (v20 != v117);
    }
    std::vector<std::vector<ClipperLib::IntPoint>>::__clear[abi:ne180100](a3);
    v51 = v13 + v116;
    std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a3, v51 + v51 * v14);
    v118 = v51 - 1;
    if (v51 != 1)
    {
      v52 = 0;
      if (v14 <= 1)
        v53 = 1;
      else
        v53 = v14;
      v119 = v53;
      do
      {
        v54 = 0;
        v122 = v52;
        v55 = v52 + 1;
        do
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          std::vector<ClipperLib::IntPoint>::reserve(&v124, 4uLL);
          v56 = *(_QWORD *)(v127 + 24 * (v122 % v13)) + 24 * (v54 % v14);
          v57 = v125;
          if (v125 >= v126)
          {
            v60 = 0xAAAAAAAAAAAAAAABLL * ((v125 - (_BYTE *)v124) >> 3);
            v61 = v60 + 1;
            if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_152;
            if (0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3) > v61)
              v61 = 0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (_BYTE *)v124) >> 3) >= 0x555555555555555)
              v62 = 0xAAAAAAAAAAAAAAALL;
            else
              v62 = v61;
            if (v62)
              v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v62);
            else
              v63 = 0;
            v64 = &v63[24 * v60];
            v65 = *(_OWORD *)v56;
            *((_QWORD *)v64 + 2) = *(_QWORD *)(v56 + 16);
            *(_OWORD *)v64 = v65;
            v67 = (char *)v124;
            v66 = v125;
            v68 = v64;
            if (v125 != v124)
            {
              do
              {
                v69 = *(_OWORD *)(v66 - 24);
                *((_QWORD *)v68 - 1) = *((_QWORD *)v66 - 1);
                *(_OWORD *)(v68 - 24) = v69;
                v68 -= 24;
                v66 -= 24;
              }
              while (v66 != v67);
              v66 = (char *)v124;
            }
            v59 = v64 + 24;
            v124 = v68;
            v125 = v64 + 24;
            v126 = &v63[24 * v62];
            if (v66)
              operator delete(v66);
          }
          else
          {
            v58 = *(_OWORD *)v56;
            *((_QWORD *)v125 + 2) = *(_QWORD *)(v56 + 16);
            *v57 = v58;
            v59 = (char *)v57 + 24;
          }
          v125 = v59;
          v70 = *(_QWORD *)(v127 + 24 * (v55 % v13)) + 24 * (v54 % v14);
          if (v59 >= v126)
          {
            v73 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (_BYTE *)v124) >> 3);
            v74 = v73 + 1;
            if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_152;
            if (0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3) > v74)
              v74 = 0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (_BYTE *)v124) >> 3) >= 0x555555555555555)
              v75 = 0xAAAAAAAAAAAAAAALL;
            else
              v75 = v74;
            if (v75)
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v75);
            else
              v76 = 0;
            v77 = &v76[24 * v73];
            v78 = *(_OWORD *)v70;
            *((_QWORD *)v77 + 2) = *(_QWORD *)(v70 + 16);
            *(_OWORD *)v77 = v78;
            v80 = (char *)v124;
            v79 = v125;
            v81 = v77;
            if (v125 != v124)
            {
              do
              {
                v82 = *(_OWORD *)(v79 - 24);
                *((_QWORD *)v81 - 1) = *((_QWORD *)v79 - 1);
                *(_OWORD *)(v81 - 24) = v82;
                v81 -= 24;
                v79 -= 24;
              }
              while (v79 != v80);
              v79 = (char *)v124;
            }
            v72 = v77 + 24;
            v124 = v81;
            v125 = v77 + 24;
            v126 = &v76[24 * v75];
            if (v79)
              operator delete(v79);
          }
          else
          {
            v71 = *(_OWORD *)v70;
            *((_QWORD *)v59 + 2) = *(_QWORD *)(v70 + 16);
            *(_OWORD *)v59 = v71;
            v72 = v59 + 24;
          }
          v125 = v72;
          v83 = *(_QWORD *)(v127 + 24 * (v55 % v13)) + 24 * (++v54 % v14);
          if (v72 >= v126)
          {
            v86 = 0xAAAAAAAAAAAAAAABLL * ((v72 - (_BYTE *)v124) >> 3);
            v87 = v86 + 1;
            if (v86 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_152;
            if (0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3) > v87)
              v87 = 0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (_BYTE *)v124) >> 3) >= 0x555555555555555)
              v88 = 0xAAAAAAAAAAAAAAALL;
            else
              v88 = v87;
            if (v88)
              v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v88);
            else
              v89 = 0;
            v90 = &v89[24 * v86];
            v91 = *(_OWORD *)v83;
            *((_QWORD *)v90 + 2) = *(_QWORD *)(v83 + 16);
            *(_OWORD *)v90 = v91;
            v93 = (char *)v124;
            v92 = v125;
            v94 = v90;
            if (v125 != v124)
            {
              do
              {
                v95 = *(_OWORD *)(v92 - 24);
                *((_QWORD *)v94 - 1) = *((_QWORD *)v92 - 1);
                *(_OWORD *)(v94 - 24) = v95;
                v94 -= 24;
                v92 -= 24;
              }
              while (v92 != v93);
              v92 = (char *)v124;
            }
            v85 = v90 + 24;
            v124 = v94;
            v125 = v90 + 24;
            v126 = &v89[24 * v88];
            if (v92)
              operator delete(v92);
          }
          else
          {
            v84 = *(_OWORD *)v83;
            *((_QWORD *)v72 + 2) = *(_QWORD *)(v83 + 16);
            *(_OWORD *)v72 = v84;
            v85 = v72 + 24;
          }
          v125 = v85;
          v96 = *(_QWORD *)(v127 + 24 * (v122 % v13)) + 24 * (v54 % v14);
          if (v85 >= v126)
          {
            v99 = 0xAAAAAAAAAAAAAAABLL * ((v85 - (_BYTE *)v124) >> 3);
            v100 = v99 + 1;
            if (v99 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_152:
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3) > v100)
              v100 = 0x5555555555555556 * ((v126 - (_BYTE *)v124) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v126 - (_BYTE *)v124) >> 3) >= 0x555555555555555)
              v101 = 0xAAAAAAAAAAAAAAALL;
            else
              v101 = v100;
            if (v101)
              v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)&v126, v101);
            else
              v102 = 0;
            v103 = &v102[24 * v99];
            v104 = *(_OWORD *)v96;
            *((_QWORD *)v103 + 2) = *(_QWORD *)(v96 + 16);
            *(_OWORD *)v103 = v104;
            v106 = (char *)v124;
            v105 = v125;
            v107 = v103;
            if (v125 != v124)
            {
              do
              {
                v108 = *(_OWORD *)(v105 - 24);
                *((_QWORD *)v107 - 1) = *((_QWORD *)v105 - 1);
                *(_OWORD *)(v107 - 24) = v108;
                v107 -= 24;
                v105 -= 24;
              }
              while (v105 != v106);
              v105 = (char *)v124;
            }
            v98 = v103 + 24;
            v124 = v107;
            v125 = v103 + 24;
            v126 = &v102[24 * v101];
            if (v105)
              operator delete(v105);
          }
          else
          {
            v97 = *(_OWORD *)v96;
            *((_QWORD *)v85 + 2) = *(_QWORD *)(v96 + 16);
            *(_OWORD *)v85 = v97;
            v98 = v85 + 24;
          }
          v125 = v98;
          if (ClipperLib::Area((uint64_t *)&v124) < 0.0 && v124 != v98)
          {
            v109 = v98 - 24;
            if (v98 - 24 > v124)
            {
              v110 = (char *)v124 + 24;
              do
              {
                *(_OWORD *)__p = *(_OWORD *)(v110 - 24);
                v111 = *(_OWORD *)__p;
                v131[0] = *((_QWORD *)v110 - 1);
                v112 = v131[0];
                v113 = *((_QWORD *)v109 + 2);
                *(_OWORD *)(v110 - 24) = *(_OWORD *)v109;
                *((_QWORD *)v110 - 1) = v113;
                *((_QWORD *)v109 + 2) = v112;
                *(_OWORD *)v109 = v111;
                v109 -= 24;
                _CF = v110 >= v109;
                v110 += 24;
              }
              while (!_CF);
            }
          }
          v114 = a3[1];
          if (v114 >= a3[2])
          {
            v115 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(a3, (uint64_t)&v124);
          }
          else
          {
            std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)a3, (uint64_t)&v124);
            v115 = v114 + 24;
          }
          a3[1] = v115;
          if (v124)
          {
            v125 = (char *)v124;
            operator delete(v124);
          }
        }
        while (v54 != v119);
        v52 = v55;
      }
      while (v55 != v118);
    }
    __p[0] = &v127;
    std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

