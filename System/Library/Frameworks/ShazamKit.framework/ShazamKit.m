void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_218BF3828(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<shazam::signature_header_type>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_218BF39A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_218BF3AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id SHShazamKitUIServiceInterface()
{
  if (SHShazamKitUIServiceInterface_onceToken != -1)
    dispatch_once(&SHShazamKitUIServiceInterface_onceToken, &__block_literal_global);
  return (id)SHShazamKitUIServiceInterface_interface;
}

id SHShazamKitUIClientInterface()
{
  if (SHShazamKitUIClientInterface_onceToken != -1)
    dispatch_once(&SHShazamKitUIClientInterface_onceToken, &__block_literal_global_55);
  return (id)SHShazamKitUIClientInterface_interface;
}

void annotateUnsupportedError(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = (void *)MEMORY[0x24BDD1540];
    v3 = *MEMORY[0x24BDD0B88];
    v6 = *MEMORY[0x24BDD0BA0];
    v7[0] = CFSTR("In memory Custom Catalog container cannot be written to disk");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "errorWithDomain:code:userInfo:", v3, 3328, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    +[SHError annotateClientError:code:underlyingError:](SHError, "annotateClientError:code:underlyingError:", a1, 300, v5);
  }
}

id SHShazamKitServiceInterface()
{
  if (SHShazamKitServiceInterface_onceToken != -1)
    dispatch_once(&SHShazamKitServiceInterface_onceToken, &__block_literal_global_2);
  return (id)SHShazamKitServiceInterface_interface;
}

id SHShazamKitClientInterface()
{
  if (SHShazamKitClientInterface_onceToken != -1)
    dispatch_once(&SHShazamKitClientInterface_onceToken, &__block_literal_global_107);
  return (id)SHShazamKitClientInterface_interface;
}

void sub_218BFFACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218BFFC60(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_218C003C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218C03CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_218C07D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218C07E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218C08050(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_218C0A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_218C0B214(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_218C0B65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218C0BB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218C0E644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_218C0E770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_218C0E810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218C0E9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_218C0EC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_218C0EDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  id *v16;

  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_218C0EEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_218C0EF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_218C0F098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218C0F9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_218C0FBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218C0FC94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218C0FE60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_218C0FF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_218C0FFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sh_log_object()
{
  if (sh_log_object_onceToken != -1)
    dispatch_once(&sh_log_object_onceToken, &__block_literal_global_9);
  return (id)sh_log_object_sLogObject;
}

void __sh_log_object_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.shazam.ShazamKit", (const char *)objc_msgSend(CFSTR("core"), "cStringUsingEncoding:", 4));
  v1 = (void *)sh_log_object_sLogObject;
  sh_log_object_sLogObject = (uint64_t)v0;

}

uint64_t sub_218C143DC(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  return a1(*(_QWORD *)(a3 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_singleResultContinuation));
}

uint64_t sub_218C14414(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_singleResultContinuation) = a2;
  return result;
}

uint64_t sub_218C14424(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_multipleResultsContinuation;
  swift_beginAccess();
  sub_218C16590(a2, v3, &qword_2550091B0);
  return swift_endAccess();
}

uint64_t sub_218C14494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090C8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_spectralDataContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
    sub_218C58850();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_beginAccess();
  sub_218C16590(a2, v8, &qword_2550091B8);
  return swift_endAccess();
}

uint64_t sub_218C145A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  __n128 v17;
  char v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_multipleResultsContinuation;
  swift_beginAccess();
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v8(v7, 1, v3))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
    sub_218C58838();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v7, 1, v3);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
    sub_218C58850();
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v10 = OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_singleResultContinuation;
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_singleResultContinuation);
  if (!v11)
    goto LABEL_8;
  v16[1] = v1;
  v16[0] = objc_msgSend(objc_allocWithZone((Class)SHSignature), sel_init);
  type metadata accessor for SHError(0);
  v19 = 202;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550091D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_218C5D010;
  *(_QWORD *)(inited + 32) = sub_218C58784();
  *(_QWORD *)(inited + 40) = v13;
  type metadata accessor for SHPrivateError(0);
  v15 = v14;
  v17.n128_u64[0] = 203;
  sub_218C28AF4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(inited + 72) = v15;
  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  sub_218C585B0();
  sub_218C23C2C(inited);
  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  sub_218C585B0();
  if (v16[0])
  {
    v17.n128_u64[1] = v16[0];
    v18 = 2;
    sub_218C165FC(&v17, *(__n128 **)(*(_QWORD *)(v11 + 64) + 40));
    result = swift_continuation_resume();
LABEL_8:
    *(_QWORD *)(a1 + v10) = 0;
    return result;
  }
  result = sub_218C58A6C();
  __break(1u);
  return result;
}

uint64_t sub_218C14894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  sub_218C58814();
  *(_QWORD *)(v4 + 24) = sub_218C58808();
  sub_218C587E4();
  return swift_task_switch();
}

uint64_t sub_218C14900()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_cancelledCallback);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C14954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_218C5882C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_218C58820();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_218C16554(a1, &qword_255009188);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_218C587E4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_218C14AEC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  char *v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009170);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock) + 16);
  if (os_unfair_lock_trylock(v9))
  {
    v10 = v1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_spectralDataContinuation;
    swift_beginAccess();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009178);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v12 = sub_218C58A78();
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v13 = MEMORY[0x24BEE4AF8];
      if (v12)
      {
        v22 = v6;
        v23 = v4;
        v24 = v9;
        v25 = v8;
        v26 = MEMORY[0x24BEE4AF8];
        sub_218C15C48(0, v12 & ~(v12 >> 63), 0);
        if (v12 < 0)
        {
          __break(1u);
          return;
        }
        v14 = 0;
        v13 = v26;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
            v15 = (id)MEMORY[0x219A21184](v14, a1);
          else
            v15 = *(id *)(a1 + 8 * v14 + 32);
          v16 = v15;
          objc_msgSend(v15, sel_floatValue);
          v18 = v17;

          v26 = v13;
          v20 = *(_QWORD *)(v13 + 16);
          v19 = *(_QWORD *)(v13 + 24);
          if (v20 >= v19 >> 1)
          {
            sub_218C15C48(v19 > 1, v20 + 1, 1);
            v13 = v26;
          }
          ++v14;
          *(_QWORD *)(v13 + 16) = v20 + 1;
          *(_DWORD *)(v13 + 4 * v20 + 32) = v18;
        }
        while (v12 != v14);
        v9 = v24;
        v8 = v25;
        v6 = v22;
        v4 = v23;
      }
      v26 = v13;
      sub_218C58844();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009178);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 0, 1, v21);
    }
    sub_218C16554((uint64_t)v8, &qword_255009170);
    os_unfair_lock_unlock(v9);
  }
}

id sub_218C14E28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_218C14EC8()
{
  return type metadata accessor for SHManagedSessionWrapperDelegate();
}

uint64_t type metadata accessor for SHManagedSessionWrapperDelegate()
{
  uint64_t result;

  result = qword_2550090A0;
  if (!qword_2550090A0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_218C14F0C()
{
  unint64_t v0;
  unint64_t v1;

  sub_218C15018(319, &qword_2550090B0, &qword_2550090B8);
  if (v0 <= 0x3F)
  {
    sub_218C15018(319, &qword_2550090C0, &qword_2550090C8);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x219A21BBC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_218C15018(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = sub_218C58964();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for SHMediaItemProperty(uint64_t a1)
{
  sub_218C169D4(a1, &qword_255009130);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_218C169D4(a1, &qword_255009138);
}

uint64_t sub_218C1508C()
{
  sub_218C15874(&qword_255009278, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D374);
  return sub_218C58B38();
}

uint64_t sub_218C150CC()
{
  sub_218C15874(&qword_255009278, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D374);
  return sub_218C58B2C();
}

uint64_t sub_218C15110()
{
  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  return sub_218C58568();
}

uint64_t sub_218C15150@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

id sub_218C15158()
{
  id *v0;

  return *v0;
}

uint64_t sub_218C15160(uint64_t a1, uint64_t a2)
{
  return sub_218C15A24(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_218C15178(uint64_t a1, uint64_t a2)
{
  return sub_218C15A24(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_218C1518C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_218C5876C();
  *a2 = 0;
  return result;
}

uint64_t sub_218C15200(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_218C58778();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_218C1527C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_218C58784();
  v2 = sub_218C58760();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_218C152BC()
{
  return sub_218C58784();
}

uint64_t sub_218C152CC()
{
  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  return sub_218C585A4();
}

uint64_t sub_218C1530C()
{
  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  return sub_218C58580();
}

uint64_t sub_218C1534C()
{
  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  return sub_218C585A4();
}

uint64_t sub_218C1538C()
{
  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  return sub_218C58580();
}

uint64_t sub_218C153CC(void *a1)
{
  id v2;

  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  v2 = a1;
  return sub_218C58574();
}

uint64_t sub_218C15430()
{
  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  return sub_218C58598();
}

uint64_t sub_218C15484(void *a1)
{
  id v2;

  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  v2 = a1;
  return sub_218C58574();
}

uint64_t sub_218C154E8()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_218C58958();

  return v2;
}

uint64_t sub_218C1551C()
{
  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  return sub_218C58598();
}

uint64_t sub_218C1556C()
{
  sub_218C58B50();
  sub_218C58754();
  return sub_218C58B68();
}

_QWORD *sub_218C155C8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_218C155D8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_218C155E8()
{
  sub_218C15874(&qword_255009240, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D5D0);
  return sub_218C58B38();
}

uint64_t sub_218C15628()
{
  sub_218C15874(&qword_255009240, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D5D0);
  return sub_218C58B2C();
}

uint64_t sub_218C15668()
{
  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  return sub_218C58568();
}

uint64_t sub_218C156A8()
{
  sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
  return sub_218C5858C();
}

uint64_t sub_218C15700()
{
  sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
  return sub_218C5858C();
}

BOOL sub_218C15758(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_218C15770@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_218C58784();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_218C15798()
{
  sub_218C15874(&qword_255009158, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaItemProperty, (uint64_t)&unk_218C5D1B8);
  sub_218C15874(&qword_255009160, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaItemProperty, (uint64_t)&unk_218C5D10C);
  return sub_218C58AB4();
}

uint64_t sub_218C1581C()
{
  return sub_218C15874(&qword_255009140, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaItemProperty, (uint64_t)&unk_218C5D0D0);
}

uint64_t sub_218C15848()
{
  return sub_218C15874(&qword_255009148, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaItemProperty, (uint64_t)&unk_218C5D0A4);
}

uint64_t sub_218C15874(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x219A21BC8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_218C158B4()
{
  return sub_218C15874(&qword_255009150, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaItemProperty, (uint64_t)&unk_218C5D140);
}

unint64_t sub_218C158E0()
{
  unint64_t result;

  result = qword_255009168;
  if (!qword_255009168)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255009168);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x219A21BB0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_218C1595C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_218C58760();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_218C159A0()
{
  sub_218C15874(&qword_2550092A8, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaLibrarySyncStartCondition, (uint64_t)&unk_218C5D470);
  sub_218C15874(&qword_2550092B0, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaLibrarySyncStartCondition, (uint64_t)&unk_218C5D418);
  return sub_218C58AB4();
}

uint64_t sub_218C15A24(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_218C58784();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_218C15A60()
{
  sub_218C58784();
  sub_218C58790();
  return swift_bridgeObjectRelease();
}

uint64_t sub_218C15AA0()
{
  uint64_t v0;

  sub_218C58784();
  sub_218C58B50();
  sub_218C58790();
  v0 = sub_218C58B68();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_218C15B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_218C58784();
  v2 = v1;
  if (v0 == sub_218C58784() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_218C58AFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_218C15B98(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_218C15BFC;
  return v6(a1);
}

uint64_t sub_218C15BFC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_218C15C48(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_218C15CB8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_218C15C64(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_218C15E18(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_218C15C80(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_218C15F74(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_218C15C9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_218C160D0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_218C15CB8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255009180);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_218C58AA8();
  __break(1u);
  return result;
}

uint64_t sub_218C15E18(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550091D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_218C58AA8();
  __break(1u);
  return result;
}

uint64_t sub_218C15F74(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550091C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_218C58AA8();
  __break(1u);
  return result;
}

uint64_t sub_218C160D0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550091C0);
  v10 = *(_QWORD *)(sub_218C58658() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_218C58658() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_218C58AA8();
  __break(1u);
  return result;
}

uint64_t sub_218C162B0()
{
  char *v0;
  uint64_t v1;
  _BYTE *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[16];
  char *v13;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v2 = &v12[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock];
  v13 = v0;
  v4 = v3 + 4;
  os_unfair_lock_lock(v3 + 4);
  sub_218C19240(v5, sub_218C163C8);
  os_unfair_lock_unlock(v4);
  v6 = sub_218C5882C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  sub_218C58814();
  v7 = v0;
  v8 = sub_218C58808();
  v9 = (_QWORD *)swift_allocObject();
  v10 = MEMORY[0x24BEE6930];
  v9[2] = v8;
  v9[3] = v10;
  v9[4] = v7;
  sub_218C14954((uint64_t)v2, (uint64_t)&unk_255009198, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_218C163C8()
{
  uint64_t v0;

  return sub_218C145A4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_218C163E0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_218C1640C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_218C16478;
  return sub_218C14894(a1, v4, v5, v6);
}

uint64_t sub_218C16478()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_218C164C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_218C164E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_218C16478;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2550091A0 + dword_2550091A0))(a1, v4);
}

uint64_t sub_218C16554(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_218C16590(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void type metadata accessor for SHError(uint64_t a1)
{
  sub_218C169D4(a1, &qword_255009200);
}

void type metadata accessor for SHPrivateError(uint64_t a1)
{
  sub_218C169D4(a1, &qword_2550091F0);
}

__n128 *sub_218C165FC(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8(a2, a1);
  return a2;
}

void type metadata accessor for SHMediaLibrarySyncStartCondition(uint64_t a1)
{
  sub_218C169D4(a1, &qword_2550091F8);
}

uint64_t sub_218C1664C()
{
  return sub_218C15874(&qword_255009208, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D28C);
}

uint64_t sub_218C16678()
{
  return sub_218C15874(&qword_255009210, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D2B8);
}

uint64_t sub_218C166A4()
{
  return sub_218C15874(&qword_255009218, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaLibrarySyncStartCondition, (uint64_t)&unk_218C5D3E0);
}

uint64_t sub_218C166D0()
{
  return sub_218C15874(&qword_255009220, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaLibrarySyncStartCondition, (uint64_t)&unk_218C5D3B8);
}

uint64_t sub_218C166FC()
{
  return sub_218C15874(&qword_255009228, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaLibrarySyncStartCondition, (uint64_t)&unk_218C5D448);
}

uint64_t sub_218C16728()
{
  return sub_218C15874(&qword_255009230, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D4F8);
}

uint64_t sub_218C16754()
{
  return sub_218C15874(&qword_255009238, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D520);
}

uint64_t sub_218C16780()
{
  return sub_218C15874(&qword_255009240, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D5D0);
}

uint64_t sub_218C167AC()
{
  return sub_218C15874(&qword_255009248, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D5A0);
}

uint64_t sub_218C167D8()
{
  return sub_218C15874(&qword_255009250, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D560);
}

uint64_t sub_218C16804()
{
  return sub_218C15874(&qword_255009258, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_218C5D6B0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_218C169D4(a1, (unint64_t *)&unk_2550092C0);
}

uint64_t sub_218C16844()
{
  return sub_218C15874(&qword_255009260, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_218C5D678);
}

unint64_t sub_218C16874()
{
  unint64_t result;

  result = qword_255009268;
  if (!qword_255009268)
  {
    result = MEMORY[0x219A21BC8](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_255009268);
  }
  return result;
}

uint64_t sub_218C168B8()
{
  return sub_218C15874(&qword_255009270, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_218C5D6E8);
}

uint64_t sub_218C168E4()
{
  return sub_218C15874(&qword_2550091E0, (uint64_t (*)(uint64_t))type metadata accessor for SHPrivateError, (uint64_t)&unk_218C5D610);
}

uint64_t sub_218C16910()
{
  return sub_218C15874(&qword_255009278, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D374);
}

uint64_t sub_218C1693C()
{
  return sub_218C15874(&qword_255009280, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D340);
}

uint64_t sub_218C16968()
{
  return sub_218C15874(&qword_255009288, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D2FC);
}

uint64_t sub_218C16994()
{
  return sub_218C15874(&qword_255009290, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_218C5D7B8);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_218C169D4(a1, &qword_2550092B8);
}

void sub_218C169D4(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_218C16A18()
{
  return sub_218C15874(&qword_255009298, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_218C5D77C);
}

uint64_t sub_218C16A44()
{
  return sub_218C15874(&qword_2550092A0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_218C5D7F4);
}

uint64_t sub_218C16A70()
{
  return sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
}

uint64_t sub_218C16ABC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v15 = MEMORY[0x24BEE4AF8];
    result = sub_218C15C64(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v15;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x219A21184](v5, a1) : *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      objc_msgSend(v6, sel_lowerBound);
      v9 = v8;
      objc_msgSend(v7, sel_upperBound);
      v11 = v10;

      if (v9 > v11)
        break;
      v13 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      if (v13 >= v12 >> 1)
        sub_218C15C64(v12 > 1, v13 + 1, 1);
      ++v5;
      *(_QWORD *)(v15 + 16) = v13 + 1;
      v14 = v15 + 16 * v13;
      *(double *)(v14 + 32) = v9;
      *(double *)(v14 + 40) = v11;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_218C58A78();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_218C16C28(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  double v8;
  float v9;
  double v10;
  double v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v16 = MEMORY[0x24BEE4AF8];
    result = sub_218C15C80(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v16;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x219A21184](v5, a1) : *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      objc_msgSend(v6, sel_lowerBound);
      v9 = v8;
      objc_msgSend(v7, sel_upperBound);
      v11 = v10;

      v12 = v11;
      if (v9 > v12)
        break;
      v14 = *(_QWORD *)(v16 + 16);
      v13 = *(_QWORD *)(v16 + 24);
      if (v14 >= v13 >> 1)
        sub_218C15C80(v13 > 1, v14 + 1, 1);
      ++v5;
      *(_QWORD *)(v16 + 16) = v14 + 1;
      v15 = v16 + 8 * v14;
      *(float *)(v15 + 32) = v9;
      *(float *)(v15 + 36) = v12;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_218C58A78();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t SHManagedSession.state.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_getKeyPath();
  sub_218C15874(&qword_255009338, type metadata accessor for SHManagedSessionStateHandler, (uint64_t)&unk_218C5D9C8);
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_218C16E1C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_218C15874(&qword_255009338, type metadata accessor for SHManagedSessionStateHandler, (uint64_t)&unk_218C5D9C8);
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

id SHManagedSession.sendNotifications.getter()
{
  return sub_218C16F6C((SEL *)&selRef_sendNotifications);
}

void SHManagedSession.sendNotifications.setter(char a1)
{
  sub_218C17098(a1, (SEL *)&selRef_setSendNotifications_);
}

id sub_218C16EB8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_sendNotifications);
  *a2 = (_BYTE)result;
  return result;
}

void (*SHManagedSession.sendNotifications.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = objc_msgSend(*(id *)(v3 + 16), sel_sendNotifications);
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_218C16F54;
}

void sub_218C16F54(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_218C1718C(a1, a2, (SEL *)&selRef_setSendNotifications_);
}

id SHManagedSession.enableLiveActivity.getter()
{
  return sub_218C16F6C((SEL *)&selRef_enableLiveActivity);
}

id sub_218C16F6C(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v4 = objc_msgSend(*(id *)(v3 + 16), *a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return v4;
}

void sub_218C16FBC(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, os_unfair_lock_s *)@<X3>, _BYTE *a3@<X8>)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v5 = *(os_unfair_lock_s **)(*(_QWORD *)a1 + 16);
  v6 = v5 + 4;
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(&v8, v6);
  os_unfair_lock_unlock(v7);
  *a3 = v8;
}

void sub_218C17030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;

  v6 = *(os_unfair_lock_s **)(*(_QWORD *)a2 + 16);
  v7 = v6 + 4;
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  a5(v7);
  os_unfair_lock_unlock(v8);
}

void SHManagedSession.enableLiveActivity.setter(char a1)
{
  sub_218C17098(a1, (SEL *)&selRef_setEnableLiveActivity_);
}

void sub_218C17098(char a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  objc_msgSend(*(id *)(v5 + 16), *a2, a1 & 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

id sub_218C170E4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_enableLiveActivity);
  *a2 = (_BYTE)result;
  return result;
}

void (*SHManagedSession.enableLiveActivity.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(v3) = objc_msgSend(*(id *)(v3 + 16), sel_enableLiveActivity);
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_218C17180;
}

void sub_218C17180(os_unfair_lock_s **a1, uint64_t a2)
{
  sub_218C1718C(a1, a2, (SEL *)&selRef_setEnableLiveActivity_);
}

void sub_218C1718C(os_unfair_lock_s **a1, uint64_t a2, SEL *a3)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a1 + 6;
  v6 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v5);
  objc_msgSend(*(id *)&v4[4]._os_unfair_lock_opaque, *a3, v6);
  os_unfair_lock_unlock(v5);
}

uint64_t SHManagedSession.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SHManagedSession.init()();
  return v0;
}

_QWORD *SHManagedSession.init()()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  id v13;
  uint64_t v14;
  objc_super v16;

  sub_218C58694();
  v1 = objc_msgSend(objc_allocWithZone((Class)SHManagedSession), sel_init);
  type metadata accessor for SHManagedSessionStateHandler(0);
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009780);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v3;
  sub_218C58694();
  v0[4] = v2;
  v4 = (objc_class *)type metadata accessor for SHManagedSessionWrapperDelegate();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_multipleResultsContinuation];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_singleResultContinuation] = 0;
  v8 = &v5[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_spectralDataContinuation];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090C8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock;
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)&v5[v10] = v11;
  v12 = (uint64_t (**)())&v5[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_cancelledCallback];
  *v12 = sub_218C18F34;
  v12[1] = (uint64_t (*)())v2;
  v16.receiver = v5;
  v16.super_class = v4;
  swift_retain();
  v13 = objc_msgSendSuper2(&v16, sel_init);
  v0[3] = v13;
  objc_msgSend(v1, sel_setDelegate_, v13, v16.receiver, v16.super_class);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009348);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = v1;
  v0[2] = v14;
  return v0;
}

uint64_t SHManagedSession.__allocating_init(catalog:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SHManagedSession.init(catalog:)(a1);
  return v2;
}

_QWORD *SHManagedSession.init(catalog:)(void *a1)
{
  _QWORD *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  id v16;
  id v17;
  id v18;
  objc_super v20;

  sub_218C58694();
  v3 = objc_msgSend(objc_allocWithZone((Class)SHManagedSession), sel_initWithCatalog_, a1);
  type metadata accessor for SHManagedSessionStateHandler(0);
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009780);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v5;
  sub_218C58694();
  v1[4] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009348);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = v3;
  v1[2] = v6;
  v7 = (objc_class *)type metadata accessor for SHManagedSessionWrapperDelegate();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = &v8[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_multipleResultsContinuation];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)&v8[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_singleResultContinuation] = 0;
  v11 = &v8[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_spectralDataContinuation];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090C8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock;
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)&v8[v13] = v14;
  v15 = (uint64_t (**)())&v8[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_cancelledCallback];
  *v15 = sub_218C18F5C;
  v15[1] = (uint64_t (*)())v4;
  v20.receiver = v8;
  v20.super_class = v7;
  v16 = v3;
  swift_retain();
  v17 = objc_msgSendSuper2(&v20, sel_init);
  v1[3] = v17;
  v18 = v17;
  objc_msgSend(v16, sel_setDelegate_, v18, v20.receiver, v20.super_class);

  return v1;
}

uint64_t sub_218C17618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_218C5882C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_218C58814();
  swift_retain();
  v8 = sub_218C58808();
  v9 = swift_allocObject();
  v10 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = a1;
  *(_BYTE *)(v9 + 40) = 0;
  sub_218C14954((uint64_t)v6, a3, v9);
  return swift_release();
}

uint64_t SHManagedSession.prepare()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_218C17718()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_218C17798;
  return sub_218C58AD8();
}

uint64_t sub_218C17798()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C177EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_218C177F4(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  void **v4;
  os_unfair_lock_s *v5;

  v2 = *(os_unfair_lock_s **)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = (void **)&v2[4];
  v5 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_218C17850(v4, v3);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_218C17850(void **a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  aBlock[4] = nullsub_1;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_218C179CC;
  aBlock[3] = &block_descriptor_53;
  v7 = _Block_copy(aBlock);
  objc_msgSend(v6, sel_prepareWithCompletionHandler_, v7);
  _Block_release(v7);
  v8 = sub_218C5882C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
  sub_218C58814();
  swift_retain();
  v9 = sub_218C58808();
  v10 = swift_allocObject();
  v11 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v11;
  *(_QWORD *)(v10 + 32) = a2;
  *(_BYTE *)(v10 + 40) = 1;
  sub_218C14954((uint64_t)v5, (uint64_t)&unk_2550093E8, v10);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550093F0);
  return sub_218C587FC();
}

uint64_t sub_218C179CC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

Swift::Void __swiftcall SHManagedSession.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  id *v5;
  os_unfair_lock_s *v6;

  v1 = v0[3];
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock) + 16);
  os_unfair_lock_lock(v2);
  sub_218C145A4(v1);
  os_unfair_lock_unlock(v2);
  v3 = (os_unfair_lock_s *)v0[2];
  v4 = v0[4];
  v5 = (id *)&v3[4];
  v6 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_218C17A78(v5, v4);
  os_unfair_lock_unlock(v6);
}

uint64_t sub_218C17A78(id *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*a1, sel_cancel);
  v6 = sub_218C5882C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  sub_218C58814();
  swift_retain();
  v7 = sub_218C58808();
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = a2;
  *(_BYTE *)(v8 + 40) = 0;
  sub_218C14954((uint64_t)v5, (uint64_t)&unk_2550093E0, v8);
  return swift_release();
}

uint64_t SHManagedSession.result()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = v0;
  return swift_task_switch();
}

uint64_t sub_218C17B8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  __int128 v5;
  id *v6;

  v1 = v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_218C17C5C;
  v2 = swift_continuation_init();
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = (id *)&v3[4];
  v3 += 6;
  os_unfair_lock_lock(v3);
  sub_218C17CA0(v6, *(_QWORD *)(v4 + 16), *(char **)(v4 + 24), *(_QWORD *)(v4 + 32));
  os_unfair_lock_unlock(v3);
  swift_task_dealloc();
  return swift_continuation_await();
}

uint64_t sub_218C17C5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v0 + 8))(*(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88), *(unsigned __int8 *)(*(_QWORD *)v0 + 96));
}

void sub_218C17CA0(id *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  id v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  char *v21;
  _QWORD v22[2];
  __n128 aBlock;
  void (*v24)(uint64_t, void *, void *, void *);
  void *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend(*a1, sel_isMatching) & 1) != 0)
  {
    v11 = objc_msgSend(objc_allocWithZone((Class)SHSignature), sel_init);
    type metadata accessor for SHError(0);
    v13 = v12;
    v22[1] = 202;
    sub_218C28AF4(MEMORY[0x24BEE4AF8]);
    sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
    sub_218C585B0();
    if (v11)
    {
      aBlock.n128_u64[1] = (unint64_t)v11;
      LOBYTE(v24) = 2;
      sub_218C165FC(&aBlock, *(__n128 **)(*(_QWORD *)(a2 + 64) + 40));
      swift_continuation_resume();
      return;
    }
    sub_218C58A6C();
    __break(1u);
  }
  else
  {
    v13 = (os_unfair_lock_s *)(*(_QWORD *)&a3[OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock] + 16);
    os_unfair_lock_lock(v13);
    sub_218C14414((uint64_t)a3, a2);
    if (!v4)
    {
      os_unfair_lock_unlock(v13);
      v14 = sub_218C5882C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
      sub_218C58814();
      swift_retain();
      v15 = sub_218C58808();
      v16 = swift_allocObject();
      v17 = MEMORY[0x24BEE6930];
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = v17;
      *(_QWORD *)(v16 + 32) = a4;
      *(_BYTE *)(v16 + 40) = 2;
      sub_218C14954((uint64_t)v10, (uint64_t)&unk_2550093D0, v16);
      swift_release();
      v18 = *a1;
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = a3;
      *(_QWORD *)(v19 + 24) = a4;
      v26 = sub_218C198E8;
      v27 = v19;
      aBlock.n128_u64[0] = MEMORY[0x24BDAC760];
      aBlock.n128_u64[1] = 1107296256;
      v24 = sub_218C181E4;
      v25 = &block_descriptor_37;
      v20 = _Block_copy(&aBlock);
      swift_retain();
      v21 = a3;
      swift_release();
      objc_msgSend(v18, sel_singleMatchWithCompletionHandler_, v20);
      _Block_release(v20);
      return;
    }
  }
  os_unfair_lock_unlock(v13);
  __break(1u);
}

uint64_t sub_218C17F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v12 = (os_unfair_lock_s *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock) + 16);
  os_unfair_lock_lock(v12);
  sub_218C143DC(sub_218C198F0, (uint64_t)v18, a4);
  os_unfair_lock_unlock(v12);
  os_unfair_lock_lock(v12);
  sub_218C14414(a4, 0);
  os_unfair_lock_unlock(v12);
  v13 = sub_218C5882C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  sub_218C58814();
  swift_retain();
  v14 = sub_218C58808();
  v15 = swift_allocObject();
  v16 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v16;
  *(_QWORD *)(v15 + 32) = a5;
  *(_BYTE *)(v15 + 40) = 0;
  sub_218C14954((uint64_t)v11, (uint64_t)&unk_2550093D8, v15);
  return swift_release();
}

uint64_t sub_218C180FC(uint64_t result, void *a2, void *a3, id a4)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  id v11;
  id v12;
  __n128 *v13;
  id v14;
  __n128 v15;
  char v16;

  if (result)
  {
    v6 = result;
    if (a2)
    {
      if (a4)
      {
        result = sub_218C58A6C();
        __break(1u);
        return result;
      }
      v7 = 0;
      v8 = 0;
      v9 = (unint64_t)a2;
    }
    else
    {
      v11 = a3;
      if (a4)
        v9 = (unint64_t)a4;
      else
        v9 = (unint64_t)a3;
      if (a4)
        v7 = (unint64_t)a3;
      else
        v7 = 0;
      if (a4)
        v8 = 2;
      else
        v8 = 1;
    }
    v15.n128_u64[0] = v9;
    v15.n128_u64[1] = v7;
    v16 = v8;
    v12 = a4;
    v13 = *(__n128 **)(*(_QWORD *)(v6 + 64) + 40);
    v14 = a2;
    sub_218C165FC(&v15, v13);
    return swift_continuation_resume();
  }
  return result;
}

void sub_218C181E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(void *, id, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(void *, id, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(a2, v8, a4);
  swift_release();

}

uint64_t SHManagedSession.results.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v12[16];
  uint64_t (*v13)(uint64_t);
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009360);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
  MEMORY[0x24BDAC7A8]();
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(a1, 1, 1, v9);
  v13 = sub_218C19260;
  v14 = v1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE6A10], v3);
  sub_218C58898();
  v10((uint64_t)v8, 0, 1, v9);
  return sub_218C19270((uint64_t)v8, a1);
}

uint64_t sub_218C183BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_218C18474((id *)(v3 + 16), a1, v4, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  return sub_218C58838();
}

void sub_218C18474(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void **v31;
  _QWORD aBlock[8];

  v30 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8]();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550091B0);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1;
  if ((objc_msgSend(*a1, sel_isMatching) & 1) != 0)
  {
    sub_218C58850();
  }
  else
  {
    v28 = a2;
    v29 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v27(v13, a2, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    v14 = (os_unfair_lock_s *)(*(_QWORD *)(a3 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock) + 16);
    os_unfair_lock_lock(v14);
    v15 = aBlock[7];
    sub_218C14424(a3, (uint64_t)v13);
    if (v15)
    {
      os_unfair_lock_unlock(v14);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v14);
      sub_218C16554((uint64_t)v13, &qword_2550091B0);
      v16 = sub_218C5882C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 1, 1, v16);
      sub_218C58814();
      v17 = v30;
      swift_retain();
      v18 = sub_218C58808();
      v19 = swift_allocObject();
      v20 = MEMORY[0x24BEE6930];
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = v20;
      *(_QWORD *)(v19 + 32) = v17;
      *(_BYTE *)(v19 + 40) = 2;
      sub_218C14954((uint64_t)v11, (uint64_t)&unk_2550093C0, v19);
      swift_release();
      v21 = *v31;
      v22 = v29;
      v27(v29, v28, v7);
      v23 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v24 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v24 + v23, v22, v7);
      aBlock[4] = sub_218C19848;
      aBlock[5] = v24;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_218C181E4;
      aBlock[3] = &block_descriptor;
      v25 = _Block_copy(aBlock);
      swift_release();
      objc_msgSend(v21, sel_matchWithCallback_, v25);
      _Block_release(v25);
    }
  }
}

uint64_t sub_218C18778(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t result;
  _QWORD v17[3];
  char v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550093C8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v13 = a2;
    if (a3)
      v12 = a3;
    else
      v12 = a2;
    if (a3)
      v10 = a2;
    else
      v10 = 0;
    if (a3)
      v11 = 2;
    else
      v11 = 1;
    goto LABEL_13;
  }
  if (!a3)
  {
    v10 = 0;
    v11 = 0;
    v12 = a1;
LABEL_13:
    v17[1] = v12;
    v17[2] = v10;
    v18 = v11;
    v14 = a3;
    v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
    sub_218C58844();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  result = sub_218C58A6C();
  __break(1u);
  return result;
}

void sub_218C188C0(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3)
{
  id *v4;
  os_unfair_lock_s *v5;

  v4 = (id *)&a2[4];
  v5 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_218C18910(v4, a3);
  os_unfair_lock_unlock(v5);
}

id sub_218C18910(id *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_218C5882C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  sub_218C58814();
  swift_retain();
  v7 = sub_218C58808();
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = a2;
  *(_BYTE *)(v8 + 40) = 0;
  sub_218C14954((uint64_t)v5, (uint64_t)&unk_2550093B8, v8);
  swift_release();
  return objc_msgSend(*a1, sel_cancel);
}

uint64_t SHManagedSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC9ShazamKit16SHManagedSession___observationRegistrar;
  v2 = sub_218C586A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SHManagedSession.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC9ShazamKit16SHManagedSession___observationRegistrar;
  v2 = sub_218C586A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t SHManagedSession.spectralOutput.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009378);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009380);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A10], v0);
  return sub_218C58898();
}

uint64_t sub_218C18B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2550091B8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090C8);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v5, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  v9 = (os_unfair_lock_s *)(*(_QWORD *)(v6 + OBJC_IVAR____TtC9ShazamKit31SHManagedSessionWrapperDelegate_lock) + 16);
  os_unfair_lock_lock(v9);
  sub_218C14494(v6, (uint64_t)v5);
  os_unfair_lock_unlock(v9);
  return sub_218C16554((uint64_t)v5, &qword_2550091B8);
}

id static SHManagedSession.isLiveActivityEnabled.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_isLiveActivityAvailable);
}

BOOL static SHManagedSession.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t SHManagedSession.State.hash(into:)()
{
  return sub_218C58B5C();
}

uint64_t SHManagedSession.State.hashValue.getter()
{
  sub_218C58B50();
  sub_218C58B5C();
  return sub_218C58B68();
}

BOOL sub_218C18D24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_218C18D38()
{
  sub_218C58B50();
  sub_218C58B5C();
  return sub_218C58B68();
}

uint64_t sub_218C18D7C()
{
  return sub_218C58B5C();
}

uint64_t sub_218C18DA4()
{
  sub_218C58B50();
  sub_218C58B5C();
  return sub_218C58B68();
}

uint64_t sub_218C18DE4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_218C15874(&qword_255009338, type metadata accessor for SHManagedSessionStateHandler, (uint64_t)&unk_218C5D9C8);
  sub_218C58670();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_218C18E74()
{
  swift_getKeyPath();
  sub_218C15874(&qword_255009338, type metadata accessor for SHManagedSessionStateHandler, (uint64_t)&unk_218C5D9C8);
  sub_218C58664();
  return swift_release();
}

uint64_t type metadata accessor for SHManagedSessionStateHandler(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_2550093A0);
}

uint64_t sub_218C18F34()
{
  uint64_t v0;

  return sub_218C17618(v0, (uint64_t)&unk_24D9B8340, (uint64_t)&unk_255009400);
}

uint64_t sub_218C18F5C()
{
  uint64_t v0;

  return sub_218C17618(v0, (uint64_t)&unk_24D9B8318, (uint64_t)&unk_2550093F8);
}

void sub_218C18F84(uint64_t a1)
{
  uint64_t v1;

  sub_218C177F4(a1, v1);
}

uint64_t sub_218C18F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 40) = a5;
  *(_QWORD *)(v5 + 24) = a4;
  sub_218C58814();
  *(_QWORD *)(v5 + 32) = sub_218C58808();
  sub_218C587E4();
  return swift_task_switch();
}

uint64_t sub_218C18FFC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  os_unfair_lock_s *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 40);
  swift_release();
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 24) + 16);
  os_unfair_lock_lock(v3);
  if (sub_218C19104(v2))
  {
    v4 = *(_BYTE *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 24);
    swift_getKeyPath();
    v6 = swift_task_alloc();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = v4;
    *(_QWORD *)(v0 + 16) = v5;
    sub_218C15874(&qword_255009338, type metadata accessor for SHManagedSessionStateHandler, (uint64_t)&unk_218C5D9C8);
    sub_218C58664();
    swift_release();
    swift_task_dealloc();
  }
  os_unfair_lock_unlock(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_218C19104(unsigned __int8 a1)
{
  uint64_t v1;
  int v2;

  v2 = a1;
  swift_getKeyPath();
  sub_218C15874(&qword_255009338, type metadata accessor for SHManagedSessionStateHandler, (uint64_t)&unk_218C5D9C8);
  sub_218C58670();
  swift_release();
  if (*(_BYTE *)(v1 + 16) == 2 && v2 == 1)
    return 0;
  swift_getKeyPath();
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v1 + 16) != v2;
}

uint64_t sub_218C191E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0
     + OBJC_IVAR____TtC9ShazamKitP33_58F89772B279738C9FF3D89D84CAFA6328SHManagedSessionStateHandler___observationRegistrar;
  v2 = sub_218C586A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_218C19240(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_218C19260(uint64_t a1)
{
  _QWORD *v1;

  return sub_218C183BC(a1, v1);
}

uint64_t sub_218C19268(uint64_t a1)
{
  uint64_t v1;

  return sub_218C1C9F8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_218C19270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_218C192B8(uint64_t a1)
{
  uint64_t v1;

  return sub_218C18B90(a1, v1);
}

unint64_t sub_218C192C4()
{
  unint64_t result;

  result = qword_255009388;
  if (!qword_255009388)
  {
    result = MEMORY[0x219A21BC8](&protocol conformance descriptor for SHManagedSession.State, &type metadata for SHManagedSession.State);
    atomic_store(result, (unint64_t *)&qword_255009388);
  }
  return result;
}

void sub_218C19308(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_218C16FBC(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_218C16EB8, a2);
}

void sub_218C19324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_218C17030(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_218C1968C);
}

void sub_218C19340(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_218C16FBC(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_218C170E4, a2);
}

void sub_218C1935C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_218C17030(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_218C19678);
}

uint64_t sub_218C19378()
{
  return type metadata accessor for SHManagedSession(0);
}

uint64_t type metadata accessor for SHManagedSession(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_255009390);
}

uint64_t sub_218C19394(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_218C193C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_218C586A0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SHManagedSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SHManagedSession.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SHManagedSession.__allocating_init(catalog:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SHManagedSession.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SHManagedSession.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_218C1955C + 4 * byte_218C5D875[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_218C19590 + 4 * byte_218C5D870[v4]))();
}

uint64_t sub_218C19590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218C19598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218C195A0);
  return result;
}

uint64_t sub_218C195AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218C195B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_218C195B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218C195C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218C195CC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_218C195D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SHManagedSession.State()
{
  return &type metadata for SHManagedSession.State;
}

uint64_t sub_218C195EC()
{
  return type metadata accessor for SHManagedSessionStateHandler(0);
}

uint64_t sub_218C195F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_218C586A0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_218C19678(id *a1)
{
  uint64_t v1;

  return objc_msgSend(*a1, sel_setEnableLiveActivity_, *(unsigned __int8 *)(v1 + 16));
}

id sub_218C1968C(id *a1)
{
  uint64_t v1;

  return objc_msgSend(*a1, sel_setSendNotifications_, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_218C196A0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_218C196CC(uint64_t a1)
{
  uint64_t v1;

  sub_218C188C0(a1, *(os_unfair_lock_s **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_218C196D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_218C1993C;
  return sub_218C18F8C(a1, v4, v5, v6, v7);
}

void sub_218C19754()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_218C19768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_218C16478;
  return sub_218C18F8C(a1, v4, v5, v6, v7);
}

uint64_t sub_218C197E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_218C19848(void *a1, void *a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  return sub_218C18778(a1, a2, a3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_218C198BC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_218C198E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_218C17F9C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_218C198F0(uint64_t a1)
{
  void **v1;

  return sub_218C180FC(a1, v1[2], v1[3], v1[4]);
}

uint64_t objectdestroy_14Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_218C19950()
{
  sub_218C19754();
}

uint64_t sub_218C19964()
{
  uint64_t result;

  result = sub_218C58760();
  qword_255009408 = result;
  return result;
}

id static SHMediaItemProperty.timeRanges.getter()
{
  return sub_218C19A04(&qword_255008FF0, (id *)&qword_255009408);
}

uint64_t sub_218C199B4()
{
  uint64_t result;

  result = sub_218C58760();
  qword_255009410 = result;
  return result;
}

id static SHMediaItemProperty.frequencySkewRanges.getter()
{
  return sub_218C19A04(&qword_255008FF8, (id *)&qword_255009410);
}

id sub_218C19A04(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t SHMediaItem.properties.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  __CFString *v3;
  unint64_t v4;
  char v5;
  __CFString *v6;
  id v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __CFString *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  __CFString *v14;
  id v15;
  uint64_t v16;
  char v17;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v1 = objc_msgSend(v0, sel_properties);
  type metadata accessor for SHMediaItemProperty(0);
  sub_218C15874(&qword_255009158, (uint64_t (*)(uint64_t))type metadata accessor for SHMediaItemProperty, (uint64_t)&unk_218C5D1B8);
  v2 = sub_218C58748();

  v22 = v2;
  if (!*(_QWORD *)(v2 + 16))
  {
    v20 = 0u;
    v21 = 0u;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v3 = CFSTR("sh_frequencySkewRanges");
  v4 = sub_218C1A644((uint64_t)v3);
  if ((v5 & 1) == 0)
  {
    v20 = 0u;
    v21 = 0u;

    swift_bridgeObjectRelease();
LABEL_13:
    sub_218C1A6C4((uint64_t)&v20);
    if (*(_QWORD *)(v2 + 16))
      goto LABEL_9;
LABEL_14:
    v20 = 0u;
    v21 = 0u;
LABEL_21:
    sub_218C1A6C4((uint64_t)&v20);
    return v2;
  }
  sub_218C1B188(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v20);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009420);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v6 = v3;
    sub_218C1AA4C((uint64_t)v6, &v20);

    sub_218C1A6C4((uint64_t)&v20);
    if (qword_255008FF8 != -1)
      swift_once();
    v7 = (id)qword_255009410;
    v8 = sub_218C16C28(*(unint64_t *)&v19[0]);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v21 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_255009430);
    *(_QWORD *)&v20 = v8;
    sub_218C1AB30(&v20, v19);
    v2 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_218C1B068(v19, v7, isUniquelyReferenced_nonNull_native);
    v22 = v2;

    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_14;
LABEL_9:
  v10 = CFSTR("sh_timeRanges");
  v11 = sub_218C1A644((uint64_t)v10);
  if ((v12 & 1) != 0)
  {
    sub_218C1B188(*(_QWORD *)(v2 + 56) + 32 * v11, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }

  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009420);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = *(_QWORD *)&v19[0];
    v14 = v10;
    sub_218C1AA4C((uint64_t)v14, &v20);

    sub_218C1A6C4((uint64_t)&v20);
    if (qword_255008FF0 != -1)
      swift_once();
    v15 = (id)qword_255009408;
    v16 = sub_218C16ABC(v13);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v21 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_255009428);
    *(_QWORD *)&v20 = v16;
    sub_218C1AB30(&v20, v19);
    v2 = v22;
    v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_218C1B068(v19, v15, v17);

    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t SHMediaItem.songs.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  unint64_t v17;
  uint64_t v18;
  id v20[2];

  v20[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_218C58730();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, sel__rawResponseSongs);
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  v6 = v5;
  sub_218C1B1C4();
  sub_218C58748();

  v7 = (void *)objc_opt_self();
  v8 = (void *)sub_218C5873C();
  swift_bridgeObjectRelease();
  v20[0] = 0;
  v9 = objc_msgSend(v7, sel_dataWithJSONObject_options_error_, v8, 0, v20);

  v10 = v20[0];
  if (!v9)
  {
    v14 = v10;
    v15 = (void *)sub_218C585C8();

    swift_willThrow();
    return MEMORY[0x24BEE4AF8];
  }
  v11 = sub_218C585EC();
  v13 = v12;

  sub_218C5852C();
  swift_allocObject();
  sub_218C58520();
  sub_218C15874(&qword_255009440, (uint64_t (*)(uint64_t))MEMORY[0x24BDDF500], MEMORY[0x24BDDF528]);
  sub_218C58514();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009448);
  v17 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_218C5D010;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v18 + v17, v4, v1);
  swift_release();
  sub_218C1B200(v11, v13);
  return v18;
}

uint64_t SHMediaItem.frequencySkewRanges.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v0 = SHMediaItem.properties.getter();
  v1 = v0;
  if (qword_255008FF8 == -1)
  {
    if (*(_QWORD *)(v0 + 16))
      goto LABEL_3;
LABEL_9:
    v8 = 0u;
    v9 = 0u;
    goto LABEL_10;
  }
  swift_once();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_9;
LABEL_3:
  v2 = (id)qword_255009410;
  v3 = sub_218C1A644((uint64_t)v2);
  if ((v4 & 1) == 0)
  {
    v8 = 0u;
    v9 = 0u;

LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_218C1B188(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)&v8);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_11:
    sub_218C1A6C4((uint64_t)&v8);
    return MEMORY[0x24BEE4AF8];
  }
  sub_218C1AB30(&v8, v10);
  sub_218C1B188((uint64_t)v10, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009430);
  if (swift_dynamicCast())
  {
    v5 = v7;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
    return v5;
  }
  result = sub_218C58A6C();
  __break(1u);
  return result;
}

uint64_t SHMediaItem.timeRanges.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v0 = SHMediaItem.properties.getter();
  v1 = v0;
  if (qword_255008FF0 == -1)
  {
    if (*(_QWORD *)(v0 + 16))
      goto LABEL_3;
LABEL_9:
    v8 = 0u;
    v9 = 0u;
    goto LABEL_10;
  }
  swift_once();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_9;
LABEL_3:
  v2 = (id)qword_255009408;
  v3 = sub_218C1A644((uint64_t)v2);
  if ((v4 & 1) == 0)
  {
    v8 = 0u;
    v9 = 0u;

LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_218C1B188(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)&v8);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_11:
    sub_218C1A6C4((uint64_t)&v8);
    return MEMORY[0x24BEE4AF8];
  }
  sub_218C1AB30(&v8, v10);
  sub_218C1B188((uint64_t)v10, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009428);
  if (swift_dynamicCast())
  {
    v5 = v7;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
    return v5;
  }
  result = sub_218C58A6C();
  __break(1u);
  return result;
}

id sub_218C1A2F4(SHMediaItem *self, SEL a2, id a3)
{
  id v4;
  SHMediaItem *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  __int128 v13;
  uint64_t v14;

  v4 = a3;
  v5 = self;
  sub_218C1A3DC(v4, &v13);

  v6 = v14;
  if (!v14)
    return 0;
  v7 = __swift_project_boxed_opaque_existential_0(&v13, v14);
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v7, v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v10);
  v11 = (void *)sub_218C58AE4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  return v11;
}

uint64_t sub_218C1A3DC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;
  unint64_t v6;
  char v7;

  v4 = SHMediaItem.properties.getter();
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = a1;
    v6 = sub_218C1A644((uint64_t)v5);
    if ((v7 & 1) != 0)
    {
      sub_218C1B188(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a2);
    }
    else
    {
      *a2 = 0u;
      a2[1] = 0u;
    }

  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  return swift_bridgeObjectRelease();
}

void SHMediaItem.id.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_identifier);
  sub_218C5864C();

}

void sub_218C1A4A0()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, sel_identifier);
  sub_218C5864C();

}

uint64_t static UTType.shazamSignature.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_218C1A524(a1);
}

uint64_t static UTType.shazamCustomCatalog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_218C1A524(a1);
}

uint64_t sub_218C1A524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009450);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C586B8();
  v6 = sub_218C586AC();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v5, v6);
  __break(1u);
  return result;
}

unint64_t sub_218C1A5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_218C58B50();
  sub_218C58790();
  v4 = sub_218C58B68();
  return sub_218C1A734(a1, a2, v4);
}

unint64_t sub_218C1A644(uint64_t a1)
{
  uint64_t v2;

  sub_218C58784();
  sub_218C58B50();
  sub_218C58790();
  v2 = sub_218C58B68();
  swift_bridgeObjectRelease();
  return sub_218C1A814(a1, v2);
}

uint64_t sub_218C1A6C4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009418);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_218C1A704(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_218C589C4();
  return sub_218C1A988(a1, v2);
}

unint64_t sub_218C1A734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_218C58AFC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_218C58AFC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_218C1A814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_218C58784();
    v8 = v7;
    if (v6 == sub_218C58784() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_218C58AFC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_218C58784();
          v15 = v14;
          if (v13 == sub_218C58784() && v15 == v16)
            break;
          v18 = sub_218C58AFC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_218C1A988(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_218C1B2B4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x219A2113C](v9, a1);
      sub_218C1B2F0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

double sub_218C1AA4C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_218C1A644(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_218C1B388();
      v9 = v11;
    }

    sub_218C1AB30((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_218C1AE78(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

_OWORD *sub_218C1AB30(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_218C1AB40(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009460);
  v35 = a2;
  v6 = sub_218C58A90();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      sub_218C1AB30(v22, v36);
    }
    else
    {
      sub_218C1B188((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    sub_218C58784();
    sub_218C58B50();
    sub_218C58790();
    v24 = sub_218C58B68();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)sub_218C1AB30(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_218C1AE78(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_218C58970();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        sub_218C58784();
        sub_218C58B50();
        v11 = v10;
        sub_218C58790();
        v12 = sub_218C58B68();

        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_218C1B068(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_218C1A644((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
        return sub_218C1AB30(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_218C1B388();
      goto LABEL_7;
    }
    sub_218C1AB40(v12, a3 & 1);
    v18 = sub_218C1A644((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_218C1B324(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for SHMediaItemProperty(0);
  result = (_OWORD *)sub_218C58B20();
  __break(1u);
  return result;
}

uint64_t sub_218C1B188(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_218C1B1C4()
{
  unint64_t result;

  result = qword_255009438;
  if (!qword_255009438)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255009438);
  }
  return result;
}

uint64_t sub_218C1B200(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_218C1B264()
{
  return sub_218C15874(&qword_255009458, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_218C1B2B4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_218C1B2F0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

_OWORD *sub_218C1B324(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_218C1AB30(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

id sub_218C1B388()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009460);
  v2 = *v0;
  v3 = sub_218C58A84();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_218C1B188(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_218C1AB30(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t SHCustomCatalog.referenceSignatures.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  uint64_t v13;
  _BYTE v15[16];
  void *v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009468);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009478);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x24BEE6A10], v3);
  v12 = v1;
  sub_218C58898();

  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 0, 1, v13);
  return sub_218C1B7CC((uint64_t)v11, a1);
}

uint64_t sub_218C1B68C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094E0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4, v7);
  v8 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, v4);
  aBlock[4] = sub_218C1C7E8;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_218C1B8C8;
  aBlock[3] = &block_descriptor_0;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_enumerateWithBlock_, v11);
  _Block_release(v11);
  return sub_218C58850();
}

uint64_t sub_218C1B7C4(uint64_t a1)
{
  uint64_t v1;

  return sub_218C1B68C(a1, *(void **)(v1 + 16));
}

uint64_t sub_218C1B7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_218C1B814(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  _QWORD v11[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094E8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = a1;
  v11[1] = a2;
  v9 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550094E0);
  sub_218C58844();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_218C1B8C8(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  sub_218C1C858();
  sub_218C587A8();
  swift_retain();
  v4 = a2;
  v3();
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t SHCustomCatalog.ReferenceSignatures.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C1BA74(v2, (uint64_t)v7);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_218C5885C();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, v8);
  }
  return result;
}

uint64_t sub_218C1BA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SHCustomCatalog.ReferenceSignatures.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  *v1 = v0;
  v1[1] = sub_218C1BB28;
  return sub_218C58874();
}

uint64_t sub_218C1BB28()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C1BB7C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_218C1BB88()
{
  return MEMORY[0x24BEE40A8];
}

uint64_t sub_218C1BB94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 32) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 40) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  *v2 = v1;
  v2[1] = sub_218C1BC04;
  return sub_218C58874();
}

uint64_t sub_218C1BC04()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C1BC58()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C1BC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[7] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  *v4 = v3;
  v4[1] = sub_218C1BCE4;
  return sub_218C58874();
}

uint64_t sub_218C1BCE4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C1BD38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 16);
  if (v1)
  {
    swift_getObjectType();
    sub_218C587E4();
  }
  return swift_task_switch();
}

uint64_t sub_218C1BDA0()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 32) = *(_OWORD *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_218C1BDBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2550094A8;
  if (!qword_2550094A8)
  {
    v1 = type metadata accessor for SHCustomCatalog.ReferenceSignatures.Iterator(255);
    result = MEMORY[0x219A21BC8](&protocol conformance descriptor for SHCustomCatalog.ReferenceSignatures.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_2550094A8);
  }
  return result;
}

uint64_t type metadata accessor for SHCustomCatalog.ReferenceSignatures.Iterator(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_2550094C8);
}

uint64_t sub_218C1BE18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C1BA74(v2, (uint64_t)v7);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_218C5885C();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, v8);
    return sub_218C1C748(v2);
  }
  return result;
}

uint64_t *_s19ReferenceSignaturesVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_255009470) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t _s19ReferenceSignaturesVwxx(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *_s19ReferenceSignaturesVwcp(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *_s19ReferenceSignaturesVwca(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *_s19ReferenceSignaturesVwtk(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *_s19ReferenceSignaturesVwta(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009480);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t _s19ReferenceSignaturesVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1C3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_255009470);
}

uint64_t _s19ReferenceSignaturesVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1C3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_255009470);
}

uint64_t type metadata accessor for SHCustomCatalog.ReferenceSignatures(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_2550094B0);
}

void sub_218C1C400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_218C1C67C(a1, a2, a3, &qword_2550094C0, &qword_255009480, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t _s19ReferenceSignaturesV8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s19ReferenceSignaturesV8IteratorVwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s19ReferenceSignaturesV8IteratorVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s19ReferenceSignaturesV8IteratorVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s19ReferenceSignaturesV8IteratorVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s19ReferenceSignaturesV8IteratorVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t _s19ReferenceSignaturesV8IteratorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1C5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_255009488);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t _s19ReferenceSignaturesV8IteratorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1C614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_255009488);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void sub_218C1C660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_218C1C67C(a1, a2, a3, &qword_2550094D8, &qword_255009478, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE6A78]);
}

void sub_218C1C67C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  unint64_t v6;

  sub_218C1C6F0(319, a4, a5, a6);
  if (v6 <= 0x3F)
    swift_initStructMetadata();
}

void sub_218C1C6F0(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_218C1C748(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SHCustomCatalog.ReferenceSignatures(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_218C1C784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094E0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_218C1C7E8(void *a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550094E0);
  return sub_218C1B814(a1, a2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_218C1C858()
{
  unint64_t result;

  result = qword_2550097A0;
  if (!qword_2550097A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2550097A0);
  }
  return result;
}

id SHSession.Result.wasCancelled.getter(void *a1, uint64_t a2, char a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  id v13;
  void *v15;
  __int128 v16;
  __int128 v17;

  if (a3 != 2)
    return 0;
  v4 = a1;
  v5 = (void *)sub_218C585BC();
  v6 = objc_msgSend(v5, sel_userInfo);

  v7 = sub_218C58748();
  v8 = sub_218C58784();
  if (!*(_QWORD *)(v7 + 16) || (v10 = sub_218C1A5E0(v8, v9), (v11 & 1) == 0))
  {
    v16 = 0u;
    v17 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_218C1B188(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_8:
    sub_218C1A6C4((uint64_t)&v16);
    goto LABEL_9;
  }
  sub_218C1CF6C();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:

    return 0;
  }
  v12 = v15;
  v13 = objc_msgSend(v12, sel_sh_isMatchAttemptCancelledError);

  return v13;
}

uint64_t sub_218C1C9F8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t SHSession.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C1CFA8(v2, (uint64_t)v7);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_218C5885C();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, v8);
  }
  return result;
}

uint64_t SHSession.Results.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  *v1 = v0;
  v1[1] = sub_218C1CBA4;
  return sub_218C58874();
}

uint64_t sub_218C1CBA4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C1CBF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_218C1CC08(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  *v2 = v1;
  v2[1] = sub_218C1CC78;
  return sub_218C58874();
}

uint64_t sub_218C1CC78()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C1CCCC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_BYTE *)(v0 + 32);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v1 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C1CCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[8] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  *v4 = v3;
  v4[1] = sub_218C1CD60;
  return sub_218C58874();
}

uint64_t sub_218C1CD60()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C1CDB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 33) = *(_BYTE *)(v0 + 32);
  if (v1)
  {
    swift_getObjectType();
    sub_218C587E4();
  }
  return swift_task_switch();
}

uint64_t sub_218C1CE24()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(v0 + 33);
  v2 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 72);
  *(_BYTE *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C1CE44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C1CFA8(v2, (uint64_t)v7);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_218C5885C();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, v8);
    return sub_218C1DA28(v2);
  }
  return result;
}

unint64_t sub_218C1CF6C()
{
  unint64_t result;

  result = qword_2550094F0;
  if (!qword_2550094F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2550094F0);
  }
  return result;
}

uint64_t sub_218C1CFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_218C1CFF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255009518;
  if (!qword_255009518)
  {
    v1 = type metadata accessor for SHSession.Results.Iterator(255);
    result = MEMORY[0x219A21BC8](&protocol conformance descriptor for SHSession.Results.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_255009518);
  }
  return result;
}

uint64_t type metadata accessor for SHSession.Results.Iterator(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_255009538);
}

id sub_218C1D054(id result, void *a2, unsigned __int8 a3)
{
  id v3;

  if (a3 >= 2u)
  {
    if (a3 != 2)
      return result;
    v3 = result;
    result = a2;
  }
  return result;
}

void _s6ResultOwxx(uint64_t a1)
{
  sub_218C1D09C(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_218C1D09C(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2)
      return;

    a1 = a2;
  }

}

uint64_t _s6ResultOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_218C1D054(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s6ResultOwca(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_218C1D054(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_218C1D09C(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s6ResultOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_218C1D09C(v4, v5, v6);
  return a1;
}

uint64_t _s6ResultOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6ResultOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_218C1D254(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_218C1D25C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SHSession.Result()
{
  return &type metadata for SHSession.Result;
}

uint64_t *_s7ResultsVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_255009368) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t _s7ResultsVwxx(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *_s7ResultsVwcp(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *_s7ResultsVwca(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *_s7ResultsVwtk(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *_s7ResultsVwta(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t _s7ResultsVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1D6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_255009368);
}

uint64_t _s7ResultsVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1D714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_255009368);
}

uint64_t type metadata accessor for SHSession.Results(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_255009520);
}

uint64_t sub_218C1D734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C1D96C(a1, a2, a3, (uint64_t (*)(uint64_t))sub_218C1D740);
}

void sub_218C1D740()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255009530)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255009370);
    v0 = sub_218C58964();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255009530);
  }
}

uint64_t _s7ResultsV8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s7ResultsV8IteratorVwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s7ResultsV8IteratorVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s7ResultsV8IteratorVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s7ResultsV8IteratorVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s7ResultsV8IteratorVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550094F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t _s7ResultsV8IteratorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1D93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_2550094F8);
}

uint64_t _s7ResultsV8IteratorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C1D954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_2550094F8);
}

uint64_t sub_218C1D960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C1D96C(a1, a2, a3, (uint64_t (*)(uint64_t))sub_218C1D9D4);
}

uint64_t sub_218C1D96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_218C1D9D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255009548)
  {
    v0 = sub_218C58880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255009548);
  }
}

uint64_t sub_218C1DA28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SHSession.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_218C1DA64()
{
  uint64_t v0;

  v0 = sub_218C586DC();
  __swift_allocate_value_buffer(v0, qword_255009550);
  __swift_project_value_buffer(v0, (uint64_t)qword_255009550);
  return sub_218C586D0();
}

void sub_218C1DAD0(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;

  v3 = sub_218C1E47C();
  if (v5 != 0xFF)
  {
    v6 = (void *)v3;
    v7 = v4;
    v8 = v5;
    a2();
    sub_218C1E91C(v6, v7, v8);
  }
}

uint64_t sub_218C1DB40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v9;

  v2 = sub_218C5855C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(a1 + 32);
  sub_218C58538();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_218C1DBE4()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SHSession.results.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v15[16];
  uint64_t (*v16)(uint64_t);
  char *v17;
  char v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009360);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009368);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = v1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009370);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(a1, 1, 1, v12);
  v16 = sub_218C1DE60;
  v17 = &v18;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x24BEE6A10], v3);
  sub_218C58898();
  v13((uint64_t)v11, 0, 1, v12);
  return sub_218C19270((uint64_t)v11, a1);
}

uint64_t sub_218C1DD58(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4, v7);
  v8 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, v4);
  type metadata accessor for NotificationObserver();
  v11 = swift_allocObject();
  sub_218C1E2F8(a2, (uint64_t)sub_218C1EA24, v10, v11);
  return sub_218C58838();
}

uint64_t sub_218C1DE60(uint64_t a1)
{
  uint64_t v1;

  return sub_218C1DD58(a1, *(void **)(v1 + 16));
}

uint64_t sub_218C1DE68(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[3];
  unsigned __int8 v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550093C8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = a1;
  v12[2] = a2;
  v13 = a3;
  sub_218C1D054(a1, a2, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  sub_218C58844();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_218C1DF30(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v3, sel_removeObserver_, a2);

}

uint64_t SHSession.result(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

uint64_t sub_218C1DFA4()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t inited;
  id v6;
  id v7;

  v2 = (void *)v0[16];
  v1 = (void *)v0[17];
  v0[7] = v0 + 13;
  v0[2] = v0;
  v0[3] = sub_218C1E084;
  v3 = swift_continuation_init();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v2;
  v4[3] = 0;
  v4[4] = v3;
  type metadata accessor for NotificationObserver();
  inited = swift_initStackObject();
  v6 = v2;
  v7 = v1;
  sub_218C1E2F8(v7, (uint64_t)sub_218C1E2CC, (uint64_t)v4, inited);
  objc_msgSend(v7, sel_matchSignature_, v6);
  swift_release();
  return swift_continuation_await();
}

uint64_t sub_218C1E084()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v0 + 8))(*(_QWORD *)(*(_QWORD *)v0 + 104), *(_QWORD *)(*(_QWORD *)v0 + 112), *(unsigned __int8 *)(*(_QWORD *)v0 + 120));
}

uint64_t sub_218C1E0C8(void *a1, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t result;
  id v26;
  uint64_t v27;
  __n128 v28;
  unsigned __int8 v29;

  v27 = a6;
  v11 = sub_218C58658();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v17);
  v19 = (char *)&v27 - v18;
  v20 = objc_msgSend(a4, "_ID");
  sub_218C5864C();

  if (a3)
  {
    if (a3 == 1)
      v21 = a1;
    else
      v21 = a2;
  }
  else
  {
    v21 = objc_msgSend(a1, sel_querySignature, v27);
  }
  v22 = v21;
  v23 = objc_msgSend(v21, "_ID", v27);

  sub_218C5864C();
  LOBYTE(v22) = sub_218C58640();
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v16, v11);
  result = ((uint64_t (*)(char *, uint64_t))v24)(v19, v11);
  if ((v22 & 1) != 0)
  {
    if (a5)
    {
      v26 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      objc_msgSend(v26, sel_removeObserver_, *(_QWORD *)(a5 + 16));

    }
    v28.n128_u64[0] = (unint64_t)a1;
    v28.n128_u64[1] = (unint64_t)a2;
    v29 = a3;
    sub_218C1D054(a1, a2, a3);
    sub_218C165FC(&v28, *(__n128 **)(*(_QWORD *)(v27 + 64) + 40));
    return swift_continuation_resume();
  }
  return result;
}

uint64_t sub_218C1E2A0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_218C1E2CC(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v3;

  return sub_218C1E0C8(a1, a2, a3, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t type metadata accessor for NotificationObserver()
{
  return objc_opt_self();
}

uint64_t sub_218C1E2F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v14[6];

  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v14[4] = sub_218C1E45C;
  v14[5] = v9;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = sub_218C1DB40;
  v14[3] = &block_descriptor_1;
  v10 = _Block_copy(v14);
  v11 = a1;
  swift_retain();
  swift_release();
  v12 = objc_msgSend(v8, sel_addObserverForName_object_queue_usingBlock_, CFSTR("SHNotificationNameSessionResult"), v11, 0, v10);

  swift_release();
  _Block_release(v10);

  *(_QWORD *)(a4 + 16) = v12;
  return a4;
}

uint64_t sub_218C1E438()
{
  swift_release();
  return swift_deallocObject();
}

void sub_218C1E45C(uint64_t a1)
{
  uint64_t v1;

  sub_218C1DAD0(a1, *(void (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_218C1E47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t result;
  NSObject *v21;
  uint64_t v22;
  _BYTE v23[40];
  __int128 v24;
  __int128 v25;

  v0 = sub_218C58550();
  if (!v0)
  {
    if (qword_255009000 != -1)
      swift_once();
    v6 = sub_218C586DC();
    __swift_project_value_buffer(v6, (uint64_t)qword_255009550);
    v5 = sub_218C586C4();
    v7 = sub_218C5891C();
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_218BF1000, v5, v7, "Received SHSession notification but user info was missing", v8, 2u);
      MEMORY[0x219A21C40](v8, -1, -1);
    }
    goto LABEL_43;
  }
  v1 = v0;
  *(_QWORD *)&v24 = sub_218C58784();
  *((_QWORD *)&v24 + 1) = v2;
  sub_218C589DC();
  if (*(_QWORD *)(v1 + 16) && (v3 = sub_218C1A704((uint64_t)v23), (v4 & 1) != 0))
  {
    sub_218C1B188(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  sub_218C1B2F0((uint64_t)v23);
  if (*((_QWORD *)&v25 + 1))
  {
    sub_218C1E948(0, &qword_255009580);
    if (swift_dynamicCast())
      v5 = v21;
    else
      v5 = 0;
  }
  else
  {
    sub_218C1A6C4((uint64_t)&v24);
    v5 = 0;
  }
  v22 = sub_218C58784();
  sub_218C589DC();
  if (*(_QWORD *)(v1 + 16) && (v9 = sub_218C1A704((uint64_t)v23), (v10 & 1) != 0))
  {
    sub_218C1B188(*(_QWORD *)(v1 + 56) + 32 * v9, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  sub_218C1B2F0((uint64_t)v23);
  if (*((_QWORD *)&v25 + 1))
  {
    sub_218C1E948(0, (unint64_t *)&qword_255009578);
    if (swift_dynamicCast())
    {
      v11 = (id)v22;
      goto LABEL_26;
    }
  }
  else
  {
    sub_218C1A6C4((uint64_t)&v24);
  }
  if (v5)
    v11 = -[NSObject querySignature](v5, sel_querySignature);
  else
    v11 = 0;
LABEL_26:
  *(_QWORD *)&v24 = sub_218C58784();
  *((_QWORD *)&v24 + 1) = v12;
  sub_218C589DC();
  if (*(_QWORD *)(v1 + 16) && (v13 = sub_218C1A704((uint64_t)v23), (v14 & 1) != 0))
  {
    sub_218C1B188(*(_QWORD *)(v1 + 56) + 32 * v13, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_218C1B2F0((uint64_t)v23);
  if (!*((_QWORD *)&v25 + 1))
  {
    sub_218C1A6C4((uint64_t)&v24);
    v15 = 0;
    if (v11)
      goto LABEL_35;
    goto LABEL_39;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009570);
  if (swift_dynamicCast())
    v15 = (void *)v22;
  else
    v15 = 0;
  if (!v11)
  {
LABEL_39:
    if (qword_255009000 != -1)
      swift_once();
    v16 = sub_218C586DC();
    __swift_project_value_buffer(v16, (uint64_t)qword_255009550);
    v17 = sub_218C586C4();
    v18 = sub_218C5891C();
    if (!os_log_type_enabled(v17, v18))
    {

      return 0;
    }
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_218BF1000, v17, v18, "Received SHSession notification signature was missing", v19, 2u);
    MEMORY[0x219A21C40](v19, -1, -1);

LABEL_43:
    return 0;
  }
LABEL_35:
  if (!v5)
  {
    if (v15)
      return (uint64_t)v15;
    else
      return (uint64_t)v11;
  }
  if (!v15)
  {

    return (uint64_t)v5;
  }
  result = sub_218C58A6C();
  __break(1u);
  return result;
}

void sub_218C1E91C(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    sub_218C1D09C(a1, a2, a3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_218C1E948(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_218C1E9C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_218C1EA24(void *a1, void *a2, unsigned __int8 a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550090B8);
  return sub_218C1DE68(a1, a2, a3);
}

void sub_218C1EA7C(uint64_t a1)
{
  uint64_t v1;

  sub_218C1DF30(a1, v1);
}

uint64_t sub_218C1EA84()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for SHLibrary();
  v0 = swift_allocObject();
  result = sub_218C1F5D4();
  qword_255009588 = v0;
  return result;
}

uint64_t static SHLibrary.default.getter()
{
  if (qword_255009008 != -1)
    swift_once();
  return swift_retain();
}

uint64_t SHLibrary.items.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  swift_getKeyPath();
  v5 = v0;
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain_n();
  v2 = sub_218C215B4(v1);
  swift_bridgeObjectRelease();
  v4 = v2;
  sub_218C2153C(&v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_218C1EBCC()
{
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_218C1EC50()
{
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  return swift_retain();
}

uint64_t sub_218C1ECC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

uint64_t sub_218C1ED38()
{
  swift_getKeyPath();
  sub_218C1F094();
  swift_retain();
  sub_218C58664();
  swift_release();
  return swift_release();
}

uint64_t sub_218C1EDD8()
{
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  return swift_retain();
}

uint64_t sub_218C1EE48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 32);
  return swift_retain();
}

uint64_t sub_218C1EEC0()
{
  swift_getKeyPath();
  sub_218C1F094();
  swift_retain();
  sub_218C58664();
  swift_release();
  return swift_release();
}

uint64_t sub_218C1EF60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_218C1EFF0()
{
  swift_getKeyPath();
  sub_218C1F094();
  swift_bridgeObjectRetain();
  sub_218C58664();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_218C1F094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255009598;
  if (!qword_255009598)
  {
    v1 = type metadata accessor for SHLibrary();
    result = MEMORY[0x219A21BC8](&protocol conformance descriptor for SHLibrary, v1);
    atomic_store(result, (unint64_t *)&qword_255009598);
  }
  return result;
}

uint64_t type metadata accessor for SHLibrary()
{
  uint64_t result;

  result = qword_2550095B8;
  if (!qword_2550095B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_218C1F118(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 40) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_218C1F17C()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_218C1F1E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 48);
  return result;
}

uint64_t sub_218C1F25C()
{
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58664();
  return swift_release();
}

uint64_t sub_218C1F2EC()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_218C1F358@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 49);
  return result;
}

uint64_t sub_218C1F3CC()
{
  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58664();
  return swift_release();
}

uint64_t SHLibrary.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  swift_getKeyPath();
  v2 = v0 + OBJC_IVAR____TtC9ShazamKit9SHLibrary___observationRegistrar;
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  if (*(_QWORD *)(v1 + 24))
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_255009570);
    sub_218C588A4();
    swift_release();
  }
  swift_getKeyPath();
  sub_218C58670();
  swift_release();
  if (*(_QWORD *)(v1 + 32))
  {
    swift_retain();
    sub_218C588A4();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v3 = sub_218C586A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t SHLibrary.__deallocating_deinit()
{
  SHLibrary.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_218C1F5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(), sel__defaultLibrary);
  type metadata accessor for SHAsyncLibrary(0);
  swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_218C26BA8(v6);
  *(_QWORD *)(v1 + 24) = 0;
  v7 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v7;
  *(_WORD *)(v1 + 48) = 1;
  sub_218C58694();
  v8 = sub_218C5882C();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v19(v5, 1, 1, v8);
  v9 = swift_allocObject();
  swift_weakInit();
  sub_218C58814();
  swift_retain();
  v10 = sub_218C58808();
  v11 = (_QWORD *)swift_allocObject();
  v12 = MEMORY[0x24BEE6930];
  v11[2] = v10;
  v11[3] = v12;
  v11[4] = v9;
  swift_release();
  v13 = sub_218C20650((uint64_t)v5, (uint64_t)&unk_2550095F0, (uint64_t)v11);
  sub_218C16554((uint64_t)v5, &qword_255009188);
  swift_getKeyPath();
  v22 = v1;
  v23 = v13;
  v24 = v1;
  sub_218C1F094();
  sub_218C58664();
  swift_release();
  swift_release();
  v19(v5, 1, 1, v8);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v14;
  v16 = sub_218C20AD8((uint64_t)v5, (uint64_t)&unk_255009600, (uint64_t)v15);
  sub_218C16554((uint64_t)v5, &qword_255009188);
  swift_getKeyPath();
  v20 = v1;
  v21 = v16;
  v24 = v1;
  sub_218C58664();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_218C1F8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[7] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009608);
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = sub_218C58814();
  v4[12] = sub_218C58808();
  v4[13] = sub_218C587E4();
  v4[14] = v6;
  return swift_task_switch();
}

uint64_t sub_218C1F958()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 120) = Strong;
  if (Strong)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550097D0);
    sub_218C5885C();
    *(_QWORD *)(v0 + 128) = sub_218C58808();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_218C1FA5C;
    return sub_218C58868();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_218C1FA5C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_218C1FAB0()
{
  uint64_t v0;
  void *v1;
  int v2;
  _QWORD *v3;

  v1 = *(void **)(v0 + 40);
  v2 = *(unsigned __int8 *)(v0 + 48);
  if (v2 == 255)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    swift_release();
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_218C1FBA0(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
    sub_218C239F4(v1, v2);
    *(_QWORD *)(v0 + 128) = sub_218C58808();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v3;
    *v3 = v0;
    v3[1] = sub_218C1FA5C;
    return sub_218C58868();
  }
}

void sub_218C1FBA0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[24];

  v3 = sub_218C58658();
  MEMORY[0x24BDAC7A8](v3, v4);
  v8[9] = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097B0);
  MEMORY[0x24BDAC7A8](v6, v7);
  __asm { BR              X10 }
}

uint64_t sub_218C1FC60()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath, v4);
  *(_QWORD *)(v2 - 144) = v1;
  sub_218C1F094();
  sub_218C58664();
  result = swift_release();
  if ((v0 & 1) != 0)
  {
    v6 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v6, v7);
    *(_QWORD *)(v2 - 144) = v1;
    sub_218C58664();
    return swift_release();
  }
  return result;
}

uint64_t sub_218C20650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C23988(a1, (uint64_t)v9);
  v10 = sub_218C5882C();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_218C16554((uint64_t)v9, &qword_255009188);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_218C587E4();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_218C58820();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t sub_218C207E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch();
}

uint64_t sub_218C207F8()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_218C20880;
  return sub_218C25898();
}

uint64_t sub_218C20880()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C208E4()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[6];
  v2 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibrarySnapshot), sel_init);
  v0[9] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[10] = v3;
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = CFSTR("UserAction");
  v4 = (_QWORD *)swift_task_alloc();
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_218C209B4;
  return sub_218C58B08();
}

uint64_t sub_218C209B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C20A20()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C20A60()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C20AA4()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C20AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_218C23988(a1, (uint64_t)v8);
  v9 = sub_218C5882C();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_218C16554((uint64_t)v8, &qword_255009188);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  else
  {
    sub_218C58820();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  v11 = sub_218C587E4();
  v13 = v12;
  swift_unknownObjectRelease();
  if (v13 | v11)
  {
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v11;
    v15[3] = v13;
  }
  return swift_task_create();
}

uint64_t SHLibrary.addItems(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_218C20C68()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_218C23BE4;
  return sub_218C25D94(*(_QWORD *)(v0 + 16));
}

uint64_t SHLibrary.removeItems(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_218C20CD4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_218C20D28;
  return sub_218C2627C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_218C20D28()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_218C20D70(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char v8;
  uint64_t v10;

  v2 = sub_218C58658();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*a1, sel_identifier);
  sub_218C5864C();

  v8 = sub_218C58640();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8 & 1;
}

void sub_218C20E30(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  id v29;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_218C58988();
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    sub_218C23770();
    sub_218C58910();
    v5 = v24;
    v23 = v25;
    v7 = v26;
    v8 = v27;
    v9 = v28;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v23 = a3 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v7 = v11;
    v8 = 0;
  }
  v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!sub_218C589AC())
    goto LABEL_36;
  sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v14 = v29;
  swift_unknownObjectRelease();
  v15 = v8;
  v16 = v9;
  if (!v14)
    goto LABEL_36;
  while (1)
  {
    v29 = v14;
    v20 = a1(&v29);
    if (v4)
    {

      goto LABEL_36;
    }
    if ((v20 & 1) != 0)
      goto LABEL_36;

    v8 = v15;
    v9 = v16;
    if (v5 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v9)
      break;
    v16 = (v9 - 1) & v9;
    v17 = __clz(__rbit64(v9)) | (v8 << 6);
    v15 = v8;
LABEL_24:
    v14 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    if (!v14)
      goto LABEL_36;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    v16 = (v18 - 1) & v18;
    v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  v19 = v8 + 2;
  if (v8 + 2 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
    goto LABEL_22;
  v19 = v8 + 3;
  if (v8 + 3 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
    goto LABEL_22;
  v19 = v8 + 4;
  if (v8 + 4 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    v15 = v19;
    goto LABEL_23;
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v15);
  if (v18)
    goto LABEL_23;
  v21 = v8 + 6;
  while (v22 != v21)
  {
    v18 = *(_QWORD *)(v23 + 8 * v21++);
    if (v18)
    {
      v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  sub_218C23768();
}

uint64_t SHLibrary.isEncrypted.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t SHLibrary.isUpdating.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_218C1F094();
  sub_218C58670();
  swift_release();
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t static SHLibrary.localizedAttribution(for:)(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  v1 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibraryTrack), sel_initWithMediaItem_, a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend((id)objc_opt_self(), sel__localizedAttributionForLibraryItem_, v1);
  if (!v3)
  {

    return 0;
  }
  v4 = v3;
  v5 = sub_218C58784();

  return v5;
}

uint64_t SHLibrary.reload()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_218C212D8()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[3] = *(_QWORD *)(v0[2] + 16);
  v1 = (_QWORD *)swift_task_alloc();
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_218C21328;
  return sub_218C25898();
}

uint64_t sub_218C21328()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_218C21394()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[3];
  v2 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibrarySnapshot), sel_init);
  v0[5] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = CFSTR("UserAction");
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_218C21464;
  return sub_218C58B08();
}

uint64_t sub_218C21464()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C214D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C21504()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C2153C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_218C237C8();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_218C217D4(v6);
  return sub_218C58A30();
}

uint64_t sub_218C215B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = sub_218C58994();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x24BEE4AF8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550095C8);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = sub_218C23460(&v8, v3 + 4, v2, a1);
  result = sub_218C23768();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

void sub_218C216CC(uint64_t a1)
{
  uint64_t *v1;

  sub_218C27BF4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_218C216D8()
{
  return type metadata accessor for SHLibrary();
}

uint64_t sub_218C216E0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_218C586A0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SHLibrary()
{
  return swift_lookUpClassMethod();
}

void sub_218C2178C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 49) = *(_BYTE *)(v0 + 24);
}

void sub_218C2179C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 48) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_218C217AC()
{
  return sub_218C23888();
}

uint64_t sub_218C217C0()
{
  return sub_218C23950();
}

void sub_218C217D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  char *v65;
  _QWORD *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  id v69;
  void *v70;
  char *v71;
  _QWORD *v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  id *v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  void *v83;
  char *v84;
  _QWORD *v85;
  void (*v86)(char *, char *, uint64_t);
  id v87;
  void *v88;
  _QWORD *v89;
  void (*v90)(void);
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  char *v95;
  int v96;
  void (*v97)(char *, uint64_t);
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  void *v105;
  void *v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v108;
  id v109;
  void *v110;
  char *v111;
  _QWORD *v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  void (*v115)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v116;
  void *v117;
  char *v118;
  _QWORD *v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char v125;
  void (*v126)(char *, uint64_t);
  void *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  char v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  unint64_t v193;
  char *v194;
  size_t v195;
  char *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, uint64_t);
  char *v211;
  char *v212;
  void **v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  void (*v223)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v224;
  _QWORD *v225;
  uint64_t v226;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550095D8);
  v4 = MEMORY[0x24BDAC7A8](v2, v3);
  v219 = (char *)&v197 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = (char *)&v197 - v8;
  v11 = MEMORY[0x24BDAC7A8](v7, v10);
  v206 = (char *)&v197 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)&v197 - v15;
  v18 = MEMORY[0x24BDAC7A8](v14, v17);
  v20 = (char *)&v197 - v19;
  MEMORY[0x24BDAC7A8](v18, v21);
  v203 = (char *)&v197 - v22;
  v23 = sub_218C5861C();
  v225 = *(_QWORD **)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23, v24);
  v27 = (char *)&v197 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v25, v28);
  v224 = (char *)&v197 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29, v31);
  v207 = (char *)&v197 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v212 = (char *)&v197 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35, v37);
  v40 = (char *)&v197 - v39;
  v42 = MEMORY[0x24BDAC7A8](v38, v41);
  v222 = (char *)&v197 - v43;
  MEMORY[0x24BDAC7A8](v42, v44);
  v204 = (char *)&v197 - v45;
  v46 = a1[1];
  v47 = sub_218C58ACC();
  if (v47 >= v46)
  {
    if (v46 < 0)
      goto LABEL_169;
    if (v46)
      sub_218C226E0(0, v46, 1, a1);
    return;
  }
  if (v46 >= 0)
    v48 = v46;
  else
    v48 = v46 + 1;
  if (v46 < -1)
    goto LABEL_177;
  v201 = v40;
  v209 = v46;
  v200 = v47;
  v197 = a1;
  if (v46 < 2)
  {
    v52 = (char *)MEMORY[0x24BEE4AF8];
    v226 = MEMORY[0x24BEE4AF8];
    v213 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v46 != 1)
    {
      v56 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_134:
      v184 = v214;
      if (v56 >= 2)
      {
        v185 = *v197;
        do
        {
          v186 = v56 - 2;
          if (v56 < 2)
            goto LABEL_164;
          if (!v185)
            goto LABEL_176;
          v187 = v56 - 1;
          v215 = v52;
          v188 = *(_QWORD *)&v52[16 * v186 + 32];
          v189 = *(_QWORD *)&v52[16 * v56 + 24];
          sub_218C22A74((void **)(v185 + 8 * v188), (void **)(v185 + 8 * *(_QWORD *)&v52[16 * v56 + 16]), (void **)(v185 + 8 * v189), v213);
          if (v184)
            break;
          if (v189 < v188)
            goto LABEL_165;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v190 = v215;
          else
            v190 = sub_218C2344C((uint64_t)v215);
          if (v186 >= *((_QWORD *)v190 + 2))
            goto LABEL_166;
          v191 = v190 + 32;
          v192 = &v190[16 * v186 + 32];
          *(_QWORD *)v192 = v188;
          *((_QWORD *)v192 + 1) = v189;
          v193 = *((_QWORD *)v190 + 2);
          if (v56 > v193)
            goto LABEL_167;
          v194 = &v191[16 * v56];
          v195 = 16 * (v193 - v56);
          v196 = v190;
          memmove(&v191[16 * v187], v194, v195);
          v52 = v196;
          *((_QWORD *)v196 + 2) = v193 - 1;
          v56 = v193 - 1;
        }
        while (v193 > 2);
      }
LABEL_147:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v226 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_218C587B4();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v49 = a1;
    v50 = v48 >> 1;
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    v51 = sub_218C587CC();
    *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) = v50;
    a1 = v49;
    v213 = (void **)((v51 & 0xFFFFFFFFFFFFFF8) + 32);
    v226 = v51;
  }
  v53 = 0;
  v54 = *a1;
  v199 = *a1 + 16;
  v198 = v54 - 8;
  v52 = (char *)MEMORY[0x24BEE4AF8];
  v218 = v9;
  v202 = v16;
  v211 = v20;
  v216 = v27;
  v217 = v23;
  v55 = v209;
  v221 = v54;
  while (2)
  {
    v57 = v53;
    v58 = v53 + 1;
    v208 = v53;
    if (v53 + 1 >= v55)
      goto LABEL_53;
    v215 = v52;
    v59 = *(void **)(v54 + 8 * v58);
    v60 = *(void **)(v54 + 8 * v53);
    v61 = v59;
    v62 = v60;
    v63 = objc_msgSend(v61, sel_creationDate);
    if (v63)
    {
      v64 = v63;
      v65 = v222;
      sub_218C58604();

      v66 = v225;
      v67 = (void (*)(char *, char *, uint64_t))v225[4];
      v68 = (uint64_t)v203;
      v67(v203, v65, v23);
      v223 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v66[7];
      v223(v68, 0, 1, v23);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v66[6])(v68, 1, v23) != 1)
      {
        v67(v204, (char *)v68, v23);
        goto LABEL_21;
      }
    }
    else
    {
      v68 = (uint64_t)v203;
      v223 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v225[7];
      v223((uint64_t)v203, 1, 1, v23);
    }
    sub_218C58610();
    sub_218C16554(v68, &qword_2550095D8);
LABEL_21:
    v69 = objc_msgSend(v62, sel_creationDate, v197);
    if (!v69)
    {
      v223((uint64_t)v20, 1, 1, v23);
      goto LABEL_25;
    }
    v70 = v69;
    v71 = v222;
    sub_218C58604();

    v72 = v225;
    v73 = (void (*)(char *, char *, uint64_t))v225[4];
    v73(v20, v71, v23);
    v223((uint64_t)v20, 0, 1, v23);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v72[6])(v20, 1, v23) == 1)
    {
LABEL_25:
      v74 = v201;
      sub_218C58610();
      sub_218C16554((uint64_t)v20, &qword_2550095D8);
      goto LABEL_26;
    }
    v74 = v201;
    v73(v201, v20, v23);
LABEL_26:
    v75 = v204;
    LODWORD(v220) = sub_218C585F8();
    v76 = (void (*)(char *, uint64_t))v225[1];
    v76(v74, v23);
    v210 = v76;
    v76(v75, v23);

    v57 = v208;
    v55 = v209;
    v58 = v208 + 2;
    if (v208 + 2 >= v209)
      goto LABEL_43;
    v77 = (id *)(v199 + 8 * v208);
    while (1)
    {
      v78 = v58;
      v79 = *(v77 - 1);
      v80 = *v77;
      v81 = v79;
      v82 = objc_msgSend(v80, sel_creationDate);
      if (v82)
      {
        v83 = v82;
        v84 = v222;
        sub_218C58604();

        v85 = v225;
        v86 = (void (*)(char *, char *, uint64_t))v225[4];
        v86(v16, v84, v23);
        v223((uint64_t)v16, 0, 1, v23);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v85[6])(v16, 1, v23) != 1)
        {
          v86(v212, v16, v23);
          goto LABEL_33;
        }
      }
      else
      {
        v223((uint64_t)v16, 1, 1, v23);
      }
      sub_218C58610();
      sub_218C16554((uint64_t)v16, &qword_2550095D8);
LABEL_33:
      v87 = objc_msgSend(v81, sel_creationDate);
      if (v87)
      {
        v88 = v87;
        sub_218C58604();

        v89 = v225;
        v90 = (void (*)(void))v225[4];
        v91 = (uint64_t)v206;
        v90();
        v223(v91, 0, 1, v23);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v89[6])(v91, 1, v23) != 1)
        {
          v92 = v207;
          ((void (*)(char *, uint64_t, uint64_t))v90)(v207, v91, v23);
          goto LABEL_38;
        }
      }
      else
      {
        v91 = (uint64_t)v206;
        v223((uint64_t)v206, 1, 1, v23);
      }
      v92 = v207;
      sub_218C58610();
      sub_218C16554(v91, &qword_2550095D8);
LABEL_38:
      v93 = v212;
      v94 = sub_218C585F8();
      v95 = v92;
      v96 = v94;
      v97 = v210;
      v210(v95, v23);
      v97(v93, v23);

      if (((v220 ^ v96) & 1) != 0)
        break;
      v58 = v78 + 1;
      ++v77;
      if (v209 == v78 + 1)
      {
        v55 = v209;
        v58 = v209;
        v20 = v211;
        goto LABEL_42;
      }
    }
    v20 = v211;
    v55 = v209;
    v58 = v78;
LABEL_42:
    v57 = v208;
LABEL_43:
    v52 = v215;
    v54 = v221;
    if ((v220 & 1) != 0)
    {
      v27 = v216;
      if (v58 < v57)
        goto LABEL_170;
      if (v57 < v58)
      {
        v98 = (uint64_t *)(v198 + 8 * v58);
        v99 = v58;
        v100 = v57;
        v101 = (uint64_t *)(v221 + 8 * v57);
        do
        {
          if (v100 != --v99)
          {
            if (!v54)
              goto LABEL_175;
            v102 = *v101;
            *v101 = *v98;
            *v98 = v102;
          }
          ++v100;
          --v98;
          ++v101;
        }
        while (v100 < v99);
      }
    }
    else
    {
      v27 = v216;
    }
LABEL_53:
    if (v58 >= v55)
      goto LABEL_82;
    if (__OFSUB__(v58, v57))
      goto LABEL_168;
    if (v58 - v57 >= v200)
      goto LABEL_82;
    if (__OFADD__(v57, v200))
      goto LABEL_171;
    if (v57 + v200 >= v55)
      v103 = v55;
    else
      v103 = v57 + v200;
    if (v103 >= v57)
    {
      if (v58 == v103)
        goto LABEL_82;
      v215 = v52;
      v104 = (void (*)(char *, uint64_t))(v198 + 8 * v58);
      v205 = v103;
      while (2)
      {
        v105 = *(void **)(v54 + 8 * v58);
        v210 = v104;
        v220 = v58;
        while (2)
        {
          v106 = *(void **)v104;
          v107 = v105;
          v108 = v106;
          v223 = v107;
          v109 = objc_msgSend(v107, sel_creationDate);
          if (v109)
          {
            v110 = v109;
            v111 = v222;
            sub_218C58604();

            v112 = v225;
            v113 = (void (*)(char *, char *, uint64_t))v225[4];
            v114 = (uint64_t)v218;
            v113(v218, v111, v23);
            v115 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v112[7];
            v115(v114, 0, 1, v23);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v112[6])(v114, 1, v23) == 1)
            {
              v27 = v216;
              goto LABEL_70;
            }
            v113(v224, (char *)v114, v23);
            v27 = v216;
          }
          else
          {
            v115 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v225[7];
            v114 = (uint64_t)v218;
            v115((uint64_t)v218, 1, 1, v23);
LABEL_70:
            sub_218C58610();
            sub_218C16554(v114, &qword_2550095D8);
          }
          v116 = objc_msgSend(v108, sel_creationDate, v197);
          if (v116)
          {
            v117 = v116;
            v118 = v222;
            sub_218C58604();

            v119 = v225;
            v120 = (void (*)(char *, char *, uint64_t))v225[4];
            v121 = (uint64_t)v219;
            v122 = v118;
            v23 = v217;
            v120(v219, v122, v217);
            v115(v121, 0, 1, v23);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119[6])(v121, 1, v23) != 1)
            {
              v120(v27, (char *)v121, v23);
              goto LABEL_77;
            }
          }
          else
          {
            v121 = (uint64_t)v219;
            v23 = v217;
            v115((uint64_t)v219, 1, 1, v217);
          }
          sub_218C58610();
          sub_218C16554(v121, &qword_2550095D8);
LABEL_77:
          v123 = v220;
          v124 = v224;
          v125 = sub_218C585F8();
          v126 = (void (*)(char *, uint64_t))v225[1];
          v126(v27, v23);
          v126(v124, v23);

          if ((v125 & 1) != 0)
          {
            v54 = v221;
            if (!v221)
              goto LABEL_173;
            v127 = *(_QWORD *)v104;
            v105 = (void *)*((_QWORD *)v104 + 1);
            *(_QWORD *)v104 = v105;
            *((_QWORD *)v104 + 1) = v127;
            v104 = (void (*)(char *, uint64_t))((char *)v104 - 8);
            if (v123 == ++v57)
              goto LABEL_64;
            continue;
          }
          break;
        }
        v54 = v221;
LABEL_64:
        v58 = v123 + 1;
        v104 = (void (*)(char *, uint64_t))((char *)v210 + 8);
        v57 = v208;
        if (v58 != v205)
          continue;
        break;
      }
      v58 = v205;
      v52 = v215;
      v20 = v211;
LABEL_82:
      if (v58 < v57)
        goto LABEL_163;
      v220 = v58;
      v128 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v52 = v128;
      else
        v52 = sub_218C232AC(0, *((_QWORD *)v128 + 2) + 1, 1, v128);
      v130 = *((_QWORD *)v52 + 2);
      v129 = *((_QWORD *)v52 + 3);
      v56 = v130 + 1;
      v54 = v221;
      if (v130 >= v129 >> 1)
      {
        v183 = sub_218C232AC((char *)(v129 > 1), v130 + 1, 1, v52);
        v54 = v221;
        v52 = v183;
      }
      *((_QWORD *)v52 + 2) = v56;
      v131 = v52 + 32;
      v132 = &v52[16 * v130 + 32];
      v133 = v220;
      *(_QWORD *)v132 = v57;
      *((_QWORD *)v132 + 1) = v133;
      if (!v130)
      {
        v56 = 1;
LABEL_14:
        v55 = v209;
        v53 = v220;
        v16 = v202;
        if (v220 >= v209)
          goto LABEL_134;
        continue;
      }
      v215 = v52;
LABEL_89:
      v134 = v56 - 1;
      if (v56 >= 4)
      {
        v139 = &v131[16 * v56];
        v140 = *((_QWORD *)v139 - 8);
        v141 = *((_QWORD *)v139 - 7);
        v145 = __OFSUB__(v141, v140);
        v142 = v141 - v140;
        if (v145)
          goto LABEL_152;
        v144 = *((_QWORD *)v139 - 6);
        v143 = *((_QWORD *)v139 - 5);
        v145 = __OFSUB__(v143, v144);
        v137 = v143 - v144;
        v138 = v145;
        if (v145)
          goto LABEL_153;
        v146 = v56 - 2;
        v147 = &v131[16 * v56 - 32];
        v149 = *(_QWORD *)v147;
        v148 = *((_QWORD *)v147 + 1);
        v145 = __OFSUB__(v148, v149);
        v150 = v148 - v149;
        if (v145)
          goto LABEL_155;
        v145 = __OFADD__(v137, v150);
        v151 = v137 + v150;
        if (v145)
          goto LABEL_158;
        if (v151 >= v142)
        {
          v169 = &v131[16 * v134];
          v171 = *(_QWORD *)v169;
          v170 = *((_QWORD *)v169 + 1);
          v145 = __OFSUB__(v170, v171);
          v172 = v170 - v171;
          if (v145)
            goto LABEL_162;
          v162 = v137 < v172;
        }
        else
        {
LABEL_102:
          if ((v138 & 1) != 0)
            goto LABEL_154;
          v146 = v56 - 2;
          v152 = &v131[16 * v56 - 32];
          v154 = *(_QWORD *)v152;
          v153 = *((_QWORD *)v152 + 1);
          v155 = __OFSUB__(v153, v154);
          v156 = v153 - v154;
          v157 = v155;
          if (v155)
            goto LABEL_157;
          v158 = &v131[16 * v134];
          v160 = *(_QWORD *)v158;
          v159 = *((_QWORD *)v158 + 1);
          v145 = __OFSUB__(v159, v160);
          v161 = v159 - v160;
          if (v145)
            goto LABEL_160;
          if (__OFADD__(v156, v161))
            goto LABEL_161;
          if (v156 + v161 < v137)
            goto LABEL_114;
          v162 = v137 < v161;
        }
        if (v162)
          v134 = v146;
      }
      else
      {
        if (v56 == 3)
        {
          v136 = *((_QWORD *)v52 + 4);
          v135 = *((_QWORD *)v52 + 5);
          v145 = __OFSUB__(v135, v136);
          v137 = v135 - v136;
          v138 = v145;
          goto LABEL_102;
        }
        v163 = *((_QWORD *)v52 + 4);
        v164 = *((_QWORD *)v52 + 5);
        v145 = __OFSUB__(v164, v163);
        v156 = v164 - v163;
        v157 = v145;
LABEL_114:
        if ((v157 & 1) != 0)
          goto LABEL_156;
        v165 = &v131[16 * v134];
        v167 = *(_QWORD *)v165;
        v166 = *((_QWORD *)v165 + 1);
        v145 = __OFSUB__(v166, v167);
        v168 = v166 - v167;
        if (v145)
          goto LABEL_159;
        if (v168 < v156)
          goto LABEL_14;
      }
      v173 = v134 - 1;
      if (v134 - 1 >= v56)
      {
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
        break;
      }
      if (!v54)
        goto LABEL_174;
      v174 = &v131[16 * v173];
      v175 = *(_QWORD *)v174;
      v176 = v131;
      v177 = v134;
      v178 = &v131[16 * v134];
      v179 = *((_QWORD *)v178 + 1);
      v180 = v214;
      sub_218C22A74((void **)(v54 + 8 * *(_QWORD *)v174), (void **)(v54 + 8 * *(_QWORD *)v178), (void **)(v54 + 8 * v179), v213);
      v214 = v180;
      if (v180)
        goto LABEL_147;
      if (v179 < v175)
        goto LABEL_149;
      v181 = (uint64_t)v215;
      if (v177 > *((_QWORD *)v215 + 2))
        goto LABEL_150;
      *(_QWORD *)v174 = v175;
      *(_QWORD *)&v176[16 * v173 + 8] = v179;
      v182 = *(_QWORD *)(v181 + 16);
      if (v177 >= v182)
        goto LABEL_151;
      v56 = v182 - 1;
      memmove(v178, v178 + 16, 16 * (v182 - 1 - v177));
      v131 = v176;
      v52 = v215;
      v27 = v216;
      *((_QWORD *)v215 + 2) = v182 - 1;
      v20 = v211;
      v54 = v221;
      if (v182 <= 2)
        goto LABEL_14;
      goto LABEL_89;
    }
    break;
  }
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  sub_218C58A60();
  __break(1u);
}

void sub_218C226E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  char *v32;
  _QWORD *v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  void *v36;
  id v37;
  void *v38;
  char *v39;
  _QWORD *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  char *v60;
  _QWORD *v61;

  v51 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550095D8);
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v49 - v12;
  v14 = sub_218C5861C();
  v61 = *(_QWORD **)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14, v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v16, v19);
  v58 = (char *)&v49 - v21;
  MEMORY[0x24BDAC7A8](v20, v22);
  v60 = (char *)&v49 - v23;
  v50 = a2;
  if (a3 != a2)
  {
    v56 = *a4;
    v24 = v56 + 8 * a3 - 8;
    v53 = v13;
    v54 = v18;
LABEL_5:
    v25 = *(void **)(v56 + 8 * a3);
    v26 = v51;
    v52 = v24;
    v57 = a3;
    while (1)
    {
      v27 = *(void **)v24;
      v28 = v25;
      v29 = v27;
      v59 = v28;
      v30 = objc_msgSend(v28, sel_creationDate);
      if (v30)
      {
        v31 = v30;
        v32 = v58;
        sub_218C58604();

        v33 = v61;
        v34 = (void (*)(char *, char *, uint64_t))v61[4];
        v34(v13, v32, v14);
        v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v33[7];
        v35(v13, 0, 1, v14);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v33[6])(v13, 1, v14) != 1)
        {
          v34(v60, v13, v14);
          goto LABEL_11;
        }
      }
      else
      {
        v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v61[7];
        v35(v13, 1, 1, v14);
      }
      sub_218C58610();
      sub_218C16554((uint64_t)v13, &qword_2550095D8);
LABEL_11:
      v36 = v29;
      v37 = objc_msgSend(v29, sel_creationDate);
      if (v37)
      {
        v38 = v37;
        v39 = v58;
        sub_218C58604();

        v40 = v61;
        v41 = (void (*)(char *, char *, uint64_t))v61[4];
        v42 = (uint64_t)v55;
        v41(v55, v39, v14);
        v35((char *)v42, 0, 1, v14);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v40[6])(v42, 1, v14) != 1)
        {
          v43 = v54;
          v41(v54, (char *)v42, v14);
          goto LABEL_16;
        }
      }
      else
      {
        v42 = (uint64_t)v55;
        v35(v55, 1, 1, v14);
      }
      v43 = v54;
      sub_218C58610();
      sub_218C16554(v42, &qword_2550095D8);
LABEL_16:
      v44 = v60;
      v45 = sub_218C585F8();
      v46 = (void (*)(char *, uint64_t))v61[1];
      v46(v43, v14);
      v46(v44, v14);

      v47 = v57;
      v13 = v53;
      if ((v45 & 1) == 0)
        goto LABEL_4;
      if (!v56)
      {
        __break(1u);
        return;
      }
      v48 = *(void **)v24;
      v25 = *(void **)(v24 + 8);
      *(_QWORD *)v24 = v25;
      *(_QWORD *)(v24 + 8) = v48;
      v24 -= 8;
      if (v47 == ++v26)
      {
LABEL_4:
        a3 = v47 + 1;
        v24 = v52 + 8;
        if (a3 == v50)
          return;
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_218C22A74(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  char *v51;
  _QWORD *v52;
  void (*v53)(uint64_t, char *, uint64_t);
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v55;
  void *v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  char v64;
  void (*v65)(char *, uint64_t);
  unint64_t v66;
  void **v67;
  uint64_t v68;
  void **v69;
  void **v70;
  char **p_name;
  void **v72;
  void *v73;
  void *v74;
  char *v75;
  const char *v76;
  id v77;
  void *v78;
  char *v79;
  _QWORD *v80;
  void (*v81)(void **, char *, uint64_t);
  void (*v82)(void **, uint64_t, uint64_t, uint64_t);
  unsigned int (*v83)(void **, uint64_t, uint64_t);
  id v84;
  void *v85;
  char *v86;
  _QWORD *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;
  void **v91;
  void **v92;
  char v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  void **v96;
  uint64_t result;
  uint64_t v98;
  char *v99;
  char *v100;
  void **v101;
  char *v102;
  char *v103;
  void **v104;
  char *v105;
  void **v106;
  char *v107;
  void **v108;
  _QWORD *v109;
  void **v110;
  void **v111;
  void **v112;
  void **v113;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550095D8);
  v10 = MEMORY[0x24BDAC7A8](v8, v9);
  v100 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = (void **)((char *)&v98 - v14);
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v19 = (char *)&v98 - v18;
  MEMORY[0x24BDAC7A8](v17, v20);
  v103 = (char *)&v98 - v21;
  v22 = sub_218C5861C();
  v109 = *(_QWORD **)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22, v23);
  v99 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v104 = (void **)((char *)&v98 - v28);
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  v102 = (char *)&v98 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v105 = (char *)&v98 - v34;
  MEMORY[0x24BDAC7A8](v33, v35);
  v36 = a4;
  v106 = a3;
  v107 = (char *)&v98 - v37;
  v38 = (char *)a2 - (char *)a1;
  v39 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v39 = (char *)a2 - (char *)a1;
  v40 = v39 >> 3;
  v41 = (char *)a3 - (char *)a2;
  v42 = v41 / 8;
  v110 = a1;
  v113 = a1;
  v112 = v36;
  v108 = v36;
  if (v39 >> 3 >= v41 / 8)
  {
    if (v41 < -7)
      goto LABEL_66;
    v68 = (uint64_t)v100;
    if (v36 != a2 || &a2[v42] <= v36)
    {
      memmove(v36, a2, 8 * v42);
      v36 = v108;
    }
    v69 = &v36[v42];
    v111 = v69;
    v113 = a2;
    if (v41 < 8 || v110 >= a2)
    {
LABEL_65:
      sub_218C233A4((void **)&v113, (const void **)&v112, &v111);
      return 1;
    }
    v70 = v106 - 1;
    p_name = &SigX__classData.name;
    v72 = a2;
    v106 = v15;
    while (1)
    {
      v103 = (char *)v69;
      v73 = *(v69 - 1);
      v101 = v69 - 1;
      v74 = *--v72;
      v75 = v73;
      v107 = v74;
      v76 = p_name[202];
      v102 = v75;
      v77 = objc_msgSend(v75, v76);
      if (v77)
      {
        v78 = v77;
        v79 = v105;
        sub_218C58604();

        v80 = v109;
        v81 = (void (*)(void **, char *, uint64_t))v109[4];
        v81(v106, v79, v22);
        v82 = (void (*)(void **, uint64_t, uint64_t, uint64_t))v80[7];
        v82(v106, 0, 1, v22);
        v83 = (unsigned int (*)(void **, uint64_t, uint64_t))v80[6];
        v15 = v106;
        if (v83(v106, 1, v22) != 1)
        {
          v81(v104, (char *)v15, v22);
          goto LABEL_44;
        }
      }
      else
      {
        v82 = (void (*)(void **, uint64_t, uint64_t, uint64_t))v109[7];
        v82(v15, 1, 1, v22);
      }
      sub_218C58610();
      sub_218C16554((uint64_t)v15, &qword_2550095D8);
LABEL_44:
      v84 = objc_msgSend(v107, p_name[202]);
      if (v84)
      {
        v85 = v84;
        v86 = v105;
        sub_218C58604();

        v87 = v109;
        v88 = (void (*)(char *, char *, uint64_t))v109[4];
        v68 = (uint64_t)v100;
        v88(v100, v86, v22);
        v82((void **)v68, 0, 1, v22);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v87[6])(v68, 1, v22) != 1)
        {
          v89 = v99;
          v90 = v68;
          v88(v99, (char *)v68, v22);
          goto LABEL_49;
        }
      }
      else
      {
        v82((void **)v68, 1, 1, v22);
      }
      v89 = v99;
      sub_218C58610();
      v90 = v68;
      sub_218C16554(v68, &qword_2550095D8);
LABEL_49:
      v91 = v70 + 1;
      v92 = v104;
      v93 = sub_218C585F8();
      v94 = v89;
      v95 = (void (*)(char *, uint64_t))v109[1];
      v95(v94, v22);
      v95((char *)v92, v22);

      if ((v93 & 1) != 0)
      {
        v96 = v108;
        v15 = v106;
        v69 = (void **)v103;
        if (v91 != a2 || v70 >= a2)
          *v70 = *v72;
        v113 = v72;
      }
      else
      {
        v69 = v101;
        v111 = v101;
        v96 = v108;
        v15 = v106;
        if (v91 >= (void **)v103 && v70 < (void **)v103)
        {
          v68 = v90;
          if (v91 != (void **)v103)
            *v70 = *v101;
          v72 = a2;
          goto LABEL_61;
        }
        *v70 = *v101;
        v72 = a2;
      }
      v68 = v90;
LABEL_61:
      p_name = (char **)(&SigX__classData + 24);
      if (v69 > v96)
      {
        --v70;
        a2 = v72;
        if (v72 > v110)
          continue;
      }
      goto LABEL_65;
    }
  }
  if (v38 >= -7)
  {
    v43 = (uint64_t)v103;
    if (v36 != v110 || &v110[v40] <= v36)
    {
      memmove(v36, v110, 8 * v40);
      v36 = v108;
    }
    v104 = &v36[v40];
    v111 = v104;
    if (v38 >= 8 && a2 < v106)
    {
      while (1)
      {
        v44 = *a2;
        v108 = v36;
        v45 = *v36;
        v46 = v44;
        v47 = v45;
        v48 = v46;
        v49 = objc_msgSend(v46, sel_creationDate);
        if (v49)
        {
          v50 = v49;
          v51 = v105;
          sub_218C58604();

          v52 = v109;
          v53 = (void (*)(uint64_t, char *, uint64_t))v109[4];
          v53(v43, v51, v22);
          v54 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v52[7];
          v54(v43, 0, 1, v22);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52[6])(v43, 1, v22) != 1)
          {
            v53((uint64_t)v107, (char *)v43, v22);
            goto LABEL_15;
          }
        }
        else
        {
          v54 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v109[7];
          v54(v43, 1, 1, v22);
        }
        sub_218C58610();
        sub_218C16554(v43, &qword_2550095D8);
LABEL_15:
        v55 = objc_msgSend(v47, sel_creationDate);
        if (!v55)
        {
          v54((uint64_t)v19, 1, 1, v22);
LABEL_19:
          v62 = v102;
          sub_218C58610();
          sub_218C16554((uint64_t)v19, &qword_2550095D8);
          goto LABEL_20;
        }
        v56 = v55;
        v57 = v19;
        v58 = v105;
        sub_218C58604();

        v59 = v109;
        v60 = (void (*)(char *, char *, uint64_t))v109[4];
        v61 = v58;
        v19 = v57;
        v60(v57, v61, v22);
        v54((uint64_t)v57, 0, 1, v22);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v59[6])(v57, 1, v22) == 1)
          goto LABEL_19;
        v62 = v102;
        v60(v102, v19, v22);
LABEL_20:
        v63 = v107;
        v64 = sub_218C585F8();
        v65 = (void (*)(char *, uint64_t))v109[1];
        v65(v62, v22);
        v65(v63, v22);

        v43 = (uint64_t)v103;
        if ((v64 & 1) != 0)
        {
          v66 = (unint64_t)(a2 + 1);
          if (v110 < a2 || (unint64_t)v110 >= v66 || v110 != a2)
            *v110 = *a2;
          v36 = v108;
        }
        else
        {
          v67 = v108;
          if (v110 != v108)
            *v110 = *v108;
          v36 = v67 + 1;
          v112 = v36;
          v66 = (unint64_t)a2;
        }
        v113 = ++v110;
        if (v36 < v104)
        {
          a2 = (void **)v66;
          if (v66 < (unint64_t)v106)
            continue;
        }
        goto LABEL_65;
      }
    }
    goto LABEL_65;
  }
LABEL_66:
  result = sub_218C58AA8();
  __break(1u);
  return result;
}

char *sub_218C232AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550095E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_218C233A4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_218C58AA8();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_218C2344C(uint64_t a1)
{
  return sub_218C232AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_218C23460(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_218C58988();
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    sub_218C23770();
    result = (_QWORD *)sub_218C58910();
    v4 = v27;
    v8 = v28;
    v9 = v29;
    v10 = v30;
    v11 = v31;
    v24 = v7;
    if (v6)
      goto LABEL_3;
LABEL_36:
    v12 = 0;
LABEL_46:
    *v24 = v4;
    v24[1] = v8;
    v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (_QWORD *)v12;
  }
  v10 = 0;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v8 = a4 + 56;
  v9 = ~v20;
  v21 = -v20;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v11 = v22 & *(_QWORD *)(a4 + 56);
  v24 = result;
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0)
    goto LABEL_48;
  v12 = 0;
  v25 = (unint64_t)(v9 + 64) >> 6;
  v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!sub_218C589AC())
        goto LABEL_45;
      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v15 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_45;
      goto LABEL_8;
    }
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v16 >= v25)
    {
      v11 = 0;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v16);
    if (v17)
      goto LABEL_23;
    v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25)
        goto LABEL_42;
      v17 = *(_QWORD *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        v16 = v10 + 3;
        goto LABEL_23;
      }
      v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      v17 = *(_QWORD *)(v8 + 8 * v18);
      if (!v17)
      {
        v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          v11 = 0;
          v10 = v18;
          goto LABEL_45;
        }
        v17 = *(_QWORD *)(v8 + 8 * v16);
        if (!v17)
        {
          v19 = v10 + 6;
          while (v25 != v19)
          {
            v17 = *(_QWORD *)(v8 + 8 * v19++);
            if (v17)
            {
              v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          v11 = 0;
          v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    v16 = v18;
LABEL_23:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v15 = result;
    if (!result)
      goto LABEL_45;
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      v12 = a3;
LABEL_45:
      v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_218C23768()
{
  return swift_release();
}

unint64_t sub_218C23770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2550095D0;
  if (!qword_2550095D0)
  {
    v1 = sub_218C1E948(255, (unint64_t *)&qword_2550097A0);
    result = MEMORY[0x219A21BC8](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2550095D0);
  }
  return result;
}

void sub_218C237C8()
{
  JUMPOUT(0x219A2122CLL);
}

uint64_t sub_218C237DC()
{
  uint64_t v0;

  return sub_218C1F118(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_218C237F4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_218C2381C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_218C16478;
  return sub_218C1F8BC(a1, v4, v5, v6);
}

uint64_t sub_218C23888()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 32) = *(_QWORD *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t objectdestroy_25Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_218C238F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_218C16478;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t sub_218C23950()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = *(_QWORD *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_218C23988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_218C239D0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_218C239F4(void *a1, char a2)
{
  if (a2 != -1)
    sub_218C23A08(a1, a2);
}

void sub_218C23A08(void *a1, char a2)
{
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 4:

      break;
    default:
      return;
  }
}

uint64_t sub_218C23A3C(id *a1)
{
  return sub_218C20D70(a1) & 1;
}

uint64_t sub_218C23A58(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_218C58A78();
    swift_bridgeObjectRelease();
  }
  sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
  sub_218C23770();
  result = sub_218C58904();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_218C58A78();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x219A21184](i, a1);
        sub_218C28FCC(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_218C28FCC(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

id sub_218C23BB0(id result, char a2)
{
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 4:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void sub_218C23BF0()
{
  sub_218C2179C();
}

void sub_218C23C04()
{
  sub_218C2178C();
}

uint64_t sub_218C23C18()
{
  return sub_218C237DC();
}

unint64_t sub_218C23C2C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255009820);
  v2 = sub_218C58A9C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_218C25854(v6, (uint64_t)&v15, &qword_2550096A8);
    v7 = v15;
    v8 = v16;
    result = sub_218C1A5E0(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_218C1AB30(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_218C23D60(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009698);
  v2 = sub_218C58A9C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_218C25854(v6, (uint64_t)v15, &qword_2550096A0);
    result = sub_218C1A704((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_218C1AB30(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SHSignature.Slices.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009610);
  return sub_218C5885C();
}

uint64_t SHSignature.Slices.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009620);
  *v1 = v0;
  v1[1] = sub_218C23F38;
  return sub_218C588EC();
}

uint64_t sub_218C23F38()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C23F9C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_218C23FA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C23FB4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009620);
  *v2 = v1;
  v2[1] = sub_218C24024;
  return sub_218C588EC();
}

uint64_t sub_218C24024()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C24088()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C2409C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C240A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[8] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009620);
  *v5 = v4;
  v5[1] = sub_218C2411C;
  return sub_218C588EC();
}

uint64_t sub_218C2411C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C24180()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    sub_218C587E4();
  }
  return swift_task_switch();
}

uint64_t sub_218C241E8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C24200()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_getObjectType();
    sub_218C587E4();
  }
  return swift_task_switch();
}

uint64_t sub_218C24260()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 56);
  *(_QWORD *)(v0 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009570);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C242C8()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255009610);
  sub_218C5885C();
  return sub_218C25398(v0);
}

id SHSignature.slices(from:duration:stride:)@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  id result;
  uint64_t v30;
  double v31;
  double v32;
  id v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v44 = a3;
  v45 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009628);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_218C584FC();
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009630);
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)&v20 = MEMORY[0x24BDAC7A8](v17, v19).n128_u64[0];
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5 <= 0.0)
  {
    sub_218C584F0();
    __swift_instantiateConcreteTypeFromMangledName(qword_255009638);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_218C5D010;
    v48 = sub_218C58784();
    v49 = v27;
    v28 = MEMORY[0x24BEE0D00];
    sub_218C589DC();
    *(_QWORD *)(inited + 96) = v28;
    *(_QWORD *)(inited + 72) = 0xD000000000000022;
    v26 = "Duration must be greater than zero";
    goto LABEL_14;
  }
  if (a4 < 0.0)
  {
    sub_218C584F0();
    __swift_instantiateConcreteTypeFromMangledName(qword_255009638);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_218C5D010;
    v48 = sub_218C58784();
    v49 = v24;
    v25 = MEMORY[0x24BEE0D00];
    sub_218C589DC();
    *(_QWORD *)(inited + 96) = v25;
    *(_QWORD *)(inited + 72) = 0xD00000000000002BLL;
    v26 = "Start must be greater than or equal to zero";
LABEL_14:
    *(_QWORD *)(inited + 80) = (unint64_t)(v26 - 32) | 0x8000000000000000;
    sub_218C23D60(inited);
    v43 = sub_218C585D4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v12, 1, 1, v43);
    sub_218C58508();
    swift_bridgeObjectRelease();
    sub_218C2485C((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v47);
    return (id)swift_willThrow();
  }
  result = objc_msgSend(v5, sel_duration, v20, v44);
  if (v31 <= a4)
  {
    sub_218C584E4();
    __swift_instantiateConcreteTypeFromMangledName(qword_255009638);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_218C5D010;
    v48 = sub_218C58784();
    v49 = v38;
    v39 = MEMORY[0x24BEE0D00];
    sub_218C589DC();
    *(_QWORD *)(inited + 96) = v39;
    *(_QWORD *)(inited + 72) = 0xD000000000000033;
    v26 = "Start must be smaller than the signature's duration";
    goto LABEL_14;
  }
  if ((a2 & 1) == 0)
  {
    v32 = v45;
    if (v45 <= 0.0)
    {
      sub_218C584F0();
      __swift_instantiateConcreteTypeFromMangledName(qword_255009638);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_218C5D010;
      v48 = sub_218C58784();
      v49 = v41;
      v42 = MEMORY[0x24BEE0D00];
      sub_218C589DC();
      *(_QWORD *)(inited + 96) = v42;
      *(_QWORD *)(inited + 72) = 0xD000000000000041;
      v26 = "Stride must be greater than zero and less than the total duration";
      goto LABEL_14;
    }
    v33 = objc_msgSend(v5, sel_duration);
    if (v35 < v32)
    {
      sub_218C584E4();
      __swift_instantiateConcreteTypeFromMangledName(qword_255009638);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_218C5D010;
      v48 = sub_218C58784();
      v49 = v36;
      v37 = MEMORY[0x24BEE0D00];
      sub_218C589DC();
      *(_QWORD *)(inited + 96) = v37;
      *(_QWORD *)(inited + 72) = 0xD00000000000004DLL;
      v26 = "Stride must be greater than or equal to zero and less than the total duration";
      goto LABEL_14;
    }
    MEMORY[0x24BDAC7A8](v33, v34);
    *(&v44 - 4) = (uint64_t)v5;
    *((double *)&v44 - 3) = a4;
    *((double *)&v44 - 2) = a5;
    *((double *)&v44 - 1) = v45;
    sub_218C249C0();
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v22, *MEMORY[0x24BEE6CA0], v17);
    return (id)sub_218C588F8();
  }
  if (a4 + a5 >= a4)
  {
    v40 = MEMORY[0x24BDAC7A8](result, v30).n128_u64[0];
    *(&v44 - 4) = (uint64_t)v5;
    *((double *)&v44 - 3) = a4;
    *(&v44 - 2) = v40;
    sub_218C249C0();
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v22, *MEMORY[0x24BEE6CA0], v17);
    return (id)sub_218C588F8();
  }
  __break(1u);
  return result;
}

uint64_t sub_218C2485C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009628);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_218C2489C(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009688);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_218C249FC(a1, a2);
  v9 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009690);
  sub_218C588C8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v10 = 0;
  sub_218C588D4();

}

void sub_218C249B4()
{
  uint64_t v0;

  sub_218C2489C(*(double *)(v0 + 24), *(double *)(v0 + 32));
}

unint64_t sub_218C249C0()
{
  unint64_t result;

  result = qword_255009578;
  if (!qword_255009578)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255009578);
  }
  return result;
}

id sub_218C249FC(double a1, double a2)
{
  void *v2;
  double v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v19[2];

  v19[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = a2 - a1;
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v2, sel_dataRepresentation);
  v7 = sub_218C585EC();
  v9 = v8;

  v10 = (void *)sub_218C585E0();
  sub_218C1B200(v7, v9);
  v19[0] = 0;
  v11 = objc_msgSend(v5, sel_cropSignature_atPosition_withDuration_error_, v10, v19, a1, v4);

  v12 = v19[0];
  if (v11)
  {
    v13 = sub_218C585EC();
    v15 = v14;

    v16 = objc_allocWithZone((Class)SHSignature);
    v11 = sub_218C25754();
    sub_218C1B200(v13, v15);
  }
  else
  {
    v17 = v12;
    sub_218C585C8();

    swift_willThrow();
  }
  return v11;
}

uint64_t sub_218C24B74(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  id aBlock[7];

  v47 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009688);
  MEMORY[0x24BDAC7A8](v9, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009690);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11, v14);
  v46 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v17 = MEMORY[0x24BDAC7A8](v15, v16).n128_u64[0];
  v19 = (char *)&v45 - v18;
  v20 = objc_msgSend(a2, sel_dataRepresentation, v17);
  v21 = sub_218C585EC();
  v48 = v22;

  if (a3 > 0.0)
  {
    objc_msgSend(a2, sel_duration);
    if (v23 < a3)
      __break(1u);
    v24 = sub_218C249FC(a3, v23);
    v25 = objc_msgSend(v24, sel_dataRepresentation);

    v26 = sub_218C585EC();
    v28 = v27;
    sub_218C1B200(v21, v48);

    v21 = v26;
    v48 = v28;
  }
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v29(v19, v47, v11);
  v30 = v46;
  v29(v46, (uint64_t)v19, v11);
  v31 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v32 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v32 + v31, v19, v11);
  v33 = (void *)objc_opt_self();
  v34 = v48;
  v35 = (void *)sub_218C585E0();
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = sub_218C25528;
  v36[3] = v32;
  aBlock[4] = sub_218C256A8;
  aBlock[5] = v36;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_218C256B0;
  aBlock[3] = &block_descriptor_2;
  v37 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(v33) = objc_msgSend(v33, sel_cropSignature_toDuration_stride_error_callback_, v35, aBlock, v37, a4, a5);
  _Block_release(v37);

  v38 = aBlock[0];
  if (!(_DWORD)v33)
  {
    v39 = v38;
    v40 = (void *)sub_218C585C8();

    swift_willThrow();
    v41 = (void *)objc_opt_self();
    v42 = (void *)sub_218C585BC();
    v43 = objc_msgSend(v41, sel_errorWithCode_underlyingError_, 200, v42);

    aBlock[0] = v43;
    sub_218C588D4();

  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v30, v11);
  return sub_218C1B200(v21, v34);
}

uint64_t sub_218C24F60(uint64_t a1)
{
  uint64_t v1;

  return sub_218C24B74(a1, *(void **)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_218C24F70()
{
  return MEMORY[0x24BEE3F20];
}

unint64_t sub_218C24F80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255009650;
  if (!qword_255009650)
  {
    v1 = type metadata accessor for SHSignature.Slices.Iterator(255);
    result = MEMORY[0x219A21BC8](&protocol conformance descriptor for SHSignature.Slices.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_255009650);
  }
  return result;
}

uint64_t type metadata accessor for SHSignature.Slices.Iterator(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_255009670);
}

uint64_t _s6SlicesVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009610);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s6SlicesVwxx(uint64_t a1, uint64_t a2)
{
  return sub_218C250FC(a1, a2, &qword_255009610);
}

uint64_t _s6SlicesVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C2513C(a1, a2, a3, &qword_255009610);
}

uint64_t _s6SlicesVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C2518C(a1, a2, a3, &qword_255009610);
}

uint64_t _s6SlicesVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C251DC(a1, a2, a3, &qword_255009610);
}

uint64_t _s6SlicesVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C2522C(a1, a2, a3, &qword_255009610);
}

uint64_t _s6SlicesVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C25064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_255009610);
}

uint64_t _s6SlicesVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C2507C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_255009610);
}

uint64_t type metadata accessor for SHSignature.Slices(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_255009658);
}

void sub_218C2509C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_218C252B4(a1, a2, a3, &qword_255009668, MEMORY[0x24BEE6D28]);
}

uint64_t _s6SlicesV8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009620);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s6SlicesV8IteratorVwxx(uint64_t a1, uint64_t a2)
{
  return sub_218C250FC(a1, a2, &qword_255009620);
}

uint64_t sub_218C250FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t _s6SlicesV8IteratorVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C2513C(a1, a2, a3, &qword_255009620);
}

uint64_t sub_218C2513C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t _s6SlicesV8IteratorVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C2518C(a1, a2, a3, &qword_255009620);
}

uint64_t sub_218C2518C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t _s6SlicesV8IteratorVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C251DC(a1, a2, a3, &qword_255009620);
}

uint64_t sub_218C251DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t _s6SlicesV8IteratorVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_218C2522C(a1, a2, a3, &qword_255009620);
}

uint64_t sub_218C2522C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t _s6SlicesV8IteratorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C2527C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_255009620);
}

uint64_t _s6SlicesV8IteratorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218C25294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_255009620);
}

void sub_218C252A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_218C252B4(a1, a2, a3, &qword_255009680, MEMORY[0x24BEE6D08]);
}

void sub_218C252B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t, _QWORD))
{
  unint64_t v5;

  sub_218C25324(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

void sub_218C25324(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, _QWORD))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_218C249C0();
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255009570);
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_218C25398(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SHSignature.Slices(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_218C253D4(void *a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t result;
  id v11;
  uint64_t v12;
  void *v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009688);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x100) != 0)
  {
    v13 = a1;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_255009690);
  }
  else
  {
    v13 = a1;
    v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_255009690);
    sub_218C588C8();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((a2 & 1) == 0)
      return result;
    v13 = 0;
  }
  return sub_218C588D4();
}

uint64_t sub_218C254C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009690);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_218C25528(void *a1, __int16 a2)
{
  __int16 v3;

  v3 = a2 & 0x1FF;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009690);
  return sub_218C253D4(a1, v3);
}

void sub_218C25580(uint64_t a1, unint64_t a2, char a3, uint64_t a4, void (*a5)(id, _QWORD))
{
  id v9;
  id v10;
  id v11;

  sub_218C588B0();
  v9 = objc_allocWithZone((Class)SHSignature);
  sub_218C25810(a1, a2);
  v10 = sub_218C25754();
  sub_218C1B200(a1, a2);
  v11 = v10;
  a5(v10, a3 & 1);

}

uint64_t sub_218C25684()
{
  swift_release();
  return swift_deallocObject();
}

void sub_218C256A8(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  sub_218C25580(a1, a2, a3, a4, *(void (**)(id, _QWORD))(v4 + 16));
}

uint64_t sub_218C256B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, unint64_t, uint64_t, uint64_t);
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v7 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v8 = a2;
  v9 = sub_218C585EC();
  v11 = v10;

  v7(v9, v11, a3, a4);
  sub_218C1B200(v9, v11);
  return swift_release();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

id sub_218C25754()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)sub_218C585E0();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithDataRepresentation_error_, v1, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    sub_218C585C8();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_218C25810(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_218C25854(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_218C25898()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[12] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v1[13] = v2;
  v1[14] = *(_QWORD *)(v2 - 8);
  v1[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_218C2593C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_syncDelegate);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  *(_QWORD *)(v0 + 152) = v2;
  *(_QWORD *)(v0 + 160) = v4;
  v5 = v2 + v4;
  swift_beginAccess();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(_QWORD *)(v0 + 168) = v6;
  if (v6(v5, 1, v1))
  {
    v7 = *(_QWORD *)(v0 + 144);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v5, v12);
    *(_QWORD *)(v0 + 72) = 1;
    *(_BYTE *)(v0 + 80) = 0;
    sub_218C58844();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 0, 1, v13);
  }
  sub_218C16554(*(_QWORD *)(v0 + 144), &qword_255009788);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550097F0);
  *v14 = v0;
  v14[1] = sub_218C25ADC;
  return sub_218C58B08();
}

uint64_t sub_218C25ADC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C25B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 152) + *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 168))(v2, 1, v1))
  {
    v4 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v2, v1);
    *(_QWORD *)(v0 + 56) = v3;
    *(_BYTE *)(v0 + 64) = 1;
    sub_218C58844();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  }
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 152) + *(_QWORD *)(v0 + 160);
  sub_218C16554(*(_QWORD *)(v0 + 136), &qword_255009788);
  v13 = 1;
  if (!v10(v12, 1, v11))
  {
    v14 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 16))(v14, *(_QWORD *)(v0 + 152) + *(_QWORD *)(v0 + 160), v15);
    *(_QWORD *)(v0 + 40) = 0;
    *(_BYTE *)(v0 + 48) = 0;
    sub_218C58844();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    v13 = 0;
  }
  v17 = *(_QWORD *)(v0 + 128);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, v13, 1, v18);
  sub_218C16554(v17, &qword_255009788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C25D3C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C25D94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t sub_218C25DAC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v1 = *(_QWORD *)(v0 + 32);
  v22 = MEMORY[0x24BEE4AF8];
  v2 = v1 >> 62;
  if (!(v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    v11 = MEMORY[0x24BEE4AF8] >> 62;
    if (!(MEMORY[0x24BEE4AF8] >> 62))
      goto LABEL_14;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  result = sub_218C58A78();
  v3 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v5 = 0;
  v6 = *(_QWORD *)(v0 + 32) + 32;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x219A21184](v5, *(_QWORD *)(v0 + 32));
    else
      v7 = *(id *)(v6 + 8 * v5);
    v8 = v7;
    v9 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibraryTrack), sel_initWithMediaItem_, v7);

    if (v9)
    {
      MEMORY[0x219A20F08]();
      if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_218C587C0();
      sub_218C587D8();
      sub_218C587B4();
    }
    ++v5;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  v10 = v22;
  v2 = v1 >> 62;
  v11 = v22 >> 62;
  if (!(v22 >> 62))
  {
LABEL_14:
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      goto LABEL_15;
    goto LABEL_20;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  v12 = sub_218C58A78();
  swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_15:
    if (v12 != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_16:
      swift_bridgeObjectRelease();
      type metadata accessor for SHError(0);
      *(_QWORD *)(v0 + 24) = 400;
      sub_218C28AF4(MEMORY[0x24BEE4AF8]);
      sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
      sub_218C585B0();
      swift_willThrow();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_21;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  v13 = sub_218C58A78();
  swift_bridgeObjectRelease();
  if (v12 != v13)
    goto LABEL_16;
LABEL_21:
  v14 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibrarySnapshot), sel_init);
  *(_QWORD *)(v0 + 48) = v14;
  if (v11)
  {
    swift_bridgeObjectRetain();
    result = sub_218C58A78();
    v15 = result;
    if (!result)
    {
LABEL_31:
      v19 = *(_QWORD *)(v0 + 40);
      swift_bridgeObjectRelease_n();
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v20;
      v20[2] = v19;
      v20[3] = v14;
      v20[4] = CFSTR("UserAction");
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 64) = v21;
      *v21 = v0;
      v21[1] = sub_218C261A4;
      return sub_218C58B08();
    }
  }
  else
  {
    v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v15)
      goto LABEL_31;
  }
  if (v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v17 = (id)MEMORY[0x219A21184](i, v10);
      else
        v17 = *(id *)(v10 + 8 * i + 32);
      v18 = v17;
      objc_msgSend(v14, sel_addItem_, v17);

    }
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_218C261A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C26210()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C26244()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C2627C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t sub_218C26294()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + 32);
  v29 = MEMORY[0x24BEE4AF8];
  v2 = v1 >> 62;
  if (!(v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    v11 = MEMORY[0x24BEE4AF8] >> 62;
    if (!(MEMORY[0x24BEE4AF8] >> 62))
      goto LABEL_14;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  result = sub_218C58A78();
  v3 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v5 = 0;
  v6 = *(_QWORD *)(v0 + 32) + 32;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x219A21184](v5, *(_QWORD *)(v0 + 32));
    else
      v7 = *(id *)(v6 + 8 * v5);
    v8 = v7;
    v9 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibraryTrack), sel_initWithMediaItem_, v7);

    if (v9)
    {
      MEMORY[0x219A20F08]();
      if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_218C587C0();
      sub_218C587D8();
      sub_218C587B4();
    }
    ++v5;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  v10 = v29;
  v2 = v1 >> 62;
  v11 = v29 >> 62;
  if (!(v29 >> 62))
  {
LABEL_14:
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      goto LABEL_15;
    goto LABEL_20;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  v12 = sub_218C58A78();
  swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_15:
    if (v12 != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_16:
      swift_bridgeObjectRelease();
      type metadata accessor for SHError(0);
      *(_QWORD *)(v0 + 24) = 400;
      sub_218C28AF4(MEMORY[0x24BEE4AF8]);
      sub_218C15874(&qword_2550091E8, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_218C5D710);
      sub_218C585B0();
      swift_willThrow();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_21;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  v13 = sub_218C58A78();
  swift_bridgeObjectRelease();
  if (v12 != v13)
    goto LABEL_16;
LABEL_21:
  v14 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibrarySnapshot), sel_init);
  *(_QWORD *)(v0 + 48) = v14;
  if (v11)
  {
    swift_bridgeObjectRetain();
    result = sub_218C58A78();
    v15 = result;
    if (!result)
    {
LABEL_31:
      v20 = *(_QWORD *)(v0 + 32);
      v19 = *(_QWORD *)(v0 + 40);
      swift_bridgeObjectRelease_n();
      v21 = *(_QWORD *)(v19 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_syncDelegate);
      v22 = *(os_unfair_lock_s **)(v21 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_lock);
      v23 = swift_task_alloc();
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = v20;
      v24 = swift_task_alloc();
      *(_QWORD *)(v24 + 16) = sub_218C2CD14;
      *(_QWORD *)(v24 + 24) = v23;
      v22 += 4;
      os_unfair_lock_lock(v22);
      sub_218C19240(v25, *(uint64_t (**)(void))(v24 + 16));
      os_unfair_lock_unlock(v22);
      swift_task_dealloc();
      v26 = *(_QWORD *)(v0 + 40);
      swift_task_dealloc();
      v27 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v27;
      v27[2] = v26;
      v27[3] = v14;
      v27[4] = CFSTR("UserAction");
      v28 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 64) = v28;
      *v28 = v0;
      v28[1] = sub_218C261A4;
      return sub_218C58B08();
    }
  }
  else
  {
    v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v15)
      goto LABEL_31;
  }
  if (v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v17 = (id)MEMORY[0x219A21184](i, v10);
      else
        v17 = *(id *)(v10 + 8 * i + 32);
      v18 = v17;
      objc_msgSend(v14, sel_removeItem_, v17);

    }
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_218C26724(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_218C58988();
    sub_218C5870C();
    sub_218C15874(&qword_2550097D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDB9B60], MEMORY[0x24BDB9B70]);
    result = sub_218C58910();
    v1 = v18;
    v17 = v19;
    v3 = v20;
    v4 = v21;
    v5 = v22;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v4 << 6);
      v12 = v4;
      goto LABEL_29;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v13 >= v9)
      return sub_218C23768();
    v14 = *(_QWORD *)(v17 + 8 * v13);
    v12 = v4 + 1;
    if (!v14)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v9)
        return sub_218C23768();
      v14 = *(_QWORD *)(v17 + 8 * v12);
      if (!v14)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v9)
          return sub_218C23768();
        v14 = *(_QWORD *)(v17 + 8 * v12);
        if (!v14)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v9)
            return sub_218C23768();
          v14 = *(_QWORD *)(v17 + 8 * v12);
          if (!v14)
          {
            v12 = v4 + 5;
            if (v4 + 5 >= v9)
              return sub_218C23768();
            v14 = *(_QWORD *)(v17 + 8 * v12);
            if (!v14)
            {
              v15 = v4 + 6;
              while (v9 != v15)
              {
                v14 = *(_QWORD *)(v17 + 8 * v15++);
                if (v14)
                {
                  v12 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return sub_218C23768();
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_29:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16)
      return sub_218C23768();
    while (1)
    {
      sub_218C58700();
      result = swift_release();
      v4 = v12;
      v5 = v10;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_218C589AC())
      {
        sub_218C5870C();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        v12 = v4;
        v10 = v5;
        if (v23)
          continue;
      }
      return sub_218C23768();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_218C269C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_subscriptions);
  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  sub_218C26724(v2);
  swift_bridgeObjectRelease();
  *v1 = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRelease();
  v3 = v0 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_asyncStream;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_218C26AA4()
{
  return type metadata accessor for SHAsyncLibrary(0);
}

uint64_t type metadata accessor for SHAsyncLibrary(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_2550096D0);
}

void sub_218C26AC0()
{
  unint64_t v0;

  sub_218C26B54();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_218C26B54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2550096E0)
  {
    v0 = sub_218C5888C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2550096E0);
  }
}

uint64_t sub_218C26BA8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  void *ObjCClassFromMetadata;
  id v34;
  id v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD v41[3];
  id v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;

  v2 = v1;
  v47 = sub_218C58928();
  v5 = MEMORY[0x24BDAC7A8](v47, v4);
  v44 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5, v7);
  v41[2] = (char *)v41 - v9;
  MEMORY[0x24BDAC7A8](v8, v10);
  v41[1] = (char *)v41 - v11;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009838);
  v48 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46, v12);
  v43 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009840);
  v15 = *(_QWORD *)(v14 - 8);
  v49 = v14;
  v50 = v15;
  MEMORY[0x24BDAC7A8](v14, v16);
  v45 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009848);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18, v20);
  v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097D0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23, v25);
  v27 = (char *)v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_syncDelegate;
  v29 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SHAsyncLibrary.SHAsyncLibraryDelegate(0)), sel_init);
  *(_QWORD *)(v2 + v28) = v29;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_subscriptions) = MEMORY[0x24BEE4B08];
  objc_msgSend(a1, sel_setDelegate_, v29);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009850);
  v30 = swift_allocObject();
  *(_DWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_syncLock) = v30;
  *(_QWORD *)(v30 + 16) = a1;
  v51 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v22, *MEMORY[0x24BEE6A10], v18);
  v42 = a1;
  v31 = v29;
  sub_218C58898();

  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v2 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_asyncStream, v27, v23);
  v32 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  sub_218C58934();

  sub_218C1E948(0, &qword_255009858);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v34 = objc_msgSend(ObjCClassFromMetadata, sel_defaultCenter);
  sub_218C58934();

  v35 = objc_msgSend(ObjCClassFromMetadata, sel_defaultCenter);
  sub_218C58934();

  sub_218C15874(&qword_255009860, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0078], MEMORY[0x24BDD0070]);
  v36 = v43;
  sub_218C586E8();
  type metadata accessor for SHMediaLibrarySyncStartCondition(0);
  sub_218C2CD84(&qword_255009868, &qword_255009838, MEMORY[0x24BDB9820]);
  v38 = v45;
  v37 = v46;
  sub_218C58718();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v37);
  sub_218C2CD84((unint64_t *)&unk_255009870, &qword_255009840, MEMORY[0x24BDB96C0]);
  swift_retain();
  v39 = v49;
  sub_218C58724();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v39);
  swift_beginAccess();
  sub_218C586F4();
  swift_endAccess();
  swift_release();

  return v2;
}

void sub_218C27084(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_lock)
                          + 16);
  os_unfair_lock_lock(v2);
  sub_218C19240(v3, sub_218C2CE7C);
  os_unfair_lock_unlock(v2);
}

__CFString *sub_218C270E4@<X0>(__CFString **a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString **v19;
  __CFString *result;
  char v21;

  v2 = (void *)sub_218C58544();
  v3 = sub_218C58784();
  v5 = v4;
  if (v3 == sub_218C58784() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v8 = sub_218C58AFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
LABEL_15:

    v19 = SHMediaLibrarySyncStartConditionUserAction;
    goto LABEL_18;
  }
  v9 = sub_218C58784();
  v11 = v10;
  if (v9 == sub_218C58784() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  v14 = sub_218C58AFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_17:

    v19 = SHMediaLibrarySyncStartConditionRemotePush;
    goto LABEL_18;
  }
  v15 = sub_218C58784();
  v17 = v16;
  if (v15 == sub_218C58784() && v17 == v18)
  {

    swift_bridgeObjectRelease_n();
    v19 = SHMediaLibrarySyncStartConditionInitialFetch;
  }
  else
  {
    v21 = sub_218C58AFC();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = SHMediaLibrarySyncStartConditionUserAction;
    if ((v21 & 1) != 0)
      v19 = SHMediaLibrarySyncStartConditionInitialFetch;
  }
LABEL_18:
  result = *v19;
  *a1 = result;
  return result;
}

uint64_t sub_218C272B8(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009188);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = sub_218C5882C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = swift_allocObject();
  swift_weakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v8;
  v9[5] = v6;
  v10 = v6;
  sub_218C27690((uint64_t)v5, (uint64_t)&unk_255009888, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_218C273A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch();
}

uint64_t sub_218C273BC()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_218C27444;
  return sub_218C25898();
}

uint64_t sub_218C27444()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C274A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = v0[6];
  v1 = v0[7];
  v3 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibrarySnapshot), sel_init);
  v0[10] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[11] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[12] = v5;
  *v5 = v0;
  v5[1] = sub_218C2756C;
  return sub_218C58B08();
}

uint64_t sub_218C2756C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_218C275D8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C27618()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 80);
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C2765C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_218C27690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_218C5882C();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_218C58820();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_218C16554(a1, &qword_255009188);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_218C587E4();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_218C277C4(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  void **v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_syncLock);
  v4 = (void **)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_218C27820(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_218C27820(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097F8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4, v7);
  v8 = *a1;
  v9 = objc_msgSend(objc_allocWithZone((Class)SHMediaLibraryQueryParameters), sel_initWithResultsLimit_filterOptions_ascending_shouldUpdate_, 0x7FFFFFFFFFFFFFFFLL, 1, 0, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_218C2CCBC;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_218C27B2C;
  aBlock[3] = &block_descriptor_11;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, sel__queryLibraryWithParameters_completionHandler_, v9, v12);
  _Block_release(v12);

}

uint64_t sub_218C27998(unint64_t a1, int a2, id a3)
{
  id v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  if (a3)
  {
    v3 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550097F8);
    return sub_218C587F0();
  }
  if (!a1)
    goto LABEL_13;
  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_6;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550097F8);
    return sub_218C587FC();
  }
  swift_bridgeObjectRetain();
  v6 = sub_218C58A78();
  if (!v6)
    goto LABEL_12;
LABEL_6:
  result = sub_218C58A3C();
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x219A21184](v7, a1);
      else
        v8 = *(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      ++v7;
      v10 = objc_msgSend(v8, sel_mediaItemValue);

      sub_218C58A24();
      sub_218C58A48();
      sub_218C58A54();
      sub_218C58A30();
    }
    while (v6 != v7);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_218C27B2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void *);
  id v8;

  v6 = a2;
  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_218C1E948(0, &qword_255009808);
    v6 = sub_218C587A8();
  }
  if (a3)
  {
    sub_218C1E948(0, &qword_255009800);
    a3 = sub_218C587A8();
  }
  swift_retain();
  v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_218C27BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097E0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8, v11);
  v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC9ShazamKit14SHAsyncLibrary_syncLock);
  v13 = (os_unfair_lock_s *)(v12 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  v14 = *(void **)(v12 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_218C2CBF4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_218C27DC0;
  aBlock[3] = &block_descriptor_3;
  v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v14, sel__synchronizeSnapshot_startCondition_completionHandler_, a3, a4, v17);
  _Block_release(v17);
  os_unfair_lock_unlock(v13);
}

uint64_t sub_218C27D60(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550097E0);
    return sub_218C587F0();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2550097E0);
    return sub_218C587FC();
  }
}

void sub_218C27DC0(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_218C27E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097C8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v10 = a1 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  sub_218C2CE94((uint64_t)v7, v10);
  return swift_endAccess();
}

uint64_t sub_218C27F00(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = sub_218C58658();
  v4 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v39 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_inflightItems;
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_inflightItems);
  swift_bridgeObjectRetain();
  v18 = swift_bridgeObjectRetain();
  v19 = sub_218C2B024(v18, v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v16) = v19;
  swift_bridgeObjectRelease();
  v20 = a1 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v20, 1, v8))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v15, 1, 1, v21);
    return sub_218C16554((uint64_t)v15, &qword_255009788);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v39, v20, v8);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = sub_218C58A78();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v38 = v9;
  v23 = MEMORY[0x24BEE4AF8];
  if (!v22)
  {
LABEL_15:
    v41 = v23;
    v42 = 3;
    v33 = v39;
    sub_218C58844();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v8);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 0, 1, v34);
    return sub_218C16554((uint64_t)v15, &qword_255009788);
  }
  v41 = MEMORY[0x24BEE4AF8];
  result = sub_218C15C9C(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000) == 0)
  {
    v40 = v22;
    v36 = v8;
    v37 = v15;
    v25 = 0;
    v23 = v41;
    v26 = a2 & 0xC000000000000001;
    v27 = a2;
    do
    {
      if (v26)
        v28 = (id)MEMORY[0x219A21184](v25, a2);
      else
        v28 = *(id *)(a2 + 8 * v25 + 32);
      v29 = v28;
      v30 = objc_msgSend(v28, sel_identifier);
      sub_218C5864C();

      v41 = v23;
      v32 = *(_QWORD *)(v23 + 16);
      v31 = *(_QWORD *)(v23 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_218C15C9C(v31 > 1, v32 + 1, 1);
        v23 = v41;
      }
      ++v25;
      *(_QWORD *)(v23 + 16) = v32 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v23+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v32, v7, v43);
      a2 = v27;
    }
    while (v40 != v25);
    v8 = v36;
    v15 = v37;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_218C28280(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_inflightItems;
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  v15 = sub_218C2B5D8(v14, a2);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a1 + v13);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v13) = sub_218C28494(v15, v16);
  swift_bridgeObjectRelease();
  v17 = a1 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4))
  {
    swift_release();
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v17, v4);
    v19 = sub_218C215B4(v15);
    swift_release();
    v22[1] = v19;
    v23 = 2;
    sub_218C58844();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 0, 1, v20);
  }
  return sub_218C16554((uint64_t)v12, &qword_255009788);
}

uint64_t sub_218C28494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = sub_218C58994();
    if ((v2 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_9:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_218C2A504(a1, v2);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0)
    goto LABEL_9;
LABEL_3:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > sub_218C58994() / 8)
  {
    swift_bridgeObjectRetain();
    v6 = sub_218C58994();
    v7 = sub_218C29268(v5, v6);
    swift_bridgeObjectRelease();
    v2 = v7;
    return sub_218C2A504(a1, v2);
  }
LABEL_11:
  sub_218C2A228(a1);
  return v2;
}

uint64_t sub_218C28588(uint64_t a1)
{
  uint64_t v2;

  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && sub_218C58A78())
    sub_218C2B924(MEMORY[0x24BEE4AF8]);
  else
    v2 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(a1 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_inflightItems) = v2;
  return swift_bridgeObjectRelease();
}

void sub_218C286F8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  id v6;

  swift_unknownObjectRetain();
  v6 = a1;
  a4();
  swift_unknownObjectRelease();

}

uint64_t sub_218C28858()
{
  return type metadata accessor for SHAsyncLibrary.SHAsyncLibraryDelegate(0);
}

uint64_t type metadata accessor for SHAsyncLibrary.SHAsyncLibraryDelegate(uint64_t a1)
{
  return sub_218C19394(a1, (uint64_t *)&unk_255009760);
}

void sub_218C28874()
{
  unint64_t v0;

  sub_218C288FC();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_218C288FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255009770)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255009778);
    v0 = sub_218C58964();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255009770);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SHAsyncLibrary.Updates(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_218C23BB0(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for SHAsyncLibrary.Updates(uint64_t a1)
{
  sub_218C23A08(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for SHAsyncLibrary.Updates(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_218C23BB0(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_218C23A08(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for SHAsyncLibrary.Updates(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_218C23A08(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SHAsyncLibrary.Updates(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SHAsyncLibrary.Updates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_218C28AD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_218C28ADC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SHAsyncLibrary.Updates()
{
  return &type metadata for SHAsyncLibrary.Updates;
}

unint64_t sub_218C28AF4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255009820);
  v2 = sub_218C58A9C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_218C2CD2C(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_218C28C1C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_218C1AB30(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_218C28C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_218C58B50();
  sub_218C58790();
  v4 = sub_218C58B68();
  return sub_218C28C80(a1, a2, v4);
}

unint64_t sub_218C28C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_218C58AFC() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_218C58AFC() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_218C58AFC() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_218C28DC4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550091C0);
  v10 = *(_QWORD *)(sub_218C58658() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_218C58A60();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_218C58658() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_218C2BDFC(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_218C28FCC(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_218C589A0();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_218C58994();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_218C29268(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_218C2945C();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_218C296F8((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_218C58940();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_218C5894C();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_218C5894C();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_218C29778((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_218C29268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255009798);
    v2 = sub_218C58A00();
    v14 = v2;
    sub_218C58988();
    if (sub_218C589AC())
    {
      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_218C2945C();
          v2 = v14;
        }
        result = sub_218C58940();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_218C589AC());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t sub_218C2945C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009798);
  v3 = sub_218C589F4();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_218C58940();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_218C296F8(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_218C58940();
  result = sub_218C5897C();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_218C29778(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_218C2945C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_218C298FC();
      goto LABEL_14;
    }
    sub_218C29AA4();
  }
  v8 = *v3;
  v9 = sub_218C58940();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_218C5894C();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_218C58B14();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_218C5894C();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

id sub_218C298FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009798);
  v2 = *v0;
  v3 = sub_218C589E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_218C29AA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009798);
  v3 = sub_218C589F4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_218C58940();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_218C29D1C(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    v5 = sub_218C589B8();

    if ((v5 & 1) != 0)
    {
      v6 = sub_218C29EF0();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_218C58940();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_12;
  sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
  v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
  v11 = sub_218C5894C();

  if ((v11 & 1) == 0)
  {
    v12 = ~v8;
    do
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_12;
      v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
      v14 = sub_218C5894C();

    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_218C298FC();
    v16 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
  sub_218C2A088(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_218C29EF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_218C58994();
  v3 = swift_unknownObjectRetain();
  v4 = sub_218C29268(v3, v2);
  v15 = v4;
  swift_retain();
  v5 = sub_218C58940();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
    v9 = sub_218C5894C();

    if ((v9 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7);
      sub_218C2A088(v7);
      if ((sub_218C5894C() & 1) != 0)
      {
        *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v10 = ~v6;
      while (1)
      {
        v7 = (v7 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          break;
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
        v12 = sub_218C5894C();

        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_218C2A088(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_218C58970();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v11 = sub_218C58940();

        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_218C2A228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if ((*(_QWORD *)v1 & 0xC000000000000001) != 0)
  {
    if (!sub_218C58994())
      return;
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      sub_218C58988();
      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      sub_218C23770();
      sub_218C58910();
      a1 = v20;
      v18 = v21;
      v3 = v22;
      v4 = v23;
      v5 = v24;
    }
    else
    {
      v6 = -1 << *(_BYTE *)(a1 + 32);
      v18 = a1 + 56;
      v3 = ~v6;
      v7 = -v6;
      if (v7 < 64)
        v8 = ~(-1 << v7);
      else
        v8 = -1;
      v5 = v8 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v4 = 0;
    }
    v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_14;
    while (1)
    {
      if (v5)
      {
        v10 = (v5 - 1) & v5;
        v11 = __clz(__rbit64(v5)) | (v4 << 6);
        v12 = v4;
      }
      else
      {
        v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9)
          goto LABEL_36;
        v15 = *(_QWORD *)(v18 + 8 * v14);
        v12 = v4 + 1;
        if (!v15)
        {
          v12 = v4 + 2;
          if (v4 + 2 >= v9)
            goto LABEL_36;
          v15 = *(_QWORD *)(v18 + 8 * v12);
          if (!v15)
          {
            v12 = v4 + 3;
            if (v4 + 3 >= v9)
              goto LABEL_36;
            v15 = *(_QWORD *)(v18 + 8 * v12);
            if (!v15)
            {
              v12 = v4 + 4;
              if (v4 + 4 >= v9)
                goto LABEL_36;
              v15 = *(_QWORD *)(v18 + 8 * v12);
              if (!v15)
              {
                v12 = v4 + 5;
                if (v4 + 5 >= v9)
                  goto LABEL_36;
                v15 = *(_QWORD *)(v18 + 8 * v12);
                if (!v15)
                {
                  v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    v15 = *(_QWORD *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  sub_218C23768();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        v10 = (v15 - 1) & v15;
        v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v11);
      if (!v13)
        goto LABEL_36;
      while (1)
      {
        v17 = (void *)sub_218C29D1C(v13);

        v4 = v12;
        v5 = v10;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_14:
        if (sub_218C589AC())
        {
          sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v13 = v19;
          swift_unknownObjectRelease();
          v12 = v4;
          v10 = v5;
          if (v19)
            continue;
        }
        goto LABEL_36;
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
    goto LABEL_5;
}

uint64_t sub_218C2A504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t isStackAllocationSafe;
  uint64_t v31;
  char v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;

  v2 = a2;
  v52 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_218C58988();
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    sub_218C23770();
    sub_218C58910();
    v3 = v47;
    v4 = v48;
    v6 = v49;
    v5 = v50;
    v7 = v51;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v4 = a1 + 56;
    v6 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v42 = v3;
  v43 = v4;
  v44 = v6;
  v45 = v5;
  v46 = v7;
  v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        v12 = (v7 - 1) & v7;
        v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        v14 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v13);
        v15 = v14;
        goto LABEL_15;
      }
      v25 = v5 + 1;
      if (__OFADD__(v5, 1))
        __break(1u);
      v26 = (unint64_t)(v6 + 64) >> 6;
      if (v25 >= v26)
      {
        v14 = 0;
        v12 = 0;
        goto LABEL_15;
      }
      v27 = *(_QWORD *)(v43 + 8 * v25);
      if (v27)
      {
LABEL_28:
        v12 = (v27 - 1) & v27;
        v13 = __clz(__rbit64(v27)) + (v25 << 6);
        v5 = v25;
        goto LABEL_14;
      }
      v28 = v5 + 2;
      if (v5 + 2 >= v26)
        goto LABEL_44;
      v27 = *(_QWORD *)(v43 + 8 * v28);
      if (v27)
      {
LABEL_32:
        v25 = v28;
        goto LABEL_28;
      }
      if (v5 + 3 < v26)
      {
        v27 = *(_QWORD *)(v43 + 8 * (v5 + 3));
        if (v27)
        {
          v25 = v5 + 3;
          goto LABEL_28;
        }
        v28 = v5 + 4;
        if (v5 + 4 >= v26)
        {
          v14 = 0;
          v12 = 0;
          v5 += 3;
LABEL_15:
          v45 = v5;
          v46 = v12;
          if (!v14)
            goto LABEL_53;
          goto LABEL_19;
        }
        v27 = *(_QWORD *)(v43 + 8 * v28);
        if (v27)
          goto LABEL_32;
        v25 = v5 + 5;
        if (v5 + 5 < v26)
        {
          v27 = *(_QWORD *)(v43 + 8 * v25);
          if (v27)
            goto LABEL_28;
          v25 = v26 - 1;
          v29 = v5 + 6;
          while (v26 != v29)
          {
            v27 = *(_QWORD *)(v43 + 8 * v29++);
            if (v27)
            {
              v25 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          v14 = 0;
          v12 = 0;
          v5 = v25;
          goto LABEL_15;
        }
      }
      v14 = 0;
      v12 = 0;
      v5 = v28;
      goto LABEL_15;
    }
    v16 = sub_218C589AC();
    if (!v16
      || (v40 = v16,
          sub_218C1E948(0, (unint64_t *)&qword_2550097A0),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          v14 = v41,
          swift_unknownObjectRelease(),
          !v41))
    {
LABEL_53:
      sub_218C23768();
      return v2;
    }
LABEL_19:
    v17 = sub_218C58940();
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_10;
    sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v19);
    v21 = sub_218C5894C();

    if ((v21 & 1) != 0)
      break;
    v22 = ~v18;
    while (1)
    {
      v19 = (v19 + 1) & v22;
      if (((*(_QWORD *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        break;
      v23 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v19);
      v24 = sub_218C5894C();

      if ((v24 & 1) != 0)
        goto LABEL_47;
    }
LABEL_10:

    v3 = v42;
    v6 = v44;
    v5 = v45;
    v7 = v46;
  }
LABEL_47:

  v32 = *(_BYTE *)(v2 + 32);
  v33 = (unint64_t)((1 << v32) + 63) >> 6;
  v34 = 8 * v33;
  if ((v32 & 0x3Fu) < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, v31);
    memcpy((char *)&v40 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v34);
    sub_218C2AA3C((unint64_t *)((char *)&v40 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0)), v33, v2, v19, &v42);
    v36 = v35;
    swift_release();
    sub_218C23768();
  }
  else
  {
    v37 = (void *)swift_slowAlloc();
    memcpy(v37, (const void *)(v2 + 56), v34);
    sub_218C2AA3C((unint64_t *)v37, v33, v2, v19, &v42);
    v36 = v38;
    swift_release();
    sub_218C23768();
    MEMORY[0x219A21C40](v37, -1, -1);
  }
  return v36;
}

void sub_218C2AA3C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  unint64_t i;
  unint64_t v23;
  id v24;
  char v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v34;
  uint64_t v36;
  void *v38;

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v36 = a3 + 56;
  while (2)
  {
    v34 = v7;
    do
    {
      while (1)
      {
        if ((*a5 & 0x8000000000000000) == 0)
        {
          v9 = a5[3];
          v8 = a5[4];
          if (v8)
          {
            v10 = (v8 - 1) & v8;
            v11 = __clz(__rbit64(v8)) | (v9 << 6);
LABEL_7:
            v12 = *(void **)(*(_QWORD *)(*a5 + 48) + 8 * v11);
            v13 = v12;
            goto LABEL_8;
          }
          v26 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          v27 = (unint64_t)(a5[2] + 64) >> 6;
          if (v26 >= v27)
          {
            v12 = 0;
            v10 = 0;
            goto LABEL_8;
          }
          v28 = a5[1];
          v29 = *(_QWORD *)(v28 + 8 * v26);
          if (v29)
          {
LABEL_22:
            v10 = (v29 - 1) & v29;
            v11 = __clz(__rbit64(v29)) + (v26 << 6);
            v9 = v26;
            goto LABEL_7;
          }
          v31 = v9 + 2;
          if (v9 + 2 >= v27)
            goto LABEL_41;
          v29 = *(_QWORD *)(v28 + 8 * v31);
          if (v29)
          {
LABEL_29:
            v26 = v31;
            goto LABEL_22;
          }
          if (v9 + 3 < v27)
          {
            v29 = *(_QWORD *)(v28 + 8 * (v9 + 3));
            if (v29)
            {
              v26 = v9 + 3;
              goto LABEL_22;
            }
            v31 = v9 + 4;
            if (v9 + 4 >= v27)
            {
              v12 = 0;
              v10 = 0;
              v9 += 3;
LABEL_8:
              a5[3] = v9;
              a5[4] = v10;
              if (!v12)
                goto LABEL_47;
              goto LABEL_12;
            }
            v29 = *(_QWORD *)(v28 + 8 * v31);
            if (v29)
              goto LABEL_29;
            v26 = v9 + 5;
            if (v9 + 5 < v27)
            {
              v29 = *(_QWORD *)(v28 + 8 * v26);
              if (v29)
                goto LABEL_22;
              v26 = v27 - 1;
              v32 = v9 + 6;
              while (v27 != v32)
              {
                v29 = *(_QWORD *)(v28 + 8 * v32++);
                if (v29)
                {
                  v26 = v32 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              v12 = 0;
              v10 = 0;
              v9 = v26;
              goto LABEL_8;
            }
          }
          v12 = 0;
          v10 = 0;
          v9 = v31;
          goto LABEL_8;
        }
        if (!sub_218C589AC()
          || (sub_218C1E948(0, (unint64_t *)&qword_2550097A0),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              v12 = v38,
              swift_unknownObjectRelease(),
              !v38))
        {
LABEL_47:
          swift_retain();
          sub_218C2ADC8(a1, a2, v34, a3);
          return;
        }
LABEL_12:
        v14 = sub_218C58940();
        v15 = -1 << *(_BYTE *)(a3 + 32);
        v16 = v14 & ~v15;
        v17 = v16 >> 6;
        v18 = 1 << v16;
        if (((1 << v16) & *(_QWORD *)(v36 + 8 * (v16 >> 6))) == 0)
          goto LABEL_3;
        sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
        v19 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v16);
        v20 = sub_218C5894C();

        if ((v20 & 1) != 0)
          break;
        v21 = ~v15;
        for (i = v16 + 1; ; i = v23 + 1)
        {
          v23 = i & v21;
          if (((*(_QWORD *)(v36 + (((i & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v21)) & 1) == 0)
            break;
          v24 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v23);
          v25 = sub_218C5894C();

          if ((v25 & 1) != 0)
          {

            v17 = v23 >> 6;
            v18 = 1 << v23;
            goto LABEL_25;
          }
        }
LABEL_3:

      }
LABEL_25:
      v30 = a1[v17];
      a1[v17] = v30 & ~v18;
    }
    while ((v18 & v30) == 0);
    v7 = v34 - 1;
    if (__OFSUB__(v34, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v34 != 1)
      continue;
    break;
  }
}

uint64_t sub_218C2ADC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255009798);
  result = sub_218C58A0C();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = sub_218C58940();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_218C2B024(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  uint64_t v9;

  v2 = result;
  v9 = a2;
  if (!(result >> 62))
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
    return v9;
  }
  result = sub_218C58A78();
  v3 = result;
  if (!result)
    return v9;
LABEL_3:
  if (v3 >= 1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = (void *)MEMORY[0x219A21184](i, v2);
        sub_218C28FCC(&v8, v5);

      }
    }
    else
    {
      v6 = (void **)(v2 + 32);
      do
      {
        v7 = *v6++;
        sub_218C28FCC(&v8, v7);

        --v3;
      }
      while (v3);
    }
    return v9;
  }
  __break(1u);
  return result;
}

void sub_218C2B100(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;

  v33 = a2;
  v34 = a1;
  v6 = sub_218C58658();
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  MEMORY[0x24BDAC7A8](v6, v7);
  v39 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v42 = a3;
  v43 = a4;
  v10 = *(_QWORD *)(a3 + 56);
  v36 = 0;
  v37 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v35 = a4 + 7;
  while (1)
  {
    while (1)
    {
      if (v13)
      {
        v14 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v44 = v9;
        v15 = v14 | (v9 << 6);
      }
      else
      {
        v16 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_40;
        if (v16 >= v38)
          goto LABEL_38;
        v17 = *(_QWORD *)(v37 + 8 * v16);
        v18 = v9 + 1;
        if (!v17)
        {
          v18 = v9 + 2;
          if (v9 + 2 >= v38)
            goto LABEL_38;
          v17 = *(_QWORD *)(v37 + 8 * v18);
          if (!v17)
          {
            v18 = v9 + 3;
            if (v9 + 3 >= v38)
              goto LABEL_38;
            v17 = *(_QWORD *)(v37 + 8 * v18);
            if (!v17)
            {
              v19 = v9 + 4;
              if (v9 + 4 >= v38)
                goto LABEL_38;
              v17 = *(_QWORD *)(v37 + 8 * v19);
              if (!v17)
              {
                while (1)
                {
                  v18 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_41;
                  if (v18 >= v38)
                    goto LABEL_38;
                  v17 = *(_QWORD *)(v37 + 8 * v18);
                  ++v19;
                  if (v17)
                    goto LABEL_20;
                }
              }
              v18 = v9 + 4;
            }
          }
        }
LABEL_20:
        v13 = (v17 - 1) & v17;
        v44 = v18;
        v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      v20 = *(id *)(*(_QWORD *)(v42 + 48) + 8 * v15);
      v21 = objc_msgSend(v20, sel_identifier, v33);
      v22 = v39;
      sub_218C5864C();

      v23 = sub_218C58634();
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v41);
      v26 = v43[2];
      if (v26)
        break;
LABEL_4:

      swift_bridgeObjectRelease();
      v9 = v44;
    }
    if ((v43[4] != v23 || v43[5] != v25) && (sub_218C58AFC() & 1) == 0)
      break;
LABEL_35:

    swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v34 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v31 = __OFADD__(v36++, 1);
    v9 = v44;
    if (v31)
    {
      __break(1u);
LABEL_38:
      v32 = v42;
      swift_retain();
      sub_218C2ADC8(v34, v33, v36, v32);
      return;
    }
  }
  if (v26 == 1)
    goto LABEL_4;
  v27 = v35;
  v28 = 1;
  while (1)
  {
    v29 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    v30 = *(v27 - 1) == v23 && *v27 == v25;
    if (v30 || (sub_218C58AFC() & 1) != 0)
      goto LABEL_35;
    v27 += 2;
    ++v28;
    if (v29 == v26)
      goto LABEL_4;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t sub_218C2B414(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, v10);
    bzero((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    sub_218C2B100((_QWORD *)((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v12 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v8);
    swift_bridgeObjectRetain();
    sub_218C2B100((unint64_t *)v13, v7, a1, a2);
    v12 = v14;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x219A21C40](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_218C2B5D8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;

  v6 = sub_218C58658();
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) == 0)
  {
    v33 = sub_218C2B414(a1, a2);
    if (!v2)
      return v33;
    return v3;
  }
  v3 = MEMORY[0x24BEE4B08];
  v42 = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRetain();
  v39 = sub_218C58988();
  v10 = sub_218C589AC();
  if (!v10)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    swift_release();
    return v3;
  }
  v11 = v10;
  v34 = v2;
  v36 = sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
  v35 = a2 + 7;
  while (1)
  {
    v40 = v11;
    swift_dynamicCast();
    v12 = objc_msgSend(v41, sel_identifier);
    sub_218C5864C();

    v13 = sub_218C58634();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v38);
    v16 = a2[2];
    if (v16)
    {
      if (a2[4] == v13 && a2[5] == v15 || (result = sub_218C58AFC(), (result & 1) != 0))
      {
LABEL_10:
        swift_bridgeObjectRelease();
        v18 = v41;
        v19 = v42;
        if (*(_QWORD *)(v42 + 24) <= *(_QWORD *)(v42 + 16))
        {
          sub_218C2945C();
          v19 = v42;
        }
        result = sub_218C58940();
        v20 = v19 + 56;
        v21 = -1 << *(_BYTE *)(v19 + 32);
        v22 = result & ~v21;
        v23 = v22 >> 6;
        if (((-1 << v22) & ~*(_QWORD *)(v19 + 56 + 8 * (v22 >> 6))) != 0)
        {
          v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v19 + 56 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v25 = 0;
          v26 = (unint64_t)(63 - v21) >> 6;
          do
          {
            if (++v23 == v26 && (v25 & 1) != 0)
            {
              __break(1u);
              goto LABEL_39;
            }
            v27 = v23 == v26;
            if (v23 == v26)
              v23 = 0;
            v25 |= v27;
            v28 = *(_QWORD *)(v20 + 8 * v23);
          }
          while (v28 == -1);
          v24 = __clz(__rbit64(~v28)) + (v23 << 6);
        }
        *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v24) = v18;
        ++*(_QWORD *)(v19 + 16);
        goto LABEL_5;
      }
      if (v16 != 1)
        break;
    }
LABEL_4:
    swift_bridgeObjectRelease();

LABEL_5:
    v11 = sub_218C589AC();
    if (!v11)
    {
      v3 = v42;
      goto LABEL_36;
    }
  }
  v29 = v35;
  v30 = 1;
  while (1)
  {
    v31 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (*(v29 - 1) == v13 && *v29 == v15)
      goto LABEL_10;
    result = sub_218C58AFC();
    if ((result & 1) != 0)
      goto LABEL_10;
    v29 += 2;
    ++v30;
    if (v31 == v16)
      goto LABEL_4;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_218C2B924(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_218C58A78();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_255009798);
      v3 = sub_218C58A0C();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = sub_218C58A78();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v42 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v40 = v1;
    while (1)
    {
      while (1)
      {
        v8 = MEMORY[0x219A21184](v7, v1);
        v9 = __OFADD__(v7++, 1);
        if (v9)
        {
          __break(1u);
          goto LABEL_36;
        }
        v10 = v8;
        v11 = sub_218C58940();
        v12 = -1 << *(_BYTE *)(v3 + 32);
        v13 = v11 & ~v12;
        v14 = v13 >> 6;
        v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
        v16 = 1 << v13;
        if (((1 << v13) & v15) != 0)
          break;
LABEL_20:
        *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
        v22 = *(_QWORD *)(v3 + 16);
        v9 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v9)
          goto LABEL_37;
        *(_QWORD *)(v3 + 16) = v23;
        if (v7 == v4)
          return;
      }
      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
      v18 = sub_218C5894C();

      if ((v18 & 1) == 0)
      {
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = sub_218C5894C();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v40;
        v4 = v42;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      v1 = v40;
      v4 = v42;
      if (v7 == v42)
        return;
    }
  }
  v24 = 0;
  v39 = v1 + 32;
  v41 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v41)
  {
    v25 = *(id *)(v39 + 8 * v24);
    v26 = sub_218C58940();
    v27 = -1 << *(_BYTE *)(v3 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
    v31 = 1 << v28;
    if (((1 << v28) & v30) != 0)
    {
      sub_218C1E948(0, (unint64_t *)&qword_2550097A0);
      v32 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
      v33 = sub_218C5894C();

      if ((v33 & 1) != 0)
      {
LABEL_24:

        goto LABEL_25;
      }
      v34 = ~v27;
      while (1)
      {
        v28 = (v28 + 1) & v34;
        v29 = v28 >> 6;
        v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
        v31 = 1 << v28;
        if ((v30 & (1 << v28)) == 0)
          break;
        v35 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
        v36 = sub_218C5894C();

        if ((v36 & 1) != 0)
          goto LABEL_24;
      }
    }
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28) = v25;
    v37 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v9)
      goto LABEL_38;
    *(_QWORD *)(v3 + 16) = v38;
LABEL_25:
    if (++v24 == v42)
      return;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_218C2BC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1, v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v10, v1);
    v14[1] = 1;
    v15 = 0;
    sub_218C58844();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 0, 1, v12);
  }
  return sub_218C16554((uint64_t)v9, &qword_255009788);
}

uint64_t sub_218C2BDFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_218C58658() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_218C58AA8();
  __break(1u);
  return result;
}

void sub_218C2BF14(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  char **p_name;
  uint64_t i;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t j;
  id v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  unint64_t v90;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097B0);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_218C58658();
  v85 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v84 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v82 = (char *)&v73 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v79 = *(_QWORD *)(v12 - 8);
  v80 = v12;
  MEMORY[0x24BDAC7A8](v12, v13);
  v74 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  MEMORY[0x24BDAC7A8](v15, v16);
  v75 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v20 = MEMORY[0x24BDAC7A8](v18, v19).n128_u64[0];
  v76 = (char *)&v73 - v21;
  v78 = a1;
  v22 = objc_msgSend(a1, sel_trackChanges, v20);
  v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2550097B8);
  v23 = sub_218C587A8();

  v90 = MEMORY[0x24BEE4AF8];
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = sub_218C58A78();
    swift_bridgeObjectRelease();
    p_name = (char **)(&SigX__classData + 24);
    if (v24)
    {
LABEL_3:
      if (v24 < 1)
      {
        __break(1u);
        goto LABEL_74;
      }
      for (i = 0; i != v24; ++i)
      {
        if ((v23 & 0xC000000000000001) != 0)
          v27 = (id)MEMORY[0x219A21184](i, v23);
        else
          v27 = *(id *)(v23 + 8 * i + 32);
        v28 = v27;
        if (objc_msgSend(v27, p_name[163]) == (id)1)
        {
          sub_218C58A24();
          sub_218C58A48();
          sub_218C58A54();
          sub_218C58A30();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v29 = v90;
      v83 = v6;
      if ((v90 & 0x8000000000000000) != 0)
        goto LABEL_25;
      goto LABEL_16;
    }
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    p_name = &SigX__classData.name;
    if (v24)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v29 = MEMORY[0x24BEE4AF8];
  v83 = v6;
  if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
    goto LABEL_25;
LABEL_16:
  if ((v29 & 0x4000000000000000) != 0)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v30 = sub_218C58A78();
    swift_release();
    if (!v30)
      goto LABEL_26;
    goto LABEL_18;
  }
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
LABEL_26:
    swift_release();
    v36 = MEMORY[0x24BEE4AF8];
    goto LABEL_27;
  }
LABEL_18:
  v90 = MEMORY[0x24BEE4AF8];
  sub_218C58A3C();
  if (v30 < 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v31 = 0;
  do
  {
    if ((v29 & 0xC000000000000001) != 0)
      v32 = (id)MEMORY[0x219A21184](v31, v29);
    else
      v32 = *(id *)(v29 + 8 * v31 + 32);
    v33 = v32;
    ++v31;
    v34 = objc_msgSend(v32, sel_libraryItem);
    v35 = objc_msgSend(v34, sel_mediaItemValue);

    sub_218C58A24();
    sub_218C58A48();
    sub_218C58A54();
    sub_218C58A30();
  }
  while (v30 != v31);
  v36 = v90;
  swift_release();
LABEL_27:
  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = sub_218C58A78();
    swift_bridgeObjectRelease();
    if (v45)
      goto LABEL_29;
LABEL_34:
    swift_bridgeObjectRelease();
    v44 = &selRef_musicRecognitionSensorActivityAttributionExceptionPlist;
    goto LABEL_35;
  }
  if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
LABEL_29:
  v37 = v81 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  v39 = v79;
  v38 = v80;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v37, 1, v80))
  {
    swift_bridgeObjectRelease();
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    v41 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v76, 1, 1, v40);
  }
  else
  {
    v42 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v74, v37, v38);
    v88 = v36;
    v89 = 2;
    v41 = (uint64_t)v76;
    sub_218C58844();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v41, 0, 1, v43);
  }
  v44 = &selRef_musicRecognitionSensorActivityAttributionExceptionPlist;
  sub_218C16554(v41, &qword_255009788);
LABEL_35:
  v46 = objc_msgSend(v78, v44[479]);
  v47 = sub_218C587A8();

  v88 = MEMORY[0x24BEE4AF8];
  if (!(v47 >> 62))
  {
    v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v48)
      goto LABEL_37;
LABEL_49:
    swift_bridgeObjectRelease();
    v52 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_65;
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  v48 = sub_218C58A78();
  swift_bridgeObjectRelease();
  if (!v48)
    goto LABEL_49;
LABEL_37:
  if (v48 < 1)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  for (j = 0; j != v48; ++j)
  {
    if ((v47 & 0xC000000000000001) != 0)
      v50 = (id)MEMORY[0x219A21184](j, v47);
    else
      v50 = *(id *)(v47 + 8 * j + 32);
    v51 = v50;
    if (objc_msgSend(v50, p_name[163]) == (id)3)
    {
      sub_218C58A24();
      sub_218C58A48();
      sub_218C58A54();
      sub_218C58A30();
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v52 = v88;
  if ((v88 & 0x8000000000000000) != 0)
  {
LABEL_65:
    swift_retain();
    v53 = sub_218C58A78();
    if (!v53)
      goto LABEL_66;
    goto LABEL_52;
  }
LABEL_50:
  if ((v52 & 0x4000000000000000) != 0)
    goto LABEL_65;
  v53 = *(_QWORD *)(v52 + 16);
  swift_retain();
  if (v53)
  {
LABEL_52:
    if (v53 >= 1)
    {
      v54 = 0;
      v55 = MEMORY[0x24BEE4AF8];
      do
      {
        if ((v52 & 0xC000000000000001) != 0)
          v56 = (id)MEMORY[0x219A21184](v54, v52);
        else
          v56 = *(id *)(v52 + 8 * v54 + 32);
        v57 = v56;
        v58 = objc_msgSend(v56, sel_libraryItem);
        v59 = objc_msgSend(v58, sel_identifier);

        sub_218C58784();
        sub_218C58628();

        swift_bridgeObjectRelease();
        v60 = v85;
        v61 = v83;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v5, 1, v83) == 1)
        {
          sub_218C16554((uint64_t)v5, &qword_2550097B0);
        }
        else
        {
          v62 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
          v63 = v82;
          v62(v82, v5, v61);
          v62(v84, v63, v61);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v55 = sub_218C28DC4(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
          v65 = *(_QWORD *)(v55 + 16);
          v64 = *(_QWORD *)(v55 + 24);
          if (v65 >= v64 >> 1)
            v55 = sub_218C28DC4(v64 > 1, v65 + 1, 1, v55);
          *(_QWORD *)(v55 + 16) = v65 + 1;
          v62((char *)(v55+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v65), v84, v61);
        }
        ++v54;
      }
      while (v53 != v54);
      goto LABEL_67;
    }
LABEL_76:
    __break(1u);
    return;
  }
LABEL_66:
  v55 = MEMORY[0x24BEE4AF8];
LABEL_67:
  swift_release_n();
  if (*(_QWORD *)(v55 + 16))
  {
    v66 = v81 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
    swift_beginAccess();
    v68 = v79;
    v67 = v80;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v66, 1, v80))
    {
      swift_bridgeObjectRelease();
      v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
      v70 = (uint64_t)v75;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v75, 1, 1, v69);
    }
    else
    {
      v71 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v74, v66, v67);
      v86 = v55;
      v87 = 3;
      v70 = (uint64_t)v75;
      sub_218C58844();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v71, v67);
      v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v70, 0, 1, v72);
    }
    sub_218C16554(v70, &qword_255009788);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_218C2C834(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_lock);
  v23 = v2;
  v24 = a2;
  v15 = v14 + 4;
  os_unfair_lock_lock(v14 + 4);
  sub_218C19240(v16, sub_218C2CBD0);
  os_unfair_lock_unlock(v15);
  v17 = v2 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v17, v5);
    v25 = a1;
    v26 = 4;
    v19 = a1;
    sub_218C58844();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 0, 1, v20);
  }
  return sub_218C16554((uint64_t)v13, &qword_255009788);
}

uint64_t sub_218C2CA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  char v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009778);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1, v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009788);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_lock);
  v18 = v0;
  v11 = v10 + 4;
  os_unfair_lock_lock(v10 + 4);
  sub_218C19240(v12, sub_218C2CBB8);
  os_unfair_lock_unlock(v11);
  v13 = v0 + OBJC_IVAR____TtCC9ShazamKit14SHAsyncLibrary22SHAsyncLibraryDelegate_updatesContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v13, 1, v1))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v5, v13, v1);
    v19 = 0;
    v20 = 0;
    sub_218C58844();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255009790);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 0, 1, v15);
  }
  return sub_218C16554((uint64_t)v9, &qword_255009788);
}

uint64_t sub_218C2CBB8()
{
  uint64_t v0;

  return sub_218C28588(*(_QWORD *)(v0 + 16));
}

uint64_t sub_218C2CBD0()
{
  uint64_t v0;

  return sub_218C28280(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_218C2CBE8()
{
  return objectdestroyTm(&qword_2550097E0);
}

uint64_t sub_218C2CBF4(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550097E0);
  return sub_218C27D60(a1);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void sub_218C2CC4C(uint64_t a1)
{
  uint64_t v1;

  sub_218C277C4(a1, v1);
}

uint64_t sub_218C2CC54()
{
  return objectdestroyTm(&qword_2550097F8);
}

uint64_t objectdestroyTm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_218C2CCBC(unint64_t a1, int a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2550097F8);
  return sub_218C27998(a1, a2, a3);
}

uint64_t sub_218C2CD14()
{
  uint64_t v0;

  return sub_218C27F00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_218C2CD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550096A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_218C2CD74(uint64_t a1)
{
  uint64_t v1;

  sub_218C27084(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_218C2CD7C(void **a1)
{
  return sub_218C272B8(a1);
}

uint64_t sub_218C2CD84(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x219A21BC8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_218C2CDC4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_218C2CDE8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_218C2CE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_218C16478;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t sub_218C2CE7C()
{
  uint64_t v0;

  return sub_218C27E14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_218C2CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2550097C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL shazam::fit_points(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, float *a5, double *a6, uint64_t a7, unsigned int a8, float a9)
{
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float v24;
  double v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];

  *(_QWORD *)(a7 + 8) = *(_QWORD *)a7;
  v16 = (unsigned int *)(a1[3] + 4 * a4);
  v18 = *v16;
  v17 = v16[1];
  v19 = v17;
  v20 = llround(*a6);
  v21 = *a1;
  if (v17 - v18 >= 2)
  {
    do
    {
      if (*(_DWORD *)(v21 + 4 * ((v19 + v18) >> 1)) >> 14 < (signed int)(v20 - a8))
        v18 = (v19 + v18) >> 1;
      else
        v19 = (v19 + v18) >> 1;
    }
    while (v19 - v18 > 1);
  }
  gsl::span<peak_tf const,18446744073709551615ul>::span<18446744073709551615ul,0>((gsl::details *)&v26, v21 + 4 * v19, v21 + 4 * v17);
  shazam::match_peaks(*(unint64_t *)&v26, v27, a2, v20, (void **)a7, a8, a9, *a5);
  if (*(_QWORD *)(a7 + 8) - *(_QWORD *)a7 < 0x60uLL)
    return 0;
  v29[0] = gsl::make_span<std::vector<shazam::tfmatch>>((gsl::details *)a7);
  v29[1] = v22;
  shazam::regress<shazam::tfmatch const,shazam::extractX<shazam::tfmatch const>,shazam::extractY<shazam::tfmatch const>>((gsl::details *)v29, (uint64_t)&v26);
  if (!v28)
    return 0;
  v23 = v26;
  *a6 = *(double *)&v27 + *a6;
  v24 = (*a5 + 1.0) * v23 + -1.0;
  *a5 = v24;
  return a3[1] >= v24 && *a3 <= v24;
}

gsl::details *gsl::span<peak_tf const,18446744073709551615ul>::span<18446744073709551615ul,0>(gsl::details *a1, uint64_t a2, uint64_t a3)
{
  return gsl::span<peak_tf const,18446744073709551615ul>::storage_type<gsl::details::extent_type<18446744073709551615ul>>::storage_type<unsigned long>(a1, a2, (a3 - a2) >> 2);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

gsl::details *gsl::span<peak_tf const,18446744073709551615ul>::storage_type<gsl::details::extent_type<18446744073709551615ul>>::storage_type<unsigned long>(gsl::details *result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a3;
  if (a3 == -1 || (*((_QWORD *)result + 1) = a2) == 0 && a3)
    gsl::details::terminate(result);
  return result;
}

void gsl::details::terminate(gsl::details *this)
{
  std::terminate();
}

gsl::details *shazam::regress<shazam::tfmatch const,shazam::extractX<shazam::tfmatch const>,shazam::extractY<shazam::tfmatch const>>@<X0>(gsl::details *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float *v10;
  float v11;
  double v13;
  double v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (unint64_t *)result;
  v4 = *((_QWORD *)result + 1);
  v5 = v4 + 16 * *(_QWORD *)result;
  v16 = v4;
  v17 = v5;
  v18 = v4;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  while (v18 != v5)
  {
    v10 = (float *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v16);
    v11 = v10[2];
    v9 = v9 + (float)(v11 * v11);
    v8 = v8 + (float)(v11 * *v10);
    v6 = v6 + v11;
    v7 = v7 + *v10;
    result = gsl::details::span_iterator<shazam::tfmatch const>::operator++((gsl::details *)&v16);
    if (v16 != v4 || v17 != v5)
      gsl::details::terminate(result);
  }
  v13 = (double)*v2;
  v14 = v13 * v9 - v6 * v6;
  if (v14 == 0.0)
  {
    v15 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    *(double *)a2 = (v13 * v8 - v7 * v6) / v14;
    *(double *)(a2 + 8) = (v9 * v7 - v8 * v6) / v14;
    v15 = 1;
  }
  *(_BYTE *)(a2 + 16) = v15;
  return result;
}

uint64_t gsl::make_span<std::vector<shazam::tfmatch>>(gsl::details *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v1 = *((_QWORD *)a1 + 1);
  v2 = v1 - *(_QWORD *)a1;
  if (v2 == -16 || (!*(_QWORD *)a1 ? (v3 = v1 == 0) : (v3 = 1), !v3))
    gsl::details::terminate(a1);
  return v2 >> 4;
}

gsl::details *gsl::details::span_iterator<shazam::tfmatch const>::operator*(gsl::details *result)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;

  v1 = *(_QWORD *)result;
  if (!*(_QWORD *)result
    || (v2 = *((_QWORD *)result + 1)) == 0
    || ((result = (gsl::details *)*((_QWORD *)result + 2), v1 <= (unint64_t)result)
      ? (v3 = (unint64_t)result >= v2)
      : (v3 = 1),
        v3))
  {
    gsl::details::terminate(result);
  }
  return result;
}

gsl::details *gsl::details::span_iterator<shazam::tfmatch const>::operator++(gsl::details *result)
{
  unint64_t v1;
  unint64_t v2;

  if (!*(_QWORD *)result || (v1 = *((_QWORD *)result + 2)) == 0 || (v2 = *((_QWORD *)result + 1)) == 0 || v1 >= v2)
    gsl::details::terminate(result);
  *((_QWORD *)result + 2) = v1 + 16;
  return result;
}

uint64_t shazam::FatHeaderIterator(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  gsl::details *subspan;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  void *exception;
  uint64_t error_code;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v22 = a1;
  v23 = a2;
  if (a1 <= 0x2F)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, error_code, v14);
    goto LABEL_13;
  }
  v4 = shazam::reinterpret_safer<LegacyFatSigInfo const*,0>(&v22);
  subspan = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v22, 0x30uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  if (subspan != (gsl::details *)*(unsigned int *)(v4 + 8))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = shazam::make_error_code((shazam *)0x6A);
    MEMORY[0x219A21418](exception, v15, v16);
    goto LABEL_13;
  }
  v7 = (unint64_t)subspan;
  v8 = v6;
  v9 = crc32_check(*(_DWORD *)(v4 + 4), (char *)(v23 + 8), v22 - 8);
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v17 = shazam::make_error_code((shazam *)0x84);
    MEMORY[0x219A21418](exception, v17, v18);
LABEL_13:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  v19 = 1342177282;
  v20 = v22;
  if (v22 == -1 || (v21 = v23) == 0 && v22)
    gsl::details::terminate((gsl::details *)v9);
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v19);
  return shazam::iterate_headers<shazam::fp_data_header_extern_new>(v7, v8, a3);
}

void sub_218C2D3DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<LegacyFatSigInfo const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0x2FuLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C2D4A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::iterate_headers<shazam::fp_data_header_extern_new>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  gsl::details *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t error_code;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *exception;
  uint64_t v30;
  uint64_t v31;
  int v32;
  gsl::details *v33;
  uint64_t v34;
  int v35;
  gsl::details *subspan;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v38 = a1;
  v39 = a2;
  v4 = (_DWORD *)shazam::reinterpret_safer<shazam::fp_data_header_extern_new const*,0>(&v38);
  if (*v4 != 0x40000000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x6F);
    MEMORY[0x219A21418](exception, error_code, v24);
    goto LABEL_21;
  }
  v5 = v4;
  v6 = v4[1];
  if (v38 < v6)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    v30 = shazam::make_error_code((shazam *)0x70);
    MEMORY[0x219A21418](exception, v30, v31);
    goto LABEL_21;
  }
  if (v6 <= 8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = shazam::make_error_code((shazam *)0x71);
    MEMORY[0x219A21418](exception, v25, v26);
    goto LABEL_21;
  }
  v7 = v38 - v6;
  if (v7)
  {
    if (v7 > 7 || (v38 & 7) != 0)
      goto LABEL_9;
  }
  v35 = 0x40000000;
  subspan = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v38, 8uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  v37 = v9;
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
LABEL_18:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v35);
  v12 = v5[1];
  v13 = 8;
  if (v12 >= 9)
  {
    while (1)
    {
      if (v12 - v13 <= 7)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        v19 = shazam::make_error_code((shazam *)0x71);
        MEMORY[0x219A21418](exception, v19, v20);
        goto LABEL_21;
      }
      v14 = (int *)(v39 + v13);
      v15 = v13 + 8;
      v16 = (gsl::details *)*(unsigned int *)(v39 + v13 + 4);
      if (v12 - (v13 + 8) < (unint64_t)v16)
        break;
      v32 = *v14;
      v33 = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v38, v13 + 8, v16);
      v34 = v17;
      v18 = *(_QWORD *)(a3 + 24);
      if (!v18)
        goto LABEL_18;
      result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v18 + 48))(v18, &v32);
      v13 = v15 + ((v14[1] + 3) & 0xFFFFFFFC);
      v12 = v5[1];
      if (v13 >= v12)
        goto LABEL_16;
    }
    exception = __cxa_allocate_exception(0x20uLL);
    v21 = shazam::make_error_code((shazam *)0x70);
    MEMORY[0x219A21418](exception, v21, v22);
LABEL_21:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
LABEL_16:
  if (v13 != v12)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = shazam::make_error_code((shazam *)0x72);
    MEMORY[0x219A21418](exception, v27, v28);
    goto LABEL_21;
  }
  return result;
}

void sub_218C2D76C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

gsl::details *gsl::span<char const,18446744073709551615ul>::make_subspan(gsl::details *a1, unint64_t a2, gsl::details *this)
{
  unint64_t v3;

  v3 = *(_QWORD *)a1 - a2;
  if (*(_QWORD *)a1 < a2)
    goto LABEL_6;
  if (this == (gsl::details *)-1)
  {
    this = (gsl::details *)(*(_QWORD *)a1 - a2);
    if (v3 != -1)
      return this;
LABEL_6:
    gsl::details::terminate(a1);
  }
  if (v3 < (unint64_t)this)
    goto LABEL_6;
  return this;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x219A21574);
}

uint64_t shazam::reinterpret_safer<shazam::fp_data_header_extern_new const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 7uLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C2D8F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL crc32_check(int a1, char *a2, uint64_t a3)
{
  int v4;

  v4 = crc32(0, a2, a3);
  return a1 == -87368039 || v4 == a1;
}

uint64_t checksum(int *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  std::runtime_error *exception;

  if ((a2 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Checksum Alignment Error");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (a2 < 4)
    return 0;
  LODWORD(v2) = 0;
  v3 = a2 >> 2;
  do
  {
    v4 = *a1++;
    v2 = (v4 + v2);
    --v3;
  }
  while (v3);
  return v2;
}

void sub_218C2D9CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float shazam::get_spect_peak_log_scale(shazam *this)
{
  unsigned __int8 v1;
  float *v2;
  int v4;

  v2 = (float *)&unk_25500B000;
  if ((v1 & 1) == 0)
  {
    v2 = (float *)&unk_25500B000;
    if (v4)
    {
      shazam::get_spect_peak_log_scale(void)::_spect_peak_log_scale = 1152952891;
      v2 = (float *)&unk_25500B000;
    }
  }
  return v2[28];
}

float shazam::get_spect_peak_log_offset(shazam *this)
{
  unsigned __int8 v1;
  float *v2;
  int v4;

  v2 = (float *)&unk_25500B000;
  if ((v1 & 1) == 0)
  {
    v2 = (float *)&unk_25500B000;
    if (v4)
    {
      shazam::get_spect_peak_log_offset(void)::_spect_peak_log_offset = -1065020014;
      v2 = (float *)&unk_25500B000;
    }
  }
  return v2[32];
}

void Interpolate(shazam *a1, unsigned int a2, uint64_t a3)
{
  __int16 v3;
  float v5;
  float v6;
  float v7;
  float spect_peak_log_scale;
  float v9;
  shazam *v10;
  float v11;
  shazam *v12;
  float v13;
  float v14;
  shazam *v15;
  float v16;
  shazam *v17;
  float v18;
  float v19;
  shazam *v20;
  float v21;
  float v22;
  uint64_t v23;

  v3 = a2;
  v5 = fmaxf(*(float *)(a3 + 4 * (a2 - 1)), 0.015625);
  v6 = fmaxf(*(float *)(a3 + 4 * a2), 0.015625);
  v7 = fmaxf(*(float *)(a3 + 4 * (a2 + 1)), 0.015625);
  spect_peak_log_scale = shazam::get_spect_peak_log_scale(a1);
  v9 = logf(v5);
  v11 = spect_peak_log_scale * (float)(v9 - shazam::get_spect_peak_log_offset(v10));
  v13 = shazam::get_spect_peak_log_scale(v12);
  v14 = logf(v6);
  v16 = v13 * (float)(v14 - shazam::get_spect_peak_log_offset(v15));
  v18 = shazam::get_spect_peak_log_scale(v17);
  v19 = logf(v7);
  v21 = v18 * (float)(v19 - shazam::get_spect_peak_log_offset(v20));
  v22 = -(float)((float)(v11 + v21) - (float)(v16 * 2.0));
  if (v22 <= 0.0)
    LOWORD(v23) = 0;
  else
    v23 = (uint64_t)(float)((float)((float)(v21 - v11) * 32.0) / v22);
  *((_WORD *)a1 + 2) = v23 + (v3 << 6);
  *((_WORD *)a1 + 3) = llroundf(v16);
}

shazam *spectral_peak_t::spectral_peak_t(shazam *a1, int a2, unsigned int a3, uint64_t a4)
{
  *(_DWORD *)a1 = a2;
  *((_DWORD *)a1 + 1) = 0;
  Interpolate(a1, a3, a4);
  return a1;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

void std::vector<char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24D9B6400, MEMORY[0x24BEDAAF0]);
}

void sub_218C2DD48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

float shazam::score_match(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float result;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  int v12;
  float *v13;
  unint64_t v14;
  float v15;
  float v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    return 0.0;
  v4 = 0;
  v5 = v3 >> 4;
  if (v5 <= 1)
    v5 = 1;
  result = 0.0;
  v7 = 0.0;
  do
  {
    v8 = (float *)(v1 + 16 * v4);
    v10 = *v8;
    v9 = v8 + 1;
    v11 = v10;
    v12 = -2;
    v13 = (float *)(v1 + 4);
    v14 = v5;
    do
    {
      v15 = vabds_f32(*(v13 - 1), v11);
      if (v15 < 3.0)
        ++v12;
      if (v15 < 2500.0 && vabds_f32(*v13, *v9) < 2.0)
        ++v12;
      v13 += 4;
      --v14;
    }
    while (v14);
    if (v12 >= 19)
      v12 = 19;
    v16 = _chanw[(int)(float)(*v9 - *(float *)(v1 + 16 * v4 + 12)) + 15];
    result = result + v16;
    v7 = v7 + (float)(v16 * _penalty_weightings[v12 & ~(v12 >> 31)]);
    ++v4;
  }
  while (v4 != v5);
  return result;
}

uint64_t OSTimer::duration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 - a2;
}

_UNKNOWN **shazam::get_os_timer(shazam *this)
{
  unsigned __int8 v1;

  return &shazam::get_os_timer(void)::_os_timer;
}

void OSTimer::~OSTimer(OSTimer *this)
{
  JUMPOUT(0x219A21574);
}

void shazam::spectral_peak_compact_t::convert_array(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char v28;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<shazam::spectral_peak_compact_t>::reserve((char **)a3, 2 * a2);
  v5 = a1;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v6;
      v6 = *(_DWORD *)(v5 + 8 * v7);
      v9 = v6 - v8;
      if (v6 - v8 >= 0xFF)
      {
        v12 = v6 >> 8;
        v13 = HIWORD(v6);
        v9 = -1;
        v11 = *(_DWORD *)(v5 + 8 * v7);
        v14 = HIBYTE(v6);
      }
      else
      {
        v10 = v5 + 8 * v7;
        v11 = *(unsigned __int16 *)(v10 + 6);
        v12 = v11 >> 8;
        v13 = *(unsigned __int16 *)(v10 + 4);
        v14 = v13 >> 8;
        ++v7;
      }
      v15 = *(char **)(a3 + 8);
      v16 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v15 >= v16)
      {
        v18 = 0xCCCCCCCCCCCCCCCDLL * (_QWORD)&v15[-*(_QWORD *)a3];
        v19 = v18 + 1;
        if (v18 + 1 >= 0x3333333333333334)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        v20 = 0xCCCCCCCCCCCCCCCDLL * (v16 - *(_QWORD *)a3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x1999999999999999)
          v21 = 0x3333333333333333;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::spectral_peak_compact_t>>(a3 + 16, v21);
        else
          v22 = 0;
        v23 = &v22[5 * v18];
        *v23 = v9;
        v23[1] = v11;
        v23[2] = v12;
        v23[3] = v13;
        v23[4] = v14;
        v25 = *(char **)a3;
        v24 = *(char **)(a3 + 8);
        v26 = v23;
        if (v24 != *(char **)a3)
        {
          do
          {
            v27 = *(_DWORD *)(v24 - 5);
            v24 -= 5;
            v28 = v24[4];
            *(_DWORD *)(v26 - 5) = v27;
            v26 -= 5;
            v26[4] = v28;
          }
          while (v24 != v25);
          v24 = *(char **)a3;
        }
        v17 = v23 + 5;
        *(_QWORD *)a3 = v26;
        *(_QWORD *)(a3 + 8) = v23 + 5;
        *(_QWORD *)(a3 + 16) = &v22[5 * v21];
        if (v24)
          operator delete(v24);
        v5 = a1;
      }
      else
      {
        *v15 = v9;
        v15[1] = v11;
        v15[2] = v12;
        v15[3] = v13;
        v17 = v15 + 5;
        v15[4] = v14;
      }
      *(_QWORD *)(a3 + 8) = v17;
    }
    while (v7 < a2);
  }
}

void sub_218C2E0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<shazam::spectral_peak_compact_t>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * (v4 - *a1) < a2)
  {
    if (a2 >= 0x3333333333333334)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v5 = (a1[1] - *a1) / 5;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::spectral_peak_compact_t>>(v3, a2);
    v7 = &v6[5 * v5];
    v9 = &v6[5 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_DWORD *)(v10 - 5);
        v10 -= 5;
        v14 = v10[4];
        *(_DWORD *)(v12 - 5) = v13;
        v12 -= 5;
        v12[4] = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<spectral_peak_t>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<spectral_peak_t>::__append((void **)a1, a2 - v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::spectral_peak_compact_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x3333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(5 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::vector<spectral_peak_t>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

gsl::details *gsl::make_span<shazam::spectral_peak_compact_t const>(gsl::details *a1, gsl::details *this)
{
  if (this == (gsl::details *)-1 || !a1 && this)
    gsl::details::terminate(a1);
  return this;
}

gsl::details *gsl::details::span_iterator<shazam::spectral_peak_compact_t const>::operator++(gsl::details *result)
{
  unint64_t v1;
  unint64_t v2;

  if (!*(_QWORD *)result || (v1 = *((_QWORD *)result + 2)) == 0 || (v2 = *((_QWORD *)result + 1)) == 0 || v1 >= v2)
    gsl::details::terminate(result);
  *((_QWORD *)result + 2) = v1 + 5;
  return result;
}

float shazam::signature_info::signature_info(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  float result;
  void *exception;
  uint64_t error_code;
  uint64_t v7;

  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  if (*(_DWORD *)a2 != -559038737)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x67);
    MEMORY[0x219A21418](exception, error_code, v7);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (*(_DWORD *)(a2 + 16) == 15)
    v2 = 15;
  else
    v2 = 0;
  *(_BYTE *)(a1 + 20) = v2;
  *(_DWORD *)(a1 + 16) = 8000;
  v3 = *(unsigned int *)(a2 + 4);
  result = *(float *)(a2 + 8) * 125.0;
  *(_QWORD *)a1 = (unint64_t)result;
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

void sub_218C2E47C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

shazam::signature_info *shazam::signature_info::signature_info(shazam::signature_info *this, const LegacyFatSigInfo *a2)
{
  void *exception;
  uint64_t error_code;
  uint64_t v7;

  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  if (*(_DWORD *)a2 != -889313920)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x67);
    MEMORY[0x219A21418](exception, error_code, v7);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  *((_BYTE *)this + 20) = *((_DWORD *)a2 + 11) >> 19;
  *((_QWORD *)this + 1) = LegacyFatSigInfo::get_sample_length_samples(a2);
  *((_DWORD *)this + 4) = LegacyFatSigInfo::get_raw_sample_rate(a2);
  *(_QWORD *)this = LegacyFatSigInfo::get_stream_pos(a2);
  return this;
}

void sub_218C2E550(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

shazam::signature_info *shazam::signature_info::signature_info(shazam::signature_info *this, const SumoSigInfo *a2)
{
  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  *((_BYTE *)this + 20) = *((_BYTE *)a2 + 27);
  *((_QWORD *)this + 1) = SumoSigInfo::get_sample_length_samples(a2);
  *((_DWORD *)this + 4) = SumoSigInfo::get_raw_sample_rate(a2);
  *(_QWORD *)this = SumoSigInfo::get_stream_position(a2);
  return this;
}

void resample_stream::resample_stream(resample_stream *this, int a2, int a3)
{
  void *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int64_t v10;
  void *v11;
  std::logic_error *exception;

  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  v4 = malloc_type_aligned_alloc(0x10uLL, 0x210uLL, 0x33A8F899uLL);
  *((_QWORD *)this + 10) = v4;
  bzero(v4, 0x210uLL);
  v5 = malloc_type_aligned_alloc(0x10uLL, 0x810uLL, 0x33A8F899uLL);
  *((_QWORD *)this + 11) = v5;
  bzero(v5, 0x810uLL);
  v6 = *((_DWORD *)this + 5);
  if (v6)
  {
    v7 = *((_DWORD *)this + 5);
    v8 = *((_DWORD *)this + 4);
    do
    {
      v9 = v7;
      v7 = v8 % v7;
      v8 = v9;
    }
    while (v7);
  }
  else
  {
    v9 = *((_DWORD *)this + 4);
  }
  v10 = (v6 / v9) | ((unint64_t)(*((_DWORD *)this + 4) / v9) << 32);
  if (v10 > 0x300000000)
  {
    if (v10 == 0x300000001)
    {
      v11 = resample_stream::push_3_1_tight;
      goto LABEL_15;
    }
    if (v10 == 0x1B9000000A0)
    {
      v11 = resample_stream::push_44100_to_16000;
      goto LABEL_15;
    }
LABEL_16:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid input sample rate.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D9B6418, MEMORY[0x24BEDAB88]);
  }
  if (v10 == 0x100000001)
  {
    v11 = resample_stream::push_1_1_tight;
    goto LABEL_15;
  }
  if (v10 != 0x200000001)
    goto LABEL_16;
  v11 = resample_stream::push_2_1_tight;
LABEL_15:
  *(_QWORD *)this = v11;
  *((_QWORD *)this + 1) = 0;
}

void sub_218C2E740(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 + 88));
  free(*(void **)(v1 + 80));
  _Unwind_Resume(a1);
}

void resample_stream::push_3_1_tight(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  float *v26;
  int v27;
  float __C;

  if (a3 >= 1)
  {
    v7 = 0;
    v8 = a4 + 16;
    v10 = a1[8];
    v9 = a1[9];
    v11 = a3;
    do
    {
      v12 = *(_DWORD *)(a2 + 4 * v7);
      v13 = a1[11];
      v14 = (_DWORD *)(v13 + 4 * v9);
      v14[256] = v12;
      *v14 = v12;
      v15 = v10 + 1;
      a1[8] = v10 + 1;
      if (!v10)
      {
        __C = 0.0;
        vDSP_dotpr((const float *)(v13 + 4 * (v9 - 127)), 1, decimation_3_1_tight_table, 1, &__C, 0x80uLL);
        v16 = __C;
        v18 = *(float **)(a4 + 8);
        v17 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v18 >= v17)
        {
          v20 = *(float **)a4;
          v21 = ((uint64_t)v18 - *(_QWORD *)a4) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<char>::__throw_length_error[abi:ne180100]();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v8, v24);
            v20 = *(float **)a4;
            v18 = *(float **)(a4 + 8);
          }
          else
          {
            v25 = 0;
          }
          v26 = (float *)&v25[4 * v21];
          *v26 = v16;
          v19 = v26 + 1;
          while (v18 != v20)
          {
            v27 = *((_DWORD *)v18-- - 1);
            *((_DWORD *)v26-- - 1) = v27;
          }
          *(_QWORD *)a4 = v26;
          *(_QWORD *)(a4 + 8) = v19;
          *(_QWORD *)(a4 + 16) = &v25[4 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = __C;
          v19 = v18 + 1;
        }
        *(_QWORD *)(a4 + 8) = v19;
        v15 = a1[8];
      }
      if (v15 >= 3)
      {
        v15 = 0;
        a1[8] = 0;
      }
      v9 = a1[9] + 1;
      a1[9] = v9;
      ++v7;
      v10 = v15;
    }
    while (v7 != v11);
  }
}

void resample_stream::push_44100_to_16000(_QWORD *a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  float __C;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 1)
  {
    v15 = v4;
    v16 = v5;
    v9 = a3;
    v10 = a1[3];
    do
    {
      v11 = *a2;
      v12 = a1[10];
      v13 = (_DWORD *)(v12 + 4 * (v10 & 0x3F));
      v13[64] = *a2;
      *v13 = v11;
      if ((v10 & 1) == 0)
      {
        __C = 0.0;
        vDSP_dotpr((const float *)(v12 + 4 * (((_BYTE)v10 + 41) & 0x3F)), 1, decimation_2_1_loose_table, 1, &__C, 0x18uLL);
        resample_stream::push_441_to_320_tight(a1, a4, __C);
        v10 = a1[3];
      }
      a1[3] = ++v10;
      ++a2;
      --v9;
    }
    while (v9);
  }
}

void resample_stream::push_2_1_tight(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  float v14;
  unint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float *v24;
  int v25;
  float __C;

  if (a3 >= 1)
  {
    v7 = 0;
    v8 = a4 + 16;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = a3;
    do
    {
      v11 = *(_DWORD *)(a2 + 4 * v7);
      v12 = *(_QWORD *)(a1 + 88);
      v13 = (_DWORD *)(v12 + 4 * v9);
      v13[256] = v11;
      *v13 = v11;
      if ((v9 & 1) == 0)
      {
        __C = 0.0;
        vDSP_dotpr((const float *)(v12 + 4 * (v9 - 95)), 1, decimation_2_1_tight_table, 1, &__C, 0x60uLL);
        v14 = __C;
        v16 = *(float **)(a4 + 8);
        v15 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v16 >= v15)
        {
          v18 = *(float **)a4;
          v19 = ((uint64_t)v16 - *(_QWORD *)a4) >> 2;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            std::vector<char>::__throw_length_error[abi:ne180100]();
          v21 = v15 - (_QWORD)v18;
          if (v21 >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v8, v22);
            v18 = *(float **)a4;
            v16 = *(float **)(a4 + 8);
          }
          else
          {
            v23 = 0;
          }
          v24 = (float *)&v23[4 * v19];
          *v24 = v14;
          v17 = v24 + 1;
          while (v16 != v18)
          {
            v25 = *((_DWORD *)v16-- - 1);
            *((_DWORD *)v24-- - 1) = v25;
          }
          *(_QWORD *)a4 = v24;
          *(_QWORD *)(a4 + 8) = v17;
          *(_QWORD *)(a4 + 16) = &v23[4 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v16 = __C;
          v17 = v16 + 1;
        }
        *(_QWORD *)(a4 + 8) = v17;
        v9 = *(_QWORD *)(a1 + 56);
      }
      *(_QWORD *)(a1 + 56) = ++v9;
      ++v7;
    }
    while (v7 != v10);
  }
}

char *resample_stream::push_1_1_tight(int a1, char *__src, int a3, uint64_t a4)
{
  return std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a4, *(_QWORD *)(a4 + 8), __src, &__src[4 * a3], a3);
}

void resample_stream::reset(resample_stream *this)
{
  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  bzero(*((void **)this + 10), 0x210uLL);
  bzero(*((void **)this + 11), 0x810uLL);
}

uint64_t resample_stream::stream_flow(uint64_t a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t (**)(_QWORD *))a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(a1 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t resample_stream::sample_rate_check(resample_stream *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 1;
  if (v1 > 44099)
  {
    if (v1 == 44100)
      return result;
    v3 = 48000;
  }
  else
  {
    if (v1 == 16000)
      return result;
    v3 = 32000;
  }
  if (v1 != v3)
    return 0;
  return result;
}

void resample_stream::push_441_to_320_tight(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v9;
  const float *v10;
  float v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;
  float __C;

  v5 = a1[4];
  v4 = a1[5];
  v6 = (float *)(a1[11] + 4 * v5);
  v6[256] = a3;
  *v6 = a3;
  v7 = a1[6];
  if (v7 - v4 <= 319)
  {
    v9 = a2 + 16;
    do
    {
      v10 = (const float *)(a1[11] + 4 * (*((_BYTE *)a1 + 32) - 95));
      __C = 0.0;
      vDSP_dotpr(v10, 1, &polyphase_coeffs_441_320[96 * (v4 - v7) + 30624], 1, &__C, 0x60uLL);
      v11 = __C;
      v13 = *(float **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(float **)a2;
        v16 = ((uint64_t)v13 - *(_QWORD *)a2) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v19);
          v15 = *(float **)a2;
          v13 = *(float **)(a2 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[4 * v16];
        *v21 = v11;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *((_DWORD *)v13-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v14;
        *(_QWORD *)(a2 + 16) = &v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = __C;
        v14 = v13 + 1;
      }
      *(_QWORD *)(a2 + 8) = v14;
      v4 = a1[5];
      v7 = a1[6] + 441;
      a1[6] = v7;
    }
    while (v7 - v4 < 320);
    v5 = a1[4];
  }
  a1[4] = v5 + 1;
  a1[5] = v4 + 320;
}

uint64_t resample_stream::get_samples_for_sigx_fft_step(resample_stream *this)
{
  int v1;
  std::runtime_error *exception;

  v1 = *((_DWORD *)this + 4);
  if (v1 > 44099)
  {
    if (v1 == 44100)
    {
      return 353;
    }
    else
    {
      if (v1 != 48000)
        goto LABEL_10;
      return 384;
    }
  }
  else
  {
    if (v1 != 16000)
    {
      if (v1 == 32000)
        return 256;
LABEL_10:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sample rate!");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    return 128;
  }
}

void sub_218C2EE38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_218C2F054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t shazam::CPUSearcher::CPUSearcher(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char a5)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = a5;
  shazam::virtual_array<char>::virtual_array(a1 + 24, a4);
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void shazam::CPUSearcher::search(_QWORD *a1, _QWORD **a2, uint64_t *a3, unint64_t a4, unint64_t a5, uint64_t (***a6)(_QWORD, unint64_t), uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  shazam::signature_info *v18;
  uint64_t v21;
  unint64_t i;

  for (i = a4; i < a5; ++i)
  {
    v21 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
    v11 = i;
    v12 = *a3;
    v13 = (**a6)(a6, i);
    v14 = a2[4];
    v16 = *v14;
    v15 = v14[1];
    if (*v14 != v15)
    {
      v17 = v13;
      v18 = (shazam::signature_info *)(v12 + 56 * v11);
      do
      {
        visit<shazam::CPUSearcher &,shazam::SongDataBase &,shazam::CPUOnePtDatabase &,shazam::CPULMFPDataBase &,shazam::basic_signature<(shazam::signature_density)24> const&,QueryConfig const&,unsigned long &,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>> const&,std::function<void ()(SearchResponse const&)> const&>(*(_DWORD *)(v16 + 28), (uint64_t)a1, *a2, a2[2], v16, v18, v17, (uint64_t *)&i, &v21, a7);
        v16 += 104;
      }
      while (v16 != v15);
    }
  }
}

void visit<shazam::CPUSearcher &,shazam::SongDataBase &,shazam::CPUOnePtDatabase &,shazam::CPULMFPDataBase &,shazam::basic_signature<(shazam::signature_density)24> const&,QueryConfig const&,unsigned long &,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>> const&,std::function<void ()(SearchResponse const&)> const&>(int a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, shazam::signature_info *a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  if (a1 == 12)
  {
    shazam::CPUSearcher::operator()<(AlgoType)12>(a2, a3, a4, a5, a6, a7, *a8, *a9, a10);
  }
  else
  {
    if (a1 != 1)
      std::terminate();
    shazam::CPUSearcher::operator()<(AlgoType)1>(a2, a3, a4, a5, a6, a7, *a8, *a9, a10);
  }
}

void shazam::CPUSearcher::operator()<(AlgoType)1>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, shazam::signature_info *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _OWORD v16[24];
  float32x2_t v17[5];
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v16[0] = *(_OWORD *)(a4 + 8);
  shazam::make_query<(AlgoType)1>(a5, (uint64_t)v16, a6, 0x36B0uLL, v17);
  shazam::CPUSearcher::search<(AlgoType)1,xpair_group<xpair_fields>>(a1, a2, a3, (_QWORD *)a4, (uint64_t)v17, a6, a7, a8, a9);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_218C2F3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, __int128 a12, std::runtime_error a13, __int128 a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43)
{
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const std::runtime_error *v49;
  std::runtime_error_vtbl *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  shazam::Query<(AlgoType)1,std::vector<shazam::lmfp<(shazam::fp_type)0>>>::~Query((_QWORD *)(v46 - 168));
  if (a2 == 1)
  {
    v49 = (const std::runtime_error *)__cxa_begin_catch(a1);
    std::runtime_error::runtime_error(&a11, v49);
    v50 = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
    a11.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
    a12 = (__int128)v49[1];
    std::runtime_error::runtime_error(&a13, &a11);
    a13.__vftable = v50;
    a14 = a12;
    a15 = 0;
    v52 = v44;
    v51 = *v44;
    a17 = v52[1];
    v53 = (**(uint64_t (***)(uint64_t))v51)(v51);
    a18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 24))(v51, v43, v53);
    a19 = 1;
    a20 = 1;
    a22 = 0;
    a27 = 0;
    LOBYTE(a28) = 0;
    *(__int128 *)((char *)&a36 + 4) = 0u;
    *(__int128 *)((char *)&a37 + 4) = 0u;
    *(__int128 *)((char *)&a38 + 4) = 0u;
    *(__int128 *)((char *)&a39 + 4) = 0u;
    *(__int128 *)((char *)&a40 + 4) = 0u;
    *(__int128 *)((char *)&a41 + 4) = 0u;
    *(__int128 *)((char *)&a42 + 4) = 0u;
    *(__int128 *)((char *)&a43 + 4) = 0u;
    *(__int128 *)((char *)&a28 + 4) = 0u;
    *(__int128 *)((char *)&a29 + 4) = 0u;
    *(__int128 *)((char *)&a30 + 4) = 0u;
    *(__int128 *)((char *)&a31 + 4) = 0u;
    *(__int128 *)((char *)&a32 + 4) = 0u;
    *(__int128 *)((char *)&a33 + 4) = 0u;
    *(__int128 *)((char *)&a34 + 4) = 0u;
    *(__int128 *)((char *)&a35 + 4) = 0u;
    a23 = 0;
    a24 = 0;
    a26 = 0;
    a25 = 0;
    v54 = *(_QWORD *)(v45 + 24);
    if (v54)
    {
      (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v54 + 48))(v54, &a13);
      tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base((uint64_t)&a13);
      MEMORY[0x219A2143C](&a11);
      __cxa_end_catch();
      JUMPOUT(0x218C2F3D0);
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
  _Unwind_Resume(a1);
}

void shazam::CPUSearcher::operator()<(AlgoType)12>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, shazam::signature_info *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _OWORD v16[24];
  float32x2_t v17[5];
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v16[0] = *(_OWORD *)(a4 + 8);
  shazam::make_query<(AlgoType)12>(a5, (uint64_t)v16, a6, 0x36B0uLL, v17);
  shazam::CPUSearcher::search<(AlgoType)12,xpair_group<xpair_fields>>(a1, a2, a3, (_QWORD *)a4, (uint64_t)v17, a6, a7, a8, a9);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_218C2F62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, __int128 a12, std::runtime_error a13, __int128 a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43)
{
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const std::runtime_error *v49;
  std::runtime_error_vtbl *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  shazam::Query<(AlgoType)1,std::vector<shazam::lmfp<(shazam::fp_type)0>>>::~Query((_QWORD *)(v46 - 168));
  if (a2 == 1)
  {
    v49 = (const std::runtime_error *)__cxa_begin_catch(a1);
    std::runtime_error::runtime_error(&a11, v49);
    v50 = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
    a11.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
    a12 = (__int128)v49[1];
    std::runtime_error::runtime_error(&a13, &a11);
    a13.__vftable = v50;
    a14 = a12;
    a15 = 0;
    v52 = v44;
    v51 = *v44;
    a17 = v52[1];
    v53 = (**(uint64_t (***)(uint64_t))v51)(v51);
    a18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 24))(v51, v43, v53);
    a19 = 1;
    a20 = 12;
    a22 = 0;
    a27 = 0;
    LOBYTE(a28) = 0;
    *(__int128 *)((char *)&a36 + 4) = 0u;
    *(__int128 *)((char *)&a37 + 4) = 0u;
    *(__int128 *)((char *)&a38 + 4) = 0u;
    *(__int128 *)((char *)&a39 + 4) = 0u;
    *(__int128 *)((char *)&a40 + 4) = 0u;
    *(__int128 *)((char *)&a41 + 4) = 0u;
    *(__int128 *)((char *)&a42 + 4) = 0u;
    *(__int128 *)((char *)&a43 + 4) = 0u;
    *(__int128 *)((char *)&a28 + 4) = 0u;
    *(__int128 *)((char *)&a29 + 4) = 0u;
    *(__int128 *)((char *)&a30 + 4) = 0u;
    *(__int128 *)((char *)&a31 + 4) = 0u;
    *(__int128 *)((char *)&a32 + 4) = 0u;
    *(__int128 *)((char *)&a33 + 4) = 0u;
    *(__int128 *)((char *)&a34 + 4) = 0u;
    *(__int128 *)((char *)&a35 + 4) = 0u;
    a23 = 0;
    a24 = 0;
    a26 = 0;
    a25 = 0;
    v54 = *(_QWORD *)(v45 + 24);
    if (v54)
    {
      (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v54 + 48))(v54, &a13);
      tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base((uint64_t)&a13);
      MEMORY[0x219A2143C](&a11);
      __cxa_end_catch();
      JUMPOUT(0x218C2F60CLL);
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
  _Unwind_Resume(a1);
}

void shazam::make_query<(AlgoType)1>(shazam::signature_info *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, unint64_t a4@<X3>, float32x2_t *a5@<X8>)
{
  shazam::signature_info *v7;
  float SampleLength;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  void (*v17)(void **__return_ptr, unint64_t);
  unint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  _DWORD *v41;
  unsigned int v42;
  char *v43;
  unint64_t v44;
  void **p_p;
  unint64_t v46;
  uint64_t v47;
  gsl::details *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  double v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  gsl::details *v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  void *exception;
  uint64_t error_code;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  shazam::signature_info *v76;
  unint64_t v77;
  int v78;
  uint64_t *v79;
  unint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  _DWORD *v83;
  unsigned int v84;
  _QWORD v85[5];
  char v86;
  void *v87;
  char *v88;
  char *v89;
  _DWORD v90[10];
  float32x2_t v91;
  void *v92;
  _DWORD *v93;
  uint64_t v94;
  void **v95;
  void **v96;
  void **v97;
  void *__p;
  void *v99;
  uint64_t v100;

  v7 = this;
  v100 = *MEMORY[0x24BDAC8D0];
  if ((float)(shazam::signature_info::getSampleLength(this) * 125.0) > 1792.0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"was ", 4);
    shazam::signature_info::getSampleLength(v7);
    v68 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"sec", 3);
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x130);
    v72 = v71;
    std::stringbuf::str();
    MEMORY[0x219A21424](exception, error_code, v72, v90);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  SampleLength = shazam::signature_info::getSampleLength(v7);
  shazam::matrix_for<(AlgoType)1>(a3, (uint64_t)v90, SampleLength);
  v87 = 0;
  v88 = 0;
  v89 = 0;
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&v87, a4);
  shazam::algo<(AlgoType)1>::tzones_for (v85);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v7 + 5) - *((_QWORD *)v7 + 4)) >> 3) >= 3)
  {
    v92 = 0;
    v93 = 0;
    v94 = 0;
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&v92, 0x64uLL);
    v11 = *((_QWORD *)v7 + 4);
    v10 = *((_QWORD *)v7 + 5);
    v76 = v7;
    if (v10 != v11)
    {
      v12 = 0;
      do
      {
        v13 = &v90[v12];
        v16 = v13[2];
        v15 = v13 + 2;
        v14 = v16;
        if (v16)
        {
          v17 = *(void (**)(void **__return_ptr, unint64_t))(a2 + 8);
          if (v17)
          {
            v17(&__p, v11 + 24 * v12);
            chooseAnchors((uint64_t *)&__p, *v15, v90, (uint64_t)&v92);
            if (__p)
            {
              v99 = __p;
              operator delete(__p);
            }
          }
          else
          {
            chooseAnchors((uint64_t *)(v11 + 24 * v12), v14, v90, (uint64_t)&v92);
          }
          v11 = *((_QWORD *)v76 + 4);
          v10 = *((_QWORD *)v76 + 5);
          if (v10 == v11)
          {
            v11 = *((_QWORD *)v76 + 5);
          }
          else
          {
            v18 = 0;
            v73 = 4 * v12;
            v74 = v12;
            do
            {
              v77 = v18;
              v19 = (char *)&v90[v12] + v18;
              v21 = v19[24];
              v20 = (unsigned __int8 *)(v19 + 24);
              v84 = v21;
              if (v21)
              {
                if (v86)
                {
                  LODWORD(__p) = v73 + v77;
                  if (std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v85, (int *)&__p))
                  {
                    v22 = std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v85, (int *)&__p);
                    if (!v22)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    v82 = *(uint64_t *)((char *)v22 + 20);
                    v23 = v82 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    v23 = 0;
                    LODWORD(v82) = 0;
                  }
                  v11 = *((_QWORD *)v76 + 4);
                  v84 = *v20;
                }
                else
                {
                  v23 = 0;
                  LODWORD(v82) = 0;
                }
                v24 = v77;
                v25 = *(char **)(v11 + 24 * v77);
                bzero(&__p, 0x780uLL);
                v26 = v92;
                v81 = v93;
                if (v92 != v93)
                {
                  v79 = (uint64_t *)(v11 + 24 * v77 + 8);
                  v80 = HIDWORD(v23);
                  if ((_DWORD)v82)
                    v27 = HIDWORD(v23) == 0;
                  else
                    v27 = 1;
                  v28 = v27;
                  v78 = v28;
                  do
                  {
                    v29 = *v26 + 8;
                    if (v78)
                    {
                      v30 = *v26 + 197;
                    }
                    else
                    {
                      v29 = *v26 + v82;
                      v30 = v29 + v80;
                    }
                    v31 = (char *)*v79;
                    if ((char *)*v79 == v25)
                    {
                      v38 = *v79;
                    }
                    else
                    {
                      v32 = (*v79 - (uint64_t)v25) >> 3;
                      do
                      {
                        v33 = v32 >> 1;
                        v34 = (unsigned int *)&v25[8 * (v32 >> 1)];
                        v36 = *v34;
                        v35 = (char *)(v34 + 2);
                        v32 += ~(v32 >> 1);
                        if (v36 < v29)
                          v25 = v35;
                        else
                          v32 = v33;
                      }
                      while (v32);
                      if (v31 == v25)
                      {
                        v38 = *v79;
                        v43 = v25;
                        v25 = (char *)*v79;
                        v31 = v43;
                      }
                      else
                      {
                        v37 = (v31 - v25) >> 3;
                        v38 = (uint64_t)v25;
                        do
                        {
                          v39 = v37 >> 1;
                          v40 = (unsigned int *)(v38 + 8 * (v37 >> 1));
                          v42 = *v40;
                          v41 = v40 + 2;
                          v37 += ~(v37 >> 1);
                          if (v42 < v30)
                            v38 = (uint64_t)v41;
                          else
                            v37 = v39;
                        }
                        while (v37);
                        v31 = v25;
                      }
                    }
                    v44 = (v38 - (uint64_t)v31) >> 3;
                    gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,0>((gsl::details *)&v95, (uint64_t)v25, v38);
                    if (v44 <= v84)
                    {
                      v44 = (unint64_t)v95;
                      p_p = v96;
                    }
                    else
                    {
                      if (v25 != (char *)v38)
                        memmove(&__p, v25, v38 - (_QWORD)v31);
                      p_p = &__p;
                      v46 = 126 - 2 * __clz(v44);
                      if ((char *)v38 == v31)
                        v47 = 0;
                      else
                        v47 = v46;
                      v48 = (gsl::details *)std::__introsort<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *,false>((uint64_t)&__p, (unint64_t *)&__p + v44, v47, 1);
                      if (v38 - (_QWORD)v31 == -8)
LABEL_98:
                        gsl::details::terminate(v48);
                    }
                    v83 = v26;
                    v49 = *(_QWORD *)v26;
                    v50 = (unsigned __int16)WORD2(*(_QWORD *)v26);
                    v51 = 0;
                    v52 = FreqLogTable::at((FreqLogTable *)(unsigned __int16)WORD2(*(_QWORD *)v26));
                    v53 = &p_p[v44];
                    v95 = p_p;
                    v96 = v53;
                    v97 = p_p;
                    LODWORD(v54) = 2 * (((v52 + -3.46573591) * 3103.75977) & 0x3FFF);
                    v55 = v49 << 32;
                    while (v97 != v53)
                    {
                      v56 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v95);
                      v54 = v54 & 0x7FFF | (((int)((v52
                                                  - FreqLogTable::at((FreqLogTable *)*((unsigned __int16 *)v56 + 2)))
                                                 * 151.569275) & 0x3FFu) << 15) | ((float)((float)(sqrtf((float)((float)((float)v50 * 7.8125) * 0.015625) * (float)(*(_DWORD *)v56 - v49)) / 830.36) * 120.0) << 25);
                      v57 = v50 - *((unsigned __int16 *)v56 + 2);
                      if (v57 < 0)
                        v57 = *((unsigned __int16 *)v56 + 2) - v50;
                      if (v57 >= 0x101)
                      {
                        v58 = v88;
                        if (v88 >= v89)
                        {
                          v60 = (v88 - (_BYTE *)v87) >> 3;
                          if ((unint64_t)(v60 + 1) >> 61)
                            std::vector<char>::__throw_length_error[abi:ne180100]();
                          v61 = (v89 - (_BYTE *)v87) >> 2;
                          if (v61 <= v60 + 1)
                            v61 = v60 + 1;
                          if ((unint64_t)(v89 - (_BYTE *)v87) >= 0x7FFFFFFFFFFFFFF8)
                            v62 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v62 = v61;
                          if (v62)
                            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)&v89, v62);
                          else
                            v63 = 0;
                          v64 = &v63[8 * v60];
                          *(_QWORD *)v64 = v55 | v54;
                          v59 = v64 + 8;
                          v66 = (char *)v87;
                          v65 = v88;
                          if (v88 != v87)
                          {
                            do
                            {
                              v67 = *((_QWORD *)v65 - 1);
                              v65 -= 8;
                              *((_QWORD *)v64 - 1) = v67;
                              v64 -= 8;
                            }
                            while (v65 != v66);
                            v65 = (char *)v87;
                          }
                          v87 = v64;
                          v88 = v59;
                          v89 = &v63[8 * v62];
                          if (v65)
                            operator delete(v65);
                        }
                        else
                        {
                          *(_QWORD *)v88 = v55 | v54;
                          v59 = v58 + 8;
                        }
                        v88 = v59;
                        if (v84 == ++v51)
                          break;
                      }
                      v48 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v95);
                      if (v95 != p_p || v96 != v53)
                        goto LABEL_98;
                    }
                    v26 = v83 + 2;
                  }
                  while (v83 + 2 != v81);
                  v24 = v77;
                  v11 = *((_QWORD *)v76 + 4);
                }
                v10 = *((_QWORD *)v76 + 5);
                v12 = v74;
              }
              else
              {
                v24 = v77;
              }
              v18 = v24 + 1;
            }
            while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
          }
        }
        ++v12;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
    v7 = v76;
  }
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::vector(&__p, (v88 - (_BYTE *)v87) >> 3);
  shazam::kvsort<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((uint64_t)&v87, (uint64_t)&__p);
  shazam::Query<(AlgoType)1,std::vector<shazam::lmfp<(shazam::fp_type)0>>>::Query(a5, v7, &v91, (uint64_t)&v87);
  if (__p)
  {
    v99 = __p;
    operator delete(__p);
  }
  if (v86)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table((uint64_t)v85);
  if (v87)
  {
    v88 = (char *)v87;
    operator delete(v87);
  }
}

void sub_218C2FF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  void *v49;
  int v50;

  if (a38 < 0)
  {
    operator delete(__p);
    if ((v50 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

uint64_t shazam::CPUSearcher::search<(AlgoType)1,xpair_group<xpair_fields>>(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float SampleLength;
  uint64_t v17;
  uint64_t v18;
  float v19;
  gsl::details *begin;
  uint64_t v21;
  unint64_t v22;
  gsl::details *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  gsl::details *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  gsl::details *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  int *v49;
  int v50;
  BOOL v51;
  int v52;
  shazam::signature_info *v53;
  unsigned int v54;
  float v55;
  float v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  float v60;
  float v61;
  void *v63;
  float v64;
  void *v65;
  float v66;
  double v67;
  double v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  float v78;
  unint64_t v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 *v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  gsl::details *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::vector<char> *v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  float *v110;
  uint64_t v112;
  unint64_t v113;
  _BYTE v114[20];
  _BYTE v115[48];
  uint64_t v116;
  _BYTE v117[20];
  _OWORD v118[17];
  double v119;
  float v120;
  __int128 v121;
  _BYTE v122[80];
  _BYTE v123[72];
  __int128 v124;
  _BYTE v125[2];
  uint64_t v126[3];
  uint64_t v127[3];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[2];
  gsl::details *v132;
  uint64_t v133;
  uint64_t v134;
  uint64x2_t v135;
  char v136;
  gsl::details *v137;
  uint64_t v138;
  _BYTE __src[259];
  _DWORD v140[2];
  __int128 v141;
  uint64_t v142;
  _BYTE v143[60];
  _BYTE v144[64];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  memset(&v144[4], 0, 60);
  memset(&v143[4], 0, 56);
  v140[0] = 0;
  *(_DWORD *)((char *)v140 + 3) = 0;
  v108 = *(_DWORD *)(a5 + 24);
  SampleLength = shazam::signature_info::getSampleLength(*(shazam::signature_info **)a5);
  memset(&__src[3], 0, 256);
  v109 = a6;
  v105 = *(unsigned int *)(a6 + 28);
  v17 = *(_QWORD *)(a5 + 40);
  v18 = *(_QWORD *)(a5 + 48);
  v19 = shazam::signature_info::getSampleLength(*(shazam::signature_info **)a5);
  v103 = (uint64_t *)(a1 + 80);
  std::vector<Result>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
  v21 = a4[4];
  v104 = a4;
  v22 = a4[5] - v21;
  if (!v21 && v22 >= 2)
    goto LABEL_85;
  v101 = v18;
  v23 = (gsl::details *)(v22 >> 1);
  v24 = gsl::make_span<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((gsl::details *)(a5 + 40));
  v25 = *(float *)(a5 + 28);
  v26 = *(float *)(a5 + 32);
  v134 = *(_QWORD *)(a1 + 24);
  v135 = vshrq_n_u64(*(uint64x2_t *)(a1 + 32), 3uLL);
  v136 = 0;
  v137 = shazam::search_fingerprints<(AlgoType)1,xpair_group<xpair_fields>>(v23, v21, a4 + 7, v24, v27, a4 + 10, &v134, v25, v26);
  v138 = v28;
  begin = (gsl::details *)shazam::virtual_array<xpair_group<xpair_fields>>::~virtual_array((uint64_t)&v134);
  v29 = v137;
  if ((unint64_t)v137 >= 0x1FFFFFFFFFFFFFFFLL)
    goto LABEL_85;
  v30 = *(_QWORD *)(a5 + 8);
  v110 = (float *)(a5 + 8);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(a1 + 64) - v31;
  if (8 * (uint64_t)v137 > v32)
  {
    std::vector<char>::__append((std::vector<char> *)(a1 + 56), 8 * (_QWORD)v137 - v32);
    v31 = *(_QWORD *)(a1 + 56);
  }
  if (v29 && !v31)
LABEL_85:
    gsl::details::terminate(begin);
  v96 = v30;
  v97 = v29;
  v132 = v29;
  v133 = v31;
  shazam::xpairsort<xpair_group<xpair_fields>>((uint64_t)&v137, (uint64_t)&v132);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  v131[0] = gsl::make_span<std::vector<unsigned int>>((gsl::details *)(a2 + 9));
  v131[1] = v33;
  shazam::bin_tracks<xpair_group<xpair_fields>>((gsl::details *)v131, (unint64_t *)&v137, (void **)(a1 + 128));
  v98 = v17;
  v99 = a7;
  v100 = a8;
  v35 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) - v35 != 16)
  {
    v36 = 0;
    v107 = 0;
    v106 = 0;
    v102 = (std::vector<char> *)(a1 + 56);
    v37 = (void **)(a5 + 64);
    while (1)
    {
      *(float *)&v112 = SampleLength;
      v113 = 0;
      *(_DWORD *)v114 = v108;
      *(_OWORD *)&v114[4] = *(_OWORD *)v144;
      *(_OWORD *)v115 = *(_OWORD *)&v144[16];
      *(_OWORD *)&v115[16] = *(_OWORD *)&v144[32];
      *(_OWORD *)&v115[32] = *(_OWORD *)&v144[48];
      v116 = 0;
      *(_DWORD *)v117 = 0;
      *(_OWORD *)&v117[4] = *(_OWORD *)v143;
      v118[0] = *(_OWORD *)&v143[16];
      v118[1] = *(_OWORD *)&v143[32];
      v34 = *(__n128 *)&v143[44];
      *(_OWORD *)((char *)&v118[1] + 12) = *(_OWORD *)&v143[44];
      *(_QWORD *)((char *)&v118[2] + 12) = 0;
      *(_QWORD *)((char *)&v118[3] + 4) = 0;
      HIDWORD(v118[3]) = v140[0];
      *(_DWORD *)((char *)&v118[3] + 15) = *(_DWORD *)((char *)v140 + 3);
      BYTE3(v118[4]) = 0;
      v38 = *(_QWORD *)(v35 + 16 * v36 + 8);
      v39 = v36 + 1;
      v40 = *(_QWORD *)(v35 + 16 * (v36 + 1) + 8) - v38;
      v113 = v40;
      if (v40 >= 3)
      {
        *(_QWORD *)((char *)v118 + 12) = *(_QWORD *)(v35 + 16 * v36);
        *(_QWORD *)((char *)&v118[1] + 4) = *(_QWORD *)(*a2 + 8 * *(_QWORD *)((char *)v118 + 12));
        *(_QWORD *)((char *)&v118[1] + 12) = (uint64_t)(float)(*(float *)(a2[3] + 4 * *(_QWORD *)((char *)v118 + 12))
                                                            * 1000.0);
        begin = *(gsl::details **)(a1 + 56);
        v41 = *(_QWORD *)(a1 + 64) - (_QWORD)begin;
        if (8 * v40 > v41)
        {
          std::vector<char>::__append(v102, 8 * v40 - v41);
          begin = (gsl::details *)v102->__begin_;
        }
        if (8 * v40 && !begin)
          goto LABEL_85;
        v132 = (gsl::details *)(v40 & 0x1FFFFFFFFFFFFFFFLL);
        v133 = (uint64_t)begin;
        if ((unint64_t)v137 <= v38)
          goto LABEL_85;
        memcpy(begin, (const void *)(v138 + 8 * v38), 8 * v40);
        v129 = 0;
        v128 = 0;
        v130 = 0;
        v42 = v132;
        if ((unint64_t)v132 >= 2)
        {
          v43 = v133;
          v44 = (int *)(v133 + 4);
          v45 = 1;
          do
          {
            v46 = *(_QWORD *)(v43 + 8 * v45);
            v47 = v44;
            v48 = v45;
            v49 = v44;
            do
            {
              v50 = *v49;
              v49 -= 2;
              if (v50 <= SHIDWORD(v46))
                break;
              *(_QWORD *)(v47 + 1) = *(_QWORD *)(v47 - 1);
              v47 = v49;
              --v48;
            }
            while (v48);
            *(_QWORD *)(v43 + 8 * v48) = v46;
            ++v45;
            v44 += 2;
          }
          while ((gsl::details *)v45 != v42);
        }
        if (*(_BYTE *)(v109 + 25))
        {
          v127[0] = a1;
          v127[1] = (uint64_t)&v128;
          v127[2] = (uint64_t)&v112;
          _ZN6shazam14focus_multipleILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType1ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(v132, v133, *(unsigned int *)v114, (uint64_t (*)(uint64_t))lm_diff<xpair_group<xpair_fields>>, v127);
        }
        else
        {
          v126[0] = a1;
          v126[1] = (uint64_t)&v128;
          v126[2] = (uint64_t)&v112;
          _ZN6shazam5focusILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType1ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(v132, v133, *(unsigned int *)v114, (uint64_t (*)(unint64_t))lm_diff<xpair_group<xpair_fields>>, v126);
        }
        if (v128 == v129)
        {
          if (*(float *)(v109 + 20) == 0.0)
          {
            v79 = *(_QWORD *)(a1 + 88);
            if (v79 >= *(_QWORD *)(a1 + 96))
            {
              v80 = std::vector<Result>::__push_back_slow_path<Result const&>(v103, (uint64_t)&v112);
            }
            else
            {
              std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>((uint64_t)v103, (uint64_t)&v112);
              v80 = v79 + 184;
            }
            *(_QWORD *)(a1 + 88) = v80;
          }
        }
        else
        {
          v51 = *(_QWORD *)((char *)&v118[1] + 4) != v105 || (_DWORD)v105 == 0;
          v52 = v107;
          if (!v51)
            v52 = 1;
          v107 = v52;
          v53 = *(shazam::signature_info **)a5;
          if (*((unsigned __int8 *)v104 + 24) >= (-85
                                                                                * ((*(_DWORD *)(*(_QWORD *)a5 + 40)
                                                                                                - *(_DWORD *)(*(_QWORD *)a5 + 32)) >> 3)))
            v54 = (-85
                                  * ((*(_DWORD *)(*(_QWORD *)a5 + 40) - *(_DWORD *)(*(_QWORD *)a5 + 32)) >> 3));
          else
            v54 = *((unsigned __int8 *)v104 + 24);
          v125[0] = v54;
          v125[1] = 3;
          v55 = shazam::signature_info::getSampleLength(v53);
          v56 = shazam::thresholdScore<(AlgoType)1>(v54, *(unsigned __int8 *)(a2[6] + *(_QWORD *)((char *)v118 + 12)), 1.0, v55);
          LODWORD(v121) = 0;
          *((_QWORD *)&v121 + 1) = 0;
          *(_DWORD *)v122 = 0;
          *(_QWORD *)&v122[72] = 0;
          *(_DWORD *)v123 = 0;
          memset(&v122[8], 0, 60);
          memset(&v123[8], 0, 64);
          v124 = 0u;
          v57 = v129;
          if (v128 == v129)
          {
            v78 = 0.0;
          }
          else
          {
            v58 = (__int128 *)(v128 + 80);
            do
            {
              v59 = *(_QWORD *)(a2[12] + 8 * *(_QWORD *)((char *)v118 + 12));
              v61 = *((float *)v58 - 6);
              v60 = *((float *)v58 - 5);
              v120 = v60;
              v119 = *((double *)v58 - 2);
              if (*(float *)(a5 + 8) <= v60 && *(float *)(a5 + 12) >= v60)
              {
                if (*(_QWORD *)(a5 + 64) == *(_QWORD *)(a5 + 72))
                {
                  shazam::peaksToTFPeaks<std::vector<std::vector<spectral_peak_t>>>((_QWORD *)(*(_QWORD *)a5 + 32), v125, (uint64_t)&v141);
                  v63 = *v37;
                  if (*v37)
                  {
                    *(_QWORD *)(a5 + 72) = v63;
                    operator delete(v63);
                  }
                  *(_OWORD *)(a5 + 64) = v141;
                  *(_QWORD *)(a5 + 80) = v142;
                }
                if (shazam::fit_points(a3, a5 + 64, v110, *((_QWORD *)v58 + 6), &v120, &v119, a1 + 104, 3u, v61))
                {
                  *((_QWORD *)v58 + 1) = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
                  *((float *)v58 - 1) = v120;
                  v64 = v119 * 8.0 + (double)v59;
                  *(float *)v58 = v64;
                  if (*(_QWORD *)(a5 + 64) == *(_QWORD *)(a5 + 72))
                  {
                    shazam::peaksToTFPeaks<std::vector<std::vector<spectral_peak_t>>>((_QWORD *)(*(_QWORD *)a5 + 32), v125, (uint64_t)&v141);
                    v65 = *v37;
                    if (*v37)
                    {
                      *(_QWORD *)(a5 + 72) = v65;
                      operator delete(v65);
                    }
                    *(_OWORD *)(a5 + 64) = v141;
                    *(_QWORD *)(a5 + 80) = v142;
                  }
                  if (shazam::fit_points(a3, a5 + 64, v110, *(uint64_t *)((char *)v118 + 12), &v120, &v119, a1 + 104, 3u, v61))
                  {
                    *((float *)v58 + 10) = shazam::score_match((uint64_t *)(a1 + 104));
                    *((float *)v58 + 11) = v66;
                    *((_QWORD *)v58 + 4) = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
                    *((float *)v58 + 4) = v120;
                    v67 = v119;
                    *((double *)v58 - 2) = v119;
                    v68 = v67 * 8.0 + (double)v59;
                    *((double *)v58 + 3) = v68;
                    *((double *)v58 + 3) = v68
                                         + (float)(*(unsigned __int8 *)(*(_QWORD *)a5 + 20)
                                                 - *(unsigned __int8 *)(a2[15] + *((_QWORD *)v58 + 6)))
                                         * 8.0;
                    v69 = *(unsigned __int8 *)(a2[6] + *(_QWORD *)((char *)v118 + 12)) >= v54
                        ? v54
                        : *(unsigned __int8 *)(a2[6] + *(_QWORD *)((char *)v118 + 12));
                    *((_QWORD *)v58 + 9) = v69;
                    if (v66 > *(float *)&v123[28])
                    {
                      v70 = *(v58 - 4);
                      v121 = *(v58 - 5);
                      *(_OWORD *)v122 = v70;
                      v71 = *(v58 - 3);
                      v72 = *(v58 - 2);
                      v73 = *v58;
                      *(_OWORD *)&v122[48] = *(v58 - 1);
                      *(_OWORD *)&v122[64] = v73;
                      *(_OWORD *)&v122[16] = v71;
                      *(_OWORD *)&v122[32] = v72;
                      v74 = v58[1];
                      v75 = v58[2];
                      v76 = v58[4];
                      *(_OWORD *)&v123[32] = v58[3];
                      *(_OWORD *)&v123[48] = v76;
                      *(_OWORD *)v123 = v74;
                      *(_OWORD *)&v123[16] = v75;
                      std::string::operator=((std::string *)&v123[64], (const std::string *)(v58 + 5));
                    }
                  }
                }
              }
              v77 = (uint64_t)v58 + 104;
              v58 = (__int128 *)((char *)v58 + 184);
            }
            while (v77 != v57);
            v78 = *(float *)&v123[28];
          }
          v81 = v78 * 128.0;
          *(float *)&v123[28] = v81;
          if (v81 >= (float)(v56 * *(float *)(v109 + 20)))
          {
            if (*(_QWORD *)&v123[56] == 3)
              *(float *)&v123[28] = v81 * 1.25;
            v82 = *(_QWORD *)(a1 + 88);
            if (v82 >= *(_QWORD *)(a1 + 96))
            {
              v83 = std::vector<Result>::__push_back_slow_path<Result const&>(v103, (uint64_t)&v121);
            }
            else
            {
              std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>((uint64_t)v103, (uint64_t)&v121);
              v83 = v82 + 184;
            }
            *(_QWORD *)(a1 + 88) = v83;
          }
          if (SHIBYTE(v124) < 0)
            operator delete(*(void **)&v123[64]);
          ++v106;
        }
        *(_QWORD *)&v121 = &v128;
        std::vector<Result>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
        if (SBYTE3(v118[4]) < 0)
          operator delete(*(void **)((char *)&v118[2] + 12));
      }
      v35 = *(_QWORD *)(a1 + 128);
      v36 = v39;
      if (v39 >= ((*(_QWORD *)(a1 + 136) - v35) >> 4) - 1)
        goto LABEL_77;
    }
  }
  v106 = 0;
  LOBYTE(v107) = 0;
LABEL_77:
  v84 = *(_QWORD *)(a1 + 80);
  v85 = *(char **)(a1 + 88);
  v86 = 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * ((uint64_t)&v85[-v84] >> 3));
  if (v85 == (char *)v84)
    v87 = 0;
  else
    v87 = v86;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,Result *,false>(v84, v85, (uint64_t)&v112, v87, 1, v34);
  v88 = *(unsigned int *)(v109 + 36);
  v89 = *(__int128 **)(a1 + 80);
  v90 = *(__int128 **)(a1 + 88);
  if ((_DWORD)v88 && 0xD37A6F4DE9BD37A7 * (((char *)v90 - (char *)v89) >> 3) > v88)
  {
    std::vector<Result>::resize(v103, *(unsigned int *)(v109 + 36));
    v89 = *(__int128 **)(a1 + 80);
    v90 = *(__int128 **)(a1 + 88);
  }
  v112 = 0;
  v113 = 0;
  *(_QWORD *)v114 = 0;
  std::vector<Result>::__init_with_size[abi:ne180100]<Result*,Result*>(&v112, v89, v90, 0xD37A6F4DE9BD37A7 * (((char *)v90 - (char *)v89) >> 3));
  v114[16] = 1;
  v92 = *(_QWORD *)a1;
  v91 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v115[4] = v99;
  *(_QWORD *)&v115[12] = v91;
  v93 = (**(uint64_t (***)(uint64_t))v92)(v92);
  *(_QWORD *)&v115[20] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v92 + 24))(v92, v100, v93);
  *(_QWORD *)&v115[28] = 1;
  *(_DWORD *)&v115[36] = 1;
  *(float *)&v115[44] = v19;
  v116 = (v101 - v98) >> 3;
  *(_QWORD *)v117 = v96;
  *(_QWORD *)&v117[8] = v97;
  *(_DWORD *)&v117[16] = v105;
  *(_QWORD *)((char *)v118 + 4) = v106;
  BYTE12(v118[0]) = v107;
  memcpy((char *)v118 + 13, __src, 0x103uLL);
  v94 = *(_QWORD *)(a9 + 24);
  if (!v94)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v112);
  return tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base((uint64_t)&v112);
}

void sub_218C30A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *shazam::Query<(AlgoType)1,std::vector<shazam::lmfp<(shazam::fp_type)0>>>::~Query(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

float shazam::signature_info::getSampleLength(shazam::signature_info *this)
{
  int v1;
  double v2;
  double v3;

  if (!*((_BYTE *)this + 20))
    return (float)*((unint64_t *)this + 1) / (float)*((unsigned int *)this + 4);
  v1 = *((_DWORD *)this + 4);
  if (v1 > 44099)
  {
    if (v1 == 44100)
    {
      v2 = (double)(*((_QWORD *)this + 1) - 10584);
      v3 = 44100.0;
      return v2 / v3;
    }
    if (v1 == 48000)
    {
      v2 = (double)(*((_QWORD *)this + 1) - 11520);
      v3 = 48000.0;
      return v2 / v3;
    }
    return (float)((float)*((unint64_t *)this + 1) / (float)v1)
         + (float)((float)(2 * *((unsigned __int8 *)this + 20)) / -125.0);
  }
  if (v1 == 8000)
  {
    v2 = (double)(*((_QWORD *)this + 1) - 1920);
    v3 = 8000.0;
    return v2 / v3;
  }
  if (v1 != 16000)
    return (float)((float)*((unint64_t *)this + 1) / (float)v1)
         + (float)((float)(2 * *((unsigned __int8 *)this + 20)) / -125.0);
  v2 = (double)(*((_QWORD *)this + 1) - 3840);
  v3 = 16000.0;
  return v2 / v3;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_218C30CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x219A21508](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A21508](a1 + 112);
  return a1;
}

void shazam::matrix_for<(AlgoType)1>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  shazam::algo<(AlgoType)1>::matrix_for (*(_DWORD *)a1, a2);
  if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    shazam::intensify_matrix((uint64_t)v10, (uint64_t)v12, a3, *(uint8x8_t *)&v6);
    v7 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 32) = v13;
  }
  v8 = *(_QWORD *)(a1 + 4);
  if ((v8 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 40) = v8;
  v9 = *(_QWORD *)(a1 + 12);
  if ((v9 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 44) = v9;
  if (*(_BYTE *)(a1 + 32))
    *(_DWORD *)(a2 + 4) >>= 1;
}

void std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void shazam::kvsort<std::vector<shazam::lmfp<(shazam::fp_type)0>>>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[4096];
  uint64_t v28;

  MEMORY[0x24BDAC7A8](a1, a2);
  v28 = *MEMORY[0x24BDAC8D0];
  v5 = *v2;
  v4 = v2[1];
  v6 = v4 - *v2;
  if ((unint64_t)v6 >= 0x10)
  {
    v7 = v3;
    v8 = v2;
    bzero(v27, 0x1000uLL);
    while (v5 != v4)
    {
      v9 = 0;
      v10 = v27;
      do
      {
        ++*(_DWORD *)&v10[4 * *(unsigned __int8 *)(v5 + v9++)];
        v10 += 1024;
      }
      while (v9 != 4);
      v5 += 8;
    }
    v11 = 0;
    v12 = v6 >> 3;
    v13 = v27;
    do
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = *(_DWORD *)&v13[v14];
        *(_DWORD *)&v13[v14] = v15;
        v15 += v16;
        v14 += 4;
      }
      while (v14 != 1024);
      ++v11;
      v13 += 1024;
    }
    while (v11 != 4);
    v17 = 0;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v18 = 0;
      v19 = &v27[1024 * v17];
      v20 = v12;
      do
      {
        v21 = (_QWORD *)(*v8 + v18);
        v22 = *((unsigned __int8 *)v21 + v17);
        v23 = *(unsigned int *)&v19[4 * v22];
        *(_DWORD *)&v19[4 * v22] = v23 + 1;
        *(_QWORD *)(*v7 + 8 * v23) = *v21;
        v18 += 8;
        --v20;
      }
      while (v20);
      v24 = *v8;
      *v8 = *v7;
      *v7 = v24;
      v25 = v8[1];
      v8[1] = v7[1];
      v7[1] = v25;
      v26 = v8[2];
      v8[2] = v7[2];
      v7[2] = v26;
      ++v17;
    }
    while (v17 != 4);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x219A21448](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x219A21454](v13);
  return a1;
}

void sub_218C31154(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x219A21454](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x218C31134);
}

void sub_218C3119C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_218C312D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24D9B6408, MEMORY[0x24BEDAB00]);
}

void sub_218C313E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

gsl::details *gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,0>(gsl::details *a1, uint64_t a2, uint64_t a3)
{
  return gsl::span<peak_tf const,18446744073709551615ul>::storage_type<gsl::details::extent_type<18446744073709551615ul>>::storage_type<unsigned long>(a1, a2, (a3 - a2) >> 3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t *v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  unint64_t *v45;
  BOOL v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  unint64_t *v61;
  unint64_t *v62;
  unsigned int v63;
  BOOL v64;
  BOOL v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  _BOOL4 v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  unint64_t *v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  unint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  unint64_t *v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  _QWORD *v111;
  int64_t v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  _BOOL4 v150;
  _BOOL4 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int v156;
  BOOL v157;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  _BOOL4 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  BOOL v169;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *((unsigned __int16 *)a2 - 1);
        v77 = *(unsigned __int16 *)(v8 + 6);
        v95 = v76 == v77;
        v78 = v76 > v77;
        if (v95)
          v78 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 4);
        if (v78)
        {
          v79 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v79;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v8, (unint64_t *)(v8 + 8), a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, (uint64_t)(a2 - 1));
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, v8 + 24);
        v80 = *((unsigned __int16 *)a2 - 1);
        v81 = *(unsigned __int16 *)(v8 + 30);
        v95 = v80 == v81;
        v82 = v80 > v81;
        if (v95)
          v82 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 28);
        if (v82)
        {
          v83 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(a2 - 1);
          *(a2 - 1) = v83;
          LODWORD(v83) = *(unsigned __int16 *)(v8 + 30);
          v84 = *(unsigned __int16 *)(v8 + 22);
          v95 = (_DWORD)v83 == v84;
          v85 = v83 > v84;
          if (v95)
            v85 = *(unsigned __int16 *)(v8 + 28) > *(unsigned __int16 *)(v8 + 20);
          if (v85)
          {
            v87 = *(_QWORD *)(v8 + 16);
            v86 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v86;
            *(_QWORD *)(v8 + 24) = v87;
            v88 = HIWORD(v86);
            v89 = *(unsigned __int16 *)(v8 + 14);
            v95 = v89 == HIWORD(v86);
            v90 = v89 < HIWORD(v86);
            if (v95)
              v90 = *(unsigned __int16 *)(v8 + 12) < WORD2(v86);
            if (v90)
            {
              v91 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v86;
              *(_QWORD *)(v8 + 16) = v91;
              LODWORD(v91) = *(unsigned __int16 *)(v8 + 6);
              v95 = (_DWORD)v91 == (_DWORD)v88;
              v92 = v91 < v88;
              if (v95)
                v92 = *(unsigned __int16 *)(v8 + 4) < WORD2(v86);
              if (v92)
              {
                v93 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v86;
                *(_QWORD *)(v8 + 8) = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v94 = (unint64_t *)(v8 + 8);
          v95 = (unint64_t *)v8 == a2 || v94 == a2;
          v96 = v95;
          if ((a4 & 1) != 0)
          {
            if ((v96 & 1) == 0)
            {
              v97 = 0;
              v98 = (_QWORD *)v8;
              do
              {
                v99 = *((unsigned __int16 *)v98 + 7);
                v100 = *((unsigned __int16 *)v98 + 3);
                v101 = *((unsigned __int16 *)v98 + 6);
                v102 = *((unsigned __int16 *)v98 + 2);
                v98 = v94;
                v103 = v101 > v102;
                v95 = v99 == v100;
                v104 = v99 > v100;
                if (!v95)
                  v103 = v104;
                if (v103)
                {
                  v105 = *v98;
                  v106 = HIWORD(*v98);
                  v107 = v97;
                  while (1)
                  {
                    v108 = v8 + v107;
                    *(_QWORD *)(v8 + v107 + 8) = *(_QWORD *)(v8 + v107);
                    if (!v107)
                      break;
                    v109 = *(unsigned __int16 *)(v108 - 2);
                    v110 = *(unsigned __int16 *)(v108 - 4) < WORD2(v105);
                    if (v109 != (_DWORD)v106)
                      v110 = v109 < v106;
                    v107 -= 8;
                    if (!v110)
                    {
                      v111 = (_QWORD *)(v8 + v107 + 8);
                      goto LABEL_118;
                    }
                  }
                  v111 = (_QWORD *)v8;
LABEL_118:
                  *v111 = v105;
                }
                v94 = v98 + 1;
                v97 += 8;
              }
              while (v98 + 1 != a2);
            }
          }
          else if ((v96 & 1) == 0)
          {
            do
            {
              v159 = *(unsigned __int16 *)(v7 + 14);
              v160 = *(unsigned __int16 *)(v7 + 6);
              v161 = *(unsigned __int16 *)(v7 + 12);
              v162 = *(unsigned __int16 *)(v7 + 4);
              v7 = (uint64_t)v94;
              v95 = v159 == v160;
              v163 = v159 > v160;
              if (v95)
                v163 = v161 > v162;
              if (v163)
              {
                v164 = *v94;
                v165 = HIWORD(*v94);
                do
                {
                  v166 = v94;
                  v167 = *--v94;
                  *v166 = v167;
                  v168 = *((unsigned __int16 *)v166 - 5);
                  v169 = *((unsigned __int16 *)v166 - 6) < WORD2(v164);
                  if (v168 != (_DWORD)v165)
                    v169 = v168 < v165;
                }
                while (v169);
                *v94 = v164;
              }
              v94 = (unint64_t *)(v7 + 8);
            }
            while ((unint64_t *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v112 = (v10 - 2) >> 1;
            v113 = v112;
            do
            {
              v114 = v113;
              if (v112 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = v8 + 8 * v115;
                if (2 * v114 + 2 < (uint64_t)v10)
                {
                  v117 = *(unsigned __int16 *)(v116 + 6);
                  v118 = *(unsigned __int16 *)(v116 + 14);
                  result = *(unsigned __int16 *)(v116 + 12);
                  v95 = v117 == v118;
                  v119 = v117 > v118;
                  if (v95)
                    v119 = *(unsigned __int16 *)(v116 + 4) > result;
                  v116 += 8 * v119;
                  if (v119)
                    v115 = 2 * v114 + 2;
                }
                v120 = *(unsigned __int16 *)(v116 + 6);
                v121 = v8 + 8 * v114;
                v122 = *(unsigned __int16 *)(v121 + 6);
                v123 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v121 + 4);
                v95 = v120 == v122;
                v124 = v120 > v122;
                if (v95)
                  v124 = v123;
                if (!v124)
                {
                  v125 = (_QWORD *)(v8 + 8 * v114);
                  v126 = *v125;
                  v127 = HIWORD(*v125);
                  do
                  {
                    v128 = v125;
                    v125 = (_QWORD *)v116;
                    *v128 = *(_QWORD *)v116;
                    if (v112 < v115)
                      break;
                    v129 = (2 * v115) | 1;
                    v116 = v8 + 8 * v129;
                    v130 = 2 * v115 + 2;
                    if (v130 < (uint64_t)v10)
                    {
                      v131 = *(unsigned __int16 *)(v116 + 6);
                      v132 = *(unsigned __int16 *)(v116 + 14);
                      v95 = v131 == v132;
                      v133 = v131 > v132;
                      if (v95)
                        v133 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v116 + 12);
                      v116 += 8 * v133;
                      if (v133)
                        v129 = v130;
                    }
                    v134 = *(unsigned __int16 *)(v116 + 6);
                    v95 = v134 == (_DWORD)v127;
                    LODWORD(result) = v134 > v127;
                    result = v95 ? *(unsigned __int16 *)(v116 + 4) > WORD2(v126) : result;
                    v115 = v129;
                  }
                  while ((_DWORD)result != 1);
                  *v125 = v126;
                }
              }
              v113 = v114 - 1;
            }
            while (v114);
            v135 = (unint64_t)v9 >> 3;
            do
            {
              v136 = 0;
              v137 = *(_QWORD *)v8;
              v138 = (_QWORD *)v8;
              do
              {
                v139 = &v138[v136 + 1];
                v140 = (2 * v136) | 1;
                v141 = 2 * v136 + 2;
                if (v141 < v135)
                {
                  v142 = *((unsigned __int16 *)v139 + 3);
                  v143 = *((unsigned __int16 *)v139 + 7);
                  result = *((unsigned __int16 *)v139 + 6);
                  v95 = v142 == v143;
                  v144 = v142 > v143;
                  if (v95)
                    v144 = *((unsigned __int16 *)v139 + 2) > result;
                  v139 += v144;
                  if (v144)
                    v140 = v141;
                }
                *v138 = *v139;
                v138 = v139;
                v136 = v140;
              }
              while (v140 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
              if (v139 == --a2)
              {
                *v139 = v137;
              }
              else
              {
                *v139 = *a2;
                *a2 = v137;
                v145 = (uint64_t)v139 - v8 + 8;
                if (v145 >= 9)
                {
                  v146 = (((unint64_t)v145 >> 3) - 2) >> 1;
                  v147 = v8 + 8 * v146;
                  v148 = *(unsigned __int16 *)(v147 + 6);
                  v149 = *((unsigned __int16 *)v139 + 3);
                  v150 = *(unsigned __int16 *)(v147 + 4) > *((unsigned __int16 *)v139 + 2);
                  v95 = v148 == v149;
                  v151 = v148 > v149;
                  if (!v95)
                    v150 = v151;
                  if (v150)
                  {
                    v152 = *v139;
                    v153 = HIWORD(*v139);
                    do
                    {
                      v154 = v139;
                      v139 = (unint64_t *)(v8 + 8 * v146);
                      *v154 = *v139;
                      if (!v146)
                        break;
                      v146 = (v146 - 1) >> 1;
                      v155 = v8 + 8 * v146;
                      v156 = *(unsigned __int16 *)(v155 + 6);
                      v157 = *(unsigned __int16 *)(v155 + 4) > WORD2(v152);
                      if (v156 != (_DWORD)v153)
                        v157 = v156 > v153;
                    }
                    while (v157);
                    *v139 = v152;
                  }
                }
              }
            }
            while (v135-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8 * (v10 >> 1)), (unint64_t *)v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v7, (unint64_t *)(v7 + 8 * (v10 >> 1)), a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8), v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 16), (unint64_t *)(v7 + 8 + 8 * v11), a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v12 - 1, v12, (unint64_t *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(unsigned __int16 *)(v7 - 2);
          v15 = *(unsigned __int16 *)(v7 + 6);
          v95 = v14 == v15;
          v16 = v14 > v15;
          if (v95)
            v16 = *(unsigned __int16 *)(v7 - 4) > *(unsigned __int16 *)(v7 + 4);
          if (!v16)
          {
            v47 = *(_QWORD *)v7;
            v48 = (unsigned __int16)WORD2(*(_QWORD *)v7);
            v49 = HIWORD(*(_QWORD *)v7);
            v50 = *((unsigned __int16 *)a2 - 1);
            v51 = *((unsigned __int16 *)a2 - 2) < v48;
            v95 = v50 == (_DWORD)v49;
            v52 = v50 < v49;
            if (!v95)
              v51 = v52;
            if (v51)
            {
              v53 = v7;
              do
              {
                v8 = v53 + 8;
                v54 = *(unsigned __int16 *)(v53 + 14);
                v55 = *(unsigned __int16 *)(v53 + 12) < v48;
                v95 = v54 == (_DWORD)v49;
                v56 = v54 < v49;
                if (v95)
                  v56 = v55;
                v53 = v8;
              }
              while (!v56);
            }
            else
            {
              v57 = v7 + 8;
              do
              {
                v8 = v57;
                if (v57 >= (unint64_t)a2)
                  break;
                v58 = *(unsigned __int16 *)(v57 + 6);
                v59 = *(unsigned __int16 *)(v8 + 4) < v48;
                v95 = v58 == (_DWORD)v49;
                v60 = v58 < v49;
                if (!v95)
                  v59 = v60;
                v57 = v8 + 8;
              }
              while (!v59);
            }
            v61 = a2;
            if (v8 < (unint64_t)a2)
            {
              v62 = a2;
              do
              {
                v61 = v62 - 1;
                v63 = *((unsigned __int16 *)v62 - 1);
                v64 = *((unsigned __int16 *)v62 - 2) < v48;
                v95 = v63 == (_DWORD)v49;
                v65 = v63 < v49;
                if (v95)
                  v65 = v64;
                v62 = v61;
              }
              while (v65);
            }
            while (v8 < (unint64_t)v61)
            {
              v66 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *v61;
              *v61 = v66;
              do
              {
                v67 = *(unsigned __int16 *)(v8 + 14);
                v68 = *(unsigned __int16 *)(v8 + 12);
                v8 += 8;
                v69 = v68 < v48;
                v95 = v67 == (_DWORD)v49;
                v70 = v67 < v49;
                if (v95)
                  v70 = v69;
              }
              while (!v70);
              do
              {
                v71 = *((unsigned __int16 *)v61 - 1);
                v72 = *((unsigned __int16 *)v61-- - 2);
                v73 = v72 < v48;
                v95 = v71 == (_DWORD)v49;
                v74 = v71 < v49;
                if (v95)
                  v74 = v73;
              }
              while (v74);
            }
            v75 = (unint64_t *)(v8 - 8);
            if (v8 - 8 != v7)
              *(_QWORD *)v7 = *v75;
            a4 = 0;
            *v75 = v47;
            continue;
          }
        }
        v17 = 0;
        v18 = *(_QWORD *)v7;
        v19 = (unsigned __int16)WORD2(*(_QWORD *)v7);
        v20 = HIWORD(*(_QWORD *)v7);
        do
        {
          v21 = *(unsigned __int16 *)(v7 + v17 + 14);
          v22 = *(unsigned __int16 *)(v7 + v17 + 12) > v19;
          v95 = v21 == (_DWORD)v20;
          v23 = v21 > v20;
          if (!v95)
            v22 = v23;
          v17 += 8;
        }
        while (v22);
        v24 = v7 + v17;
        v25 = a2;
        if (v17 == 8)
        {
          v30 = a2;
          while (v24 < (unint64_t)v30)
          {
            v26 = v30 - 1;
            v31 = *((unsigned __int16 *)v30 - 1);
            v32 = *((unsigned __int16 *)v30 - 2) > v19;
            v95 = v31 == (_DWORD)v20;
            v33 = v31 > v20;
            if (v95)
              v33 = v32;
            v30 = v26;
            if (v33)
              goto LABEL_29;
          }
          v26 = v30;
        }
        else
        {
          do
          {
            v26 = v25 - 1;
            v27 = *((unsigned __int16 *)v25 - 1);
            v28 = *((unsigned __int16 *)v25 - 2) > v19;
            v95 = v27 == (_DWORD)v20;
            v29 = v27 > v20;
            if (v95)
              v29 = v28;
            v25 = v26;
          }
          while (!v29);
        }
LABEL_29:
        if (v24 >= (unint64_t)v26)
        {
          v45 = (unint64_t *)(v24 - 8);
        }
        else
        {
          v34 = v24;
          v35 = v26;
          do
          {
            v36 = *(_QWORD *)v34;
            *(_QWORD *)v34 = *v35;
            *v35 = v36;
            do
            {
              v37 = *(unsigned __int16 *)(v34 + 14);
              v38 = *(unsigned __int16 *)(v34 + 12);
              v34 += 8;
              v39 = v38 > v19;
              v95 = v37 == (_DWORD)v20;
              v40 = v37 > v20;
              if (v95)
                v40 = v39;
            }
            while (v40);
            do
            {
              v41 = *((unsigned __int16 *)v35 - 1);
              v42 = *((unsigned __int16 *)v35-- - 2);
              v43 = v42 > v19;
              v95 = v41 == (_DWORD)v20;
              v44 = v41 > v20;
              if (v95)
                v44 = v43;
            }
            while (!v44);
          }
          while (v34 < (unint64_t)v35);
          v45 = (unint64_t *)(v34 - 8);
        }
        if (v45 != (unint64_t *)v7)
          *(_QWORD *)v7 = *v45;
        *v45 = v18;
        if (v24 < (unint64_t)v26)
        {
LABEL_46:
          result = std::__introsort<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *,false>(v7, v45, a3, a4 & 1);
          a4 = 0;
          v8 = (unint64_t)(v45 + 1);
          continue;
        }
        v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v7, (uint64_t)v45);
        v8 = (unint64_t)(v45 + 1);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((uint64_t)(v45 + 1), (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v46)
            continue;
          goto LABEL_46;
        }
        a2 = v45;
        if (!v46)
          goto LABEL_2;
        return result;
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t *v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  unint64_t *v45;
  BOOL v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  unint64_t *v61;
  unint64_t *v62;
  unsigned int v63;
  BOOL v64;
  BOOL v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  _BOOL4 v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  unint64_t *v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  unint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  unint64_t *v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  _QWORD *v111;
  int64_t v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  _BOOL4 v150;
  _BOOL4 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int v156;
  BOOL v157;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  _BOOL4 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  BOOL v169;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *((unsigned __int16 *)a2 - 1);
        v77 = *(unsigned __int16 *)(v8 + 6);
        v95 = v76 == v77;
        v78 = v76 > v77;
        if (v95)
          v78 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 4);
        if (v78)
        {
          v79 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v79;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v8, (unint64_t *)(v8 + 8), a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, (uint64_t)(a2 - 1));
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, v8 + 24);
        v80 = *((unsigned __int16 *)a2 - 1);
        v81 = *(unsigned __int16 *)(v8 + 30);
        v95 = v80 == v81;
        v82 = v80 > v81;
        if (v95)
          v82 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 28);
        if (v82)
        {
          v83 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(a2 - 1);
          *(a2 - 1) = v83;
          LODWORD(v83) = *(unsigned __int16 *)(v8 + 30);
          v84 = *(unsigned __int16 *)(v8 + 22);
          v95 = (_DWORD)v83 == v84;
          v85 = v83 > v84;
          if (v95)
            v85 = *(unsigned __int16 *)(v8 + 28) > *(unsigned __int16 *)(v8 + 20);
          if (v85)
          {
            v87 = *(_QWORD *)(v8 + 16);
            v86 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v86;
            *(_QWORD *)(v8 + 24) = v87;
            v88 = HIWORD(v86);
            v89 = *(unsigned __int16 *)(v8 + 14);
            v95 = v89 == HIWORD(v86);
            v90 = v89 < HIWORD(v86);
            if (v95)
              v90 = *(unsigned __int16 *)(v8 + 12) < WORD2(v86);
            if (v90)
            {
              v91 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v86;
              *(_QWORD *)(v8 + 16) = v91;
              LODWORD(v91) = *(unsigned __int16 *)(v8 + 6);
              v95 = (_DWORD)v91 == (_DWORD)v88;
              v92 = v91 < v88;
              if (v95)
                v92 = *(unsigned __int16 *)(v8 + 4) < WORD2(v86);
              if (v92)
              {
                v93 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v86;
                *(_QWORD *)(v8 + 8) = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v94 = (unint64_t *)(v8 + 8);
          v95 = (unint64_t *)v8 == a2 || v94 == a2;
          v96 = v95;
          if ((a4 & 1) != 0)
          {
            if ((v96 & 1) == 0)
            {
              v97 = 0;
              v98 = (_QWORD *)v8;
              do
              {
                v99 = *((unsigned __int16 *)v98 + 7);
                v100 = *((unsigned __int16 *)v98 + 3);
                v101 = *((unsigned __int16 *)v98 + 6);
                v102 = *((unsigned __int16 *)v98 + 2);
                v98 = v94;
                v103 = v101 > v102;
                v95 = v99 == v100;
                v104 = v99 > v100;
                if (!v95)
                  v103 = v104;
                if (v103)
                {
                  v105 = *v98;
                  v106 = HIWORD(*v98);
                  v107 = v97;
                  while (1)
                  {
                    v108 = v8 + v107;
                    *(_QWORD *)(v8 + v107 + 8) = *(_QWORD *)(v8 + v107);
                    if (!v107)
                      break;
                    v109 = *(unsigned __int16 *)(v108 - 2);
                    v110 = *(unsigned __int16 *)(v108 - 4) < WORD2(v105);
                    if (v109 != (_DWORD)v106)
                      v110 = v109 < v106;
                    v107 -= 8;
                    if (!v110)
                    {
                      v111 = (_QWORD *)(v8 + v107 + 8);
                      goto LABEL_118;
                    }
                  }
                  v111 = (_QWORD *)v8;
LABEL_118:
                  *v111 = v105;
                }
                v94 = v98 + 1;
                v97 += 8;
              }
              while (v98 + 1 != a2);
            }
          }
          else if ((v96 & 1) == 0)
          {
            do
            {
              v159 = *(unsigned __int16 *)(v7 + 14);
              v160 = *(unsigned __int16 *)(v7 + 6);
              v161 = *(unsigned __int16 *)(v7 + 12);
              v162 = *(unsigned __int16 *)(v7 + 4);
              v7 = (uint64_t)v94;
              v95 = v159 == v160;
              v163 = v159 > v160;
              if (v95)
                v163 = v161 > v162;
              if (v163)
              {
                v164 = *v94;
                v165 = HIWORD(*v94);
                do
                {
                  v166 = v94;
                  v167 = *--v94;
                  *v166 = v167;
                  v168 = *((unsigned __int16 *)v166 - 5);
                  v169 = *((unsigned __int16 *)v166 - 6) < WORD2(v164);
                  if (v168 != (_DWORD)v165)
                    v169 = v168 < v165;
                }
                while (v169);
                *v94 = v164;
              }
              v94 = (unint64_t *)(v7 + 8);
            }
            while ((unint64_t *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v112 = (v10 - 2) >> 1;
            v113 = v112;
            do
            {
              v114 = v113;
              if (v112 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = v8 + 8 * v115;
                if (2 * v114 + 2 < (uint64_t)v10)
                {
                  v117 = *(unsigned __int16 *)(v116 + 6);
                  v118 = *(unsigned __int16 *)(v116 + 14);
                  result = *(unsigned __int16 *)(v116 + 12);
                  v95 = v117 == v118;
                  v119 = v117 > v118;
                  if (v95)
                    v119 = *(unsigned __int16 *)(v116 + 4) > result;
                  v116 += 8 * v119;
                  if (v119)
                    v115 = 2 * v114 + 2;
                }
                v120 = *(unsigned __int16 *)(v116 + 6);
                v121 = v8 + 8 * v114;
                v122 = *(unsigned __int16 *)(v121 + 6);
                v123 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v121 + 4);
                v95 = v120 == v122;
                v124 = v120 > v122;
                if (v95)
                  v124 = v123;
                if (!v124)
                {
                  v125 = (_QWORD *)(v8 + 8 * v114);
                  v126 = *v125;
                  v127 = HIWORD(*v125);
                  do
                  {
                    v128 = v125;
                    v125 = (_QWORD *)v116;
                    *v128 = *(_QWORD *)v116;
                    if (v112 < v115)
                      break;
                    v129 = (2 * v115) | 1;
                    v116 = v8 + 8 * v129;
                    v130 = 2 * v115 + 2;
                    if (v130 < (uint64_t)v10)
                    {
                      v131 = *(unsigned __int16 *)(v116 + 6);
                      v132 = *(unsigned __int16 *)(v116 + 14);
                      v95 = v131 == v132;
                      v133 = v131 > v132;
                      if (v95)
                        v133 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v116 + 12);
                      v116 += 8 * v133;
                      if (v133)
                        v129 = v130;
                    }
                    v134 = *(unsigned __int16 *)(v116 + 6);
                    v95 = v134 == (_DWORD)v127;
                    LODWORD(result) = v134 > v127;
                    result = v95 ? *(unsigned __int16 *)(v116 + 4) > WORD2(v126) : result;
                    v115 = v129;
                  }
                  while ((_DWORD)result != 1);
                  *v125 = v126;
                }
              }
              v113 = v114 - 1;
            }
            while (v114);
            v135 = (unint64_t)v9 >> 3;
            do
            {
              v136 = 0;
              v137 = *(_QWORD *)v8;
              v138 = (_QWORD *)v8;
              do
              {
                v139 = &v138[v136 + 1];
                v140 = (2 * v136) | 1;
                v141 = 2 * v136 + 2;
                if (v141 < v135)
                {
                  v142 = *((unsigned __int16 *)v139 + 3);
                  v143 = *((unsigned __int16 *)v139 + 7);
                  result = *((unsigned __int16 *)v139 + 6);
                  v95 = v142 == v143;
                  v144 = v142 > v143;
                  if (v95)
                    v144 = *((unsigned __int16 *)v139 + 2) > result;
                  v139 += v144;
                  if (v144)
                    v140 = v141;
                }
                *v138 = *v139;
                v138 = v139;
                v136 = v140;
              }
              while (v140 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
              if (v139 == --a2)
              {
                *v139 = v137;
              }
              else
              {
                *v139 = *a2;
                *a2 = v137;
                v145 = (uint64_t)v139 - v8 + 8;
                if (v145 >= 9)
                {
                  v146 = (((unint64_t)v145 >> 3) - 2) >> 1;
                  v147 = v8 + 8 * v146;
                  v148 = *(unsigned __int16 *)(v147 + 6);
                  v149 = *((unsigned __int16 *)v139 + 3);
                  v150 = *(unsigned __int16 *)(v147 + 4) > *((unsigned __int16 *)v139 + 2);
                  v95 = v148 == v149;
                  v151 = v148 > v149;
                  if (!v95)
                    v150 = v151;
                  if (v150)
                  {
                    v152 = *v139;
                    v153 = HIWORD(*v139);
                    do
                    {
                      v154 = v139;
                      v139 = (unint64_t *)(v8 + 8 * v146);
                      *v154 = *v139;
                      if (!v146)
                        break;
                      v146 = (v146 - 1) >> 1;
                      v155 = v8 + 8 * v146;
                      v156 = *(unsigned __int16 *)(v155 + 6);
                      v157 = *(unsigned __int16 *)(v155 + 4) > WORD2(v152);
                      if (v156 != (_DWORD)v153)
                        v157 = v156 > v153;
                    }
                    while (v157);
                    *v139 = v152;
                  }
                }
              }
            }
            while (v135-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8 * (v10 >> 1)), (unint64_t *)v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v7, (unint64_t *)(v7 + 8 * (v10 >> 1)), a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8), v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 16), (unint64_t *)(v7 + 8 + 8 * v11), a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v12 - 1, v12, (unint64_t *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(unsigned __int16 *)(v7 - 2);
          v15 = *(unsigned __int16 *)(v7 + 6);
          v95 = v14 == v15;
          v16 = v14 > v15;
          if (v95)
            v16 = *(unsigned __int16 *)(v7 - 4) > *(unsigned __int16 *)(v7 + 4);
          if (!v16)
          {
            v47 = *(_QWORD *)v7;
            v48 = (unsigned __int16)WORD2(*(_QWORD *)v7);
            v49 = HIWORD(*(_QWORD *)v7);
            v50 = *((unsigned __int16 *)a2 - 1);
            v51 = *((unsigned __int16 *)a2 - 2) < v48;
            v95 = v50 == (_DWORD)v49;
            v52 = v50 < v49;
            if (!v95)
              v51 = v52;
            if (v51)
            {
              v53 = v7;
              do
              {
                v8 = v53 + 8;
                v54 = *(unsigned __int16 *)(v53 + 14);
                v55 = *(unsigned __int16 *)(v53 + 12) < v48;
                v95 = v54 == (_DWORD)v49;
                v56 = v54 < v49;
                if (v95)
                  v56 = v55;
                v53 = v8;
              }
              while (!v56);
            }
            else
            {
              v57 = v7 + 8;
              do
              {
                v8 = v57;
                if (v57 >= (unint64_t)a2)
                  break;
                v58 = *(unsigned __int16 *)(v57 + 6);
                v59 = *(unsigned __int16 *)(v8 + 4) < v48;
                v95 = v58 == (_DWORD)v49;
                v60 = v58 < v49;
                if (!v95)
                  v59 = v60;
                v57 = v8 + 8;
              }
              while (!v59);
            }
            v61 = a2;
            if (v8 < (unint64_t)a2)
            {
              v62 = a2;
              do
              {
                v61 = v62 - 1;
                v63 = *((unsigned __int16 *)v62 - 1);
                v64 = *((unsigned __int16 *)v62 - 2) < v48;
                v95 = v63 == (_DWORD)v49;
                v65 = v63 < v49;
                if (v95)
                  v65 = v64;
                v62 = v61;
              }
              while (v65);
            }
            while (v8 < (unint64_t)v61)
            {
              v66 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *v61;
              *v61 = v66;
              do
              {
                v67 = *(unsigned __int16 *)(v8 + 14);
                v68 = *(unsigned __int16 *)(v8 + 12);
                v8 += 8;
                v69 = v68 < v48;
                v95 = v67 == (_DWORD)v49;
                v70 = v67 < v49;
                if (v95)
                  v70 = v69;
              }
              while (!v70);
              do
              {
                v71 = *((unsigned __int16 *)v61 - 1);
                v72 = *((unsigned __int16 *)v61-- - 2);
                v73 = v72 < v48;
                v95 = v71 == (_DWORD)v49;
                v74 = v71 < v49;
                if (v95)
                  v74 = v73;
              }
              while (v74);
            }
            v75 = (unint64_t *)(v8 - 8);
            if (v8 - 8 != v7)
              *(_QWORD *)v7 = *v75;
            a4 = 0;
            *v75 = v47;
            continue;
          }
        }
        v17 = 0;
        v18 = *(_QWORD *)v7;
        v19 = (unsigned __int16)WORD2(*(_QWORD *)v7);
        v20 = HIWORD(*(_QWORD *)v7);
        do
        {
          v21 = *(unsigned __int16 *)(v7 + v17 + 14);
          v22 = *(unsigned __int16 *)(v7 + v17 + 12) > v19;
          v95 = v21 == (_DWORD)v20;
          v23 = v21 > v20;
          if (!v95)
            v22 = v23;
          v17 += 8;
        }
        while (v22);
        v24 = v7 + v17;
        v25 = a2;
        if (v17 == 8)
        {
          v30 = a2;
          while (v24 < (unint64_t)v30)
          {
            v26 = v30 - 1;
            v31 = *((unsigned __int16 *)v30 - 1);
            v32 = *((unsigned __int16 *)v30 - 2) > v19;
            v95 = v31 == (_DWORD)v20;
            v33 = v31 > v20;
            if (v95)
              v33 = v32;
            v30 = v26;
            if (v33)
              goto LABEL_29;
          }
          v26 = v30;
        }
        else
        {
          do
          {
            v26 = v25 - 1;
            v27 = *((unsigned __int16 *)v25 - 1);
            v28 = *((unsigned __int16 *)v25 - 2) > v19;
            v95 = v27 == (_DWORD)v20;
            v29 = v27 > v20;
            if (v95)
              v29 = v28;
            v25 = v26;
          }
          while (!v29);
        }
LABEL_29:
        if (v24 >= (unint64_t)v26)
        {
          v45 = (unint64_t *)(v24 - 8);
        }
        else
        {
          v34 = v24;
          v35 = v26;
          do
          {
            v36 = *(_QWORD *)v34;
            *(_QWORD *)v34 = *v35;
            *v35 = v36;
            do
            {
              v37 = *(unsigned __int16 *)(v34 + 14);
              v38 = *(unsigned __int16 *)(v34 + 12);
              v34 += 8;
              v39 = v38 > v19;
              v95 = v37 == (_DWORD)v20;
              v40 = v37 > v20;
              if (v95)
                v40 = v39;
            }
            while (v40);
            do
            {
              v41 = *((unsigned __int16 *)v35 - 1);
              v42 = *((unsigned __int16 *)v35-- - 2);
              v43 = v42 > v19;
              v95 = v41 == (_DWORD)v20;
              v44 = v41 > v20;
              if (v95)
                v44 = v43;
            }
            while (!v44);
          }
          while (v34 < (unint64_t)v35);
          v45 = (unint64_t *)(v34 - 8);
        }
        if (v45 != (unint64_t *)v7)
          *(_QWORD *)v7 = *v45;
        *v45 = v18;
        if (v24 < (unint64_t)v26)
        {
LABEL_46:
          result = std::__introsort<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *,false>(v7, v45, a3, a4 & 1);
          a4 = 0;
          v8 = (unint64_t)(v45 + 1);
          continue;
        }
        v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v7, (uint64_t)v45);
        v8 = (unint64_t)(v45 + 1);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((uint64_t)(v45 + 1), (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v46)
            continue;
          goto LABEL_46;
        }
        a2 = v45;
        if (!v46)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BOOL4 v16;
  unint64_t v17;
  unsigned int v18;
  _BOOL4 v19;

  v3 = *((unsigned __int16 *)a2 + 3);
  v4 = *((unsigned __int16 *)result + 3);
  v5 = *((unsigned __int16 *)a2 + 2);
  v6 = v5 > *((unsigned __int16 *)result + 2);
  v7 = v3 == v4;
  v8 = v3 > v4;
  if (!v7)
    v6 = v8;
  v9 = *((unsigned __int16 *)a3 + 3);
  v10 = *((unsigned __int16 *)a3 + 2) > v5;
  v7 = v9 == v3;
  v11 = v9 > v3;
  if (v7)
    v12 = v10;
  else
    v12 = v11;
  if (v6)
  {
    v13 = *result;
    if (v12)
    {
      *result = *a3;
LABEL_18:
      *a3 = v13;
      return result;
    }
    *result = *a2;
    *a2 = v13;
    v18 = *((unsigned __int16 *)a3 + 3);
    v7 = v18 == HIWORD(v13);
    v19 = v18 > HIWORD(v13);
    if (v7)
      v19 = *((unsigned __int16 *)a3 + 2) > WORD2(v13);
    if (v19)
    {
      *a2 = *a3;
      goto LABEL_18;
    }
  }
  else if (v12)
  {
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    LODWORD(v14) = *((unsigned __int16 *)a2 + 3);
    v15 = *((unsigned __int16 *)result + 3);
    v7 = (_DWORD)v14 == v15;
    v16 = v14 > v15;
    if (v7)
      v16 = *((unsigned __int16 *)a2 + 2) > *((unsigned __int16 *)result + 2);
    if (v16)
    {
      v17 = *result;
      *result = *a2;
      *a2 = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  unint64_t v38;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(unsigned __int16 *)(a2 - 2);
      v7 = *(unsigned __int16 *)(a1 + 6);
      v8 = v6 == v7;
      v9 = v6 > v7;
      if (v8)
        v9 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(unsigned __int16 *)(a2 - 2);
      v26 = *(unsigned __int16 *)(a1 + 30);
      v8 = v25 == v26;
      v27 = v25 > v26;
      if (v8)
        v27 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 28);
      if (v27)
      {
        v28 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v28;
        LODWORD(v28) = *(unsigned __int16 *)(a1 + 30);
        v29 = *(unsigned __int16 *)(a1 + 22);
        v8 = (_DWORD)v28 == v29;
        v30 = v28 > v29;
        if (v8)
          v30 = *(unsigned __int16 *)(a1 + 28) > *(unsigned __int16 *)(a1 + 20);
        if (v30)
        {
          v32 = *(_QWORD *)(a1 + 16);
          v31 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v31;
          *(_QWORD *)(a1 + 24) = v32;
          v33 = HIWORD(v31);
          v34 = *(unsigned __int16 *)(a1 + 14);
          v8 = v34 == HIWORD(v31);
          v35 = v34 < HIWORD(v31);
          if (v8)
            v35 = *(unsigned __int16 *)(a1 + 12) < WORD2(v31);
          if (v35)
          {
            v36 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 16) = v36;
            LODWORD(v36) = *(unsigned __int16 *)(a1 + 6);
            v8 = (_DWORD)v36 == (_DWORD)v33;
            v37 = v36 < v33;
            if (v8)
              v37 = *(unsigned __int16 *)(a1 + 4) < WORD2(v31);
            if (v37)
            {
              v38 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v31;
              *(_QWORD *)(a1 + 8) = v38;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a1 + 16));
      v12 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int16 *)(v12 + 6);
    v16 = *(unsigned __int16 *)(v11 + 6);
    v8 = v15 == v16;
    v17 = v15 > v16;
    if (v8)
      v17 = *(unsigned __int16 *)(v12 + 4) > *(unsigned __int16 *)(v11 + 4);
    if (v17)
    {
      v18 = *(_QWORD *)v12;
      v19 = HIWORD(*(_QWORD *)v12);
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_QWORD *)(a1 + v20 + 24) = *(_QWORD *)(a1 + v20 + 16);
        if (v20 == -16)
          break;
        v22 = *(unsigned __int16 *)(v21 + 14);
        v23 = *(unsigned __int16 *)(v21 + 12) < WORD2(v18);
        if (v22 != (_DWORD)v19)
          v23 = v22 < v19;
        v20 -= 8;
        if (!v23)
        {
          v24 = (_QWORD *)(a1 + v20 + 24);
          goto LABEL_19;
        }
      }
      v24 = (_QWORD *)a1;
LABEL_19:
      *v24 = v18;
      if (++v14 == 8)
        return v12 + 8 == a2;
    }
    v11 = v12;
    v13 += 8;
    v12 += 8;
    if (v12 == a2)
      return 1;
  }
}

{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  unint64_t v38;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(unsigned __int16 *)(a2 - 2);
      v7 = *(unsigned __int16 *)(a1 + 6);
      v8 = v6 == v7;
      v9 = v6 > v7;
      if (v8)
        v9 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(unsigned __int16 *)(a2 - 2);
      v26 = *(unsigned __int16 *)(a1 + 30);
      v8 = v25 == v26;
      v27 = v25 > v26;
      if (v8)
        v27 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 28);
      if (v27)
      {
        v28 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v28;
        LODWORD(v28) = *(unsigned __int16 *)(a1 + 30);
        v29 = *(unsigned __int16 *)(a1 + 22);
        v8 = (_DWORD)v28 == v29;
        v30 = v28 > v29;
        if (v8)
          v30 = *(unsigned __int16 *)(a1 + 28) > *(unsigned __int16 *)(a1 + 20);
        if (v30)
        {
          v32 = *(_QWORD *)(a1 + 16);
          v31 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v31;
          *(_QWORD *)(a1 + 24) = v32;
          v33 = HIWORD(v31);
          v34 = *(unsigned __int16 *)(a1 + 14);
          v8 = v34 == HIWORD(v31);
          v35 = v34 < HIWORD(v31);
          if (v8)
            v35 = *(unsigned __int16 *)(a1 + 12) < WORD2(v31);
          if (v35)
          {
            v36 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 16) = v36;
            LODWORD(v36) = *(unsigned __int16 *)(a1 + 6);
            v8 = (_DWORD)v36 == (_DWORD)v33;
            v37 = v36 < v33;
            if (v8)
              v37 = *(unsigned __int16 *)(a1 + 4) < WORD2(v31);
            if (v37)
            {
              v38 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v31;
              *(_QWORD *)(a1 + 8) = v38;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a1 + 16));
      v12 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int16 *)(v12 + 6);
    v16 = *(unsigned __int16 *)(v11 + 6);
    v8 = v15 == v16;
    v17 = v15 > v16;
    if (v8)
      v17 = *(unsigned __int16 *)(v12 + 4) > *(unsigned __int16 *)(v11 + 4);
    if (v17)
    {
      v18 = *(_QWORD *)v12;
      v19 = HIWORD(*(_QWORD *)v12);
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_QWORD *)(a1 + v20 + 24) = *(_QWORD *)(a1 + v20 + 16);
        if (v20 == -16)
          break;
        v22 = *(unsigned __int16 *)(v21 + 14);
        v23 = *(unsigned __int16 *)(v21 + 12) < WORD2(v18);
        if (v22 != (_DWORD)v19)
          v23 = v22 < v19;
        v20 -= 8;
        if (!v23)
        {
          v24 = (_QWORD *)(a1 + v20 + 24);
          goto LABEL_19;
        }
      }
      v24 = (_QWORD *)a1;
LABEL_19:
      *v24 = v18;
      if (++v14 == 8)
        return v12 + 8 == a2;
    }
    v11 = v12;
    v13 += 8;
    v12 += 8;
    if (v12 == a2)
      return 1;
  }
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  unint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  unint64_t v19;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(unsigned __int16 *)(a4 + 6);
  v10 = *(unsigned __int16 *)(a3 + 6);
  v11 = v9 == v10;
  v12 = v9 > v10;
  if (v11)
    v12 = *(unsigned __int16 *)(a4 + 4) > *(unsigned __int16 *)(a3 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v13;
    LODWORD(v13) = *(unsigned __int16 *)(a3 + 6);
    v14 = *(unsigned __int16 *)(a2 + 6);
    v11 = (_DWORD)v13 == v14;
    v15 = v13 > v14;
    if (v11)
      v15 = *(unsigned __int16 *)(a3 + 4) > *(unsigned __int16 *)(a2 + 4);
    if (v15)
    {
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v16;
      LODWORD(v16) = *(unsigned __int16 *)(a2 + 6);
      v17 = *(unsigned __int16 *)(a1 + 6);
      v11 = (_DWORD)v16 == v17;
      v18 = v16 > v17;
      if (v11)
        v18 = *(unsigned __int16 *)(a2 + 4) > *(unsigned __int16 *)(a1 + 4);
      if (v18)
      {
        v19 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v19;
      }
    }
  }
  return result;
}

gsl::details *gsl::details::span_iterator<spectral_peak_t const>::operator++(gsl::details *result)
{
  unint64_t v1;
  unint64_t v2;

  if (!*(_QWORD *)result || (v1 = *((_QWORD *)result + 2)) == 0 || (v2 = *((_QWORD *)result + 1)) == 0 || v1 >= v2)
    gsl::details::terminate(result);
  *((_QWORD *)result + 2) = v1 + 8;
  return result;
}

_QWORD *std::vector<shazam::lmfp<(shazam::fp_type)0>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_218C32390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<shazam::lmfp<(shazam::fp_type)0>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

float32x2_t *shazam::Query<(AlgoType)1,std::vector<shazam::lmfp<(shazam::fp_type)0>>>::Query(float32x2_t *a1, shazam::signature_info *this, float32x2_t *a3, uint64_t a4)
{
  double v11;
  float v12;
  float v13;
  double v14;

  *a1 = (float32x2_t)this;
  a1[1] = *a3;
  __asm { FMOV            V1.2S, #1.0 }
  a1[2] = (float32x2_t)vrev64_s32((int32x2_t)vdiv_f32(_D1, vadd_f32(*a3, _D1)));
  v11 = (float)(shazam::signature_info::getSampleLength(this) * 125.0);
  v13 = a1[2].f32[0];
  v12 = a1[2].f32[1];
  v14 = 1.0 - v13;
  if (v14 < v12 + -1.0)
    v14 = v12 + -1.0;
  a1[3].i32[0] = vcvtpd_u64_f64(v14 * v11);
  a1[3].f32[1] = (float)(logf(v12) * 3103.8) + 0.99;
  a1[4].f32[0] = logf(v13) * 3103.8;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  *(_OWORD *)a1[5].f32 = *(_OWORD *)a4;
  a1[7] = *(float32x2_t *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

gsl::details *shazam::search_fingerprints<(AlgoType)1,xpair_group<xpair_fields>>(gsl::details *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7, float a8, float a9)
{
  uint64_t v14;
  gsl::details *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  gsl::details *v23;
  gsl::details *result;
  gsl::details *v25;
  gsl::details *v26;
  int v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD v37[2];

  *(float *)v37 = a8;
  *(float *)&v37[1] = a9;
  if (*a6 == a6[1])
    return 0;
  v14 = a5 + 8 * a4;
  v34 = a5;
  v35 = v14;
  v36 = a5;
  v30 = v14;
  while (v36 != v14)
  {
    v15 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
    v16 = shazam::QueryRange<(shazam::fp_type)0>::ConstructFingerprintRange((uint64_t)v37, v15);
    v18 = v17;
    v19 = v16 >> 14;
    v20 = *a6;
    v21 = (uint64_t)a1;
    if (v16 >> 14 != 0x3FFFF)
      v21 = *(unsigned int *)(v20 + 4 * (v19 + 1));
    v22 = *(unsigned int *)(v20 + 4 * v19);
    v23 = a1;
    if (v17 >> 14 != 0x3FFFF)
      v23 = (gsl::details *)*(unsigned int *)(v20 + 4 * ((v17 >> 14) + 1));
    v33 = v16;
    result = (gsl::details *)shazam::binary_fingerprint_search<(AlgoType)1>(a1, a2, v22, v21, (uint64_t)a1, &v33);
    if ((uint64_t)result < (uint64_t)v23)
    {
      v25 = result;
      if (a1 <= result)
        v26 = result;
      else
        v26 = a1;
      while (v26 != v25)
      {
        if (*(unsigned __int16 *)(a2 + 2 * (_QWORD)v25) <= v18)
        {
          v27 = *(_DWORD *)(*a3 + 4 * (_QWORD)v25);
          LOWORD(v32) = ((*(_WORD *)v15 >> 1) & 0x3FFF) - ((*(_WORD *)(a2 + 2 * (_QWORD)v25) >> 1) & 0x3FFF);
          WORD1(v32) = *((_DWORD *)v15 + 1);
          HIDWORD(v32) = v27;
          result = (gsl::details *)shazam::virtual_array<xpair_group<xpair_fields>>::push_back(a7, &v32);
          v25 = (gsl::details *)((char *)v25 + 1);
          if (v23 != v25)
            continue;
        }
        goto LABEL_15;
      }
LABEL_26:
      gsl::details::terminate(result);
    }
LABEL_15:
    result = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v34);
    v28 = v34 == a5 && v35 == v30;
    v14 = v30;
    if (!v28)
      goto LABEL_26;
  }
  result = (gsl::details *)a7[2];
  if (result == (gsl::details *)-1)
    goto LABEL_26;
  if (result && *a7 == 0)
    goto LABEL_26;
  return result;
}

uint64_t gsl::make_span<std::vector<shazam::lmfp<(shazam::fp_type)0>>>(gsl::details *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v1 = *((_QWORD *)a1 + 1);
  v2 = v1 - *(_QWORD *)a1;
  if (v2 == -8 || (!*(_QWORD *)a1 ? (v3 = v1 == 0) : (v3 = 1), !v3))
    gsl::details::terminate(a1);
  return v2 >> 3;
}

void shazam::xpairsort<xpair_group<xpair_fields>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  gsl::details *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[8192];
  uint64_t v38;

  MEMORY[0x24BDAC7A8](a1, a2);
  v38 = *MEMORY[0x24BDAC8D0];
  v4 = *v2;
  if (*v2 >= 2uLL)
  {
    v5 = v3;
    v6 = v2;
    bzero(v37, 0x2000uLL);
    v8 = 0;
    v9 = v6[1] + 4;
    do
    {
      v10 = 0;
      v11 = (unsigned __int8 *)v9;
      do
      {
        v12 = *v11++;
        ++*(_QWORD *)&v37[8 * v12 + v10];
        v10 += 2048;
      }
      while (v10 != 0x2000);
      ++v8;
      v9 += 8;
    }
    while (v8 != v4);
    v13 = 0;
    v14 = v37;
    do
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)&v14[v15];
        *(_QWORD *)&v14[v15] = v16;
        v16 += v17;
        v15 += 8;
      }
      while (v15 != 2048);
      ++v13;
      v14 += 2048;
    }
    while (v13 != 4);
    v18 = 0;
    v19 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if (!*v6)
        gsl::details::terminate(v7);
      v20 = v6[1];
      v21 = &v37[2048 * v18];
      if (*(_QWORD *)&v21[8 * *(unsigned __int8 *)(v20 + v18 + 4)] != v4)
      {
        v22 = *(_QWORD *)(v5 + 8);
        v23 = 0;
        if (v19)
        {
          v24 = (_QWORD *)v6[1];
          do
          {
            v25 = *((unsigned __int8 *)v24 + v18 + 4);
            v7 = *(gsl::details **)&v21[8 * v25];
            v26 = *((unsigned __int8 *)v24 + v18 + 12);
            *(_QWORD *)&v21[8 * v25] = (char *)v7 + 1;
            v27 = *(_QWORD *)&v21[8 * v26];
            v28 = *((unsigned __int8 *)v24 + v18 + 20);
            *(_QWORD *)&v21[8 * v26] = v27 + 1;
            v29 = *(_QWORD *)&v21[8 * v28];
            v30 = *((unsigned __int8 *)v24 + v18 + 28);
            *(_QWORD *)&v21[8 * v28] = v29 + 1;
            v31 = *(_QWORD *)&v21[8 * v30];
            *(_QWORD *)&v21[8 * v30] = v31 + 1;
            *(_QWORD *)(v22 + 8 * (_QWORD)v7) = *v24;
            *(_QWORD *)(v22 + 8 * v27) = v24[1];
            *(_QWORD *)(v22 + 8 * v29) = v24[2];
            *(_QWORD *)(v22 + 8 * v31) = v24[3];
            v23 += 4;
            v24 += 4;
          }
          while (v23 < v19);
        }
        v32 = v4 - v23;
        if (v4 > v23)
        {
          v33 = v20 + 8 * v23 + 4;
          do
          {
            v34 = *(unsigned __int8 *)(v33 + v18);
            v35 = *(_QWORD *)&v21[8 * v34];
            *(_QWORD *)&v21[8 * v34] = v35 + 1;
            *(_QWORD *)(v22 + 8 * v35) = *(_QWORD *)(v33 - 4);
            v33 += 8;
            --v32;
          }
          while (v32);
        }
        v36 = *(_OWORD *)v6;
        *(_OWORD *)v6 = *(_OWORD *)v5;
        *(_OWORD *)v5 = v36;
      }
      ++v18;
    }
    while (v18 != 4);
  }
}

uint64_t gsl::make_span<std::vector<unsigned int>>(gsl::details *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v1 = *((_QWORD *)a1 + 1);
  v2 = v1 - *(_QWORD *)a1;
  if (v2 == -4 || (!*(_QWORD *)a1 ? (v3 = v1 == 0) : (v3 = 1), !v3))
    gsl::details::terminate(a1);
  return v2 >> 2;
}

void shazam::bin_tracks<xpair_group<xpair_fields>>(gsl::details *a1, unint64_t *a2, void **a3)
{
  gsl::details *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;

  v4 = a1;
  v5 = *a2;
  if (*a2)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (v8 >= *(_QWORD *)v4)
        goto LABEL_21;
      while (*(_DWORD *)(*((_QWORD *)v4 + 1) + 4 * v8) < *(_DWORD *)(a2[1] + 8 * v7 + 4))
      {
        if (*(_QWORD *)v4 == ++v8)
        {
          v8 = *(_QWORD *)v4;
          goto LABEL_21;
        }
      }
      v9 = v8 - 1;
      v11 = (unint64_t *)a3[1];
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - (_BYTE *)*a3) >> 4;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60)
          goto LABEL_44;
        v15 = v10 - (_QWORD)*a3;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        a1 = (gsl::details *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>((uint64_t)(a3 + 2), v16);
        v18 = (unint64_t *)((char *)a1 + 16 * v13);
        *v18 = v9;
        v18[1] = v7;
        v20 = (char *)*a3;
        v19 = (char *)a3[1];
        v21 = v18;
        if (v19 != *a3)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 2;
            v19 -= 16;
          }
          while (v19 != v20);
          v19 = (char *)*a3;
        }
        v12 = v18 + 2;
        *a3 = v21;
        a3[1] = v18 + 2;
        a3[2] = (char *)a1 + 16 * v17;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v9;
        v11[1] = v7;
        v12 = v11 + 2;
      }
      a3[1] = v12;
      v5 = *a2;
LABEL_21:
      if (v7 < v5)
      {
        v22 = *(_QWORD *)v4;
        if (*(_QWORD *)v4 <= v8)
LABEL_43:
          gsl::details::terminate(a1);
        v23 = *((_QWORD *)v4 + 1);
        v24 = v8 - 1;
        v25 = (_DWORD *)(a2[1] + 8 * v7 + 4);
        while (*(_DWORD *)(v23 + 4 * v8) >= *v25)
        {
          if (v22 <= v24)
            goto LABEL_43;
          *v25 = *v25 - *((unsigned __int16 *)v25 - 1) - *(_DWORD *)(v23 + 4 * v24) - 1750;
          v25 += 2;
          if (v5 == ++v7)
            goto LABEL_29;
        }
      }
    }
    while (v7 < v5);
  }
LABEL_29:
  v26 = *(_QWORD *)v4;
  v27 = (unint64_t)a3[2];
  v28 = (unint64_t *)a3[1];
  if ((unint64_t)v28 >= v27)
  {
    v30 = ((char *)v28 - (_BYTE *)*a3) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
LABEL_44:
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - (_QWORD)*a3;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>((uint64_t)(a3 + 2), v33);
    v35 = &v34[16 * v30];
    v37 = &v34[16 * v36];
    *(_QWORD *)v35 = v26;
    *((_QWORD *)v35 + 1) = v5;
    v29 = v35 + 16;
    v39 = (char *)*a3;
    v38 = (char *)a3[1];
    if (v38 != *a3)
    {
      do
      {
        *((_OWORD *)v35 - 1) = *((_OWORD *)v38 - 1);
        v35 -= 16;
        v38 -= 16;
      }
      while (v38 != v39);
      v38 = (char *)*a3;
    }
    *a3 = v35;
    a3[1] = v29;
    a3[2] = v37;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *v28 = v26;
    v28[1] = v5;
    v29 = v28 + 2;
  }
  a3[1] = v29;
}

void _ZN6shazam14focus_multipleILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType1ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(gsl::details *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t *a5)
{
  gsl::details *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  float **v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  unint64_t v28[2];
  gsl::details *v29;
  uint64_t v30;
  _OWORD v31[10];
  std::string __p;

  v29 = a1;
  v30 = a2;
  if (a1)
  {
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v10 = (float)a3;
    do
    {
      v11 = 8 * v9;
      do
      {
        if ((unint64_t)v29 <= v9)
          goto LABEL_23;
        a1 = (gsl::details *)a4(v30 + v11);
        if ((unint64_t)v29 <= v8)
          goto LABEL_23;
        v13 = v12 - ((float (*)(unint64_t))a4)(v30 + 8 * v8);
        if (v13 > v10)
          break;
        ++v9;
        v11 += 8;
      }
      while (v9 < (unint64_t)v7);
      if (v9 - v8 >= 3)
      {
        v28[0] = (unint64_t)gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)&v29, v8, (gsl::details *)(v9 - v8));
        v28[1] = v14;
        v16 = *a5;
        v15 = (float **)a5[1];
        v17 = a5[2];
        v18 = *(_OWORD *)(v17 + 16);
        v31[0] = *(_OWORD *)v17;
        v31[1] = v18;
        v19 = *(_OWORD *)(v17 + 80);
        v21 = *(_OWORD *)(v17 + 32);
        v20 = *(_OWORD *)(v17 + 48);
        v31[4] = *(_OWORD *)(v17 + 64);
        v31[5] = v19;
        v31[2] = v21;
        v31[3] = v20;
        v22 = *(_OWORD *)(v17 + 144);
        v24 = *(_OWORD *)(v17 + 96);
        v23 = *(_OWORD *)(v17 + 112);
        v31[8] = *(_OWORD *)(v17 + 128);
        v31[9] = v22;
        v31[6] = v24;
        v31[7] = v23;
        if (*(char *)(v17 + 183) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 160), *(_QWORD *)(v17 + 168));
        }
        else
        {
          v25 = *(_OWORD *)(v17 + 160);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 176);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
        }
        shazam::cull_phase<(AlgoType)1,xpair_group<xpair_fields>,2ul,(void *)0>(v15, (uint64_t)v31, (float **)(v16 + 152), v28);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v13 > v10)
      {
        if ((unint64_t)v29 > v9)
        {
          v26 = 8 * v8;
          do
          {
            a1 = (gsl::details *)a4(v30 + 8 * v9);
            if ((unint64_t)v29 <= v8)
              break;
            if ((float)(v27 - ((float (*)(uint64_t))a4)(v30 + v26)) <= v10)
              goto LABEL_21;
            ++v8;
            v26 += 8;
          }
          while ((unint64_t)v29 > v9);
        }
LABEL_23:
        gsl::details::terminate(a1);
      }
LABEL_21:
      ;
    }
    while (v9 < (unint64_t)v7);
  }
}

void sub_218C32D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float lm_diff<xpair_group<xpair_fields>>(uint64_t a1)
{
  return (float)*(int *)(a1 + 4);
}

void _ZN6shazam5focusILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType1ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(gsl::details *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t), uint64_t *a5)
{
  gsl::details *v8;
  unint64_t v9;
  gsl::details *v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  float **v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28[2];
  _QWORD v29[2];
  _OWORD v30[10];
  std::string __p;

  v29[0] = a1;
  v29[1] = a2;
  if (a1)
  {
    v8 = a1;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (float)a3;
    do
    {
      if ((gsl::details *)v9 == v8)
LABEL_18:
        gsl::details::terminate(a1);
      a1 = (gsl::details *)a4(a2 + 8 * v9);
      if (v10 < v8)
      {
        v14 = v13 + v12;
        v15 = a2 + 8 * (_QWORD)v10;
        do
        {
          if (v8 == v10)
            goto LABEL_18;
          if (((float (*)(uint64_t))a4)(v15) >= v14)
            goto LABEL_10;
          v10 = (gsl::details *)((char *)v10 + 1);
          v15 += 8;
          v11 = v9;
        }
        while (v8 != v10);
        v11 = v9;
        v10 = v8;
      }
LABEL_10:
      ++v9;
      v10 = (gsl::details *)((char *)v10 + 1);
    }
    while (v10 < v8);
    if ((unint64_t)v10 - v9 >= 3)
    {
      v28[0] = (unint64_t)gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)v29, v11, (gsl::details *)((char *)v10 - v9));
      v28[1] = v16;
      v18 = *a5;
      v17 = (float **)a5[1];
      v19 = a5[2];
      v20 = *(_OWORD *)(v19 + 16);
      v30[0] = *(_OWORD *)v19;
      v30[1] = v20;
      v21 = *(_OWORD *)(v19 + 80);
      v23 = *(_OWORD *)(v19 + 32);
      v22 = *(_OWORD *)(v19 + 48);
      v30[4] = *(_OWORD *)(v19 + 64);
      v30[5] = v21;
      v30[2] = v23;
      v30[3] = v22;
      v24 = *(_OWORD *)(v19 + 144);
      v26 = *(_OWORD *)(v19 + 96);
      v25 = *(_OWORD *)(v19 + 112);
      v30[8] = *(_OWORD *)(v19 + 128);
      v30[9] = v24;
      v30[6] = v26;
      v30[7] = v25;
      if (*(char *)(v19 + 183) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 160), *(_QWORD *)(v19 + 168));
      }
      else
      {
        v27 = *(_OWORD *)(v19 + 160);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 176);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
      }
      shazam::cull_phase<(AlgoType)1,xpair_group<xpair_fields>,2ul,(void *)0>(v17, (uint64_t)v30, (float **)(v18 + 152), v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_218C32F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<Result>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xD37A6F4DE9BD37A7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<Result>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 184 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 184;
    }
    a1[1] = v7;
  }
}

void std::vector<Result>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 184)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

unint64_t shazam::QueryRange<(shazam::fp_type)0>::ConstructFingerprintRange(uint64_t a1, _QWORD *a2)
{
  return *a2 & 0xFFFFFFFF00000000 | *a2 & 0xFFFF8001 | (2
                                                        * ((float)(*(float *)(a1 + 4)
                                                                               + (float)((*a2 >> 1) & 0x3FFF)) & 0x3FFF));
}

unint64_t shazam::binary_fingerprint_search<(AlgoType)1>(gsl::details *a1, uint64_t a2, unint64_t a3, uint64_t this, uint64_t a5, unsigned __int16 *a6)
{
  if (this == a3)
    return a3;
  if (!a5)
    goto LABEL_5;
  if ((unint64_t)a1 <= a3)
    goto LABEL_14;
  if (*(unsigned __int16 *)(a2 + 2 * a3) >= *a6)
    return a3;
LABEL_5:
  if ((uint64_t)(this - a3) >= 2)
  {
    while ((unint64_t)a1 > (uint64_t)(a3 + this) >> 1)
    {
      if (*(unsigned __int16 *)(a2 + 2 * ((uint64_t)(a3 + this) >> 1)) < *a6)
        a3 = (uint64_t)(a3 + this) >> 1;
      else
        this = (uint64_t)(a3 + this) >> 1;
      if ((uint64_t)(this - a3) <= 1)
        return this;
    }
LABEL_14:
    gsl::details::terminate(a1);
  }
  return this;
}

_QWORD *shazam::virtual_array<xpair_group<xpair_fields>>::push_back(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  std::runtime_error *exception;

  v2 = result[2];
  if (v2 >= result[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "trying to write to unallocated memory!");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(*result + 8 * v2) = *a2;
  ++result[2];
  return result;
}

void sub_218C33170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::virtual_array<xpair_group<xpair_fields>>::~virtual_array(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
      munmap(v2, 8 * *(_QWORD *)(a1 + 8));
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void shazam::cull_phase<(AlgoType)1,xpair_group<xpair_fields>,2ul,(void *)0>(float **a1, uint64_t a2, float **a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  gsl::details *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  gsl::details *subspan;
  uint64_t v20;
  float **v21[3];
  BOOL (*v22)(__int16 *, __int16 *);
  _QWORD v23[3];
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *a4;
  *(_QWORD *)(a2 + 24) = *a4;
  v9 = a4[1];
  v22 = fdelta_compare<xpair_group<xpair_fields>>;
  v23[0] = v9;
  v24 = v9;
  v25 = v9 + 8 * v8;
  v26 = v9;
  v23[1] = v25;
  v23[2] = v25;
  _ZNSt3__115__sort_dispatchB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEEPDoFbRKS7_SA_EEEvT0_SD_RT1_(&v24, (gsl::details *)v23, (uint64_t (**)(gsl::details *, gsl::details *))&v22);
  v11 = *a4;
  v12 = a4[1];
  v21[0] = (float **)a2;
  v21[1] = a3;
  v21[2] = a1;
  v24 = v11;
  v25 = v12;
  if (v11)
  {
    v13 = 0;
    v14 = 0;
    for (i = 0; i < v11; ++i)
    {
      if (v14 == v11)
        gsl::details::terminate(v10);
      if (i < v11)
      {
        v16 = *(__int16 *)(v12 + 8 * v14) + 21;
        if (v16 > *(__int16 *)(v12 + 8 * i))
        {
          v17 = (__int16 *)(v12 + 8 + 8 * i);
          while (v11 - 1 != i)
          {
            v18 = *v17;
            v17 += 4;
            ++i;
            if (v16 <= v18)
              goto LABEL_11;
          }
          i = v11;
LABEL_11:
          v13 = v14;
        }
      }
      ++v14;
    }
    if (i - v14 >= 3)
    {
      subspan = gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)&v24, v13, (gsl::details *)(i - v14));
      shazam::cull_phase<(AlgoType)1,xpair_group<xpair_fields>,2ul,(void *)0>(std::vector<Result> &,Result,std::vector<shazam::regresspair> &,gsl::span<xpair_group<xpair_fields>,18446744073709551615ul> const&)::{lambda((AlgoType)1)#1}::operator()<gsl::span<xpair_group<xpair_fields>,18446744073709551615ul>>(v21, (unint64_t)subspan, v20);
    }
  }
}

BOOL fdelta_compare<xpair_group<xpair_fields>>(__int16 *a1, __int16 *a2)
{
  return *a1 < *a2;
}

void _ZNSt3__115__sort_dispatchB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEEPDoFbRKS7_SA_EEEvT0_SD_RT1_(_QWORD *a1, gsl::details *a2, uint64_t (**a3)(gsl::details *, gsl::details *))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v6 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-<xpair_group<xpair_fields>,0>(a2, a1);
  v7 = 126 - 2 * __clz(v6);
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  v11 = *(_OWORD *)a1;
  v12 = a1[2];
  v9 = *(_OWORD *)a2;
  v10 = *((_QWORD *)a2 + 2);
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EELb0EEEvT1_SE_T0_NS_15iterator_traitsISE_E15difference_typeEb((gsl::details *)&v11, (gsl::details *)&v9, a3, v8, 1);
}

uint64_t gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-<xpair_group<xpair_fields>,0>(gsl::details *a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 != *a2 || *((_QWORD *)a1 + 1) != a2[1])
    gsl::details::terminate(a1);
  return (uint64_t)(*((_QWORD *)a1 + 2) - a2[2]) >> 3;
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EELb0EEEvT1_SE_T0_NS_15iterator_traitsISE_E15difference_typeEb(gsl::details *a1, gsl::details *a2, uint64_t (**a3)(gsl::details *, gsl::details *), uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  gsl::details *v12;
  gsl::details *v13;
  uint64_t v14;
  uint64_t (*v15)(gsl::details *, gsl::details *);
  gsl::details *v16;
  gsl::details *v17;
  _BOOL4 v18;
  uint64_t v19;
  gsl::details *v20;
  uint64_t (*v21)(gsl::details *, gsl::details *);
  gsl::details *v22;
  gsl::details *v23;
  gsl::details *v24;
  gsl::details *v25;
  gsl::details *v26;
  uint64_t v27;
  gsl::details *v28;
  gsl::details *v29;
  gsl::details *v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  __n128 v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;

  v9 = a4 - 1;
  while (2)
  {
    v10 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-<xpair_group<xpair_fields>,0>(a2, a1);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v21 = *a3;
        v22 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
        v23 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v22);
        v24 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
        if (v21(v23, v24))
        {
          v47 = *(__n128 *)a1;
          v48 = *((_QWORD *)a1 + 2);
          v128 = *(__n128 *)a2;
          v129 = *((_QWORD *)a2 + 2);
          v25 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v47);
          v26 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v128);
          v27 = *(_QWORD *)v25;
          *(_QWORD *)v25 = *(_QWORD *)v26;
          *(_QWORD *)v26 = v27;
        }
        return;
      case 3:
        v120 = *(__n128 *)a1;
        v121 = *((_QWORD *)a1 + 2);
        v118 = v120;
        v119 = v121;
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v118, 1);
        v28 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
        v117 = *((_QWORD *)v28 + 2);
        v116 = *(__n128 *)v28;
        v47 = v120;
        v48 = v121;
        v128 = v118;
        v129 = v119;
        v126 = v116;
        v127 = v117;
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v47, (gsl::details *)&v128, (gsl::details *)&v126, a3);
        return;
      case 4:
        v114 = *(__n128 *)a1;
        v115 = *((_QWORD *)a1 + 2);
        v112 = v114;
        v113 = v115;
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v112, 1);
        v110 = *(__n128 *)a1;
        v111 = *((_QWORD *)a1 + 2);
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v110, 2);
        v29 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
        v108 = *(_OWORD *)v29;
        v109 = *((_QWORD *)v29 + 2);
        v47 = v114;
        v48 = v115;
        v128 = v112;
        v129 = v113;
        v126 = v110;
        v127 = v111;
        v125 = v109;
        v124 = v108;
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_T0_((gsl::details *)&v47, (gsl::details *)&v128, (gsl::details *)&v126, (gsl::details *)&v124, a3);
        return;
      case 5:
        v106 = *(__n128 *)a1;
        v107 = *((_QWORD *)a1 + 2);
        v104 = v106;
        v105 = v107;
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v104, 1);
        v102 = *(__n128 *)a1;
        v103 = *((_QWORD *)a1 + 2);
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v102, 2);
        v100 = *(_OWORD *)a1;
        v101 = *((_QWORD *)a1 + 2);
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v100, 3);
        v30 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
        v98 = *(_OWORD *)v30;
        v99 = *((_QWORD *)v30 + 2);
        v47 = v106;
        v48 = v107;
        v128 = v104;
        v129 = v105;
        v126 = v102;
        v127 = v103;
        v125 = v101;
        v124 = v100;
        v123 = v99;
        v122 = v98;
        _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_SE_T0_((gsl::details *)&v47, (gsl::details *)&v128, (gsl::details *)&v126, (gsl::details *)&v124, (gsl::details *)&v122, a3);
        return;
      default:
        if (v10 <= 23)
        {
          if ((a5 & 1) != 0)
          {
            v96 = *(__n128 *)a1;
            v97 = *((_QWORD *)a1 + 2);
            v94 = *(__n128 *)a2;
            v95 = *((_QWORD *)a2 + 2);
            _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_T0_((gsl::details *)&v96, &v94, (unsigned int (**)(gsl::details *, gsl::details *))a3);
          }
          else
          {
            v92 = *(__n128 *)a1;
            v93 = *((_QWORD *)a1 + 2);
            v90 = *(__n128 *)a2;
            v91 = *((_QWORD *)a2 + 2);
            _ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_T0_((gsl::details *)&v92, &v90, (unsigned int (**)(gsl::details *, gsl::details *))a3);
          }
          return;
        }
        if (v9 == -1)
        {
          v88 = *(__n128 *)a1;
          v89 = *((_QWORD *)a1 + 2);
          v86 = *(__n128 *)a2;
          v87 = *((_QWORD *)a2 + 2);
          v84 = v86;
          v85 = v87;
          _ZNSt3__114__partial_sortB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EESD_EET1_SE_SE_T2_RT0_((gsl::details *)&v88, &v86, &v84, (unsigned int (**)(gsl::details *, gsl::details *))a3, (gsl::details *)&v47);
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        if ((unint64_t)v10 < 0x81)
        {
          v58 = *(__n128 *)a1;
          v59 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v58, v11);
          v56 = *(__n128 *)a1;
          v57 = *((_QWORD *)a1 + 2);
          v54 = *(__n128 *)a2;
          v55 = *((_QWORD *)a2 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v54, 1);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v58, (gsl::details *)&v56, (gsl::details *)&v54, a3);
          if ((a5 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          v82 = *(_OWORD *)a1;
          v83 = *((_QWORD *)a1 + 2);
          v80 = v82;
          v81 = v83;
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v80, v11);
          v78 = *(__n128 *)a2;
          v79 = *((_QWORD *)a2 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v78, 1);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v82, (gsl::details *)&v80, (gsl::details *)&v78, a3);
          v76 = *(__n128 *)a1;
          v77 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v76, 1);
          v74 = *(__n128 *)a1;
          v75 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v74, v11 - 1);
          v72 = *(__n128 *)a2;
          v73 = *((_QWORD *)a2 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v72, 2);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v76, (gsl::details *)&v74, (gsl::details *)&v72, a3);
          v70 = *(__n128 *)a1;
          v71 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v70, 2);
          v68 = *(__n128 *)a1;
          v69 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v68, v11 + 1);
          v66 = *(__n128 *)a2;
          v67 = *((_QWORD *)a2 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v66, 3);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v70, (gsl::details *)&v68, (gsl::details *)&v66, a3);
          v64 = *(__n128 *)a1;
          v65 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v64, v11 - 1);
          v62 = *(__n128 *)a1;
          v63 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v62, v11);
          v60 = *(__n128 *)a1;
          v61 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v60, v11 + 1);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v64, (gsl::details *)&v62, (gsl::details *)&v60, a3);
          v126 = *(__n128 *)a1;
          v127 = *((_QWORD *)a1 + 2);
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v126, v11);
          v47 = *(__n128 *)a1;
          v48 = *((_QWORD *)a1 + 2);
          v128 = v126;
          v129 = v127;
          v12 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v47);
          v13 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v128);
          v14 = *(_QWORD *)v12;
          *(_QWORD *)v12 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
          if ((a5 & 1) != 0)
            goto LABEL_10;
        }
        v15 = *a3;
        v47 = *(__n128 *)a1;
        v48 = *((_QWORD *)a1 + 2);
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v47, 1);
        v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v47);
        v17 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
        if ((v15(v16, v17) & 1) == 0)
        {
          v52 = *(__n128 *)a1;
          v53 = *((_QWORD *)a1 + 2);
          v50 = *(__n128 *)a2;
          v51 = *((_QWORD *)a2 + 2);
          _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEERPDoFbRKS7_SA_EEET0_SE_SE_T1_((gsl::details *)&v52, (gsl::details *)&v50, (uint64_t (**)(uint64_t *, gsl::details *))a3, (uint64_t)&v47);
          a5 = 0;
          *(__n128 *)a1 = v47;
          v19 = v48;
LABEL_19:
          *((_QWORD *)a1 + 2) = v19;
          goto LABEL_20;
        }
LABEL_10:
        v45 = *(__n128 *)a1;
        v46 = *((_QWORD *)a1 + 2);
        v43 = *(__n128 *)a2;
        v44 = *((_QWORD *)a2 + 2);
        _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEERPDoFbRKS7_SA_EEENS_4pairIT0_bEESF_SF_T1_((gsl::details *)&v45, (gsl::details *)&v43, (uint64_t (**)(gsl::details *, uint64_t *))a3, (uint64_t)&v47);
        v128 = v47;
        v129 = v48;
        if (!v49)
          goto LABEL_17;
        v41 = *(__n128 *)a1;
        v42 = *((_QWORD *)a1 + 2);
        v39 = v47;
        v40 = v48;
        v18 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEbT1_SE_T0_((gsl::details *)&v41, (gsl::details *)&v39, a3);
        v37 = v128;
        v38 = v129;
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v37, 1);
        v35 = *(__n128 *)a2;
        v36 = *((_QWORD *)a2 + 2);
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEbT1_SE_T0_((gsl::details *)&v37, (gsl::details *)&v35, a3))
        {
          if (v18)
          {
            v20 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v128);
          }
          else
          {
LABEL_17:
            v33 = *(__n128 *)a1;
            v34 = *((_QWORD *)a1 + 2);
            v31 = v128;
            v32 = v129;
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EELb0EEEvT1_SE_T0_NS_15iterator_traitsISE_E15difference_typeEb(&v33, &v31, a3, v9, a5 & 1);
            v20 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v128);
            a5 = 0;
          }
          v19 = *((_QWORD *)v20 + 2);
          *(_OWORD *)a1 = *(_OWORD *)v20;
          goto LABEL_19;
        }
        if (!v18)
        {
          *(__n128 *)a2 = v128;
          *((_QWORD *)a2 + 2) = v129;
LABEL_20:
          --v9;
          continue;
        }
        return;
    }
  }
}

gsl::details *gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(gsl::details *result)
{
  unint64_t v1;

  if (!*(_QWORD *)result || !*((_QWORD *)result + 1) || (v1 = *((_QWORD *)result + 2), *(_QWORD *)result >= v1))
    gsl::details::terminate(result);
  *((_QWORD *)result + 2) = v1 - 8;
  return result;
}

gsl::details *_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_T0_(gsl::details *result, _QWORD *a2, unsigned int (**a3)(gsl::details *, gsl::details *))
{
  gsl::details *v4;
  unsigned int (*v6)(gsl::details *, gsl::details *);
  gsl::details *v7;
  gsl::details *v8;
  uint64_t v9;
  gsl::details *v10;
  unsigned int (*v11)(gsl::details *, gsl::details *);
  gsl::details *v12;
  gsl::details *v13;
  gsl::details *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (*(_QWORD *)result != *a2)
    goto LABEL_14;
  v4 = result;
  if (*((_QWORD *)result + 1) != a2[1])
    goto LABEL_14;
  if (*((_QWORD *)result + 2) != a2[2])
  {
    v20 = *(_OWORD *)result;
    v21 = *((_QWORD *)result + 2);
    while (1)
    {
      result = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v20);
      if (v20 != *(_OWORD *)a2)
        break;
      if (v21 == a2[2])
        return result;
      v18 = v20;
      v19 = v21;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--((gsl::details *)&v18);
      v6 = *a3;
      v7 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
      v8 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18);
      if (v6(v7, v8))
      {
        v9 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
        v15 = v18;
        v16 = v19;
        v17 = v9;
        v19 = v21;
        v18 = v20;
        do
        {
          v10 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v15);
          result = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18);
          *(_QWORD *)result = *(_QWORD *)v10;
          v18 = v15;
          v19 = v16;
          if (v15 != *(_OWORD *)v4)
            goto LABEL_14;
          if (v19 == *((_QWORD *)v4 + 2))
            break;
          v11 = *a3;
          v12 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--((gsl::details *)&v15);
          v13 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v12);
        }
        while ((((uint64_t (*)(uint64_t *, gsl::details *))v11)(&v17, v13) & 1) != 0);
        v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18);
        *(_QWORD *)v14 = v17;
      }
    }
LABEL_14:
    gsl::details::terminate(result);
  }
  return result;
}

gsl::details *_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_T0_(gsl::details *result, _QWORD *a2, unsigned int (**a3)(gsl::details *, gsl::details *))
{
  gsl::details *v4;
  unsigned int (*v6)(gsl::details *, gsl::details *);
  gsl::details *v7;
  gsl::details *v8;
  uint64_t v9;
  gsl::details *v10;
  unsigned int (*v11)(gsl::details *, gsl::details *);
  gsl::details *v12;
  gsl::details *v13;
  gsl::details *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (*(_QWORD *)result != *a2)
    goto LABEL_13;
  v4 = result;
  if (*((_QWORD *)result + 1) != a2[1])
    goto LABEL_13;
  if (*((_QWORD *)result + 2) != a2[2])
  {
    v22 = *(_OWORD *)result;
    v23 = *((_QWORD *)result + 2);
    gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v22, 1);
    v20 = *(_OWORD *)v4;
    v21 = *((_QWORD *)v4 + 2);
    result = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v20, 1);
    while (v20 == *(_OWORD *)a2)
    {
      if (v21 == a2[2])
        return result;
      v18 = v20;
      v19 = v21;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v18, 1);
      v6 = *a3;
      v7 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
      v8 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18);
      if (v6(v7, v8))
      {
        v9 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
        v15 = v18;
        v16 = v19;
        v17 = v9;
        v19 = v21;
        v18 = v20;
        do
        {
          v10 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v15);
          *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18) = *(_QWORD *)v10;
          v18 = v15;
          v19 = v16;
          v11 = *a3;
          v12 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--((gsl::details *)&v15);
          v13 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v12);
        }
        while ((((uint64_t (*)(uint64_t *, gsl::details *))v11)(&v17, v13) & 1) != 0);
        v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18);
        *(_QWORD *)v14 = v17;
      }
      result = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v20);
    }
LABEL_13:
    gsl::details::terminate(result);
  }
  return result;
}

__n128 _ZNSt3__114__partial_sortB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EESD_EET1_SE_SE_T2_RT0_@<Q0>(gsl::details *a1@<X0>, _QWORD *a2@<X1>, __n128 *a3@<X2>, unsigned int (**a4)(gsl::details *, gsl::details *)@<X3>, gsl::details *a5@<X8>)
{
  __n128 result;
  __n128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  if (*(_QWORD *)a1 != *a2 || *((_QWORD *)a1 + 1) != a2[1])
    gsl::details::terminate(a1);
  if (*((_QWORD *)a1 + 2) == a2[2])
  {
    result = *a3;
    *(__n128 *)a5 = *a3;
    *((_QWORD *)a5 + 2) = a3[1].n128_u64[0];
  }
  else
  {
    v10 = *(_OWORD *)a1;
    v11 = *((_QWORD *)a1 + 2);
    v8 = *(_OWORD *)a2;
    v9 = a2[2];
    v6 = *a3;
    v7 = a3[1].n128_u64[0];
    result.n128_u64[0] = _ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EESD_EET1_SE_SE_T2_OT0_((gsl::details *)&v10, (gsl::details *)&v8, &v6, a4, a5).n128_u64[0];
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_(gsl::details *a1, gsl::details *a2, gsl::details *a3, uint64_t (**a4)(gsl::details *, gsl::details *))
{
  uint64_t (*v8)(gsl::details *, gsl::details *);
  gsl::details *v9;
  gsl::details *v10;
  uint64_t (*v11)(gsl::details *, gsl::details *);
  gsl::details *v12;
  gsl::details *v13;
  uint64_t result;
  gsl::details *v15;
  gsl::details *v16;
  uint64_t v17;
  gsl::details *v18;
  gsl::details *v19;
  uint64_t v20;
  uint64_t (*v21)(gsl::details *, gsl::details *);
  gsl::details *v22;
  gsl::details *v23;
  uint64_t v24;
  gsl::details *v25;
  gsl::details *v26;
  uint64_t v27;
  uint64_t (*v28)(gsl::details *, gsl::details *);
  gsl::details *v29;
  gsl::details *v30;
  gsl::details *v31;
  gsl::details *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v8 = *a4;
  v9 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
  v10 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
  LOBYTE(v9) = v8(v9, v10);
  v11 = *a4;
  v12 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a3);
  v13 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
  result = v11(v12, v13);
  if ((v9 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v36 = *(_OWORD *)a2;
    v37 = *((_QWORD *)a2 + 2);
    v34 = *(_OWORD *)a3;
    v35 = *((_QWORD *)a3 + 2);
    v18 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
    v19 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
    v20 = *(_QWORD *)v18;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)v19 = v20;
    v21 = *a4;
    v22 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
    v23 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
    if (!v21(v22, v23))
      return 1;
    v36 = *(_OWORD *)a1;
    v37 = *((_QWORD *)a1 + 2);
    v34 = *(_OWORD *)a2;
    v24 = *((_QWORD *)a2 + 2);
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    v36 = *(_OWORD *)a1;
    v37 = *((_QWORD *)a1 + 2);
    v34 = *(_OWORD *)a2;
    v35 = *((_QWORD *)a2 + 2);
    v25 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
    v26 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_QWORD *)v26 = v27;
    v28 = *a4;
    v29 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a3);
    v30 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
    if (!v28(v29, v30))
      return 1;
    v36 = *(_OWORD *)a2;
    v37 = *((_QWORD *)a2 + 2);
    v34 = *(_OWORD *)a3;
    v24 = *((_QWORD *)a3 + 2);
LABEL_9:
    v35 = v24;
    v31 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
    v32 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
    v33 = *(_QWORD *)v31;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)v32 = v33;
    return 2;
  }
  v36 = *(_OWORD *)a1;
  v37 = *((_QWORD *)a1 + 2);
  v34 = *(_OWORD *)a3;
  v35 = *((_QWORD *)a3 + 2);
  v15 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
  v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
  v17 = *(_QWORD *)v15;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v17;
  return 1;
}

__n128 _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEERPDoFbRKS7_SA_EEET0_SE_SE_T1_@<Q0>(gsl::details *a1@<X0>, gsl::details *a2@<X1>, uint64_t (**a3)(uint64_t *, gsl::details *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v8)(uint64_t *, gsl::details *);
  gsl::details *v9;
  uint64_t (*v10)(uint64_t *, gsl::details *);
  gsl::details *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, gsl::details *);
  gsl::details *v14;
  uint64_t (*v15)(uint64_t *, gsl::details *);
  gsl::details *v16;
  gsl::details *v17;
  gsl::details *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t *, gsl::details *);
  gsl::details *v21;
  uint64_t (*v22)(uint64_t *, gsl::details *);
  gsl::details *v23;
  gsl::details *v24;
  gsl::details *v25;
  __n128 result;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v28 = *(__n128 *)a1;
  v29 = *((_QWORD *)a1 + 2);
  v27 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
  v8 = *a3;
  v32 = *(_OWORD *)a2;
  v33 = *((_QWORD *)a2 + 2);
  gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v32, 1);
  v9 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v32);
  if (!v8(&v27, v9))
  {
    while (1)
    {
      v12 = (uint64_t)gsl::details::span_iterator<spectral_peak_t const>::operator++(a1);
      if (*(_QWORD *)v12 != *(_QWORD *)a2 || *(_QWORD *)(v12 + 8) != *((_QWORD *)a2 + 1))
        break;
      if (*(_QWORD *)(v12 + 16) < *((_QWORD *)a2 + 2))
      {
        v13 = *a3;
        v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
        v12 = v13(&v27, v14);
        if (!(_DWORD)v12)
          continue;
      }
      goto LABEL_8;
    }
LABEL_23:
    gsl::details::terminate((gsl::details *)v12);
  }
  do
  {
    gsl::details::span_iterator<spectral_peak_t const>::operator++(a1);
    v10 = *a3;
    v11 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
    v12 = v10(&v27, v11);
  }
  while ((v12 & 1) == 0);
LABEL_8:
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
    goto LABEL_23;
  if (*((_QWORD *)a1 + 2) >= *((_QWORD *)a2 + 2))
    goto LABEL_13;
  do
  {
    gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
    v15 = *a3;
    v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
    v12 = v15(&v27, v16);
  }
  while ((v12 & 1) != 0);
  while (1)
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      goto LABEL_23;
LABEL_13:
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
      goto LABEL_23;
    if (*((_QWORD *)a1 + 2) >= *((_QWORD *)a2 + 2))
      break;
    v32 = *(_OWORD *)a1;
    v33 = *((_QWORD *)a1 + 2);
    v30 = *(_OWORD *)a2;
    v31 = *((_QWORD *)a2 + 2);
    v17 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v32);
    v18 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v30);
    v19 = *(_QWORD *)v17;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)v18 = v19;
    do
    {
      gsl::details::span_iterator<spectral_peak_t const>::operator++(a1);
      v20 = (unsigned int (*)(uint64_t *, gsl::details *))*a3;
      v21 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
    }
    while (!v20(&v27, v21));
    do
    {
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
      v22 = *a3;
      v23 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      v12 = v22(&v27, v23);
    }
    while ((v12 & 1) != 0);
  }
  v32 = *(_OWORD *)a1;
  v33 = *((_QWORD *)a1 + 2);
  v12 = (uint64_t)gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v32, 1);
  if (*(_OWORD *)&v28 != v32)
    goto LABEL_23;
  if (v29 != v33)
  {
    v24 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v32);
    *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v28) = *(_QWORD *)v24;
  }
  v25 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v32);
  *(_QWORD *)v25 = v27;
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
  return result;
}

double _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEERPDoFbRKS7_SA_EEENS_4pairIT0_bEESF_SF_T1_@<D0>(gsl::details *a1@<X0>, gsl::details *a2@<X1>, uint64_t (**a3)(gsl::details *, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v8)(gsl::details *, uint64_t *);
  gsl::details *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(gsl::details *, uint64_t *);
  gsl::details *v15;
  uint64_t (*v16)(gsl::details *, uint64_t *);
  gsl::details *v17;
  gsl::details *v18;
  unint64_t v19;
  unint64_t v20;
  gsl::details *v21;
  gsl::details *v22;
  uint64_t v23;
  uint64_t (*v24)(gsl::details *, uint64_t *);
  gsl::details *v25;
  uint64_t (*v26)(gsl::details *, uint64_t *);
  gsl::details *v27;
  gsl::details *v29;
  gsl::details *v30;
  double result;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v33 = *(_OWORD *)a1;
  v34 = *((_QWORD *)a1 + 2);
  v32 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
  do
  {
    gsl::details::span_iterator<spectral_peak_t const>::operator++(a1);
    v8 = *a3;
    v9 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
  }
  while ((v8(v9, &v32) & 1) != 0);
  v37 = *(_OWORD *)a1;
  v38 = *((_QWORD *)a1 + 2);
  v10 = (uint64_t)gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v37, 1);
  v11 = v33;
  if ((_QWORD)v33 != (_QWORD)v37)
    goto LABEL_30;
  v12 = *((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1) != *((_QWORD *)&v37 + 1))
    goto LABEL_30;
  v13 = v34;
  if (v34 == v38)
  {
    while (*(_QWORD *)a1 == *(_QWORD *)a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1))
    {
      if (*((_QWORD *)a1 + 2) < *((_QWORD *)a2 + 2))
      {
        v16 = *a3;
        v17 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
        v18 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v17);
        v10 = v16(v18, &v32);
        if ((v10 & 1) == 0)
          continue;
      }
      goto LABEL_12;
    }
LABEL_30:
    gsl::details::terminate((gsl::details *)v10);
  }
  do
  {
    gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
    v14 = *a3;
    v15 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
    v10 = v14(v15, &v32);
  }
  while (!(_DWORD)v10);
LABEL_12:
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
    goto LABEL_30;
  v19 = *((_QWORD *)a1 + 2);
  v20 = *((_QWORD *)a2 + 2);
  while (1)
  {
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
      goto LABEL_30;
    if (*((_QWORD *)a1 + 2) >= *((_QWORD *)a2 + 2))
      break;
    v37 = *(_OWORD *)a1;
    v38 = *((_QWORD *)a1 + 2);
    v35 = *(_OWORD *)a2;
    v36 = *((_QWORD *)a2 + 2);
    v21 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v37);
    v22 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v35);
    v23 = *(_QWORD *)v21;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)v22 = v23;
    do
    {
      gsl::details::span_iterator<spectral_peak_t const>::operator++(a1);
      v24 = *a3;
      v25 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
    }
    while ((v24(v25, &v32) & 1) != 0);
    do
    {
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
      v26 = *a3;
      v27 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      v10 = v26(v27, &v32);
    }
    while (!(_DWORD)v10);
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      goto LABEL_30;
  }
  v37 = *(_OWORD *)a1;
  v38 = *((_QWORD *)a1 + 2);
  v10 = (uint64_t)gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=((gsl::details *)&v37, 1);
  if (v11 != (_QWORD)v37 || v12 != *((_QWORD *)&v37 + 1))
    goto LABEL_30;
  if (v13 != v38)
  {
    v29 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v37);
    *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v33) = *(_QWORD *)v29;
  }
  v30 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v37);
  *(_QWORD *)v30 = v32;
  result = *(double *)&v37;
  *(_OWORD *)a4 = v37;
  *(_QWORD *)(a4 + 16) = v38;
  *(_BYTE *)(a4 + 24) = v19 >= v20;
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEbT1_SE_T0_(gsl::details *a1, gsl::details *a2, uint64_t (**a3)(gsl::details *, gsl::details *))
{
  uint64_t v6;
  uint64_t (*v7)(gsl::details *, gsl::details *);
  gsl::details *v8;
  gsl::details *v9;
  gsl::details *v10;
  gsl::details *v11;
  gsl::details *v12;
  uint64_t v13;
  gsl::details *v14;
  int v15;
  uint64_t (*v16)(gsl::details *, gsl::details *);
  gsl::details *v17;
  gsl::details *v18;
  gsl::details *v19;
  uint64_t (*v20)(gsl::details *, gsl::details *);
  gsl::details *v21;
  gsl::details *v22;
  gsl::details *v23;
  gsl::details *v24;
  gsl::details *v25;
  gsl::details *v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;

  v6 = 1;
  switch(gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-<xpair_group<xpair_fields>,0>(a2, a1))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = *a3;
      v8 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
      v9 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v8);
      v10 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
      if (v7(v9, v10))
      {
        v64 = *(_OWORD *)a1;
        v65 = *((_QWORD *)a1 + 2);
        v62 = *(_OWORD *)a2;
        v63 = *((_QWORD *)a2 + 2);
        v11 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v64);
        v12 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v62);
        v13 = *(_QWORD *)v11;
        *(_QWORD *)v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = v13;
      }
      return 1;
    case 3:
      v54 = *(_OWORD *)a1;
      v55 = *((_QWORD *)a1 + 2);
      v52 = v54;
      v53 = v55;
      v6 = 1;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v52, 1);
      v24 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
      v51 = *((_QWORD *)v24 + 2);
      v50 = *(_OWORD *)v24;
      v64 = v54;
      v65 = v55;
      v62 = v52;
      v63 = v53;
      v60 = v50;
      v61 = v51;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v64, (gsl::details *)&v62, (gsl::details *)&v60, a3);
      return v6;
    case 4:
      v48 = *(_OWORD *)a1;
      v49 = *((_QWORD *)a1 + 2);
      v46 = v48;
      v47 = v49;
      v6 = 1;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v46, 1);
      v44 = *(_OWORD *)a1;
      v45 = *((_QWORD *)a1 + 2);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v44, 2);
      v25 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
      v42 = *(_OWORD *)v25;
      v43 = *((_QWORD *)v25 + 2);
      v64 = v48;
      v65 = v49;
      v62 = v46;
      v63 = v47;
      v60 = v44;
      v61 = v45;
      v59 = v43;
      v58 = v42;
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_T0_((gsl::details *)&v64, (gsl::details *)&v62, (gsl::details *)&v60, (gsl::details *)&v58, a3);
      return v6;
    case 5:
      v40 = *(_OWORD *)a1;
      v41 = *((_QWORD *)a1 + 2);
      v38 = v40;
      v39 = v41;
      v6 = 1;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v38, 1);
      v36 = *(_OWORD *)a1;
      v37 = *((_QWORD *)a1 + 2);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v36, 2);
      v34 = *(_OWORD *)a1;
      v35 = *((_QWORD *)a1 + 2);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v34, 3);
      v26 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
      v32 = *(_OWORD *)v26;
      v33 = *((_QWORD *)v26 + 2);
      v64 = v40;
      v65 = v41;
      v62 = v38;
      v63 = v39;
      v60 = v36;
      v61 = v37;
      v59 = v35;
      v58 = v34;
      v57 = v33;
      v56 = v32;
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_SE_T0_((gsl::details *)&v64, (gsl::details *)&v62, (gsl::details *)&v60, (gsl::details *)&v58, (gsl::details *)&v56, a3);
      return v6;
    default:
      v58 = *(_OWORD *)a1;
      v59 = *((_QWORD *)a1 + 2);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v58, 2);
      v30 = *(_OWORD *)a1;
      v31 = *((_QWORD *)a1 + 2);
      v28 = v30;
      v29 = v31;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v28, 1);
      v60 = v58;
      v61 = v59;
      v64 = v30;
      v65 = v31;
      v62 = v28;
      v63 = v29;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v64, (gsl::details *)&v62, (gsl::details *)&v60, a3);
      v64 = v58;
      v65 = v59;
      v14 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v64, 1);
      if ((_QWORD)v64 != *(_QWORD *)a2)
        goto LABEL_24;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (*((_QWORD *)&v64 + 1) != *((_QWORD *)a2 + 1))
      goto LABEL_24;
    if (v65 == *((_QWORD *)a2 + 2))
      return 1;
    v16 = *a3;
    v17 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v64);
    v18 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v58);
    if (v16(v17, v18))
    {
      *(_QWORD *)&v60 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v64);
      v62 = v58;
      v63 = v59;
      v59 = v65;
      v58 = v64;
      do
      {
        v19 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v62);
        v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v58);
        *(_QWORD *)v14 = *(_QWORD *)v19;
        v58 = v62;
        v59 = v63;
        if (v62 != *(_OWORD *)a1)
          goto LABEL_24;
        if (v59 == *((_QWORD *)a1 + 2))
          break;
        v20 = *a3;
        v21 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--((gsl::details *)&v62);
        v22 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v21);
      }
      while ((v20((gsl::details *)&v60, v22) & 1) != 0);
      v23 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v58);
      *(_QWORD *)v23 = v60;
      if (++v15 == 8)
        break;
    }
    v58 = v64;
    v59 = v65;
    v14 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v64);
    if ((_QWORD)v64 != *(_QWORD *)a2)
      goto LABEL_24;
  }
  v14 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v64);
  if (*(_QWORD *)v14 != *(_QWORD *)a2 || *((_QWORD *)v14 + 1) != *((_QWORD *)a2 + 1))
LABEL_24:
    gsl::details::terminate(v14);
  return *((_QWORD *)v14 + 2) == *((_QWORD *)a2 + 2);
}

gsl::details *gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=(gsl::details *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    if (!*(_QWORD *)result || (v2 = *((_QWORD *)result + 2)) == 0 || (v3 = *((_QWORD *)result + 1)) == 0)
LABEL_11:
      gsl::details::terminate(result);
    if (a2 < 1)
    {
      if (-a2 > (v2 - *(_QWORD *)result) >> 3)
        goto LABEL_11;
    }
    else if (a2 > (v3 - v2) >> 3)
    {
      goto LABEL_11;
    }
  }
  else
  {
    v2 = *((_QWORD *)result + 2);
  }
  *((_QWORD *)result + 2) = v2 + 8 * a2;
  return result;
}

gsl::details *_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_T0_(gsl::details *a1, gsl::details *a2, gsl::details *a3, gsl::details *a4, uint64_t (**a5)(gsl::details *, gsl::details *))
{
  uint64_t (*v10)(gsl::details *, gsl::details *);
  gsl::details *v11;
  gsl::details *v12;
  gsl::details *result;
  gsl::details *v14;
  gsl::details *v15;
  uint64_t v16;
  uint64_t (*v17)(gsl::details *, gsl::details *);
  gsl::details *v18;
  gsl::details *v19;
  gsl::details *v20;
  gsl::details *v21;
  uint64_t v22;
  uint64_t (*v23)(gsl::details *, gsl::details *);
  gsl::details *v24;
  gsl::details *v25;
  gsl::details *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v32 = *(_OWORD *)a1;
  v33 = *((_QWORD *)a1 + 2);
  v30 = *(_OWORD *)a2;
  v31 = *((_QWORD *)a2 + 2);
  v28 = *(_OWORD *)a3;
  v29 = *((_QWORD *)a3 + 2);
  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEjT1_SE_SE_T0_((gsl::details *)&v32, (gsl::details *)&v30, (gsl::details *)&v28, a5);
  v10 = *a5;
  v11 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4);
  v12 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a3);
  result = (gsl::details *)v10(v11, v12);
  if ((_DWORD)result)
  {
    v36 = *(_OWORD *)a3;
    v37 = *((_QWORD *)a3 + 2);
    v34 = *(_OWORD *)a4;
    v35 = *((_QWORD *)a4 + 2);
    v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
    v15 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
    v16 = *(_QWORD *)v14;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)v15 = v16;
    v17 = *a5;
    v18 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a3);
    v19 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
    result = (gsl::details *)v17(v18, v19);
    if ((_DWORD)result)
    {
      v36 = *(_OWORD *)a2;
      v37 = *((_QWORD *)a2 + 2);
      v34 = *(_OWORD *)a3;
      v35 = *((_QWORD *)a3 + 2);
      v20 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
      v21 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
      v22 = *(_QWORD *)v20;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_QWORD *)v21 = v22;
      v23 = *a5;
      v24 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      v25 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
      result = (gsl::details *)v23(v24, v25);
      if ((_DWORD)result)
      {
        v36 = *(_OWORD *)a1;
        v37 = *((_QWORD *)a1 + 2);
        v34 = *(_OWORD *)a2;
        v35 = *((_QWORD *)a2 + 2);
        v26 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
        result = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v34);
        v27 = *(_QWORD *)v26;
        *(_QWORD *)v26 = *(_QWORD *)result;
        *(_QWORD *)result = v27;
      }
    }
  }
  return result;
}

gsl::details *_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_SE_T0_(gsl::details *a1, gsl::details *a2, gsl::details *a3, gsl::details *a4, gsl::details *a5, uint64_t (**a6)(gsl::details *, gsl::details *))
{
  uint64_t (*v12)(gsl::details *, gsl::details *);
  gsl::details *v13;
  gsl::details *v14;
  gsl::details *result;
  gsl::details *v16;
  gsl::details *v17;
  uint64_t v18;
  uint64_t (*v19)(gsl::details *, gsl::details *);
  gsl::details *v20;
  gsl::details *v21;
  gsl::details *v22;
  gsl::details *v23;
  uint64_t v24;
  uint64_t (*v25)(gsl::details *, gsl::details *);
  gsl::details *v26;
  gsl::details *v27;
  gsl::details *v28;
  gsl::details *v29;
  uint64_t v30;
  uint64_t (*v31)(gsl::details *, gsl::details *);
  gsl::details *v32;
  gsl::details *v33;
  gsl::details *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v42 = *(_OWORD *)a1;
  v43 = *((_QWORD *)a1 + 2);
  v40 = *(_OWORD *)a2;
  v41 = *((_QWORD *)a2 + 2);
  v38 = *(_OWORD *)a3;
  v39 = *((_QWORD *)a3 + 2);
  v37 = *((_QWORD *)a4 + 2);
  v36 = *(_OWORD *)a4;
  _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_SE_SE_T0_((gsl::details *)&v42, (gsl::details *)&v40, (gsl::details *)&v38, (gsl::details *)&v36, a6);
  v12 = *a6;
  v13 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a5);
  v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4);
  result = (gsl::details *)v12(v13, v14);
  if ((_DWORD)result)
  {
    v46 = *(_OWORD *)a4;
    v47 = *((_QWORD *)a4 + 2);
    v44 = *(_OWORD *)a5;
    v45 = *((_QWORD *)a5 + 2);
    v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v46);
    v17 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v44);
    v18 = *(_QWORD *)v16;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_QWORD *)v17 = v18;
    v19 = *a6;
    v20 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4);
    v21 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a3);
    result = (gsl::details *)v19(v20, v21);
    if ((_DWORD)result)
    {
      v46 = *(_OWORD *)a3;
      v47 = *((_QWORD *)a3 + 2);
      v44 = *(_OWORD *)a4;
      v45 = *((_QWORD *)a4 + 2);
      v22 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v46);
      v23 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v44);
      v24 = *(_QWORD *)v22;
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_QWORD *)v23 = v24;
      v25 = *a6;
      v26 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a3);
      v27 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      result = (gsl::details *)v25(v26, v27);
      if ((_DWORD)result)
      {
        v46 = *(_OWORD *)a2;
        v47 = *((_QWORD *)a2 + 2);
        v44 = *(_OWORD *)a3;
        v45 = *((_QWORD *)a3 + 2);
        v28 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v46);
        v29 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v44);
        v30 = *(_QWORD *)v28;
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *(_QWORD *)v29 = v30;
        v31 = *a6;
        v32 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
        v33 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a1);
        result = (gsl::details *)v31(v32, v33);
        if ((_DWORD)result)
        {
          v46 = *(_OWORD *)a1;
          v47 = *((_QWORD *)a1 + 2);
          v44 = *(_OWORD *)a2;
          v45 = *((_QWORD *)a2 + 2);
          v34 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v46);
          result = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v44);
          v35 = *(_QWORD *)v34;
          *(_QWORD *)v34 = *(_QWORD *)result;
          *(_QWORD *)result = v35;
        }
      }
    }
  }
  return result;
}

__n128 _ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EESD_EET1_SE_SE_T2_OT0_@<Q0>(gsl::details *a1@<X0>, gsl::details *a2@<X1>, __n128 *a3@<X2>, unsigned int (**a4)(gsl::details *, gsl::details *)@<X3>, gsl::details *a5@<X8>)
{
  uint64_t v6;
  gsl::details *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(gsl::details *, gsl::details *);
  gsl::details *v19;
  gsl::details *v20;
  gsl::details *v21;
  gsl::details *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 result;
  unint64_t v28;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_22;
  v8 = a1;
  v9 = *((_QWORD *)a1 + 1);
  if (v9 != *((_QWORD *)a2 + 1))
    goto LABEL_22;
  v11 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a2 + 2);
  if (v11 == v12)
  {
    result = *a3;
    *(__n128 *)a5 = *a3;
    *((_QWORD *)a5 + 2) = a3[1].n128_u64[0];
    return result;
  }
  v14 = v12 - v11;
  if (v14 >= 9)
  {
    v15 = v14 >> 3;
    v16 = (unint64_t)((v14 >> 3) - 2) >> 1;
    do
    {
      *(_QWORD *)&v38 = v6;
      *((_QWORD *)&v38 + 1) = v9;
      v39 = v11;
      *(_QWORD *)&v36 = v6;
      *((_QWORD *)&v36 + 1) = v9;
      v37 = v11;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v36, v16);
      _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_OT0_NS_15iterator_traitsISE_E15difference_typeESE_(&v38, a4, v15, (gsl::details *)&v36);
      --v16;
    }
    while (v16 != -1);
  }
  a1 = (gsl::details *)gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-<xpair_group<xpair_fields>,0>(a2, v8);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *((_QWORD *)a5 + 2) = *((_QWORD *)a2 + 2);
  if (*(_QWORD *)a5 != a3->n128_u64[0])
    goto LABEL_22;
  v17 = (uint64_t)a1;
  while (1)
  {
    if (*((_QWORD *)a5 + 1) != a3->n128_u64[1])
      goto LABEL_22;
    if (*((_QWORD *)a5 + 2) == a3[1].n128_u64[0])
      break;
    v18 = *a4;
    v19 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a5);
    v20 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v8);
    if (v18(v19, v20))
    {
      v38 = *(_OWORD *)a5;
      v39 = *((_QWORD *)a5 + 2);
      v36 = *(_OWORD *)v8;
      v37 = *((_QWORD *)v8 + 2);
      v21 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v38);
      v22 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v36);
      v23 = *(_QWORD *)v21;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_QWORD *)v22 = v23;
      v34 = *(_OWORD *)v8;
      v35 = *((_QWORD *)v8 + 2);
      v32 = v34;
      v33 = v35;
      _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_OT0_NS_15iterator_traitsISE_E15difference_typeESE_(&v34, a4, v17, (gsl::details *)&v32);
    }
    a1 = gsl::details::span_iterator<spectral_peak_t const>::operator++(a5);
    if (*(_QWORD *)a5 != a3->n128_u64[0])
      goto LABEL_22;
  }
  v24 = *(_QWORD *)v8;
  v25 = *((_QWORD *)v8 + 1);
  v26 = *((_QWORD *)v8 + 2);
  result = *(__n128 *)a2;
  v30 = *(_OWORD *)a2;
  v31 = *((_QWORD *)a2 + 2);
  if (v30 != __PAIR128__(v25, v24))
LABEL_22:
    gsl::details::terminate(a1);
  if (v31 - v26 >= 9)
  {
    v28 = (unint64_t)(v31 - v26) >> 3;
    do
    {
      *(_QWORD *)&v38 = v24;
      *((_QWORD *)&v38 + 1) = v25;
      v39 = v26;
      v36 = v30;
      v37 = v31;
      _ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SD_RT0_NS_15iterator_traitsISD_E15difference_typeE((gsl::details *)&v38, (gsl::details *)&v36, a4, v28);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--((gsl::details *)&v30);
    }
    while (v28-- > 2);
  }
  return result;
}

uint64_t _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_OT0_NS_15iterator_traitsISE_E15difference_typeESE_(_QWORD *a1, unsigned int (**a2)(gsl::details *, gsl::details *), uint64_t a3, gsl::details *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(gsl::details *, gsl::details *);
  gsl::details *v15;
  gsl::details *v16;
  uint64_t (*v17)(gsl::details *, gsl::details *);
  gsl::details *v18;
  gsl::details *v19;
  gsl::details *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(gsl::details *, gsl::details *);
  gsl::details *v24;
  gsl::details *v25;
  unsigned int (*v26)(gsl::details *, gsl::details *);
  gsl::details *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  result = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-<xpair_group<xpair_fields>,0>(a4, a1);
  v9 = a3 - 2;
  if (a3 >= 2)
  {
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= result)
    {
      v11 = 2 * result;
      v12 = (2 * result) | 1;
      v31 = *(_OWORD *)a1;
      v32 = a1[2];
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v31, v12);
      v13 = v11 + 2;
      if (v11 + 2 < a3)
      {
        v14 = *a2;
        v15 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v31);
        v29 = v31;
        v30 = v32;
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v29, 1);
        v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v29);
        if (v14(v15, v16))
        {
          gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v31);
          v12 = v13;
        }
      }
      v17 = (uint64_t (*)(gsl::details *, gsl::details *))*a2;
      v18 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v31);
      v19 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4);
      result = v17(v18, v19);
      if ((result & 1) == 0)
      {
        v28 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4);
        do
        {
          v20 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v31);
          *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4) = *(_QWORD *)v20;
          *(_OWORD *)a4 = v31;
          *((_QWORD *)a4 + 2) = v32;
          if (v10 < v12)
            break;
          v21 = 2 * v12;
          v12 = (2 * v12) | 1;
          v29 = *(_OWORD *)a1;
          v30 = a1[2];
          gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v29, v12);
          v31 = v29;
          v32 = v30;
          v22 = v21 + 2;
          if (v21 + 2 < a3)
          {
            v23 = *a2;
            v24 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v31);
            v29 = v31;
            v30 = v32;
            gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v29, 1);
            v25 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v29);
            if (v23(v24, v25))
            {
              gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v31);
              v12 = v22;
            }
          }
          v26 = *a2;
          v27 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v31);
        }
        while (!v26(v27, (gsl::details *)&v28));
        result = (uint64_t)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4);
        *(_QWORD *)result = v28;
      }
    }
  }
  return result;
}

gsl::details *_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SD_RT0_NS_15iterator_traitsISD_E15difference_typeE(gsl::details *result, gsl::details *a2, unsigned int (**a3)(gsl::details *, gsl::details *), uint64_t a4)
{
  gsl::details *v7;
  uint64_t v8;
  gsl::details *v9;
  gsl::details *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (a4 >= 2)
  {
    v7 = result;
    v8 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(result);
    v16 = *((_QWORD *)v7 + 2);
    v15 = *(_OWORD *)v7;
    _ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEET1_SE_OT0_NS_15iterator_traitsISE_E15difference_typeE(&v15, a3, a4, (gsl::details *)&v17);
    v9 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
    if (v17 != *(_OWORD *)a2)
      goto LABEL_8;
    if (v18 != *((_QWORD *)a2 + 2))
    {
      v10 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v17) = *(_QWORD *)v10;
      gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v17);
      v9 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      *(_QWORD *)v9 = v8;
      v13 = *(_OWORD *)v7;
      v14 = *((_QWORD *)v7 + 2);
      v12 = v18;
      v11 = v17;
      if (v17 == *(_OWORD *)v7)
        return _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_OT0_NS_15iterator_traitsISE_E15difference_typeE((gsl::details *)&v13, (gsl::details *)&v11, (uint64_t (**)(gsl::details *, gsl::details *))a3, (v18 - *((_QWORD *)v7 + 2)) >> 3);
LABEL_8:
      gsl::details::terminate(v9);
    }
    result = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v17);
    *(_QWORD *)result = v8;
  }
  return result;
}

double _ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEET1_SE_OT0_NS_15iterator_traitsISE_E15difference_typeE@<D0>(__int128 *a1@<X0>, unsigned int (**a2)(gsl::details *, gsl::details *)@<X1>, uint64_t a3@<X2>, gsl::details *a4@<X8>)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(gsl::details *, gsl::details *);
  gsl::details *v14;
  gsl::details *v15;
  gsl::details *v16;
  double result;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v7 = 0;
  *(_OWORD *)a4 = *a1;
  *((_QWORD *)a4 + 2) = *((_QWORD *)a1 + 2);
  v8 = *a1;
  v21 = *((_QWORD *)a1 + 2);
  v9 = a3 - 2;
  if (a3 < 2)
    v9 = a3 - 1;
  v20 = v8;
  v10 = v9 >> 1;
  do
  {
    gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v20, v7 + 1);
    v11 = 2 * v7;
    v7 = (2 * v7) | 1;
    v12 = v11 + 2;
    if (v11 + 2 < a3)
    {
      v13 = *a2;
      v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
      v18 = v20;
      v19 = v21;
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v18, 1);
      v15 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v18);
      if (v13(v14, v15))
      {
        gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v20);
        v7 = v12;
      }
    }
    v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
    *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a4) = *(_QWORD *)v16;
    result = *(double *)&v20;
    *(_OWORD *)a4 = v20;
    *((_QWORD *)a4 + 2) = v21;
  }
  while (v7 <= v10);
  return result;
}

gsl::details *_ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERPDoFbRK11xpair_groupIJ12xpair_fieldsEES6_EN3gsl7details13span_iteratorIS4_EEEEvT1_SE_OT0_NS_15iterator_traitsISE_E15difference_typeE(gsl::details *result, gsl::details *a2, uint64_t (**a3)(gsl::details *, gsl::details *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  gsl::details *v8;
  unint64_t v9;
  uint64_t (*v10)(gsl::details *, gsl::details *);
  gsl::details *v11;
  gsl::details *v12;
  gsl::details *v13;
  gsl::details *v14;
  uint64_t (*v15)(gsl::details *, gsl::details *);
  gsl::details *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a4 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v8 = result;
    v9 = (unint64_t)(a4 - 2) >> 1;
    v20 = *(_OWORD *)result;
    v21 = *((_QWORD *)result + 2);
    gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v20, v9);
    v10 = *a3;
    v11 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
    v12 = gsl::details::span_iterator<xpair_group<xpair_fields>>::operator--(a2);
    v13 = gsl::details::span_iterator<shazam::tfmatch const>::operator*(v12);
    result = (gsl::details *)v10(v11, v13);
    if ((_DWORD)result)
    {
      v19 = *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      do
      {
        v14 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
        *(_QWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2) = *(_QWORD *)v14;
        *(_OWORD *)a2 = v20;
        *((_QWORD *)a2 + 2) = v21;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v17 = *(_OWORD *)v8;
        v18 = *((_QWORD *)v8 + 2);
        gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v17, v9);
        v20 = v17;
        v21 = v18;
        v15 = *a3;
        v16 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v20);
      }
      while ((v15(v16, (gsl::details *)&v19) & 1) != 0);
      result = gsl::details::span_iterator<shazam::tfmatch const>::operator*(a2);
      *(_QWORD *)result = v19;
    }
  }
  return result;
}

gsl::details *gsl::details::span_iterator<xpair_group<xpair_fields>>::operator-=(gsl::details *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    if (!*(_QWORD *)result || (v2 = *((_QWORD *)result + 2)) == 0 || (v3 = *((_QWORD *)result + 1)) == 0)
LABEL_11:
      gsl::details::terminate(result);
    if (a2 < 1)
    {
      if (-a2 > (v3 - v2) >> 3)
        goto LABEL_11;
    }
    else if (a2 > (v2 - *(_QWORD *)result) >> 3)
    {
      goto LABEL_11;
    }
  }
  else
  {
    v2 = *((_QWORD *)result + 2);
  }
  *((_QWORD *)result + 2) = v2 - 8 * a2;
  return result;
}

gsl::details *shazam::cull_phase<(AlgoType)1,xpair_group<xpair_fields>,2ul,(void *)0>(std::vector<Result> &,Result,std::vector<shazam::regresspair> &,gsl::span<xpair_group<xpair_fields>,18446744073709551615ul> const&)::{lambda((AlgoType)1)#1}::operator()<gsl::span<xpair_group<xpair_fields>,18446744073709551615ul>>(float ***a1, unint64_t a2, uint64_t a3)
{
  float **v4;
  uint64_t *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  gsl::details *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  gsl::details *i;
  float v19;
  float *v20;
  float v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  double v28[2];
  char v29;
  _QWORD v30[2];

  v25 = a2;
  v26 = a3;
  v4 = *a1;
  v4[4] = (float *)a2;
  shazam::shearfactor<(AlgoType)1,xpair_group<xpair_fields>,(void *)0>(&v25, (float *)v4 + 18, (float *)v4 + 14);
  shazam::xpairs_to_regresspairs<xpair_group<xpair_fields>>(v25, v26, a1[1], *((float *)*a1 + 18));
  v5 = (uint64_t *)a1[1];
  v6 = *v5;
  v7 = (float *)v5[1];
  v8 = (uint64_t)v7 - *v5;
  v9 = v8 >> 3;
  if ((unint64_t)v8 >> 6 > 0x7C)
  {
    v10 = 126 - 2 * __clz(v9);
    if (v7 == (float *)v6)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *,false>(v6, v7, (uint64_t)v28, v11, 1);
  }
  else
  {
    insertionsort<shazam::regresspair,unsigned long,std::less<shazam::regresspair>>(v6, 0, v9);
  }
  result = (gsl::details *)gsl::make_span<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((gsl::details *)a1[1]);
  v14 = (uint64_t)*a1;
  v15 = (uint64_t *)a1[2];
  v27[0] = result;
  v27[1] = v13;
  if (result)
  {
    v16 = 0;
    v17 = 0;
    for (i = 0; i < result; i = (gsl::details *)((char *)i + 1))
    {
      if ((gsl::details *)v17 == result)
        gsl::details::terminate(result);
      if (i < result)
      {
        v19 = *(float *)(v13 + 8 * v17 + 4) + 11.0;
        if (*(float *)(v13 + 8 * (_QWORD)i + 4) < v19)
        {
          v20 = (float *)(v13 + 12 + 8 * (_QWORD)i);
          while ((gsl::details *)((char *)result - 1) != i)
          {
            v21 = *v20;
            v20 += 2;
            i = (gsl::details *)((char *)i + 1);
            if (v21 >= v19)
              goto LABEL_17;
          }
          i = result;
LABEL_17:
          v16 = v17;
        }
      }
      ++v17;
    }
    if ((unint64_t)i - v17 >= 3)
    {
      v30[0] = gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)v27, v16, (gsl::details *)((char *)i - v17));
      v30[1] = v22;
      *(_QWORD *)(v14 + 48) = v30[0];
      result = shazam::regress<shazam::regresspair,shazam::extractX<shazam::regresspair>,shazam::extractY<shazam::regresspair>>((gsl::details *)v30, (uint64_t)v28);
      if (v29)
      {
        v23 = v28[0] + *(float *)(v14 + 72);
        *(float *)(v14 + 60) = v23;
        *(double *)(v14 + 64) = v28[1];
        v24 = v15[1];
        if (v24 >= v15[2])
        {
          result = (gsl::details *)std::vector<Result>::__push_back_slow_path<Result const&>(v15, v14);
        }
        else
        {
          std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>((uint64_t)v15, v14);
          result = (gsl::details *)(v24 + 184);
        }
        v15[1] = (uint64_t)result;
      }
    }
  }
  return result;
}

float shazam::shearfactor<(AlgoType)1,xpair_group<xpair_fields>,(void *)0>(unint64_t *a1, float *a2, float *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  gsl::details *v9;
  float result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v6 = 0;
  v7 = a1[1];
  v8 = v7 + 8 * *a1;
  v12 = v7;
  v13 = v8;
  v14 = v7;
  while (v14 != v8)
  {
    v6 += *(__int16 *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v12);
    v9 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v12);
    if (v12 != v7 || v13 != v8)
      gsl::details::terminate(v9);
  }
  result = expm1((double)v6 / (float)((float)*a1 * 3103.8));
  *a3 = result;
  *a2 = result;
  return result;
}

void shazam::xpairs_to_regresspairs<xpair_group<xpair_fields>>(unint64_t a1, uint64_t a2, float **a3, float a4)
{
  float v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  float v12;
  int v13;

  std::vector<spectral_peak_t>::resize((uint64_t)a3, a1);
  v8 = *a3;
  v9 = (char *)a3[1] - (char *)*a3;
  if (v9)
  {
    v10 = v9 >> 3;
    if (v10 <= 1)
      v10 = 1;
    v11 = (_DWORD *)(a2 + 4);
    do
    {
      LOWORD(v7) = *((_WORD *)v11 - 1);
      v12 = (float)LODWORD(v7);
      *v8 = v12;
      v13 = *v11;
      v11 += 2;
      v7 = (float)v13 + (float)((float)-a4 * v12);
      v8[1] = v7;
      v8 += 2;
      --v10;
    }
    while (v10);
  }
}

uint64_t insertionsort<shazam::regresspair,unsigned long,std::less<shazam::regresspair>>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;

  v3 = a2 + 1;
  if (a2 + 1 < a3)
  {
    v4 = result + 8 * a2 + 8;
    do
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      if (v3)
      {
        v6 = (float *)v4;
        v7 = v3;
        do
        {
          if (*(v6 - 1) <= *((float *)&v5 + 1))
            break;
          *(_QWORD *)v6 = *((_QWORD *)v6 - 1);
          v6 -= 2;
          --v7;
        }
        while (v7);
      }
      else
      {
        v7 = 0;
      }
      *(_QWORD *)(result + 8 * v7) = v5;
      ++v3;
      v4 += 8;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  int *v21;
  float v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = (float *)v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) < v9[1])
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9, v9 + 2, v9 + 4, (uint64_t)(a2 - 2));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9, v9 + 2, v9 + 4, (uint64_t)(v9 + 6), (uint64_t)(a2 - 2));
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *,shazam::regresspair *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= v9[1])
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,shazam::regresspair *,std::__less<void,void> &>(v9, a2);
            v9 = (float *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = (float *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,shazam::regresspair *,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v9, v17);
          v9 = v17 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(v17 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>((uint64_t)v9, a2);
        if (v9 != a2)
        {
          while ((float *)(v8 + 8) != a2)
          {
            v22 = *(float *)(v8 + 12);
            v23 = *(float *)(v8 + 4);
            v21 = (int *)(v8 + 8);
            v8 += 8;
            if (v22 < v23)
            {
              v24 = *v21;
              v25 = (float *)v8;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 3) > v22);
              *(_DWORD *)v25 = v24;
              v25[1] = v22;
            }
          }
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  float v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if ((_DWORD *)result != a2)
  {
    v2 = (_DWORD *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = *((float *)v4 + 3);
        v6 = *((float *)v4 + 1);
        v4 = v2;
        if (v5 < v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 4);
            v8 -= 8;
            if (v9 <= v5)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_DWORD *)v10 = v7;
          *(float *)(v10 + 4) = v5;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 < a1[1])
  {
    v5 = *(_QWORD *)a1;
    if (v4 < v3)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (a3[1] >= *((float *)&v5 + 1))
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (a2[1] >= a1[1])
      return 1;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,shazam::regresspair *,std::__less<void,void> &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;

  v2 = a1[1];
  if (*(a2 - 1) <= v2)
  {
    v6 = (unint64_t)(a1 + 2);
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(float *)(v6 + 4);
      v6 += 8;
    }
    while (v7 <= v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 2);
      v5 = v3[3];
      v3 += 2;
    }
    while (v5 <= v2);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v9 > v2);
  }
  v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    v11 = *(_QWORD *)v4;
    *(_QWORD *)v4 = *(_QWORD *)v8;
    *(_QWORD *)v8 = v11;
    do
    {
      v12 = *(float *)(v4 + 12);
      v4 += 8;
    }
    while (v12 <= v2);
    do
    {
      v13 = *(v8 - 1);
      v8 -= 2;
    }
    while (v13 > v2);
  }
  if ((float *)(v4 - 8) != a1)
    *(_QWORD *)a1 = *(_QWORD *)(v4 - 8);
  *(float *)(v4 - 8) = v10;
  *(float *)(v4 - 4) = v2;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,shazam::regresspair *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  float *v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 < v4);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      v7 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 < v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 2;
      v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v4);
  }
LABEL_9:
  v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    v11 = v7;
    do
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)v11 = v12;
      do
      {
        v13 = *(float *)(v10 + 12);
        v10 += 8;
      }
      while (v13 < v4);
      do
      {
        v14 = *(v11 - 1);
        v11 -= 2;
      }
      while (v14 >= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((float *)(v10 - 8) != a1)
    *(_QWORD *)a1 = *(_QWORD *)(v10 - 8);
  *(float *)(v10 - 8) = v3;
  *(float *)(v10 - 4) = v4;
  return v10 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(a1, a1 + 2, a1 + 4, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)(a2 - 2));
      return 1;
    default:
      v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(a1, a1 + 2, a1 + 4);
      v8 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 < v7[1])
    {
      v12 = *(_DWORD *)v8;
      v13 = v9;
      while (1)
      {
        *(_QWORD *)((char *)a1 + v13 + 24) = *(_QWORD *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)((char *)a1 + v13 + 12);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = (uint64_t)a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)v15 = v12;
      *(float *)(v15 + 4) = v11;
      if (++v10 == 8)
        return v8 + 2 == a2;
    }
    v7 = v8;
    v9 += 8;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(a1, a2, a3);
  if (*(float *)(a4 + 4) < a3[1])
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    if (a3[1] < a2[1])
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (a2[1] < a1[1])
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(a1, a2, a3, a4);
  if (*(float *)(a5 + 4) < *(float *)(a4 + 4))
  {
    v11 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    if (*(float *)(a4 + 4) < a3[1])
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v12;
      if (a3[1] < a2[1])
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (a2[1] < a1[1])
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *,shazam::regresspair *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (v14[1] < a1[1])
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 2 * v17 + 2;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && v19[1] < v19[3])
          {
            v19 += 2;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[3])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = a4[1];
      if (v8[1] >= v10)
      {
        v11 = *a4;
        do
        {
          v12 = a4;
          a4 = v8;
          *(_QWORD *)v12 = *(_QWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && v8[1] < v8[3])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(float *)(a2 - 4);
    if (*(float *)(result + 8 * v4 + 4) < v5)
    {
      v8 = *(_DWORD *)(a2 - 8);
      v6 = a2 - 8;
      v7 = v8;
      do
      {
        v9 = (_QWORD *)v6;
        v6 = result + 8 * v4;
        *v9 = *(_QWORD *)v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(float *)(result + 8 * v4 + 4) < v5);
      *(_DWORD *)v6 = v7;
      *(float *)(v6 + 4) = v5;
    }
  }
  return result;
}

gsl::details *shazam::regress<shazam::regresspair,shazam::extractX<shazam::regresspair>,shazam::extractY<shazam::regresspair>>@<X0>(gsl::details *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float *v10;
  float v11;
  double v13;
  double v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (unint64_t *)result;
  v4 = *((_QWORD *)result + 1);
  v5 = v4 + 8 * *(_QWORD *)result;
  v16 = v4;
  v17 = v5;
  v18 = v4;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  while (v18 != v5)
  {
    v10 = (float *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v16);
    v11 = v10[1];
    v9 = v9 + (float)(*v10 * *v10);
    v8 = v8 + (float)(*v10 * v11);
    v6 = v6 + *v10;
    v7 = v7 + v11;
    result = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v16);
    if (v16 != v4 || v17 != v5)
      gsl::details::terminate(result);
  }
  v13 = (double)*v2;
  v14 = v13 * v9 - v6 * v6;
  if (v14 == 0.0)
  {
    v15 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    *(double *)a2 = (v13 * v8 - v7 * v6) / v14;
    *(double *)(a2 + 8) = (v9 * v7 - v8 * v6) / v14;
    v15 = 1;
  }
  *(_BYTE *)(a2 + 16) = v15;
  return result;
}

gsl::details *gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan(gsl::details *a1, unint64_t a2, gsl::details *this)
{
  unint64_t v3;

  v3 = *(_QWORD *)a1 - a2;
  if (*(_QWORD *)a1 < a2)
    goto LABEL_6;
  if (this == (gsl::details *)-1)
  {
    this = (gsl::details *)(*(_QWORD *)a1 - a2);
    if (v3 != -1)
      return this;
LABEL_6:
    gsl::details::terminate(a1);
  }
  if (v3 < (unint64_t)this)
    goto LABEL_6;
  return this;
}

void std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 80) = v7;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v3 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v3 + 144) = v10;
  *(_OWORD *)(v3 + 96) = v8;
  *(_OWORD *)(v3 + 112) = v9;
  v11 = (std::string *)(v3 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(v3 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_QWORD *)(a1 + 8) = v3 + 184;
}

void sub_218C36BD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<Result>::__push_back_slow_path<Result const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v23[2];
  char *v24;
  char *v25;
  uint64_t *v26;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v26 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Result>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[184 * v4];
  v23[0] = v10;
  v23[1] = v11;
  v24 = v11;
  v25 = &v10[184 * v9];
  v12 = *(_OWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 32);
  v13 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 5) = v12;
  *((_OWORD *)v11 + 2) = v14;
  *((_OWORD *)v11 + 3) = v13;
  v15 = *(_OWORD *)(a2 + 144);
  v17 = *(_OWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v11 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v11 + 9) = v15;
  *((_OWORD *)v11 + 6) = v17;
  *((_OWORD *)v11 + 7) = v16;
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v18;
  v19 = (std::string *)(v11 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)(a2 + 160), *(_QWORD *)(a2 + 168));
    v11 = v24;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *((_QWORD *)v11 + 22) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v24 = v11 + 184;
  std::vector<Result>::__swap_out_circular_buffer(a1, v23);
  v21 = a1[1];
  std::__split_buffer<Result>::~__split_buffer((uint64_t)v23);
  return v21;
}

void sub_218C36D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Result>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Result>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Result>,std::reverse_iterator<Result*>,std::reverse_iterator<Result*>,std::reverse_iterator<Result*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Result>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Result>,std::reverse_iterator<Result*>,std::reverse_iterator<Result*>,std::reverse_iterator<Result*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v19[3];
  char v20;
  __int128 v21;
  __int128 v22;

  v7 = a7;
  *(_QWORD *)&v22 = a6;
  *((_QWORD *)&v22 + 1) = a7;
  v21 = v22;
  v19[0] = a1;
  v19[1] = &v21;
  v19[2] = &v22;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 184);
      *(_OWORD *)(v9 - 168) = *(_OWORD *)(a3 - 168);
      *(_OWORD *)(v9 - 184) = v10;
      v11 = *(_OWORD *)(a3 - 152);
      v12 = *(_OWORD *)(a3 - 136);
      v13 = *(_OWORD *)(a3 - 120);
      *(_OWORD *)(v9 - 104) = *(_OWORD *)(a3 - 104);
      *(_OWORD *)(v9 - 120) = v13;
      *(_OWORD *)(v9 - 136) = v12;
      *(_OWORD *)(v9 - 152) = v11;
      v14 = *(_OWORD *)(a3 - 88);
      v15 = *(_OWORD *)(a3 - 72);
      v16 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v9 - 56) = v16;
      *(_OWORD *)(v9 - 72) = v15;
      *(_OWORD *)(v9 - 88) = v14;
      v17 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v17;
      v9 -= 184;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 184;
      a3 -= 184;
    }
    while (a3 != a5);
    *((_QWORD *)&v22 + 1) = v9;
  }
  v20 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Result>,std::reverse_iterator<Result*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v19);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Result>,std::reverse_iterator<Result*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Result>,std::reverse_iterator<Result*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Result>,std::reverse_iterator<Result*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 183) < 0)
      operator delete(*(void **)(v1 + 160));
    v1 += 184;
  }
}

uint64_t std::__split_buffer<Result>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<Result>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<Result>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 184;
      *(_QWORD *)(a1 + 16) = v2 - 184;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

float shazam::thresholdScore<(AlgoType)1>(int a1, int a2, float a3, float a4)
{
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];

  v4 = &shazam::thresholdCurve;
  if (a2 == 4 && a1 == 4)
    v4 = &shazam::thresholdCurve_4bands;
  v6 = v4[1];
  v9[0] = *v4;
  v9[1] = v6;
  v7 = v4[3];
  v9[2] = v4[2];
  v9[3] = v7;
  return shazam::thresholdLerp((float *)v9, a4) * a3;
}

uint64_t shazam::peaksToTFPeaks<std::vector<std::vector<spectral_peak_t>>>@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  float v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  char v18;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  if (v5 > *a2)
    LOBYTE(v5) = *a2;
  v6 = v5;
  if ((_BYTE)v5)
  {
    v7 = 0;
    v8 = (_QWORD *)(*a1 + 8);
    v5 = v5;
    do
    {
      v7 += (uint64_t)(*v8 - *(v8 - 1)) >> 3;
      v8 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<peak_tf>::reserve((void **)a3, v7);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v11 = (uint64_t *)(*a1 + 24 * i);
      v12 = *v11;
      v13 = v11[1];
      while (v12 != v13)
      {
        std::vector<peak_tf>::emplace_back<spectral_peak_t const&>((void **)a3, v12, v9);
        v12 += 8;
      }
    }
  }
  v14 = *(unsigned int **)(a3 + 8);
  v15 = 126 - 2 * __clz(((uint64_t)v14 - *(_QWORD *)a3) >> 2);
  if (v14 == *(unsigned int **)a3)
    v16 = 0;
  else
    v16 = v15;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *,false>(*(_QWORD *)a3, v14, (uint64_t)&v18, v16, 1);
}

void sub_218C37168(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<peak_tf>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_DWORD *std::vector<peak_tf>::emplace_back<spectral_peak_t const&>(void **a1, uint64_t a2, float a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  float v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  float v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  v7 = (unint64_t)a1[2];
  v5 = (uint64_t)(a1 + 2);
  v6 = v7;
  v8 = *(_DWORD **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    v11 = ((char *)v8 - (_BYTE *)*a1) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)*a1;
    v13 = v12 >> 1;
    if (v12 >> 1 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v5, v14);
    else
      v15 = 0;
    v16 = &v15[4 * v11];
    LOWORD(a3) = *(_WORD *)(a2 + 4);
    v17 = (float)LODWORD(a3) * 0.24997;
    v18 = &v15[4 * v14];
    *(_DWORD *)v16 = *(_DWORD *)v16 & 0xFFFFC000 | (int)v17 & 0x3FFF;
    *(_DWORD *)v16 = (int)v17 & 0x3FFF | (*(_DWORD *)a2 << 14);
    v10 = v16 + 4;
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        v21 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v16 - 1) = v21;
        v16 -= 4;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    LOWORD(a3) = *(_WORD *)(a2 + 4);
    v9 = (float)LODWORD(a3) * 0.24997;
    *v8 = *v8 & 0xFFFFC000 | (int)v9 & 0x3FFF;
    *v8 = (int)v9 & 0x3FFF | (*(_DWORD *)a2 << 14);
    v10 = v8 + 1;
  }
  a1[1] = v10;
  return v10 - 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  BOOL v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *,peak_tf *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,peak_tf *,std::__less<void,void> &>(v9, (int *)a2);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,peak_tf *,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unsigned int *)((char *)v9 + v29 + 4) = v28;
                  if (!v29)
                    break;
                  v28 = *(unsigned int *)((char *)v9 + v29 - 4);
                  v29 -= 4;
                  if (v27 >= v28)
                  {
                    v30 = (unsigned int *)((char *)v9 + v29 + 4);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 4;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,peak_tf *,std::__less<void,void> &>(unsigned int *a1, int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (int *)(a1 + 1);
    do
    {
      v3 = (unsigned int *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unsigned int *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unsigned int *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unsigned int *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,peak_tf *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *,peak_tf *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,peak_tf *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (unsigned int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

void std::vector<Result>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Result>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,Result *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

LABEL_1:
  v9 = (__int128 *)(a2 - 184);
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = 0xD37A6F4DE9BD37A7 * ((a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((float *)a2 - 15) > *((float *)v10 + 31))
        {
          v47 = *v10;
          v49 = v10[1];
          v55 = v10[4];
          v57 = v10[5];
          v51 = v10[2];
          v53 = v10[3];
          v63 = v10[8];
          v65 = v10[9];
          v59 = v10[6];
          v61 = v10[7];
          v35 = *((_QWORD *)v10 + 20);
          *(_QWORD *)&v67 = *((_QWORD *)v10 + 21);
          *(_QWORD *)((char *)&v67 + 7) = *(_QWORD *)((char *)v10 + 175);
          v36 = *((_BYTE *)v10 + 183);
          *((_QWORD *)v10 + 21) = 0;
          *((_QWORD *)v10 + 22) = 0;
          *((_QWORD *)v10 + 20) = 0;
          v37 = *(_OWORD *)(a2 - 184);
          v10[1] = *(_OWORD *)(a2 - 168);
          v38 = *(_OWORD *)(a2 - 136);
          v39 = *(_OWORD *)(a2 - 104);
          v40 = *(_OWORD *)(a2 - 152);
          v10[4] = *(_OWORD *)(a2 - 120);
          v10[5] = v39;
          v10[2] = v40;
          v10[3] = v38;
          v41 = *(_OWORD *)(a2 - 72);
          v42 = *(_OWORD *)(a2 - 40);
          v43 = *(_OWORD *)(a2 - 88);
          v10[8] = *(_OWORD *)(a2 - 56);
          v10[9] = v42;
          v10[6] = v43;
          v10[7] = v41;
          *v10 = v37;
          v44 = *(_OWORD *)(a2 - 24);
          *((_QWORD *)v10 + 22) = *((_QWORD *)a2 - 1);
          v10[10] = v44;
          *(_OWORD *)(a2 - 88) = v59;
          *(_OWORD *)(a2 - 72) = v61;
          *(_OWORD *)(a2 - 56) = v63;
          *(_OWORD *)(a2 - 40) = v65;
          *(_OWORD *)(a2 - 152) = v51;
          *(_OWORD *)(a2 - 136) = v53;
          *(_OWORD *)(a2 - 120) = v55;
          *(_OWORD *)(a2 - 104) = v57;
          *(_OWORD *)(a2 - 184) = v47;
          *(_OWORD *)(a2 - 168) = v49;
          *((_QWORD *)a2 - 3) = v35;
          *((_QWORD *)a2 - 2) = v67;
          *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)&v67 + 7);
          *(a2 - 1) = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v10, (__int128 *)((char *)v10 + 184), v9);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((uint64_t)v10, (uint64_t)v10 + 184, (uint64_t)(v10 + 23), (uint64_t)v9);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((uint64_t)v10, (uint64_t)v10 + 184, (uint64_t)(v10 + 23), (uint64_t)v10 + 552, (uint64_t)v9);
        return;
      default:
        if (v13 <= 4415)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v10, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v10, (__int128 *)a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (__int128 *)((char *)v10 + 184 * (v14 >> 1));
          if ((unint64_t)v13 < 0x5C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v16, v10, v9);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v10, v16, v9);
            v17 = v9;
            v18 = 184 * v15;
            v19 = (char *)v10 + 184 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((__int128 *)((char *)v10 + 184), (__int128 *)(v19 - 184), (__int128 *)a2 - 23);
            v20 = v10 + 23;
            v21 = (__int128 *)((char *)v10 + v18 + 184);
            v9 = v17;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v20, v21, (__int128 *)(a2 - 552));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((__int128 *)(v19 - 184), v16, v21);
            v46 = *(_OWORD *)a1;
            v48 = *(_OWORD *)(a1 + 16);
            v54 = *(_OWORD *)(a1 + 64);
            v56 = *(_OWORD *)(a1 + 80);
            v50 = *(_OWORD *)(a1 + 32);
            v52 = *(_OWORD *)(a1 + 48);
            v62 = *(_OWORD *)(a1 + 128);
            v64 = *(_OWORD *)(a1 + 144);
            v58 = *(_OWORD *)(a1 + 96);
            v60 = *(_OWORD *)(a1 + 112);
            v22 = *(_QWORD *)(a1 + 160);
            *(_QWORD *)&v66 = *(_QWORD *)(a1 + 168);
            *(_QWORD *)((char *)&v66 + 7) = *(_QWORD *)(a1 + 175);
            v23 = *(_BYTE *)(a1 + 183);
            *(_QWORD *)(a1 + 168) = 0;
            *(_QWORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 160) = 0;
            v24 = v16[1];
            *(_OWORD *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v24;
            v25 = v16[5];
            v27 = v16[2];
            v26 = v16[3];
            *(_OWORD *)(a1 + 64) = v16[4];
            *(_OWORD *)(a1 + 80) = v25;
            *(_OWORD *)(a1 + 32) = v27;
            *(_OWORD *)(a1 + 48) = v26;
            v28 = v16[9];
            v30 = v16[6];
            v29 = v16[7];
            *(_OWORD *)(a1 + 128) = v16[8];
            *(_OWORD *)(a1 + 144) = v28;
            *(_OWORD *)(a1 + 96) = v30;
            *(_OWORD *)(a1 + 112) = v29;
            v31 = *((_OWORD *)v19 + 10);
            *(_QWORD *)(a1 + 176) = *((_QWORD *)v19 + 22);
            *(_OWORD *)(a1 + 160) = v31;
            v16[6] = v58;
            v16[7] = v60;
            v16[8] = v62;
            v16[9] = v64;
            v16[2] = v50;
            v16[3] = v52;
            v16[4] = v54;
            v16[5] = v56;
            *v16 = v46;
            v16[1] = v48;
            *((_QWORD *)v19 + 20) = v22;
            *(_QWORD *)(v19 + 175) = *(_QWORD *)((char *)&v66 + 7);
            *((_QWORD *)v19 + 21) = v66;
            *((_BYTE *)v16 + 183) = v23;
          }
          if ((a5 & 1) == 0 && *(float *)(a1 - 60) <= *(float *)(a1 + 124))
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Result *,std::greater<void> &>((__int128 *)a1, (unint64_t)a2);
            goto LABEL_16;
          }
          v32 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Result *,std::greater<void> &>((__int128 *)a1, (unint64_t)a2);
          if ((v33 & 1) == 0)
            goto LABEL_14;
          v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, v32);
          v10 = (__int128 *)(v32 + 184);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(v32 + 184, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v34)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,Result *,false>(a1, v32, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v32 + 184);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (char *)v32;
          if (v34)
            return;
          goto LABEL_1;
        }
        if (v10 != (__int128 *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *,Result *>((uint64_t)v10, (uint64_t)a2, (uint64_t)a2, a3, a6);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(_OWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  float v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void **v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[15];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[28];

  if (a1 != a2)
  {
    v4 = (_OWORD *)((char *)a1 + 184);
    if ((_OWORD *)((char *)a1 + 184) != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v4;
        v8 = *((float *)v6 + 77);
        if (v8 > *((float *)v6 + 31))
        {
          v31 = v4[4];
          v32 = v4[5];
          *(_OWORD *)v33 = v4[6];
          *(_OWORD *)&v33[12] = *(_OWORD *)((char *)v4 + 108);
          v27 = *v4;
          v28 = v4[1];
          v29 = v4[2];
          v30 = v4[3];
          v24 = *(_OWORD *)((char *)v6 + 312);
          v25 = *(_OWORD *)((char *)v6 + 328);
          *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v6 + 359);
          v9 = *((_QWORD *)v6 + 43);
          *(_QWORD *)v26 = *((_QWORD *)v6 + 44);
          v10 = *((_BYTE *)v6 + 367);
          *((_QWORD *)v6 + 44) = 0;
          *((_QWORD *)v6 + 45) = 0;
          *((_QWORD *)v6 + 43) = 0;
          v11 = v5;
          v12 = *((_BYTE *)v7 + 183);
          while (1)
          {
            v13 = v11;
            v14 = (uint64_t)a1 + v11;
            v15 = (_OWORD *)((char *)a1 + v11 + 184);
            v16 = *(_OWORD *)(v14 + 96);
            v17 = *(_OWORD *)(v14 + 128);
            v18 = *(_OWORD *)(v14 + 144);
            v15[7] = *(_OWORD *)(v14 + 112);
            v15[8] = v17;
            v15[9] = v18;
            v19 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v14 + 216) = *(_OWORD *)(v14 + 32);
            *(_OWORD *)(v14 + 232) = v19;
            v20 = *(_OWORD *)(v14 + 80);
            *(_OWORD *)(v14 + 248) = *(_OWORD *)(v14 + 64);
            v15[5] = v20;
            v15[6] = v16;
            v21 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)(v14 + 184) = *(_OWORD *)v14;
            v22 = (void **)(v14 + 344);
            *(_OWORD *)(v14 + 200) = v21;
            if (v12 < 0)
              operator delete(*v22);
            *(_OWORD *)v22 = *(_OWORD *)(v14 + 160);
            *(_QWORD *)(v14 + 360) = *(_QWORD *)(v14 + 176);
            *(_BYTE *)(v14 + 183) = 0;
            *(_BYTE *)(v14 + 160) = 0;
            if (!v13)
              break;
            v12 = 0;
            v11 = v13 - 184;
            if (v8 <= *(float *)((char *)a1 + v13 - 60))
            {
              v23 = (char *)a1 + v13;
              goto LABEL_12;
            }
          }
          v23 = (char *)a1;
LABEL_12:
          *((_OWORD *)v23 + 4) = v31;
          *((_OWORD *)v23 + 5) = v32;
          *((_OWORD *)v23 + 6) = *(_OWORD *)v33;
          *(_OWORD *)(v23 + 108) = *(_OWORD *)&v33[12];
          *(_OWORD *)v23 = v27;
          *((_OWORD *)v23 + 1) = v28;
          *((_OWORD *)v23 + 2) = v29;
          *((_OWORD *)v23 + 3) = v30;
          *((float *)v23 + 31) = v8;
          *((_OWORD *)v23 + 8) = v24;
          *((_OWORD *)v23 + 9) = v25;
          *(_QWORD *)((char *)a1 + v13 + 160) = v9;
          *(_QWORD *)(v23 + 175) = *(_QWORD *)&v26[7];
          *((_QWORD *)v23 + 21) = *(_QWORD *)v26;
          v23[183] = v10;
        }
        v4 = (_OWORD *)((char *)v7 + 184);
        v5 += 184;
        v6 = v7;
      }
      while ((_OWORD *)((char *)v7 + 184) != a2);
    }
  }
}

__int128 *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(__int128 *result, __int128 *a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  float v6;
  uint64_t v7;
  char v8;
  __int128 *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  float v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[15];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[28];

  if (result != a2)
  {
    v3 = (__int128 *)((char *)result + 184);
    if ((__int128 *)((char *)result + 184) != a2)
    {
      v4 = result + 10;
      do
      {
        v5 = v3;
        v6 = *((float *)result + 77);
        if (v6 > *((float *)result + 31))
        {
          v25 = v3[4];
          v26 = v3[5];
          *(_OWORD *)v27 = v3[6];
          *(_OWORD *)&v27[12] = *(__int128 *)((char *)v3 + 108);
          v21 = *v3;
          v22 = v3[1];
          v23 = v3[2];
          v24 = v3[3];
          v18 = *(__int128 *)((char *)result + 312);
          v19 = *(__int128 *)((char *)result + 328);
          *(_QWORD *)&v20[7] = *(_QWORD *)((char *)result + 359);
          v7 = *((_QWORD *)result + 43);
          *(_QWORD *)v20 = *((_QWORD *)result + 44);
          v8 = *((_BYTE *)result + 367);
          *((_QWORD *)result + 44) = 0;
          *((_QWORD *)result + 45) = 0;
          *((_QWORD *)result + 43) = 0;
          v9 = v4;
          v10 = *((_BYTE *)v3 + 183);
          do
          {
            v11 = *(v9 - 3);
            *(__int128 *)((char *)v9 + 120) = *(v9 - 4);
            *(__int128 *)((char *)v9 + 136) = v11;
            v12 = *(v9 - 1);
            *(__int128 *)((char *)v9 + 152) = *(v9 - 2);
            *(__int128 *)((char *)v9 + 168) = v12;
            v13 = *(v9 - 7);
            *(__int128 *)((char *)v9 + 56) = *(v9 - 8);
            *(__int128 *)((char *)v9 + 72) = v13;
            v14 = *(v9 - 5);
            *(__int128 *)((char *)v9 + 88) = *(v9 - 6);
            *(__int128 *)((char *)v9 + 104) = v14;
            v15 = *(v9 - 9);
            *(__int128 *)((char *)v9 + 24) = *(v9 - 10);
            v16 = (void **)v9 + 23;
            *(__int128 *)((char *)v9 + 40) = v15;
            if (v10 < 0)
              operator delete(*v16);
            v10 = 0;
            *(_OWORD *)v16 = *v9;
            *((_QWORD *)v9 + 25) = *((_QWORD *)v9 + 2);
            *((_BYTE *)v9 + 23) = 0;
            *(_BYTE *)v9 = 0;
            v17 = *((float *)v9 - 55);
            v9 = (__int128 *)((char *)v9 - 184);
          }
          while (v6 > v17);
          *(__int128 *)((char *)v9 + 88) = v25;
          *(__int128 *)((char *)v9 + 104) = v26;
          *(__int128 *)((char *)v9 + 120) = *(_OWORD *)v27;
          *(__int128 *)((char *)v9 + 132) = *(_OWORD *)&v27[12];
          *(__int128 *)((char *)v9 + 24) = v21;
          *(__int128 *)((char *)v9 + 40) = v22;
          *(__int128 *)((char *)v9 + 56) = v23;
          *(__int128 *)((char *)v9 + 72) = v24;
          *((float *)v9 + 37) = v6;
          *(__int128 *)((char *)v9 + 168) = v19;
          *(__int128 *)((char *)v9 + 152) = v18;
          *(_QWORD *)((char *)v9 + 199) = *(_QWORD *)&v20[7];
          *((_QWORD *)v9 + 23) = v7;
          *((_QWORD *)v9 + 24) = *(_QWORD *)v20;
          *((_BYTE *)v9 + 207) = v8;
        }
        v3 = (__int128 *)((char *)v5 + 184);
        v4 = (__int128 *)((char *)v4 + 184);
        result = v5;
      }
      while ((__int128 *)((char *)v5 + 184) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  float v3;
  float v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v3 = *((float *)a2 + 31);
  v4 = *((float *)a3 + 31);
  if (v3 <= *((float *)a1 + 31))
  {
    if (v4 <= v3)
      return 0;
    v86 = a2[6];
    v91 = a2[7];
    v96 = a2[8];
    v101 = a2[9];
    v66 = a2[2];
    v71 = a2[3];
    v76 = a2[4];
    v81 = a2[5];
    v56 = *a2;
    v61 = a2[1];
    v18 = *((_QWORD *)a2 + 20);
    *(_QWORD *)&v106 = *((_QWORD *)a2 + 21);
    *(_QWORD *)((char *)&v106 + 7) = *(_QWORD *)((char *)a2 + 175);
    v19 = *((_BYTE *)a2 + 183);
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 20) = 0;
    v20 = a3[1];
    *a2 = *a3;
    a2[1] = v20;
    v21 = a3[5];
    v23 = a3[2];
    v22 = a3[3];
    a2[4] = a3[4];
    a2[5] = v21;
    a2[2] = v23;
    a2[3] = v22;
    v24 = a3[9];
    v26 = a3[6];
    v25 = a3[7];
    a2[8] = a3[8];
    a2[9] = v24;
    a2[6] = v26;
    a2[7] = v25;
    v27 = *((_QWORD *)a3 + 22);
    a2[10] = a3[10];
    *((_QWORD *)a2 + 22) = v27;
    a3[6] = v86;
    a3[7] = v91;
    a3[8] = v96;
    a3[9] = v101;
    a3[2] = v66;
    a3[3] = v71;
    a3[4] = v76;
    a3[5] = v81;
    *a3 = v56;
    a3[1] = v61;
    *((_QWORD *)a3 + 20) = v18;
    *((_QWORD *)a3 + 21) = v106;
    *(_QWORD *)((char *)a3 + 175) = *(_QWORD *)((char *)&v106 + 7);
    *((_BYTE *)a3 + 183) = v19;
    if (*((float *)a2 + 31) > *((float *)a1 + 31))
    {
      v87 = a1[6];
      v92 = a1[7];
      v97 = a1[8];
      v102 = a1[9];
      v67 = a1[2];
      v72 = a1[3];
      v77 = a1[4];
      v82 = a1[5];
      v57 = *a1;
      v62 = a1[1];
      v28 = *((_QWORD *)a1 + 20);
      *(_QWORD *)&v107 = *((_QWORD *)a1 + 21);
      *(_QWORD *)((char *)&v107 + 7) = *(_QWORD *)((char *)a1 + 175);
      v29 = *((_BYTE *)a1 + 183);
      *((_QWORD *)a1 + 21) = 0;
      *((_QWORD *)a1 + 22) = 0;
      *((_QWORD *)a1 + 20) = 0;
      v30 = a2[1];
      *a1 = *a2;
      a1[1] = v30;
      v31 = a2[5];
      v33 = a2[2];
      v32 = a2[3];
      a1[4] = a2[4];
      a1[5] = v31;
      a1[2] = v33;
      a1[3] = v32;
      v34 = a2[9];
      v36 = a2[6];
      v35 = a2[7];
      a1[8] = a2[8];
      a1[9] = v34;
      a1[6] = v36;
      a1[7] = v35;
      v37 = *((_QWORD *)a2 + 22);
      a1[10] = a2[10];
      *((_QWORD *)a1 + 22) = v37;
      a2[6] = v87;
      a2[7] = v92;
      a2[8] = v97;
      a2[9] = v102;
      a2[2] = v67;
      a2[3] = v72;
      a2[4] = v77;
      a2[5] = v82;
      *a2 = v57;
      a2[1] = v62;
      *((_QWORD *)a2 + 20) = v28;
      *((_QWORD *)a2 + 21) = v107;
      *(_QWORD *)((char *)a2 + 175) = *(_QWORD *)((char *)&v107 + 7);
      result = 2;
      *((_BYTE *)a2 + 183) = v29;
      return result;
    }
  }
  else
  {
    v5 = a1 + 10;
    v6 = (_QWORD *)a1 + 21;
    if (v4 > v3)
    {
      v85 = a1[6];
      v90 = a1[7];
      v95 = a1[8];
      v100 = a1[9];
      v65 = a1[2];
      v70 = a1[3];
      v75 = a1[4];
      v80 = a1[5];
      v55 = *a1;
      v60 = a1[1];
      v7 = *((_QWORD *)a1 + 20);
      *(_QWORD *)&v105 = *v6;
      *(_QWORD *)((char *)&v105 + 7) = *(_QWORD *)((char *)a1 + 175);
      v8 = *((_BYTE *)a1 + 183);
      *((_QWORD *)a1 + 21) = 0;
      *((_QWORD *)a1 + 22) = 0;
      *v5 = 0;
      v9 = a3[1];
      *a1 = *a3;
      a1[1] = v9;
      v10 = a3[5];
      v12 = a3[2];
      v11 = a3[3];
      a1[4] = a3[4];
      a1[5] = v10;
      a1[2] = v12;
      a1[3] = v11;
      v13 = a3[9];
      v15 = a3[6];
      v14 = a3[7];
      a1[8] = a3[8];
      a1[9] = v13;
      a1[6] = v15;
      a1[7] = v14;
      v16 = *((_QWORD *)a3 + 22);
      *(_OWORD *)v5 = a3[10];
      *((_QWORD *)a1 + 22) = v16;
      a3[6] = v85;
      a3[7] = v90;
      a3[8] = v95;
      a3[9] = v100;
      a3[2] = v65;
      a3[3] = v70;
      a3[4] = v75;
      a3[5] = v80;
      *a3 = v55;
      a3[1] = v60;
      *((_QWORD *)a3 + 20) = v7;
      *((_QWORD *)a3 + 21) = v105;
      *(_QWORD *)((char *)a3 + 175) = *(_QWORD *)((char *)&v105 + 7);
      result = 1;
LABEL_9:
      *((_BYTE *)a3 + 183) = v8;
      return result;
    }
    v88 = a1[6];
    v93 = a1[7];
    v98 = a1[8];
    v103 = a1[9];
    v68 = a1[2];
    v73 = a1[3];
    v78 = a1[4];
    v83 = a1[5];
    v58 = *a1;
    v63 = a1[1];
    v38 = *((_QWORD *)a1 + 20);
    *(_QWORD *)&v108 = *v6;
    *(_QWORD *)((char *)&v108 + 7) = *(_QWORD *)((char *)a1 + 175);
    v8 = *((_BYTE *)a1 + 183);
    *((_QWORD *)a1 + 21) = 0;
    *((_QWORD *)a1 + 22) = 0;
    *v5 = 0;
    v39 = a2[1];
    *a1 = *a2;
    a1[1] = v39;
    v40 = a2[5];
    v42 = a2[2];
    v41 = a2[3];
    a1[4] = a2[4];
    a1[5] = v40;
    a1[2] = v42;
    a1[3] = v41;
    v43 = a2[9];
    v45 = a2[6];
    v44 = a2[7];
    a1[8] = a2[8];
    a1[9] = v43;
    a1[6] = v45;
    a1[7] = v44;
    v46 = a2[10];
    *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
    *(_OWORD *)v5 = v46;
    a2[6] = v88;
    a2[7] = v93;
    a2[8] = v98;
    a2[9] = v103;
    a2[2] = v68;
    a2[3] = v73;
    a2[4] = v78;
    a2[5] = v83;
    *a2 = v58;
    a2[1] = v63;
    *((_QWORD *)a2 + 20) = v38;
    *((_QWORD *)a2 + 21) = v108;
    *(_QWORD *)((char *)a2 + 175) = *(_QWORD *)((char *)&v108 + 7);
    *((_BYTE *)a2 + 183) = v8;
    if (*((float *)a3 + 31) > *((float *)a2 + 31))
    {
      v89 = a2[6];
      v94 = a2[7];
      v99 = a2[8];
      v104 = a2[9];
      v69 = a2[2];
      v74 = a2[3];
      v79 = a2[4];
      v84 = a2[5];
      v59 = *a2;
      v64 = a2[1];
      *(_QWORD *)&v109 = *((_QWORD *)a2 + 21);
      *(_QWORD *)((char *)&v109 + 7) = *(_QWORD *)((char *)a2 + 175);
      *((_QWORD *)a2 + 21) = 0;
      *((_QWORD *)a2 + 22) = 0;
      *((_QWORD *)a2 + 20) = 0;
      v47 = a3[1];
      *a2 = *a3;
      a2[1] = v47;
      v48 = a3[5];
      v50 = a3[2];
      v49 = a3[3];
      a2[4] = a3[4];
      a2[5] = v48;
      a2[2] = v50;
      a2[3] = v49;
      v51 = a3[9];
      v53 = a3[6];
      v52 = a3[7];
      a2[8] = a3[8];
      a2[9] = v51;
      a2[6] = v53;
      a2[7] = v52;
      v54 = a3[10];
      *((_QWORD *)a2 + 22) = *((_QWORD *)a3 + 22);
      a2[10] = v54;
      a3[6] = v89;
      a3[7] = v94;
      a3[8] = v99;
      a3[9] = v104;
      a3[2] = v69;
      a3[3] = v74;
      a3[4] = v79;
      a3[5] = v84;
      *a3 = v59;
      a3[1] = v64;
      *((_QWORD *)a3 + 20) = v38;
      *((_QWORD *)a3 + 21) = v109;
      *(_QWORD *)((char *)a3 + 175) = *(_QWORD *)((char *)&v109 + 7);
      result = 2;
      goto LABEL_9;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Result *,std::greater<void> &>(__int128 *a1, unint64_t a2)
{
  float v2;
  uint64_t v3;
  __int128 *v4;
  char v5;
  __int128 *v6;
  __int128 *v7;
  float v8;
  __int128 *v9;
  float v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  float v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[15];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[28];
  __int128 v56;

  v53 = a1[4];
  v54 = a1[5];
  *(_OWORD *)v55 = a1[6];
  *(_OWORD *)&v55[12] = *(__int128 *)((char *)a1 + 108);
  v49 = *a1;
  v50 = a1[1];
  v51 = a1[2];
  v52 = a1[3];
  v2 = *((float *)a1 + 31);
  v4 = a1 + 10;
  v3 = *((_QWORD *)a1 + 20);
  *(_QWORD *)&v48[7] = *(_QWORD *)((char *)a1 + 175);
  *(_QWORD *)v48 = *((_QWORD *)a1 + 21);
  v5 = *((_BYTE *)a1 + 183);
  *((_QWORD *)a1 + 21) = 0;
  *((_QWORD *)a1 + 22) = 0;
  *((_QWORD *)a1 + 20) = 0;
  v36 = a1[8];
  v37 = a1[9];
  if (v2 <= *(float *)(a2 - 60))
  {
    v9 = (__int128 *)((char *)a1 + 184);
    do
    {
      v7 = v9;
      if ((unint64_t)v9 >= a2)
        break;
      v10 = *((float *)v9 + 31);
      v9 = (__int128 *)((char *)v9 + 184);
    }
    while (v2 <= v10);
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = (__int128 *)((char *)v6 + 184);
      v8 = *((float *)v6 + 77);
      v6 = (__int128 *)((char *)v6 + 184);
    }
    while (v2 <= v8);
  }
  if ((unint64_t)v7 >= a2)
  {
    v11 = a2;
  }
  else
  {
    do
    {
      v11 = a2 - 184;
      v12 = *(float *)(a2 - 60);
      a2 -= 184;
    }
    while (v2 > v12);
  }
  while ((unint64_t)v7 < v11)
  {
    v38 = *v7;
    v39 = v7[1];
    v42 = v7[4];
    v43 = v7[5];
    v40 = v7[2];
    v41 = v7[3];
    v46 = v7[8];
    v47 = v7[9];
    v44 = v7[6];
    v45 = v7[7];
    v13 = *((_QWORD *)v7 + 20);
    *(_QWORD *)&v56 = *((_QWORD *)v7 + 21);
    *(_QWORD *)((char *)&v56 + 7) = *(_QWORD *)((char *)v7 + 175);
    v14 = *((_BYTE *)v7 + 183);
    *((_QWORD *)v7 + 21) = 0;
    *((_QWORD *)v7 + 22) = 0;
    *((_QWORD *)v7 + 20) = 0;
    v16 = *(_OWORD *)(v11 + 96);
    v15 = *(_OWORD *)(v11 + 112);
    v17 = *(_OWORD *)(v11 + 144);
    v7[8] = *(_OWORD *)(v11 + 128);
    v7[9] = v17;
    v7[6] = v16;
    v7[7] = v15;
    v19 = *(_OWORD *)(v11 + 32);
    v18 = *(_OWORD *)(v11 + 48);
    v20 = *(_OWORD *)(v11 + 80);
    v7[4] = *(_OWORD *)(v11 + 64);
    v7[5] = v20;
    v7[2] = v19;
    v7[3] = v18;
    v21 = *(_OWORD *)(v11 + 16);
    *v7 = *(_OWORD *)v11;
    v7[1] = v21;
    v22 = *(_OWORD *)(v11 + 160);
    *((_QWORD *)v7 + 22) = *(_QWORD *)(v11 + 176);
    v7[10] = v22;
    *(_OWORD *)(v11 + 64) = v42;
    *(_OWORD *)(v11 + 80) = v43;
    *(_OWORD *)(v11 + 32) = v40;
    *(_OWORD *)(v11 + 48) = v41;
    *(_OWORD *)(v11 + 128) = v46;
    *(_OWORD *)(v11 + 144) = v47;
    *(_OWORD *)(v11 + 96) = v44;
    *(_OWORD *)(v11 + 112) = v45;
    *(_OWORD *)v11 = v38;
    *(_OWORD *)(v11 + 16) = v39;
    *(_QWORD *)(v11 + 160) = v13;
    *(_QWORD *)(v11 + 168) = v56;
    *(_QWORD *)(v11 + 175) = *(_QWORD *)((char *)&v56 + 7);
    *(_BYTE *)(v11 + 183) = v14;
    do
    {
      v23 = *((float *)v7 + 77);
      v7 = (__int128 *)((char *)v7 + 184);
    }
    while (v2 <= v23);
    do
    {
      v24 = *(float *)(v11 - 60);
      v11 -= 184;
    }
    while (v2 > v24);
  }
  v25 = (__int128 *)((char *)v7 - 184);
  if ((__int128 *)((char *)v7 - 184) == a1)
  {
    v34 = *((char *)v7 - 1);
    *v25 = v49;
    *(__int128 *)((char *)v7 - 168) = v50;
    *(__int128 *)((char *)v7 - 152) = v51;
    *(__int128 *)((char *)v7 - 136) = v52;
    *(__int128 *)((char *)v7 - 76) = *(_OWORD *)&v55[12];
    *(__int128 *)((char *)v7 - 104) = v54;
    *(__int128 *)((char *)v7 - 88) = *(_OWORD *)v55;
    *(__int128 *)((char *)v7 - 120) = v53;
    *((float *)v7 - 15) = v2;
    *(__int128 *)((char *)v7 - 40) = v37;
    *(__int128 *)((char *)v7 - 56) = v36;
    if (v34 < 0)
      operator delete(*((void **)v7 - 3));
  }
  else
  {
    v26 = *(__int128 *)((char *)v7 - 168);
    *a1 = *v25;
    a1[1] = v26;
    v27 = *(__int128 *)((char *)v7 - 152);
    v28 = *(__int128 *)((char *)v7 - 136);
    v29 = *(__int128 *)((char *)v7 - 104);
    a1[4] = *(__int128 *)((char *)v7 - 120);
    a1[5] = v29;
    a1[2] = v27;
    a1[3] = v28;
    v30 = *(__int128 *)((char *)v7 - 88);
    v31 = *(__int128 *)((char *)v7 - 72);
    v32 = *(__int128 *)((char *)v7 - 40);
    a1[8] = *(__int128 *)((char *)v7 - 56);
    a1[9] = v32;
    a1[6] = v30;
    a1[7] = v31;
    if (*((char *)a1 + 183) < 0)
      operator delete(*(void **)v4);
    v33 = *(__int128 *)((char *)v7 - 24);
    *((_QWORD *)v4 + 2) = *((_QWORD *)v7 - 1);
    *v4 = v33;
    *((_BYTE *)v7 - 1) = 0;
    *((_BYTE *)v7 - 24) = 0;
    *v25 = v49;
    *(__int128 *)((char *)v7 - 168) = v50;
    *(__int128 *)((char *)v7 - 152) = v51;
    *(__int128 *)((char *)v7 - 136) = v52;
    *(__int128 *)((char *)v7 - 76) = *(_OWORD *)&v55[12];
    *(__int128 *)((char *)v7 - 104) = v54;
    *(__int128 *)((char *)v7 - 88) = *(_OWORD *)v55;
    *(__int128 *)((char *)v7 - 120) = v53;
    *((float *)v7 - 15) = v2;
    *(__int128 *)((char *)v7 - 40) = v37;
    *(__int128 *)((char *)v7 - 56) = v36;
  }
  *((_QWORD *)v7 - 3) = v3;
  *(_QWORD *)((char *)v7 - 9) = *(_QWORD *)&v48[7];
  *((_QWORD *)v7 - 2) = *(_QWORD *)v48;
  *((_BYTE *)v7 - 1) = v5;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Result *,std::greater<void> &>(__int128 *a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  __int128 *v5;
  char v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float v24;
  float v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[15];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[28];
  __int128 v57;

  v2 = 0;
  v54 = a1[4];
  v55 = a1[5];
  *(_OWORD *)v56 = a1[6];
  *(_OWORD *)&v56[12] = *(__int128 *)((char *)a1 + 108);
  v50 = *a1;
  v51 = a1[1];
  v52 = a1[2];
  v53 = a1[3];
  v3 = *((float *)a1 + 31);
  v37 = a1[8];
  v38 = a1[9];
  v5 = a1 + 10;
  v4 = *((_QWORD *)a1 + 20);
  *(_QWORD *)&v49[7] = *(_QWORD *)((char *)a1 + 175);
  *(_QWORD *)v49 = *((_QWORD *)a1 + 21);
  v6 = *((_BYTE *)a1 + 183);
  *((_QWORD *)a1 + 21) = 0;
  *((_QWORD *)a1 + 22) = 0;
  *((_QWORD *)a1 + 20) = 0;
  do
  {
    v7 = *(float *)((char *)a1 + v2 + 308);
    v2 += 184;
  }
  while (v7 > v3);
  v8 = (unint64_t)a1 + v2;
  if (v2 == 184)
  {
    while (v8 < a2)
    {
      v9 = a2 - 184;
      v11 = *(float *)(a2 - 60);
      a2 -= 184;
      if (v11 > v3)
        goto LABEL_9;
    }
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 184;
      v10 = *(float *)(a2 - 60);
      a2 -= 184;
    }
    while (v10 <= v3);
  }
LABEL_9:
  v12 = (__int128 *)((char *)a1 + v2);
  if (v8 < v9)
  {
    v13 = v9;
    do
    {
      v45 = v12[6];
      v46 = v12[7];
      v47 = v12[8];
      v48 = v12[9];
      v41 = v12[2];
      v42 = v12[3];
      v43 = v12[4];
      v44 = v12[5];
      v39 = *v12;
      v40 = v12[1];
      v14 = *((_QWORD *)v12 + 20);
      *(_QWORD *)&v57 = *((_QWORD *)v12 + 21);
      *(_QWORD *)((char *)&v57 + 7) = *(_QWORD *)((char *)v12 + 175);
      v15 = *((_BYTE *)v12 + 183);
      *((_QWORD *)v12 + 21) = 0;
      *((_QWORD *)v12 + 22) = 0;
      *((_QWORD *)v12 + 20) = 0;
      v17 = *(_OWORD *)(v13 + 96);
      v16 = *(_OWORD *)(v13 + 112);
      v18 = *(_OWORD *)(v13 + 144);
      v12[8] = *(_OWORD *)(v13 + 128);
      v12[9] = v18;
      v12[6] = v17;
      v12[7] = v16;
      v20 = *(_OWORD *)(v13 + 32);
      v19 = *(_OWORD *)(v13 + 48);
      v21 = *(_OWORD *)(v13 + 80);
      v12[4] = *(_OWORD *)(v13 + 64);
      v12[5] = v21;
      v12[2] = v20;
      v12[3] = v19;
      v22 = *(_OWORD *)(v13 + 16);
      *v12 = *(_OWORD *)v13;
      v12[1] = v22;
      v23 = *(_OWORD *)(v13 + 160);
      *((_QWORD *)v12 + 22) = *(_QWORD *)(v13 + 176);
      v12[10] = v23;
      *(_OWORD *)(v13 + 64) = v43;
      *(_OWORD *)(v13 + 80) = v44;
      *(_OWORD *)(v13 + 32) = v41;
      *(_OWORD *)(v13 + 48) = v42;
      *(_OWORD *)(v13 + 128) = v47;
      *(_OWORD *)(v13 + 144) = v48;
      *(_OWORD *)(v13 + 96) = v45;
      *(_OWORD *)(v13 + 112) = v46;
      *(_OWORD *)v13 = v39;
      *(_OWORD *)(v13 + 16) = v40;
      *(_QWORD *)(v13 + 160) = v14;
      *(_QWORD *)(v13 + 168) = v57;
      *(_QWORD *)(v13 + 175) = *(_QWORD *)((char *)&v57 + 7);
      *(_BYTE *)(v13 + 183) = v15;
      do
      {
        v24 = *((float *)v12 + 77);
        v12 = (__int128 *)((char *)v12 + 184);
      }
      while (v24 > v3);
      do
      {
        v25 = *(float *)(v13 - 60);
        v13 -= 184;
      }
      while (v25 <= v3);
    }
    while ((unint64_t)v12 < v13);
  }
  v26 = (__int128 *)((char *)v12 - 184);
  if ((__int128 *)((char *)v12 - 184) == a1)
  {
    v35 = *((char *)v12 - 1);
    *v26 = v50;
    *(__int128 *)((char *)v12 - 168) = v51;
    *(__int128 *)((char *)v12 - 152) = v52;
    *(__int128 *)((char *)v12 - 136) = v53;
    *(__int128 *)((char *)v12 - 76) = *(_OWORD *)&v56[12];
    *(__int128 *)((char *)v12 - 104) = v55;
    *(__int128 *)((char *)v12 - 88) = *(_OWORD *)v56;
    *(__int128 *)((char *)v12 - 120) = v54;
    *((float *)v12 - 15) = v3;
    *(__int128 *)((char *)v12 - 40) = v38;
    *(__int128 *)((char *)v12 - 56) = v37;
    if (v35 < 0)
      operator delete(*((void **)v12 - 3));
  }
  else
  {
    v27 = *(__int128 *)((char *)v12 - 168);
    *a1 = *v26;
    a1[1] = v27;
    v28 = *(__int128 *)((char *)v12 - 152);
    v29 = *(__int128 *)((char *)v12 - 136);
    v30 = *(__int128 *)((char *)v12 - 104);
    a1[4] = *(__int128 *)((char *)v12 - 120);
    a1[5] = v30;
    a1[2] = v28;
    a1[3] = v29;
    v31 = *(__int128 *)((char *)v12 - 88);
    v32 = *(__int128 *)((char *)v12 - 72);
    v33 = *(__int128 *)((char *)v12 - 40);
    a1[8] = *(__int128 *)((char *)v12 - 56);
    a1[9] = v33;
    a1[6] = v31;
    a1[7] = v32;
    if (*((char *)a1 + 183) < 0)
      operator delete(*(void **)v5);
    v34 = *(__int128 *)((char *)v12 - 24);
    *((_QWORD *)v5 + 2) = *((_QWORD *)v12 - 1);
    *v5 = v34;
    *((_BYTE *)v12 - 1) = 0;
    *((_BYTE *)v12 - 24) = 0;
    *v26 = v50;
    *(__int128 *)((char *)v12 - 168) = v51;
    *(__int128 *)((char *)v12 - 152) = v52;
    *(__int128 *)((char *)v12 - 136) = v53;
    *(__int128 *)((char *)v12 - 76) = *(_OWORD *)&v56[12];
    *(__int128 *)((char *)v12 - 104) = v55;
    *(__int128 *)((char *)v12 - 88) = *(_OWORD *)v56;
    *(__int128 *)((char *)v12 - 120) = v54;
    *((float *)v12 - 15) = v3;
    *(__int128 *)((char *)v12 - 40) = v38;
    *(__int128 *)((char *)v12 - 56) = v37;
  }
  *((_QWORD *)v12 - 3) = v4;
  *(_QWORD *)((char *)v12 - 9) = *(_QWORD *)&v49[7];
  *((_QWORD *)v12 - 2) = *(_QWORD *)v49;
  *((_BYTE *)v12 - 1) = v6;
  return (uint64_t)v12 - 184;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[15];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[28];
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = 0xD37A6F4DE9BD37A7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 60) > *(float *)(a1 + 124))
      {
        v48 = *(_OWORD *)(a1 + 96);
        v50 = *(_OWORD *)(a1 + 112);
        v51 = *(_OWORD *)(a1 + 128);
        v52 = *(_OWORD *)(a1 + 144);
        v40 = *(_OWORD *)(a1 + 32);
        v42 = *(_OWORD *)(a1 + 48);
        v44 = *(_OWORD *)(a1 + 64);
        v46 = *(_OWORD *)(a1 + 80);
        v36 = *(_OWORD *)a1;
        v38 = *(_OWORD *)(a1 + 16);
        v6 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)&v33 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)((char *)&v33 + 7) = *(_QWORD *)(a1 + 175);
        v7 = *(_BYTE *)(a1 + 183);
        *(_QWORD *)(a1 + 168) = 0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 160) = 0;
        v8 = *(_OWORD *)(a2 - 168);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 184);
        *(_OWORD *)(a1 + 16) = v8;
        v9 = *(_OWORD *)(a2 - 136);
        v10 = *(_OWORD *)(a2 - 104);
        v11 = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 120);
        *(_OWORD *)(a1 + 80) = v10;
        *(_OWORD *)(a1 + 32) = v11;
        *(_OWORD *)(a1 + 48) = v9;
        v12 = *(_OWORD *)(a2 - 72);
        v13 = *(_OWORD *)(a2 - 40);
        v14 = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 56);
        *(_OWORD *)(a1 + 144) = v13;
        *(_OWORD *)(a1 + 96) = v14;
        *(_OWORD *)(a1 + 112) = v12;
        v15 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 176) = v15;
        *(_OWORD *)(a2 - 88) = v48;
        *(_OWORD *)(a2 - 72) = v50;
        *(_OWORD *)(a2 - 56) = v51;
        *(_OWORD *)(a2 - 40) = v52;
        *(_OWORD *)(a2 - 152) = v40;
        *(_OWORD *)(a2 - 136) = v42;
        *(_OWORD *)(a2 - 120) = v44;
        *(_OWORD *)(a2 - 104) = v46;
        *(_OWORD *)(a2 - 184) = v36;
        *(_OWORD *)(a2 - 168) = v38;
        *(_QWORD *)(a2 - 24) = v6;
        *(_QWORD *)(a2 - 16) = v33;
        *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)&v33 + 7);
        *(_BYTE *)(a2 - 1) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((__int128 *)a1, (__int128 *)(a1 + 184), (__int128 *)(a2 - 184));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, a1 + 184, a1 + 368, a2 - 184);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, a1 + 184, a1 + 368, a1 + 552, a2 - 184);
      return 1;
    default:
      v16 = a1 + 368;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((__int128 *)a1, (__int128 *)(a1 + 184), (__int128 *)(a1 + 368));
      v17 = a1 + 552;
      if (a1 + 552 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *(float *)(v17 + 124);
    if (v20 > *(float *)(v16 + 124))
    {
      v45 = *(_OWORD *)(v17 + 64);
      v47 = *(_OWORD *)(v17 + 80);
      *(_OWORD *)v49 = *(_OWORD *)(v17 + 96);
      *(_OWORD *)&v49[12] = *(_OWORD *)(v17 + 108);
      v37 = *(_OWORD *)v17;
      v39 = *(_OWORD *)(v17 + 16);
      v41 = *(_OWORD *)(v17 + 32);
      v43 = *(_OWORD *)(v17 + 48);
      v34 = *(_OWORD *)(v17 + 128);
      v35 = *(_OWORD *)(v17 + 144);
      *(_QWORD *)&v32[7] = *(_QWORD *)(v17 + 175);
      v21 = *(_QWORD *)(v17 + 160);
      *(_QWORD *)v32 = *(_QWORD *)(v17 + 168);
      v22 = *(_BYTE *)(v17 + 183);
      *(_QWORD *)(v17 + 168) = 0;
      *(_QWORD *)(v17 + 176) = 0;
      v23 = v18;
      *(_QWORD *)(v17 + 160) = 0;
      while (1)
      {
        v24 = a1 + v23;
        v25 = (_OWORD *)(a1 + v23 + 552);
        v26 = *(_OWORD *)(a1 + v23 + 480);
        v25[6] = *(_OWORD *)(a1 + v23 + 464);
        v25[7] = v26;
        v27 = *(_OWORD *)(a1 + v23 + 512);
        v25[8] = *(_OWORD *)(a1 + v23 + 496);
        v25[9] = v27;
        v28 = *(_OWORD *)(a1 + v23 + 416);
        v25[2] = *(_OWORD *)(a1 + v23 + 400);
        v25[3] = v28;
        v29 = *(_OWORD *)(a1 + v23 + 448);
        v25[4] = *(_OWORD *)(a1 + v23 + 432);
        v25[5] = v29;
        v30 = *(_OWORD *)(a1 + v23 + 384);
        *v25 = *(_OWORD *)(a1 + v23 + 368);
        v25[1] = v30;
        *(_OWORD *)(a1 + v23 + 712) = *(_OWORD *)(a1 + v23 + 528);
        *(_QWORD *)(v24 + 728) = *(_QWORD *)(a1 + v23 + 544);
        *(_BYTE *)(v24 + 551) = 0;
        *(_BYTE *)(v24 + 528) = 0;
        if (v23 == -368)
          break;
        v23 -= 184;
        if (v20 <= *(float *)(v24 + 308))
        {
          v31 = a1 + v23 + 552;
          goto LABEL_12;
        }
      }
      v31 = a1;
LABEL_12:
      *(_OWORD *)(v31 + 64) = v45;
      *(_OWORD *)(v31 + 80) = v47;
      *(_OWORD *)(v31 + 96) = *(_OWORD *)v49;
      *(_OWORD *)(v31 + 108) = *(_OWORD *)&v49[12];
      *(_OWORD *)v31 = v37;
      *(_OWORD *)(v31 + 16) = v39;
      *(_OWORD *)(v31 + 32) = v41;
      *(_OWORD *)(v31 + 48) = v43;
      *(float *)(v31 + 124) = v20;
      *(_OWORD *)(v31 + 128) = v34;
      *(_OWORD *)(v31 + 144) = v35;
      *(_QWORD *)(v24 + 528) = v21;
      *(_QWORD *)(v31 + 175) = *(_QWORD *)&v32[7];
      *(_QWORD *)(v31 + 168) = *(_QWORD *)v32;
      ++v19;
      *(_BYTE *)(v31 + 183) = v22;
      if (v19 == 8)
        return v17 + 184 == a2;
    }
    v16 = v17;
    v18 += 184;
    v17 += 184;
    if (v17 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 124);
  if (result.n128_f32[0] > *(float *)(a3 + 124))
  {
    v57 = *(_OWORD *)(a3 + 96);
    v60 = *(_OWORD *)(a3 + 112);
    v63 = *(_OWORD *)(a3 + 128);
    v66 = *(_OWORD *)(a3 + 144);
    v45 = *(_OWORD *)(a3 + 32);
    v48 = *(_OWORD *)(a3 + 48);
    v51 = *(_OWORD *)(a3 + 64);
    v54 = *(_OWORD *)(a3 + 80);
    v39 = *(__n128 *)a3;
    v42 = *(_OWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 160);
    *(_QWORD *)&v69 = *(_QWORD *)(a3 + 168);
    *(_QWORD *)((char *)&v69 + 7) = *(_QWORD *)(a3 + 175);
    v10 = *(_BYTE *)(a3 + 183);
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 168) = 0;
    *(_QWORD *)(a3 + 160) = 0;
    v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    v12 = *(_OWORD *)(a4 + 80);
    v14 = *(_OWORD *)(a4 + 32);
    v13 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 32) = v14;
    *(_OWORD *)(a3 + 48) = v13;
    v15 = *(_OWORD *)(a4 + 144);
    v17 = *(_OWORD *)(a4 + 96);
    v16 = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 144) = v15;
    *(_OWORD *)(a3 + 96) = v17;
    *(_OWORD *)(a3 + 112) = v16;
    v18 = *(_QWORD *)(a4 + 176);
    *(_OWORD *)(a3 + 160) = *(_OWORD *)(a4 + 160);
    *(_QWORD *)(a3 + 176) = v18;
    *(_OWORD *)(a4 + 96) = v57;
    *(_OWORD *)(a4 + 112) = v60;
    *(_OWORD *)(a4 + 128) = v63;
    *(_OWORD *)(a4 + 144) = v66;
    *(_OWORD *)(a4 + 32) = v45;
    *(_OWORD *)(a4 + 48) = v48;
    *(_OWORD *)(a4 + 64) = v51;
    *(_OWORD *)(a4 + 80) = v54;
    result = v39;
    *(__n128 *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v42;
    *(_QWORD *)(a4 + 160) = v9;
    *(_QWORD *)(a4 + 168) = v69;
    *(_QWORD *)(a4 + 175) = *(_QWORD *)((char *)&v69 + 7);
    *(_BYTE *)(a4 + 183) = v10;
    result.n128_u32[0] = *(_DWORD *)(a3 + 124);
    if (result.n128_f32[0] > *(float *)(a2 + 124))
    {
      v58 = *(_OWORD *)(a2 + 96);
      v61 = *(_OWORD *)(a2 + 112);
      v64 = *(_OWORD *)(a2 + 128);
      v67 = *(_OWORD *)(a2 + 144);
      v46 = *(_OWORD *)(a2 + 32);
      v49 = *(_OWORD *)(a2 + 48);
      v52 = *(_OWORD *)(a2 + 64);
      v55 = *(_OWORD *)(a2 + 80);
      v40 = *(__n128 *)a2;
      v43 = *(_OWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)&v70 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)((char *)&v70 + 7) = *(_QWORD *)(a2 + 175);
      v20 = *(_BYTE *)(a2 + 183);
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 160) = 0;
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      v22 = *(_OWORD *)(a3 + 80);
      v24 = *(_OWORD *)(a3 + 32);
      v23 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v22;
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a2 + 48) = v23;
      v25 = *(_OWORD *)(a3 + 144);
      v27 = *(_OWORD *)(a3 + 96);
      v26 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = v25;
      *(_OWORD *)(a2 + 96) = v27;
      *(_OWORD *)(a2 + 112) = v26;
      v28 = *(_QWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
      *(_QWORD *)(a2 + 176) = v28;
      *(_OWORD *)(a3 + 96) = v58;
      *(_OWORD *)(a3 + 112) = v61;
      *(_OWORD *)(a3 + 128) = v64;
      *(_OWORD *)(a3 + 144) = v67;
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = v49;
      *(_OWORD *)(a3 + 64) = v52;
      *(_OWORD *)(a3 + 80) = v55;
      result = v40;
      *(__n128 *)a3 = v40;
      *(_OWORD *)(a3 + 16) = v43;
      *(_QWORD *)(a3 + 160) = v19;
      *(_QWORD *)(a3 + 168) = v70;
      *(_QWORD *)(a3 + 175) = *(_QWORD *)((char *)&v70 + 7);
      *(_BYTE *)(a3 + 183) = v20;
      result.n128_u32[0] = *(_DWORD *)(a2 + 124);
      if (result.n128_f32[0] > *(float *)(a1 + 124))
      {
        v59 = *(_OWORD *)(a1 + 96);
        v62 = *(_OWORD *)(a1 + 112);
        v65 = *(_OWORD *)(a1 + 128);
        v68 = *(_OWORD *)(a1 + 144);
        v47 = *(_OWORD *)(a1 + 32);
        v50 = *(_OWORD *)(a1 + 48);
        v53 = *(_OWORD *)(a1 + 64);
        v56 = *(_OWORD *)(a1 + 80);
        v41 = *(__n128 *)a1;
        v44 = *(_OWORD *)(a1 + 16);
        v29 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)&v71 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)((char *)&v71 + 7) = *(_QWORD *)(a1 + 175);
        v30 = *(_BYTE *)(a1 + 183);
        *(_QWORD *)(a1 + 168) = 0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 160) = 0;
        v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v31;
        v32 = *(_OWORD *)(a2 + 80);
        v34 = *(_OWORD *)(a2 + 32);
        v33 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 32) = v34;
        *(_OWORD *)(a1 + 48) = v33;
        v35 = *(_OWORD *)(a2 + 144);
        v37 = *(_OWORD *)(a2 + 96);
        v36 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v35;
        *(_OWORD *)(a1 + 96) = v37;
        *(_OWORD *)(a1 + 112) = v36;
        v38 = *(_QWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = v38;
        *(_OWORD *)(a2 + 96) = v59;
        *(_OWORD *)(a2 + 112) = v62;
        *(_OWORD *)(a2 + 128) = v65;
        *(_OWORD *)(a2 + 144) = v68;
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = v50;
        *(_OWORD *)(a2 + 64) = v53;
        *(_OWORD *)(a2 + 80) = v56;
        result = v41;
        *(__n128 *)a2 = v41;
        *(_OWORD *)(a2 + 16) = v44;
        *(_QWORD *)(a2 + 160) = v29;
        *(_QWORD *)(a2 + 168) = v71;
        *(_QWORD *)(a2 + 175) = *(_QWORD *)((char *)&v71 + 7);
        *(_BYTE *)(a2 + 183) = v30;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, a2, a3, a4);
  result.n128_u32[0] = *(_DWORD *)(a5 + 124);
  if (result.n128_f32[0] > *(float *)(a4 + 124))
  {
    v75 = *(_OWORD *)(a4 + 96);
    v79 = *(_OWORD *)(a4 + 112);
    v83 = *(_OWORD *)(a4 + 128);
    v87 = *(_OWORD *)(a4 + 144);
    v59 = *(_OWORD *)(a4 + 32);
    v63 = *(_OWORD *)(a4 + 48);
    v67 = *(_OWORD *)(a4 + 64);
    v71 = *(_OWORD *)(a4 + 80);
    v51 = *(__n128 *)a4;
    v55 = *(_OWORD *)(a4 + 16);
    v11 = *(_QWORD *)(a4 + 160);
    *(_QWORD *)&v91 = *(_QWORD *)(a4 + 168);
    *(_QWORD *)((char *)&v91 + 7) = *(_QWORD *)(a4 + 175);
    v12 = *(_BYTE *)(a4 + 183);
    *(_QWORD *)(a4 + 176) = 0;
    *(_QWORD *)(a4 + 168) = 0;
    *(_QWORD *)(a4 + 160) = 0;
    v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    v14 = *(_OWORD *)(a5 + 80);
    v16 = *(_OWORD *)(a5 + 32);
    v15 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 80) = v14;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a4 + 48) = v15;
    v17 = *(_OWORD *)(a5 + 144);
    v19 = *(_OWORD *)(a5 + 96);
    v18 = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 144) = v17;
    *(_OWORD *)(a4 + 96) = v19;
    *(_OWORD *)(a4 + 112) = v18;
    v20 = *(_QWORD *)(a5 + 176);
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(a5 + 160);
    *(_QWORD *)(a4 + 176) = v20;
    *(_OWORD *)(a5 + 96) = v75;
    *(_OWORD *)(a5 + 112) = v79;
    *(_OWORD *)(a5 + 128) = v83;
    *(_OWORD *)(a5 + 144) = v87;
    *(_OWORD *)(a5 + 32) = v59;
    *(_OWORD *)(a5 + 48) = v63;
    *(_OWORD *)(a5 + 64) = v67;
    *(_OWORD *)(a5 + 80) = v71;
    result = v51;
    *(__n128 *)a5 = v51;
    *(_OWORD *)(a5 + 16) = v55;
    *(_QWORD *)(a5 + 160) = v11;
    *(_QWORD *)(a5 + 168) = v91;
    *(_QWORD *)(a5 + 175) = *(_QWORD *)((char *)&v91 + 7);
    *(_BYTE *)(a5 + 183) = v12;
    result.n128_u32[0] = *(_DWORD *)(a4 + 124);
    if (result.n128_f32[0] > *(float *)(a3 + 124))
    {
      v76 = *(_OWORD *)(a3 + 96);
      v80 = *(_OWORD *)(a3 + 112);
      v84 = *(_OWORD *)(a3 + 128);
      v88 = *(_OWORD *)(a3 + 144);
      v60 = *(_OWORD *)(a3 + 32);
      v64 = *(_OWORD *)(a3 + 48);
      v68 = *(_OWORD *)(a3 + 64);
      v72 = *(_OWORD *)(a3 + 80);
      v52 = *(__n128 *)a3;
      v56 = *(_OWORD *)(a3 + 16);
      v21 = *(_QWORD *)(a3 + 160);
      *(_QWORD *)&v92 = *(_QWORD *)(a3 + 168);
      *(_QWORD *)((char *)&v92 + 7) = *(_QWORD *)(a3 + 175);
      v22 = *(_BYTE *)(a3 + 183);
      *(_QWORD *)(a3 + 176) = 0;
      *(_QWORD *)(a3 + 168) = 0;
      *(_QWORD *)(a3 + 160) = 0;
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      v24 = *(_OWORD *)(a4 + 80);
      v26 = *(_OWORD *)(a4 + 32);
      v25 = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a3 + 80) = v24;
      *(_OWORD *)(a3 + 32) = v26;
      *(_OWORD *)(a3 + 48) = v25;
      v27 = *(_OWORD *)(a4 + 144);
      v29 = *(_OWORD *)(a4 + 96);
      v28 = *(_OWORD *)(a4 + 112);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a3 + 144) = v27;
      *(_OWORD *)(a3 + 96) = v29;
      *(_OWORD *)(a3 + 112) = v28;
      v30 = *(_QWORD *)(a4 + 176);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(a4 + 160);
      *(_QWORD *)(a3 + 176) = v30;
      *(_OWORD *)(a4 + 96) = v76;
      *(_OWORD *)(a4 + 112) = v80;
      *(_OWORD *)(a4 + 128) = v84;
      *(_OWORD *)(a4 + 144) = v88;
      *(_OWORD *)(a4 + 32) = v60;
      *(_OWORD *)(a4 + 48) = v64;
      *(_OWORD *)(a4 + 64) = v68;
      *(_OWORD *)(a4 + 80) = v72;
      result = v52;
      *(__n128 *)a4 = v52;
      *(_OWORD *)(a4 + 16) = v56;
      *(_QWORD *)(a4 + 160) = v21;
      *(_QWORD *)(a4 + 168) = v92;
      *(_QWORD *)(a4 + 175) = *(_QWORD *)((char *)&v92 + 7);
      *(_BYTE *)(a4 + 183) = v22;
      result.n128_u32[0] = *(_DWORD *)(a3 + 124);
      if (result.n128_f32[0] > *(float *)(a2 + 124))
      {
        v77 = *(_OWORD *)(a2 + 96);
        v81 = *(_OWORD *)(a2 + 112);
        v85 = *(_OWORD *)(a2 + 128);
        v89 = *(_OWORD *)(a2 + 144);
        v61 = *(_OWORD *)(a2 + 32);
        v65 = *(_OWORD *)(a2 + 48);
        v69 = *(_OWORD *)(a2 + 64);
        v73 = *(_OWORD *)(a2 + 80);
        v53 = *(__n128 *)a2;
        v57 = *(_OWORD *)(a2 + 16);
        v31 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)&v93 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)((char *)&v93 + 7) = *(_QWORD *)(a2 + 175);
        v32 = *(_BYTE *)(a2 + 183);
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 168) = 0;
        *(_QWORD *)(a2 + 160) = 0;
        v33 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v33;
        v34 = *(_OWORD *)(a3 + 80);
        v36 = *(_OWORD *)(a3 + 32);
        v35 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a2 + 80) = v34;
        *(_OWORD *)(a2 + 32) = v36;
        *(_OWORD *)(a2 + 48) = v35;
        v37 = *(_OWORD *)(a3 + 144);
        v39 = *(_OWORD *)(a3 + 96);
        v38 = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
        *(_OWORD *)(a2 + 144) = v37;
        *(_OWORD *)(a2 + 96) = v39;
        *(_OWORD *)(a2 + 112) = v38;
        v40 = *(_QWORD *)(a3 + 176);
        *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
        *(_QWORD *)(a2 + 176) = v40;
        *(_OWORD *)(a3 + 96) = v77;
        *(_OWORD *)(a3 + 112) = v81;
        *(_OWORD *)(a3 + 128) = v85;
        *(_OWORD *)(a3 + 144) = v89;
        *(_OWORD *)(a3 + 32) = v61;
        *(_OWORD *)(a3 + 48) = v65;
        *(_OWORD *)(a3 + 64) = v69;
        *(_OWORD *)(a3 + 80) = v73;
        result = v53;
        *(__n128 *)a3 = v53;
        *(_OWORD *)(a3 + 16) = v57;
        *(_QWORD *)(a3 + 160) = v31;
        *(_QWORD *)(a3 + 168) = v93;
        *(_QWORD *)(a3 + 175) = *(_QWORD *)((char *)&v93 + 7);
        *(_BYTE *)(a3 + 183) = v32;
        result.n128_u32[0] = *(_DWORD *)(a2 + 124);
        if (result.n128_f32[0] > *(float *)(a1 + 124))
        {
          v78 = *(_OWORD *)(a1 + 96);
          v82 = *(_OWORD *)(a1 + 112);
          v86 = *(_OWORD *)(a1 + 128);
          v90 = *(_OWORD *)(a1 + 144);
          v62 = *(_OWORD *)(a1 + 32);
          v66 = *(_OWORD *)(a1 + 48);
          v70 = *(_OWORD *)(a1 + 64);
          v74 = *(_OWORD *)(a1 + 80);
          v54 = *(__n128 *)a1;
          v58 = *(_OWORD *)(a1 + 16);
          v41 = *(_QWORD *)(a1 + 160);
          *(_QWORD *)&v94 = *(_QWORD *)(a1 + 168);
          *(_QWORD *)((char *)&v94 + 7) = *(_QWORD *)(a1 + 175);
          v42 = *(_BYTE *)(a1 + 183);
          *(_QWORD *)(a1 + 168) = 0;
          *(_QWORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 160) = 0;
          v43 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v43;
          v44 = *(_OWORD *)(a2 + 80);
          v46 = *(_OWORD *)(a2 + 32);
          v45 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v44;
          *(_OWORD *)(a1 + 32) = v46;
          *(_OWORD *)(a1 + 48) = v45;
          v47 = *(_OWORD *)(a2 + 144);
          v49 = *(_OWORD *)(a2 + 96);
          v48 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 144) = v47;
          *(_OWORD *)(a1 + 96) = v49;
          *(_OWORD *)(a1 + 112) = v48;
          v50 = *(_QWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_QWORD *)(a1 + 176) = v50;
          *(_OWORD *)(a2 + 96) = v78;
          *(_OWORD *)(a2 + 112) = v82;
          *(_OWORD *)(a2 + 128) = v86;
          *(_OWORD *)(a2 + 144) = v90;
          *(_OWORD *)(a2 + 32) = v62;
          *(_OWORD *)(a2 + 48) = v66;
          *(_OWORD *)(a2 + 64) = v70;
          *(_OWORD *)(a2 + 80) = v74;
          result = v54;
          *(__n128 *)a2 = v54;
          *(_OWORD *)(a2 + 16) = v58;
          *(_QWORD *)(a2 + 160) = v41;
          *(_QWORD *)(a2 + 168) = v94;
          *(_QWORD *)(a2 + 175) = *(_QWORD *)((char *)&v94 + 7);
          *(_BYTE *)(a2 + 183) = v42;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *,Result *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = a2 - a1;
    v10 = (a2 - a1) / 184;
    if (a2 - a1 >= 185)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)(a1 + 184 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, a5, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 184);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (*(float *)(v15 + 124) > *(float *)(a1 + 124))
        {
          v35 = *(_OWORD *)(v15 + 96);
          v36 = *(_OWORD *)(v15 + 112);
          v37 = *(_OWORD *)(v15 + 128);
          v38 = *(_OWORD *)(v15 + 144);
          v31 = *(_OWORD *)(v15 + 32);
          v32 = *(_OWORD *)(v15 + 48);
          v33 = *(_OWORD *)(v15 + 64);
          v34 = *(_OWORD *)(v15 + 80);
          v29 = *(__n128 *)v15;
          v30 = *(_OWORD *)(v15 + 16);
          v16 = *(_QWORD *)(v15 + 160);
          *(_QWORD *)&v39 = *(_QWORD *)(v15 + 168);
          *(_QWORD *)((char *)&v39 + 7) = *(_QWORD *)(v15 + 175);
          v17 = *(_BYTE *)(v15 + 183);
          *(_QWORD *)(v15 + 168) = 0;
          *(_QWORD *)(v15 + 176) = 0;
          *(_QWORD *)(v15 + 160) = 0;
          v18 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v15 = *(_OWORD *)a1;
          *(_OWORD *)(v15 + 16) = v18;
          v19 = *(_OWORD *)(a1 + 80);
          v21 = *(_OWORD *)(a1 + 32);
          v20 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(v15 + 64) = *(_OWORD *)(a1 + 64);
          *(_OWORD *)(v15 + 80) = v19;
          *(_OWORD *)(v15 + 32) = v21;
          *(_OWORD *)(v15 + 48) = v20;
          v22 = *(_OWORD *)(a1 + 144);
          v24 = *(_OWORD *)(a1 + 96);
          v23 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(v15 + 128) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v15 + 144) = v22;
          *(_OWORD *)(v15 + 96) = v24;
          *(_OWORD *)(v15 + 112) = v23;
          v25 = *(_QWORD *)(a1 + 176);
          *(_OWORD *)(v15 + 160) = *(_OWORD *)(a1 + 160);
          *(_QWORD *)(v15 + 176) = v25;
          *(_OWORD *)(a1 + 96) = v35;
          *(_OWORD *)(a1 + 112) = v36;
          *(_OWORD *)(a1 + 128) = v37;
          *(_OWORD *)(a1 + 144) = v38;
          *(_OWORD *)(a1 + 32) = v31;
          *(_OWORD *)(a1 + 48) = v32;
          *(_OWORD *)(a1 + 64) = v33;
          *(_OWORD *)(a1 + 80) = v34;
          *(__n128 *)a1 = v29;
          *(_OWORD *)(a1 + 16) = v30;
          *(_QWORD *)(a1 + 160) = v16;
          *(_QWORD *)(a1 + 168) = v39;
          *(_QWORD *)(a1 + 175) = *(_QWORD *)((char *)&v39 + 7);
          *(_BYTE *)(a1 + 183) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, v29, a4, v10, (__int128 *)a1);
        }
        v15 += 184;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 185)
    {
      v26 = v9 / 0xB8uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,Result *>(a1, v7, a4, v26);
        v7 -= 184;
      }
      while (v26-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, __int128 *a5)
{
  int64_t v5;
  int64_t v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __int128 v22;
  _BYTE v23[15];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[28];

  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xD37A6F4DE9BD37A7 * (((uint64_t)a5 - a1) >> 3)))
    {
      v6 = (0xA6F4DE9BD37A6F4ELL * (((uint64_t)a5 - a1) >> 3)) | 1;
      v7 = (__int128 *)(a1 + 184 * v6);
      if ((uint64_t)(0xA6F4DE9BD37A6F4ELL * (((uint64_t)a5 - a1) >> 3) + 2) < a4
        && *(float *)(a1 + 184 * v6 + 124) > *((float *)v7 + 77))
      {
        v7 = (__int128 *)((char *)v7 + 184);
        v6 = 0xA6F4DE9BD37A6F4ELL * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u32[0] = *((_DWORD *)a5 + 31);
      if (*((float *)v7 + 31) <= result.n128_f32[0])
      {
        v28 = a5[4];
        v29 = a5[5];
        *(_OWORD *)v30 = a5[6];
        *(_OWORD *)&v30[12] = *(__int128 *)((char *)a5 + 108);
        v24 = *a5;
        v25 = a5[1];
        v26 = a5[2];
        v27 = a5[3];
        v21 = (__n128)a5[8];
        v22 = a5[9];
        *(_QWORD *)&v23[7] = *(_QWORD *)((char *)a5 + 175);
        v8 = *((_QWORD *)a5 + 20);
        *(_QWORD *)v23 = *((_QWORD *)a5 + 21);
        v9 = *((_BYTE *)a5 + 183);
        *((_QWORD *)a5 + 21) = 0;
        *((_QWORD *)a5 + 22) = 0;
        *((_QWORD *)a5 + 20) = 0;
        do
        {
          v10 = a5;
          a5 = v7;
          v11 = v7[1];
          *v10 = *v7;
          v10[1] = v11;
          v12 = v7[2];
          v13 = v7[3];
          v14 = v7[5];
          v10[4] = v7[4];
          v10[5] = v14;
          v10[2] = v12;
          v10[3] = v13;
          v15 = v7[6];
          v16 = v7[7];
          v17 = v7[9];
          v10[8] = v7[8];
          v10[9] = v17;
          v10[6] = v15;
          v10[7] = v16;
          v18 = v7[10];
          *((_QWORD *)v10 + 22) = *((_QWORD *)v7 + 22);
          v10[10] = v18;
          *((_BYTE *)v7 + 183) = 0;
          *((_BYTE *)v7 + 160) = 0;
          if (v5 < v6)
            break;
          v19 = (2 * v6) | 1;
          v7 = (__int128 *)(a1 + 184 * v19);
          v20 = 2 * v6 + 2;
          if (v20 < a4 && *(float *)(a1 + 184 * v19 + 124) > *((float *)v7 + 77))
          {
            v7 = (__int128 *)((char *)v7 + 184);
            v19 = v20;
          }
          v6 = v19;
        }
        while (*((float *)v7 + 31) <= result.n128_f32[0]);
        a5[2] = v26;
        a5[3] = v27;
        *a5 = v24;
        a5[1] = v25;
        *(__int128 *)((char *)a5 + 108) = *(_OWORD *)&v30[12];
        a5[5] = v29;
        a5[6] = *(_OWORD *)v30;
        a5[4] = v28;
        *((_DWORD *)a5 + 31) = result.n128_u32[0];
        result = v21;
        a5[8] = (__int128)v21;
        a5[9] = v22;
        *(_QWORD *)((char *)a5 + 175) = *(_QWORD *)&v23[7];
        *((_QWORD *)a5 + 20) = v8;
        *((_QWORD *)a5 + 21) = *(_QWORD *)v23;
        *((_BYTE *)a5 + 183) = v9;
      }
    }
  }
  return result;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,Result *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[15];

  if (a4 >= 2)
  {
    v27 = *(_OWORD *)(a1 + 96);
    v28 = *(_OWORD *)(a1 + 112);
    v29 = *(_OWORD *)(a1 + 128);
    v30 = *(_OWORD *)(a1 + 144);
    v23 = *(_OWORD *)(a1 + 32);
    v24 = *(_OWORD *)(a1 + 48);
    v25 = *(_OWORD *)(a1 + 64);
    v26 = *(_OWORD *)(a1 + 80);
    v21 = *(__n128 *)a1;
    v22 = *(_OWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)v31 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)&v31[7] = *(_QWORD *)(a1 + 175);
    v8 = *(_BYTE *)(a1 + 183);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, a3, a4);
    v10 = v9;
    v11 = (__n128 *)(a2 - 184);
    v12 = v9 + 160;
    if (v9 == a2 - 184)
    {
      *(_OWORD *)(v9 + 96) = v27;
      *(_OWORD *)(v9 + 112) = v28;
      *(_OWORD *)(v9 + 128) = v29;
      *(_OWORD *)(v9 + 144) = v30;
      *(_OWORD *)(v9 + 32) = v23;
      *(_OWORD *)(v9 + 48) = v24;
      *(_OWORD *)(v9 + 64) = v25;
      *(_OWORD *)(v9 + 80) = v26;
      *(__n128 *)v9 = v21;
      *(_OWORD *)(v9 + 16) = v22;
      if (*(char *)(v9 + 183) < 0)
        operator delete(*(void **)v12);
      *(_QWORD *)(v10 + 160) = v7;
      *(_QWORD *)(v10 + 168) = *(_QWORD *)v31;
      *(_QWORD *)(v10 + 175) = *(_QWORD *)&v31[7];
      *(_BYTE *)(v10 + 183) = v8;
    }
    else
    {
      v13 = *(_OWORD *)(a2 - 168);
      *(__n128 *)v9 = *v11;
      *(_OWORD *)(v9 + 16) = v13;
      v14 = *(_OWORD *)(a2 - 152);
      v15 = *(_OWORD *)(a2 - 136);
      v16 = *(_OWORD *)(a2 - 104);
      *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 - 120);
      *(_OWORD *)(v9 + 80) = v16;
      *(_OWORD *)(v9 + 32) = v14;
      *(_OWORD *)(v9 + 48) = v15;
      v17 = *(_OWORD *)(a2 - 88);
      v18 = *(_OWORD *)(a2 - 72);
      v19 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(v9 + 128) = *(_OWORD *)(a2 - 56);
      *(_OWORD *)(v9 + 144) = v19;
      *(_OWORD *)(v9 + 96) = v17;
      *(_OWORD *)(v9 + 112) = v18;
      if (*(char *)(v9 + 183) < 0)
        operator delete(*(void **)v12);
      v20 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)v12 = v20;
      *(_OWORD *)(a2 - 88) = v27;
      *(_OWORD *)(a2 - 72) = v28;
      *(_OWORD *)(a2 - 56) = v29;
      *(_OWORD *)(a2 - 40) = v30;
      *(_OWORD *)(a2 - 152) = v23;
      *(_OWORD *)(a2 - 136) = v24;
      *(_OWORD *)(a2 - 120) = v25;
      *(_OWORD *)(a2 - 104) = v26;
      *v11 = v21;
      *(_OWORD *)(a2 - 168) = v22;
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = *(_QWORD *)v31;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)&v31[7];
      *(_BYTE *)(a2 - 1) = v8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(a1, v10 + 184, v21, a3, 0xD37A6F4DE9BD37A7 * ((v10 + 184 - a1) >> 3));
    }
  }
}

void sub_218C3A2F4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = v4 + 1;
    v8 = a1 + 184 * (v4 + 1);
    v9 = 2 * v4;
    v4 = (2 * v4) | 1;
    v10 = v9 + 2;
    if (v10 < a3 && *(float *)(a1 + 184 * v7 + 124) > *(float *)(v8 + 308))
    {
      v8 += 184;
      v4 = v10;
    }
    v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(v8 + 32);
    v13 = *(_OWORD *)(v8 + 48);
    v14 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v13;
    v15 = *(_OWORD *)(v8 + 96);
    v16 = *(_OWORD *)(v8 + 112);
    v17 = *(_OWORD *)(v8 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    *(_OWORD *)(a1 + 96) = v15;
    *(_OWORD *)(a1 + 112) = v16;
    v18 = a1 + 160;
    if (*(char *)(a1 + 183) < 0)
      operator delete(*(void **)v18);
    v19 = *(_OWORD *)(v8 + 160);
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v8 + 176);
    *(_OWORD *)v18 = v19;
    *(_BYTE *)(v8 + 183) = 0;
    *(_BYTE *)(v8 + 160) = 0;
    a1 = v8;
  }
  while (v4 <= v6);
  return v8;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,Result *>(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  _BYTE v23[15];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[28];

  v5 = a5 - 2;
  if (a5 >= 2)
  {
    v6 = v5 >> 1;
    result.n128_u32[0] = *(_DWORD *)(a2 - 60);
    if (*(float *)(a1 + 184 * (v5 >> 1) + 124) > result.n128_f32[0])
    {
      v7 = a2 - 184;
      v28 = *(_OWORD *)(a2 - 120);
      v29 = *(_OWORD *)(a2 - 104);
      *(_OWORD *)v30 = *(_OWORD *)(a2 - 88);
      *(_OWORD *)&v30[12] = *(_OWORD *)(a2 - 76);
      v24 = *(_OWORD *)(a2 - 184);
      v25 = *(_OWORD *)(a2 - 168);
      v26 = *(_OWORD *)(a2 - 152);
      v27 = *(_OWORD *)(a2 - 136);
      v8 = *(_OWORD *)(a2 - 56);
      v9 = *(__n128 *)(a2 - 40);
      *(_QWORD *)&v23[7] = *(_QWORD *)(a2 - 9);
      v10 = *(_QWORD *)(a2 - 24);
      *(_QWORD *)v23 = *(_QWORD *)(a2 - 16);
      v11 = *(_BYTE *)(a2 - 1);
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      v21 = v8;
      v22 = v9;
      do
      {
        v12 = v7;
        v7 = a1 + 184 * v6;
        v13 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)v12 = *(_OWORD *)v7;
        *(_OWORD *)(v12 + 16) = v13;
        v14 = *(_OWORD *)(v7 + 32);
        v15 = *(_OWORD *)(v7 + 48);
        v16 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(v12 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(v12 + 80) = v16;
        *(_OWORD *)(v12 + 32) = v14;
        *(_OWORD *)(v12 + 48) = v15;
        v17 = *(_OWORD *)(v7 + 96);
        v18 = *(_OWORD *)(v7 + 112);
        v19 = *(_OWORD *)(v7 + 144);
        *(_OWORD *)(v12 + 128) = *(_OWORD *)(v7 + 128);
        *(_OWORD *)(v12 + 144) = v19;
        *(_OWORD *)(v12 + 96) = v17;
        *(_OWORD *)(v12 + 112) = v18;
        v20 = *(_OWORD *)(v7 + 160);
        *(_QWORD *)(v12 + 176) = *(_QWORD *)(v7 + 176);
        *(_OWORD *)(v12 + 160) = v20;
        *(_BYTE *)(v7 + 183) = 0;
        *(_BYTE *)(v7 + 160) = 0;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
      }
      while (*(float *)(a1 + 184 * v6 + 124) > result.n128_f32[0]);
      *(_OWORD *)(v7 + 64) = v28;
      *(_OWORD *)(v7 + 80) = v29;
      *(_OWORD *)(v7 + 96) = *(_OWORD *)v30;
      *(_OWORD *)(v7 + 108) = *(_OWORD *)&v30[12];
      *(_OWORD *)v7 = v24;
      *(_OWORD *)(v7 + 16) = v25;
      *(_OWORD *)(v7 + 32) = v26;
      *(_OWORD *)(v7 + 48) = v27;
      *(_DWORD *)(v7 + 124) = result.n128_u32[0];
      result = v22;
      *(_OWORD *)(v7 + 128) = v21;
      *(__n128 *)(v7 + 144) = v22;
      *(_QWORD *)(v7 + 175) = *(_QWORD *)&v23[7];
      *(_QWORD *)(v7 + 160) = v10;
      *(_QWORD *)(v7 + 168) = *(_QWORD *)v23;
      *(_BYTE *)(v7 + 183) = v11;
    }
  }
  return result;
}

void std::vector<Result>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 184 * ((184 * a2 - 184) / 0xB8) + 184;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1642C8590B21642)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xB21642C8590B21)
      v11 = 0x1642C8590B21642;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Result>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[184 * v8];
    v18 = &v12[184 * v11];
    v14 = 184 * ((184 * a2 - 184) / 0xB8) + 184;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<Result>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<Result>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_218C3A70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Result>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Result>::__init_with_size[abi:ne180100]<Result*,Result*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Result>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Result>,Result*,Result*,Result*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_218C3A784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Result>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Result>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1642C8590B21643)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Result>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Result>,Result*,Result*,Result*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  __int128 *v16;
  _QWORD v18[3];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a4;
  v20 = a4;
  v21 = a4;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  v19 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 10;
    do
    {
      v7 = *(v6 - 9);
      *(_OWORD *)v4 = *(v6 - 10);
      *(_OWORD *)(v4 + 16) = v7;
      v8 = *(v6 - 8);
      v9 = *(v6 - 7);
      v10 = *(v6 - 5);
      *(_OWORD *)(v4 + 64) = *(v6 - 6);
      *(_OWORD *)(v4 + 80) = v10;
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      v11 = *(v6 - 4);
      v12 = *(v6 - 3);
      v13 = *(v6 - 1);
      *(_OWORD *)(v4 + 128) = *(v6 - 2);
      *(_OWORD *)(v4 + 144) = v13;
      *(_OWORD *)(v4 + 96) = v11;
      *(_OWORD *)(v4 + 112) = v12;
      v14 = (std::string *)(v4 + 160);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v21;
      }
      else
      {
        v15 = *v6;
        *(_QWORD *)(v4 + 176) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      v16 = v6 - 10;
      v4 += 184;
      v21 = v4;
      v6 = (__int128 *)((char *)v6 + 184);
    }
    while ((__int128 *)((char *)v16 + 184) != a3);
  }
  v19 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Result>,Result*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v18);
  return v4;
}

void sub_218C3A8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Result>,Result*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Result>,Result*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<Result>,Result*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Result>,Result*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 184;
  }
}

uint64_t tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = (void **)a1;
    std::vector<Result>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  else
  {
    MEMORY[0x219A2143C](a1);
  }
  return a1;
}

void shazam::make_query<(AlgoType)12>(shazam::signature_info *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, unint64_t a4@<X3>, float32x2_t *a5@<X8>)
{
  shazam::signature_info *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void (*v16)(void **__return_ptr, unint64_t);
  unint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  char *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  _DWORD *v40;
  unsigned int v41;
  char *v42;
  unint64_t v43;
  void **p_p;
  unint64_t v45;
  uint64_t v46;
  gsl::details *v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  double v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  gsl::details *v55;
  int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  void *exception;
  uint64_t error_code;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  shazam::signature_info *v75;
  unint64_t v76;
  int v77;
  uint64_t *v78;
  unint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  unsigned int v83;
  _QWORD v84[5];
  char v85;
  void *v86;
  char *v87;
  char *v88;
  _DWORD v89[10];
  float32x2_t v90;
  void *v91;
  _DWORD *v92;
  uint64_t v93;
  void **v94;
  void **v95;
  void **v96;
  void *__p;
  void *v98;
  uint64_t v99;

  v7 = this;
  v99 = *MEMORY[0x24BDAC8D0];
  if ((float)(shazam::signature_info::getSampleLength(this) * 125.0) > 1792.0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"was ", 4);
    shazam::signature_info::getSampleLength(v7);
    v67 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"sec", 3);
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x130);
    v71 = v70;
    std::stringbuf::str();
    MEMORY[0x219A21424](exception, error_code, v71, v89);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  shazam::signature_info::getSampleLength(v7);
  shazam::matrix_for<(AlgoType)12>(a3, (uint64_t)v89);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&v86, a4);
  shazam::algo<(AlgoType)12>::tzones_for ((uint64_t)v84);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v7 + 5) - *((_QWORD *)v7 + 4)) >> 3) >= 3)
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&v91, 0x64uLL);
    v10 = *((_QWORD *)v7 + 4);
    v9 = *((_QWORD *)v7 + 5);
    v75 = v7;
    if (v9 != v10)
    {
      v11 = 0;
      do
      {
        v12 = &v89[v11];
        v15 = v12[2];
        v14 = v12 + 2;
        v13 = v15;
        if (v15)
        {
          v16 = *(void (**)(void **__return_ptr, unint64_t))(a2 + 8);
          if (v16)
          {
            v16(&__p, v10 + 24 * v11);
            chooseAnchors((uint64_t *)&__p, *v14, v89, (uint64_t)&v91);
            if (__p)
            {
              v98 = __p;
              operator delete(__p);
            }
          }
          else
          {
            chooseAnchors((uint64_t *)(v10 + 24 * v11), v13, v89, (uint64_t)&v91);
          }
          v10 = *((_QWORD *)v75 + 4);
          v9 = *((_QWORD *)v75 + 5);
          if (v9 == v10)
          {
            v10 = *((_QWORD *)v75 + 5);
          }
          else
          {
            v17 = 0;
            v72 = 4 * v11;
            v73 = v11;
            do
            {
              v76 = v17;
              v18 = (char *)&v89[v11] + v17;
              v20 = v18[24];
              v19 = (unsigned __int8 *)(v18 + 24);
              v83 = v20;
              if (v20)
              {
                if (v85)
                {
                  LODWORD(__p) = v72 + v76;
                  if (std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v84, (int *)&__p))
                  {
                    v21 = std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v84, (int *)&__p);
                    if (!v21)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    v81 = *(uint64_t *)((char *)v21 + 20);
                    v22 = v81 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    v22 = 0;
                    LODWORD(v81) = 0;
                  }
                  v10 = *((_QWORD *)v75 + 4);
                  v83 = *v19;
                }
                else
                {
                  v22 = 0;
                  LODWORD(v81) = 0;
                }
                v23 = v76;
                v24 = *(char **)(v10 + 24 * v76);
                bzero(&__p, 0x780uLL);
                v25 = v91;
                v80 = v92;
                if (v91 != v92)
                {
                  v78 = (uint64_t *)(v10 + 24 * v76 + 8);
                  v79 = HIDWORD(v22);
                  if ((_DWORD)v81)
                    v26 = HIDWORD(v22) == 0;
                  else
                    v26 = 1;
                  v27 = v26;
                  v77 = v27;
                  do
                  {
                    v28 = *v25 + 8;
                    if (v77)
                    {
                      v29 = *v25 + 197;
                    }
                    else
                    {
                      v28 = *v25 + v81;
                      v29 = v28 + v79;
                    }
                    v30 = (char *)*v78;
                    if ((char *)*v78 == v24)
                    {
                      v37 = *v78;
                    }
                    else
                    {
                      v31 = (*v78 - (uint64_t)v24) >> 3;
                      do
                      {
                        v32 = v31 >> 1;
                        v33 = (unsigned int *)&v24[8 * (v31 >> 1)];
                        v35 = *v33;
                        v34 = (char *)(v33 + 2);
                        v31 += ~(v31 >> 1);
                        if (v35 < v28)
                          v24 = v34;
                        else
                          v31 = v32;
                      }
                      while (v31);
                      if (v30 == v24)
                      {
                        v37 = *v78;
                        v42 = v24;
                        v24 = (char *)*v78;
                        v30 = v42;
                      }
                      else
                      {
                        v36 = (v30 - v24) >> 3;
                        v37 = (uint64_t)v24;
                        do
                        {
                          v38 = v36 >> 1;
                          v39 = (unsigned int *)(v37 + 8 * (v36 >> 1));
                          v41 = *v39;
                          v40 = v39 + 2;
                          v36 += ~(v36 >> 1);
                          if (v41 < v29)
                            v37 = (uint64_t)v40;
                          else
                            v36 = v38;
                        }
                        while (v36);
                        v30 = v24;
                      }
                    }
                    v43 = (v37 - (uint64_t)v30) >> 3;
                    gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,0>((gsl::details *)&v94, (uint64_t)v24, v37);
                    if (v43 <= v83)
                    {
                      v43 = (unint64_t)v94;
                      p_p = v95;
                    }
                    else
                    {
                      if (v24 != (char *)v37)
                        memmove(&__p, v24, v37 - (_QWORD)v30);
                      p_p = &__p;
                      v45 = 126 - 2 * __clz(v43);
                      if ((char *)v37 == v30)
                        v46 = 0;
                      else
                        v46 = v45;
                      v47 = (gsl::details *)std::__introsort<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *,false>((uint64_t)&__p, (unint64_t *)&__p + v43, v46, 1);
                      if (v37 - (_QWORD)v30 == -8)
LABEL_98:
                        gsl::details::terminate(v47);
                    }
                    v82 = v25;
                    v48 = *(_QWORD *)v25;
                    v49 = (unsigned __int16)WORD2(*(_QWORD *)v25);
                    v50 = 0;
                    v51 = FreqLogTable::at((FreqLogTable *)(unsigned __int16)WORD2(*(_QWORD *)v25));
                    v52 = &p_p[v43];
                    v94 = p_p;
                    v95 = v52;
                    v96 = p_p;
                    LODWORD(v53) = 2 * (((v51 + -3.46573591) * 3103.75977) & 0x3FFF);
                    v54 = v48 << 32;
                    while (v96 != v52)
                    {
                      v55 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v94);
                      v53 = v53 & 0x7FFF | (((int)((v51
                                                  - FreqLogTable::at((FreqLogTable *)*((unsigned __int16 *)v55 + 2)))
                                                 * 151.569275) & 0x3FFu) << 15) | ((float)((float)(sqrtf((float)((float)((float)v49 * 7.8125) * 0.015625) * (float)(*(_DWORD *)v55 - v48)) / 830.36) * 120.0) << 25);
                      v56 = v49 - *((unsigned __int16 *)v55 + 2);
                      if (v56 < 0)
                        v56 = *((unsigned __int16 *)v55 + 2) - v49;
                      if (v56 >= 0x101)
                      {
                        v57 = v87;
                        if (v87 >= v88)
                        {
                          v59 = (v87 - (_BYTE *)v86) >> 3;
                          if ((unint64_t)(v59 + 1) >> 61)
                            std::vector<char>::__throw_length_error[abi:ne180100]();
                          v60 = (v88 - (_BYTE *)v86) >> 2;
                          if (v60 <= v59 + 1)
                            v60 = v59 + 1;
                          if ((unint64_t)(v88 - (_BYTE *)v86) >= 0x7FFFFFFFFFFFFFF8)
                            v61 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v61 = v60;
                          if (v61)
                            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)&v88, v61);
                          else
                            v62 = 0;
                          v63 = &v62[8 * v59];
                          *(_QWORD *)v63 = v54 | v53;
                          v58 = v63 + 8;
                          v65 = (char *)v86;
                          v64 = v87;
                          if (v87 != v86)
                          {
                            do
                            {
                              v66 = *((_QWORD *)v64 - 1);
                              v64 -= 8;
                              *((_QWORD *)v63 - 1) = v66;
                              v63 -= 8;
                            }
                            while (v64 != v65);
                            v64 = (char *)v86;
                          }
                          v86 = v63;
                          v87 = v58;
                          v88 = &v62[8 * v61];
                          if (v64)
                            operator delete(v64);
                        }
                        else
                        {
                          *(_QWORD *)v87 = v54 | v53;
                          v58 = v57 + 8;
                        }
                        v87 = v58;
                        if (v83 == ++v50)
                          break;
                      }
                      v47 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v94);
                      if (v94 != p_p || v95 != v52)
                        goto LABEL_98;
                    }
                    v25 = v82 + 2;
                  }
                  while (v82 + 2 != v80);
                  v23 = v76;
                  v10 = *((_QWORD *)v75 + 4);
                }
                v9 = *((_QWORD *)v75 + 5);
                v11 = v73;
              }
              else
              {
                v23 = v76;
              }
              v17 = v23 + 1;
            }
            while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3));
          }
        }
        ++v11;
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3));
    }
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    v7 = v75;
  }
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::vector(&__p, (v87 - (_BYTE *)v86) >> 3);
  shazam::kvsort<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((uint64_t)&v86, (uint64_t)&__p);
  shazam::Query<(AlgoType)1,std::vector<shazam::lmfp<(shazam::fp_type)0>>>::Query(a5, v7, &v90, (uint64_t)&v86);
  if (__p)
  {
    v98 = __p;
    operator delete(__p);
  }
  if (v85)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table((uint64_t)v84);
  if (v86)
  {
    v87 = (char *)v86;
    operator delete(v86);
  }
}

void sub_218C3B118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  void *v49;
  int v50;

  if (a38 < 0)
  {
    operator delete(__p);
    if ((v50 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

uint64_t shazam::CPUSearcher::search<(AlgoType)12,xpair_group<xpair_fields>>(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float SampleLength;
  uint64_t v17;
  uint64_t v18;
  float v19;
  gsl::details *begin;
  uint64_t v21;
  unint64_t v22;
  gsl::details *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  gsl::details *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  gsl::details *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  int *v49;
  int v50;
  BOOL v51;
  int v52;
  shazam::signature_info *v53;
  unsigned int v54;
  float v55;
  float v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  float v60;
  float v61;
  void *v63;
  float v64;
  void *v65;
  float v66;
  double v67;
  double v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  float v78;
  unint64_t v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 *v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  gsl::details *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::vector<char> *v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  float *v110;
  uint64_t v112;
  unint64_t v113;
  _BYTE v114[20];
  _BYTE v115[48];
  uint64_t v116;
  _BYTE v117[20];
  _OWORD v118[17];
  double v119;
  float v120;
  __int128 v121;
  _BYTE v122[80];
  _BYTE v123[72];
  __int128 v124;
  _BYTE v125[2];
  uint64_t v126[3];
  uint64_t v127[3];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[2];
  gsl::details *v132;
  uint64_t v133;
  uint64_t v134;
  uint64x2_t v135;
  char v136;
  gsl::details *v137;
  uint64_t v138;
  _BYTE __src[259];
  _DWORD v140[2];
  __int128 v141;
  uint64_t v142;
  _BYTE v143[60];
  _BYTE v144[64];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  memset(&v144[4], 0, 60);
  memset(&v143[4], 0, 56);
  v140[0] = 0;
  *(_DWORD *)((char *)v140 + 3) = 0;
  v108 = *(_DWORD *)(a5 + 24);
  SampleLength = shazam::signature_info::getSampleLength(*(shazam::signature_info **)a5);
  memset(&__src[3], 0, 256);
  v109 = a6;
  v105 = *(unsigned int *)(a6 + 28);
  v17 = *(_QWORD *)(a5 + 40);
  v18 = *(_QWORD *)(a5 + 48);
  v19 = shazam::signature_info::getSampleLength(*(shazam::signature_info **)a5);
  v103 = (uint64_t *)(a1 + 80);
  std::vector<Result>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
  v21 = a4[4];
  v104 = a4;
  v22 = a4[5] - v21;
  if (!v21 && v22 >= 2)
    goto LABEL_85;
  v101 = v18;
  v23 = (gsl::details *)(v22 >> 1);
  v24 = gsl::make_span<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((gsl::details *)(a5 + 40));
  v25 = *(float *)(a5 + 28);
  v26 = *(float *)(a5 + 32);
  v134 = *(_QWORD *)(a1 + 24);
  v135 = vshrq_n_u64(*(uint64x2_t *)(a1 + 32), 3uLL);
  v136 = 0;
  v137 = shazam::search_fingerprints<(AlgoType)1,xpair_group<xpair_fields>>(v23, v21, a4 + 7, v24, v27, a4 + 10, &v134, v25, v26);
  v138 = v28;
  begin = (gsl::details *)shazam::virtual_array<xpair_group<xpair_fields>>::~virtual_array((uint64_t)&v134);
  v29 = v137;
  if ((unint64_t)v137 >= 0x1FFFFFFFFFFFFFFFLL)
    goto LABEL_85;
  v30 = *(_QWORD *)(a5 + 8);
  v110 = (float *)(a5 + 8);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(a1 + 64) - v31;
  if (8 * (uint64_t)v137 > v32)
  {
    std::vector<char>::__append((std::vector<char> *)(a1 + 56), 8 * (_QWORD)v137 - v32);
    v31 = *(_QWORD *)(a1 + 56);
  }
  if (v29 && !v31)
LABEL_85:
    gsl::details::terminate(begin);
  v96 = v30;
  v97 = v29;
  v132 = v29;
  v133 = v31;
  shazam::xpairsort<xpair_group<xpair_fields>>((uint64_t)&v137, (uint64_t)&v132);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  v131[0] = gsl::make_span<std::vector<unsigned int>>((gsl::details *)(a2 + 9));
  v131[1] = v33;
  shazam::bin_tracks<xpair_group<xpair_fields>>((gsl::details *)v131, (unint64_t *)&v137, (void **)(a1 + 128));
  v98 = v17;
  v99 = a7;
  v100 = a8;
  v35 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) - v35 != 16)
  {
    v36 = 0;
    v107 = 0;
    v106 = 0;
    v102 = (std::vector<char> *)(a1 + 56);
    v37 = (void **)(a5 + 64);
    while (1)
    {
      *(float *)&v112 = SampleLength;
      v113 = 0;
      *(_DWORD *)v114 = v108;
      *(_OWORD *)&v114[4] = *(_OWORD *)v144;
      *(_OWORD *)v115 = *(_OWORD *)&v144[16];
      *(_OWORD *)&v115[16] = *(_OWORD *)&v144[32];
      *(_OWORD *)&v115[32] = *(_OWORD *)&v144[48];
      v116 = 0;
      *(_DWORD *)v117 = 0;
      *(_OWORD *)&v117[4] = *(_OWORD *)v143;
      v118[0] = *(_OWORD *)&v143[16];
      v118[1] = *(_OWORD *)&v143[32];
      v34 = *(__n128 *)&v143[44];
      *(_OWORD *)((char *)&v118[1] + 12) = *(_OWORD *)&v143[44];
      *(_QWORD *)((char *)&v118[2] + 12) = 0;
      *(_QWORD *)((char *)&v118[3] + 4) = 0;
      HIDWORD(v118[3]) = v140[0];
      *(_DWORD *)((char *)&v118[3] + 15) = *(_DWORD *)((char *)v140 + 3);
      BYTE3(v118[4]) = 0;
      v38 = *(_QWORD *)(v35 + 16 * v36 + 8);
      v39 = v36 + 1;
      v40 = *(_QWORD *)(v35 + 16 * (v36 + 1) + 8) - v38;
      v113 = v40;
      if (v40 >= 3)
      {
        *(_QWORD *)((char *)v118 + 12) = *(_QWORD *)(v35 + 16 * v36);
        *(_QWORD *)((char *)&v118[1] + 4) = *(_QWORD *)(*a2 + 8 * *(_QWORD *)((char *)v118 + 12));
        *(_QWORD *)((char *)&v118[1] + 12) = (uint64_t)(float)(*(float *)(a2[3] + 4 * *(_QWORD *)((char *)v118 + 12))
                                                            * 1000.0);
        begin = *(gsl::details **)(a1 + 56);
        v41 = *(_QWORD *)(a1 + 64) - (_QWORD)begin;
        if (8 * v40 > v41)
        {
          std::vector<char>::__append(v102, 8 * v40 - v41);
          begin = (gsl::details *)v102->__begin_;
        }
        if (8 * v40 && !begin)
          goto LABEL_85;
        v132 = (gsl::details *)(v40 & 0x1FFFFFFFFFFFFFFFLL);
        v133 = (uint64_t)begin;
        if ((unint64_t)v137 <= v38)
          goto LABEL_85;
        memcpy(begin, (const void *)(v138 + 8 * v38), 8 * v40);
        v129 = 0;
        v128 = 0;
        v130 = 0;
        v42 = v132;
        if ((unint64_t)v132 >= 2)
        {
          v43 = v133;
          v44 = (int *)(v133 + 4);
          v45 = 1;
          do
          {
            v46 = *(_QWORD *)(v43 + 8 * v45);
            v47 = v44;
            v48 = v45;
            v49 = v44;
            do
            {
              v50 = *v49;
              v49 -= 2;
              if (v50 <= SHIDWORD(v46))
                break;
              *(_QWORD *)(v47 + 1) = *(_QWORD *)(v47 - 1);
              v47 = v49;
              --v48;
            }
            while (v48);
            *(_QWORD *)(v43 + 8 * v48) = v46;
            ++v45;
            v44 += 2;
          }
          while ((gsl::details *)v45 != v42);
        }
        if (*(_BYTE *)(v109 + 25))
        {
          v127[0] = a1;
          v127[1] = (uint64_t)&v128;
          v127[2] = (uint64_t)&v112;
          _ZN6shazam14focus_multipleILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType12ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(v132, v133, *(unsigned int *)v114, (uint64_t (*)(uint64_t))lm_diff<xpair_group<xpair_fields>>, v127);
        }
        else
        {
          v126[0] = a1;
          v126[1] = (uint64_t)&v128;
          v126[2] = (uint64_t)&v112;
          _ZN6shazam5focusILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType12ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(v132, v133, *(unsigned int *)v114, (uint64_t (*)(unint64_t))lm_diff<xpair_group<xpair_fields>>, v126);
        }
        if (v128 == v129)
        {
          if (*(float *)(v109 + 20) == 0.0)
          {
            v79 = *(_QWORD *)(a1 + 88);
            if (v79 >= *(_QWORD *)(a1 + 96))
            {
              v80 = std::vector<Result>::__push_back_slow_path<Result const&>(v103, (uint64_t)&v112);
            }
            else
            {
              std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>((uint64_t)v103, (uint64_t)&v112);
              v80 = v79 + 184;
            }
            *(_QWORD *)(a1 + 88) = v80;
          }
        }
        else
        {
          v51 = *(_QWORD *)((char *)&v118[1] + 4) != v105 || (_DWORD)v105 == 0;
          v52 = v107;
          if (!v51)
            v52 = 1;
          v107 = v52;
          v53 = *(shazam::signature_info **)a5;
          if (*((unsigned __int8 *)v104 + 24) >= (-85
                                                                                * ((*(_DWORD *)(*(_QWORD *)a5 + 40)
                                                                                                - *(_DWORD *)(*(_QWORD *)a5 + 32)) >> 3)))
            v54 = (-85
                                  * ((*(_DWORD *)(*(_QWORD *)a5 + 40) - *(_DWORD *)(*(_QWORD *)a5 + 32)) >> 3));
          else
            v54 = *((unsigned __int8 *)v104 + 24);
          v125[0] = v54;
          v125[1] = 3;
          v55 = shazam::signature_info::getSampleLength(v53);
          v56 = shazam::thresholdScore<(AlgoType)12>(v54, *(unsigned __int8 *)(a2[6] + *(_QWORD *)((char *)v118 + 12)), 1.0, v55);
          LODWORD(v121) = 0;
          *((_QWORD *)&v121 + 1) = 0;
          *(_DWORD *)v122 = 0;
          *(_QWORD *)&v122[72] = 0;
          *(_DWORD *)v123 = 0;
          memset(&v122[8], 0, 60);
          memset(&v123[8], 0, 64);
          v124 = 0u;
          v57 = v129;
          if (v128 == v129)
          {
            v78 = 0.0;
          }
          else
          {
            v58 = (__int128 *)(v128 + 80);
            do
            {
              v59 = *(_QWORD *)(a2[12] + 8 * *(_QWORD *)((char *)v118 + 12));
              v61 = *((float *)v58 - 6);
              v60 = *((float *)v58 - 5);
              v120 = v60;
              v119 = *((double *)v58 - 2);
              if (*(float *)(a5 + 8) <= v60 && *(float *)(a5 + 12) >= v60)
              {
                if (*(_QWORD *)(a5 + 64) == *(_QWORD *)(a5 + 72))
                {
                  shazam::peaksToTFPeaks<std::vector<std::vector<spectral_peak_t>>>((_QWORD *)(*(_QWORD *)a5 + 32), v125, (uint64_t)&v141);
                  v63 = *v37;
                  if (*v37)
                  {
                    *(_QWORD *)(a5 + 72) = v63;
                    operator delete(v63);
                  }
                  *(_OWORD *)(a5 + 64) = v141;
                  *(_QWORD *)(a5 + 80) = v142;
                }
                if (shazam::fit_points(a3, a5 + 64, v110, *((_QWORD *)v58 + 6), &v120, &v119, a1 + 104, 3u, v61))
                {
                  *((_QWORD *)v58 + 1) = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
                  *((float *)v58 - 1) = v120;
                  v64 = v119 * 8.0 + (double)v59;
                  *(float *)v58 = v64;
                  if (*(_QWORD *)(a5 + 64) == *(_QWORD *)(a5 + 72))
                  {
                    shazam::peaksToTFPeaks<std::vector<std::vector<spectral_peak_t>>>((_QWORD *)(*(_QWORD *)a5 + 32), v125, (uint64_t)&v141);
                    v65 = *v37;
                    if (*v37)
                    {
                      *(_QWORD *)(a5 + 72) = v65;
                      operator delete(v65);
                    }
                    *(_OWORD *)(a5 + 64) = v141;
                    *(_QWORD *)(a5 + 80) = v142;
                  }
                  if (shazam::fit_points(a3, a5 + 64, v110, *(uint64_t *)((char *)v118 + 12), &v120, &v119, a1 + 104, 3u, v61))
                  {
                    *((float *)v58 + 10) = shazam::score_match((uint64_t *)(a1 + 104));
                    *((float *)v58 + 11) = v66;
                    *((_QWORD *)v58 + 4) = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
                    *((float *)v58 + 4) = v120;
                    v67 = v119;
                    *((double *)v58 - 2) = v119;
                    v68 = v67 * 8.0 + (double)v59;
                    *((double *)v58 + 3) = v68;
                    *((double *)v58 + 3) = v68
                                         + (float)(*(unsigned __int8 *)(*(_QWORD *)a5 + 20)
                                                 - *(unsigned __int8 *)(a2[15] + *((_QWORD *)v58 + 6)))
                                         * 8.0;
                    v69 = *(unsigned __int8 *)(a2[6] + *(_QWORD *)((char *)v118 + 12)) >= v54
                        ? v54
                        : *(unsigned __int8 *)(a2[6] + *(_QWORD *)((char *)v118 + 12));
                    *((_QWORD *)v58 + 9) = v69;
                    if (v66 > *(float *)&v123[28])
                    {
                      v70 = *(v58 - 4);
                      v121 = *(v58 - 5);
                      *(_OWORD *)v122 = v70;
                      v71 = *(v58 - 3);
                      v72 = *(v58 - 2);
                      v73 = *v58;
                      *(_OWORD *)&v122[48] = *(v58 - 1);
                      *(_OWORD *)&v122[64] = v73;
                      *(_OWORD *)&v122[16] = v71;
                      *(_OWORD *)&v122[32] = v72;
                      v74 = v58[1];
                      v75 = v58[2];
                      v76 = v58[4];
                      *(_OWORD *)&v123[32] = v58[3];
                      *(_OWORD *)&v123[48] = v76;
                      *(_OWORD *)v123 = v74;
                      *(_OWORD *)&v123[16] = v75;
                      std::string::operator=((std::string *)&v123[64], (const std::string *)(v58 + 5));
                    }
                  }
                }
              }
              v77 = (uint64_t)v58 + 104;
              v58 = (__int128 *)((char *)v58 + 184);
            }
            while (v77 != v57);
            v78 = *(float *)&v123[28];
          }
          v81 = v78 * 128.0;
          *(float *)&v123[28] = v81;
          if (v81 >= (float)(v56 * *(float *)(v109 + 20)))
          {
            if (*(_QWORD *)&v123[56] == 3)
              *(float *)&v123[28] = v81 * 1.25;
            v82 = *(_QWORD *)(a1 + 88);
            if (v82 >= *(_QWORD *)(a1 + 96))
            {
              v83 = std::vector<Result>::__push_back_slow_path<Result const&>(v103, (uint64_t)&v121);
            }
            else
            {
              std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>((uint64_t)v103, (uint64_t)&v121);
              v83 = v82 + 184;
            }
            *(_QWORD *)(a1 + 88) = v83;
          }
          if (SHIBYTE(v124) < 0)
            operator delete(*(void **)&v123[64]);
          ++v106;
        }
        *(_QWORD *)&v121 = &v128;
        std::vector<Result>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
        if (SBYTE3(v118[4]) < 0)
          operator delete(*(void **)((char *)&v118[2] + 12));
      }
      v35 = *(_QWORD *)(a1 + 128);
      v36 = v39;
      if (v39 >= ((*(_QWORD *)(a1 + 136) - v35) >> 4) - 1)
        goto LABEL_77;
    }
  }
  v106 = 0;
  LOBYTE(v107) = 0;
LABEL_77:
  v84 = *(_QWORD *)(a1 + 80);
  v85 = *(char **)(a1 + 88);
  v86 = 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * ((uint64_t)&v85[-v84] >> 3));
  if (v85 == (char *)v84)
    v87 = 0;
  else
    v87 = v86;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,Result *,false>(v84, v85, (uint64_t)&v112, v87, 1, v34);
  v88 = *(unsigned int *)(v109 + 36);
  v89 = *(__int128 **)(a1 + 80);
  v90 = *(__int128 **)(a1 + 88);
  if ((_DWORD)v88 && 0xD37A6F4DE9BD37A7 * (((char *)v90 - (char *)v89) >> 3) > v88)
  {
    std::vector<Result>::resize(v103, *(unsigned int *)(v109 + 36));
    v89 = *(__int128 **)(a1 + 80);
    v90 = *(__int128 **)(a1 + 88);
  }
  v112 = 0;
  v113 = 0;
  *(_QWORD *)v114 = 0;
  std::vector<Result>::__init_with_size[abi:ne180100]<Result*,Result*>(&v112, v89, v90, 0xD37A6F4DE9BD37A7 * (((char *)v90 - (char *)v89) >> 3));
  v114[16] = 1;
  v92 = *(_QWORD *)a1;
  v91 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v115[4] = v99;
  *(_QWORD *)&v115[12] = v91;
  v93 = (**(uint64_t (***)(uint64_t))v92)(v92);
  *(_QWORD *)&v115[20] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v92 + 24))(v92, v100, v93);
  *(_QWORD *)&v115[28] = 1;
  *(_DWORD *)&v115[36] = 12;
  *(float *)&v115[44] = v19;
  v116 = (v101 - v98) >> 3;
  *(_QWORD *)v117 = v96;
  *(_QWORD *)&v117[8] = v97;
  *(_DWORD *)&v117[16] = v105;
  *(_QWORD *)((char *)v118 + 4) = v106;
  BYTE12(v118[0]) = v107;
  memcpy((char *)v118 + 13, __src, 0x103uLL);
  v94 = *(_QWORD *)(a9 + 24);
  if (!v94)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v112);
  return tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base((uint64_t)&v112);
}

void sub_218C3BC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void shazam::matrix_for<(AlgoType)12>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  shazam::algo<(AlgoType)12>::matrix_for ((_OWORD *)a2);
  v4 = *(_QWORD *)(a1 + 4);
  if ((v4 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 12);
  if ((v5 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 44) = v5;
  if (*(_BYTE *)(a1 + 32))
    *(_DWORD *)(a2 + 4) >>= 1;
}

void _ZN6shazam14focus_multipleILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType12ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(gsl::details *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t *a5)
{
  gsl::details *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  float **v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  unint64_t v28[2];
  gsl::details *v29;
  uint64_t v30;
  _OWORD v31[10];
  std::string __p;

  v29 = a1;
  v30 = a2;
  if (a1)
  {
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v10 = (float)a3;
    do
    {
      v11 = 8 * v9;
      do
      {
        if ((unint64_t)v29 <= v9)
          goto LABEL_23;
        a1 = (gsl::details *)a4(v30 + v11);
        if ((unint64_t)v29 <= v8)
          goto LABEL_23;
        v13 = v12 - ((float (*)(unint64_t))a4)(v30 + 8 * v8);
        if (v13 > v10)
          break;
        ++v9;
        v11 += 8;
      }
      while (v9 < (unint64_t)v7);
      if (v9 - v8 >= 3)
      {
        v28[0] = (unint64_t)gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)&v29, v8, (gsl::details *)(v9 - v8));
        v28[1] = v14;
        v16 = *a5;
        v15 = (float **)a5[1];
        v17 = a5[2];
        v18 = *(_OWORD *)(v17 + 16);
        v31[0] = *(_OWORD *)v17;
        v31[1] = v18;
        v19 = *(_OWORD *)(v17 + 80);
        v21 = *(_OWORD *)(v17 + 32);
        v20 = *(_OWORD *)(v17 + 48);
        v31[4] = *(_OWORD *)(v17 + 64);
        v31[5] = v19;
        v31[2] = v21;
        v31[3] = v20;
        v22 = *(_OWORD *)(v17 + 144);
        v24 = *(_OWORD *)(v17 + 96);
        v23 = *(_OWORD *)(v17 + 112);
        v31[8] = *(_OWORD *)(v17 + 128);
        v31[9] = v22;
        v31[6] = v24;
        v31[7] = v23;
        if (*(char *)(v17 + 183) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 160), *(_QWORD *)(v17 + 168));
        }
        else
        {
          v25 = *(_OWORD *)(v17 + 160);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 176);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
        }
        shazam::cull_phase<(AlgoType)12,xpair_group<xpair_fields>,2ul,(void *)0>(v15, (uint64_t)v31, (float **)(v16 + 152), v28);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v13 > v10)
      {
        if ((unint64_t)v29 > v9)
        {
          v26 = 8 * v8;
          do
          {
            a1 = (gsl::details *)a4(v30 + 8 * v9);
            if ((unint64_t)v29 <= v8)
              break;
            if ((float)(v27 - ((float (*)(uint64_t))a4)(v30 + v26)) <= v10)
              goto LABEL_21;
            ++v8;
            v26 += 8;
          }
          while ((unint64_t)v29 > v9);
        }
LABEL_23:
        gsl::details::terminate(a1);
      }
LABEL_21:
      ;
    }
    while (v9 < (unint64_t)v7);
  }
}

void sub_218C3BEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZN6shazam5focusILl2E11xpair_groupIJ12xpair_fieldsEEPDoFfRKS3_EZNS_11CPUSearcher6searchIL8AlgoType12ES3_EEvRKNS_12SongDataBaseERKNS_16CPUOnePtDatabaseERKNS_15CPULMFPDataBaseERKNS_5QueryIXT_ENSt3__16vectorINS_4lmfpIXsr4algoIXT_EEE6fpTypeEEENSL_9allocatorISO_EEEEEERK11QueryConfigmNSL_6chrono10time_pointINSY_12steady_clockENSY_8durationIxNSL_5ratioILl1ELl1000000000EEEEEEERKNSL_8functionIFvRK14SearchResponseEEEEUlRKT_E_EEvN3gsl4spanIT0_Lm18446744073709551615EEExT1_T2_(gsl::details *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t), uint64_t *a5)
{
  gsl::details *v8;
  unint64_t v9;
  gsl::details *v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  float **v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28[2];
  _QWORD v29[2];
  _OWORD v30[10];
  std::string __p;

  v29[0] = a1;
  v29[1] = a2;
  if (a1)
  {
    v8 = a1;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (float)a3;
    do
    {
      if ((gsl::details *)v9 == v8)
LABEL_18:
        gsl::details::terminate(a1);
      a1 = (gsl::details *)a4(a2 + 8 * v9);
      if (v10 < v8)
      {
        v14 = v13 + v12;
        v15 = a2 + 8 * (_QWORD)v10;
        do
        {
          if (v8 == v10)
            goto LABEL_18;
          if (((float (*)(uint64_t))a4)(v15) >= v14)
            goto LABEL_10;
          v10 = (gsl::details *)((char *)v10 + 1);
          v15 += 8;
          v11 = v9;
        }
        while (v8 != v10);
        v11 = v9;
        v10 = v8;
      }
LABEL_10:
      ++v9;
      v10 = (gsl::details *)((char *)v10 + 1);
    }
    while (v10 < v8);
    if ((unint64_t)v10 - v9 >= 3)
    {
      v28[0] = (unint64_t)gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)v29, v11, (gsl::details *)((char *)v10 - v9));
      v28[1] = v16;
      v18 = *a5;
      v17 = (float **)a5[1];
      v19 = a5[2];
      v20 = *(_OWORD *)(v19 + 16);
      v30[0] = *(_OWORD *)v19;
      v30[1] = v20;
      v21 = *(_OWORD *)(v19 + 80);
      v23 = *(_OWORD *)(v19 + 32);
      v22 = *(_OWORD *)(v19 + 48);
      v30[4] = *(_OWORD *)(v19 + 64);
      v30[5] = v21;
      v30[2] = v23;
      v30[3] = v22;
      v24 = *(_OWORD *)(v19 + 144);
      v26 = *(_OWORD *)(v19 + 96);
      v25 = *(_OWORD *)(v19 + 112);
      v30[8] = *(_OWORD *)(v19 + 128);
      v30[9] = v24;
      v30[6] = v26;
      v30[7] = v25;
      if (*(char *)(v19 + 183) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 160), *(_QWORD *)(v19 + 168));
      }
      else
      {
        v27 = *(_OWORD *)(v19 + 160);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 176);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
      }
      shazam::cull_phase<(AlgoType)12,xpair_group<xpair_fields>,2ul,(void *)0>(v17, (uint64_t)v30, (float **)(v18 + 152), v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_218C3C088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void shazam::cull_phase<(AlgoType)12,xpair_group<xpair_fields>,2ul,(void *)0>(float **a1, uint64_t a2, float **a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  gsl::details *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  gsl::details *subspan;
  uint64_t v20;
  float **v21[3];
  BOOL (*v22)(__int16 *, __int16 *);
  _QWORD v23[3];
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *a4;
  *(_QWORD *)(a2 + 24) = *a4;
  v9 = a4[1];
  v22 = fdelta_compare<xpair_group<xpair_fields>>;
  v23[0] = v9;
  v24 = v9;
  v25 = v9 + 8 * v8;
  v26 = v9;
  v23[1] = v25;
  v23[2] = v25;
  _ZNSt3__115__sort_dispatchB8ne180100INS_17_ClassicAlgPolicyEN3gsl7details13span_iteratorI11xpair_groupIJ12xpair_fieldsEEEEPDoFbRKS7_SA_EEEvT0_SD_RT1_(&v24, (gsl::details *)v23, (uint64_t (**)(gsl::details *, gsl::details *))&v22);
  v11 = *a4;
  v12 = a4[1];
  v21[0] = (float **)a2;
  v21[1] = a3;
  v21[2] = a1;
  v24 = v11;
  v25 = v12;
  if (v11)
  {
    v13 = 0;
    v14 = 0;
    for (i = 0; i < v11; ++i)
    {
      if (v14 == v11)
        gsl::details::terminate(v10);
      if (i < v11)
      {
        v16 = *(__int16 *)(v12 + 8 * v14) + 21;
        if (v16 > *(__int16 *)(v12 + 8 * i))
        {
          v17 = (__int16 *)(v12 + 8 + 8 * i);
          while (v11 - 1 != i)
          {
            v18 = *v17;
            v17 += 4;
            ++i;
            if (v16 <= v18)
              goto LABEL_11;
          }
          i = v11;
LABEL_11:
          v13 = v14;
        }
      }
      ++v14;
    }
    if (i - v14 >= 3)
    {
      subspan = gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)&v24, v13, (gsl::details *)(i - v14));
      shazam::cull_phase<(AlgoType)12,xpair_group<xpair_fields>,2ul,(void *)0>(std::vector<Result> &,Result,std::vector<shazam::regresspair> &,gsl::span<xpair_group<xpair_fields>,18446744073709551615ul> const&)::{lambda((AlgoType)12)#1}::operator()<gsl::span<xpair_group<xpair_fields>,18446744073709551615ul>>(v21, (unint64_t)subspan, v20);
    }
  }
}

gsl::details *shazam::cull_phase<(AlgoType)12,xpair_group<xpair_fields>,2ul,(void *)0>(std::vector<Result> &,Result,std::vector<shazam::regresspair> &,gsl::span<xpair_group<xpair_fields>,18446744073709551615ul> const&)::{lambda((AlgoType)12)#1}::operator()<gsl::span<xpair_group<xpair_fields>,18446744073709551615ul>>(float ***a1, unint64_t a2, uint64_t a3)
{
  float **v4;
  uint64_t *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  gsl::details *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  gsl::details *i;
  float v19;
  float *v20;
  float v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  double v28[2];
  char v29;
  _QWORD v30[2];

  v25 = a2;
  v26 = a3;
  v4 = *a1;
  v4[4] = (float *)a2;
  shazam::shearfactor<(AlgoType)1,xpair_group<xpair_fields>,(void *)0>(&v25, (float *)v4 + 18, (float *)v4 + 14);
  shazam::xpairs_to_regresspairs<xpair_group<xpair_fields>>(v25, v26, a1[1], *((float *)*a1 + 18));
  v5 = (uint64_t *)a1[1];
  v6 = *v5;
  v7 = (float *)v5[1];
  v8 = (uint64_t)v7 - *v5;
  v9 = v8 >> 3;
  if ((unint64_t)v8 >> 6 > 0x7C)
  {
    v10 = 126 - 2 * __clz(v9);
    if (v7 == (float *)v6)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,shazam::regresspair *,false>(v6, v7, (uint64_t)v28, v11, 1);
  }
  else
  {
    insertionsort<shazam::regresspair,unsigned long,std::less<shazam::regresspair>>(v6, 0, v9);
  }
  result = (gsl::details *)gsl::make_span<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((gsl::details *)a1[1]);
  v14 = (uint64_t)*a1;
  v15 = (uint64_t *)a1[2];
  v27[0] = result;
  v27[1] = v13;
  if (result)
  {
    v16 = 0;
    v17 = 0;
    for (i = 0; i < result; i = (gsl::details *)((char *)i + 1))
    {
      if ((gsl::details *)v17 == result)
        gsl::details::terminate(result);
      if (i < result)
      {
        v19 = *(float *)(v13 + 8 * v17 + 4) + 11.0;
        if (*(float *)(v13 + 8 * (_QWORD)i + 4) < v19)
        {
          v20 = (float *)(v13 + 12 + 8 * (_QWORD)i);
          while ((gsl::details *)((char *)result - 1) != i)
          {
            v21 = *v20;
            v20 += 2;
            i = (gsl::details *)((char *)i + 1);
            if (v21 >= v19)
              goto LABEL_17;
          }
          i = result;
LABEL_17:
          v16 = v17;
        }
      }
      ++v17;
    }
    if ((unint64_t)i - v17 >= 3)
    {
      v30[0] = gsl::span<shazam::regresspair,18446744073709551615ul>::make_subspan((gsl::details *)v27, v16, (gsl::details *)((char *)i - v17));
      v30[1] = v22;
      *(_QWORD *)(v14 + 48) = v30[0];
      result = shazam::regress<shazam::regresspair,shazam::extractX<shazam::regresspair>,shazam::extractY<shazam::regresspair>>((gsl::details *)v30, (uint64_t)v28);
      if (v29)
      {
        v23 = v28[0] + *(float *)(v14 + 72);
        *(float *)(v14 + 60) = v23;
        *(double *)(v14 + 64) = v28[1];
        v24 = v15[1];
        if (v24 >= v15[2])
        {
          result = (gsl::details *)std::vector<Result>::__push_back_slow_path<Result const&>(v15, v14);
        }
        else
        {
          std::vector<Result>::__construct_one_at_end[abi:ne180100]<Result const&>((uint64_t)v15, v14);
          result = (gsl::details *)(v24 + 184);
        }
        v15[1] = (uint64_t)result;
      }
    }
  }
  return result;
}

float shazam::thresholdScore<(AlgoType)12>(int a1, int a2, float a3, float a4)
{
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];

  v4 = &shazam::thresholdCurve;
  if (a2 == 4 && a1 == 4)
    v4 = &shazam::thresholdCurve_timeskew5;
  v6 = v4[1];
  v9[0] = *v4;
  v9[1] = v6;
  v7 = v4[3];
  v9[2] = v4[2];
  v9[3] = v7;
  return shazam::thresholdLerp((float *)v9, a4) * a3;
}

uint64_t shazam::virtual_array<char>::virtual_array(uint64_t a1, size_t a2)
{
  void *v4;
  unint64_t v5;
  BOOL v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  void *exception;
  uint64_t v12;
  const std::error_category *v13;
  std::string v15;
  std::string v16;
  __int128 v17;
  std::string::size_type v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  while (1)
  {
    v4 = mmap(0, a2, 3, 4098, -1, 0);
    if (v4 != (void *)-1)
      break;
    v5 = a2 >> 1;
    v6 = a2 > 0x8000001;
    a2 >>= 1;
    if (!v6)
    {
      std::to_string(&v15, v5);
      v7 = std::string::insert(&v15, 0, "Requested ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v16, "bytes.");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v18 = v9->__r_.__value_.__r.__words[2];
      v17 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      exception = __cxa_allocate_exception(0x20uLL);
      v12 = *__error();
      v13 = std::system_category();
      std::operator+<char>();
      MEMORY[0x219A21430](exception, v12, v13, &v16);
      __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
    }
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

void sub_218C3C55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
        operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

unsigned int *SearchPlan::assertValid(unsigned int *this)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  std::runtime_error *exception;

  v1 = *this;
  if (*this >= 7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid DB Density range");
    goto LABEL_18;
  }
  v2 = this[7];
  if (v1)
    v3 = v2 == 2;
  else
    v3 = 0;
  if (v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid DB Density param for ThreePoint");
    goto LABEL_18;
  }
  if (v2 != 1)
  {
    if (v2 == 11)
    {
      if (v1)
      {
LABEL_17:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid DB Density param for live");
LABEL_18:
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
    }
    else if (v2 == 3 && v1)
    {
      goto LABEL_17;
    }
    if (*((_BYTE *)this + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Stopwords only supported on TwoPt algo type");
      goto LABEL_18;
    }
  }
  return this;
}

void sub_218C3C6D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t SearchPlan::SearchPlan(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = 1065353216;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 772;
  *(_DWORD *)(a1 + 28) = a2;
  SearchPlan::assertValid((unsigned int *)a1);
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void shazam::pairwise::audioscanCompare(__int128 *a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t a5, uint64_t a6, __int128 *a7, __int128 *a8, uint64_t a9)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  shazam *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _UNKNOWN **os_timer;
  shazam::StaticCPUSearcherFactory *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 *v65;
  __int128 *v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int v90;
  __int128 v91;
  char *v92;
  char *v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *__p[4];
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  _QWORD v109[7];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  __int128 v126;
  uint64_t v127;
  char v128[8];
  void *v129;
  void *v130;
  int32x4_t v131;
  uint64_t v132;
  char *v133;
  unint64_t *v134;
  _QWORD v135[3];
  _QWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  shazam::SignatureTracker::SignatureTracker(v128, (uint64_t)a1, a2);
  v16 = a1[1];
  v123 = *a1;
  v124 = v16;
  v122 = 0;
  v121 = 0uLL;
  std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(&v121, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v125[0] = v123;
  v125[1] = v124;
  v126 = v121;
  v127 = v122;
  v121 = 0uLL;
  v122 = 0;
  __p[0] = &v121;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v17 = a3[1];
  v115 = *a3;
  v116 = v17;
  v114 = 0;
  v113 = 0uLL;
  std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(&v113, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v117 = v115;
  v118 = v116;
  v119 = v113;
  v120 = v114;
  v113 = 0uLL;
  v114 = 0;
  __p[0] = &v113;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v18 = a7[1];
  v110 = *a7;
  v111 = v18;
  v112 = *((_QWORD *)a7 + 4);
  v109[6] = &off_24D9B7158;
  v19 = a8[1];
  v137 = *a8;
  v138 = v19;
  shazam::CPUDatabaseBuilder::CPUDatabaseBuilder(__p, &v137, 1);
  shazam::CPUDatabaseBuilder::add((uint64_t)__p, (uint64_t)v125, 2, 0);
  shazam::CPUDatabaseBuilder::build((shazam::CPUDatabaseBuilder *)__p, &v101);
  v95 = v101;
  if (*((_QWORD *)&v101 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v96 = v102;
  v97 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v98 = v104;
  v99 = v105;
  if (v105)
  {
    v25 = (unint64_t *)&v105->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  os_timer = shazam::get_os_timer(v20);
  shazam::StaticCPUSearcherFactory::StaticCPUSearcherFactory((uint64_t)&v137, &v95, 0x40000000, (uint64_t)os_timer, 0);
  shazam::StaticCPUSearcherFactory::make_searcher(v28, &v100);
  *(_QWORD *)&v137 = &off_24D9B7268;
  v29 = v140;
  if (v140)
  {
    v30 = (unint64_t *)&v140->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)v139;
  if ((_QWORD)v139)
  {
    v33 = (unint64_t *)(v139 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)v138;
  if ((_QWORD)v138)
  {
    v36 = (unint64_t *)(v138 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v99;
  if (v99)
  {
    v39 = (unint64_t *)&v99->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v97;
  if (v97)
  {
    v42 = (unint64_t *)&v97->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v85 = a4;
  if (*(_BYTE *)(a6 + 12))
  {
    v47 = *(_DWORD *)(a6 + 8);
    if (!v47)
      goto LABEL_80;
  }
  else
  {
    v48 = (float)((float)((float)*((unint64_t *)&v117 + 1) / (float)v118) * 125.0);
    if (*(_DWORD *)a6 >= v48)
    {
      v47 = 1;
    }
    else
    {
      v49 = vcvtps_u32_f32((float)(v48 - *(_DWORD *)(a6 + 4)) / (float)*(unsigned int *)(a6 + 4));
      v47 = v49 + 1;
      if (v49 == -1)
        goto LABEL_80;
    }
  }
  v50 = 0;
  v51 = 0x492492492492492;
  do
  {
    shazam::crop<(shazam::signature_density)24>((uint64_t)&v117, *(_DWORD *)(a6 + 4) * v50, *(_DWORD *)a6, (uint64_t)&v137);
    v52 = v93;
    if ((unint64_t)v93 >= v94)
    {
      v55 = 0x6DB6DB6DB6DB6DB7 * ((v93 - v92) >> 3);
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) > 0x492492492492492)
        std::vector<char>::__throw_length_error[abi:ne180100]();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v94 - (_QWORD)v92) >> 3) > v56)
        v56 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v94 - (_QWORD)v92) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v94 - (_QWORD)v92) >> 3)) >= 0x249249249249249)
        v57 = 0x492492492492492;
      else
        v57 = v56;
      v134 = &v94;
      if (v57)
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>>((uint64_t)&v94, v57);
      else
        v58 = 0;
      v59 = (uint64_t)&v58[56 * v55];
      v131.i64[0] = (uint64_t)v58;
      v131.i64[1] = v59;
      v133 = &v58[56 * v57];
      v60 = v138;
      *(_OWORD *)v59 = v137;
      *(_OWORD *)(v59 + 16) = v60;
      *(_QWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 32) = 0;
      *(_OWORD *)(v59 + 32) = v139;
      *(_QWORD *)(v59 + 48) = v140;
      v139 = 0uLL;
      v140 = 0;
      v132 = v59 + 56;
      std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__swap_out_circular_buffer((uint64_t *)&v92, &v131);
      v54 = v93;
      std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::~__split_buffer((void **)&v131);
    }
    else
    {
      v53 = v138;
      *(_OWORD *)v93 = v137;
      v52[1] = v53;
      *((_QWORD *)v52 + 5) = 0;
      *((_QWORD *)v52 + 6) = 0;
      *((_QWORD *)v52 + 4) = 0;
      v52[2] = v139;
      *((_QWORD *)v52 + 6) = v140;
      v139 = 0uLL;
      v140 = 0;
      v54 = (char *)v52 + 56;
    }
    v93 = v54;
    v131.i64[0] = (uint64_t)&v139;
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
    ++v50;
  }
  while (v47 != v50);
  v137 = 0uLL;
  *(_QWORD *)&v138 = 0;
  if (v93 != v92)
  {
    v61 = 0;
    while (1)
    {
      v51 = v51 & 0xFFFFFFFF00000000 | (*(_DWORD *)a6 * v61);
      v135[0] = &off_24D9B7550;
      v135[1] = v51;
      v135[2] = &v137;
      v136 = v135;
      v62 = v61 + 1;
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v100 + 16))(v100, &v92);
      v63 = v136;
      if (v136 == v135)
        break;
      if (v136)
      {
        v64 = 5;
LABEL_67:
        (*(void (**)(void))(*v63 + 8 * v64))();
      }
      v61 = v62;
      if (v62 >= 0x6DB6DB6DB6DB6DB7 * ((v93 - v92) >> 3))
      {
        v66 = (__int128 *)*((_QWORD *)&v137 + 1);
        v65 = (__int128 *)v137;
        if ((_QWORD)v137 != *((_QWORD *)&v137 + 1))
        {
          v67 = 0uLL;
          do
          {
            v87 = v67;
            v91 = *v65;
            shazam::SignatureTracker::track((uint64_t)v128, (uint64_t)a3, v85, v91, *((uint64_t *)&v91 + 1), a9, (uint64_t)&v131);
            if (!BYTE4(v132)
              || (v89 = v131,
                  v90 = v132,
                  (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v87, v131)), 0xFuLL))) & 1) != 0))
            {
              v67 = v87;
            }
            else
            {
              v88 = v131;
              v68 = *(_QWORD *)(a5 + 24);
              if (!v68)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, int32x4_t *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v89, &v91);
              v67 = v88;
            }
            ++v65;
          }
          while (v65 != v66);
          v66 = (__int128 *)v137;
        }
        if (v66)
        {
          *((_QWORD *)&v137 + 1) = v66;
          operator delete(v66);
        }
        goto LABEL_80;
      }
    }
    v63 = v135;
    v64 = 4;
    goto LABEL_67;
  }
LABEL_80:
  *(_QWORD *)&v137 = &v92;
  std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
  v69 = v100;
  v100 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = v105;
  if (v105)
  {
    v71 = (unint64_t *)&v105->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v103;
  if (v103)
  {
    v74 = (unint64_t *)&v103->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  *(_QWORD *)&v137 = v109;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
  v79 = v108;
  if (v108)
  {
    v80 = (unint64_t *)&v108->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v107;
  if (v107)
  {
    v83 = (unint64_t *)&v107->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = &v119;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v126;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
}

void sub_218C3D0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  void *v43;

  shazam::StaticCPUSearcherFactory::~StaticCPUSearcherFactory((shazam::StaticCPUSearcherFactory *)(v41 - 192));
  shazam::CPUDatabases::~CPUDatabases((shazam::CPUDatabases *)&a27);
  shazam::CPUDatabases::~CPUDatabases((shazam::CPUDatabases *)&a34);
  shazam::CPUDatabaseBuilder::~CPUDatabaseBuilder((shazam::CPUDatabaseBuilder *)&a40);
  a40 = a13;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  a40 = v40;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  v43 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void shazam::StaticCPUSearcherFactory::~StaticCPUSearcherFactory(shazam::StaticCPUSearcherFactory *this)
{
  *(_QWORD *)this = &off_24D9B7268;
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24D9B7268;
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x219A21574);
}

void shazam::CPUDatabases::~CPUDatabases(shazam::CPUDatabases *this)
{
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void shazam::CPUDatabaseBuilder::~CPUDatabaseBuilder(shazam::CPUDatabaseBuilder *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 56);
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

float shazam::pairwise::attemptToMerge@<S0>(shazam::pairwise *this@<X0>, const TrackingResult *a2@<X1>, const TrackingResult *a3@<X2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  int var0;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL4 v15;
  _BOOL4 v17;
  _BOOL4 v19;
  BOOL v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  int v26;

  var0 = a2->var0.var0.var0;
  v7 = a2->var0.var1.var0;
  v8 = *(_DWORD *)this;
  v9 = *((_DWORD *)this + 1);
  v10 = *((_DWORD *)this + 2);
  v11 = *((_DWORD *)this + 3);
  v12 = a2->var1.var0.var0;
  v13 = a2->var1.var1.var0;
  v15 = a2->var0.var0.var0 < *(_DWORD *)this || v12 < v10;
  v17 = v9 < v7 || v11 < v13;
  if (v15 || v17)
  {
    v19 = v7 < v9 || v13 < v11;
    v20 = v8 < var0 || v10 < v12;
    v21 = v20;
    if (v20 || v19)
    {
      if (((v21 | v17) & 1) != 0 || v7 < v8 || v13 < v10)
      {
        v25 = v9 < var0 || v15;
        if (v11 < v12)
          v25 = 1;
        if (((v25 | v19) & 1) != 0)
          goto LABEL_31;
        v26 = v8 - (var0 + v10) + v12;
        if (v26 < 0)
          v26 = -v26;
        if (v26 > 0xF9)
          goto LABEL_31;
        LOBYTE(a3->var0.var0.var0) = 1;
        *(_OWORD *)a5 = *(_OWORD *)&a2->var0.var0.var0;
        *(_DWORD *)a5 = v8;
        *(_DWORD *)(a5 + 8) = v10;
      }
      else
      {
        v23 = v8 - (var0 + v10) + v12;
        if (v23 < 0)
          v23 = -v23;
        if (v23 > 0xF9)
          goto LABEL_31;
        LOBYTE(a3->var0.var0.var0) = 1;
        *(TrackingAlignment *)a5 = a2->var0;
        v24 = a2->var1.var0.var0;
        *(_DWORD *)(a5 + 4) = v9;
        *(_DWORD *)(a5 + 8) = v24;
        *(_DWORD *)(a5 + 12) = v11;
      }
      *(float *)&v22 = (float)(a2->var2 + *((float *)this + 4)) * 0.5;
      *(_DWORD *)(a5 + 16) = v22;
      return *(float *)&v22;
    }
    LOBYTE(a3->var0.var0.var0) = 1;
  }
  else
  {
    *a4 = 0;
  }
LABEL_31:
  v22 = *(_OWORD *)&a2->var0.var0.var0;
  *(TrackingResult *)a5 = *a2;
  return *(float *)&v22;
}

void shazam::pairwise::intersectingMerge(__int128 *a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  int v52;
  _BYTE v53[21];
  BOOL v54;
  void *__p;
  unint64_t *v56;
  unint64_t *v57;

  __p = 0;
  v56 = 0;
  v57 = 0;
  v54 = 1;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v28 = (uint64_t)(a2 + 2);
    v29 = (unint64_t)a2[2];
    if ((unint64_t)v4 < v29)
    {
      v30 = *a1;
      *((_DWORD *)v4 + 4) = *((_DWORD *)a1 + 4);
      *(_OWORD *)v4 = v30;
      v27 = v4 + 20;
      goto LABEL_57;
    }
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - (_QWORD)v4) >> 2);
    v37 = 2 * v36;
    if (2 * v36 <= 1)
      v37 = 1;
    if (v36 >= 0x666666666666666)
      v38 = 0xCCCCCCCCCCCCCCCLL;
    else
      v38 = v37;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::TrackingResult>>(v28, v38);
    v41 = &v39[20 * v40];
    v42 = *a1;
    *((_DWORD *)v39 + 4) = *((_DWORD *)a1 + 4);
    *(_OWORD *)v39 = v42;
    v27 = v39 + 20;
    v44 = *a2;
    v43 = a2[1];
    if (v43 != *a2)
    {
      do
      {
        v45 = *(_OWORD *)(v43 - 20);
        *((_DWORD *)v39 - 1) = *((_DWORD *)v43 - 1);
        *(_OWORD *)(v39 - 20) = v45;
        v39 -= 20;
        v43 -= 20;
      }
      while (v43 != v44);
      v43 = *a2;
    }
    *a2 = v39;
    a2[1] = v27;
    a2[2] = v41;
    if (!v43)
      goto LABEL_57;
    v46 = v43;
LABEL_56:
    operator delete(v46);
    goto LABEL_57;
  }
  v6 = 0;
  v7 = 0;
  *(_OWORD *)&v53[1] = *a1;
  *(_DWORD *)&v53[17] = *((_DWORD *)a1 + 4);
  do
  {
    v53[0] = 0;
    shazam::pairwise::attemptToMerge((shazam::pairwise *)&v4[20 * v7], (const TrackingResult *)&v53[1], (const TrackingResult *)v53, &v54, (uint64_t)&v51);
    *(_OWORD *)&v53[1] = v51;
    *(_DWORD *)&v53[17] = v52;
    if (v53[0])
    {
      if (v6 >= v57)
      {
        v9 = (unint64_t *)__p;
        v10 = ((char *)v6 - (_BYTE *)__p) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        v12 = (char *)v57 - (_BYTE *)__p;
        if (((char *)v57 - (_BYTE *)__p) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)&v57, v13);
          v9 = (unint64_t *)__p;
          v6 = v56;
        }
        else
        {
          v14 = 0;
        }
        v15 = (unint64_t *)&v14[8 * v10];
        *v15 = v7;
        v8 = v15 + 1;
        while (v6 != v9)
        {
          v16 = *--v6;
          *--v15 = v16;
        }
        __p = v15;
        v56 = v8;
        v57 = (unint64_t *)&v14[8 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v6 = v7;
        v8 = v6 + 1;
      }
      v56 = v8;
      v6 = v8;
      v4 = *a2;
      v5 = a2[1];
    }
    ++v7;
  }
  while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 2));
  v17 = 126 - 2 * __clz(((char *)v6 - (_BYTE *)__p) >> 3);
  if (v6 == __p)
    v18 = 0;
  else
    v18 = v17;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>((unint64_t *)__p, v6, (uint64_t)&v51, v18, 1);
  v19 = (uint64_t *)__p;
  v20 = v56;
  if (__p != v56)
  {
    v21 = (uint64_t)a2[1];
    do
    {
      v22 = *v19++;
      v23 = (uint64_t)&(*a2)[20 * v22];
      v24 = *(_OWORD *)(v21 - 20);
      *(_DWORD *)(v23 + 16) = *(_DWORD *)(v21 - 4);
      *(_OWORD *)v23 = v24;
      v21 = (uint64_t)(a2[1] - 20);
      a2[1] = (char *)v21;
    }
    while (v19 != (uint64_t *)v20);
  }
  if (v54)
  {
    v25 = a2[2];
    v26 = a2[1];
    if (v26 < v25)
    {
      *(_OWORD *)v26 = *(_OWORD *)&v53[1];
      *((_DWORD *)v26 + 4) = *(_DWORD *)&v53[17];
      v27 = v26 + 20;
LABEL_57:
      a2[1] = v27;
      goto LABEL_58;
    }
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - *a2) >> 2);
    v32 = v31 + 1;
    if (v31 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - *a2) >> 2);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x666666666666666)
      v34 = 0xCCCCCCCCCCCCCCCLL;
    else
      v34 = v32;
    if (v34)
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::TrackingResult>>((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v47 = &v35[20 * v31];
    v48 = &v35[20 * v34];
    *(_OWORD *)v47 = *(_OWORD *)&v53[1];
    *((_DWORD *)v47 + 4) = *(_DWORD *)&v53[17];
    v27 = v47 + 20;
    v49 = *a2;
    v46 = a2[1];
    if (v46 != *a2)
    {
      do
      {
        v50 = *(_OWORD *)(v46 - 20);
        *((_DWORD *)v47 - 1) = *((_DWORD *)v46 - 1);
        *(_OWORD *)(v47 - 20) = v50;
        v47 -= 20;
        v46 -= 20;
      }
      while (v46 != v49);
      v46 = *a2;
    }
    *a2 = v47;
    a2[1] = v27;
    a2[2] = v48;
    if (!v46)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_58:
  if (__p)
  {
    v56 = (unint64_t *)__p;
    operator delete(__p);
  }
}

void sub_218C3D7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *shazam::pairwise::compare@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v12[0] = &off_24D9B75A8;
  v12[1] = a9;
  v12[2] = a5;
  v13 = v12;
  shazam::pairwise::audioscanCompare(a1, a2, a3, a4, (uint64_t)v12, a6, a7, a8, a10);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_218C3D8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;
  void *v17;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ConstQueryConfigProvider::getConfig(ConstQueryConfigProvider *this)
{
  return (uint64_t)this + 8;
}

void ConstQueryConfigProvider::~ConstQueryConfigProvider(ConstQueryConfigProvider *this)
{
  JUMPOUT(0x219A21574);
}

uint64_t std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<char>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<char>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<spectral_peak_t>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_218C3DA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<spectral_peak_t>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<spectral_peak_t>::__init_with_size[abi:ne180100]<spectral_peak_t*,spectral_peak_t*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_218C3DBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<spectral_peak_t>::__init_with_size[abi:ne180100]<spectral_peak_t*,spectral_peak_t*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<shazam::lmfp<(shazam::fp_type)0>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_218C3DC44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::vector<spectral_peak_t>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        v7 = (void **)(v4 - 24);
        std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void shazam::crop<(shazam::signature_density)24>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  std::vector<std::vector<spectral_peak_t>>::resize(&v18, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,std::vector<spectral_peak_t>,0>((gsl::details *)&v16, (uint64_t *)(v8 + v9));
      shazam::crop_band<spectral_peak_t>(v16, *((uint64_t *)&v16 + 1), v18 + v9, a2, a3);
      ++v10;
      v8 = *(_QWORD *)(a1 + 32);
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v8) >> 3));
  }
  shazam::cropped_info(a1, a2, a3, (uint64_t)&v16);
  DWORD2(v17) = shazam::find_last_peak_tick((uint64_t)&v18);
  v14 = v16;
  v15 = v17;
  v13 = 0;
  v12 = 0uLL;
  std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(&v12, v18, v19, 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3));
  v11 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v11;
  *(_OWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  v12 = 0uLL;
  v13 = 0;
  v21 = (void **)&v12;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v21);
  *(_QWORD *)&v16 = &v18;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_218C3DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a17 = (void **)&a21;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>,std::reverse_iterator<shazam::basic_signature<(shazam::signature_density)24>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 32);
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 56;
  }
}

void **std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::~__split_buffer(void **a1)
{
  std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = (void **)(i - 24);
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void std::vector<std::vector<spectral_peak_t>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<spectral_peak_t>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void shazam::crop_band<spectral_peak_t>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v7;
  uint64_t v8;
  gsl::details *v9;
  size_t v10;
  gsl::details *v11;
  _DWORD *v12;
  _DWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  v7 = a4 + a5;
  if (__CFADD__(a4, a5))
    v7 = -1;
  v18 = v7;
  v19 = a4;
  v25 = 0;
  v8 = a2 + 8 * a1;
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = v8;
  v24 = a2;
  v20 = a2;
  v21 = v8;
  v22 = v8;
  std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,gsl::details::span_iterator<spectral_peak_t const>,gsl::details::span_iterator<spectral_peak_t const>,std::chrono::duration<unsigned int,std::ratio<1l,125l>>,std::__identity,void shazam::crop_band<spectral_peak_t>(gsl::span<spectral_peak_t const,18446744073709551615ul>,std::vector<spectral_peak_t> &,std::chrono::duration<unsigned int,std::ratio<1l,125l>>,std::chrono::duration<unsigned int,std::ratio<1l,125l>>)::{lambda(spectral_peak_t const&,gsl::details::span_iterator<spectral_peak_t const> const&)#1}>((gsl::details *)&v23, &v20, &v19, (uint64_t)&v16);
  v23 = v16;
  v24 = v17;
  v20 = a2;
  v21 = v8;
  v22 = v8;
  _ZNSt3__113__upper_boundB8ne180100INS_17_ClassicAlgPolicyEZN6shazam9crop_bandI15spectral_peak_tEEvN3gsl4spanIKT_Lm18446744073709551615EEERNS_6vectorIS7_NS_9allocatorIS7_EEEENS_6chrono8durationIjNS_5ratioILl1ELl125EEEEESJ_EUlRS8_RKT0_E0_NS5_7details13span_iteratorIKS4_EESS_SJ_NS_10__identityEEET1_SU_T2_RKT3_OSL_OT4_((gsl::details *)&v23, &v20, &v18, (uint64_t)&v14);
  if (v14 != v16)
    gsl::details::terminate(v9);
  v10 = v15 - v17;
  std::vector<spectral_peak_t>::resize(a3, (v15 - v17) >> 3);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    v11 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v16);
    memcpy(*(void **)a3, v11, v10);
    v12 = *(_DWORD **)a3;
    v13 = *(_DWORD **)(a3 + 8);
    while (v12 != v13)
    {
      *v12 -= v19;
      v12 += 2;
    }
  }
}

void std::vector<std::vector<spectral_peak_t>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<spectral_peak_t>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<spectral_peak_t>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_218C3E474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<spectral_peak_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<spectral_peak_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>,std::reverse_iterator<std::vector<spectral_peak_t>*>,std::reverse_iterator<std::vector<spectral_peak_t>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>,std::reverse_iterator<std::vector<spectral_peak_t>*>,std::reverse_iterator<std::vector<spectral_peak_t>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<spectral_peak_t>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<spectral_peak_t>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<spectral_peak_t>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

__n128 std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,gsl::details::span_iterator<spectral_peak_t const>,gsl::details::span_iterator<spectral_peak_t const>,std::chrono::duration<unsigned int,std::ratio<1l,125l>>,std::__identity,void shazam::crop_band<spectral_peak_t>(gsl::span<spectral_peak_t const,18446744073709551615ul>,std::vector<spectral_peak_t> &,std::chrono::duration<unsigned int,std::ratio<1l,125l>>,std::chrono::duration<unsigned int,std::ratio<1l,125l>>)::{lambda(spectral_peak_t const&,gsl::details::span_iterator<spectral_peak_t const> const&)#1}>@<Q0>(gsl::details *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  gsl::details *v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  uint64_t v15;

  if (*a2 != *(_QWORD *)a1 || a2[1] != *((_QWORD *)a1 + 1))
    gsl::details::terminate(a1);
  v7 = a2[2] - *((_QWORD *)a1 + 2);
  if (v7)
  {
    v9 = v7 >> 3;
    do
    {
      v10 = v9 >> 1;
      v14 = *(__n128 *)a1;
      v15 = *((_QWORD *)a1 + 2);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v14, v9 >> 1);
      if (*(_DWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v14) < *a3)
      {
        v11 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v14);
        v12 = *((_QWORD *)v11 + 2);
        *(_OWORD *)a1 = *(_OWORD *)v11;
        *((_QWORD *)a1 + 2) = v12;
        v10 = v9 + ~v10;
      }
      v9 = v10;
    }
    while (v10);
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
  return result;
}

__n128 _ZNSt3__113__upper_boundB8ne180100INS_17_ClassicAlgPolicyEZN6shazam9crop_bandI15spectral_peak_tEEvN3gsl4spanIKT_Lm18446744073709551615EEERNS_6vectorIS7_NS_9allocatorIS7_EEEENS_6chrono8durationIjNS_5ratioILl1ELl125EEEEESJ_EUlRS8_RKT0_E0_NS5_7details13span_iteratorIKS4_EESS_SJ_NS_10__identityEEET1_SU_T2_RKT3_OSL_OT4_@<Q0>(gsl::details *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  gsl::details *v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  if (*a2 != *(_QWORD *)a1 || a2[1] != *((_QWORD *)a1 + 1))
    gsl::details::terminate(a1);
  v7 = a2[2] - *((_QWORD *)a1 + 2);
  if (v7)
  {
    v9 = v7 >> 3;
    do
    {
      v10 = v9 >> 1;
      v16 = *(__n128 *)a1;
      v17 = *((_QWORD *)a1 + 2);
      gsl::details::span_iterator<xpair_group<xpair_fields>>::operator+=((gsl::details *)&v16, v9 >> 1);
      v14 = v16;
      v15 = v17;
      if (*a3 >= *(_DWORD *)gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v14))
      {
        v11 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v14);
        v12 = *((_QWORD *)v11 + 2);
        *(_OWORD *)a1 = *(_OWORD *)v11;
        *((_QWORD *)a1 + 2) = v12;
        v10 = v9 + ~v10;
      }
      v9 = v10;
    }
    while (v10);
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
  return result;
}

gsl::details *gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,std::vector<spectral_peak_t>,0>(gsl::details *a1, uint64_t *a2)
{
  return gsl::span<peak_tf const,18446744073709551615ul>::storage_type<gsl::details::extent_type<18446744073709551615ul>>::storage_type<unsigned long>(a1, *a2, (a2[1] - *a2) >> 3);
}

void std::__function::__func<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(SearchResponse const&)>::~__func()
{
  JUMPOUT(0x219A21574);
}

__n128 std::__function::__func<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(SearchResponse const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D9B7550;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(SearchResponse const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D9B7550;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(SearchResponse const&)>::operator()(uint64_t a1, std::runtime_error *a2)
{
  std::runtime_error_vtbl *v3;
  const char *i;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  int *v20;
  std::runtime_error v22;
  char v23;

  tl::detail::expected_copy_base<std::vector<Result>,std::system_error,false>::expected_copy_base(&v22, a2);
  if (v23)
  {
    v3 = v22.__vftable;
    for (i = v22.__imp_.__imp_; v3 != (std::runtime_error_vtbl *)i; v3 = (std::runtime_error_vtbl *)((char *)v3 + 184))
    {
      if (v3[5].what != (const char *(__cdecl *)(const std::runtime_error *__hidden))1)
      {
        v5 = *(_QWORD *)(a1 + 16);
        v6 = (int)(*(double *)&v3[4].~runtime_error_0 * 0.125);
        v7 = *(_DWORD *)(a1 + 8);
        v8 = (int)v3[4].~runtime_error;
        v9 = (int)v3[2].~runtime_error_0;
        v10 = *(int **)(v5 + 8);
        v11 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v10 >= v11)
        {
          v13 = *(int **)v5;
          v14 = ((uint64_t)v10 - *(_QWORD *)v5) >> 4;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60)
            std::vector<char>::__throw_length_error[abi:ne180100]();
          v16 = v11 - (_QWORD)v13;
          if (v16 >> 3 > v15)
            v15 = v16 >> 3;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>(v5 + 16, v17);
            v13 = *(int **)v5;
            v10 = *(int **)(v5 + 8);
          }
          else
          {
            v18 = 0;
          }
          v19 = (int *)&v18[16 * v14];
          *v19 = v6;
          v19[1] = v7;
          v19[2] = v8;
          v19[3] = v9;
          v20 = v19;
          if (v10 != v13)
          {
            do
            {
              *((_OWORD *)v20 - 1) = *((_OWORD *)v10 - 1);
              v20 -= 4;
              v10 -= 4;
            }
            while (v10 != v13);
            v13 = *(int **)v5;
          }
          v12 = v19 + 4;
          *(_QWORD *)v5 = v20;
          *(_QWORD *)(v5 + 8) = v19 + 4;
          *(_QWORD *)(v5 + 16) = &v18[16 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *v10 = v6;
          v10[1] = v7;
          v12 = v10 + 4;
          v10[2] = v8;
          v10[3] = v9;
        }
        *(_QWORD *)(v5 + 8) = v12;
      }
    }
  }
  return tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base((uint64_t)&v22);
}

void sub_218C3EA80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  tl::detail::expected_storage_base<std::vector<Result>,std::system_error,false,false>::~expected_storage_base((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(SearchResponse const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::audioscanCompare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,std::function<void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)> const&,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(SearchResponse const&)>::target_type()
{
}

std::runtime_error *tl::detail::expected_copy_base<std::vector<Result>,std::system_error,false>::expected_copy_base(std::runtime_error *this, std::runtime_error *a2)
{
  LOBYTE(this->__vftable) = 0;
  LOBYTE(this[2].__vftable) = 0;
  if (LOBYTE(a2[2].__vftable))
  {
    tl::detail::expected_operations_base<std::vector<Result>,std::system_error>::construct_with<tl::detail::expected_copy_base<std::vector<Result>,std::system_error,false> const&>((uint64_t)this, (__int128 **)a2);
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
    this[1] = a2[1];
    LOBYTE(this[2].__vftable) = 0;
  }
  return this;
}

_QWORD *tl::detail::expected_operations_base<std::vector<Result>,std::system_error>::construct_with<tl::detail::expected_copy_base<std::vector<Result>,std::system_error,false> const&>(uint64_t a1, __int128 **a2)
{
  _QWORD *result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = std::vector<Result>::__init_with_size[abi:ne180100]<Result*,Result*>((_QWORD *)a1, *a2, a2[1], 0xD37A6F4DE9BD37A7 * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::TrackingResult>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  BOOL v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *(a2 - 1);
        else
          v24 = v9[1];
        if (v22 >= v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        v9[1] = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 >= *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *v9;
        v27 = v9[1];
        if (v26 <= v27)
          v28 = v9[1];
        if (v26 < v27)
          v27 = v26;
        *v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = v9[2];
        else
          v31 = *v9;
        if (*v9 < v29)
          v29 = *v9;
        v9[2] = v29;
        *v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 < v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (*v9 >= v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 >= v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 >= v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = v9[1];
        else
          v43 = *v9;
        if (*v9 >= v42)
          v41 = v9[1];
        *v9 = v43;
        v9[1] = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *(a2 - 1);
        else
          v46 = v9[3];
        if (v44 >= v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        v9[3] = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 >= v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = v9[2];
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
          v51 = v9[3];
        if (v49 < v50)
          v50 = v49;
        v9[2] = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 < v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 >= *v9)
          v56 = *v9;
        if (v58 <= v57)
          v55 = v9[2];
        if (v58 < v57)
          v57 = v58;
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 >= v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *v9 = v55;
        v9[1] = v54;
        if (v59 >= v57)
          v60 = v57;
        else
          v60 = v59;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,unsigned long *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<void> &>(v9, (uint64_t *)a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9, v17);
          v9 = v17 + 1;
          result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v68 + 8) = v67;
                  if (!v68)
                    break;
                  v67 = *(unint64_t *)((char *)v9 + v68 - 8);
                  v68 -= 8;
                  if (v66 <= v67)
                  {
                    v69 = (unint64_t *)((char *)v9 + v68 + 8);
                    goto LABEL_123;
                  }
                }
                v69 = v9;
LABEL_123:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 8;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              do
              {
                *v61 = v71;
                v71 = *(v61 - 2);
                --v61;
              }
              while (v70 > v71);
              *v61 = v70;
            }
            v61 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<void> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= *a1)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 8;
    if (++v12 == a2)
      return 1;
  }
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 >= v23)
              v22 = v20[1];
            if (*v20 <= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 > v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 >= v11)
          v10 = v8[1];
        if (*v8 > v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 >= v14)
              v10 = v8[1];
            if (*v8 <= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

void std::__function::__func<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)>::~__func()
{
  JUMPOUT(0x219A21574);
}

__n128 std::__function::__func<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D9B75A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D9B75A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v3;
  void **v4;
  char *v5;
  char *v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    shazam::pairwise::intersectingMerge((__int128 *)a2, *(char ***)(a1 + 8));
  }
  else if (!v3)
  {
    v4 = *(void ***)(a1 + 8);
    v5 = (char *)v4[1];
    v6 = (char *)v4[2];
    if (v5 >= v6)
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v4) >> 2);
      v10 = v9 + 1;
      if (v9 + 1 > 0xCCCCCCCCCCCCCCCLL)
        std::vector<char>::__throw_length_error[abi:ne180100]();
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)*v4) >> 2);
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x666666666666666)
        v12 = 0xCCCCCCCCCCCCCCCLL;
      else
        v12 = v10;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::TrackingResult>>((uint64_t)(v4 + 2), v12);
      else
        v13 = 0;
      v14 = &v13[20 * v9];
      v15 = &v13[20 * v12];
      v16 = *(_OWORD *)a2;
      *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)v14 = v16;
      v8 = v14 + 20;
      v18 = (char *)*v4;
      v17 = (char *)v4[1];
      if (v17 != *v4)
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 20);
          *((_DWORD *)v14 - 1) = *((_DWORD *)v17 - 1);
          *(_OWORD *)(v14 - 20) = v19;
          v14 -= 20;
          v17 -= 20;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      *v4 = v14;
      v4[1] = v8;
      v4[2] = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = *(_OWORD *)a2;
      *((_DWORD *)v5 + 4) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)v5 = v7;
      v8 = v5 + 20;
    }
    v4[1] = v8;
  }
}

uint64_t std::__function::__func<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0,std::allocator<shazam::pairwise::compare(shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::basic_signature_view<(shazam::signature_density)2147483647>,shazam::pairwise::MergeMode,shazam::sig_chunk_config const&,QueryConfig const&,SearchPlan const&,shazam::TrackerConfig const&)::$_0>,void ()(shazam::TrackingResult const&,shazam::sig_alignment const&)>::target_type()
{
}

__n128 shazam::StaticCPUSearcherFactory::StaticCPUSearcherFactory(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 v5;
  __n128 result;

  v5 = *a2;
  *(_QWORD *)a1 = &off_24D9B7268;
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)(a1 + 24) = a2[1];
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  result = (__n128)a2[2];
  *(__n128 *)(a1 + 40) = result;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = a4;
  *(_BYTE *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

void shazam::StaticCPUSearcherFactory::make_searcher(shazam::StaticCPUSearcherFactory *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v6 = 0;
  v3 = (unint64_t *)((char *)this + 80);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v6 = v4;
  std::make_unique[abi:ne180100]<shazam::StaticCPUSearcher,shazam::CPUDatabases const&,Timer const&,unsigned long const&,unsigned long const&,BOOL const&>((uint64_t *)this + 1, *((_QWORD *)this + 8), &v6, (_QWORD *)this + 7, (unsigned __int8 *)this + 72, &v5);
  *a2 = v5;
}

void std::make_unique[abi:ne180100]<shazam::StaticCPUSearcher,shazam::CPUDatabases const&,Timer const&,unsigned long const&,unsigned long const&,BOOL const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v12 = operator new();
  v13 = v12;
  v14 = (std::__shared_weak_count *)a1[1];
  v32 = *a1;
  v33 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a1[3];
  v34 = a1[2];
  v35 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)a1[5];
  v36 = a1[4];
  v37 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  shazam::StaticCPUSearcher::StaticCPUSearcher(v12, &v32, a2, *a3, *a4, *a5);
  *a6 = v13;
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v33;
  if (v33)
  {
    v30 = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_218C3FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  shazam::CPUDatabases::~CPUDatabases((shazam::CPUDatabases *)&a9);
  MEMORY[0x219A21574](v9, 0x10F1C4039129549);
  _Unwind_Resume(a1);
}

uint64_t shazam::ShazamKitHeaderIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  shazam::ShazamKitHeader::validate(a1, a2);
  v8 = 1342177284;
  v9 = a1;
  v10 = a2;
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v8);
}

uint64_t shazam::io::pack@<X0>(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  return shazam::io::pack(a2, a1);
}

void sub_218C3FD18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *shazam::io::addShazamKitHeader(std::vector<char> *this)
{
  std::vector<char>::pointer begin;
  unint64_t v3;
  char *v4;
  char *v6;

  begin = this->__begin_;
  v3 = this->__end_ - this->__begin_;
  if (v3 > 0xFFFFFFFFFFFFFFF3)
  {
    this->__end_ = &begin[v3 + 12];
  }
  else
  {
    std::vector<char>::__append(this, 0xCuLL);
    begin = this->__begin_;
  }
  v4 = &begin[v3];
  *(_QWORD *)v4 = 0x225802580;
  *((_DWORD *)v4 + 2) = 12;
  return std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>((unint64_t)this->__begin_, this->__end_, this->__end_, this->__end_ - 12, this->__end_ - 12, this->__begin_, &v6);
}

uint64_t shazam::io::pack(std::vector<char> *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  std::vector<char>::pointer v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::vector<char>::pointer v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  std::vector<char>::pointer end;
  char *value;
  char *v39;
  std::vector<char>::pointer v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  char *v56;
  std::vector<char> *v57;
  char v58;

  v56 = 0;
  v57 = a1;
  v58 = 1;
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v54 = 0;
  v55 = 0;
  *(_QWORD *)&v51 = &v54;
  BYTE8(v51) = 0;
  v6 = v4 - v5;
  if (v4 == v5)
    goto LABEL_11;
  if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  v7 = (char *)operator new(v6);
  v54 = v7;
  v56 = &v7[8 * (v6 >> 3)];
  v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
  bzero(v7, v8);
  v9 = 0;
  v10 = 0;
  v55 = &v7[v8];
  do
  {
    shazam::spectral_peak_compact_t::convert_array(*(_QWORD *)(v5 + v9), (uint64_t)(*(_QWORD *)(v5 + v9 + 8) - *(_QWORD *)(v5 + v9)) >> 3, (uint64_t)&v51);
    v11 = &v54[v9];
    v12 = *(void **)&v54[v9];
    if (v12)
    {
      *((_QWORD *)v11 + 1) = v12;
      operator delete(v12);
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
    *(_OWORD *)v11 = v51;
    *((_QWORD *)v11 + 2) = v52;
    ++v10;
    v5 = *(_QWORD *)(a2 + 32);
    v9 += 24;
  }
  while (v10 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v5) >> 3));
  v13 = v54;
  if (v54 == v55)
  {
LABEL_11:
    v14 = 8;
  }
  else
  {
    v14 = 8;
    do
    {
      v15 = *((_DWORD *)v13 + 2);
      v16 = *(_DWORD *)v13;
      v13 += 24;
      v14 += ((v15 - v16 + 3) & 0xFFFFFFFC) + 8;
    }
    while (v13 != v55);
  }
  LegacyFatSigInfo::LegacyFatSigInfo((LegacyFatSigInfo *)&v51, *(_DWORD *)(a2 + 16));
  LegacyFatSigInfo::set_audio_sample_length((uint64_t)&v51, *(_QWORD *)(a2 + 8));
  LegacyFatSigInfo::set_stream_pos((uint64_t)&v51, *(_QWORD *)a2);
  v17 = HIDWORD(v53) & 0x1FFFF | (*(unsigned __int8 *)(a2 + 20) << 19) | 0x40000;
  DWORD1(v51) = -87368039;
  *((_QWORD *)&v51 + 1) = v14 | 0x41C0801000000000;
  HIDWORD(v53) = v17;
  a1->__end_ = a1->__begin_;
  v18 = v14;
  std::vector<char>::reserve(a1, v14 + 60);
  begin = a1->__begin_;
  v20 = a1->__end_ - a1->__begin_;
  if (v20 > 0xFFFFFFFFFFFFFFCFLL)
  {
    a1->__end_ = &begin[v20 + 48];
  }
  else
  {
    std::vector<char>::__append(a1, 0x30uLL);
    begin = a1->__begin_;
  }
  v21 = &begin[v20];
  v22 = v51;
  v23 = v53;
  *((_OWORD *)v21 + 1) = v52;
  *((_OWORD *)v21 + 2) = v23;
  *(_OWORD *)v21 = v22;
  v24 = a1->__begin_;
  v25 = a1->__end_ - a1->__begin_;
  if (v25 > 0xFFFFFFFFFFFFFFF7)
  {
    a1->__end_ = &v24[v25 + 8];
  }
  else
  {
    std::vector<char>::__append(a1, 8uLL);
    v24 = a1->__begin_;
  }
  *(_QWORD *)&v24[v25] = (v18 << 32) | 0x40000000;
  v26 = v54;
  if (v55 != v54)
  {
    v27 = 0;
    do
    {
      v28 = &v26[24 * v27];
      v30 = *(_QWORD *)v28;
      v29 = *((_QWORD *)v28 + 1);
      v31 = a1->__begin_;
      v32 = a1->__end_ - a1->__begin_;
      if (v32 > 0xFFFFFFFFFFFFFFF7)
      {
        a1->__end_ = &v31[v32 + 8];
      }
      else
      {
        std::vector<char>::__append(a1, 8uLL);
        v31 = a1->__begin_;
      }
      *(_QWORD *)&v31[v32] = (v27 + 1610809408) | ((unint64_t)(v29 - v30) << 32);
      shazam::io::write_unaligned<shazam::spectral_peak_compact_t>(a1, (uint64_t)&v54[24 * v27]);
      v26 = v54;
      v33 = *(_DWORD *)&v54[24 * v27 + 8] - *(_DWORD *)&v54[24 * v27];
      v34 = ((v33 + 3) & 0xFFFFFFFC) - v33;
      if (v34)
      {
        v35 = 0;
        if (v34 <= 1)
          v36 = 1;
        else
          v36 = v34;
        end = a1->__end_;
        do
        {
          value = a1->__end_cap_.__value_;
          if (end >= value)
          {
            v40 = a1->__begin_;
            v41 = end - a1->__begin_;
            v42 = v41 + 1;
            if (v41 + 1 < 0)
              std::vector<char>::__throw_length_error[abi:ne180100]();
            v43 = value - v40;
            if (2 * v43 > v42)
              v42 = 2 * v43;
            if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
              v44 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
              v45 = (char *)operator new(v44);
            else
              v45 = 0;
            v46 = &v45[v41];
            v47 = &v45[v41];
            *v47 = 0;
            v39 = v47 + 1;
            if (end != v40)
            {
              v48 = &end[~(unint64_t)v40];
              do
              {
                v49 = *--end;
                (v48--)[(_QWORD)v45] = v49;
              }
              while (end != v40);
              end = a1->__begin_;
              v46 = v45;
            }
            a1->__begin_ = v46;
            a1->__end_ = v39;
            a1->__end_cap_.__value_ = &v45[v44];
            if (end)
              operator delete(end);
          }
          else
          {
            *end = 0;
            v39 = end + 1;
          }
          a1->__end_ = v39;
          ++v35;
          end = v39;
        }
        while (v35 != v36);
        v26 = v54;
      }
      ++v27;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL * ((v55 - v26) >> 3));
  }
  *((_DWORD *)a1->__begin_ + 1) = crc32(0, a1->__begin_ + 8, a1->__end_ - a1->__begin_ - 8);
  *(_QWORD *)&v51 = &v54;
  return gsl::final_action<shazam::io::pack(std::vector<char> &,shazam::basic_signature_t const&)::$_0>::~final_action((uint64_t)&v57);
}

void sub_218C40220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a9 = (void **)&a16;
  gsl::final_action<shazam::io::pack(std::vector<char> &,shazam::basic_signature_t const&)::$_0>::~final_action((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::vector<char>::reserve(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer begin;
  std::vector<char>::pointer end;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;

  begin = this->__begin_;
  if (this->__end_cap_.__value_ - this->__begin_ < __n)
  {
    if ((__n & 0x8000000000000000) != 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    end = this->__end_;
    v6 = (char *)operator new(__n);
    v7 = &v6[end - begin];
    v8 = v7;
    if (end != begin)
    {
      v9 = &end[~(unint64_t)begin];
      do
      {
        v10 = *--end;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (end != begin);
      v8 = v6;
    }
    this->__begin_ = v8;
    this->__end_ = v7;
    this->__end_cap_.__value_ = &v6[__n];
    if (begin)
      operator delete(begin);
  }
}

std::vector<char> *shazam::io::write_unaligned<shazam::spectral_peak_compact_t>(std::vector<char> *this, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  std::vector<char> *v5;
  std::vector<char>::pointer begin;
  unint64_t v7;
  std::vector<char>::size_type v8;
  unint64_t v9;

  v3 = *(_BYTE **)a2;
  v4 = *(_BYTE **)(a2 + 8);
  if (v3 != v4)
  {
    v5 = this;
    begin = this->__begin_;
    v7 = this->__end_ - this->__begin_;
    v8 = v4 - v3;
    v9 = v7 + v4 - v3;
    if (v7 >= v9)
    {
      if (v7 > v9)
        this->__end_ = &begin[v9];
    }
    else
    {
      std::vector<char>::__append(this, v8);
      begin = v5->__begin_;
      v3 = *(_BYTE **)a2;
    }
    return (std::vector<char> *)memcpy(&begin[v7], v3, v8);
  }
  return this;
}

uint64_t gsl::final_action<shazam::io::pack(std::vector<char> &,shazam::basic_signature_t const&)::$_0>::~final_action(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    shazam::io::addShazamKitHeader(*(std::vector<char> **)a1);
  return a1;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>@<X0>(unint64_t __dst@<X5>, char *result@<X0>, char *a3@<X1>, char *a4@<X2>, char *a5@<X3>, char *a6@<X4>, char **a7@<X8>)
{
  char *v10;
  char v11;
  char v12;
  char *v13;
  char v14;
  size_t v15;

  if (a3 == a5)
  {
    *a7 = a6;
    a7[1] = (char *)__dst;
  }
  else
  {
    if (a5 != (char *)__dst)
    {
      v10 = a3 - 1;
      if (a3 - 1 == a5)
      {
        v11 = *a5;
        do
        {
          v12 = *--a5;
          *v10-- = v12;
          --a3;
        }
        while (a5 != (char *)__dst);
        *v10 = v11;
      }
      else
      {
        if (a5 - 1 == (char *)__dst)
        {
          v14 = *(_BYTE *)__dst;
          v13 = (char *)__dst;
          if ((char *)(__dst + 1) != a3)
          {
            v15 = (size_t)&a3[~__dst];
            memmove((void *)__dst, (const void *)(__dst + 1), v15);
            v13 = (char *)(__dst + v15);
          }
          *v10 = v14;
          result = a6;
          goto LABEL_15;
        }
        result = std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<char *>>>((uint64_t)result, a3, a4, a5, (uint64_t)a6, (char *)__dst);
      }
      v13 = a3;
LABEL_15:
      *a7 = result;
      a7[1] = v13;
      goto LABEL_16;
    }
    *a7 = result;
    a7[1] = a3;
  }
LABEL_16:
  a7[2] = a6;
  a7[3] = (char *)__dst;
  return result;
}

char *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<char *>>>(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5, char *a6)
{
  uint64_t v6;
  char *result;
  char *v8;
  char *v9;
  char *v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  BOOL v23;

  v6 = a2 - a4;
  if (a2 - a4 == a4 - a6)
  {
    result = a3;
    if (a2 != a4 && a4 != a6)
    {
      v8 = a2 - 1;
      v9 = a4 - 1;
      v10 = a4 - 1;
      do
      {
        v11 = *v8;
        v12 = v8 == a4;
        *v8-- = *v9;
        *v10-- = v11;
        if (v12)
          break;
        v12 = v9 == a6;
        v9 = v10;
      }
      while (!v12);
    }
  }
  else
  {
    v13 = a4 - a6;
    v14 = a2 - a4;
    do
    {
      v15 = v14;
      v14 = v13;
      v13 = v15 % v13;
    }
    while (v13);
    if (v14)
    {
      v16 = &a2[-v14];
      do
      {
        v18 = *v16++;
        v17 = v18;
        v19 = &v16[-v6];
        v20 = v16;
        do
        {
          v21 = v19;
          *(v20 - 1) = *(v19 - 1);
          v22 = v19 - a6;
          v23 = v22 <= v6;
          v19 = &a4[v22];
          if (!v23)
            v19 = &v21[-v6];
          v20 = v21;
        }
        while (v19 != v16);
        *(v21 - 1) = v17;
      }
      while (v16 != a2);
    }
    return &a2[-(a4 - a6)];
  }
  return result;
}

void std::vector<shazam::io::`anonymous namespace'::compacted_peaks>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_218C40860(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  uint64_t v34;
  uint64_t v37;
  void *v38;

  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a33 = v34 - 136;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  v37 = *(_QWORD *)(v34 + 24);
  if (a2 == 3)
  {
    objc_msgSend(v33, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v37);
  }
  else
  {
    v38 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v33, "ConvertException:toError:", v38, v37);
    else
      objc_msgSend(v33, "FillUnknownError:", v37);
  }
  __cxa_end_catch();
  JUMPOUT(0x218C4082CLL);
}

void sub_218C4093C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t SumoSigInfo::get_raw_sample_rate(SumoSigInfo *this)
{
  uint64_t v1;

  v1 = 0;
  {
    v1 += 2;
    if (v1 == 8)
      return 0;
  }
}

unint64_t SumoSigInfo::get_sample_length_samples(SumoSigInfo *this)
{
  return *((unsigned int *)this + 5) | ((unint64_t)*((unsigned __int16 *)this + 12) << 32);
}

unint64_t SumoSigInfo::get_stream_position(SumoSigInfo *this)
{
  return *((unsigned int *)this + 3) | ((unint64_t)*((unsigned __int8 *)this + 16) << 32);
}

uint64_t crc32(uint64_t result, char *a2, uint64_t a3)
{
  unsigned int v3;
  char v4;

  if (a3)
  {
    v3 = ~(_DWORD)result;
    do
    {
      v4 = *a2++;
      v3 = crc32_tab[(v4 ^ v3)] ^ (v3 >> 8);
      --a3;
    }
    while (a3);
    return ~v3;
  }
  return result;
}

void shazam::windows::blackmanHarris(shazam::windows *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  int32x2_t v4;
  unint64_t v5;
  float32x2_t v6;
  uint64x2_t v7;
  _DWORD *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int64x2_t v23;
  float32x2_t v24;
  uint64x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  int32x2_t v34;
  int64x2_t v35;
  int v36;

  v36 = 0;
  v3 = std::vector<float>::vector(a2, (unint64_t)this, &v36);
  if (this)
  {
    *(float *)v4.i32 = (float)((unint64_t)this - 1);
    v25 = (uint64x2_t)vdupq_n_s64((unint64_t)this - 1);
    v5 = ((unint64_t)this + 1) & 0xFFFFFFFFFFFFFFFELL;
    v6 = (float32x2_t)vdup_lane_s32(v4, 0);
    v7 = (uint64x2_t)xmmword_218C5E9D0;
    v8 = (_DWORD *)(*v3 + 4);
    v24 = (float32x2_t)vdup_n_s32(0x40C90FDBu);
    v9 = (float32x2_t)vdup_n_s32(0x41490FDBu);
    v10 = (float32x2_t)vdup_n_s32(0x4196CBE4u);
    v11 = (float32x2_t)vdup_n_s32(0xBEFA0126);
    v12 = (float32x2_t)vdup_n_s32(0x3EB7AE14u);
    v13 = (float32x2_t)vdup_n_s32(0x3E10ABB4u);
    v14 = (float32x2_t)vdup_n_s32(0xBC3F5D79);
    v23 = vdupq_n_s64(2uLL);
    do
    {
      v34 = vmovn_s64((int64x2_t)vcgeq_u64(v25, v7));
      v35 = (int64x2_t)v7;
      v15 = vcvt_f32_f64(vcvtq_f64_u64(v7));
      v16 = vdiv_f32(vmul_f32(v15, v24), v6);
      v29 = v16.f32[0];
      v32 = cosf(v16.f32[1]);
      v17.f32[0] = cosf(v29);
      v17.f32[1] = v32;
      v33 = v17;
      v18 = vdiv_f32(vmul_f32(v15, v9), v6);
      v27 = v18.f32[0];
      v30 = cosf(v18.f32[1]);
      v19.f32[0] = cosf(v27);
      v19.f32[1] = v30;
      v31 = v19;
      v20 = vdiv_f32(vmul_f32(v15, v10), v6);
      v26 = v20.f32[0];
      v28 = cosf(v20.f32[1]);
      v21.f32[0] = cosf(v26);
      v21.f32[1] = v28;
      v22 = vmla_f32(vmla_f32(vmla_f32(v12, v11, v33), v13, v31), v14, v21);
      if ((v34.i8[0] & 1) != 0)
        *(v8 - 1) = v22.i32[0];
      if ((v34.i8[4] & 1) != 0)
        *v8 = v22.i32[1];
      v7 = (uint64x2_t)vaddq_s64(v35, v23);
      v8 += 2;
      v5 -= 2;
    }
    while (v5);
  }
}

char *std::vector<short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_218C40FC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

unint64_t shazam::targetFP(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t i;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = a1 + 6;
  do
  {
    v6 = a1[v2 + 2];
    if (v6)
    {
      for (i = 0; i != 4; ++i)
      {
        v4 += v6 * *((unsigned __int8 *)v5 + i);
        if (*((_BYTE *)v5 + i))
          ++v3;
      }
    }
    ++v2;
    ++v5;
  }
  while (v2 != 4);
  return v4 * a2 / (unint64_t)*a1 / v3;
}

__n128 shazam::reframe_matrix@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>, uint8x8_t a5@<D3>)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  int8x8_t v10;
  char *v11;
  unsigned int v12;
  int16x8_t v13;
  __n128 result;
  _OWORD v15[2];
  uint64_t v16;

  v5 = 0;
  v6 = truncf((float)a3 / (float)*(unsigned int *)a1);
  v7 = roundf((float)a2 / v6);
  v8 = sqrtf(v7);
  v9 = vcvtas_u32_f32(v7 / roundf(v8));
  v16 = *(_QWORD *)(a1 + 32);
  v10 = (int8x8_t)vdup_n_s16(llroundf(v8));
  do
  {
    v11 = (char *)v15 + v5;
    if (*(_DWORD *)((char *)v15 + v5 + 8))
      v12 = v9;
    else
      v12 = 0;
    *((_DWORD *)v11 + 2) = v12;
    a5.i32[0] = *((_DWORD *)v11 + 6);
    v13 = (int16x8_t)vmovl_u8(a5);
    *(int8x8_t *)v13.i8 = vbic_s8(v10, (int8x8_t)vceqz_s16(*(int16x4_t *)v13.i8));
    a5 = (uint8x8_t)vmovn_s16(v13);
    *((_DWORD *)v11 + 6) = a5.i32[0];
    v5 += 4;
  }
  while (v5 != 16);
  LODWORD(v15[0]) = vcvtps_u32_f32((float)a3 / v6);
  DWORD1(v15[0]) = v15[0];
  *(_QWORD *)(a4 + 32) = v16;
  result = (__n128)v15[1];
  *(_OWORD *)a4 = v15[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 shazam::intensify_matrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, uint8x8_t a4@<D1>)
{
  uint64_t v4;
  float v5;
  BOOL v6;
  float v7;
  uint64_t v8;
  int16x8_t v9;
  __n128 result;
  __int128 v11;

  v4 = 0;
  if (a3 <= 12.0)
    v5 = (float)((float)(12.0 - a3) * 0.125) + 1.0;
  else
    v5 = 1.0;
  v6 = a3 < 8.0;
  v7 = 1.5;
  if (!v6)
    v7 = v5;
  do
  {
    v8 = a1 + v4;
    *(_DWORD *)(v8 + 8) = (float)(v7 * (float)*(unsigned int *)(a1 + v4 + 8));
    a4.i32[0] = *(_DWORD *)(a1 + v4 + 24);
    v9 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), v7));
    *(int16x4_t *)v9.i8 = vmovn_s32((int32x4_t)v9);
    a4 = (uint8x8_t)vmovn_s16(v9);
    *(_DWORD *)(v8 + 24) = a4.i32[0];
    v4 += 4;
  }
  while (v4 != 16);
  result = *(__n128 *)a1;
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

float FreqLogTable::at(FreqLogTable *this)
{
  if ((_DWORD)this)
    return log((double)this * 0.015625);
  else
    return -4.1589;
}

_UNKNOWN **shazam::signature_category(shazam *this)
{
  unsigned __int8 v1;

  {
  }
  return &shazam::signature_category(void)::instance;
}

uint64_t shazam::make_error_code(shazam *a1)
{
  unsigned int v1;

  v1 = a1;
  shazam::signature_category(a1);
  return v1;
}

{
  unsigned int v1;

  v1 = a1;
  shazam::signature_category(a1);
  return v1;
}

void `anonymous namespace'::signature_category_impl::~signature_category_impl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x219A21574);
}

const char *`anonymous namespace'::signature_category_impl::name(_anonymous_namespace_::signature_category_impl *this)
{
  return "signature validation";
}

_QWORD *`anonymous namespace'::signature_category_impl::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if (a1 > 199)
  {
    switch(a1)
    {
      case 300:
        v3 = "Invalid - No audio in signature";
        break;
      case 301:
        v3 = "Invalid - No peaks in signature";
        break;
      case 302:
        v3 = "Invalid - Sig header has 0 length";
        break;
      case 303:
        v3 = "Invalid - First peak and last peak less than 0.5 seconds apart";
        break;
      case 304:
        v3 = "Invalid - Over max length";
        break;
      default:
        switch(a1)
        {
          case 200:
            v3 = "Invalid - Out of order peaks";
            break;
          case 201:
            v3 = "Invalid - Peaks not sorted by time";
            break;
          case 202:
            v3 = "Invalid - Duplicate peak found";
            break;
          case 203:
            v3 = "Invalid - Sig header length less than last peak time";
            break;
          default:
            if (a1 == 400)
              v3 = "Invalid - Peak Density is too high";
            else
LABEL_14:
              v3 = "unknown";
            break;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 100:
        v3 = "Unknown Error";
        break;
      case 101:
        v3 = "Invalid - Zero byte sig";
        break;
      case 102:
        v3 = "Invalid - Could not parse binary sig data";
        break;
      case 103:
        v3 = "Invalid - Magic key doesn't match expected";
        break;
      case 104:
        v3 = "Invalid - Sumo sig info block has the wrong size";
        break;
      case 105:
        v3 = "Invalid - Sig smaller than smallest possible sig";
        break;
      case 106:
        v3 = "Invalid - Unable to dump legacy sig";
        break;
      case 107:
        v3 = "Invalid - Unable to dump sumo sig";
        break;
      case 108:
        v3 = "Invalid - Unable to dump banded sig";
        break;
      case 109:
        v3 = "Invalid - Number of Bands not equal between rv and bands";
        break;
      case 110:
        v3 = "Invalid - Wrong number of bands.";
        break;
      case 111:
        v3 = "Invalid - Size in start header not found";
        break;
      case 112:
        v3 = "Invalid - Fp data header pkt size incorrect";
        break;
      case 113:
        v3 = "Invalid - Leftover bytes smaller than EXT_HEADER_TYPE";
        break;
      case 114:
        v3 = "Invalid - Malformed header chain";
        break;
      case 115:
        v3 = "Invalid - no header to extract sumo peaks from";
        break;
      case 116:
        v3 = "Invalid - Can only extract sumo peaks from a sumo signature";
        break;
      case 117:
      case 118:
      case 127:
        goto LABEL_14;
      case 119:
        v3 = "Invalid - Unpacked sig has no header to extract peaks from";
        break;
      case 120:
        v3 = "Invalid - Payload type of sumo doesn't match sig header";
        break;
      case 121:
        v3 = "Invalid - Unknown header error";
        break;
      case 122:
        v3 = "Invalid - Legacy sig info missing";
        break;
      case 123:
        v3 = "Invalid - Legacy sig info size mismatch";
        break;
      case 124:
        v3 = "Invalid - Error decompressing signature, could not get header of each band";
        break;
      case 125:
        v3 = "Invalid - Could not get ancient sig fp data header";
        break;
      case 126:
        v3 = "Error when reducing density of the signature";
        break;
      case 128:
        v3 = "Error when calculating time curvature: negative value";
        break;
      case 129:
        v3 = "Error when filling sumo patch: patch size must be 5";
        break;
      case 130:
        v3 = "Error when filling sumo patch: invalid position into patch";
        break;
      case 131:
        v3 = "Error when decoding sumo peaks: sumo peak too small";
        break;
      case 132:
        v3 = "Invalid - CRC";
        break;
      default:
        if (a1)
          goto LABEL_14;
        v3 = "Success";
        break;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

gsl::details *shazam::ccp::validateFirstClusterCmdPkt@<X0>(gsl::details *a1@<X0>, gsl::details **a2@<X8>)
{
  gsl::details *subspan;
  uint64_t v5;
  gsl::details *v6;
  gsl::details *v7;
  unint64_t v8;
  gsl::details *v9;
  unint64_t v10;
  gsl::details *result;
  gsl::details *v12;
  void *exception;
  uint64_t error_code;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  if (*(_QWORD *)a1 <= 0x1FuLL
    || (subspan = gsl::span<char const,18446744073709551615ul>::make_subspan(a1, 0x20uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL), v20[0] = subspan, v20[1] = v5, *(_QWORD *)a1 <= 0xAFuLL))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x6C);
    MEMORY[0x219A21418](exception, error_code, v15);
    goto LABEL_12;
  }
  v6 = subspan;
  v7 = (gsl::details *)shazam::reinterpret_safer<ClusterCmdPkt const*,0>(a1);
  v8 = *((unsigned int *)v7 + 5);
  if ((unint64_t)v6 < v8 || (v9 = v7, v10 = *(int *)v7, (unint64_t)v6 < v10) || !(_DWORD)v10)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v16 = shazam::make_error_code((shazam *)0x7B);
    MEMORY[0x219A21418](exception, v16, v17);
    goto LABEL_12;
  }
  if ((_DWORD)v8 != (*((_DWORD *)v7 + 6) ^ 0x789ABC13))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v18 = shazam::make_error_code((shazam *)0x67);
    MEMORY[0x219A21418](exception, v18, v19);
LABEL_12:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  result = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)v20, 0, (gsl::details *)v8);
  *a2 = result;
  a2[1] = v12;
  a2[2] = v9;
  return result;
}

void sub_218C41718(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<ClusterCmdPkt const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0x1FuLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C417FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *shazam::ccp::validateNextClusterCmdPkt(_QWORD *result, int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t error_code;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *exception;
  uint64_t v11;
  uint64_t v12;

  if (result[1] - (_QWORD)a2 + *result <= 0x1FuLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x71);
    MEMORY[0x219A21418](exception, error_code, v7);
    goto LABEL_11;
  }
  if (*a2 + a3 > a4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v8 = shazam::make_error_code((shazam *)0x130);
    MEMORY[0x219A21418](exception, v8, v9);
LABEL_11:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  v4 = a2[5];
  if (a4 - a3 != v4 || (_DWORD)v4 != (a2[6] ^ 0x789ABC13))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = shazam::make_error_code((shazam *)0x67);
    MEMORY[0x219A21418](exception, v11, v12);
    goto LABEL_11;
  }
  return result;
}

void sub_218C4191C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::ccp::validateChecksum(int *a1, int *a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  if ((unint64_t)a2 + v3 > a3 || (unint64_t)(a1 + 8) > a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x130);
    MEMORY[0x219A21418](exception, error_code, v9);
    goto LABEL_8;
  }
  v5 = checksum(a2, v3);
  result = checksum(a1, 0x20uLL);
  if ((_DWORD)result + v5 != 2 * a1[7])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v10 = shazam::make_error_code((shazam *)0x84);
    MEMORY[0x219A21418](exception, v10, v11);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C41A4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void shazam::ClusterCmdPktIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gsl::details *ClusterCmdPkt;
  int *v5;
  gsl::details *v6;
  gsl::details *v7;
  uint64_t v8;
  size_t v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  std::vector<char>::size_type v13;
  unint64_t v14;
  std::vector<char>::pointer begin;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::vector<char> v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  gsl::details *v24[3];
  uint64_t v25;
  uint64_t v26;

  v25 = a1;
  v26 = a2;
  ClusterCmdPkt = shazam::ccp::validateFirstClusterCmdPkt((gsl::details *)&v25, v24);
  v6 = v24[0];
  v5 = (int *)v24[1];
  v7 = v24[2];
  v21 = 1342177280;
  v22 = 32;
  v23 = v26;
  if (!v26)
    goto LABEL_28;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, &v21);
  v9 = *((unsigned int *)v7 + 5);
  v10 = *((_DWORD *)v7 + 3);
  v11 = v10 >= 0 && *(int *)v7 >= v9;
  v12 = !v11;
  v13 = v12 ? *((unsigned int *)v7 + 5) : 0;
  std::vector<char>::vector(&v20, v13);
  v14 = 0;
  begin = v20.__begin_;
  v16 = v12 ? v20.__begin_ : (char *)v5;
  v17 = (unint64_t)v6 + (_QWORD)v5;
  while (1)
  {
    shazam::ccp::validateChecksum((int *)v7, v5, v17);
    if (v12)
      memcpy(&begin[v14], v5, *(int *)v7);
    v18 = *(int *)v7;
    v14 += v18;
    if (v14 >= v9)
      break;
    v7 = (gsl::details *)((char *)v5 + v18);
    v5 = (int *)((char *)v5 + v18 + 32);
    shazam::ccp::validateNextClusterCmdPkt(&v25, (int *)v7, v14, v9);
  }
  if (v10 < 0)
    v9 = Unobfuscate(v16, v9);
  ClusterCmdPkt = gsl::make_span<shazam::spectral_peak_compact_t const>((gsl::details *)v16, (gsl::details *)v9);
  if (ClusterCmdPkt == (gsl::details *)-1 || !v19 && ClusterCmdPkt)
LABEL_28:
    gsl::details::terminate(ClusterCmdPkt);
  shazam::iterate_headers<shazam::fp_data_header_extern_legacy>((unint64_t)ClusterCmdPkt, v19, a3);
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
}

void sub_218C41BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t shazam::iterate_headers<shazam::fp_data_header_extern_legacy>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  gsl::details *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t error_code;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *exception;
  uint64_t v30;
  uint64_t v31;
  int v32;
  gsl::details *v33;
  uint64_t v34;
  int v35;
  gsl::details *subspan;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v38 = a1;
  v39 = a2;
  v4 = shazam::reinterpret_safer<shazam::fp_data_header_extern_legacy const*,0>(&v38);
  if (*(_DWORD *)(v4 + 4) != 0x40000000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x6F);
    MEMORY[0x219A21418](exception, error_code, v24);
    goto LABEL_21;
  }
  v5 = v4;
  v6 = *(unsigned int *)(v4 + 8);
  if (v38 < v6)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    v30 = shazam::make_error_code((shazam *)0x70);
    MEMORY[0x219A21418](exception, v30, v31);
    goto LABEL_21;
  }
  if (v6 <= 0x18)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = shazam::make_error_code((shazam *)0x71);
    MEMORY[0x219A21418](exception, v25, v26);
    goto LABEL_21;
  }
  v7 = v38 - v6;
  if (v7)
  {
    if (v7 > 7 || (v38 & 7) != 0)
      goto LABEL_9;
  }
  v35 = 0x40000000;
  subspan = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v38, 0x18uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  v37 = v9;
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
LABEL_18:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v35);
  v12 = *(unsigned int *)(v5 + 8);
  v13 = 24;
  if (v12 >= 0x19)
  {
    while (1)
    {
      if (v12 - v13 <= 0x17)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        v19 = shazam::make_error_code((shazam *)0x71);
        MEMORY[0x219A21418](exception, v19, v20);
        goto LABEL_21;
      }
      v14 = v39 + v13;
      v15 = v13 + 24;
      v16 = (gsl::details *)*(unsigned int *)(v39 + v13 + 8);
      if (v12 - (v13 + 24) < (unint64_t)v16)
        break;
      v32 = *(_DWORD *)(v14 + 4);
      v33 = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v38, v13 + 24, v16);
      v34 = v17;
      v18 = *(_QWORD *)(a3 + 24);
      if (!v18)
        goto LABEL_18;
      result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v18 + 48))(v18, &v32);
      v13 = v15 + ((*(_DWORD *)(v14 + 8) + 3) & 0xFFFFFFFC);
      v12 = *(unsigned int *)(v5 + 8);
      if (v13 >= v12)
        goto LABEL_16;
    }
    exception = __cxa_allocate_exception(0x20uLL);
    v21 = shazam::make_error_code((shazam *)0x70);
    MEMORY[0x219A21418](exception, v21, v22);
LABEL_21:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
LABEL_16:
  if (v13 != v12)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = shazam::make_error_code((shazam *)0x72);
    MEMORY[0x219A21418](exception, v27, v28);
    goto LABEL_21;
  }
  return result;
}

void sub_218C41EA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t shazam::reinterpret_safer<shazam::fp_data_header_extern_legacy const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0x17uLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C41FD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SHZ_FFT::SHZ_FFT(SHZ_FFT *this, unint64_t a2)
{
  FFT_implementation_apple *v4;
  std::runtime_error *exception;
  size_t __space;

  v4 = (FFT_implementation_apple *)operator new();
  FFT_implementation_apple::FFT_implementation_apple(v4, a2);
  *(_QWORD *)this = v4;
  bzero((char *)this + 8, 0x2100uLL);
  *((_QWORD *)this + 1057) = (char *)this + 8;
  hann_window::hann_window((char *)this + 8464, a2, 1);
  __space = 8448;
  if (!std::align(0x20uLL, 0x800uLL, (void **)this + 1057, &__space))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to align fft buffer");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

void sub_218C420D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  void *v3;
  void *v5;
  uint64_t v6;

  __cxa_free_exception(v3);
  v5 = *v2;
  if (*v2)
  {
    v1[1059] = (uint64_t)v5;
    operator delete(v5);
  }
  v6 = *v1;
  *v1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  _Unwind_Resume(a1);
}

uint64_t SHZ_FFT::complexform(uint64_t a1, float *a2, uint64_t a3)
{
  float v5;

  v5 = hann_window::half_window((hann_window *)(a1 + 8464), a2, *(float **)(a1 + 8456), 1);
  return (***(uint64_t (****)(_QWORD, _QWORD, uint64_t, float))a1)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8456), a3, v5);
}

void sig_stream::sig_stream(sig_stream *this)
{
  void *v2;

  v2 = malloc_type_aligned_alloc(0x10uLL, 0x100410uLL, 0x33A8F899uLL);
  *(_QWORD *)this = v2;
  bzero(v2, 0x100410uLL);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = -1;
  AlignedRingBuffer<float>::AlignedRingBuffer((uint64_t)this + 32, 1025, 256);
  AlignedRingBuffer<std::complex<float>>::AlignedRingBuffer((uint64_t)this + 96, 1, 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = -1;
  bzero(*(void **)this, 0x100410uLL);
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 2) = 0;
}

void sub_218C42224(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 40);
  if (v3)
  {
    *(_QWORD *)(v1 + 48) = v3;
    operator delete(v3);
  }
  free(*(void **)v1);
  _Unwind_Resume(a1);
}

void sig_stream::reset(sig_stream *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = -1;
  bzero(*(void **)this, 0x100410uLL);
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t sig_stream::now(sig_stream *this)
{
  return *((_QWORD *)this + 1) - 45;
}

uint64_t sig_stream::checkpoint(uint64_t this)
{
  void *exception;
  uint64_t error_code;
  uint64_t v3;

  if (*(_QWORD *)(this + 24) != -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x1F5);
    MEMORY[0x219A21418](exception, error_code, v3);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  *(_QWORD *)(this + 24) = *(_QWORD *)(this + 8);
  *(_DWORD *)(this + 92) = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 156) = *(_DWORD *)(this + 152);
  return this;
}

void sub_218C42324(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sig_stream::rewind(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  void *exception;
  uint64_t error_code;
  uint64_t v7;

  v1 = this[3];
  if (v1 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x1F6);
    MEMORY[0x219A21418](exception, error_code, v7);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  v2 = (uint64_t)this;
  *((_DWORD *)this + 22) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = -1;
  *((_DWORD *)this + 38) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = -1;
  if (v1 < 7)
  {
    this[1] = 0;
    if ((int)v1 < 1)
      goto LABEL_7;
  }
  else
  {
    this[1] = v1 - 7;
    LODWORD(v1) = 7;
  }
  v3 = 0;
  v4 = -(int)v1;
  do
  {
    this = sig_stream::push_frame_max((uint64_t *)v2, (const float *)(*(_QWORD *)(v2 + 80)+ 4 * ((*(int *)(v2 + 36) - 1) & (v4 + v3 + *(_DWORD *)(v2 + 88))) * *(int *)(v2 + 32)), v3);
    ++*(_QWORD *)(v2 + 8);
    ++v3;
  }
  while (v4 + v3);
LABEL_7:
  *(_QWORD *)(v2 + 24) = -1;
  return this;
}

void sub_218C42440(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sig_stream::push_frame_max(uint64_t *this, const float *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v3 = 0;
  v4 = *this;
  v5 = this[1];
  v6 = (float *)(*this + 4100 * v5);
  do
  {
    v6[v3] = a2[v3];
    ++v3;
  }
  while (v3 != 1025);
  v7 = 0;
  v8 = *v6;
  v9 = v6[1];
  do
  {
    v10 = &v6[v7];
    if (v8 <= v9)
      v11 = v9;
    else
      v11 = v8;
    v8 = v9;
    v9 = v10[2];
    if (v11 <= v9)
      v11 = v10[2];
    *v10 = v11;
    ++v7;
  }
  while (v7 != 1023);
  v12 = 0;
  v13 = v4 + 4100 * (v5 - 1);
  v14 = v4 + 4100 * (v5 - 3);
  v15 = v4 + 4100 * (v5 - 6);
  do
  {
    if (a3 >= 1)
    {
      v16 = *(float *)(v13 + 4 * v12);
      if (v16 <= v6[v12])
        v16 = v6[v12];
      *(float *)(v13 + 4 * v12) = v16;
      if (a3 >= 3)
      {
        if (*(float *)(v14 + 4 * v12) > v16)
          v16 = *(float *)(v14 + 4 * v12);
        *(float *)(v14 + 4 * v12) = v16;
        if (a3 >= 6)
        {
          if (*(float *)(v15 + 4 * v12) > v16)
            v16 = *(float *)(v15 + 4 * v12);
          *(float *)(v15 + 4 * v12) = v16;
        }
      }
    }
    ++v12;
  }
  while (v12 != 1025);
  return this;
}

uint64_t sig_stream::get_writable_fft_frame_magnitude(sig_stream *this)
{
  return *((_QWORD *)this + 10) + 4 * ((*((int *)this + 9) - 1) & *((int *)this + 22)) * *((int *)this + 8);
}

uint64_t sig_stream::get_writable_fft_frame_complex(sig_stream *this)
{
  return *((_QWORD *)this + 18) + 8 * ((*((int *)this + 25) - 1) & *((int *)this + 38)) * *((int *)this + 24);
}

uint64_t sig_stream::find_peaks(sig_stream *this, const float *a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  char v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v3 = *a3;
  if (*a3 > 0x3F6)
    return 0;
  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)this + 4100 * (v4 - 48);
  v7 = *(_QWORD *)this + 4100 * (v4 - 52);
  v8 = *(_QWORD *)this + 4100 * (v4 - 44);
  v9 = 4 * v3 + 4100 * (v4 - 48) + *(_QWORD *)this;
  v10 = v9 + 8;
  v11 = (float *)(v9 - 16);
  v12 = v4 - 41;
  while (1)
  {
    v13 = a2[v3];
    if (v13 >= 0.015625)
    {
      v14 = v3 - 1;
      if (v13 >= *(float *)(v6 + 4 * (v3 - 1)))
      {
        v15 = 0;
        v16 = *(float *)(v6 + 4 * v3 - 12);
        if (v16 <= *(float *)(v6 + 4 * (v3 + 1)))
          v16 = *(float *)(v6 + 4 * (v3 + 1));
        v17 = v11;
        do
        {
          if (v16 <= *(float *)(v10 + 4 * v15))
            v16 = *(float *)(v10 + 4 * v15);
          v18 = *v17;
          v17 -= 3;
          v19 = v18;
          if (v16 <= v18)
            v16 = v19;
          v15 += 3;
        }
        while (v15 < 7);
        if (v13 > v16)
        {
          v20 = 0;
          if (v16 <= *(float *)(v7 + 4 * v14))
            v16 = *(float *)(v7 + 4 * v14);
          if (v16 <= *(float *)(v8 + 4 * v14))
            v16 = *(float *)(v8 + 4 * v14);
          v21 = v5 + 4 * v14;
          v22 = v4 - 55;
          do
          {
            if (v16 <= *(float *)(v21 + 4100 * (v12 + v20)))
              v16 = *(float *)(v21 + 4100 * (v12 + v20));
            if (v16 <= *(float *)(v21 + 4100 * v22))
              v16 = *(float *)(v21 + 4100 * v22);
            v22 -= 7;
            v20 += 7;
          }
          while (v20 < 0x26);
          if (v13 > v16)
            break;
        }
      }
    }
    *a3 = ++v3;
    v10 += 4;
    ++v11;
    if (v3 >= 0x3F7)
      return 0;
  }
  *a3 = v3 + 1;
  return v4 - *((_QWORD *)this + 2) - 45;
}

uint64_t sig_stream::stream_flow(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;

  v4 = *(int *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v4 + 1;
  result = (uint64_t)sig_stream::push_frame_max((uint64_t *)a1, (const float *)(*(_QWORD *)(a1 + 80) + 4 * ((*(int *)(a1 + 36) - 1) & v4) * *(int *)(a1 + 32)), 6);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= 45)
  {
    v7 = (float *)(*(_QWORD *)(a1 + 80)
                 + 4 * ((*(int *)(a1 + 36) - 1) & (*(int *)(a1 + 88) - 46)) * *(int *)(a1 + 32));
    v11 = 10;
    v12 = v7;
    do
    {
      v9 = 0;
      v10 = 0;
      result = sig_stream::find_peaks((sig_stream *)a1, v12, &v11);
      v9 = result;
      v10 = v8;
      if ((v8 & 0xFF00000000) != 0)
        result = std::deque<spectral_peak_t>::emplace_back<std::chrono::duration<long long,std::ratio<1l,125l>> const&,unsigned int const&,float const*&>(a2, (int *)&v9, (unsigned int *)&v10, (uint64_t *)&v12);
    }
    while (v11 < 0x3F7);
    v6 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v6 + 1;
  return result;
}

uint64_t std::deque<spectral_peak_t>::emplace_back<std::chrono::duration<long long,std::ratio<1l,125l>> const&,unsigned int const&,float const*&>(_QWORD *a1, int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  shazam *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v8 = a1[1];
  v9 = a1[2];
  v10 = ((v9 - v8) << 6) - 1;
  if (v9 == v8)
    v10 = 0;
  if (v10 == a1[5] + a1[4])
  {
    std::deque<spectral_peak_t>::__add_back_capacity(a1);
    v8 = a1[1];
    v9 = a1[2];
  }
  if (v9 == v8)
  {
    v12 = 0;
  }
  else
  {
    v11 = a1[5] + a1[4];
    v12 = (shazam *)(*(_QWORD *)(v8 + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
  }
  spectral_peak_t::spectral_peak_t(v12, *a2, *a3, *a4);
  v13 = a1[4];
  v14 = a1[5] + 1;
  a1[5] = v14;
  v15 = v13 + v14;
  v16 = a1[1];
  v17 = (_QWORD *)(v16 + 8 * (v15 >> 9));
  v18 = *v17 + 8 * (v15 & 0x1FF);
  if (a1[2] == v16)
    v18 = 0;
  if (v18 == *v17)
    v18 = *(v17 - 1) + 4096;
  return v18 - 8;
}

uint64_t AlignedRingBuffer<float>::AlignedRingBuffer(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  void *v5;
  void *exception;
  uint64_t error_code;
  uint64_t v9;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  std::vector<float>::vector((_QWORD *)(a1 + 8), a3 * a2 + 3);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16) - v4;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = std::align(0x10uLL, 4uLL, (void **)(a1 + 40), (size_t *)(a1 + 32));
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x200);
    MEMORY[0x219A21418](exception, error_code, v9);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return a1;
}

void sub_218C42984(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void *v5;

  __cxa_free_exception(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_218C42A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AlignedRingBuffer<std::complex<float>>::AlignedRingBuffer(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  void *v5;
  void *exception;
  uint64_t error_code;
  uint64_t v9;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  std::vector<std::complex<float>>::vector((_QWORD *)(a1 + 8), a3 * a2 + 1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16) - v4;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = std::align(0x10uLL, 8uLL, (void **)(a1 + 40), (size_t *)(a1 + 32));
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x200);
    MEMORY[0x219A21418](exception, error_code, v9);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return a1;
}

void sub_218C42AE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void *v5;

  __cxa_free_exception(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::complex<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_218C42B70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<spectral_peak_t>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<spectral_peak_t *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<spectral_peak_t *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<spectral_peak_t *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<spectral_peak_t *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_218C42E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<spectral_peak_t *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<spectral_peak_t *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t flatten_and_sort@<X0>(char ***a1@<X0>, uint64_t a2@<X8>)
{
  char **v4;
  char **v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  char **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v8 = *v4;
      v7 = v4[1];
      v4 += 3;
      v6 += (v7 - v8) >> 3;
    }
    while (v4 != v5);
  }
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve((void **)a2, v6);
  v10 = *a1;
  v9 = a1[1];
  while (v10 != v9)
  {
    std::vector<spectral_peak_t>::__insert_with_size[abi:ne180100]<std::__wrap_iter<spectral_peak_t const*>,std::__wrap_iter<spectral_peak_t const*>>(a2, *(_QWORD *)(a2 + 8), *v10, v10[1], (v10[1] - *v10) >> 3);
    v10 += 3;
  }
  v11 = *(uint64_t **)(a2 + 8);
  v12 = 126 - 2 * __clz(((uint64_t)v11 - *(_QWORD *)a2) >> 3);
  if (v11 == *(uint64_t **)a2)
    v13 = 0;
  else
    v13 = v12;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>(*(_QWORD *)a2, v11, (uint64_t)&v15, v13, 1);
}

void sub_218C43458(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<spectral_peak_t>::__insert_with_size[abi:ne180100]<std::__wrap_iter<spectral_peak_t const*>,std::__wrap_iter<spectral_peak_t const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<spectral_peak_t>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_218C4364C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<spectral_peak_t>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  uint64_t *v20;
  char v21;
  BOOL v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *((_DWORD *)a2 - 2);
        v18 = v23 == *(_DWORD *)v9;
        v24 = v23 < *(_DWORD *)v9;
        if (v18)
          v24 = *((unsigned __int16 *)a2 - 2) < *(unsigned __int16 *)(v9 + 4);
        if (v24)
        {
          v25 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(a2 - 1);
          *(a2 - 1) = v25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)v9, (unsigned int *)(v9 + 8), a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(v9, (uint64_t *)(v9 + 8), (uint64_t *)(v9 + 16), a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(v9, v9 + 8, v9 + 16, v9 + 24, (uint64_t)(a2 - 1));
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((_QWORD *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((unsigned int *)v9, (int *)a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (unsigned int *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)(v9 + 8 * (v13 >> 1)), (unsigned int *)v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)v9, (unsigned int *)(v9 + 8 * (v13 >> 1)), a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)(v9 + 8), v15 - 2, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)(v9 + 16), (unsigned int *)(v9 + 8 + 8 * v14), a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)v15 - 1, v15, (uint64_t *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(_DWORD *)(v9 - 8);
          v18 = v17 == *(_DWORD *)v9;
          v19 = v17 < *(_DWORD *)v9;
          if (v18)
            v19 = *(unsigned __int16 *)(v9 - 4) < *(unsigned __int16 *)(v9 + 4);
          if (!v19)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,spectral_peak_t *,std::__less<void,void> &>((unsigned int *)v9, (unint64_t)a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,spectral_peak_t *,std::__less<void,void> &>((uint64_t *)v9, (unint64_t)a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(v9, (uint64_t)v20);
          v9 = (uint64_t)(v20 + 1);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t)(v20 + 1), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v20 + 1);
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,spectral_peak_t *>(v9, a2, a2, a3);
        return result;
    }
  }
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  BOOL v16;
  _QWORD *v17;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = *((_DWORD *)v4 + 2);
        v6 = *(_DWORD *)v4;
        v7 = *((unsigned __int16 *)v4 + 6);
        v8 = *((unsigned __int16 *)v4 + 2);
        v4 = v2;
        v9 = v7 < v8;
        v10 = v5 == v6;
        v11 = v5 < v6;
        if (!v10)
          v9 = v11;
        if (v9)
        {
          v12 = *v4;
          v13 = v3;
          while (1)
          {
            v14 = (char *)result + v13;
            *(_QWORD *)((char *)result + v13 + 8) = *(_QWORD *)((char *)result + v13);
            if (!v13)
              break;
            v15 = *((_DWORD *)v14 - 2);
            v16 = *((unsigned __int16 *)v14 - 2) > WORD2(v12);
            if (v15 != (_DWORD)v12)
              v16 = v15 > v12;
            v13 -= 8;
            if (!v16)
            {
              v17 = (_QWORD *)((char *)result + v13 + 8);
              goto LABEL_14;
            }
          }
          v17 = result;
LABEL_14:
          *v17 = v12;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(unsigned int *result, int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  if (result != (unsigned int *)a2)
  {
    while (result + 2 != (unsigned int *)a2)
    {
      v2 = result[2];
      v3 = *result;
      v4 = *((unsigned __int16 *)result + 6);
      v5 = *((unsigned __int16 *)result + 2);
      result += 2;
      v6 = v4 < v5;
      v7 = v2 == v3;
      v8 = v2 < v3;
      if (!v7)
        v6 = v8;
      if (v6)
      {
        v9 = *(_QWORD *)result;
        v10 = result;
        do
        {
          v11 = v10;
          v12 = *((_QWORD *)v10 - 1);
          v10 -= 2;
          *(_QWORD *)v11 = v12;
          v13 = *(v11 - 4);
          v14 = *((unsigned __int16 *)v11 - 6) > WORD2(v9);
          if (v13 != (_DWORD)v9)
            v14 = v13 > v9;
        }
        while (v14);
        *(_QWORD *)v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(uint64_t *a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;

  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 2);
  v5 = v4 < *((unsigned __int16 *)a1 + 2);
  if (*a2 != *(_DWORD *)a1)
    v5 = *a2 < *(_DWORD *)a1;
  v6 = *((unsigned __int16 *)a3 + 2) < v4;
  v7 = *(_DWORD *)a3 == v3;
  v8 = *(_DWORD *)a3 < v3;
  if (v7)
    v9 = v6;
  else
    v9 = v8;
  if (v5)
  {
    v10 = *a1;
    if (v9)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v10;
    v14 = *(_DWORD *)a3 < v10;
    if (*(_DWORD *)a3 == (_DWORD)v10)
      v14 = *((unsigned __int16 *)a3 + 2) < WORD2(v10);
    if (!v14)
      return 1;
    *(_QWORD *)a2 = *a3;
    *a3 = v10;
    return 2;
  }
  if (v9)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *a3;
    *a3 = v11;
    v12 = *a2 < *(_DWORD *)a1;
    if (*a2 == *(_DWORD *)a1)
      v12 = *((unsigned __int16 *)a2 + 2) < *((unsigned __int16 *)a1 + 2);
    if (!v12)
      return 1;
    v13 = *a1;
    *a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v13;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,spectral_peak_t *,std::__less<void,void> &>(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  BOOL v21;

  v2 = *(_QWORD *)a1;
  v3 = (unsigned __int16)WORD2(*(_QWORD *)a1);
  v4 = *(_DWORD *)(a2 - 8);
  v5 = *(unsigned __int16 *)(a2 - 4) > v3;
  v6 = v4 == *(_QWORD *)a1;
  v7 = v4 > *(_QWORD *)a1;
  if (!v6)
    v5 = v7;
  if (v5)
  {
    v8 = a1;
    do
    {
      v9 = v8[2];
      v8 += 2;
      v10 = v9 > v2;
      if (v9 == (_DWORD)v2)
        v10 = *((unsigned __int16 *)v8 + 2) > v3;
    }
    while (!v10);
  }
  else
  {
    v11 = a1 + 2;
    do
    {
      v8 = v11;
      if ((unint64_t)v11 >= a2)
        break;
      v12 = *v11;
      v13 = *((unsigned __int16 *)v8 + 2) > v3;
      v6 = v12 == (_DWORD)v2;
      v14 = v12 > v2;
      if (!v6)
        v13 = v14;
      v11 = v8 + 2;
    }
    while (!v13);
  }
  if ((unint64_t)v8 < a2)
  {
    do
    {
      v15 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      v16 = v15 > v2;
      if (v15 == (_DWORD)v2)
        v16 = *(unsigned __int16 *)(a2 + 4) > v3;
    }
    while (v16);
  }
  while ((unint64_t)v8 < a2)
  {
    v17 = *(_QWORD *)v8;
    *(_QWORD *)v8 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v17;
    do
    {
      v18 = v8[2];
      v8 += 2;
      v19 = v18 > v2;
      if (v18 == (_DWORD)v2)
        v19 = *((unsigned __int16 *)v8 + 2) > v3;
    }
    while (!v19);
    do
    {
      v20 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      v21 = v20 > v2;
      if (v20 == (_DWORD)v2)
        v21 = *(unsigned __int16 *)(a2 + 4) > v3;
    }
    while (v21);
  }
  if (v8 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v8 - 1);
  *((_QWORD *)v8 - 1) = v2;
  return v8;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,spectral_peak_t *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  _BOOL4 v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  _BOOL4 v21;

  v2 = 0;
  v3 = *a1;
  v4 = (unsigned __int16)WORD2(*a1);
  do
  {
    v5 = a1[v2 + 1];
    v6 = WORD2(a1[v2 + 1]) < v4;
    v7 = v5 == (_DWORD)v3;
    v8 = v5 < v3;
    if (!v7)
      v6 = v8;
    ++v2;
  }
  while (v6);
  v9 = &a1[v2];
  v10 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if ((unint64_t)v9 >= a2)
        break;
      v13 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      v14 = v13 < v3;
      if (v13 == (_DWORD)v3)
        v14 = *(unsigned __int16 *)(a2 + 4) < v4;
    }
    while (!v14);
  }
  else
  {
    do
    {
      v11 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      v12 = v11 < v3;
      if (v11 == (_DWORD)v3)
        v12 = *(unsigned __int16 *)(a2 + 4) < v4;
    }
    while (!v12);
  }
  if ((unint64_t)v9 < a2)
  {
    v15 = v9;
    v16 = a2;
    do
    {
      v17 = *v15;
      *v15 = *(_QWORD *)v16;
      *(_QWORD *)v16 = v17;
      do
      {
        v18 = *((_DWORD *)v15++ + 2);
        v19 = v18 < v3;
        if (v18 == (_DWORD)v3)
          v19 = *((unsigned __int16 *)v15 + 2) < v4;
      }
      while (v19);
      do
      {
        v20 = *(_DWORD *)(v16 - 8);
        v16 -= 8;
        v21 = v20 < v3;
        if (v20 == (_DWORD)v3)
          v21 = *(unsigned __int16 *)(v16 + 4) < v4;
      }
      while (!v21);
    }
    while ((unint64_t)v15 < v16);
    v10 = v15 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v3;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  _QWORD *v20;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      v7 = v6 == *(_DWORD *)a1;
      v8 = v6 < *(_DWORD *)a1;
      if (v7)
        v8 = *(unsigned __int16 *)(a2 - 4) < *(unsigned __int16 *)(a1 + 4);
      if (v8)
      {
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)a1, (unsigned int *)(a1 + 8), (uint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v10 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)a1, (unsigned int *)(a1 + 8), (uint64_t *)(a1 + 16));
      v11 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_DWORD *)v11 < *(_DWORD *)v10;
    if (*(_DWORD *)v11 == *(_DWORD *)v10)
      v14 = *(unsigned __int16 *)(v11 + 4) < *(unsigned __int16 *)(v10 + 4);
    if (v14)
    {
      v15 = *(_QWORD *)v11;
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(a1 + v16 + 24) = *(_QWORD *)(a1 + v16 + 16);
        if (v16 == -16)
          break;
        v18 = *(_DWORD *)(v17 + 8);
        v19 = *(unsigned __int16 *)(v17 + 12) > WORD2(v15);
        if (v18 != (_DWORD)v15)
          v19 = v18 > v15;
        v16 -= 8;
        if (!v19)
        {
          v20 = (_QWORD *)(a1 + v16 + 24);
          goto LABEL_18;
        }
      }
      v20 = (_QWORD *)a1;
LABEL_18:
      *v20 = v15;
      if (++v13 == 8)
        return v11 + 8 == a2;
    }
    v10 = v11;
    v12 += 8;
    v11 += 8;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((uint64_t *)a1, (unsigned int *)a2, a3);
  v9 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
    v9 = *((unsigned __int16 *)a4 + 2) < *((unsigned __int16 *)a3 + 2);
  if (v9)
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    v11 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
      v11 = *((unsigned __int16 *)a3 + 2) < *((unsigned __int16 *)a2 + 2);
    if (v11)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1)
        v13 = *((unsigned __int16 *)a2 + 2) < *(unsigned __int16 *)(a1 + 4);
      if (v13)
      {
        v14 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(a1, (uint64_t *)a2, (uint64_t *)a3, (uint64_t *)a4);
  v11 = *(_DWORD *)a5 < *(_DWORD *)a4;
  if (*(_DWORD *)a5 == *(_DWORD *)a4)
    v11 = *(unsigned __int16 *)(a5 + 4) < *(unsigned __int16 *)(a4 + 4);
  if (v11)
  {
    v12 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v12;
    v13 = *(_DWORD *)a4 < *(_DWORD *)a3;
    if (*(_DWORD *)a4 == *(_DWORD *)a3)
      v13 = *(unsigned __int16 *)(a4 + 4) < *(unsigned __int16 *)(a3 + 4);
    if (v13)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = *(_DWORD *)a3 < *(_DWORD *)a2;
      if (*(_DWORD *)a3 == *(_DWORD *)a2)
        v15 = *(unsigned __int16 *)(a3 + 4) < *(unsigned __int16 *)(a2 + 4);
      if (v15)
      {
        v16 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v16;
        v17 = *(_DWORD *)a2 < *(_DWORD *)a1;
        if (*(_DWORD *)a2 == *(_DWORD *)a1)
          v17 = *(unsigned __int16 *)(a2 + 4) < *(unsigned __int16 *)(a1 + 4);
        if (v17)
        {
          v18 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v18;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,spectral_peak_t *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 3;
    if ((uint64_t)a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 8 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_DWORD *)v14 < *(_DWORD *)a1;
        if (*(_DWORD *)v14 == *(_DWORD *)a1)
          v15 = *((unsigned __int16 *)v14 + 2) < *(unsigned __int16 *)(a1 + 4);
        if (v15)
        {
          v16 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(a1, a4, v9, (uint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 1;
      do
      {
        v19 = *(_QWORD *)a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>((_QWORD *)a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(a1, (uint64_t)(v20 + 1), a4, ((uint64_t)v20 - a1 + 8) >> 3);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        v10 = *(_DWORD *)v8;
      }
      else
      {
        v10 = *((_DWORD *)v8 + 2);
        v11 = *((unsigned __int16 *)v8 + 2) < *((unsigned __int16 *)v8 + 6);
        if (*(_DWORD *)v8 != v10)
          v11 = *(_DWORD *)v8 < v10;
        if (v11)
        {
          ++v8;
          v7 = v9;
        }
        else
        {
          v10 = *(_DWORD *)v8;
        }
      }
      v12 = v10 == *(_DWORD *)a4;
      v13 = v10 < *(_DWORD *)a4;
      if (v12)
        v13 = *((unsigned __int16 *)v8 + 2) < *((unsigned __int16 *)a4 + 2);
      if (!v13)
      {
        v14 = *a4;
        v15 = (unsigned __int16)WORD2(*a4);
        do
        {
          v16 = a4;
          a4 = v8;
          *v16 = *v8;
          if (v5 < v7)
            break;
          v17 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 8 * v17);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v18 = *(_DWORD *)v8;
            v7 = v17;
          }
          else
          {
            v18 = *((_DWORD *)v8 + 2);
            v19 = *((unsigned __int16 *)v8 + 2) < *((unsigned __int16 *)v8 + 6);
            if (*(_DWORD *)v8 != v18)
              v19 = *(_DWORD *)v8 < v18;
            if (v19)
            {
              ++v8;
            }
            else
            {
              v18 = *(_DWORD *)v8;
              v7 = v17;
            }
          }
          v20 = *((unsigned __int16 *)v8 + 2) < v15;
          v12 = v18 == (_DWORD)v14;
          v21 = v18 < v14;
          if (!v12)
            v20 = v21;
        }
        while (!v20);
        *a4 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3 + 1];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = *((_DWORD *)v6 + 2);
      v10 = *(_DWORD *)v6 < v9;
      if (*(_DWORD *)v6 == v9)
        v10 = *((unsigned __int16 *)v6 + 2) < *((unsigned __int16 *)v6 + 6);
      if (v10)
      {
        ++v6;
        v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unsigned int v7;
  _BOOL4 v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  BOOL v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (unint64_t *)(result + 8 * v4);
    v7 = *(_DWORD *)(a2 - 8);
    v6 = (unint64_t *)(a2 - 8);
    v8 = *(_DWORD *)v5 < v7;
    if (*(_DWORD *)v5 == v7)
      v8 = *((unsigned __int16 *)v5 + 2) < *((unsigned __int16 *)v6 + 2);
    if (v8)
    {
      v9 = *v6;
      v10 = (unsigned __int16)WORD2(*v6);
      do
      {
        v11 = v6;
        v6 = v5;
        *v11 = *v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (unint64_t *)(result + 8 * v4);
        v12 = *(_DWORD *)v5 < v9;
        if (*(_DWORD *)v5 == (_DWORD)v9)
          v12 = *((unsigned __int16 *)v5 + 2) < v10;
      }
      while (v12);
      *v6 = v9;
    }
  }
  return result;
}

_QWORD *hann_window::hann_window(_QWORD *a1, float *a2, int a3)
{
  float **v6;
  vDSP_Length v7;
  vDSP_Length v8;

  v6 = (float **)std::vector<float>::vector(a1, (unint64_t)a2 + 2);
  v6[3] = a2;
  if (a3)
    v7 = 0;
  else
    v7 = (vDSP_Length)a2;
  if (a3 == 1)
    v8 = (vDSP_Length)a2 + 1;
  else
    v8 = v7;
  vDSP_hann_window(*v6, v8, 0);
  return a1;
}

void sub_218C4475C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float hann_window::half_window(hann_window *this, float *a2, float *a3, uint64_t a4)
{
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float result;

  v4 = ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2) - a4;
  if (v4 >= *((_QWORD *)this + 3))
    v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = (float *)(*(_QWORD *)this + 4 * a4);
    do
    {
      v6 = *a2++;
      v7 = v6;
      v8 = *v5++;
      result = v7 * v8;
      *a3++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t unobfuscate(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *a4 = a3;
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *a4;
      v7 = 73;
      do
      {
        if (v6 >= 0)
          v6 *= 2;
        else
          v6 = (2 * v6) ^ 0x1B;
        --v7;
      }
      while (v7);
      v8 = 73;
      v9 = v6;
      do
      {
        if (v9 >= 0)
          v9 *= 2;
        else
          v9 = (2 * v9) ^ 0x1B;
        --v8;
      }
      while (v8);
      *a4 = v9;
      v10 = v5 ^ v6;
      v11 = *(_QWORD *)(result + 8 * v4);
      *(_QWORD *)(result + 8 * v4++) = v10 ^ ((v11 << ((v9 & 0x1Fu) + 1)) | (v11 >> (v9 & 0x1F ^ 0x3F)));
      v5 = v11;
    }
    while (v4 != a2);
  }
  return result;
}

size_t Unobfuscate(char *a1, size_t a2)
{
  size_t v2;
  unint64_t v5;

  v2 = a2;
  v5 = 0;
  unobfuscate((uint64_t)a1, a2 >> 3, 0x57F8FEF4AB2432FFuLL, &v5);
  v2 -= 8;
  memmove(a1, a1 + 8, v2);
  return v2;
}

uint64_t shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  float v16;
  unsigned int v17;
  BOOL v18;
  void *exception;
  uint64_t error_code;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28[3];
  void *__p;
  void *v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  void **v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v33 = 0;
  std::vector<std::vector<spectral_peak_t>>::resize((uint64_t *)(a1 + 32), 4uLL);
  v32 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  memset(v28, 0, sizeof(v28));
  v5 = (__int128 *)operator new(0x30uLL);
  *(_QWORD *)v5 = &off_24D9B74A0;
  *((_QWORD *)v5 + 1) = a1;
  *((_QWORD *)v5 + 2) = &v33;
  *((_QWORD *)v5 + 3) = &v32;
  *((_QWORD *)v5 + 4) = v28;
  *((_QWORD *)v5 + 5) = &__p;
  v37 = v5;
  shazam::packed_signature_view::headers(a2, (uint64_t)&v35);
  v6 = v37;
  if (v37 == &v35)
  {
    v7 = 4;
    v6 = &v35;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_6:
  if (v33 - 5 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x6E);
    MEMORY[0x219A21418](exception, error_code, v22);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (__p == v30)
  {
    std::vector<std::vector<spectral_peak_t>>::resize(v4, v33);
  }
  else
  {
    shazam::parse_ancient_peaks((int **)&__p, v28, 0x7FFFFFFF, *(_BYTE *)(a1 + 20), &v35);
    std::vector<std::vector<spectral_peak_t>>::__vdeallocate(v4);
    *(_OWORD *)(a1 + 32) = v35;
    *(_QWORD *)(a1 + 48) = v36;
    v36 = 0;
    v34 = (void **)&v35;
    v35 = 0uLL;
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v34);
  }
  v8 = *(_QWORD **)(a1 + 32);
  v9 = *(_QWORD **)(a1 + 40);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = v8[1];
      if (*v8 != v11)
      {
        v12 = *(_DWORD *)(v11 - 8);
        if (v10 <= v12)
          v10 = v12;
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  *(_DWORD *)(a1 + 24) = v10;
  *(float *)&v13 = (float)((float)*(unint64_t *)(a1 + 8) / (float)*(unsigned int *)(a1 + 16)) * 125.0;
  v14 = (__PAIR64__(*(float *)&v13, v13) - COERCE_UNSIGNED_INT((float)*(float *)&v13)) >> 32;
  v15 = *(float *)&v13 - (float)v14;
  v16 = (float)(v14 + 1) - *(float *)&v13;
  v17 = v14;
  if (v15 >= v16)
  {
    v17 = v14 + 1;
    if (v16 >= v15)
    {
      if ((v14 & 1) != 0)
        v17 = v14 + 1;
      else
        v17 = v14;
    }
  }
  v18 = v17 > 0x1E || v10 == 0;
  if (!v18 && !*(_QWORD *)a1)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    v26 = shazam::make_error_code((shazam *)0x12E);
    MEMORY[0x219A21418](v23, v26, v27);
LABEL_35:
    __cxa_throw(v23, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (v17 < v10)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    v24 = shazam::make_error_code((shazam *)0xCB);
    MEMORY[0x219A21418](v23, v24, v25);
    goto LABEL_35;
  }
  *(_QWORD *)&v35 = v28;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_218C44BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  a19 = &a10;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t shazam::find_last_peak_tick(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = v1[1];
    if (*v1 != v4)
    {
      v5 = *(_DWORD *)(v4 - 8);
      if (result <= v5)
        result = v5;
      else
        result = result;
    }
    v1 += 3;
  }
  while (v1 != v2);
  return result;
}

uint64_t *shazam::density_filter<spectral_peak_t>::operator<<(uint64_t *a1, unsigned int *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *exception;
  uint64_t error_code;
  uint64_t v24;

  v4 = (char **)a1[1];
  v5 = v4[1];
  v6 = *a2;
  if (*v4 != v5)
  {
    v7 = *((_DWORD *)v5 - 2);
    if (v7 == (_DWORD)v6
      && *((unsigned __int16 *)v5 - 2) == *((unsigned __int16 *)a2 + 2)
      && *((unsigned __int16 *)v5 - 1) == *((unsigned __int16 *)a2 + 3))
    {
      return a1;
    }
    if (v6 < v7)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      error_code = shazam::make_error_code((shazam *)0xC8);
      MEMORY[0x219A21418](exception, error_code, v24);
      __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
    }
  }
  if (a1[3] <= v6)
  {
    do
    {
      shazam::density_filter<spectral_peak_t>::flush(a1);
      v8 = a1[3] + 256;
      a1[3] = v8;
    }
    while (v8 <= *a2);
    v4 = (char **)a1[1];
    v5 = v4[1];
  }
  v9 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v9)
  {
    v11 = (v5 - *v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(v4 + 2), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *(_QWORD *)a2;
    v10 = v16 + 8;
    v19 = *v4;
    v18 = v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = *v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v10 = v5 + 8;
  }
  v4[1] = v10;
  return a1;
}

void sub_218C44E60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::basic_signature<(shazam::signature_density)24>::basic_signature(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  float v16;
  unsigned int v17;
  BOOL v18;
  void *exception;
  uint64_t error_code;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28[3];
  void *__p;
  void *v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  void **v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v33 = 0;
  std::vector<std::vector<spectral_peak_t>>::resize((uint64_t *)(a1 + 32), 4uLL);
  v32 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  memset(v28, 0, sizeof(v28));
  v5 = (__int128 *)operator new(0x30uLL);
  *(_QWORD *)v5 = &off_24D9B74F8;
  *((_QWORD *)v5 + 1) = a1;
  *((_QWORD *)v5 + 2) = &v33;
  *((_QWORD *)v5 + 3) = &v32;
  *((_QWORD *)v5 + 4) = v28;
  *((_QWORD *)v5 + 5) = &__p;
  v37 = v5;
  shazam::packed_signature_view::headers(a2, (uint64_t)&v35);
  v6 = v37;
  if (v37 == &v35)
  {
    v7 = 4;
    v6 = &v35;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_6:
  if (v33 - 5 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x6E);
    MEMORY[0x219A21418](exception, error_code, v22);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (__p == v30)
  {
    std::vector<std::vector<spectral_peak_t>>::resize(v4, v33);
  }
  else
  {
    shazam::parse_ancient_peaks((int **)&__p, v28, 24, *(_BYTE *)(a1 + 20), &v35);
    std::vector<std::vector<spectral_peak_t>>::__vdeallocate(v4);
    *(_OWORD *)(a1 + 32) = v35;
    *(_QWORD *)(a1 + 48) = v36;
    v36 = 0;
    v34 = (void **)&v35;
    v35 = 0uLL;
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v34);
  }
  v8 = *(_QWORD **)(a1 + 32);
  v9 = *(_QWORD **)(a1 + 40);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = v8[1];
      if (*v8 != v11)
      {
        v12 = *(_DWORD *)(v11 - 8);
        if (v10 <= v12)
          v10 = v12;
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  *(_DWORD *)(a1 + 24) = v10;
  *(float *)&v13 = (float)((float)*(unint64_t *)(a1 + 8) / (float)*(unsigned int *)(a1 + 16)) * 125.0;
  v14 = (__PAIR64__(*(float *)&v13, v13) - COERCE_UNSIGNED_INT((float)*(float *)&v13)) >> 32;
  v15 = *(float *)&v13 - (float)v14;
  v16 = (float)(v14 + 1) - *(float *)&v13;
  v17 = v14;
  if (v15 >= v16)
  {
    v17 = v14 + 1;
    if (v16 >= v15)
    {
      if ((v14 & 1) != 0)
        v17 = v14 + 1;
      else
        v17 = v14;
    }
  }
  v18 = v17 > 0x1E || v10 == 0;
  if (!v18 && !*(_QWORD *)a1)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    v26 = shazam::make_error_code((shazam *)0x12E);
    MEMORY[0x219A21418](v23, v26, v27);
LABEL_35:
    __cxa_throw(v23, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (v17 < v10)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    v24 = shazam::make_error_code((shazam *)0xCB);
    MEMORY[0x219A21418](v23, v24, v25);
    goto LABEL_35;
  }
  *(_QWORD *)&v35 = v28;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_218C45194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  a19 = &a10;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t shazam::basic_signature<(shazam::signature_density)16>::basic_signature(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  float v16;
  unsigned int v17;
  BOOL v18;
  void *exception;
  uint64_t error_code;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28[3];
  void *__p;
  void *v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  void **v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v33 = 0;
  std::vector<std::vector<spectral_peak_t>>::resize((uint64_t *)(a1 + 32), 4uLL);
  v32 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  memset(v28, 0, sizeof(v28));
  v5 = (__int128 *)operator new(0x30uLL);
  *(_QWORD *)v5 = &off_24D9B7448;
  *((_QWORD *)v5 + 1) = a1;
  *((_QWORD *)v5 + 2) = &v33;
  *((_QWORD *)v5 + 3) = &v32;
  *((_QWORD *)v5 + 4) = v28;
  *((_QWORD *)v5 + 5) = &__p;
  v37 = v5;
  shazam::packed_signature_view::headers(a2, (uint64_t)&v35);
  v6 = v37;
  if (v37 == &v35)
  {
    v7 = 4;
    v6 = &v35;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_6:
  if (v33 - 5 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x6E);
    MEMORY[0x219A21418](exception, error_code, v22);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (__p == v30)
  {
    std::vector<std::vector<spectral_peak_t>>::resize(v4, v33);
  }
  else
  {
    shazam::parse_ancient_peaks((int **)&__p, v28, 16, *(_BYTE *)(a1 + 20), &v35);
    std::vector<std::vector<spectral_peak_t>>::__vdeallocate(v4);
    *(_OWORD *)(a1 + 32) = v35;
    *(_QWORD *)(a1 + 48) = v36;
    v36 = 0;
    v34 = (void **)&v35;
    v35 = 0uLL;
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v34);
  }
  v8 = *(_QWORD **)(a1 + 32);
  v9 = *(_QWORD **)(a1 + 40);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = v8[1];
      if (*v8 != v11)
      {
        v12 = *(_DWORD *)(v11 - 8);
        if (v10 <= v12)
          v10 = v12;
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  *(_DWORD *)(a1 + 24) = v10;
  *(float *)&v13 = (float)((float)*(unint64_t *)(a1 + 8) / (float)*(unsigned int *)(a1 + 16)) * 125.0;
  v14 = (__PAIR64__(*(float *)&v13, v13) - COERCE_UNSIGNED_INT((float)*(float *)&v13)) >> 32;
  v15 = *(float *)&v13 - (float)v14;
  v16 = (float)(v14 + 1) - *(float *)&v13;
  v17 = v14;
  if (v15 >= v16)
  {
    v17 = v14 + 1;
    if (v16 >= v15)
    {
      if ((v14 & 1) != 0)
        v17 = v14 + 1;
      else
        v17 = v14;
    }
  }
  v18 = v17 > 0x1E || v10 == 0;
  if (!v18 && !*(_QWORD *)a1)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    v26 = shazam::make_error_code((shazam *)0x12E);
    MEMORY[0x219A21418](v23, v26, v27);
LABEL_35:
    __cxa_throw(v23, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (v17 < v10)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    v24 = shazam::make_error_code((shazam *)0xCB);
    MEMORY[0x219A21418](v23, v24, v25);
    goto LABEL_35;
  }
  *(_QWORD *)&v35 = v28;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_218C45564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  a19 = &a10;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t *shazam::density_filter<spectral_peak_t>::flush(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;

  v1 = result;
  v2 = (uint64_t *)result[1];
  v4 = *v2;
  v3 = (unint64_t *)v2[1];
  v5 = ((uint64_t)v3 - *v2) >> 3;
  if (v5 - *result > (unint64_t)result[2])
  {
    v6 = v4 + 8 * *result;
    v7 = 126 - 2 * __clz(((uint64_t)v3 - v6) >> 3);
    if (v3 == (unint64_t *)v6)
      v8 = 0;
    else
      v8 = v7;
    std::__introsort<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *,false>(v6, v3, v8, 1);
    std::vector<spectral_peak_t>::resize(v1[1], v1[2] + *v1);
    v9 = (_QWORD *)v1[1];
    v10 = (uint64_t *)v9[1];
    v11 = *v9 + 8 * *v1;
    v12 = 126 - 2 * __clz(((uint64_t)v10 - v11) >> 3);
    if (v10 == (uint64_t *)v11)
      v13 = 0;
    else
      v13 = v12;
    result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>(v11, v10, (uint64_t)&v14, v13, 1);
    v5 = (uint64_t)(*(_QWORD *)(v1[1] + 8) - *(_QWORD *)v1[1]) >> 3;
  }
  *v1 = v5;
  return result;
}

void std::vector<std::vector<spectral_peak_t>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<char>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::~__func()
{
  JUMPOUT(0x219A21574);
}

__n128 std::__function::__func<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D9B74A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9B74A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::operator()(uint64_t a1, __int128 *a2)
{
  double result;
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&result = shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}::operator()((uint64_t *)(a1 + 8), (uint64_t)&v3).n128_u64[0];
  return result;
}

uint64_t std::__function::__func<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::target_type()
{
}

__n128 shazam::basic_signature<(shazam::signature_density)2147483647>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  gsl::details *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const SumoSigInfo *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  const LegacyFatSigInfo *v28;
  _BYTE v29[28];
  void **v30;

  v4 = *a1;
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 1610809407)
  {
    if ((v5 - 1610809408) < 4)
    {
      v13 = (v5 - 1610809408);
      v14 = (uint64_t *)a1[1];
      if (v13 + 1 > (unint64_t)*v14)
        v15 = v13 + 1;
      else
        v15 = *v14;
      *v14 = v15;
      if (*(_QWORD *)(a2 + 8) >= 5uLL)
      {
        v16 = *(_QWORD *)(a2 + 8);
        v17 = (gsl::details *)shazam::reinterpret_safer<shazam::spectral_peak_compact_t const*,0>((_QWORD *)(a2 + 8));
        v18 = *(_QWORD *)(v4 + 32);
        v19 = v18 + 24 * v13;
        v20 = *(void **)v19;
        if (*(_QWORD *)v19)
        {
          *(_QWORD *)(v18 + 24 * v13 + 8) = v20;
          operator delete(v20);
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
        }
        result.n128_u64[0] = *(_QWORD *)v29;
        *(_OWORD *)v19 = *(_OWORD *)v29;
        *(_QWORD *)(v18 + 24 * v13 + 16) = *(_QWORD *)&v29[16];
      }
    }
    else
    {
      v7 = (v5 - 1610809600);
      if (v7 >= 4)
      {
        if (v5 == 1610874935)
        {
          shazam::inflate_basic_sumo_peak_data(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x7FFFFFFF, *(_BYTE *)(v4 + 20), (uint64_t *)v29);
          std::vector<std::vector<spectral_peak_t>>::__vdeallocate((uint64_t *)(v4 + 32));
          *(_OWORD *)(v4 + 32) = *(_OWORD *)v29;
          *(_QWORD *)(v4 + 48) = *(_QWORD *)&v29[16];
          memset(v29, 0, 24);
          v30 = (void **)v29;
          std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v30);
          *(_QWORD *)a1[1] = 4;
        }
      }
      else
      {
        v8 = (uint64_t *)a1[1];
        if (v7 + 1 > (unint64_t)*v8)
          v9 = v7 + 1;
        else
          v9 = *v8;
        *v8 = v9;
        v10 = *(_QWORD *)(a2 + 8);
        if ((unint64_t)v10 >= 8)
        {
          v11 = (char *)shazam::reinterpret_safer<spectral_peak_t const*,0>((_QWORD *)(a2 + 8));
          std::vector<spectral_peak_t>::__assign_with_size[abi:ne180100]<spectral_peak_t const*,spectral_peak_t const*>((char *)(*(_QWORD *)(v4 + 32) + 24 * v7), v11, (uint64_t)&v11[v10 & 0xFFFFFFFFFFFFFFF8], v10 >> 3);
        }
      }
    }
  }
  else if (v5 <= 1610809344)
  {
    switch(v5)
    {
      case 1342177281:
        v27 = shazam::reinterpret_safer<legacy_sig_info const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info(v29, v27);
        break;
      case 1342177282:
        v28 = (const LegacyFatSigInfo *)shazam::reinterpret_safer<LegacyFatSigInfo const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info((shazam::signature_info *)v29, v28);
        break;
      case 1342177283:
        v21 = (const SumoSigInfo *)shazam::reinterpret_safer<SumoSigInfo const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info((shazam::signature_info *)v29, v21);
        break;
      default:
        return result;
    }
    result = *(__n128 *)v29;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)&v29[12];
    *(__n128 *)v4 = result;
  }
  else
  {
    if ((v5 - 1610809345) < 3)
    {
      if (*(_BYTE *)a1[2])
        return result;
      v6 = (v5 - 1610809345);
    }
    else
    {
      if ((v5 - 1610809348) >= 3)
        return result;
      *(_BYTE *)a1[2] = 1;
      v6 = (v5 - 1610809348);
    }
    v22 = (unint64_t *)a1[1];
    if (v6 + 1 > *v22)
      v23 = v6 + 1;
    else
      v23 = *v22;
    *v22 = v23;
    std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::resize((uint64_t *)a1[3], v23);
    std::vector<shazam::signature_header_type>::resize((std::vector<unsigned int> *)a1[4], *(_QWORD *)a1[1]);
    *(_DWORD *)(*(_QWORD *)a1[4] + 4 * v6) = *(_DWORD *)a2;
    v24 = (char *)(*(_QWORD *)a1[3] + 24 * v6);
    v25 = *(_QWORD *)(a2 + 8);
    v26 = (char *)shazam::reinterpret_safer<shazam::ancient_dead_sig_point_t const*,0>((_QWORD *)(a2 + 8));
    std::vector<shazam::ancient_dead_sig_point_t>::__assign_with_size[abi:ne180100]<shazam::ancient_dead_sig_point_t const*,shazam::ancient_dead_sig_point_t const*>(v24, v26, (uint64_t)&v26[v25 & 0xFFFFFFFFFFFFFFF0], v25 >> 4);
  }
  return result;
}

uint64_t shazam::reinterpret_safer<legacy_sig_info const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0x17uLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C46834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<SumoSigInfo const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0x1BuLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C468F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<shazam::spectral_peak_compact_t const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 4uLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C469BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *`anonymous namespace'::decode_peaks@<X0>(gsl::details *a1@<X0>, gsl::details *a2@<X1>, int a3@<W2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  int v5;
  uint64_t v6;
  gsl::details *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  gsl::details *v12;
  int v13;
  gsl::details *v14;
  uint64_t v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int16 v21;
  __int16 v22;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v16[0] = 0;
  v16[1] = (uint64_t)a5;
  if (a3 == 0x7FFFFFFF)
    v5 = -1;
  else
    v5 = a3;
  v6 = 256;
  if (a4 == 15)
    v6 = 211;
  v16[2] = v5;
  v16[3] = v6;
  v7 = gsl::make_span<shazam::spectral_peak_compact_t const>(a1, a2);
  v9 = v8;
  v10 = 0;
  v11 = v8 + 5 * (_QWORD)v7;
  v17 = v8;
  v18 = v11;
  v19 = v8;
  while (v19 != v11)
  {
    v12 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v17);
    v13 = *(unsigned __int8 *)v12;
    if (v13 == 255)
    {
      v10 = *(_DWORD *)((char *)v12 + 1);
    }
    else
    {
      v10 += v13;
      v20 = v10;
      v22 = *(_WORD *)((char *)v12 + 1);
      v21 = *(_WORD *)((char *)v12 + 3);
      shazam::density_filter<spectral_peak_t>::operator<<(v16, &v20);
    }
    v14 = gsl::details::span_iterator<shazam::spectral_peak_compact_t const>::operator++((gsl::details *)&v17);
    if (v17 != v9 || v18 != v11)
      gsl::details::terminate(v14);
  }
  shazam::density_filter<spectral_peak_t>::flush(v16);
  return shazam::density_filter<spectral_peak_t>::flush(v16);
}

void sub_218C46ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  shazam::density_filter<spectral_peak_t>::flush(&a9);
  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<spectral_peak_t const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 7uLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C46BAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<shazam::signature_header_type>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<shazam::signature_header_type>::__append(this, __sz - v2);
  }
}

char *std::vector<spectral_peak_t>::__assign_with_size[abi:ne180100]<spectral_peak_t const*,spectral_peak_t const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<shazam::lmfp<(shazam::fp_type)0>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<spectral_peak_t>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<spectral_peak_t>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_218C46EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<spectral_peak_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<shazam::ancient_dead_sig_point_t>>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<shazam::ancient_dead_sig_point_t>>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<shazam::ancient_dead_sig_point_t>>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<shazam::ancient_dead_sig_point_t>>,std::reverse_iterator<std::vector<shazam::ancient_dead_sig_point_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<spectral_peak_t>>,std::reverse_iterator<std::vector<spectral_peak_t>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t shazam::reinterpret_safer<shazam::ancient_dead_sig_point_t const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0xFuLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C470E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<shazam::ancient_dead_sig_point_t>::__assign_with_size[abi:ne180100]<shazam::ancient_dead_sig_point_t const*,shazam::ancient_dead_sig_point_t const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<shazam::ancient_dead_sig_point_t>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<shazam::ancient_dead_sig_point_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::__function::__func<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::~__func()
{
  JUMPOUT(0x219A21574);
}

__n128 std::__function::__func<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D9B74F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9B74F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::operator()(uint64_t a1, __int128 *a2)
{
  double result;
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&result = shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}::operator()((uint64_t *)(a1 + 8), (uint64_t)&v3).n128_u64[0];
  return result;
}

uint64_t std::__function::__func<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::target_type()
{
}

__n128 shazam::basic_signature<(shazam::signature_density)24>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  gsl::details *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const SumoSigInfo *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  const LegacyFatSigInfo *v28;
  _BYTE v29[28];
  void **v30;

  v4 = *a1;
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 1610809407)
  {
    if ((v5 - 1610809408) < 4)
    {
      v13 = (v5 - 1610809408);
      v14 = (uint64_t *)a1[1];
      if (v13 + 1 > (unint64_t)*v14)
        v15 = v13 + 1;
      else
        v15 = *v14;
      *v14 = v15;
      if (*(_QWORD *)(a2 + 8) >= 5uLL)
      {
        v16 = *(_QWORD *)(a2 + 8);
        v17 = (gsl::details *)shazam::reinterpret_safer<shazam::spectral_peak_compact_t const*,0>((_QWORD *)(a2 + 8));
        v18 = *(_QWORD *)(v4 + 32);
        v19 = v18 + 24 * v13;
        v20 = *(void **)v19;
        if (*(_QWORD *)v19)
        {
          *(_QWORD *)(v18 + 24 * v13 + 8) = v20;
          operator delete(v20);
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
        }
        result.n128_u64[0] = *(_QWORD *)v29;
        *(_OWORD *)v19 = *(_OWORD *)v29;
        *(_QWORD *)(v18 + 24 * v13 + 16) = *(_QWORD *)&v29[16];
      }
    }
    else
    {
      v7 = (v5 - 1610809600);
      if (v7 >= 4)
      {
        if (v5 == 1610874935)
        {
          shazam::inflate_basic_sumo_peak_data(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 24, *(_BYTE *)(v4 + 20), (uint64_t *)v29);
          std::vector<std::vector<spectral_peak_t>>::__vdeallocate((uint64_t *)(v4 + 32));
          *(_OWORD *)(v4 + 32) = *(_OWORD *)v29;
          *(_QWORD *)(v4 + 48) = *(_QWORD *)&v29[16];
          memset(v29, 0, 24);
          v30 = (void **)v29;
          std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v30);
          *(_QWORD *)a1[1] = 4;
        }
      }
      else
      {
        v8 = (uint64_t *)a1[1];
        if (v7 + 1 > (unint64_t)*v8)
          v9 = v7 + 1;
        else
          v9 = *v8;
        *v8 = v9;
        v10 = *(_QWORD *)(a2 + 8);
        if ((unint64_t)v10 >= 8)
        {
          v11 = (char *)shazam::reinterpret_safer<spectral_peak_t const*,0>((_QWORD *)(a2 + 8));
          std::vector<spectral_peak_t>::__assign_with_size[abi:ne180100]<spectral_peak_t const*,spectral_peak_t const*>((char *)(*(_QWORD *)(v4 + 32) + 24 * v7), v11, (uint64_t)&v11[v10 & 0xFFFFFFFFFFFFFFF8], v10 >> 3);
        }
      }
    }
  }
  else if (v5 <= 1610809344)
  {
    switch(v5)
    {
      case 1342177281:
        v27 = shazam::reinterpret_safer<legacy_sig_info const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info(v29, v27);
        break;
      case 1342177282:
        v28 = (const LegacyFatSigInfo *)shazam::reinterpret_safer<LegacyFatSigInfo const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info((shazam::signature_info *)v29, v28);
        break;
      case 1342177283:
        v21 = (const SumoSigInfo *)shazam::reinterpret_safer<SumoSigInfo const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info((shazam::signature_info *)v29, v21);
        break;
      default:
        return result;
    }
    result = *(__n128 *)v29;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)&v29[12];
    *(__n128 *)v4 = result;
  }
  else
  {
    if ((v5 - 1610809345) < 3)
    {
      if (*(_BYTE *)a1[2])
        return result;
      v6 = (v5 - 1610809345);
    }
    else
    {
      if ((v5 - 1610809348) >= 3)
        return result;
      *(_BYTE *)a1[2] = 1;
      v6 = (v5 - 1610809348);
    }
    v22 = (unint64_t *)a1[1];
    if (v6 + 1 > *v22)
      v23 = v6 + 1;
    else
      v23 = *v22;
    *v22 = v23;
    std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::resize((uint64_t *)a1[3], v23);
    std::vector<shazam::signature_header_type>::resize((std::vector<unsigned int> *)a1[4], *(_QWORD *)a1[1]);
    *(_DWORD *)(*(_QWORD *)a1[4] + 4 * v6) = *(_DWORD *)a2;
    v24 = (char *)(*(_QWORD *)a1[3] + 24 * v6);
    v25 = *(_QWORD *)(a2 + 8);
    v26 = (char *)shazam::reinterpret_safer<shazam::ancient_dead_sig_point_t const*,0>((_QWORD *)(a2 + 8));
    std::vector<shazam::ancient_dead_sig_point_t>::__assign_with_size[abi:ne180100]<shazam::ancient_dead_sig_point_t const*,shazam::ancient_dead_sig_point_t const*>(v24, v26, (uint64_t)&v26[v25 & 0xFFFFFFFFFFFFFFF0], v25 >> 4);
  }
  return result;
}

void std::__function::__func<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::~__func()
{
  JUMPOUT(0x219A21574);
}

__n128 std::__function::__func<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D9B7448;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D9B7448;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::operator()(uint64_t a1, __int128 *a2)
{
  double result;
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&result = shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}::operator()((uint64_t *)(a1 + 8), (uint64_t)&v3).n128_u64[0];
  return result;
}

uint64_t std::__function::__func<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1},std::allocator<shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}>,void ()(shazam::signature_header)>::target_type()
{
}

__n128 shazam::basic_signature<(shazam::signature_density)16>::basic_signature(shazam::packed_signature_view const&)::{lambda(shazam::signature_header)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  gsl::details *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const SumoSigInfo *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  const LegacyFatSigInfo *v28;
  _BYTE v29[28];
  void **v30;

  v4 = *a1;
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 1610809407)
  {
    if ((v5 - 1610809408) < 4)
    {
      v13 = (v5 - 1610809408);
      v14 = (uint64_t *)a1[1];
      if (v13 + 1 > (unint64_t)*v14)
        v15 = v13 + 1;
      else
        v15 = *v14;
      *v14 = v15;
      if (*(_QWORD *)(a2 + 8) >= 5uLL)
      {
        v16 = *(_QWORD *)(a2 + 8);
        v17 = (gsl::details *)shazam::reinterpret_safer<shazam::spectral_peak_compact_t const*,0>((_QWORD *)(a2 + 8));
        v18 = *(_QWORD *)(v4 + 32);
        v19 = v18 + 24 * v13;
        v20 = *(void **)v19;
        if (*(_QWORD *)v19)
        {
          *(_QWORD *)(v18 + 24 * v13 + 8) = v20;
          operator delete(v20);
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
        }
        result.n128_u64[0] = *(_QWORD *)v29;
        *(_OWORD *)v19 = *(_OWORD *)v29;
        *(_QWORD *)(v18 + 24 * v13 + 16) = *(_QWORD *)&v29[16];
      }
    }
    else
    {
      v7 = (v5 - 1610809600);
      if (v7 >= 4)
      {
        if (v5 == 1610874935)
        {
          shazam::inflate_basic_sumo_peak_data(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 16, *(_BYTE *)(v4 + 20), (uint64_t *)v29);
          std::vector<std::vector<spectral_peak_t>>::__vdeallocate((uint64_t *)(v4 + 32));
          *(_OWORD *)(v4 + 32) = *(_OWORD *)v29;
          *(_QWORD *)(v4 + 48) = *(_QWORD *)&v29[16];
          memset(v29, 0, 24);
          v30 = (void **)v29;
          std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v30);
          *(_QWORD *)a1[1] = 4;
        }
      }
      else
      {
        v8 = (uint64_t *)a1[1];
        if (v7 + 1 > (unint64_t)*v8)
          v9 = v7 + 1;
        else
          v9 = *v8;
        *v8 = v9;
        v10 = *(_QWORD *)(a2 + 8);
        if ((unint64_t)v10 >= 8)
        {
          v11 = (char *)shazam::reinterpret_safer<spectral_peak_t const*,0>((_QWORD *)(a2 + 8));
          std::vector<spectral_peak_t>::__assign_with_size[abi:ne180100]<spectral_peak_t const*,spectral_peak_t const*>((char *)(*(_QWORD *)(v4 + 32) + 24 * v7), v11, (uint64_t)&v11[v10 & 0xFFFFFFFFFFFFFFF8], v10 >> 3);
        }
      }
    }
  }
  else if (v5 <= 1610809344)
  {
    switch(v5)
    {
      case 1342177281:
        v27 = shazam::reinterpret_safer<legacy_sig_info const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info(v29, v27);
        break;
      case 1342177282:
        v28 = (const LegacyFatSigInfo *)shazam::reinterpret_safer<LegacyFatSigInfo const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info((shazam::signature_info *)v29, v28);
        break;
      case 1342177283:
        v21 = (const SumoSigInfo *)shazam::reinterpret_safer<SumoSigInfo const*,0>((_QWORD *)(a2 + 8));
        shazam::signature_info::signature_info((shazam::signature_info *)v29, v21);
        break;
      default:
        return result;
    }
    result = *(__n128 *)v29;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)&v29[12];
    *(__n128 *)v4 = result;
  }
  else
  {
    if ((v5 - 1610809345) < 3)
    {
      if (*(_BYTE *)a1[2])
        return result;
      v6 = (v5 - 1610809345);
    }
    else
    {
      if ((v5 - 1610809348) >= 3)
        return result;
      *(_BYTE *)a1[2] = 1;
      v6 = (v5 - 1610809348);
    }
    v22 = (unint64_t *)a1[1];
    if (v6 + 1 > *v22)
      v23 = v6 + 1;
    else
      v23 = *v22;
    *v22 = v23;
    std::vector<std::vector<shazam::ancient_dead_sig_point_t>>::resize((uint64_t *)a1[3], v23);
    std::vector<shazam::signature_header_type>::resize((std::vector<unsigned int> *)a1[4], *(_QWORD *)a1[1]);
    *(_DWORD *)(*(_QWORD *)a1[4] + 4 * v6) = *(_DWORD *)a2;
    v24 = (char *)(*(_QWORD *)a1[3] + 24 * v6);
    v25 = *(_QWORD *)(a2 + 8);
    v26 = (char *)shazam::reinterpret_safer<shazam::ancient_dead_sig_point_t const*,0>((_QWORD *)(a2 + 8));
    std::vector<shazam::ancient_dead_sig_point_t>::__assign_with_size[abi:ne180100]<shazam::ancient_dead_sig_point_t const*,shazam::ancient_dead_sig_point_t const*>(v24, v26, (uint64_t)&v26[v25 & 0xFFFFFFFFFFFFFFF0], v25 >> 4);
  }
  return result;
}

void shazam::match_peaks(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void **a5, unsigned int a6, float a7, float a8)
{
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int64_t v20;
  int v21;
  int64_t v22;
  float v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  float *v28;
  unint64_t v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  float *v37;
  char *v38;
  char *v39;
  float *v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;

  v8 = *(_DWORD **)a3;
  v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v9)
  {
    v14 = 0;
    v15 = a8 + 1.0;
    v16 = a7 + 1.0;
    v17 = (float)a4;
    v18 = (float)a6;
    v41 = *(_DWORD **)(a3 + 8);
    v42 = (2 * a6) | 1u;
    v44 = (uint64_t)(a5 + 2);
    do
    {
      v19 = v15 * (float)(*v8 >> 14);
      v20 = llroundf((float)(v19 + v17) - v18);
      if (v14 < a1)
      {
        while (v20 > (uint64_t)((unint64_t)*(unsigned int *)(a2 + 4 * v14) >> 14))
        {
          if (a1 == ++v14)
          {
            v14 = a1;
            goto LABEL_30;
          }
        }
      }
      if (v14 < a1)
      {
        v43 = v8;
        v21 = (int)(float)((float)(*v8 & 0x3FFF) / v16);
        v22 = v20 + v42;
        v23 = (float)v21;
        v24 = v14;
        v45 = v21;
        do
        {
          if (v22 <= (uint64_t)((unint64_t)*(unsigned int *)(a2 + 4 * v24) >> 14))
            break;
          v25 = *(_DWORD *)(a2 + 4 * v24) & 0x3FFF;
          v26 = v25 - v21;
          if (v26 < 0)
            v26 = v21 - (*(_DWORD *)(a2 + 4 * v24) & 0x3FFF);
          if (v26 <= 0xF)
          {
            v27 = (*(_DWORD *)(a2 + 4 * v24) >> 14) - a4;
            v28 = (float *)a5[1];
            v29 = (unint64_t)a5[2];
            if ((unint64_t)v28 >= v29)
            {
              v31 = ((char *)v28 - (_BYTE *)*a5) >> 4;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 60)
                std::vector<char>::__throw_length_error[abi:ne180100]();
              v33 = v29 - (_QWORD)*a5;
              if (v33 >> 3 > v32)
                v32 = v33 >> 3;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
                v34 = 0xFFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>(v44, v34);
              v37 = (float *)&v35[16 * v31];
              *v37 = (float)v27;
              v37[1] = (float)v25;
              v37[2] = v19;
              v37[3] = v23;
              v39 = (char *)*a5;
              v38 = (char *)a5[1];
              v40 = v37;
              if (v38 != *a5)
              {
                do
                {
                  *((_OWORD *)v40 - 1) = *((_OWORD *)v38 - 1);
                  v40 -= 4;
                  v38 -= 16;
                }
                while (v38 != v39);
                v38 = (char *)*a5;
              }
              v30 = v37 + 4;
              *a5 = v40;
              a5[1] = v37 + 4;
              a5[2] = &v35[16 * v36];
              if (v38)
                operator delete(v38);
              v21 = v45;
            }
            else
            {
              *v28 = (float)v27;
              v28[1] = (float)v25;
              v28[2] = v19;
              v28[3] = v23;
              v30 = v28 + 4;
            }
            a5[1] = v30;
          }
          ++v24;
        }
        while (v24 != a1);
        v8 = v43;
        v9 = v41;
      }
LABEL_30:
      ++v8;
    }
    while (v8 != v9);
  }
}

float shazam::thresholdLerp(float *a1, float a2)
{
  if (a2 >= 15.0)
    return a1[15];
  if (a2 <= 1.0)
    return *a1;
  return (float)((float)(a2 - (float)(unint64_t)a2) * a1[(unint64_t)a2 + 1])
       + (float)((float)(1.0 - (float)(a2 - (float)(unint64_t)a2)) * a1[(unint64_t)a2]);
}

uint64_t SpectralOutput::enable(uint64_t a1, int a2, int a3, uint64_t a4, int8x8_t a5)
{
  int8x8_t v5;
  int8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t result;
  std::runtime_error *exception;

  if (a2 <= 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "num_freq_bins must be positive");
    goto LABEL_18;
  }
  if (a2 >= 0x401)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "num_freq_bins must be less than or equal to FFT frame size");
    goto LABEL_18;
  }
  if (a3 <= 7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "callback_frequency_ms must be at least 8");
    goto LABEL_18;
  }
  a5.i32[0] = a2;
  v5 = vcnt_s8(a5);
  v5.i16[0] = vaddlv_u8((uint8x8_t)v5);
  if (v5.i32[0] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "num_freq_bins must be a power of 2");
    goto LABEL_18;
  }
  v5.i32[0] = a3;
  v6 = vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8((uint8x8_t)v6);
  if (v6.i32[0] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "callback_frequency_ms must be a power of 2");
    goto LABEL_18;
  }
  v6.i32[0] = 0x400u / (unsigned __int16)a2;
  v7 = vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  if (v7.i32[0] != 1
    || (v7.i32[0] = a3 >> 3, v8 = (uint8x8_t)vcnt_s8(v7), v8.i16[0] = vaddlv_u8(v8), v8.i32[0] != 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "shazam::log2 is only defined for powers of 2");
LABEL_18:
    __cxa_throw(exception, (struct type_info *)off_24D9B63F8, MEMORY[0x24BEDAAD0]);
  }
  v11 = __clz(0x400u / (unsigned __int16)a2);
  v12 = 31 - v11;
  v13 = 31 - __clz(a3 >> 3);
  SpectralOutput::disable((SpectralOutput *)a1);
  *(_DWORD *)a1 = 0x800000;
  v14 = *(void **)(a1 + 80);
  if (v14)
    bzero(v14, 4 * *(_QWORD *)(a1 + 16) * *(unsigned int *)(a1 + 76));
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = v12;
  *(_DWORD *)(a1 + 24) = ~(-1 << v13);
  *(_DWORD *)(a1 + 4) = 0x80000000 >> v11;
  *(_DWORD *)(a1 + 8) = 0x400u >> v12;
  *(_QWORD *)(a1 + 16) = (1 << (v11 - 21));
  std::function<void ()(float const*,unsigned long)>::operator=((_QWORD *)(a1 + 40), a4);
  v15 = operator new[]();
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  if (result)
    JUMPOUT(0x219A2155CLL);
  return result;
}

void sub_218C481F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
  return result;
}

uint64_t SpectralOutput::disable(SpectralOutput *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24D9B7398;
  v6 = v5;
  std::__function::__value_func<void ()(float const*,unsigned long)>::swap[abi:ne180100](v5, (_QWORD *)this + 5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
    result = MEMORY[0x219A2155C](result, 0x1000C8052888210);
  *((_QWORD *)this + 10) = 0;
  return result;
}

void SpectralOutput::reset(SpectralOutput *this)
{
  void *v2;

  *(_DWORD *)this = 0x800000;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
    bzero(v2, 4 * *((_QWORD *)this + 2) * *((unsigned int *)this + 19));
}

_QWORD *std::function<void ()(float const*,unsigned long)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(float const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(float const*,unsigned long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

BOOL SpectralOutput::is_enabled(SpectralOutput *this)
{
  return *((_QWORD *)this + 4) != 0;
}

BOOL SpectralOutput::should_use_frame(SpectralOutput *this, int a2)
{
  return (*((_DWORD *)this + 6) & a2) == 0;
}

uint64_t SpectralOutput::process_frame(SpectralOutput *this, const float *a2)
{
  SpectralOutput::decimate_magfft(this, a2);
  return std::function<void ()(float const*,unsigned long)>::operator()((uint64_t)this + 40, *((_QWORD *)this + 4), *((_QWORD *)this + 2));
}

void SpectralOutput::decimate_magfft(SpectralOutput *this, const float *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  float v12;
  float v13;

  v2 = *((unsigned int *)this + 2);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v6 = *((unsigned int *)this + 1);
    v7 = *((_DWORD *)this + 22);
    v8 = *((_QWORD *)this + 4);
    do
    {
      if ((int)v6 < 1)
      {
        v10 = 0.0;
      }
      else
      {
        v9 = 0;
        v10 = 0.0;
        do
          v10 = v10 + logf(a2[v9++] + 1.0);
        while (v6 != v9);
      }
      v11 = (int)(float)(v10 * 1477.3) >> v7;
      v12 = (float)v11;
      v13 = *(float *)this;
      if (*(float *)this < (float)v11)
      {
        *(float *)this = v12;
        v13 = (float)v11;
      }
      *(float *)(v8 + 4 * v5++) = v12 / v13;
      a2 += (int)v6;
    }
    while (v5 != v2);
  }
}

uint64_t std::function<void ()(float const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

BOOL SpectralOutput::is_legacy_enabled(SpectralOutput *this)
{
  return *((_QWORD *)this + 10) != 0;
}

uint64_t SpectralOutput::get_frame(SpectralOutput *this, unsigned int a2)
{
  return *((_QWORD *)this + 10) + 4 * (((*((_DWORD *)this + 19) - 1) & a2) << (10 - *((_DWORD *)this + 22)));
}

uint64_t std::__function::__value_func<void ()(float const*,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(float const*,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_218C48744(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<SpectralOutput::disable(void)::$_0,std::allocator<SpectralOutput::disable(void)::$_0>,void ()(float const*,unsigned long)>::~__func()
{
  JUMPOUT(0x219A21574);
}

_QWORD *std::__function::__func<SpectralOutput::disable(void)::$_0,std::allocator<SpectralOutput::disable(void)::$_0>,void ()(float const*,unsigned long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9B7398;
  return result;
}

void std::__function::__func<SpectralOutput::disable(void)::$_0,std::allocator<SpectralOutput::disable(void)::$_0>,void ()(float const*,unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9B7398;
}

uint64_t std::__function::__func<SpectralOutput::disable(void)::$_0,std::allocator<SpectralOutput::disable(void)::$_0>,void ()(float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SpectralOutput::disable(void)::$_0,std::allocator<SpectralOutput::disable(void)::$_0>,void ()(float const*,unsigned long)>::target_type()
{
}

uint64_t shazam::packed_signature_view::packed_signature_view(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  gsl::details *v7;
  uint64_t v8;
  void *exception;
  uint64_t error_code;
  uint64_t v12;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (v6 == 1342177284)
  {
    shazam::ShazamKitHeader::validate(a2, a3);
    v7 = shazam::ShazamKitHeader::pop(a2, a3);
    if (v6 == 1342177284)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      error_code = shazam::make_error_code((shazam *)0x79);
      MEMORY[0x219A21418](exception, error_code, v12);
      __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
    }
  }
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_218C488AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void shazam::packed_signature_view::headers(uint64_t a1, uint64_t a2)
{
  gsl::details *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  void *exception;
  uint64_t error_code;
  uint64_t v11;

  v4 = *(gsl::details **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_DWORD *)shazam::reinterpret_safer<unsigned int const*,0>((_QWORD *)a1);
  if (v6 && *v6 == 629155200)
  {
    shazam::ShazamKitHeaderIterator(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
    v4 = shazam::ShazamKitHeader::pop(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v5 = v7;
  }
  v8 = *(_DWORD *)(a1 + 16);
  switch(v8)
  {
    case 1342177283:
      shazam::SumoHeaderIterator((unint64_t)v4, v5, a2);
      break;
    case 1342177282:
      shazam::FatHeaderIterator((unint64_t)v4, v5, a2);
      break;
    case 1342177280:
      shazam::ClusterCmdPktIterator((uint64_t)v4, v5, a2);
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      error_code = shazam::make_error_code((shazam *)0x66);
      MEMORY[0x219A21418](exception, error_code, v11);
      __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
}

void sub_218C489E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<unsigned int const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 3uLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C48AA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *shazam::get_siginfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  void *exception;
  uint64_t error_code;
  uint64_t v6;
  char v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 13) = 0;
  v7 = 0;
  v8[0] = &off_24D9B73F0;
  v8[1] = a2;
  v8[2] = &v7;
  v9 = v8;
  shazam::packed_signature_view::headers(a1, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v3 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_6:
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x66);
    MEMORY[0x219A21418](exception, error_code, v6);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C48BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::type_from_magic_key(unint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  void *exception;
  uint64_t error_code;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  if (a1 <= 0xF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, error_code, v8);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  v2 = *(_DWORD *)shazam::reinterpret_safer<unsigned int const*,0>(v9);
  v3 = 1342177283;
  if (v2 == -889313920)
    v4 = 1342177282;
  else
    v4 = 1342177280;
  if (v2 != 199615769)
    v3 = v4;
  if (v2 == 629155200)
    return 1342177284;
  else
    return v3;
}

void sub_218C48CD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0,std::allocator<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0>,void ()(shazam::signature_header)>::~__func()
{
  JUMPOUT(0x219A21574);
}

__n128 std::__function::__func<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0,std::allocator<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0>,void ()(shazam::signature_header)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24D9B73F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0,std::allocator<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0>,void ()(shazam::signature_header)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D9B73F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0,std::allocator<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0>,void ()(shazam::signature_header)>::operator()(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  const SumoSigInfo *v5;
  const LegacyFatSigInfo *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v3 = *a2;
  if (*a2 == 1342177283)
  {
    v5 = (const SumoSigInfo *)shazam::reinterpret_safer<SumoSigInfo const*,0>((_QWORD *)a2 + 1);
    shazam::signature_info::signature_info((shazam::signature_info *)v9, v5);
  }
  else if (v3 == 1342177282)
  {
    v6 = (const LegacyFatSigInfo *)shazam::reinterpret_safer<LegacyFatSigInfo const*,0>((_QWORD *)a2 + 1);
    shazam::signature_info::signature_info((shazam::signature_info *)v9, v6);
  }
  else
  {
    if (v3 != 1342177281)
      return result;
    v4 = shazam::reinterpret_safer<legacy_sig_info const*,0>((_QWORD *)a2 + 1);
    shazam::signature_info::signature_info(v9, v4);
  }
  v7 = *(_QWORD *)(a1 + 8);
  result = *(__n128 *)v9;
  *(_OWORD *)(v7 + 12) = *(_OWORD *)&v9[12];
  *(__n128 *)v7 = result;
  **(_BYTE **)(a1 + 16) = 1;
  return result;
}

uint64_t std::__function::__func<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0,std::allocator<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0>,void ()(shazam::signature_header)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0,std::allocator<shazam::get_siginfo(shazam::packed_signature_view const&)::$_0>,void ()(shazam::signature_header)>::target_type()
{
}

void sub_218C48F88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void *v24;
  void *v27;

  a12 = &a23;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a2 == 3)
  {
    objc_msgSend(v24, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v23);
  }
  else
  {
    v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v24, "ConvertException:toError:", v27, v23);
    else
      objc_msgSend(v24, "FillUnknownError:", v23);
  }
  __cxa_end_catch();
  JUMPOUT(0x218C48F6CLL);
}

void sub_218C49044(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218C49248(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11)
{
  uint64_t v11;
  void *v13;

  if (a2 == 3)
  {
    objc_msgSend(a10, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v11);
  }
  else
  {
    v13 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(a10, "ConvertException:toError:", v13, v11);
    else
      objc_msgSend(a10, "FillUnknownError:", v11);
  }
  __cxa_end_catch();
  JUMPOUT(0x218C49224);
}

void sub_218C49304(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218C493B4(void *a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v5;

  if (a2 == 3)
  {
    objc_msgSend(v3, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v2);
  }
  else
  {
    v5 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v3, "ConvertException:toError:", v5, v2);
    else
      objc_msgSend(v3, "FillUnknownError:", v2);
  }
  __cxa_end_catch();
  JUMPOUT(0x218C493A0);
}

void sub_218C49418(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void shazam::crop<(shazam::signature_density)2147483647>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::vector<spectral_peak_t>>::resize(&v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = gsl::make_span<std::vector<shazam::lmfp<(shazam::fp_type)0>>>((gsl::details *)(v8 + v9));
      shazam::crop_band<spectral_peak_t>(v11, v12, v20 + v9, a2, a3);
      ++v10;
      v8 = *(_QWORD *)(a1 + 32);
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v8) >> 3));
  }
  shazam::cropped_info(a1, a2, a3, (uint64_t)&v18);
  DWORD2(v19) = shazam::find_last_peak_tick((uint64_t)&v20);
  v16 = v18;
  v17 = v19;
  v15 = 0;
  v14 = 0uLL;
  std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(&v14, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  v13 = v17;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = v14;
  *(_QWORD *)(a4 + 48) = v15;
  v14 = 0uLL;
  v15 = 0;
  v23 = (void **)&v14;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v23);
  *(_QWORD *)&v18 = &v20;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_218C4982C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a17 = (void **)&a21;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t shazam::Tracker::Tracker(uint64_t a1, int a2, int a3, char a4, float a5)
{
  _DWORD *v6;
  char **v7;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a2;
  *(float *)(a1 + 12) = a5;
  v6 = (_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (char **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = 50;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<float>::resize(a1 + 16, a3);
  std::vector<float>::assign(v7, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2, v6);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * (*(_DWORD *)a1 % *(_DWORD *)(a1 + 8))) = 0;
  return a1;
}

{
  return shazam::Tracker::Tracker(a1, a2, a3, a4, a5);
}

void sub_218C49910(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 128) = v6;
    operator delete(v6);
  }
  shazam::Tracker::Tracker(v3, v2, v1);
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

char *shazam::Tracker::resetWeights(char **this)
{
  _QWORD *v2;
  char *result;

  v2 = this + 2;
  result = std::vector<float>::assign(this + 2, (this[3] - this[2]) >> 2, (_DWORD *)this + 3);
  *(_DWORD *)(*v2 + 4 * (*(_DWORD *)this % *((_DWORD *)this + 2))) = 0;
  return result;
}

_DWORD *shazam::Tracker::resetTime(_DWORD *this)
{
  int v1;

  v1 = this[1];
  *this = v1;
  this[10] = v1;
  return this;
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<float>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t shazam::Tracker::isTracking(int *a1, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  uint64x2_t v13;
  int64x2_t v14;
  int32x2_t v15;
  float v16;
  float *v17;
  float v18;

  v2 = a2 / 125;
  a1[10] = a2 / 125;
  v3 = *a1;
  if (a2 / 125 == (_DWORD)v3)
    return 1;
  v4 = v2;
  v5 = v2 - v3;
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = -v5;
  if (v6 <= 1)
  {
    v7 = (float *)*((_QWORD *)a1 + 2);
    v8 = (float *)*((_QWORD *)a1 + 3);
  }
  else
  {
    v7 = (float *)*((_QWORD *)a1 + 2);
    v8 = (float *)*((_QWORD *)a1 + 3);
    if (v8 - v7 >= v6)
      v9 = v6;
    else
      v9 = v8 - v7;
    if (v9)
    {
      v10 = a1[2];
      v11 = (v9 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v12 = (int64x2_t)xmmword_218C5E9D0;
      v13 = (uint64x2_t)vdupq_n_s64(v9 - 1);
      v14 = vdupq_n_s64(2uLL);
      do
      {
        v15 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)v12));
        if ((v15.i8[0] & 1) != 0)
          v7[v4 % v10] = 0.0;
        if ((v15.i8[4] & 1) != 0)
          v7[(v4 + 1) % v10] = 0.0;
        v12 = vaddq_s64(v12, v14);
        v4 += 2;
        v11 -= 2;
      }
      while (v11);
    }
  }
  v16 = 0.0;
  if (v7 != v8)
  {
    v17 = v7;
    do
    {
      v18 = *v17++;
      v16 = v16 + v18;
    }
    while (v17 != v8);
  }
  if (v16 >= *((float *)a1 + 3))
  {
    *a1 = v2;
    v7[v2 % a1[2]] = 0.0;
    return 1;
  }
  return 0;
}

uint64_t shazam::Tracker::addMatch(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  _OWORD *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int128 v58;
  int v59;
  int v60;
  int v61;
  char v62;
  __int128 v63;

  v3 = result;
  v4 = *(_DWORD *)(result + 40) % *(_DWORD *)(result + 8);
  *(float *)(*(_QWORD *)(result + 16) + 4 * v4) = *(float *)a2 + *(float *)(*(_QWORD *)(result + 16) + 4 * v4);
  ++*(_DWORD *)(result + 68);
  if (!*(_BYTE *)(result + 72))
    goto LABEL_58;
  v5 = result + 104;
  v6 = *(_QWORD *)(v3 + 104);
  v7 = *(_OWORD **)(v3 + 96);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD *)(v3 + 88);
    v10 = ((uint64_t)v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      goto LABEL_74;
    v12 = v6 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>(v5, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    v8 = (uint64_t)(v15 + 16);
    v18 = *(char **)(v3 + 88);
    v17 = *(char **)(v3 + 96);
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = *(char **)(v3 + 88);
    }
    *(_QWORD *)(v3 + 88) = v15;
    *(_QWORD *)(v3 + 96) = v8;
    *(_QWORD *)(v3 + 104) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    v8 = (uint64_t)(v7 + 1);
  }
  *(_QWORD *)(v3 + 96) = v8;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchLess &,std::__wrap_iter<shazam::PeakMatch *>>(*(_QWORD *)(v3 + 88), v8, (uint64_t)&v63, (v8 - *(_QWORD *)(v3 + 88)) >> 4);
  v19 = *(_QWORD *)(v3 + 136);
  v20 = *(_OWORD **)(v3 + 128);
  if ((unint64_t)v20 >= v19)
  {
    v22 = *(_QWORD *)(v3 + 120);
    v23 = ((uint64_t)v20 - v22) >> 4;
    v24 = v23 + 1;
    if (!((unint64_t)(v23 + 1) >> 60))
    {
      v25 = v19 - v22;
      if (v25 >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>(v3 + 136, v26);
      else
        v27 = 0;
      v28 = &v27[16 * v23];
      v29 = &v27[16 * v26];
      *(_OWORD *)v28 = *(_OWORD *)a2;
      v21 = (uint64_t)(v28 + 16);
      v31 = *(char **)(v3 + 120);
      v30 = *(char **)(v3 + 128);
      if (v30 != v31)
      {
        do
        {
          *((_OWORD *)v28 - 1) = *((_OWORD *)v30 - 1);
          v28 -= 16;
          v30 -= 16;
        }
        while (v30 != v31);
        v30 = *(char **)(v3 + 120);
      }
      *(_QWORD *)(v3 + 120) = v28;
      *(_QWORD *)(v3 + 128) = v21;
      *(_QWORD *)(v3 + 136) = v29;
      if (v30)
        operator delete(v30);
      goto LABEL_34;
    }
LABEL_74:
    std::vector<char>::__throw_length_error[abi:ne180100]();
  }
  *v20 = *(_OWORD *)a2;
  v21 = (uint64_t)(v20 + 1);
LABEL_34:
  *(_QWORD *)(v3 + 128) = v21;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchGreater &,std::__wrap_iter<shazam::PeakMatch *>>(*(_QWORD *)(v3 + 120), v21, (uint64_t)&v63, (v21 - *(_QWORD *)(v3 + 120)) >> 4);
  v32 = *(_OWORD **)(v3 + 88);
  v33 = *(_QWORD *)(v3 + 96);
  v34 = *(_QWORD *)(v3 + 80);
  v35 = (v33 - (uint64_t)v32) >> 4;
  if (v35 > v34)
  {
    if (v33 - (uint64_t)v32 >= 17)
    {
      v36 = 0;
      v63 = *v32;
      v37 = v32;
      do
      {
        v38 = &v37[v36 + 1];
        v39 = (2 * v36) | 1;
        v40 = 2 * v36 + 2;
        if (v40 < v35)
        {
          v41 = *((_DWORD *)v38 + 3);
          v42 = *((_DWORD *)v38 + 7);
          v38 += v41 < v42;
          if (v41 < v42)
            v39 = v40;
        }
        *v37 = *v38;
        v37 = v38;
        v36 = v39;
      }
      while (v39 <= (uint64_t)((unint64_t)(v35 - 2) >> 1));
      v43 = (_OWORD *)(v33 - 16);
      if (v38 == v43)
      {
        *v38 = v63;
      }
      else
      {
        *v38 = *v43;
        *v43 = v63;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchLess &,std::__wrap_iter<shazam::PeakMatch *>>((uint64_t)v32, (uint64_t)(v38 + 1), (uint64_t)&v62, v38 + 1 - v32);
      }
      v33 = *(_QWORD *)(v3 + 96);
      v34 = *(_QWORD *)(v3 + 80);
    }
    *(_QWORD *)(v3 + 96) = v33 - 16;
  }
  result = *(_QWORD *)(v3 + 120);
  v44 = *(_QWORD *)(v3 + 128);
  v45 = (v44 - result) >> 4;
  if (v45 > v34)
  {
    if (v44 - result >= 17)
    {
      v46 = 0;
      v63 = *(_OWORD *)result;
      v47 = (_OWORD *)result;
      do
      {
        v48 = &v47[v46 + 1];
        v49 = (2 * v46) | 1;
        v50 = 2 * v46 + 2;
        if (v50 < v45)
        {
          v51 = *((_DWORD *)v48 + 7);
          v52 = *((_DWORD *)v48 + 3);
          v48 += v51 < v52;
          if (v51 < v52)
            v49 = v50;
        }
        *v47 = *v48;
        v47 = v48;
        v46 = v49;
      }
      while (v49 <= (uint64_t)((unint64_t)(v45 - 2) >> 1));
      v53 = (_OWORD *)(v44 - 16);
      if (v48 == v53)
      {
        *v48 = v63;
      }
      else
      {
        *v48 = *v53;
        *v53 = v63;
        result = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchGreater &,std::__wrap_iter<shazam::PeakMatch *>>(result, (uint64_t)(v48 + 1), (uint64_t)&v62, ((uint64_t)v48 - result + 16) >> 4);
      }
      v44 = *(_QWORD *)(v3 + 128);
    }
    *(_QWORD *)(v3 + 128) = v44 - 16;
  }
LABEL_58:
  if (*(_BYTE *)(v3 + 64))
  {
    v55 = *(_DWORD *)(v3 + 52);
    v54 = *(_DWORD *)(v3 + 56);
    v57 = *(_DWORD *)(v3 + 44);
    v56 = *(_DWORD *)(v3 + 48);
  }
  else
  {
    v56 = *(_DWORD *)(a2 + 12);
    LODWORD(v58) = v56;
    *((_QWORD *)&v58 + 1) = *(_QWORD *)(a2 + 4);
    DWORD1(v58) = v56;
    *(_OWORD *)(v3 + 44) = v58;
    *(_DWORD *)(v3 + 60) = 0;
    *(_BYTE *)(v3 + 64) = 1;
    v54 = HIDWORD(v58);
    v55 = DWORD2(v58);
    v57 = v56;
  }
  v59 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a2 + 8) < v59)
    v59 = *(_DWORD *)(a2 + 8);
  if (v55 >= v59)
    v55 = v59;
  *(_DWORD *)(v3 + 52) = v55;
  v60 = *(_DWORD *)(a2 + 4);
  if (v60 <= *(_DWORD *)(a2 + 8))
    v60 = *(_DWORD *)(a2 + 8);
  if (v60 > v54)
    v54 = v60;
  *(_DWORD *)(v3 + 56) = v54;
  v61 = *(_DWORD *)(a2 + 12);
  if (v61 >= v57)
    v61 = v57;
  *(_DWORD *)(v3 + 44) = v61;
  if (v56 <= *(_DWORD *)(a2 + 12))
    v56 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v3 + 48) = v56;
  return result;
}

uint64_t shazam::weightedPeakDensityCrossOver(uint64_t *a1, float a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  float v20;

  v2 = *a1;
  v3 = a1[1] - *a1;
  v4 = (v3 >> 4) - 1;
  if ((int)(v3 >> 4) <= 11)
    v5 = 11;
  else
    v5 = v3 >> 4;
  v6 = (v5 - 11);
  if ((int)v6 < (int)(v3 >> 4))
  {
    v7 = 0;
    v8 = (int)(float)(a2 * 125.0);
    v9 = (int)((uint64_t)v3 >> 4);
    v10 = v4 - 1;
    v11 = 0.0;
    v12 = 0.0;
    do
    {
      v13 = v9--;
      v14 = 0.0;
      if (v13 >= 2)
      {
        v15 = *(_DWORD *)(v2 + 16 * v9 + 12);
        v16 = v10;
        do
        {
          v17 = v2 + 16 * (v7 + v16);
          v18 = *(_DWORD *)(v17 + 12);
          v19 = v15 - v18;
          if (v15 - v18 < 0)
            v19 = v18 - v15;
          if (v19 > v8)
            break;
          if (v15 != v18)
            v14 = v14 + *(float *)v17;
          --v16;
        }
        while (v7 + v16 + 2 > 1);
      }
      v20 = v14 - v11;
      if (v20 > v12)
      {
        v12 = v20;
        v4 = v9;
      }
      --v7;
      v11 = v14;
    }
    while (v9 > v6);
  }
  return *(_QWORD *)(v2 + 16 * v4);
}

void shazam::Tracker::check_queue(shazam::Tracker *this)
{
  _OWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  _OWORD *v46;
  _OWORD *v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  char *v54;
  void *__p;
  char *v56;
  char *v57;
  char v58;
  __int128 v59;

  __p = 0;
  v56 = 0;
  v57 = 0;
  v2 = (_OWORD *)*((_QWORD *)this + 11);
  if (v2 != *((_OWORD **)this + 12))
  {
    do
    {
      v3 = v56;
      if (v56 >= v57)
      {
        v5 = (v56 - (_BYTE *)__p) >> 4;
        v6 = v5 + 1;
        if ((unint64_t)(v5 + 1) >> 60)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        v7 = v57 - (_BYTE *)__p;
        if ((v57 - (_BYTE *)__p) >> 3 > v6)
          v6 = v7 >> 3;
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
          v8 = 0xFFFFFFFFFFFFFFFLL;
        else
          v8 = v6;
        if (v8)
          v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>((uint64_t)&v57, v8);
        else
          v9 = 0;
        v10 = &v9[16 * v5];
        *(_OWORD *)v10 = *v2;
        v12 = (char *)__p;
        v11 = v56;
        v13 = v10;
        if (v56 != __p)
        {
          do
          {
            *((_OWORD *)v13 - 1) = *((_OWORD *)v11 - 1);
            v13 -= 16;
            v11 -= 16;
          }
          while (v11 != v12);
          v11 = (char *)__p;
        }
        v4 = v10 + 16;
        __p = v13;
        v56 = v10 + 16;
        v57 = &v9[16 * v8];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_OWORD *)v56 = *v2;
        v4 = v3 + 16;
      }
      v56 = v4;
      v2 = (_OWORD *)*((_QWORD *)this + 11);
      v14 = *((_QWORD *)this + 12);
      if (v14 - (uint64_t)v2 >= 17)
      {
        v15 = 0;
        v16 = (v14 - (uint64_t)v2) >> 4;
        v53 = *v2;
        v17 = v2;
        do
        {
          v18 = &v17[v15 + 1];
          v19 = (2 * v15) | 1;
          v20 = 2 * v15 + 2;
          if (v20 < v16)
          {
            v21 = *((_DWORD *)v18 + 3);
            v22 = *((_DWORD *)v18 + 7);
            v18 += v21 < v22;
            if (v21 < v22)
              v19 = v20;
          }
          *v17 = *v18;
          v17 = v18;
          v15 = v19;
        }
        while (v19 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v23 = (_OWORD *)(v14 - 16);
        if (v18 == v23)
        {
          *v18 = v53;
        }
        else
        {
          *v18 = *v23;
          *v23 = v53;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchLess &,std::__wrap_iter<shazam::PeakMatch *>>((uint64_t)v2, (uint64_t)(v18 + 1), (uint64_t)&v59, v18 + 1 - v2);
        }
        v2 = (_OWORD *)*((_QWORD *)this + 11);
        v14 = *((_QWORD *)this + 12);
      }
      v24 = (_OWORD *)(v14 - 16);
      *((_QWORD *)this + 12) = v24;
    }
    while (v2 != v24);
  }
  v53 = 0uLL;
  v54 = 0;
  v25 = (_OWORD *)*((_QWORD *)this + 15);
  if (v25 == *((_OWORD **)this + 16))
  {
    v48 = 0;
  }
  else
  {
    do
    {
      v26 = *((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1) >= (unint64_t)v54)
      {
        v28 = (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        v30 = (uint64_t)&v54[-v53];
        if ((uint64_t)&v54[-v53] >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::SongOffset>>((uint64_t)&v54, v31);
        else
          v32 = 0;
        v33 = &v32[16 * v28];
        *(_OWORD *)v33 = *v25;
        v34 = (char *)*((_QWORD *)&v53 + 1);
        v35 = (char *)v53;
        v36 = v33;
        if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
        {
          do
          {
            *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
            v36 -= 16;
            v34 -= 16;
          }
          while (v34 != v35);
          v34 = (char *)v53;
        }
        v27 = v33 + 16;
        *(_QWORD *)&v53 = v36;
        *((_QWORD *)&v53 + 1) = v33 + 16;
        v54 = &v32[16 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        **((_OWORD **)&v53 + 1) = *v25;
        v27 = (_OWORD *)(v26 + 16);
      }
      *((_QWORD *)&v53 + 1) = v27;
      v25 = (_OWORD *)*((_QWORD *)this + 15);
      v37 = *((_QWORD *)this + 16);
      if (v37 - (uint64_t)v25 >= 17)
      {
        v38 = 0;
        v39 = (v37 - (uint64_t)v25) >> 4;
        v59 = *v25;
        v40 = v25;
        do
        {
          v41 = &v40[v38 + 1];
          v42 = (2 * v38) | 1;
          v43 = 2 * v38 + 2;
          if (v43 < v39)
          {
            v44 = *((_DWORD *)v41 + 7);
            v45 = *((_DWORD *)v41 + 3);
            v41 += v44 < v45;
            if (v44 < v45)
              v42 = v43;
          }
          *v40 = *v41;
          v40 = v41;
          v38 = v42;
        }
        while (v42 <= (uint64_t)((unint64_t)(v39 - 2) >> 1));
        v46 = (_OWORD *)(v37 - 16);
        if (v41 == v46)
        {
          *v41 = v59;
        }
        else
        {
          *v41 = *v46;
          *v46 = v59;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchGreater &,std::__wrap_iter<shazam::PeakMatch *>>((uint64_t)v25, (uint64_t)(v41 + 1), (uint64_t)&v58, v41 + 1 - v25);
        }
        v25 = (_OWORD *)*((_QWORD *)this + 15);
        v37 = *((_QWORD *)this + 16);
      }
      v47 = (_OWORD *)(v37 - 16);
      *((_QWORD *)this + 16) = v47;
    }
    while (v25 != v47);
    v48 = (void *)v53;
  }
  v49 = shazam::weightedPeakDensityCrossOver((uint64_t *)&__p, 5.0);
  *((_DWORD *)this + 11) = v50;
  *((_DWORD *)this + 13) = HIDWORD(v49);
  v51 = shazam::weightedPeakDensityCrossOver((uint64_t *)&v53, 2.0);
  *((_DWORD *)this + 12) = v52;
  *((_DWORD *)this + 14) = HIDWORD(v51);
  if (v48)
  {
    *((_QWORD *)&v53 + 1) = v48;
    operator delete(v48);
  }
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
}

void sub_218C4A544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

__n128 shazam::Tracker::getAlignment@<Q0>(shazam::Tracker *this@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  __n128 result;

  v5 = (char *)this + 44;
  if (*((_BYTE *)this + 64))
  {
    if (*((_BYTE *)this + 72))
      shazam::Tracker::check_queue(this);
    v10 = *a2;
    v9 = a2[1];
    if (*a2 == v9)
      goto LABEL_16;
    while (*(_DWORD *)v10 < *(_DWORD *)v5)
    {
      v10 += 8;
      if (v10 == v9)
        goto LABEL_16;
    }
    if (v10 == v9)
    {
LABEL_16:
      v11 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        if (*(_DWORD *)v10 >= *((_DWORD *)this + 12))
          break;
        if (!a3 || *(unsigned __int16 *)(v10 + 4) <= 0xDACu)
          ++v11;
        v10 += 8;
      }
      while (v10 != v9);
    }
    v12 = (float)*((unsigned int *)this + 17) / (float)v11;
    if (v12 > 1.0)
      v12 = 1.0;
    *((float *)this + 15) = v12;
  }
  result = *(__n128 *)v5;
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
  return result;
}

_QWORD *shazam::time_freqs::time_freqs(uint64_t a1, float a2, uint64_t a3, char **a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  __int16 v44;
  _OWORD v47[2];
  _OWORD v48[2];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *a4;
  v6 = a4[1];
  if (*a4 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a4;
    do
    {
      v11 = *(_QWORD *)v9;
      v10 = *((_QWORD *)v9 + 1);
      v9 += 24;
      v8 += (v10 - v11) >> 3;
    }
    while (v9 != v6);
  }
  std::vector<shazam::time_freq>::reserve((char **)a1, v8);
  memset(v48, 0, sizeof(v48));
  v12 = (v6 - v7) / 24;
  memset(v47, 0, sizeof(v47));
  if (v7 != v6)
  {
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = (v6 - v7) / 24;
    v14 = (uint64_t *)(*a4 + 8);
    v15 = v48;
    v16 = v47;
    do
    {
      *v15++ = *(v14 - 1);
      v17 = *v14;
      v14 += 3;
      *v16++ = v17;
      --v13;
    }
    while (v13);
  }
  v18 = (_QWORD *)a1;
  if (v8)
  {
    v19 = 0;
    v20 = 1.0;
    v21 = a2 + 1.0;
    if (v12 <= 1)
      v22 = 1;
    else
      v22 = (v6 - v7) / 24;
    do
    {
      if (v7 != v6)
      {
        v23 = 0;
        v24 = -1;
        do
        {
          v25 = (unsigned int *)*((_QWORD *)v48 + v23);
          if (v25 != *((unsigned int **)v47 + v23))
          {
            v26 = *v25;
            if (v26 < v24)
            {
              v24 = v26;
              v19 = v23;
            }
          }
          ++v23;
        }
        while (v22 != v23);
      }
      v27 = *((_QWORD *)v48 + v19);
      LOWORD(v20) = *(_WORD *)(v27 + 4);
      v20 = (float)(int)(float)((float)LODWORD(v20) * 0.24997) / v21;
      v28 = (int)v20;
      v30 = v18[1];
      v29 = v18[2];
      if (v30 >= v29)
      {
        v32 = v7;
        v33 = (uint64_t)(v30 - *v18) >> 3;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<char>::__throw_length_error[abi:ne180100]();
        v35 = v29 - *v18;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(a1 + 16, v36);
        v39 = &v37[8 * v33];
        *(_DWORD *)v39 = *(_DWORD *)v27;
        *((_WORD *)v39 + 2) = v28;
        v18 = (_QWORD *)a1;
        v41 = *(char **)a1;
        v40 = *(char **)(a1 + 8);
        v42 = v39;
        v7 = v32;
        if (v40 != *(char **)a1)
        {
          do
          {
            v43 = *((_DWORD *)v40 - 2);
            v40 -= 8;
            v44 = *((_WORD *)v40 + 2);
            *((_DWORD *)v42 - 2) = v43;
            v42 -= 8;
            *((_WORD *)v42 + 2) = v44;
          }
          while (v40 != v41);
          v40 = *(char **)a1;
        }
        v31 = v39 + 8;
        *(_QWORD *)a1 = v42;
        *(_QWORD *)(a1 + 8) = v39 + 8;
        *(_QWORD *)(a1 + 16) = &v37[8 * v38];
        if (v40)
        {
          operator delete(v40);
          v18 = (_QWORD *)a1;
        }
      }
      else
      {
        *(_DWORD *)v30 = *(_DWORD *)v27;
        *(_WORD *)(v30 + 4) = v28;
        v31 = (char *)(v30 + 8);
      }
      v18[1] = v31;
      *((_QWORD *)v48 + v19) = v27 + 8;
      --v8;
    }
    while (v8);
  }
  return v18;
}

void sub_218C4A8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<shazam::time_freq>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  __int16 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[8 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 2);
        v10 -= 8;
        v14 = *((_WORD *)v10 + 2);
        *((_DWORD *)v12 - 2) = v13;
        v12 -= 8;
        *((_WORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchLess &,std::__wrap_iter<shazam::PeakMatch *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = *(_DWORD *)(result + 16 * (v4 >> 1) + 12);
    v7 = *(_DWORD *)(a2 - 4);
    if (v6 < v7)
    {
      v9 = *(_QWORD *)(a2 - 16);
      v8 = a2 - 16;
      v11 = v9;
      v12 = *(_DWORD *)(v8 + 8);
      do
      {
        v10 = (_OWORD *)v8;
        v8 = result + 16 * v5;
        *v10 = *(_OWORD *)v8;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v5 + 12) < v7);
      *(_QWORD *)v8 = v11;
      *(_DWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 12) = v7;
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,shazam::Tracker::ComparePeakMatchGreater &,std::__wrap_iter<shazam::PeakMatch *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 16 * (v4 >> 1);
    v7 = *(_DWORD *)(a2 - 4);
    if (v7 < *(_DWORD *)(v6 + 12))
    {
      v9 = *(_QWORD *)(a2 - 16);
      v8 = a2 - 16;
      v11 = v9;
      v12 = *(_DWORD *)(v8 + 8);
      do
      {
        v10 = (_OWORD *)v8;
        v8 = result + 16 * v5;
        *v10 = *(_OWORD *)v8;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
      }
      while (v7 < *(_DWORD *)(result + 16 * v5 + 12));
      *(_QWORD *)v8 = v11;
      *(_DWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 12) = v7;
    }
  }
  return result;
}

void shazam::Tracker::Tracker(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 96) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 24) = v6;
    operator delete(v6);
  }
}

_BYTE *shazam::SignatureTracker::SignatureTracker(_BYTE *a1, uint64_t a2, _QWORD *a3)
{
  *a1 = *(_BYTE *)(a2 + 20);
  shazam::time_freqs::time_freqs(a1 + 8, 0.0);
  a1[32] = a3[1] - *a3 == 72;
  return a1;
}

void shazam::SignatureTracker::track(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v9;
  int v10;
  int v11;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v9 = HIDWORD(a4);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 8);
  if (v10 < SHIDWORD(a4) || v11 < (int)a4)
    goto LABEL_6;
  shazam::SignatureTracker::track_internal((unsigned __int8 *)a1, a2, a3, a4, a5, a6, (uint64_t)&v29);
  if (!BYTE4(v30))
  {
    if (*(_BYTE *)(a6 + 17))
      goto LABEL_6;
    v18 = 0.0;
    goto LABEL_13;
  }
  v18 = (float)(DWORD1(v29) - v29) / 125.0;
  if (!*(_BYTE *)(a6 + 17))
  {
LABEL_13:
    shazam::SignatureTracker::track_internal((unsigned __int8 *)a1, a2, a3, a4, 0, a6, (uint64_t)&v27);
    if (BYTE4(v28))
      v19 = (float)(DWORD1(v27) - v27) / 125.0;
    else
      v19 = 0.0;
    if (v18 >= v19)
      v19 = v18;
    if (v19 >= 1.0)
    {
      if (v18 != v19)
      {
        *(_OWORD *)a7 = v27;
        v20 = v28;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    v21 = (float)((float)*(unsigned int *)a6 * 1.5) * 125.0;
    v22 = ((int)v21 + v9);
    v23 = ((int)v21 + a4);
    if ((int)v22 < v10 && (int)v23 < v11)
    {
      shazam::SignatureTracker::track_internal((unsigned __int8 *)a1, a2, a3, v23 | (v22 << 32), a5, a6, (uint64_t)&v25);
      if (BYTE4(v26))
      {
        if ((float)((float)(DWORD1(v25) - v25) / 125.0) > 1.0)
        {
          *(_OWORD *)a7 = v25;
          v20 = v26;
          goto LABEL_21;
        }
      }
    }
LABEL_6:
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 20) = 0;
    return;
  }
  if (v18 < 1.0)
    goto LABEL_6;
LABEL_20:
  *(_OWORD *)a7 = v29;
  v20 = v30;
LABEL_21:
  *(_QWORD *)(a7 + 16) = v20;
}

void shazam::SignatureTracker::track_internal(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  int v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  char *v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  char *v31;
  char *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  float v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  int v43;
  _BOOL4 v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  int *v49;
  char *v50;
  int v51;
  unsigned int *v52;
  unsigned int *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  char *v58;
  unsigned int v59;
  char *v60;
  float v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  float v68;
  char *v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  float v75;
  int v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  __int128 v80;
  unsigned int v81;
  __int128 v82;
  unsigned int v83;
  char *v84[2];
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *__p;
  void *v90;
  unsigned int *v91;
  unsigned int *v92;
  __int128 v93;
  float v94;
  int v95;
  int v96;
  unsigned int v97;
  char v98;

  *(_QWORD *)&v93 = a4;
  *((_QWORD *)&v93 + 1) = a5;
  shazam::sig_alignment::setZeroPadding(&v93, *(unsigned __int8 *)(a2 + 20), *a1);
  shazam::time_freqs::time_freqs(&v91, *((float *)&v93 + 3));
  v11 = -(int)v93 & ((int)v93 >> 31);
  v12 = v91;
  if (v92 != v91)
  {
    v13 = ((char *)v92 - (char *)v91) >> 3;
    do
    {
      v14 = v13 >> 1;
      v15 = (int *)&v12[2 * (v13 >> 1)];
      v17 = *v15;
      v16 = (unsigned int *)(v15 + 2);
      v13 += ~(v13 >> 1);
      if (v17 < DWORD1(v93) + v11)
        v12 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  shazam::Tracker::Tracker((uint64_t)v84, (int)(*v12 + v11) / 125, *(_DWORD *)a6, *(_BYTE *)(a6 + 18), *(float *)(a6 + 4));
  v18 = *(_DWORD *)(a6 + 8);
  v19 = v93 + v11 - v18;
  if ((int)v93 + v11 < v18)
    v19 = 0;
  v21 = (char *)*((_QWORD *)a1 + 1);
  v20 = (char *)*((_QWORD *)a1 + 2);
  v77 = a3;
  v78 = a7;
  v79 = a1;
  if (v20 == v21)
  {
    v21 = (char *)*((_QWORD *)a1 + 2);
  }
  else
  {
    v22 = (v20 - v21) >> 3;
    do
    {
      v23 = v22 >> 1;
      v24 = (int *)&v21[8 * (v22 >> 1)];
      v26 = *v24;
      v25 = (char *)(v24 + 2);
      v22 += ~(v22 >> 1);
      if (v26 < v19)
        v21 = v25;
      else
        v22 = v23;
    }
    while (v22);
  }
  v27 = v92;
  v82 = v93;
  v83 = v18;
  if (v12 != v92)
  {
    v28 = v12;
    do
    {
      if (!shazam::Tracker::isTracking((int *)v84, *v28))
        break;
      v29 = v83;
      v30 = shazam::sig_alignment::lowerBoundTime((uint64_t)&v82, *v28);
      if (v20 == v21)
      {
LABEL_24:
        v21 = v20;
      }
      else
      {
        v31 = v21;
        while (*(_DWORD *)v31 < v30 - v83)
        {
          v31 += 8;
          v21 += 8;
          if (v31 == v20)
            goto LABEL_24;
        }
        if (v31 != v20)
        {
          v32 = v31;
          while (*(_DWORD *)v32 < v30 - v83 + 2 * v29 + 1)
          {
            v32 += 8;
            if (v32 == v20)
            {
              v32 = v20;
              break;
            }
          }
          if (v31 != v32)
          {
            v33 = *(float *)(a6 + 12);
            v34 = *((unsigned __int16 *)v28 + 2);
            while (1)
            {
              v35 = *((unsigned __int16 *)v31 + 2) - v34;
              v36 = (int)v35 >= 0 ? *((unsigned __int16 *)v31 + 2) - (int)v34 : v34 - *((unsigned __int16 *)v31 + 2);
              if (v36 < 0x10)
                break;
              v31 += 8;
              if (v31 == v32)
                goto LABEL_25;
            }
            v37 = (float)(1.0 - v33) + (float)(_chanw[v35 + 15] * v33);
            if (v37 < 0.0)
              v37 = 0.0;
            v38 = *(_DWORD *)v31;
            v39 = *v28;
            v94 = v37;
            v95 = v38;
            v96 = v38;
            v97 = v39;
            v98 = 1;
            while (v31 != v32)
            {
              v40 = *((unsigned __int16 *)v31 + 2) - v34;
              if ((int)v40 >= 0)
                v41 = *((unsigned __int16 *)v31 + 2) - (_DWORD)v34;
              else
                v41 = v34 - *((unsigned __int16 *)v31 + 2);
              if (v41 <= 0xF)
              {
                v42 = (float)(1.0 - v33) + (float)(_chanw[v40 + 15] * v33);
                if (v42 < 0.0)
                  v42 = 0.0;
                if (v37 < v42)
                {
                  v94 = v42;
                  v37 = v42;
                }
                v43 = *(_DWORD *)v31;
                if (v38 < *(_DWORD *)v31)
                {
                  v96 = *(_DWORD *)v31;
                  v38 = v43;
                }
              }
              v31 += 8;
            }
            shazam::Tracker::addMatch((uint64_t)v84, (uint64_t)&v94);
          }
        }
      }
LABEL_25:
      v28 += 2;
    }
    while (v28 != v27);
  }
  if (!*(_BYTE *)(a6 + 16) && SDWORD1(v93) >= 1)
  {
    shazam::Tracker::resetTime(v84);
    shazam::Tracker::resetWeights(v84);
    v45 = (char *)*((_QWORD *)v79 + 1);
    v46 = (char *)*((_QWORD *)v79 + 2);
    if (v46 != v45)
    {
      v47 = (v46 - v45) >> 3;
      v46 = (char *)*((_QWORD *)v79 + 1);
      do
      {
        v48 = v47 >> 1;
        v49 = (int *)&v46[8 * (v47 >> 1)];
        v51 = *v49;
        v50 = (char *)(v49 + 2);
        v47 += ~(v47 >> 1);
        if (v51 < (int)(v18 + v11 + v93))
          v46 = v50;
        else
          v47 = v48;
      }
      while (v47);
    }
    v52 = v91;
    v80 = v93;
    v81 = v18;
    if (v12 != v91)
    {
      v53 = v12;
      do
      {
        v54 = *(v53 - 2);
        v53 -= 2;
        if (!shazam::Tracker::isTracking((int *)v84, v54))
          break;
        v55 = ~(2 * v81);
        v56 = shazam::sig_alignment::lowerBoundTime((uint64_t)&v80, *v53);
        while (v46 != v45)
        {
          v57 = *((_DWORD *)v46 - 2);
          v46 -= 8;
          if (v57 <= v81 + v56)
          {
            v46 += 8;
            goto LABEL_74;
          }
        }
        v46 = v45;
LABEL_74:
        v58 = v46;
        while (v58 != v45)
        {
          v59 = *((_DWORD *)v58 - 2);
          v58 -= 8;
          if (v59 <= v81 + v56 + v55)
          {
            v60 = v58 + 8;
            goto LABEL_79;
          }
        }
        v60 = v45;
LABEL_79:
        v61 = *(float *)(a6 + 12);
        v62 = v46;
        while (v62 != v60)
        {
          v63 = v62 - 8;
          v64 = *((unsigned __int16 *)v62 - 2);
          v65 = *((unsigned __int16 *)v12 - 2);
          v66 = v64 - v65;
          if ((int)v64 - (int)v65 >= 0)
            v67 = v64 - v65;
          else
            v67 = v65 - v64;
          v62 = v63;
          if (v67 <= 0xF)
          {
            v68 = (float)(1.0 - v61) + (float)(_chanw[v66 + 15] * v61);
            v71 = *(_DWORD *)v63;
            v69 = v63 + 8;
            v70 = v71;
            v72 = *v53;
            if (v68 < 0.0)
              v68 = 0.0;
            v94 = v68;
            v95 = v70;
            v96 = v70;
            v97 = v72;
            v98 = 1;
            do
            {
              v73 = *((unsigned __int16 *)v69 - 2) - v65;
              if ((int)v73 >= 0)
                v74 = *((unsigned __int16 *)v69 - 2) - (_DWORD)v65;
              else
                v74 = v65 - *((unsigned __int16 *)v69 - 2);
              if (v74 <= 0xF)
              {
                v75 = (float)(1.0 - v61) + (float)(_chanw[v73 + 15] * v61);
                if (v75 < 0.0)
                  v75 = 0.0;
                if (v68 < v75)
                {
                  v94 = v75;
                  v68 = v75;
                }
                v76 = *((_DWORD *)v69 - 2);
                if (v70 < v76)
                {
                  v96 = *((_DWORD *)v69 - 2);
                  v70 = v76;
                }
              }
              v69 -= 8;
            }
            while (v69 != v60);
            shazam::Tracker::addMatch((uint64_t)v84, (uint64_t)&v94);
            break;
          }
        }
        v12 = v53;
      }
      while (v53 != v52);
    }
  }
  if (v79[32])
    v44 = 1;
  else
    v44 = v77[1] - *v77 == 72;
  shazam::Tracker::getAlignment((shazam::Tracker *)v84, (uint64_t *)&v91, v44, v78);
  if (__p)
  {
    v90 = __p;
    operator delete(__p);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
}

void sub_218C4B284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 168);
  if (v23)
  {
    *(_QWORD *)(v21 - 160) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void shazam::Tracker::~Tracker(shazam::Tracker *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t shazam::StaticCPUSearcher::StaticCPUSearcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, char a6)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = &off_24D9B7240;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  shazam::CPUSearcher::CPUSearcher(a1 + 56, a3, a4, a5, a6);
  return a1;
}

void sub_218C4B374(_Unwind_Exception *a1)
{
  shazam::CPUDatabases *v1;

  shazam::CPUDatabases::~CPUDatabases(v1);
  _Unwind_Resume(a1);
}

void shazam::StaticCPUSearcher::search(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t (***a5)(_QWORD, unint64_t), uint64_t a6)
{
  shazam::CPUSearcher::search((_QWORD *)(a1 + 56), (_QWORD **)(a1 + 8), a2, a3, a4, a5, a6);
}

void shazam::StaticCPUSearcher::~StaticCPUSearcher(shazam::StaticCPUSearcher *this)
{
  shazam::StaticCPUSearcher::~StaticCPUSearcher(this);
  JUMPOUT(0x219A21574);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_24D9B7240;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 136);
  std::vector<Result>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  shazam::virtual_array<char>::~virtual_array((uint64_t)this + 80);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t shazam::virtual_array<char>::~virtual_array(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
      munmap(v2, *(_QWORD *)(a1 + 8));
  }
  return a1;
}

void shazam::parse_ancient_peaks(int **a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  int *v5;
  int v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t i;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  float v28;
  uint64_t *v29;
  float **v30;
  float *v31;
  unsigned int *v32;
  uint64_t *v33;
  float v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  void *exception;
  uint64_t error_code;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v58[4];
  void *__p;
  uint64_t *v60;
  char *v61;
  char v62;

  v5 = *a1;
  v6 = **a1;
  if (v6 != 1610809345 && v6 != 1610809348)
    goto LABEL_60;
  v11 = (char *)a1[1] - (char *)v5;
  if ((unint64_t)v11 >= 5)
  {
    v12 = v11 >> 2;
    if (v12 <= 2)
      v12 = 2;
    v13 = v12 - 1;
    v14 = v5 + 1;
    while (1)
    {
      v16 = *v14++;
      v15 = v16;
      if (v16 - 1 != v6)
        break;
      v6 = v15;
      if (!--v13)
        goto LABEL_12;
    }
LABEL_60:
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x7D);
    MEMORY[0x219A21418](exception, error_code, v53);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
LABEL_12:
  v17 = *a2;
  v18 = a2[1];
  if (*a2 == v18)
  {
    v19 = 0;
    v20 = 1.0;
  }
  else
  {
    v19 = 0;
    v20 = 1.0;
    do
    {
      v21 = v17[1];
      for (i = *v17; i != v21; i += 16)
      {
        if (v20 <= *(float *)(i + 12))
          v20 = *(float *)(i + 12);
      }
      v23 = (v21 - *v17) >> 4;
      if (v19 <= v23)
        v19 = v23;
      v17 += 3;
    }
    while (v17 != v18);
  }
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&__p, v19);
  std::vector<std::vector<spectral_peak_t>>::vector(a5, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v24 = *a2;
  v56 = a2;
  if (a2[1] != *a2)
  {
    v25 = 0;
    if (a3 == 0x7FFFFFFF)
      v26 = -1;
    else
      v26 = a3;
    v27 = 256;
    if (a4 == 15)
      v27 = 211;
    v54 = v27;
    v55 = v26;
    v28 = 1073700000.0 / v20;
    do
    {
      v29 = (uint64_t *)__p;
      v60 = (uint64_t *)__p;
      v30 = (float **)&v24[3 * v25];
      v31 = *v30;
      v32 = (unsigned int *)v30[1];
      v33 = (uint64_t *)__p;
      if (*v30 != (float *)v32)
      {
        do
        {
          v34 = logf(v28 * v31[3]);
          v35 = *(unsigned int *)v31;
          v36 = vcvts_n_s32_f32(v31[1], 6uLL);
          v37 = (int)fmaxf(v34 * 1477.3, 0.0);
          if (v29 >= (uint64_t *)v61)
          {
            v38 = ((char *)v29 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v38 + 1) >> 61)
              std::vector<char>::__throw_length_error[abi:ne180100]();
            v39 = (v61 - (_BYTE *)__p) >> 2;
            if (v39 <= v38 + 1)
              v39 = v38 + 1;
            if ((unint64_t)(v61 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v39;
            if (v40)
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)&v61, v40);
            else
              v41 = 0;
            v42 = (uint64_t *)&v41[8 * v38];
            *v42 = ((unint64_t)v36 << 32) | (v37 << 48) | v35;
            v29 = v42 + 1;
            v44 = (char *)__p;
            v43 = (char *)v60;
            if (v60 != __p)
            {
              do
              {
                v45 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v42 = v45;
              }
              while (v43 != v44);
              v43 = (char *)__p;
            }
            __p = v42;
            v60 = v29;
            v61 = &v41[8 * v40];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *v29++ = ((unint64_t)v36 << 32) | (v37 << 48) | v35;
          }
          v60 = v29;
          v31 += 4;
        }
        while (v31 != (float *)v32);
        v33 = (uint64_t *)__p;
      }
      v46 = 126 - 2 * __clz(v29 - v33);
      if (v29 == v33)
        v47 = 0;
      else
        v47 = v46;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>((uint64_t)v33, v29, (uint64_t)&v62, v47, 1);
      v48 = *a5 + 24 * v25;
      v58[0] = 0;
      v58[1] = v48;
      v58[2] = v55;
      v58[3] = v54;
      v50 = (unsigned int *)__p;
      v49 = (unsigned int *)v60;
      while (v50 != v49)
      {
        shazam::density_filter<spectral_peak_t>::operator<<(v58, v50);
        v50 += 2;
      }
      shazam::density_filter<spectral_peak_t>::flush(v58);
      ++v25;
      v24 = *v56;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * (v56[1] - *v56));
  }
  if (__p)
  {
    v60 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_218C4B8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<spectral_peak_t>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<spectral_peak_t>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_218C4B9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t shazam::cropped_info@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  void *exception;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  __int128 v26;
  std::string::size_type v27;
  std::string v28;
  std::string v29;

  v4 = result;
  v5 = (float)*(unsigned int *)(result + 16) / 125.0;
  v6 = (unint64_t)(float)(v5 * (float)a2);
  v7 = *(_QWORD *)(result + 8);
  if (v7 < v6)
  {
    v13 = (float)*(unsigned int *)(result + 16) / 125.0;
    std::to_string(&v29, 8 * a2);
    std::to_string(&v28, (float)(unint64_t)(8 * *(_QWORD *)(v4 + 8)) / v13);
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v15 = std::string::append(&v23, "ms) started after the end of the signature (");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v28;
    else
      v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)v17, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v25, "ms).");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v27 = v21->__r_.__value_.__r.__words[2];
    v26 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x219A213AC](exception, &v26);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (*(_BYTE *)(result + 20) == 15)
    v8 = a3 + 30;
  else
    v8 = a3;
  v9 = __CFADD__(a2, v8);
  v10 = a2 + v8;
  if (v9)
    v10 = -1;
  v11 = vcvtps_u32_f32(v5 * (float)v10);
  if (v7 >= v11)
    v7 = v11;
  v12 = *(_OWORD *)(result + 16);
  *(_OWORD *)a4 = *(_OWORD *)result;
  *(_OWORD *)(a4 + 16) = v12;
  *(_QWORD *)(a4 + 8) = v7 - v6;
  if (*(_QWORD *)result)
    *(_QWORD *)a4 = *(_QWORD *)result + a2;
  return result;
}

void sub_218C4BB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v36 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v37 - 73) < 0)
        operator delete(*(void **)(v37 - 96));
      if (*(char *)(v37 - 49) < 0)
        operator delete(*(void **)(v37 - 72));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v35);
  goto LABEL_12;
}

uint64_t SHAZAM_SIGX::setup_spectral_output(_QWORD *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int8x8_t v8;

  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  return SpectralOutput::enable(v7, a2, a3, a4, v8);
}

uint64_t SHAZAM_SIGX::disable_spectral_output(SHAZAM_SIGX *this)
{
  SpectralOutput *v1;

  v1 = (SpectralOutput *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 72))(*(_QWORD *)this);
  return SpectralOutput::disable(v1);
}

uint64_t shazam::CPUDatabaseBuilder::CPUDatabaseBuilder(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a3)
  {
    std::vector<SearchPlan>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = (_OWORD *)(v7 + v6);
      v9 = *(_OWORD *)(a2 + v6 + 16);
      *v8 = *(_OWORD *)(a2 + v6);
      v8[1] = v9;
      v6 += 32;
    }
    while (32 * a3 != v6);
    *(_QWORD *)(a1 + 8) = v7 + v6;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN6shazam12SongDataBaseENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 24));
  _ZNSt3__115allocate_sharedB8ne180100IN6shazam16CPUOnePtDatabaseENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 40));
  std::vector<std::vector<char>>::vector((_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
  *(_OWORD *)(a1 + 80) = xmmword_218C7D400;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_218C4BD60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void shazam::CPUDatabaseBuilder::add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  float SampleLength;
  _BYTE v13[32];
  uint64_t v14;
  void **v15;

  if (*(_BYTE *)(a1 + 100))
  {
    v6 = *(_DWORD *)(a1 + 96);
    if (!v6)
      return;
  }
  else
  {
    v7 = (float)((float)((float)*(unint64_t *)(a2 + 8) / (float)*(unsigned int *)(a2 + 16)) * 125.0);
    if (*(_DWORD *)(a1 + 88) >= v7)
    {
      v6 = 1;
    }
    else
    {
      v8 = vcvtps_u32_f32((float)(v7 - *(_DWORD *)(a1 + 92)) / (float)*(unsigned int *)(a1 + 92));
      v6 = v8 + 1;
      if (v8 == -1)
        return;
    }
  }
  v9 = 0;
  v10 = a3 | (a4 << 32);
  do
  {
    shazam::crop<(shazam::signature_density)16>(a2, *(_DWORD *)(a1 + 92) * v9, *(_DWORD *)(a1 + 88), (uint64_t)v13);
    v11 = *(_DWORD *)(a1 + 92) * v9;
    SampleLength = shazam::signature_info::getSampleLength((shazam::signature_info *)a2);
    shazam::CPUDatabaseBuilder::addSigSegment((_QWORD *)a1, (uint64_t)v13, v10, 8 * v11, SampleLength);
    v15 = (void **)&v14;
    std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v15);
    ++v9;
  }
  while (v6 != v9);
}

void sub_218C4BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void shazam::CPUDatabaseBuilder::addSigSegment(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  _DWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  std::vector<char> *v17;
  unint64_t v18;
  std::runtime_error *exception;
  __int128 v20;
  void *__p;
  void *v22;

  v5 = a1 + 10;
  if ((a1[10] + (unint64_t)*(unsigned int *)(a2 + 24)) >> 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Max landmark limit reached, manifest overflow!");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v11 = a1[1];
  if (v11 != *a1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v11 = *a1;
    do
    {
      v15 = v11 + v13;
      v16 = *(_DWORD *)(v11 + v13 + 28);
      v17 = (std::vector<char> *)(a1[7] + v12);
      if (v16 == 12)
      {
        v20 = *(_OWORD *)(v15 + 8);
        shazam::link_bands<(AlgoType)12>((uint64_t)&v20, (uint64_t *)(a2 + 32), *(_DWORD *)(a2 + 24), v15, 0x3E8uLL, (uint64_t)&__p);
        shazam::detail::writeLMFPData<(AlgoType)1>((const void **)&__p, v17, v5);
      }
      else
      {
        if (v16 != 1)
          std::terminate();
        v20 = *(_OWORD *)(v11 + v13 + 8);
        shazam::link_bands<(AlgoType)1>((uint64_t)&v20, (uint64_t *)(a2 + 32), *(_DWORD *)(a2 + 24), v15, 0x3E8uLL, (uint64_t)&__p);
        shazam::detail::writeLMFPData<(AlgoType)1>((const void **)&__p, v17, v5);
      }
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      ++v14;
      v11 = *a1;
      v13 += 32;
      v12 += 24;
    }
    while (v14 < (uint64_t)(a1[1] - *a1) >> 5);
  }
  shazam::peaksToTFPeaks<std::vector<std::vector<spectral_peak_t>>>((_QWORD *)(a2 + 32), (_BYTE *)(v11 + 24), (uint64_t)&__p);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  if (v18 > *(unsigned __int8 *)(*a1 + 24))
    LOBYTE(v18) = *(_BYTE *)(*a1 + 24);
  shazam::CPUDatabaseBuilder::addData(a1, a3, *(_BYTE *)(a2 + 20), v18, *(_DWORD *)(a2 + 24), (uint64_t)&__p, a4, a5);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_218C4C0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void shazam::CPUDatabaseBuilder::addData(_QWORD *a1, uint64_t a2, char a3, char a4, int a5, uint64_t a6, uint64_t a7, float a8)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  float *v47;
  unint64_t v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  char *v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  _BYTE *v68;
  char *v69;
  _BYTE *v70;
  char v71;
  _QWORD *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unint64_t v79;
  size_t v80;
  _BYTE *v81;
  char *v82;
  _BYTE *v83;
  char v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  int v99;
  char *v100;
  unint64_t v101;
  _DWORD *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  int v111;

  v16 = (_QWORD *)a1[5];
  v17 = v16[1] - *v16;
  std::vector<peak_tf>::resize((uint64_t)v16, ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2) + (v17 >> 2));
  v18 = *(_QWORD *)(a6 + 8);
  if (*(_QWORD *)a6 != v18)
    memcpy((void *)(*(_QWORD *)a1[5] + 4 * (v17 >> 2)), *(const void **)a6, v18 - *(_QWORD *)a6);
  v19 = (_QWORD *)a1[5];
  v20 = ((v19[1] - *v19) >> 2) - 1;
  v21 = (char *)v19[4];
  v22 = v19[5];
  if ((unint64_t)v21 >= v22)
  {
    v24 = (char *)v19[3];
    v25 = (v21 - v24) >> 2;
    if ((unint64_t)(v25 + 1) >> 62)
      goto LABEL_120;
    v26 = v22 - (_QWORD)v24;
    v27 = (uint64_t)(v22 - (_QWORD)v24) >> 1;
    if (v27 <= v25 + 1)
      v27 = v25 + 1;
    if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
    {
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v19 + 5), v28);
      v24 = (char *)v19[3];
      v21 = (char *)v19[4];
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[4 * v25];
    v31 = &v29[4 * v28];
    *(_DWORD *)v30 = v20;
    v23 = v30 + 4;
    while (v21 != v24)
    {
      v32 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v30 - 1) = v32;
      v30 -= 4;
    }
    v19[3] = v30;
    v19[4] = v23;
    v19[5] = v31;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_DWORD *)v21 = v20;
    v23 = v21 + 4;
  }
  v19[4] = v23;
  a1[10] += (a5 + 1750);
  v33 = a1[3];
  v34 = *(_QWORD **)(v33 + 8);
  v35 = *(_QWORD *)(v33 + 16);
  if ((unint64_t)v34 >= v35)
  {
    v37 = *(_QWORD **)v33;
    v38 = ((uint64_t)v34 - *(_QWORD *)v33) >> 3;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 2 > v39)
      v39 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>(v33 + 16, v41);
      v37 = *(_QWORD **)v33;
      v34 = *(_QWORD **)(v33 + 8);
    }
    else
    {
      v42 = 0;
    }
    v43 = &v42[8 * v38];
    v44 = &v42[8 * v41];
    *(_QWORD *)v43 = a2;
    v36 = v43 + 8;
    while (v34 != v37)
    {
      v45 = *--v34;
      *((_QWORD *)v43 - 1) = v45;
      v43 -= 8;
    }
    *(_QWORD *)v33 = v43;
    *(_QWORD *)(v33 + 8) = v36;
    *(_QWORD *)(v33 + 16) = v44;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *v34 = a2;
    v36 = v34 + 1;
  }
  *(_QWORD *)(v33 + 8) = v36;
  v46 = (_QWORD *)a1[3];
  v47 = (float *)v46[4];
  v48 = v46[5];
  if ((unint64_t)v47 >= v48)
  {
    v50 = (float *)v46[3];
    v51 = v47 - v50;
    if ((unint64_t)(v51 + 1) >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v52 = v48 - (_QWORD)v50;
    v53 = (uint64_t)(v48 - (_QWORD)v50) >> 1;
    if (v53 <= v51 + 1)
      v53 = v51 + 1;
    if (v52 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    if (v54)
    {
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v46 + 5), v54);
      v50 = (float *)v46[3];
      v47 = (float *)v46[4];
    }
    else
    {
      v55 = 0;
    }
    v56 = (float *)&v55[4 * v51];
    v57 = &v55[4 * v54];
    *v56 = a8;
    v49 = v56 + 1;
    while (v47 != v50)
    {
      v58 = *((_DWORD *)v47-- - 1);
      *((_DWORD *)v56-- - 1) = v58;
    }
    v46[3] = v56;
    v46[4] = v49;
    v46[5] = v57;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v47 = a8;
    v49 = v47 + 1;
  }
  v46[4] = v49;
  v59 = (_QWORD *)a1[3];
  v61 = (_BYTE *)v59[16];
  v60 = v59[17];
  if ((unint64_t)v61 >= v60)
  {
    v63 = v59[15];
    v64 = &v61[-v63];
    v65 = (uint64_t)&v61[-v63 + 1];
    if (v65 < 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v66 = v60 - v63;
    if (2 * v66 > v65)
      v65 = 2 * v66;
    if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
      v67 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
      v68 = operator new(v67);
    else
      v68 = 0;
    v69 = &v68[v67];
    v64[(_QWORD)v68] = a3;
    v62 = (uint64_t)&v64[(_QWORD)v68 + 1];
    if (v61 == (_BYTE *)v63)
    {
      v68 = &v64[(_QWORD)v68];
    }
    else
    {
      v70 = &v61[~v63];
      do
      {
        v71 = *--v61;
        (v70--)[(_QWORD)v68] = v71;
      }
      while (v61 != (_BYTE *)v63);
      v61 = (_BYTE *)v59[15];
    }
    v59[15] = v68;
    v59[16] = v62;
    v59[17] = v69;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *v61 = a3;
    v62 = (uint64_t)(v61 + 1);
  }
  v59[16] = v62;
  v72 = (_QWORD *)a1[3];
  v74 = (_BYTE *)v72[7];
  v73 = v72[8];
  if ((unint64_t)v74 >= v73)
  {
    v76 = v72[6];
    v77 = &v74[-v76];
    v78 = (uint64_t)&v74[-v76 + 1];
    if (v78 < 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v79 = v73 - v76;
    if (2 * v79 > v78)
      v78 = 2 * v79;
    if (v79 >= 0x3FFFFFFFFFFFFFFFLL)
      v80 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (v80)
      v81 = operator new(v80);
    else
      v81 = 0;
    v82 = &v81[v80];
    v77[(_QWORD)v81] = a4;
    v75 = (uint64_t)&v77[(_QWORD)v81 + 1];
    if (v74 == (_BYTE *)v76)
    {
      v81 = &v77[(_QWORD)v81];
    }
    else
    {
      v83 = &v74[~v76];
      do
      {
        v84 = *--v74;
        (v83--)[(_QWORD)v81] = v84;
      }
      while (v74 != (_BYTE *)v76);
      v74 = (_BYTE *)v72[6];
    }
    v72[6] = v81;
    v72[7] = v75;
    v72[8] = v82;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *v74 = a4;
    v75 = (uint64_t)(v74 + 1);
  }
  v72[7] = v75;
  v85 = (_QWORD *)a1[3];
  v86 = (char *)v85[13];
  v87 = v85[14];
  if ((unint64_t)v86 >= v87)
  {
    v89 = (char *)v85[12];
    v90 = (v86 - v89) >> 3;
    if ((unint64_t)(v90 + 1) >> 61)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v91 = v87 - (_QWORD)v89;
    v92 = (uint64_t)(v87 - (_QWORD)v89) >> 2;
    if (v92 <= v90 + 1)
      v92 = v90 + 1;
    if (v91 >= 0x7FFFFFFFFFFFFFF8)
      v93 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v93 = v92;
    if (v93)
    {
      v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(v85 + 14), v93);
      v89 = (char *)v85[12];
      v86 = (char *)v85[13];
    }
    else
    {
      v94 = 0;
    }
    v95 = &v94[8 * v90];
    v96 = &v94[8 * v93];
    *(_QWORD *)v95 = a7;
    v88 = v95 + 8;
    while (v86 != v89)
    {
      v97 = *((_QWORD *)v86 - 1);
      v86 -= 8;
      *((_QWORD *)v95 - 1) = v97;
      v95 -= 8;
    }
    v85[12] = v95;
    v85[13] = v88;
    v85[14] = v96;
    if (v89)
      operator delete(v89);
  }
  else
  {
    *(_QWORD *)v86 = a7;
    v88 = v86 + 8;
  }
  v85[13] = v88;
  v98 = (_QWORD *)a1[3];
  v99 = *((_DWORD *)a1 + 20);
  v100 = (char *)v98[10];
  v101 = v98[11];
  if ((unint64_t)v100 < v101)
  {
    *(_DWORD *)v100 = v99;
    v102 = v100 + 4;
    goto LABEL_119;
  }
  v103 = (char *)v98[9];
  v104 = (v100 - v103) >> 2;
  if ((unint64_t)(v104 + 1) >> 62)
LABEL_120:
    std::vector<char>::__throw_length_error[abi:ne180100]();
  v105 = v101 - (_QWORD)v103;
  v106 = (uint64_t)(v101 - (_QWORD)v103) >> 1;
  if (v106 <= v104 + 1)
    v106 = v104 + 1;
  if (v105 >= 0x7FFFFFFFFFFFFFFCLL)
    v107 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v107 = v106;
  if (v107)
  {
    v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v98 + 11), v107);
    v103 = (char *)v98[9];
    v100 = (char *)v98[10];
  }
  else
  {
    v108 = 0;
  }
  v109 = &v108[4 * v104];
  v110 = &v108[4 * v107];
  *(_DWORD *)v109 = v99;
  v102 = v109 + 4;
  while (v100 != v103)
  {
    v111 = *((_DWORD *)v100 - 1);
    v100 -= 4;
    *((_DWORD *)v109 - 1) = v111;
    v109 -= 4;
  }
  v98[9] = v109;
  v98[10] = v102;
  v98[11] = v110;
  if (v103)
    operator delete(v103);
LABEL_119:
  v98[10] = v102;
}

void std::vector<peak_tf>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<peak_tf>::__append((void **)a1, a2 - v2);
  }
}

void shazam::CPUDatabaseBuilder::build(shazam::CPUDatabaseBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  std::vector<char> *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t shared_owners;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  _QWORD v29[2];
  std::vector<char> v30;

  v3 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = 0;
  v5 = (uint64_t *)&v3[1];
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7698;
  v3[1].__shared_owners_ = 0;
  v3[1].__shared_weak_owners_ = 0;
  v6 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_DWORD *)(v6 + v7 + 28);
      v11 = *((_QWORD *)this + 7);
      if (v10 != 12 && v10 != 1)
        std::terminate();
      v12 = std::vector<char>::vector(&v30, *(_QWORD *)(v11 + v8 + 8) - *(_QWORD *)(v11 + v8));
      v13 = *(_QWORD *)(v11 + v8);
      v14 = *(_QWORD *)(v11 + v8 + 8) - v13;
      if (v13)
        v15 = 0;
      else
        v15 = v14 >= 8;
      if (v15 || (v29[0] = v14 >> 3, v29[1] = v13, v16 = v30.__end_ - v30.__begin_, !v30.__begin_) && v16 >= 8)
        gsl::details::terminate((gsl::details *)v12);
      v28[0] = v16 >> 3;
      v28[1] = v30.__begin_;
      shazam::kvsort<gsl::span<shazam::lmfp<(shazam::fp_type)0>,18446744073709551615ul>>((uint64_t)v29, (uint64_t)v28);
      if (v30.__begin_)
      {
        v30.__end_ = v30.__begin_;
        operator delete(v30.__begin_);
      }
      shared_owners = v3[1].__shared_owners_;
      if (shared_owners >= v3[1].__shared_weak_owners_)
      {
        v18 = std::vector<shazam::CPULMFPDataBase>::__emplace_back_slow_path<SearchPlan &,std::vector<char> &>(v5, *(_QWORD *)this + v7, (unint64_t *)(*((_QWORD *)this + 7) + v8));
      }
      else
      {
        std::allocator<shazam::CPULMFPDataBase>::construct[abi:ne180100]<shazam::CPULMFPDataBase,SearchPlan &,std::vector<char> &>((gsl::details *)&v3[1].__shared_weak_owners_, (gsl::details *)v3[1].__shared_owners_, *(_QWORD *)this + v7, (unint64_t *)(*((_QWORD *)this + 7) + v8));
        v18 = shared_owners + 104;
        v3[1].__shared_owners_ = shared_owners + 104;
      }
      v3[1].__shared_owners_ = v18;
      ++v9;
      v6 = *(_QWORD *)this;
      v8 += 24;
      v7 += 32;
    }
    while (v9 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5);
  }
  v19 = *((_QWORD *)this + 4);
  *a2 = *((_QWORD *)this + 3);
  a2[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *((_QWORD *)this + 6);
  a2[2] = *((_QWORD *)this + 5);
  a2[3] = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  a2[4] = v5;
  a2[5] = v3;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  shazam::CPUDatabaseBuilder::reset(this);
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_218C4C93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<shazam::CPULMFPDataBase>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void shazam::CPUDatabaseBuilder::reset(shazam::CPUDatabaseBuilder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;

  *((_QWORD *)this + 10) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6shazam12SongDataBaseENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
  std::shared_ptr<shazam::SongDataBase>::operator=[abi:ne180100]((uint64_t)this + 24, &v10);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN6shazam16CPUOnePtDatabaseENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
  std::shared_ptr<shazam::SongDataBase>::operator=[abi:ne180100]((uint64_t)this + 40, &v10);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)this + 7);
  v9 = (_QWORD *)*((_QWORD *)this + 8);
  while (v8 != v9)
  {
    v8[1] = *v8;
    v8 += 3;
  }
}

uint64_t std::shared_ptr<shazam::SongDataBase>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

const void **shazam::detail::writeLMFPData<(AlgoType)1>(const void **result, std::vector<char> *this, _DWORD *a3)
{
  _BYTE *v4;
  _BYTE *v5;
  const void **v7;
  std::vector<char>::pointer begin;
  unint64_t v9;
  std::vector<char>::size_type v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char *v15;

  v4 = *result;
  v5 = result[1];
  if (*result != v5)
  {
    v7 = result;
    begin = this->__begin_;
    v9 = this->__end_ - this->__begin_;
    v10 = v5 - v4;
    v11 = v9 + v5 - v4;
    if (v9 >= v11)
    {
      if (v9 > v11)
        this->__end_ = &begin[v11];
    }
    else
    {
      std::vector<char>::__append(this, v10);
      begin = this->__begin_;
      v4 = *v7;
    }
    result = (const void **)memcpy(&begin[v9], v4, v10);
    v12 = (_BYTE *)v7[1] - (_BYTE *)*v7;
    if (v12)
    {
      v13 = v12 >> 3;
      v14 = *a3 + 1750;
      if (v13 <= 1)
        v13 = 1;
      v15 = &this->__begin_[v9 + 4];
      do
      {
        *(_DWORD *)v15 += v14;
        v15 += 8;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void shazam::link_bands<(AlgoType)1>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  void (*v17)(void **__return_ptr, unint64_t);
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  char *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  _DWORD *v40;
  unsigned int v41;
  char *v42;
  unint64_t v43;
  void **v44;
  unint64_t v45;
  uint64_t v46;
  gsl::details *v47;
  uint64_t v48;
  int v49;
  double v50;
  void **v51;
  uint64_t v52;
  gsl::details *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  __int128 v78;
  char *v79;
  _QWORD v80[5];
  char v81;
  _OWORD v82[2];
  uint64_t v83;
  void *v84;
  _DWORD *v85;
  uint64_t v86;
  void **v87;
  void **v88;
  void **v89;
  void *__p[242];

  __p[240] = *(void **)MEMORY[0x24BDAC8D0];
  v78 = 0uLL;
  v79 = 0;
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve((void **)&v78, a5);
  v83 = 0;
  memset(v82, 0, sizeof(v82));
  shazam::matrix_for<(AlgoType)1,(void *)0>(a4, a3, (uint64_t)v82);
  shazam::algo<(AlgoType)1>::tzones_for (v80);
  v9 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) >= 3)
  {
    v65 = a6;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&v84, 0x64uLL);
    v11 = *a2;
    v10 = a2[1];
    if (v10 != *a2)
    {
      v12 = 0;
      do
      {
        v13 = (char *)v82 + 4 * v12;
        v16 = *((_DWORD *)v13 + 2);
        v15 = (unsigned int *)(v13 + 8);
        v14 = v16;
        if (v16)
        {
          v17 = *(void (**)(void **__return_ptr, unint64_t))(a1 + 8);
          if (v17)
          {
            v17(__p, v11 + 24 * v12);
            chooseAnchors((uint64_t *)__p, *v15, v82, (uint64_t)&v84);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            chooseAnchors((uint64_t *)(v11 + 24 * v12), v14, v82, (uint64_t)&v84);
          }
          v11 = *v9;
          v10 = v9[1];
          if (v10 == *v9)
          {
            v11 = v9[1];
          }
          else
          {
            v18 = 0;
            v66 = 4 * v12;
            v67 = v12;
            do
            {
              v70 = v18;
              v19 = (char *)v82 + 4 * v12 + v18;
              v21 = v19[24];
              v20 = (unsigned __int8 *)(v19 + 24);
              v77 = v21;
              if (v21)
              {
                if (v81)
                {
                  LODWORD(__p[0]) = v66 + v18;
                  if (std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v80, (int *)__p))
                  {
                    v22 = std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v80, (int *)__p);
                    if (!v22)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    v75 = *(uint64_t *)((char *)v22 + 20);
                    v23 = v75 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    v23 = 0;
                    LODWORD(v75) = 0;
                  }
                  v11 = *v9;
                  v77 = *v20;
                }
                else
                {
                  v23 = 0;
                  LODWORD(v75) = 0;
                }
                v24 = *(char **)(v11 + 24 * v70);
                bzero(__p, 0x780uLL);
                v25 = v84;
                v74 = v85;
                if (v84 != v85)
                {
                  v72 = (uint64_t *)(v11 + 24 * v70 + 8);
                  v73 = HIDWORD(v23);
                  if ((_DWORD)v75)
                    v26 = HIDWORD(v23) == 0;
                  else
                    v26 = 1;
                  v27 = v26;
                  v71 = v27;
                  do
                  {
                    v28 = *v25 + 8;
                    if (v71)
                    {
                      v29 = *v25 + 197;
                    }
                    else
                    {
                      v28 = *v25 + v75;
                      v29 = v28 + v73;
                    }
                    v30 = (char *)*v72;
                    if ((char *)*v72 == v24)
                    {
                      v37 = *v72;
                    }
                    else
                    {
                      v31 = (*v72 - (uint64_t)v24) >> 3;
                      do
                      {
                        v32 = v31 >> 1;
                        v33 = (unsigned int *)&v24[8 * (v31 >> 1)];
                        v35 = *v33;
                        v34 = (char *)(v33 + 2);
                        v31 += ~(v31 >> 1);
                        if (v35 < v28)
                          v24 = v34;
                        else
                          v31 = v32;
                      }
                      while (v31);
                      if (v30 == v24)
                      {
                        v37 = *v72;
                        v42 = v24;
                        v24 = (char *)*v72;
                        v30 = v42;
                      }
                      else
                      {
                        v36 = (v30 - v24) >> 3;
                        v37 = (uint64_t)v24;
                        do
                        {
                          v38 = v36 >> 1;
                          v39 = (unsigned int *)(v37 + 8 * (v36 >> 1));
                          v41 = *v39;
                          v40 = v39 + 2;
                          v36 += ~(v36 >> 1);
                          if (v41 < v29)
                            v37 = (uint64_t)v40;
                          else
                            v36 = v38;
                        }
                        while (v36);
                        v30 = v24;
                      }
                    }
                    v43 = (v37 - (uint64_t)v30) >> 3;
                    gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,0>((gsl::details *)&v87, (uint64_t)v24, v37);
                    if (v43 <= v77)
                    {
                      v43 = (unint64_t)v87;
                      v44 = v88;
                    }
                    else
                    {
                      if (v24 != (char *)v37)
                        memmove(__p, v24, v37 - (_QWORD)v30);
                      v44 = __p;
                      v45 = 126 - 2 * __clz(v43);
                      if ((char *)v37 == v30)
                        v46 = 0;
                      else
                        v46 = v45;
                      v47 = (gsl::details *)std::__introsort<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *,false>((uint64_t)__p, (unint64_t *)&__p[v43], v46, 1);
                      if (v37 - (_QWORD)v30 == -8)
LABEL_91:
                        gsl::details::terminate(v47);
                    }
                    v76 = v25;
                    v48 = *(_QWORD *)v25;
                    v49 = 0;
                    v50 = FreqLogTable::at((FreqLogTable *)WORD2(v48));
                    v51 = &v44[v43];
                    v87 = v44;
                    v88 = v51;
                    v89 = v44;
                    LODWORD(v43) = 2 * (((v50 + -3.46573591) * 3103.75977) & 0x3FFF);
                    v52 = v48 << 32;
                    while (v89 != v51)
                    {
                      v53 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v87);
                      v43 = v43 & 0x7FFF | (((int)((v50
                                                  - FreqLogTable::at((FreqLogTable *)*((unsigned __int16 *)v53 + 2)))
                                                 * 151.569275) & 0x3FFu) << 15) | ((float)((float)(sqrtf((float)((float)((float)WORD2(v48) * 7.8125) * 0.015625) * (float)(*(_DWORD *)v53 - v48)) / 830.36) * 120.0) << 25);
                      v54 = WORD2(v48) - *((unsigned __int16 *)v53 + 2);
                      if (v54 < 0)
                        v54 = *((unsigned __int16 *)v53 + 2) - WORD2(v48);
                      if (v54 >= 0x101)
                      {
                        v55 = *((_QWORD *)&v78 + 1);
                        if (*((_QWORD *)&v78 + 1) >= (unint64_t)v79)
                        {
                          v57 = (uint64_t)(*((_QWORD *)&v78 + 1) - v78) >> 3;
                          if ((unint64_t)(v57 + 1) >> 61)
                            std::vector<char>::__throw_length_error[abi:ne180100]();
                          v58 = (uint64_t)&v79[-v78] >> 2;
                          if (v58 <= v57 + 1)
                            v58 = v57 + 1;
                          if ((unint64_t)&v79[-v78] >= 0x7FFFFFFFFFFFFFF8)
                            v59 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v59 = v58;
                          if (v59)
                            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)&v79, v59);
                          else
                            v60 = 0;
                          v61 = (unint64_t *)&v60[8 * v57];
                          *v61 = v52 | v43;
                          v56 = v61 + 1;
                          v62 = (char *)*((_QWORD *)&v78 + 1);
                          v63 = (char *)v78;
                          if (*((_QWORD *)&v78 + 1) != (_QWORD)v78)
                          {
                            do
                            {
                              v64 = *((_QWORD *)v62 - 1);
                              v62 -= 8;
                              *--v61 = v64;
                            }
                            while (v62 != v63);
                            v62 = (char *)v78;
                          }
                          *(_QWORD *)&v78 = v61;
                          *((_QWORD *)&v78 + 1) = v56;
                          v79 = &v60[8 * v59];
                          if (v62)
                            operator delete(v62);
                        }
                        else
                        {
                          **((_QWORD **)&v78 + 1) = v52 | v43;
                          v56 = (_QWORD *)(v55 + 8);
                        }
                        *((_QWORD *)&v78 + 1) = v56;
                        if (v77 == ++v49)
                          break;
                      }
                      v47 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v87);
                      if (v87 != v44 || v88 != v51)
                        goto LABEL_91;
                    }
                    v25 = v76 + 2;
                  }
                  while (v76 + 2 != v74);
                  v11 = *a2;
                }
                v9 = a2;
                v10 = a2[1];
                v12 = v67;
              }
              v18 = v70 + 1;
            }
            while (v70 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
          }
        }
        ++v12;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
    }
    a6 = v65;
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
  }
  if (v81)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table((uint64_t)v80);
  *(_OWORD *)a6 = v78;
  *(_QWORD *)(a6 + 16) = v79;
}

void sub_218C4D1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table((uint64_t)&a29);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

double shazam::matrix_for<(AlgoType)1,(void *)0>@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  unint64_t v7;
  uint8x8_t v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  shazam::algo<(AlgoType)1>::matrix_for (*(_DWORD *)a1, a3);
  result = fabs(*(float *)(a1 + 4) + -1.0);
  if (result > 0.01)
  {
    v7 = shazam::targetFP((unsigned int *)a3, a2);
    shazam::reframe_matrix(a3, (float)(*(float *)(a1 + 4) * (float)v7), a2, (uint64_t)v10, v8);
    result = *(double *)v10;
    v9 = v10[1];
    *(_OWORD *)a3 = v10[0];
    *(_OWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 32) = v11;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t *v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  unint64_t *v45;
  BOOL v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  unint64_t *v61;
  unint64_t *v62;
  unsigned int v63;
  BOOL v64;
  BOOL v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  _BOOL4 v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  unint64_t *v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  unint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  unint64_t *v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  _QWORD *v111;
  int64_t v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  _BOOL4 v150;
  _BOOL4 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int v156;
  BOOL v157;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  _BOOL4 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  BOOL v169;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *((unsigned __int16 *)a2 - 1);
        v77 = *(unsigned __int16 *)(v8 + 6);
        v95 = v76 == v77;
        v78 = v76 > v77;
        if (v95)
          v78 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 4);
        if (v78)
        {
          v79 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v79;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v8, (unint64_t *)(v8 + 8), a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, (uint64_t)(a2 - 1));
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, v8 + 24);
        v80 = *((unsigned __int16 *)a2 - 1);
        v81 = *(unsigned __int16 *)(v8 + 30);
        v95 = v80 == v81;
        v82 = v80 > v81;
        if (v95)
          v82 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 28);
        if (v82)
        {
          v83 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(a2 - 1);
          *(a2 - 1) = v83;
          LODWORD(v83) = *(unsigned __int16 *)(v8 + 30);
          v84 = *(unsigned __int16 *)(v8 + 22);
          v95 = (_DWORD)v83 == v84;
          v85 = v83 > v84;
          if (v95)
            v85 = *(unsigned __int16 *)(v8 + 28) > *(unsigned __int16 *)(v8 + 20);
          if (v85)
          {
            v87 = *(_QWORD *)(v8 + 16);
            v86 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v86;
            *(_QWORD *)(v8 + 24) = v87;
            v88 = HIWORD(v86);
            v89 = *(unsigned __int16 *)(v8 + 14);
            v95 = v89 == HIWORD(v86);
            v90 = v89 < HIWORD(v86);
            if (v95)
              v90 = *(unsigned __int16 *)(v8 + 12) < WORD2(v86);
            if (v90)
            {
              v91 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v86;
              *(_QWORD *)(v8 + 16) = v91;
              LODWORD(v91) = *(unsigned __int16 *)(v8 + 6);
              v95 = (_DWORD)v91 == (_DWORD)v88;
              v92 = v91 < v88;
              if (v95)
                v92 = *(unsigned __int16 *)(v8 + 4) < WORD2(v86);
              if (v92)
              {
                v93 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v86;
                *(_QWORD *)(v8 + 8) = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v94 = (unint64_t *)(v8 + 8);
          v95 = (unint64_t *)v8 == a2 || v94 == a2;
          v96 = v95;
          if ((a4 & 1) != 0)
          {
            if ((v96 & 1) == 0)
            {
              v97 = 0;
              v98 = (_QWORD *)v8;
              do
              {
                v99 = *((unsigned __int16 *)v98 + 7);
                v100 = *((unsigned __int16 *)v98 + 3);
                v101 = *((unsigned __int16 *)v98 + 6);
                v102 = *((unsigned __int16 *)v98 + 2);
                v98 = v94;
                v103 = v101 > v102;
                v95 = v99 == v100;
                v104 = v99 > v100;
                if (!v95)
                  v103 = v104;
                if (v103)
                {
                  v105 = *v98;
                  v106 = HIWORD(*v98);
                  v107 = v97;
                  while (1)
                  {
                    v108 = v8 + v107;
                    *(_QWORD *)(v8 + v107 + 8) = *(_QWORD *)(v8 + v107);
                    if (!v107)
                      break;
                    v109 = *(unsigned __int16 *)(v108 - 2);
                    v110 = *(unsigned __int16 *)(v108 - 4) < WORD2(v105);
                    if (v109 != (_DWORD)v106)
                      v110 = v109 < v106;
                    v107 -= 8;
                    if (!v110)
                    {
                      v111 = (_QWORD *)(v8 + v107 + 8);
                      goto LABEL_118;
                    }
                  }
                  v111 = (_QWORD *)v8;
LABEL_118:
                  *v111 = v105;
                }
                v94 = v98 + 1;
                v97 += 8;
              }
              while (v98 + 1 != a2);
            }
          }
          else if ((v96 & 1) == 0)
          {
            do
            {
              v159 = *(unsigned __int16 *)(v7 + 14);
              v160 = *(unsigned __int16 *)(v7 + 6);
              v161 = *(unsigned __int16 *)(v7 + 12);
              v162 = *(unsigned __int16 *)(v7 + 4);
              v7 = (uint64_t)v94;
              v95 = v159 == v160;
              v163 = v159 > v160;
              if (v95)
                v163 = v161 > v162;
              if (v163)
              {
                v164 = *v94;
                v165 = HIWORD(*v94);
                do
                {
                  v166 = v94;
                  v167 = *--v94;
                  *v166 = v167;
                  v168 = *((unsigned __int16 *)v166 - 5);
                  v169 = *((unsigned __int16 *)v166 - 6) < WORD2(v164);
                  if (v168 != (_DWORD)v165)
                    v169 = v168 < v165;
                }
                while (v169);
                *v94 = v164;
              }
              v94 = (unint64_t *)(v7 + 8);
            }
            while ((unint64_t *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v112 = (v10 - 2) >> 1;
            v113 = v112;
            do
            {
              v114 = v113;
              if (v112 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = v8 + 8 * v115;
                if (2 * v114 + 2 < (uint64_t)v10)
                {
                  v117 = *(unsigned __int16 *)(v116 + 6);
                  v118 = *(unsigned __int16 *)(v116 + 14);
                  result = *(unsigned __int16 *)(v116 + 12);
                  v95 = v117 == v118;
                  v119 = v117 > v118;
                  if (v95)
                    v119 = *(unsigned __int16 *)(v116 + 4) > result;
                  v116 += 8 * v119;
                  if (v119)
                    v115 = 2 * v114 + 2;
                }
                v120 = *(unsigned __int16 *)(v116 + 6);
                v121 = v8 + 8 * v114;
                v122 = *(unsigned __int16 *)(v121 + 6);
                v123 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v121 + 4);
                v95 = v120 == v122;
                v124 = v120 > v122;
                if (v95)
                  v124 = v123;
                if (!v124)
                {
                  v125 = (_QWORD *)(v8 + 8 * v114);
                  v126 = *v125;
                  v127 = HIWORD(*v125);
                  do
                  {
                    v128 = v125;
                    v125 = (_QWORD *)v116;
                    *v128 = *(_QWORD *)v116;
                    if (v112 < v115)
                      break;
                    v129 = (2 * v115) | 1;
                    v116 = v8 + 8 * v129;
                    v130 = 2 * v115 + 2;
                    if (v130 < (uint64_t)v10)
                    {
                      v131 = *(unsigned __int16 *)(v116 + 6);
                      v132 = *(unsigned __int16 *)(v116 + 14);
                      v95 = v131 == v132;
                      v133 = v131 > v132;
                      if (v95)
                        v133 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v116 + 12);
                      v116 += 8 * v133;
                      if (v133)
                        v129 = v130;
                    }
                    v134 = *(unsigned __int16 *)(v116 + 6);
                    v95 = v134 == (_DWORD)v127;
                    LODWORD(result) = v134 > v127;
                    result = v95 ? *(unsigned __int16 *)(v116 + 4) > WORD2(v126) : result;
                    v115 = v129;
                  }
                  while ((_DWORD)result != 1);
                  *v125 = v126;
                }
              }
              v113 = v114 - 1;
            }
            while (v114);
            v135 = (unint64_t)v9 >> 3;
            do
            {
              v136 = 0;
              v137 = *(_QWORD *)v8;
              v138 = (_QWORD *)v8;
              do
              {
                v139 = &v138[v136 + 1];
                v140 = (2 * v136) | 1;
                v141 = 2 * v136 + 2;
                if (v141 < v135)
                {
                  v142 = *((unsigned __int16 *)v139 + 3);
                  v143 = *((unsigned __int16 *)v139 + 7);
                  result = *((unsigned __int16 *)v139 + 6);
                  v95 = v142 == v143;
                  v144 = v142 > v143;
                  if (v95)
                    v144 = *((unsigned __int16 *)v139 + 2) > result;
                  v139 += v144;
                  if (v144)
                    v140 = v141;
                }
                *v138 = *v139;
                v138 = v139;
                v136 = v140;
              }
              while (v140 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
              if (v139 == --a2)
              {
                *v139 = v137;
              }
              else
              {
                *v139 = *a2;
                *a2 = v137;
                v145 = (uint64_t)v139 - v8 + 8;
                if (v145 >= 9)
                {
                  v146 = (((unint64_t)v145 >> 3) - 2) >> 1;
                  v147 = v8 + 8 * v146;
                  v148 = *(unsigned __int16 *)(v147 + 6);
                  v149 = *((unsigned __int16 *)v139 + 3);
                  v150 = *(unsigned __int16 *)(v147 + 4) > *((unsigned __int16 *)v139 + 2);
                  v95 = v148 == v149;
                  v151 = v148 > v149;
                  if (!v95)
                    v150 = v151;
                  if (v150)
                  {
                    v152 = *v139;
                    v153 = HIWORD(*v139);
                    do
                    {
                      v154 = v139;
                      v139 = (unint64_t *)(v8 + 8 * v146);
                      *v154 = *v139;
                      if (!v146)
                        break;
                      v146 = (v146 - 1) >> 1;
                      v155 = v8 + 8 * v146;
                      v156 = *(unsigned __int16 *)(v155 + 6);
                      v157 = *(unsigned __int16 *)(v155 + 4) > WORD2(v152);
                      if (v156 != (_DWORD)v153)
                        v157 = v156 > v153;
                    }
                    while (v157);
                    *v139 = v152;
                  }
                }
              }
            }
            while (v135-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8 * (v10 >> 1)), (unint64_t *)v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v7, (unint64_t *)(v7 + 8 * (v10 >> 1)), a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8), v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 16), (unint64_t *)(v7 + 8 + 8 * v11), a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v12 - 1, v12, (unint64_t *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(unsigned __int16 *)(v7 - 2);
          v15 = *(unsigned __int16 *)(v7 + 6);
          v95 = v14 == v15;
          v16 = v14 > v15;
          if (v95)
            v16 = *(unsigned __int16 *)(v7 - 4) > *(unsigned __int16 *)(v7 + 4);
          if (!v16)
          {
            v47 = *(_QWORD *)v7;
            v48 = (unsigned __int16)WORD2(*(_QWORD *)v7);
            v49 = HIWORD(*(_QWORD *)v7);
            v50 = *((unsigned __int16 *)a2 - 1);
            v51 = *((unsigned __int16 *)a2 - 2) < v48;
            v95 = v50 == (_DWORD)v49;
            v52 = v50 < v49;
            if (!v95)
              v51 = v52;
            if (v51)
            {
              v53 = v7;
              do
              {
                v8 = v53 + 8;
                v54 = *(unsigned __int16 *)(v53 + 14);
                v55 = *(unsigned __int16 *)(v53 + 12) < v48;
                v95 = v54 == (_DWORD)v49;
                v56 = v54 < v49;
                if (v95)
                  v56 = v55;
                v53 = v8;
              }
              while (!v56);
            }
            else
            {
              v57 = v7 + 8;
              do
              {
                v8 = v57;
                if (v57 >= (unint64_t)a2)
                  break;
                v58 = *(unsigned __int16 *)(v57 + 6);
                v59 = *(unsigned __int16 *)(v8 + 4) < v48;
                v95 = v58 == (_DWORD)v49;
                v60 = v58 < v49;
                if (!v95)
                  v59 = v60;
                v57 = v8 + 8;
              }
              while (!v59);
            }
            v61 = a2;
            if (v8 < (unint64_t)a2)
            {
              v62 = a2;
              do
              {
                v61 = v62 - 1;
                v63 = *((unsigned __int16 *)v62 - 1);
                v64 = *((unsigned __int16 *)v62 - 2) < v48;
                v95 = v63 == (_DWORD)v49;
                v65 = v63 < v49;
                if (v95)
                  v65 = v64;
                v62 = v61;
              }
              while (v65);
            }
            while (v8 < (unint64_t)v61)
            {
              v66 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *v61;
              *v61 = v66;
              do
              {
                v67 = *(unsigned __int16 *)(v8 + 14);
                v68 = *(unsigned __int16 *)(v8 + 12);
                v8 += 8;
                v69 = v68 < v48;
                v95 = v67 == (_DWORD)v49;
                v70 = v67 < v49;
                if (v95)
                  v70 = v69;
              }
              while (!v70);
              do
              {
                v71 = *((unsigned __int16 *)v61 - 1);
                v72 = *((unsigned __int16 *)v61-- - 2);
                v73 = v72 < v48;
                v95 = v71 == (_DWORD)v49;
                v74 = v71 < v49;
                if (v95)
                  v74 = v73;
              }
              while (v74);
            }
            v75 = (unint64_t *)(v8 - 8);
            if (v8 - 8 != v7)
              *(_QWORD *)v7 = *v75;
            a4 = 0;
            *v75 = v47;
            continue;
          }
        }
        v17 = 0;
        v18 = *(_QWORD *)v7;
        v19 = (unsigned __int16)WORD2(*(_QWORD *)v7);
        v20 = HIWORD(*(_QWORD *)v7);
        do
        {
          v21 = *(unsigned __int16 *)(v7 + v17 + 14);
          v22 = *(unsigned __int16 *)(v7 + v17 + 12) > v19;
          v95 = v21 == (_DWORD)v20;
          v23 = v21 > v20;
          if (!v95)
            v22 = v23;
          v17 += 8;
        }
        while (v22);
        v24 = v7 + v17;
        v25 = a2;
        if (v17 == 8)
        {
          v30 = a2;
          while (v24 < (unint64_t)v30)
          {
            v26 = v30 - 1;
            v31 = *((unsigned __int16 *)v30 - 1);
            v32 = *((unsigned __int16 *)v30 - 2) > v19;
            v95 = v31 == (_DWORD)v20;
            v33 = v31 > v20;
            if (v95)
              v33 = v32;
            v30 = v26;
            if (v33)
              goto LABEL_29;
          }
          v26 = v30;
        }
        else
        {
          do
          {
            v26 = v25 - 1;
            v27 = *((unsigned __int16 *)v25 - 1);
            v28 = *((unsigned __int16 *)v25 - 2) > v19;
            v95 = v27 == (_DWORD)v20;
            v29 = v27 > v20;
            if (v95)
              v29 = v28;
            v25 = v26;
          }
          while (!v29);
        }
LABEL_29:
        if (v24 >= (unint64_t)v26)
        {
          v45 = (unint64_t *)(v24 - 8);
        }
        else
        {
          v34 = v24;
          v35 = v26;
          do
          {
            v36 = *(_QWORD *)v34;
            *(_QWORD *)v34 = *v35;
            *v35 = v36;
            do
            {
              v37 = *(unsigned __int16 *)(v34 + 14);
              v38 = *(unsigned __int16 *)(v34 + 12);
              v34 += 8;
              v39 = v38 > v19;
              v95 = v37 == (_DWORD)v20;
              v40 = v37 > v20;
              if (v95)
                v40 = v39;
            }
            while (v40);
            do
            {
              v41 = *((unsigned __int16 *)v35 - 1);
              v42 = *((unsigned __int16 *)v35-- - 2);
              v43 = v42 > v19;
              v95 = v41 == (_DWORD)v20;
              v44 = v41 > v20;
              if (v95)
                v44 = v43;
            }
            while (!v44);
          }
          while (v34 < (unint64_t)v35);
          v45 = (unint64_t *)(v34 - 8);
        }
        if (v45 != (unint64_t *)v7)
          *(_QWORD *)v7 = *v45;
        *v45 = v18;
        if (v24 < (unint64_t)v26)
        {
LABEL_46:
          result = std::__introsort<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *,false>(v7, v45, a3, a4 & 1);
          a4 = 0;
          v8 = (unint64_t)(v45 + 1);
          continue;
        }
        v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *>(v7, (uint64_t)v45);
        v8 = (unint64_t)(v45 + 1);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *>((uint64_t)(v45 + 1), (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v46)
            continue;
          goto LABEL_46;
        }
        a2 = v45;
        if (!v46)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  unint64_t v38;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(unsigned __int16 *)(a2 - 2);
      v7 = *(unsigned __int16 *)(a1 + 6);
      v8 = v6 == v7;
      v9 = v6 > v7;
      if (v8)
        v9 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(unsigned __int16 *)(a2 - 2);
      v26 = *(unsigned __int16 *)(a1 + 30);
      v8 = v25 == v26;
      v27 = v25 > v26;
      if (v8)
        v27 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 28);
      if (v27)
      {
        v28 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v28;
        LODWORD(v28) = *(unsigned __int16 *)(a1 + 30);
        v29 = *(unsigned __int16 *)(a1 + 22);
        v8 = (_DWORD)v28 == v29;
        v30 = v28 > v29;
        if (v8)
          v30 = *(unsigned __int16 *)(a1 + 28) > *(unsigned __int16 *)(a1 + 20);
        if (v30)
        {
          v32 = *(_QWORD *)(a1 + 16);
          v31 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v31;
          *(_QWORD *)(a1 + 24) = v32;
          v33 = HIWORD(v31);
          v34 = *(unsigned __int16 *)(a1 + 14);
          v8 = v34 == HIWORD(v31);
          v35 = v34 < HIWORD(v31);
          if (v8)
            v35 = *(unsigned __int16 *)(a1 + 12) < WORD2(v31);
          if (v35)
          {
            v36 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 16) = v36;
            LODWORD(v36) = *(unsigned __int16 *)(a1 + 6);
            v8 = (_DWORD)v36 == (_DWORD)v33;
            v37 = v36 < v33;
            if (v8)
              v37 = *(unsigned __int16 *)(a1 + 4) < WORD2(v31);
            if (v37)
            {
              v38 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v31;
              *(_QWORD *)(a1 + 8) = v38;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a1 + 16));
      v12 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int16 *)(v12 + 6);
    v16 = *(unsigned __int16 *)(v11 + 6);
    v8 = v15 == v16;
    v17 = v15 > v16;
    if (v8)
      v17 = *(unsigned __int16 *)(v12 + 4) > *(unsigned __int16 *)(v11 + 4);
    if (v17)
    {
      v18 = *(_QWORD *)v12;
      v19 = HIWORD(*(_QWORD *)v12);
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_QWORD *)(a1 + v20 + 24) = *(_QWORD *)(a1 + v20 + 16);
        if (v20 == -16)
          break;
        v22 = *(unsigned __int16 *)(v21 + 14);
        v23 = *(unsigned __int16 *)(v21 + 12) < WORD2(v18);
        if (v22 != (_DWORD)v19)
          v23 = v22 < v19;
        v20 -= 8;
        if (!v23)
        {
          v24 = (_QWORD *)(a1 + v20 + 24);
          goto LABEL_19;
        }
      }
      v24 = (_QWORD *)a1;
LABEL_19:
      *v24 = v18;
      if (++v14 == 8)
        return v12 + 8 == a2;
    }
    v11 = v12;
    v13 += 8;
    v12 += 8;
    if (v12 == a2)
      return 1;
  }
}

void shazam::link_bands<(AlgoType)12>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  void (*v17)(void **__return_ptr, unint64_t);
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  char *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  _DWORD *v40;
  unsigned int v41;
  char *v42;
  unint64_t v43;
  void **v44;
  unint64_t v45;
  uint64_t v46;
  gsl::details *v47;
  uint64_t v48;
  int v49;
  double v50;
  void **v51;
  uint64_t v52;
  gsl::details *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  __int128 v78;
  char *v79;
  _QWORD v80[5];
  char v81;
  _OWORD v82[2];
  uint64_t v83;
  void *v84;
  _DWORD *v85;
  uint64_t v86;
  void **v87;
  void **v88;
  void **v89;
  void *__p[242];

  __p[240] = *(void **)MEMORY[0x24BDAC8D0];
  v78 = 0uLL;
  v79 = 0;
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve((void **)&v78, a5);
  v83 = 0;
  memset(v82, 0, sizeof(v82));
  shazam::matrix_for<(AlgoType)12,(void *)0>(a4, a3, (uint64_t)v82);
  shazam::algo<(AlgoType)12>::tzones_for ((uint64_t)v80);
  v9 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) >= 3)
  {
    v65 = a6;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve(&v84, 0x64uLL);
    v11 = *a2;
    v10 = a2[1];
    if (v10 != *a2)
    {
      v12 = 0;
      do
      {
        v13 = (char *)v82 + 4 * v12;
        v16 = *((_DWORD *)v13 + 2);
        v15 = (unsigned int *)(v13 + 8);
        v14 = v16;
        if (v16)
        {
          v17 = *(void (**)(void **__return_ptr, unint64_t))(a1 + 8);
          if (v17)
          {
            v17(__p, v11 + 24 * v12);
            chooseAnchors((uint64_t *)__p, *v15, v82, (uint64_t)&v84);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            chooseAnchors((uint64_t *)(v11 + 24 * v12), v14, v82, (uint64_t)&v84);
          }
          v11 = *v9;
          v10 = v9[1];
          if (v10 == *v9)
          {
            v11 = v9[1];
          }
          else
          {
            v18 = 0;
            v66 = 4 * v12;
            v67 = v12;
            do
            {
              v70 = v18;
              v19 = (char *)v82 + 4 * v12 + v18;
              v21 = v19[24];
              v20 = (unsigned __int8 *)(v19 + 24);
              v77 = v21;
              if (v21)
              {
                if (v81)
                {
                  LODWORD(__p[0]) = v66 + v18;
                  if (std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v80, (int *)__p))
                  {
                    v22 = std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::find<int>(v80, (int *)__p);
                    if (!v22)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    v75 = *(uint64_t *)((char *)v22 + 20);
                    v23 = v75 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    v23 = 0;
                    LODWORD(v75) = 0;
                  }
                  v11 = *v9;
                  v77 = *v20;
                }
                else
                {
                  v23 = 0;
                  LODWORD(v75) = 0;
                }
                v24 = *(char **)(v11 + 24 * v70);
                bzero(__p, 0x780uLL);
                v25 = v84;
                v74 = v85;
                if (v84 != v85)
                {
                  v72 = (uint64_t *)(v11 + 24 * v70 + 8);
                  v73 = HIDWORD(v23);
                  if ((_DWORD)v75)
                    v26 = HIDWORD(v23) == 0;
                  else
                    v26 = 1;
                  v27 = v26;
                  v71 = v27;
                  do
                  {
                    v28 = *v25 + 8;
                    if (v71)
                    {
                      v29 = *v25 + 197;
                    }
                    else
                    {
                      v28 = *v25 + v75;
                      v29 = v28 + v73;
                    }
                    v30 = (char *)*v72;
                    if ((char *)*v72 == v24)
                    {
                      v37 = *v72;
                    }
                    else
                    {
                      v31 = (*v72 - (uint64_t)v24) >> 3;
                      do
                      {
                        v32 = v31 >> 1;
                        v33 = (unsigned int *)&v24[8 * (v31 >> 1)];
                        v35 = *v33;
                        v34 = (char *)(v33 + 2);
                        v31 += ~(v31 >> 1);
                        if (v35 < v28)
                          v24 = v34;
                        else
                          v31 = v32;
                      }
                      while (v31);
                      if (v30 == v24)
                      {
                        v37 = *v72;
                        v42 = v24;
                        v24 = (char *)*v72;
                        v30 = v42;
                      }
                      else
                      {
                        v36 = (v30 - v24) >> 3;
                        v37 = (uint64_t)v24;
                        do
                        {
                          v38 = v36 >> 1;
                          v39 = (unsigned int *)(v37 + 8 * (v36 >> 1));
                          v41 = *v39;
                          v40 = v39 + 2;
                          v36 += ~(v36 >> 1);
                          if (v41 < v29)
                            v37 = (uint64_t)v40;
                          else
                            v36 = v38;
                        }
                        while (v36);
                        v30 = v24;
                      }
                    }
                    v43 = (v37 - (uint64_t)v30) >> 3;
                    gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,0>((gsl::details *)&v87, (uint64_t)v24, v37);
                    if (v43 <= v77)
                    {
                      v43 = (unint64_t)v87;
                      v44 = v88;
                    }
                    else
                    {
                      if (v24 != (char *)v37)
                        memmove(__p, v24, v37 - (_QWORD)v30);
                      v44 = __p;
                      v45 = 126 - 2 * __clz(v43);
                      if ((char *)v37 == v30)
                        v46 = 0;
                      else
                        v46 = v45;
                      v47 = (gsl::details *)std::__introsort<std::_ClassicAlgPolicy,$_3 &,spectral_peak_t *,false>((uint64_t)__p, (unint64_t *)&__p[v43], v46, 1);
                      if (v37 - (_QWORD)v30 == -8)
LABEL_91:
                        gsl::details::terminate(v47);
                    }
                    v76 = v25;
                    v48 = *(_QWORD *)v25;
                    v49 = 0;
                    v50 = FreqLogTable::at((FreqLogTable *)WORD2(v48));
                    v51 = &v44[v43];
                    v87 = v44;
                    v88 = v51;
                    v89 = v44;
                    LODWORD(v43) = 2 * (((v50 + -3.46573591) * 3103.75977) & 0x3FFF);
                    v52 = v48 << 32;
                    while (v89 != v51)
                    {
                      v53 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v87);
                      v43 = v43 & 0x7FFF | (((int)((v50
                                                  - FreqLogTable::at((FreqLogTable *)*((unsigned __int16 *)v53 + 2)))
                                                 * 151.569275) & 0x3FFu) << 15) | ((float)((float)(sqrtf((float)((float)((float)WORD2(v48) * 7.8125) * 0.015625) * (float)(*(_DWORD *)v53 - v48)) / 830.36) * 120.0) << 25);
                      v54 = WORD2(v48) - *((unsigned __int16 *)v53 + 2);
                      if (v54 < 0)
                        v54 = *((unsigned __int16 *)v53 + 2) - WORD2(v48);
                      if (v54 >= 0x101)
                      {
                        v55 = *((_QWORD *)&v78 + 1);
                        if (*((_QWORD *)&v78 + 1) >= (unint64_t)v79)
                        {
                          v57 = (uint64_t)(*((_QWORD *)&v78 + 1) - v78) >> 3;
                          if ((unint64_t)(v57 + 1) >> 61)
                            std::vector<char>::__throw_length_error[abi:ne180100]();
                          v58 = (uint64_t)&v79[-v78] >> 2;
                          if (v58 <= v57 + 1)
                            v58 = v57 + 1;
                          if ((unint64_t)&v79[-v78] >= 0x7FFFFFFFFFFFFFF8)
                            v59 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v59 = v58;
                          if (v59)
                            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)&v79, v59);
                          else
                            v60 = 0;
                          v61 = (unint64_t *)&v60[8 * v57];
                          *v61 = v52 | v43;
                          v56 = v61 + 1;
                          v62 = (char *)*((_QWORD *)&v78 + 1);
                          v63 = (char *)v78;
                          if (*((_QWORD *)&v78 + 1) != (_QWORD)v78)
                          {
                            do
                            {
                              v64 = *((_QWORD *)v62 - 1);
                              v62 -= 8;
                              *--v61 = v64;
                            }
                            while (v62 != v63);
                            v62 = (char *)v78;
                          }
                          *(_QWORD *)&v78 = v61;
                          *((_QWORD *)&v78 + 1) = v56;
                          v79 = &v60[8 * v59];
                          if (v62)
                            operator delete(v62);
                        }
                        else
                        {
                          **((_QWORD **)&v78 + 1) = v52 | v43;
                          v56 = (_QWORD *)(v55 + 8);
                        }
                        *((_QWORD *)&v78 + 1) = v56;
                        if (v77 == ++v49)
                          break;
                      }
                      v47 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v87);
                      if (v87 != v44 || v88 != v51)
                        goto LABEL_91;
                    }
                    v25 = v76 + 2;
                  }
                  while (v76 + 2 != v74);
                  v11 = *a2;
                }
                v9 = a2;
                v10 = a2[1];
                v12 = v67;
              }
              v18 = v70 + 1;
            }
            while (v70 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
          }
        }
        ++v12;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
    }
    a6 = v65;
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
  }
  if (v81)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table((uint64_t)v80);
  *(_OWORD *)a6 = v78;
  *(_QWORD *)(a6 + 16) = v79;
}

void sub_218C4E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table((uint64_t)&a29);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

double shazam::matrix_for<(AlgoType)12,(void *)0>@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  unint64_t v7;
  uint8x8_t v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  shazam::algo<(AlgoType)12>::matrix_for (a3);
  result = fabs(*(float *)(a1 + 4) + -1.0);
  if (result > 0.01)
  {
    v7 = shazam::targetFP((unsigned int *)a3, a2);
    shazam::reframe_matrix(a3, (float)(*(float *)(a1 + 4) * (float)v7), a2, (uint64_t)v10, v8);
    result = *(double *)v10;
    v9 = v10[1];
    *(_OWORD *)a3 = v10[0];
    *(_OWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 32) = v11;
  }
  return result;
}

__n128 shazam::kvsort<gsl::span<shazam::lmfp<(shazam::fp_type)0>,18446744073709551615ul>>(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  __n128 *v3;
  __n128 result;
  unint64_t v5;
  __n128 *v6;
  __n128 *v7;
  gsl::details *v8;
  uint64_t v9;
  uint64_t v10;
  gsl::details *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[4096];
  uint64_t v32;

  result.n128_u64[0] = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v32 = *MEMORY[0x24BDAC8D0];
  v5 = v2->n128_u64[0];
  if (v2->n128_u64[0] >= 2)
  {
    v6 = v3;
    v7 = v2;
    bzero(v31, 0x1000uLL);
    v9 = v7->n128_i64[1];
    v10 = v9 + 8 * v5;
    v28 = v9;
    v29 = v10;
    v30 = v9;
    while (v30 != v10)
    {
      v11 = gsl::details::span_iterator<shazam::tfmatch const>::operator*((gsl::details *)&v28);
      v12 = 0;
      v13 = v31;
      do
      {
        ++*(_DWORD *)&v13[4 * *((unsigned __int8 *)v11 + v12++)];
        v13 += 1024;
      }
      while (v12 != 4);
      v8 = gsl::details::span_iterator<spectral_peak_t const>::operator++((gsl::details *)&v28);
      if (v28 != v9 || v29 != v10)
        goto LABEL_10;
    }
    v15 = 0;
    v16 = v31;
    do
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = *(_DWORD *)&v16[v17];
        *(_DWORD *)&v16[v17] = v18;
        v18 += v19;
        v17 += 4;
      }
      while (v17 != 1024);
      ++v15;
      v16 += 1024;
    }
    while (v15 != 4);
    v20 = 0;
    v21 = v7->n128_u64[0];
    while (!v21)
    {
LABEL_21:
      result = *v7;
      *v7 = *v6;
      *v6 = result;
      if (++v20 == 4)
        return result;
    }
    v22 = 0;
    v23 = &v31[1024 * v20];
    v24 = v20;
    while (v7->n128_u64[0] > v22)
    {
      v25 = v7->n128_i64[1];
      v26 = *(unsigned __int8 *)(v25 + v24);
      v27 = *(unsigned int *)&v23[4 * v26];
      *(_DWORD *)&v23[4 * v26] = v27 + 1;
      if (v6->n128_u64[0] <= v27)
        break;
      *(_QWORD *)(v6->n128_u64[1] + 8 * v27) = *(_QWORD *)(v25 + 8 * v22++);
      v24 += 8;
      if (v21 == v22)
        goto LABEL_21;
    }
LABEL_10:
    gsl::details::terminate(v8);
  }
  return result;
}

char *std::vector<SearchPlan>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SearchPlan>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SearchPlan>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

_QWORD *std::vector<std::vector<char>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<spectral_peak_t>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_218C4E954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6shazam12SongDataBaseENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0xA8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6shazam12SongDataBaseENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_218C4E99C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN6shazam12SongDataBaseENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24D9B7628;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  shazam::SongDataBase::SongDataBase((shazam::SongDataBase *)(a1 + 24));
  return a1;
}

void sub_218C4EA0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<shazam::SongDataBase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<shazam::SongDataBase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A21574);
}

void std::__shared_ptr_emplace<shazam::SongDataBase>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<shazam::SongDataBase>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

shazam::SongDataBase *shazam::SongDataBase::SongDataBase(shazam::SongDataBase *this)
{
  _DWORD *v2;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = operator new(4uLL);
  *((_QWORD *)this + 9) = v2;
  *v2++ = 0;
  *((_QWORD *)this + 10) = v2;
  *((_QWORD *)this + 11) = v2;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return this;
}

void sub_218C4EAD8(_Unwind_Exception *a1)
{
  shazam::TrackDatabase *v1;

  shazam::TrackDatabase::~TrackDatabase(v1);
  _Unwind_Resume(a1);
}

void shazam::TrackDatabase::~TrackDatabase(shazam::TrackDatabase *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void std::allocator<shazam::SongDataBase>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = *(void **)(a2 + 120);
  if (v3)
  {
    *(_QWORD *)(a2 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 96);
  if (v4)
  {
    *(_QWORD *)(a2 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 72);
  if (v5)
  {
    *(_QWORD *)(a2 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a2 + 48);
  if (v6)
  {
    *(_QWORD *)(a2 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a2 + 24);
  if (v7)
  {
    *(_QWORD *)(a2 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v8;
    operator delete(v8);
  }
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6shazam16CPUOnePtDatabaseENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6shazam16CPUOnePtDatabaseENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_218C4EBF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6shazam16CPUOnePtDatabaseENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24D9B7660;
  shazam::CPUOnePtDatabase::CPUOnePtDatabase((shazam::CPUOnePtDatabase *)(a1 + 3));
  return a1;
}

void sub_218C4EC3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<shazam::CPUOnePtDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<shazam::CPUOnePtDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A21574);
}

void std::__shared_ptr_emplace<shazam::CPUOnePtDatabase>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<shazam::CPUOnePtDatabase>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

shazam::CPUOnePtDatabase *shazam::CPUOnePtDatabase::CPUOnePtDatabase(shazam::CPUOnePtDatabase *this)
{
  _DWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;

  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, 1uLL);
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)*((_QWORD *)this + 4);
  v6 = &v2[v5];
  *v2 = 0;
  v7 = v2 + 1;
  while (v4 != v3)
  {
    v8 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *--v2 = v8;
  }
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = v6;
  if (v3)
    operator delete(v3);
  *((_QWORD *)this + 4) = v7;
  return this;
}

void sub_218C4ED2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  shazam::CPUOnePtDatabase::CPUOnePtDatabase(v1);
  _Unwind_Resume(a1);
}

void std::allocator<shazam::CPUOnePtDatabase>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void shazam::crop<(shazam::signature_density)16>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  std::vector<std::vector<spectral_peak_t>>::resize(&v18, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      gsl::span<spectral_peak_t const,18446744073709551615ul>::span<18446744073709551615ul,std::vector<spectral_peak_t>,0>((gsl::details *)&v16, (uint64_t *)(v8 + v9));
      shazam::crop_band<spectral_peak_t>(v16, *((uint64_t *)&v16 + 1), v18 + v9, a2, a3);
      ++v10;
      v8 = *(_QWORD *)(a1 + 32);
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v8) >> 3));
  }
  shazam::cropped_info(a1, a2, a3, (uint64_t)&v16);
  DWORD2(v17) = shazam::find_last_peak_tick((uint64_t)&v18);
  v14 = v16;
  v15 = v17;
  v13 = 0;
  v12 = 0uLL;
  std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(&v12, v18, v19, 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3));
  v11 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v11;
  *(_OWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  v12 = 0uLL;
  v13 = 0;
  v21 = (void **)&v12;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v21);
  *(_QWORD *)&v16 = &v18;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_218C4EF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a17 = (void **)&a21;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void std::vector<peak_tf>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::__shared_ptr_emplace<std::vector<shazam::CPULMFPDataBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<shazam::CPULMFPDataBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D9B7698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A21574);
}

void std::__shared_ptr_emplace<std::vector<shazam::CPULMFPDataBase>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<shazam::CPULMFPDataBase>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<shazam::CPULMFPDataBase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 13;
        std::allocator<shazam::CPULMFPDataBase>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<shazam::CPULMFPDataBase>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)a2[10];
  if (v3)
  {
    a2[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[7];
  if (v4)
  {
    a2[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a2[4];
  if (v5)
  {
    a2[5] = v5;
    operator delete(v5);
  }
}

uint64_t std::vector<shazam::CPULMFPDataBase>::__emplace_back_slow_path<SearchPlan &,std::vector<char> &>(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  void *v12;
  gsl::details *v13;
  char *v14;
  char *v15;
  uint64_t *v16;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v8 = 0x276276276276276;
  else
    v8 = v5;
  v16 = a1 + 2;
  if (v8)
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::CPULMFPDataBase>>((uint64_t)(a1 + 2), v8);
  else
    v9 = 0;
  v12 = v9;
  v13 = (gsl::details *)&v9[104 * v4];
  v15 = &v9[104 * v8];
  std::allocator<shazam::CPULMFPDataBase>::construct[abi:ne180100]<shazam::CPULMFPDataBase,SearchPlan &,std::vector<char> &>((gsl::details *)(a1 + 2), v13, a2, a3);
  v14 = (char *)v13 + 104;
  std::vector<shazam::CPULMFPDataBase>::__swap_out_circular_buffer(a1, &v12);
  v10 = a1[1];
  std::__split_buffer<shazam::CPULMFPDataBase>::~__split_buffer(&v12);
  return v10;
}

void sub_218C4F294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<shazam::CPULMFPDataBase>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<shazam::CPULMFPDataBase>::construct[abi:ne180100]<shazam::CPULMFPDataBase,SearchPlan &,std::vector<char> &>(gsl::details *a1, gsl::details *this, uint64_t a3, unint64_t *a4)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  v5 = *a4;
  v6 = a4[1];
  if (v6 - v5 == -1 || (!v5 ? (v7 = v6 == 0) : (v7 = 1), !v7))
    gsl::details::terminate(a1);
  return shazam::CPULMFPDataBase::CPULMFPDataBase((uint64_t)this, a3, v6 - v5, v5);
}

uint64_t shazam::CPULMFPDataBase::CPULMFPDataBase(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  __int128 v6;
  char v8;
  unint64_t v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  visit<shazam::CPULMFPDataBase::prefix_strip,gsl::span<char,18446744073709551615ul> &>(*(_DWORD *)(a2 + 28), (gsl::details *)&v8, v9, (std::vector<char> *)(a1 + 32));
  visit<shazam::CPULMFPDataBase::landmarks_init,gsl::span<char,18446744073709551615ul> &>(*(_DWORD *)(a2 + 28), (gsl::details *)&v8, v9, (std::vector<unsigned int> *)(a1 + 56));
  visit<shazam::CPULMFPDataBase::ptable_init,gsl::span<char,18446744073709551615ul> &>(*(_DWORD *)(a2 + 28), (gsl::details *)&v8, v9, (std::vector<unsigned int> *)(a1 + 80));
  return a1;
}

void sub_218C4F370(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void visit<shazam::CPULMFPDataBase::prefix_strip,gsl::span<char,18446744073709551615ul> &>(int a1@<W0>, gsl::details *a2@<X1>, unint64_t *a3@<X2>, std::vector<char> *a4@<X8>)
{
  if (a1 == 12)
  {
    shazam::CPULMFPDataBase::prefix_strip::operator()<(AlgoType)12>(a2, *a3, a3[1], a4);
  }
  else
  {
    if (a1 != 1)
      std::terminate();
    shazam::CPULMFPDataBase::prefix_strip::operator()<(AlgoType)1>(a2, *a3, a3[1], a4);
  }
}

void visit<shazam::CPULMFPDataBase::landmarks_init,gsl::span<char,18446744073709551615ul> &>(int a1@<W0>, gsl::details *a2@<X1>, unint64_t *a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  if (a1 == 12)
  {
    shazam::CPULMFPDataBase::landmarks_init::operator()<(AlgoType)12>(a2, *a3, a3[1], a4);
  }
  else
  {
    if (a1 != 1)
      std::terminate();
    shazam::CPULMFPDataBase::landmarks_init::operator()<(AlgoType)1>(a2, *a3, a3[1], a4);
  }
}

void visit<shazam::CPULMFPDataBase::ptable_init,gsl::span<char,18446744073709551615ul> &>(int a1@<W0>, gsl::details *a2@<X1>, unint64_t *a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  if (a1 == 12)
  {
    shazam::CPULMFPDataBase::ptable_init::operator()<(AlgoType)12>(a2, *a3, a3[1], a4);
  }
  else
  {
    if (a1 != 1)
      std::terminate();
    shazam::CPULMFPDataBase::ptable_init::operator()<(AlgoType)1>(a2, *a3, a3[1], a4);
  }
}

void shazam::CPULMFPDataBase::prefix_strip::operator()<(AlgoType)1>(gsl::details *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, std::vector<char> *a4@<X8>)
{
  unint64_t v4[2];

  if (a2)
  {
    if (a2 >= 8 && !a3)
      gsl::details::terminate(a1);
    v4[0] = a2 >> 3;
    v4[1] = a3;
    shazam::getLMFPSuffixes<(AlgoType)1>(v4, a4);
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
}

void shazam::CPULMFPDataBase::prefix_strip::operator()<(AlgoType)12>(gsl::details *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, std::vector<char> *a4@<X8>)
{
  unint64_t v4[2];

  if (a2)
  {
    if (a2 >= 8 && !a3)
      gsl::details::terminate(a1);
    v4[0] = a2 >> 3;
    v4[1] = a3;
    shazam::getLMFPSuffixes<(AlgoType)12>(v4, a4);
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
}

void shazam::getLMFPSuffixes<(AlgoType)1>(unint64_t *a1@<X0>, std::vector<char> *a2@<X8>)
{
  unint64_t v4;
  _BYTE *v5;
  int *v6;
  _WORD *v7;
  int v8;
  size_t v9;
  std::vector<char>::pointer begin;
  void *__src;
  _BYTE *v12;
  uint64_t v13;

  __src = 0;
  v12 = 0;
  v13 = 0;
  std::vector<shazam::fp_suffix<(AlgoType)1>>::resize((uint64_t)&__src, *a1);
  v4 = *a1;
  v5 = __src;
  if (*a1)
  {
    v6 = (int *)a1[1];
    v7 = __src;
    do
    {
      v8 = *v6;
      v6 += 2;
      *v7++ = v8;
      --v4;
    }
    while (v4);
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v9 = v12 - v5;
  if (v12 == v5)
  {
    begin = 0;
  }
  else
  {
    std::vector<char>::__append(a2, v12 - v5);
    begin = a2->__begin_;
    v5 = __src;
  }
  memcpy(begin, v5, v9);
  if (__src)
  {
    v12 = __src;
    operator delete(__src);
  }
}

void sub_218C4F5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<shazam::fp_suffix<(AlgoType)1>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<shazam::fp_suffix<(AlgoType)1>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<shazam::fp_suffix<(AlgoType)1>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void shazam::getLMFPSuffixes<(AlgoType)12>(unint64_t *a1@<X0>, std::vector<char> *a2@<X8>)
{
  unint64_t v4;
  _BYTE *v5;
  int *v6;
  _WORD *v7;
  int v8;
  size_t v9;
  std::vector<char>::pointer begin;
  void *__src;
  _BYTE *v12;
  uint64_t v13;

  __src = 0;
  v12 = 0;
  v13 = 0;
  std::vector<shazam::fp_suffix<(AlgoType)1>>::resize((uint64_t)&__src, *a1);
  v4 = *a1;
  v5 = __src;
  if (*a1)
  {
    v6 = (int *)a1[1];
    v7 = __src;
    do
    {
      v8 = *v6;
      v6 += 2;
      *v7++ = v8;
      --v4;
    }
    while (v4);
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v9 = v12 - v5;
  if (v12 == v5)
  {
    begin = 0;
  }
  else
  {
    std::vector<char>::__append(a2, v12 - v5);
    begin = a2->__begin_;
    v5 = __src;
  }
  memcpy(begin, v5, v9);
  if (__src)
  {
    v12 = __src;
    operator delete(__src);
  }
}

void sub_218C4F7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void shazam::CPULMFPDataBase::landmarks_init::operator()<(AlgoType)1>(gsl::details *a1@<X0>, unint64_t a2@<X1>, std::vector<unsigned int>::size_type a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  std::vector<unsigned int>::size_type v4[2];

  if (a2)
  {
    if (a2 >= 8 && !a3)
      gsl::details::terminate(a1);
    v4[0] = a2 >> 3;
    v4[1] = a3;
    shazam::getLandmarks<(AlgoType)1>(v4, a4);
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
}

void shazam::CPULMFPDataBase::landmarks_init::operator()<(AlgoType)12>(gsl::details *a1@<X0>, unint64_t a2@<X1>, std::vector<unsigned int>::size_type a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  std::vector<unsigned int>::size_type v4[2];

  if (a2)
  {
    if (a2 >= 8 && !a3)
      gsl::details::terminate(a1);
    v4[0] = a2 >> 3;
    v4[1] = a3;
    shazam::getLandmarks<(AlgoType)12>(v4, a4);
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
}

void shazam::getLandmarks<(AlgoType)1>(std::vector<unsigned int>::size_type *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  std::vector<unsigned int>::size_type v4;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v6;
  unsigned int v7;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<shazam::signature_header_type>::resize(a2, *a1);
  v4 = *a1;
  if (*a1)
  {
    begin = a2->__begin_;
    v6 = (unsigned int *)(a1[1] + 4);
    do
    {
      v7 = *v6;
      v6 += 2;
      *begin++ = v7;
      --v4;
    }
    while (v4);
  }
}

void sub_218C4F8D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void shazam::getLandmarks<(AlgoType)12>(std::vector<unsigned int>::size_type *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  std::vector<unsigned int>::size_type v4;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v6;
  unsigned int v7;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<shazam::signature_header_type>::resize(a2, *a1);
  v4 = *a1;
  if (*a1)
  {
    begin = a2->__begin_;
    v6 = (unsigned int *)(a1[1] + 4);
    do
    {
      v7 = *v6;
      v6 += 2;
      *begin++ = v7;
      --v4;
    }
    while (v4);
  }
}

void sub_218C4F944(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void shazam::CPULMFPDataBase::ptable_init::operator()<(AlgoType)1>(gsl::details *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  unint64_t v4[2];

  if (a2)
  {
    if (a2 >= 8 && !a3)
      gsl::details::terminate(a1);
    v4[0] = a2 >> 3;
    v4[1] = a3;
    shazam::genPrefixTable<(AlgoType)1>(v4, a4);
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
}

void shazam::CPULMFPDataBase::ptable_init::operator()<(AlgoType)12>(gsl::details *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  unint64_t v4[2];

  if (a2)
  {
    if (a2 >= 8 && !a3)
      gsl::details::terminate(a1);
    v4[0] = a2 >> 3;
    v4[1] = a3;
    shazam::genPrefixTable<(AlgoType)12>(v4, a4);
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
}

void shazam::genPrefixTable<(AlgoType)1>(unint64_t *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  gsl::details *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  _DWORD *v16;
  std::vector<unsigned int>::pointer begin;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<shazam::signature_header_type>::resize(a2, 0x40000uLL);
  v5 = *a1;
  if (!*a1)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
LABEL_29:
    begin = a2->__begin_;
    v6 = v6;
    do
      begin[v6++] = v7;
    while ((_DWORD)v6 != 0x40000);
    return;
  }
  LODWORD(v6) = 0;
  v7 = 0;
  v8 = *a1;
  do
  {
    if (v5 <= v7)
LABEL_32:
      gsl::details::terminate(v4);
    v9 = (unsigned int *)(a1[1] + 8 * v7);
    v10 = a2->__begin_;
    v11 = v6;
    if (v6 < 0x40000)
      LODWORD(v6) = 0x3FFFF;
    LODWORD(v6) = v6 + 1;
    if (v11 < 0x40000)
      v12 = 0x3FFFFLL;
    else
      v12 = v11;
    v13 = v12 + 1;
    while (v11 <= (unint64_t)*v9 >> 14)
    {
      v10[v11++] = v7;
      if (v13 == v11)
        goto LABEL_14;
    }
    LODWORD(v6) = v11;
LABEL_14:
    v14 = v6 >> 18;
    if (v7 < v8)
    {
      if (v5 <= v7)
        v15 = v7;
      else
        v15 = v5;
      v16 = (_DWORD *)(a1[1] + 8 * v7);
      while (1)
      {
        if (v15 == v7)
          goto LABEL_32;
        if (v6 <= *v16 >> 14)
          break;
        ++v7;
        v16 += 2;
        if (v8 == v7)
        {
          LODWORD(v7) = v5;
          goto LABEL_26;
        }
      }
      v7 = v7;
    }
  }
  while (!v14 && v7 < v8);
LABEL_26:
  if (!v14)
    goto LABEL_29;
}

void sub_218C4FB20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void shazam::genPrefixTable<(AlgoType)12>(unint64_t *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  gsl::details *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  _DWORD *v16;
  std::vector<unsigned int>::pointer begin;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<shazam::signature_header_type>::resize(a2, 0x40000uLL);
  v5 = *a1;
  if (!*a1)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
LABEL_29:
    begin = a2->__begin_;
    v6 = v6;
    do
      begin[v6++] = v7;
    while ((_DWORD)v6 != 0x40000);
    return;
  }
  LODWORD(v6) = 0;
  v7 = 0;
  v8 = *a1;
  do
  {
    if (v5 <= v7)
LABEL_32:
      gsl::details::terminate(v4);
    v9 = (unsigned int *)(a1[1] + 8 * v7);
    v10 = a2->__begin_;
    v11 = v6;
    if (v6 < 0x40000)
      LODWORD(v6) = 0x3FFFF;
    LODWORD(v6) = v6 + 1;
    if (v11 < 0x40000)
      v12 = 0x3FFFFLL;
    else
      v12 = v11;
    v13 = v12 + 1;
    while (v11 <= (unint64_t)*v9 >> 14)
    {
      v10[v11++] = v7;
      if (v13 == v11)
        goto LABEL_14;
    }
    LODWORD(v6) = v11;
LABEL_14:
    v14 = v6 >> 18;
    if (v7 < v8)
    {
      if (v5 <= v7)
        v15 = v7;
      else
        v15 = v5;
      v16 = (_DWORD *)(a1[1] + 8 * v7);
      while (1)
      {
        if (v15 == v7)
          goto LABEL_32;
        if (v6 <= *v16 >> 14)
          break;
        ++v7;
        v16 += 2;
        if (v8 == v7)
        {
          LODWORD(v7) = v5;
          goto LABEL_26;
        }
      }
      v7 = v7;
    }
  }
  while (!v14 && v7 < v8);
LABEL_26:
  if (!v14)
    goto LABEL_29;
}

void sub_218C4FC6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<shazam::CPULMFPDataBase>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<shazam::CPULMFPDataBase>,std::reverse_iterator<shazam::CPULMFPDataBase*>,std::reverse_iterator<shazam::CPULMFPDataBase*>,std::reverse_iterator<shazam::CPULMFPDataBase*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::CPULMFPDataBase>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<shazam::CPULMFPDataBase>,std::reverse_iterator<shazam::CPULMFPDataBase*>,std::reverse_iterator<shazam::CPULMFPDataBase*>,std::reverse_iterator<shazam::CPULMFPDataBase*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<shazam::CPULMFPDataBase>::construct[abi:ne180100]<shazam::CPULMFPDataBase,shazam::CPULMFPDataBase>(a1, v7 - 104, v9);
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<shazam::CPULMFPDataBase>,std::reverse_iterator<shazam::CPULMFPDataBase*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<shazam::CPULMFPDataBase>::construct[abi:ne180100]<shazam::CPULMFPDataBase,shazam::CPULMFPDataBase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  result = *(__n128 *)(a3 + 80);
  *(__n128 *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<shazam::CPULMFPDataBase>,std::reverse_iterator<shazam::CPULMFPDataBase*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<shazam::CPULMFPDataBase>,std::reverse_iterator<shazam::CPULMFPDataBase*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<shazam::CPULMFPDataBase>,std::reverse_iterator<shazam::CPULMFPDataBase*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<shazam::CPULMFPDataBase>::destroy[abi:ne180100](v3, v1);
      v1 += 13;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<shazam::CPULMFPDataBase>::~__split_buffer(void **a1)
{
  std::__split_buffer<shazam::CPULMFPDataBase>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<shazam::CPULMFPDataBase>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<shazam::CPULMFPDataBase>::destroy[abi:ne180100](v4, (_QWORD *)(i - 104));
  }
}

void shazam::CPUOnePtDatabase::CPUOnePtDatabase(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sig_extractor_pipe<spectral_peak_t>::sig_extractor_pipe(uint64_t a1, int a2, unsigned int a3, int a4)
{
  sig_stream *v8;
  int v9;
  int v10;
  void *v11;

  *(_QWORD *)a1 = &off_24D9B70F8;
  v8 = (sig_stream *)(a1 + 1632);
  bzero((void *)(a1 + 24), 0x648uLL);
  sig_stream::sig_stream(v8);
  *(_QWORD *)(a1 + 1792) = sig_stream::now(v8);
  resample_stream::resample_stream((resample_stream *)(a1 + 1800), a3, 0x3E80u);
  fft_stream::fft_stream((fft_stream *)(a1 + 1896));
  *(_DWORD *)(a1 + 10536) = a3;
  *(_DWORD *)(a1 + 10540) = a2;
  *(_QWORD *)(a1 + 10544) = 0;
  if ((a4 & 0xFFFFFFFE) == 4)
    v9 = 3;
  else
    v9 = 4;
  *(_DWORD *)(a1 + 10552) = v9;
  if ((a4 - 2) > 3)
    v10 = 24;
  else
    v10 = dword_218C7D550[a4 - 2];
  *(_DWORD *)(a1 + 10556) = v10;
  *(_QWORD *)(a1 + 10560) = 0;
  *(_QWORD *)(a1 + 10576) = 0;
  *(_QWORD *)(a1 + 10568) = 0;
  if (a2 == 3)
  {
    v11 = sig_extractor_pipe<spectral_peak_t>::getStreamingSig;
  }
  else if (a2 == 4)
  {
    *(_QWORD *)(a1 + 10560) = 12240;
    *(_QWORD *)(a1 + 10576) = 2100;
    v11 = sig_extractor_pipe<spectral_peak_t>::getWindowedSig;
  }
  else
  {
    v11 = sig_extractor_pipe<spectral_peak_t>::getProgressiveSig;
  }
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_218C5009C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  sig_stream *v3;
  void **v4;
  void *v6;

  resample_stream::~resample_stream(v4);
  sig_stream::~sig_stream(v3);
  std::deque<spectral_peak_t>::~deque[abi:ne180100]((_QWORD *)(v1 + 1584));
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_BYTE *sig_extractor_pipe<spectral_peak_t>::getStreamingSig@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, std::vector<char> *a3@<X8>)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  std::runtime_error *exception;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v6 = *(_DWORD *)(a1 + 10536);
  v7 = *(_QWORD *)(a1 + 10544);
  LODWORD(v14) = v6;
  *((_QWORD *)&v13 + 1) = v7;
  *(_QWORD *)(a1 + 10544) = 0;
  if (*(_QWORD *)(a1 + 1792) == -45)
  {
    if ((float)((float)v7 / (float)v6) * 125.0 < 45.0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "first call to get was too small");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    *((_QWORD *)&v13 + 1) = v7 - (unint64_t)((double)v6 * 0.36);
  }
  v8 = sig_stream::now((sig_stream *)(a1 + 1632));
  *(_QWORD *)(a1 + 1792) = v8;
  *(_QWORD *)&v13 = v8 & ~(v8 >> 63);
  v11 = a1;
  v12 = 1;
  return gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getStreamingSig(shazam::signature_density)::{lambda(void)#1}>::~final_action(&v11);
}

void sub_218C501F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float sig_extractor_pipe<spectral_peak_t>::set_max_rolling_buffer(uint64_t a1, float result)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (result >= 0.0)
  {
    v2 = (float)(result * 1000.0);
    v3 = *(_QWORD *)(a1 + 10560);
    if (v3 + 240 < v2)
    {
      v4 = (unsigned __int128)((v3 - 240) * *(unsigned int *)(a1 + 10536) * (__int128)0x20C49BA5E353F7CFLL) >> 64;
      v5 = (v4 >> 7) + ((unint64_t)v4 >> 63);
      v6 = *(_QWORD *)(a1 + 10544);
      v7 = v6 >= v5;
      v8 = v6 - v5;
      if (v7)
        *(_QWORD *)(a1 + 10568) = v8;
    }
    *(_QWORD *)(a1 + 10560) = (v2 + 240);
    result = ceilf(result * 0.5) + 1.0;
    *(_QWORD *)(a1 + 10576) = 300 * (unint64_t)result;
  }
  return result;
}

uint64_t sig_extractor_pipe<spectral_peak_t>::getWindowedSig@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, std::vector<char> *a3@<X8>, unint64_t a4@<D1>)
{
  unint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[2];
  char v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  int v23;

  v7 = *(unsigned int *)(a1 + 10536);
  v23 = 0;
  v21 = v7;
  v22 = 15;
  LODWORD(a4) = *(_DWORD *)(a1 + 1816);
  v8 = (double)a4 * 0.24;
  v9 = *(_QWORD *)(a1 + 10544) + (uint64_t)v8;
  v10 = *(_QWORD *)(a1 + 10568);
  v11 = v9 - v10;
  if (v9 - v10 >= (uint64_t)(*(_QWORD *)(a1 + 10560) * v7) / 1000)
    v11 = (uint64_t)(*(_QWORD *)(a1 + 10560) * v7) / 1000;
  if (v10)
    v12 = v11;
  else
    v12 = (uint64_t)(*(_QWORD *)(a1 + 10560) * v7) / 1000;
  if (v12 >= v9)
    v13 = *(_QWORD *)(a1 + 10544) + (uint64_t)v8;
  else
    v13 = v12;
  v14 = (float)((float)(uint64_t)(v9 - v12) / (float)v7) * 125.0;
  *(_QWORD *)&v20 = (uint64_t)v14 & ~((uint64_t)v14 >> 63);
  *((_QWORD *)&v20 + 1) = v13;
  v15 = *(_QWORD *)(a1 + 1624);
  v18[0] = a1;
  v18[1] = v15;
  v19 = 1;
  sig_extractor_pipe<spectral_peak_t>::flush_fft(a1);
  window_peaks<spectral_peak_t>((_QWORD *)(a1 + 1584), (uint64_t)(1000 * v12 / v7) / 8, v17);
  std::deque<spectral_peak_t>::~deque[abi:ne180100](v17);
  return gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getWindowedSig(shazam::signature_density)::{lambda(void)#1}>::~final_action((uint64_t)v18);
}

void sub_218C503EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::deque<spectral_peak_t>::~deque[abi:ne180100]((uint64_t *)va);
  gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getWindowedSig(shazam::signature_density)::{lambda(void)#1}>::~final_action((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sig_extractor_pipe<spectral_peak_t>::getProgressiveSig@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, std::vector<char> *a3@<X8>)
{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  LODWORD(v11) = *(_DWORD *)(a1 + 10536);
  *((_QWORD *)&v10 + 1) = *(_QWORD *)(a1 + 10544) + (uint64_t)((double)*(unsigned int *)(a1 + 1816) * 0.24);
  BYTE4(v11) = 15;
  v6 = *(_QWORD *)(a1 + 1624);
  v8[0] = a1;
  v8[1] = v6;
  v9 = 1;
  sig_extractor_pipe<spectral_peak_t>::flush_fft(a1);
  return gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getProgressiveSig(shazam::signature_density)::{lambda(void)#1}>::~final_action((uint64_t)v8);
}

void sub_218C504BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getProgressiveSig(shazam::signature_density)::{lambda(void)#1}>::~final_action((uint64_t)va);
  _Unwind_Resume(a1);
}

void resample_stream::~resample_stream(void **this)
{
  free(this[11]);
  free(this[10]);
}

void sig_stream::~sig_stream(sig_stream *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  free(*(void **)this);
}

gsl::details *sig_extractor_pipe<spectral_peak_t>::stream_flow_internal(uint64_t a1, gsl::details *a2, int a3)
{
  gsl::details *v5;
  uint64_t v6;
  unsigned int samples_for_sigx_fft_step;
  gsl::details *result;
  const void *v9;
  float v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  gsl::details *v21;
  const void *i;

  v5 = (gsl::details *)a3;
  *(_QWORD *)(a1 + 10544) += a3;
  v6 = a1 + 1800;
  samples_for_sigx_fft_step = resample_stream::get_samples_for_sigx_fft_step((resample_stream *)(a1 + 1800));
  result = gsl::make_span<shazam::spectral_peak_compact_t const>(a2, v5);
  v21 = result;
  for (i = v9; result; i = v9)
  {
    v10 = (float)((float)samples_for_sigx_fft_step * 0.0078125)
        * (float)(unint64_t)(128 - ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2));
    if ((unint64_t)result >= (unint64_t)v10)
      v11 = (unint64_t)v10;
    else
      v11 = (unint64_t)result;
    memcpy((void *)(a1 + 48), v9, 4 * v11);
    resample_stream::stream_flow(v6);
    v12 = *(char **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32) - (_QWORD)v12 >= 0x1FDuLL)
    {
      sig_extractor_pipe<spectral_peak_t>::flow_single_frame(a1, v12);
      if (*(_DWORD *)(a1 + 10540) == 4)
      {
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 1624);
          if (v13 <= *(_QWORD *)(a1 + 10576))
            break;
          v14 = *(_QWORD *)(a1 + 1616);
          *(_QWORD *)(a1 + 1624) = v13 - 1;
          *(_QWORD *)(a1 + 1616) = v14 + 1;
          std::deque<spectral_peak_t>::__maybe_remove_front_spare[abi:ne180100](a1 + 1584, 1);
        }
      }
      v15 = *(_DWORD **)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = (v16 - (uint64_t)v15) >> 2;
      if (v16 - (_QWORD)v15 != 512)
      {
        v18 = 512 - 4 * v17;
        v19 = (int *)(v16 - 4);
        do
        {
          v20 = *v19--;
          *v15++ = v20;
          v18 += 4;
        }
        while (v18);
      }
      std::vector<float>::resize(a1 + 24, v17 - 128);
    }
    result = gsl::span<float const,18446744073709551615ul>::make_subspan((gsl::details *)&v21, v11, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
    v21 = result;
  }
  return result;
}

uint64_t sig_extractor_pipe<spectral_peak_t>::flow_single_frame(uint64_t a1, char *a2)
{
  uint64_t v4;
  sig_stream *v5;
  const float *writable_fft_frame_magnitude;

  v4 = a1 + 1896;
  v5 = (sig_stream *)(a1 + 1632);
  writable_fft_frame_magnitude = (const float *)sig_stream::get_writable_fft_frame_magnitude((sig_stream *)(a1 + 1632));
  sig_stream::get_writable_fft_frame_complex(v5);
  fft_stream::stream_flow(v4, a2, writable_fft_frame_magnitude);
  return sig_stream::stream_flow((uint64_t)v5, (_QWORD *)(a1 + 1584));
}

gsl::details *sig_extractor_pipe<spectral_peak_t>::stream_flow(gsl::details *result, __int16 *a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  __int16 *v10;
  int v11;
  _OWORD v12[32];

  memset(v12, 0, sizeof(v12));
  if (a3)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    v6 = a3;
    do
    {
      if (v6 - v5 >= 0x80)
        v7 = 128;
      else
        v7 = v6 - v5;
      if (v7)
      {
        v8 = 2 * v7;
        v9 = (float *)v12;
        v10 = a2;
        do
        {
          v11 = *v10++;
          *v9++ = (float)v11;
          v8 -= 2;
        }
        while (v8);
      }
      a2 += v7;
      result = sig_extractor_pipe<spectral_peak_t>::stream_flow_internal(v4, (gsl::details *)v12, v7);
      v5 += v7;
    }
    while (v5 < v6);
  }
  return result;
}

uint64_t sig_extractor_pipe<spectral_peak_t>::get_sample_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 10544);
}

float sig_extractor_pipe<spectral_peak_t>::get_samples_seconds(uint64_t a1, double a2, double a3)
{
  double v3;

  v3 = (double)*(unint64_t *)(a1 + 10544);
  if (*(_DWORD *)(a1 + 10540) == 3 && *(_QWORD *)(a1 + 1792) == -45)
  {
    LODWORD(a3) = *(_DWORD *)(a1 + 10536);
    a3 = (double)(unint64_t)((double)*(unint64_t *)&a3 * 0.36);
    v3 = v3 - a3;
  }
  LODWORD(a3) = *(_DWORD *)(a1 + 10536);
  return v3 / (double)*(unint64_t *)&a3;
}

double sig_extractor_pipe<spectral_peak_t>::get_signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v6;
  void *v7;
  double result;
  __int128 v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 10556);
  v5 = *(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(a1 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v6 + v5);
  v5(&v9, v6, v3);
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
  }
  result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  return result;
}

void sig_extractor_pipe<spectral_peak_t>::reset(uint64_t a1)
{
  sig_stream *v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 10544) = 0;
  v2 = (sig_stream *)(a1 + 1632);
  sig_stream::reset((sig_stream *)(a1 + 1632));
  *(_QWORD *)(a1 + 1792) = sig_stream::now(v2);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  v3 = *(void ***)(a1 + 1592);
  v4 = *(_QWORD *)(a1 + 1600);
  *(_QWORD *)(a1 + 1624) = 0;
  v5 = v4 - (_QWORD)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v3 = (void **)(*(_QWORD *)(a1 + 1592) + 8);
      *(_QWORD *)(a1 + 1592) = v3;
      v5 = *(_QWORD *)(a1 + 1600) - (_QWORD)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 1616) = v6;
  }
  resample_stream::reset((resample_stream *)(a1 + 1800));
  fft_stream::reset((void **)(a1 + 1896));
}

uint64_t sig_extractor_pipe<spectral_peak_t>::get_spectral_output(uint64_t a1)
{
  return a1 + 1896;
}

void sig_extractor_pipe<spectral_peak_t>::flush_fft(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  _OWORD v4[32];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(a1 + 1632);
  sig_stream::checkpoint(a1 + 1632);
  fft_stream::checkpoint((fft_stream *)(a1 + 1896));
  v3 = -128;
  memset(v4, 0, sizeof(v4));
  do
  {
    sig_extractor_pipe<spectral_peak_t>::flow_single_frame(a1, (char *)v4);
    v3 += 128;
  }
  while (v3 >> 9 < 0xF);
  sig_stream::rewind(v2);
  fft_stream::rewind((fft_stream *)(a1 + 1896));
}

void `anonymous namespace'::get_sig(_QWORD *a1@<X0>, __int128 *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X4>, std::vector<char> *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v12 = a1[4];
  v13 = a1[1];
  v14 = a1[2];
  v15 = (uint64_t *)(v13 + 8 * (v12 >> 9));
  if (v14 == v13)
  {
    v16 = 0;
    v19 = 0;
    v18 = (_QWORD *)(v13 + 8 * ((a1[5] + v12) >> 9));
  }
  else
  {
    v16 = *v15 + 8 * (v12 & 0x1FF);
    v17 = a1[5] + v12;
    v18 = (_QWORD *)(v13 + 8 * (v17 >> 9));
    v19 = *v18 + 8 * (v17 & 0x1FF);
  }
  BandSpectralPeaks<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>,std::vector<std::vector<spectral_peak_t>>>(v15, v16, (uint64_t)v18, v19, a3, a5, a4, &v29);
  v20 = a2[1];
  v23 = *a2;
  v24 = v20;
  v22 = 0;
  v21 = 0uLL;
  std::vector<std::vector<spectral_peak_t>>::__init_with_size[abi:ne180100]<std::vector<spectral_peak_t>*,std::vector<spectral_peak_t>*>(&v21, v29, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v29) >> 3));
  v25 = v23;
  v26 = v24;
  v27 = v21;
  v28 = v22;
  v21 = 0uLL;
  v22 = 0;
  v31 = (void **)&v21;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v31);
  DWORD2(v26) = shazam::find_last_peak_tick((uint64_t)&v29);
  shazam::io::pack((uint64_t)&v25, a6);
  v31 = (void **)&v27;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&v31);
  *(_QWORD *)&v25 = &v29;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_218C50BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 40) = v17;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  a17 = (void **)(v18 - 64);
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t window_peaks<spectral_peak_t>@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char **v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD v27[2];

  v5 = a1[5];
  if (!v5)
    return std::deque<spectral_peak_t>::deque((uint64_t)a3, a1);
  v6 = a1[4];
  v7 = a1[1];
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + (((v5 + v6 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v5 + v6 - 1) & 0x1FF));
  v9 = v8 - a2;
  if (v8 <= a2)
    return std::deque<spectral_peak_t>::deque((uint64_t)a3, a1);
  v10 = 0;
  while (*(_DWORD *)(*(_QWORD *)(v7 + (((v6 + v10) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v6 + v10) & 0x1FF)) < v9)
  {
    if (v5 == ++v10)
    {
      v10 = a1[5];
      break;
    }
  }
  v11 = (_QWORD *)(v7 + 8 * (v6 >> 9));
  if (a1[2] == v7)
    v12 = 0;
  else
    v12 = *v11 + 8 * (a1[4] & 0x1FFLL);
  v27[0] = v11;
  v27[1] = v12;
  v15 = (char *)std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)v27, v10);
  v16 = a1[4] + a1[5];
  v17 = a1[1];
  v18 = (char *)(v17 + 8 * (v16 >> 9));
  if (a1[2] == v17)
    v19 = 0;
  else
    v19 = (uint64_t *)(*(_QWORD *)v18 + 8 * (v16 & 0x1FF));
  result = std::deque<spectral_peak_t>::deque<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,0>((uint64_t)a3, v15, v14, v18, v19);
  v20 = a3[1];
  if (a3[2] != v20)
  {
    v21 = a3[4];
    v22 = (char **)(v20 + 8 * (v21 >> 9));
    v23 = *v22;
    v24 = &(*v22)[8 * (v21 & 0x1FF)];
    v25 = *(_QWORD *)(v20 + (((a3[5] + v21) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a3[5] + v21) & 0x1FF);
    while (v24 != (char *)v25)
    {
      *(_DWORD *)v24 -= v9;
      v24 += 8;
      if (v24 - v23 == 4096)
      {
        v26 = v22[1];
        ++v22;
        v23 = v26;
        v24 = v26;
      }
    }
  }
  return result;
}

void sig_extractor_pipe<spectral_peak_t>::~sig_extractor_pipe(uint64_t a1)
{
  sig_extractor_pipe<spectral_peak_t>::~sig_extractor_pipe(a1);
  JUMPOUT(0x219A21574);
}

void fft_stream::fft_stream(fft_stream *this)
{
  void *v2;
  void *v3;
  void *v4;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &off_24D9B7290;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = (char *)this + 40;
  *((_DWORD *)this + 22) = 0;
  v2 = malloc_type_aligned_alloc(0x10uLL, 0x2010uLL, 0x33A8F899uLL);
  *((_QWORD *)this + 12) = v2;
  bzero(v2, 0x2010uLL);
  v3 = malloc_type_aligned_alloc(0x10uLL, 0x2010uLL, 0x33A8F899uLL);
  *((_QWORD *)this + 13) = v3;
  bzero(v3, 0x2010uLL);
  v4 = malloc_type_aligned_alloc(0x10uLL, 0x2020uLL, 0x33A8F899uLL);
  *((_QWORD *)this + 14) = v4;
  bzero(v4, 0x2020uLL);
  *(_OWORD *)((char *)this + 120) = xmmword_218C7D540;
  SHZ_FFT::SHZ_FFT((fft_stream *)((char *)this + 136), 0x800uLL);
  *((_DWORD *)this + 2158) = 0;
}

void sub_218C50E88(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[14]);
  free(v1[13]);
  free(v1[12]);
  SpectralOutput::~SpectralOutput((SpectralOutput *)v1);
  _Unwind_Resume(a1);
}

void SpectralOutput::~SpectralOutput(SpectralOutput *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    MEMORY[0x219A2155C](v5, 0x1000C8052888210);
}

void _ZNSt3__110__function6__funcIN14SpectralOutput8callbackMUlPKfmE_ENS_9allocatorIS5_EEFvS4_mEED0Ev()
{
  JUMPOUT(0x219A21574);
}

_QWORD *_ZNKSt3__110__function6__funcIN14SpectralOutput8callbackMUlPKfmE_ENS_9allocatorIS5_EEFvS4_mEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D9B7290;
  return result;
}

void _ZNKSt3__110__function6__funcIN14SpectralOutput8callbackMUlPKfmE_ENS_9allocatorIS5_EEFvS4_mEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D9B7290;
}

uint64_t _ZNKSt3__110__function6__funcIN14SpectralOutput8callbackMUlPKfmE_ENS_9allocatorIS5_EEFvS4_mEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN14SpectralOutput8callbackMUlPKfmE_E))
    return a1 + 8;
  else
    return 0;
}

void *_ZNKSt3__110__function6__funcIN14SpectralOutput8callbackMUlPKfmE_ENS_9allocatorIS5_EEFvS4_mEE11target_typeEv()
{
  return &_ZTIN14SpectralOutput8callbackMUlPKfmE_E;
}

gsl::details *gsl::span<float const,18446744073709551615ul>::make_subspan(gsl::details *a1, unint64_t a2, gsl::details *this)
{
  unint64_t v3;

  v3 = *(_QWORD *)a1 - a2;
  if (*(_QWORD *)a1 < a2)
    goto LABEL_6;
  if (this == (gsl::details *)-1)
  {
    this = (gsl::details *)(*(_QWORD *)a1 - a2);
    if (v3 != -1)
      return this;
LABEL_6:
    gsl::details::terminate(a1);
  }
  if (v3 < (unint64_t)this)
    goto LABEL_6;
  return this;
}

void BandSpectralPeaks<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>,std::vector<std::vector<spectral_peak_t>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v15;
  unint64_t v16;
  float v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *exception;
  uint64_t error_code;
  uint64_t v44;
  void *__p[3];
  char v46;
  uint64_t v47;

  v12 = (unsigned int *)a2;
  v13 = a1;
  std::__is_sorted_until[abi:ne180100]<std::__less<void,void> &,std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>>(a1, a2, a3, a4);
  if (v15 != a4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0xC9);
    MEMORY[0x219A21418](exception, error_code, v44);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  if (a7)
    v16 = -45;
  else
    v16 = 0;
  v47 = 0;
  std::vector<unsigned long>::vector(__p, a6, &v47);
  std::vector<std::vector<spectral_peak_t>>::vector(a8, a6);
  while (v12 != (unsigned int *)a4)
  {
    v16 += 256;
    while (v16 > *v12)
    {
      addPeakToBands<spectral_peak_t,std::vector<std::vector<spectral_peak_t>>>((uint64_t)v12, a8, v17);
      v12 += 2;
      if ((unsigned int *)((char *)v12 - *v13) == (unsigned int *)4096)
      {
        v18 = (unsigned int *)v13[1];
        ++v13;
        v12 = v18;
      }
      if (v12 == (unsigned int *)a4)
      {
        v12 = (unsigned int *)a4;
        break;
      }
    }
    v19 = *a8;
    v20 = a8[1];
    if (v20 != *a8)
    {
      v21 = 0;
      v22 = 0;
      v23 = __p[0];
      do
      {
        v25 = *(_QWORD *)(v19 + v21);
        v24 = *(unint64_t **)(v19 + v21 + 8);
        v26 = ((uint64_t)v24 - v25) >> 3;
        v27 = v23[v22];
        if (v26 < v27)
        {
          v39 = __cxa_allocate_exception(0x20uLL);
          v40 = shazam::make_error_code((shazam *)0x7E);
          MEMORY[0x219A21418](v39, v40, v41);
          __cxa_throw(v39, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
        }
        if (a5 && v26 - v27 > a5)
        {
          v28 = v25 + 8 * v27;
          v29 = 126 - 2 * __clz(((uint64_t)v24 - v28) >> 3);
          if (v24 == (unint64_t *)v28)
            v30 = 0;
          else
            v30 = v29;
          std::__introsort<std::_ClassicAlgPolicy,$_0 &,spectral_peak_t *,false>(v28, v24, v30, 1);
          std::vector<spectral_peak_t>::resize(*a8 + v21, *((_QWORD *)__p[0] + v22) + a5);
          v31 = (_QWORD *)(*a8 + v21);
          v32 = (uint64_t *)v31[1];
          v33 = *v31 + 8 * *((_QWORD *)__p[0] + v22);
          v34 = 126 - 2 * __clz(((uint64_t)v32 - v33) >> 3);
          if (v32 == (uint64_t *)v33)
            v35 = 0;
          else
            v35 = v34;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>(v33, v32, (uint64_t)&v46, v35, 1);
          v19 = *a8;
          v20 = a8[1];
          v36 = (uint64_t *)(*a8 + v21);
          v38 = *v36;
          v37 = v36[1];
          v23 = __p[0];
          v26 = (v37 - v38) >> 3;
        }
        v23[v22++] = v26;
        v21 += 24;
      }
      while (v22 < 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_218C512B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void addPeakToBands<spectral_peak_t,std::vector<std::vector<spectral_peak_t>>>(uint64_t a1, _QWORD *a2, float a3)
{
  unint64_t peak_band;
  char v6;
  char **v7;
  void **v8;
  char *v9;
  unint64_t v10;
  char **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  LOWORD(a3) = *(_WORD *)(a1 + 4);
  peak_band = get_peak_band((float)((float)LODWORD(a3) * 7.8125) * 0.015625);
  if (v6 && peak_band < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
  {
    v7 = (char **)(*a2 + 24 * peak_band);
    v8 = (void **)(v7 + 1);
    v9 = v7[1];
    v11 = v7 + 2;
    v10 = (unint64_t)v7[2];
    if ((unint64_t)v9 >= v10)
    {
      v13 = (v9 - *v7) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v7;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)v11, v16);
      else
        v17 = 0;
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = *(_QWORD *)a1;
      v12 = v18 + 8;
      v20 = (char *)*v8;
      v21 = *v7;
      if (*v8 != *v7)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        v20 = *v7;
      }
      *v7 = v18;
      *v8 = v12;
      *v11 = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)a1;
      v12 = v9 + 8;
    }
    *v8 = v12;
  }
}

uint64_t *std::__is_sorted_until[abi:ne180100]<std::__less<void,void> &,std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (a2 != a4)
  {
    v4 = *result;
    while (1)
    {
      v5 = a2 + 8;
      if (a2 + 8 - v4 == 4096)
      {
        v6 = result[1];
        ++result;
        v4 = v6;
        v5 = v6;
      }
      if (v5 == a4)
        break;
      v7 = *(_DWORD *)v5 < *(_DWORD *)a2;
      if (*(_DWORD *)v5 == *(_DWORD *)a2)
        v7 = *(unsigned __int16 *)(v5 + 4) < *(unsigned __int16 *)(a2 + 4);
      a2 = v5;
      if (v7)
        return result;
    }
  }
  return (uint64_t *)a3;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,$_0 &,spectral_peak_t *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t *v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  unint64_t *v45;
  BOOL v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  unint64_t *v61;
  unint64_t *v62;
  unsigned int v63;
  BOOL v64;
  BOOL v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  _BOOL4 v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  unint64_t *v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL4 v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  unint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  unint64_t *v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  _QWORD *v111;
  int64_t v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  _BOOL4 v150;
  _BOOL4 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int v156;
  BOOL v157;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  _BOOL4 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unsigned int v168;
  BOOL v169;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *((unsigned __int16 *)a2 - 1);
        v77 = *(unsigned __int16 *)(v8 + 6);
        v95 = v76 == v77;
        v78 = v76 > v77;
        if (v95)
          v78 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 4);
        if (v78)
        {
          v79 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 1);
          *(a2 - 1) = v79;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v8, (unint64_t *)(v8 + 8), a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, (uint64_t)(a2 - 1));
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v8, v8 + 8, v8 + 16, v8 + 24);
        v80 = *((unsigned __int16 *)a2 - 1);
        v81 = *(unsigned __int16 *)(v8 + 30);
        v95 = v80 == v81;
        v82 = v80 > v81;
        if (v95)
          v82 = *((unsigned __int16 *)a2 - 2) > *(unsigned __int16 *)(v8 + 28);
        if (v82)
        {
          v83 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(a2 - 1);
          *(a2 - 1) = v83;
          LODWORD(v83) = *(unsigned __int16 *)(v8 + 30);
          v84 = *(unsigned __int16 *)(v8 + 22);
          v95 = (_DWORD)v83 == v84;
          v85 = v83 > v84;
          if (v95)
            v85 = *(unsigned __int16 *)(v8 + 28) > *(unsigned __int16 *)(v8 + 20);
          if (v85)
          {
            v87 = *(_QWORD *)(v8 + 16);
            v86 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v86;
            *(_QWORD *)(v8 + 24) = v87;
            v88 = HIWORD(v86);
            v89 = *(unsigned __int16 *)(v8 + 14);
            v95 = v89 == HIWORD(v86);
            v90 = v89 < HIWORD(v86);
            if (v95)
              v90 = *(unsigned __int16 *)(v8 + 12) < WORD2(v86);
            if (v90)
            {
              v91 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v86;
              *(_QWORD *)(v8 + 16) = v91;
              LODWORD(v91) = *(unsigned __int16 *)(v8 + 6);
              v95 = (_DWORD)v91 == (_DWORD)v88;
              v92 = v91 < v88;
              if (v95)
                v92 = *(unsigned __int16 *)(v8 + 4) < WORD2(v86);
              if (v92)
              {
                v93 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v86;
                *(_QWORD *)(v8 + 8) = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v94 = (unint64_t *)(v8 + 8);
          v95 = (unint64_t *)v8 == a2 || v94 == a2;
          v96 = v95;
          if ((a4 & 1) != 0)
          {
            if ((v96 & 1) == 0)
            {
              v97 = 0;
              v98 = (_QWORD *)v8;
              do
              {
                v99 = *((unsigned __int16 *)v98 + 7);
                v100 = *((unsigned __int16 *)v98 + 3);
                v101 = *((unsigned __int16 *)v98 + 6);
                v102 = *((unsigned __int16 *)v98 + 2);
                v98 = v94;
                v103 = v101 > v102;
                v95 = v99 == v100;
                v104 = v99 > v100;
                if (!v95)
                  v103 = v104;
                if (v103)
                {
                  v105 = *v98;
                  v106 = HIWORD(*v98);
                  v107 = v97;
                  while (1)
                  {
                    v108 = v8 + v107;
                    *(_QWORD *)(v8 + v107 + 8) = *(_QWORD *)(v8 + v107);
                    if (!v107)
                      break;
                    v109 = *(unsigned __int16 *)(v108 - 2);
                    v110 = *(unsigned __int16 *)(v108 - 4) < WORD2(v105);
                    if (v109 != (_DWORD)v106)
                      v110 = v109 < v106;
                    v107 -= 8;
                    if (!v110)
                    {
                      v111 = (_QWORD *)(v8 + v107 + 8);
                      goto LABEL_118;
                    }
                  }
                  v111 = (_QWORD *)v8;
LABEL_118:
                  *v111 = v105;
                }
                v94 = v98 + 1;
                v97 += 8;
              }
              while (v98 + 1 != a2);
            }
          }
          else if ((v96 & 1) == 0)
          {
            do
            {
              v159 = *(unsigned __int16 *)(v7 + 14);
              v160 = *(unsigned __int16 *)(v7 + 6);
              v161 = *(unsigned __int16 *)(v7 + 12);
              v162 = *(unsigned __int16 *)(v7 + 4);
              v7 = (uint64_t)v94;
              v95 = v159 == v160;
              v163 = v159 > v160;
              if (v95)
                v163 = v161 > v162;
              if (v163)
              {
                v164 = *v94;
                v165 = HIWORD(*v94);
                do
                {
                  v166 = v94;
                  v167 = *--v94;
                  *v166 = v167;
                  v168 = *((unsigned __int16 *)v166 - 5);
                  v169 = *((unsigned __int16 *)v166 - 6) < WORD2(v164);
                  if (v168 != (_DWORD)v165)
                    v169 = v168 < v165;
                }
                while (v169);
                *v94 = v164;
              }
              v94 = (unint64_t *)(v7 + 8);
            }
            while ((unint64_t *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v112 = (v10 - 2) >> 1;
            v113 = v112;
            do
            {
              v114 = v113;
              if (v112 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = v8 + 8 * v115;
                if (2 * v114 + 2 < (uint64_t)v10)
                {
                  v117 = *(unsigned __int16 *)(v116 + 6);
                  v118 = *(unsigned __int16 *)(v116 + 14);
                  result = *(unsigned __int16 *)(v116 + 12);
                  v95 = v117 == v118;
                  v119 = v117 > v118;
                  if (v95)
                    v119 = *(unsigned __int16 *)(v116 + 4) > result;
                  v116 += 8 * v119;
                  if (v119)
                    v115 = 2 * v114 + 2;
                }
                v120 = *(unsigned __int16 *)(v116 + 6);
                v121 = v8 + 8 * v114;
                v122 = *(unsigned __int16 *)(v121 + 6);
                v123 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v121 + 4);
                v95 = v120 == v122;
                v124 = v120 > v122;
                if (v95)
                  v124 = v123;
                if (!v124)
                {
                  v125 = (_QWORD *)(v8 + 8 * v114);
                  v126 = *v125;
                  v127 = HIWORD(*v125);
                  do
                  {
                    v128 = v125;
                    v125 = (_QWORD *)v116;
                    *v128 = *(_QWORD *)v116;
                    if (v112 < v115)
                      break;
                    v129 = (2 * v115) | 1;
                    v116 = v8 + 8 * v129;
                    v130 = 2 * v115 + 2;
                    if (v130 < (uint64_t)v10)
                    {
                      v131 = *(unsigned __int16 *)(v116 + 6);
                      v132 = *(unsigned __int16 *)(v116 + 14);
                      v95 = v131 == v132;
                      v133 = v131 > v132;
                      if (v95)
                        v133 = *(unsigned __int16 *)(v116 + 4) > *(unsigned __int16 *)(v116 + 12);
                      v116 += 8 * v133;
                      if (v133)
                        v129 = v130;
                    }
                    v134 = *(unsigned __int16 *)(v116 + 6);
                    v95 = v134 == (_DWORD)v127;
                    LODWORD(result) = v134 > v127;
                    result = v95 ? *(unsigned __int16 *)(v116 + 4) > WORD2(v126) : result;
                    v115 = v129;
                  }
                  while ((_DWORD)result != 1);
                  *v125 = v126;
                }
              }
              v113 = v114 - 1;
            }
            while (v114);
            v135 = (unint64_t)v9 >> 3;
            do
            {
              v136 = 0;
              v137 = *(_QWORD *)v8;
              v138 = (_QWORD *)v8;
              do
              {
                v139 = &v138[v136 + 1];
                v140 = (2 * v136) | 1;
                v141 = 2 * v136 + 2;
                if (v141 < v135)
                {
                  v142 = *((unsigned __int16 *)v139 + 3);
                  v143 = *((unsigned __int16 *)v139 + 7);
                  result = *((unsigned __int16 *)v139 + 6);
                  v95 = v142 == v143;
                  v144 = v142 > v143;
                  if (v95)
                    v144 = *((unsigned __int16 *)v139 + 2) > result;
                  v139 += v144;
                  if (v144)
                    v140 = v141;
                }
                *v138 = *v139;
                v138 = v139;
                v136 = v140;
              }
              while (v140 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
              if (v139 == --a2)
              {
                *v139 = v137;
              }
              else
              {
                *v139 = *a2;
                *a2 = v137;
                v145 = (uint64_t)v139 - v8 + 8;
                if (v145 >= 9)
                {
                  v146 = (((unint64_t)v145 >> 3) - 2) >> 1;
                  v147 = v8 + 8 * v146;
                  v148 = *(unsigned __int16 *)(v147 + 6);
                  v149 = *((unsigned __int16 *)v139 + 3);
                  v150 = *(unsigned __int16 *)(v147 + 4) > *((unsigned __int16 *)v139 + 2);
                  v95 = v148 == v149;
                  v151 = v148 > v149;
                  if (!v95)
                    v150 = v151;
                  if (v150)
                  {
                    v152 = *v139;
                    v153 = HIWORD(*v139);
                    do
                    {
                      v154 = v139;
                      v139 = (unint64_t *)(v8 + 8 * v146);
                      *v154 = *v139;
                      if (!v146)
                        break;
                      v146 = (v146 - 1) >> 1;
                      v155 = v8 + 8 * v146;
                      v156 = *(unsigned __int16 *)(v155 + 6);
                      v157 = *(unsigned __int16 *)(v155 + 4) > WORD2(v152);
                      if (v156 != (_DWORD)v153)
                        v157 = v156 > v153;
                    }
                    while (v157);
                    *v139 = v152;
                  }
                }
              }
            }
            while (v135-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8 * (v10 >> 1)), (unint64_t *)v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)v7, (unint64_t *)(v7 + 8 * (v10 >> 1)), a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 8), v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)(v7 + 16), (unint64_t *)(v7 + 8 + 8 * v11), a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(v12 - 1, v12, (unint64_t *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(unsigned __int16 *)(v7 - 2);
          v15 = *(unsigned __int16 *)(v7 + 6);
          v95 = v14 == v15;
          v16 = v14 > v15;
          if (v95)
            v16 = *(unsigned __int16 *)(v7 - 4) > *(unsigned __int16 *)(v7 + 4);
          if (!v16)
          {
            v47 = *(_QWORD *)v7;
            v48 = (unsigned __int16)WORD2(*(_QWORD *)v7);
            v49 = HIWORD(*(_QWORD *)v7);
            v50 = *((unsigned __int16 *)a2 - 1);
            v51 = *((unsigned __int16 *)a2 - 2) < v48;
            v95 = v50 == (_DWORD)v49;
            v52 = v50 < v49;
            if (!v95)
              v51 = v52;
            if (v51)
            {
              v53 = v7;
              do
              {
                v8 = v53 + 8;
                v54 = *(unsigned __int16 *)(v53 + 14);
                v55 = *(unsigned __int16 *)(v53 + 12) < v48;
                v95 = v54 == (_DWORD)v49;
                v56 = v54 < v49;
                if (v95)
                  v56 = v55;
                v53 = v8;
              }
              while (!v56);
            }
            else
            {
              v57 = v7 + 8;
              do
              {
                v8 = v57;
                if (v57 >= (unint64_t)a2)
                  break;
                v58 = *(unsigned __int16 *)(v57 + 6);
                v59 = *(unsigned __int16 *)(v8 + 4) < v48;
                v95 = v58 == (_DWORD)v49;
                v60 = v58 < v49;
                if (!v95)
                  v59 = v60;
                v57 = v8 + 8;
              }
              while (!v59);
            }
            v61 = a2;
            if (v8 < (unint64_t)a2)
            {
              v62 = a2;
              do
              {
                v61 = v62 - 1;
                v63 = *((unsigned __int16 *)v62 - 1);
                v64 = *((unsigned __int16 *)v62 - 2) < v48;
                v95 = v63 == (_DWORD)v49;
                v65 = v63 < v49;
                if (v95)
                  v65 = v64;
                v62 = v61;
              }
              while (v65);
            }
            while (v8 < (unint64_t)v61)
            {
              v66 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *v61;
              *v61 = v66;
              do
              {
                v67 = *(unsigned __int16 *)(v8 + 14);
                v68 = *(unsigned __int16 *)(v8 + 12);
                v8 += 8;
                v69 = v68 < v48;
                v95 = v67 == (_DWORD)v49;
                v70 = v67 < v49;
                if (v95)
                  v70 = v69;
              }
              while (!v70);
              do
              {
                v71 = *((unsigned __int16 *)v61 - 1);
                v72 = *((unsigned __int16 *)v61-- - 2);
                v73 = v72 < v48;
                v95 = v71 == (_DWORD)v49;
                v74 = v71 < v49;
                if (v95)
                  v74 = v73;
              }
              while (v74);
            }
            v75 = (unint64_t *)(v8 - 8);
            if (v8 - 8 != v7)
              *(_QWORD *)v7 = *v75;
            a4 = 0;
            *v75 = v47;
            continue;
          }
        }
        v17 = 0;
        v18 = *(_QWORD *)v7;
        v19 = (unsigned __int16)WORD2(*(_QWORD *)v7);
        v20 = HIWORD(*(_QWORD *)v7);
        do
        {
          v21 = *(unsigned __int16 *)(v7 + v17 + 14);
          v22 = *(unsigned __int16 *)(v7 + v17 + 12) > v19;
          v95 = v21 == (_DWORD)v20;
          v23 = v21 > v20;
          if (!v95)
            v22 = v23;
          v17 += 8;
        }
        while (v22);
        v24 = v7 + v17;
        v25 = a2;
        if (v17 == 8)
        {
          v30 = a2;
          while (v24 < (unint64_t)v30)
          {
            v26 = v30 - 1;
            v31 = *((unsigned __int16 *)v30 - 1);
            v32 = *((unsigned __int16 *)v30 - 2) > v19;
            v95 = v31 == (_DWORD)v20;
            v33 = v31 > v20;
            if (v95)
              v33 = v32;
            v30 = v26;
            if (v33)
              goto LABEL_29;
          }
          v26 = v30;
        }
        else
        {
          do
          {
            v26 = v25 - 1;
            v27 = *((unsigned __int16 *)v25 - 1);
            v28 = *((unsigned __int16 *)v25 - 2) > v19;
            v95 = v27 == (_DWORD)v20;
            v29 = v27 > v20;
            if (v95)
              v29 = v28;
            v25 = v26;
          }
          while (!v29);
        }
LABEL_29:
        if (v24 >= (unint64_t)v26)
        {
          v45 = (unint64_t *)(v24 - 8);
        }
        else
        {
          v34 = v24;
          v35 = v26;
          do
          {
            v36 = *(_QWORD *)v34;
            *(_QWORD *)v34 = *v35;
            *v35 = v36;
            do
            {
              v37 = *(unsigned __int16 *)(v34 + 14);
              v38 = *(unsigned __int16 *)(v34 + 12);
              v34 += 8;
              v39 = v38 > v19;
              v95 = v37 == (_DWORD)v20;
              v40 = v37 > v20;
              if (v95)
                v40 = v39;
            }
            while (v40);
            do
            {
              v41 = *((unsigned __int16 *)v35 - 1);
              v42 = *((unsigned __int16 *)v35-- - 2);
              v43 = v42 > v19;
              v95 = v41 == (_DWORD)v20;
              v44 = v41 > v20;
              if (v95)
                v44 = v43;
            }
            while (!v44);
          }
          while (v34 < (unint64_t)v35);
          v45 = (unint64_t *)(v34 - 8);
        }
        if (v45 != (unint64_t *)v7)
          *(_QWORD *)v7 = *v45;
        *v45 = v18;
        if (v24 < (unint64_t)v26)
        {
LABEL_46:
          result = std::__introsort<std::_ClassicAlgPolicy,$_0 &,spectral_peak_t *,false>(v7, v45, a3, a4 & 1);
          a4 = 0;
          v8 = (unint64_t)(v45 + 1);
          continue;
        }
        v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,spectral_peak_t *>(v7, (uint64_t)v45);
        v8 = (unint64_t)(v45 + 1);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,spectral_peak_t *>((uint64_t)(v45 + 1), (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v46)
            continue;
          goto LABEL_46;
        }
        a2 = v45;
        if (!v46)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,spectral_peak_t *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  unint64_t v38;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(unsigned __int16 *)(a2 - 2);
      v7 = *(unsigned __int16 *)(a1 + 6);
      v8 = v6 == v7;
      v9 = v6 > v7;
      if (v8)
        v9 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(unsigned __int16 *)(a2 - 2);
      v26 = *(unsigned __int16 *)(a1 + 30);
      v8 = v25 == v26;
      v27 = v25 > v26;
      if (v8)
        v27 = *(unsigned __int16 *)(a2 - 4) > *(unsigned __int16 *)(a1 + 28);
      if (v27)
      {
        v28 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v28;
        LODWORD(v28) = *(unsigned __int16 *)(a1 + 30);
        v29 = *(unsigned __int16 *)(a1 + 22);
        v8 = (_DWORD)v28 == v29;
        v30 = v28 > v29;
        if (v8)
          v30 = *(unsigned __int16 *)(a1 + 28) > *(unsigned __int16 *)(a1 + 20);
        if (v30)
        {
          v32 = *(_QWORD *)(a1 + 16);
          v31 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v31;
          *(_QWORD *)(a1 + 24) = v32;
          v33 = HIWORD(v31);
          v34 = *(unsigned __int16 *)(a1 + 14);
          v8 = v34 == HIWORD(v31);
          v35 = v34 < HIWORD(v31);
          if (v8)
            v35 = *(unsigned __int16 *)(a1 + 12) < WORD2(v31);
          if (v35)
          {
            v36 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 16) = v36;
            LODWORD(v36) = *(unsigned __int16 *)(a1 + 6);
            v8 = (_DWORD)v36 == (_DWORD)v33;
            v37 = v36 < v33;
            if (v8)
              v37 = *(unsigned __int16 *)(a1 + 4) < WORD2(v31);
            if (v37)
            {
              v38 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v31;
              *(_QWORD *)(a1 + 8) = v38;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((unint64_t *)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a1 + 16));
      v12 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int16 *)(v12 + 6);
    v16 = *(unsigned __int16 *)(v11 + 6);
    v8 = v15 == v16;
    v17 = v15 > v16;
    if (v8)
      v17 = *(unsigned __int16 *)(v12 + 4) > *(unsigned __int16 *)(v11 + 4);
    if (v17)
    {
      v18 = *(_QWORD *)v12;
      v19 = HIWORD(*(_QWORD *)v12);
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_QWORD *)(a1 + v20 + 24) = *(_QWORD *)(a1 + v20 + 16);
        if (v20 == -16)
          break;
        v22 = *(unsigned __int16 *)(v21 + 14);
        v23 = *(unsigned __int16 *)(v21 + 12) < WORD2(v18);
        if (v22 != (_DWORD)v19)
          v23 = v22 < v19;
        v20 -= 8;
        if (!v23)
        {
          v24 = (_QWORD *)(a1 + v20 + 24);
          goto LABEL_19;
        }
      }
      v24 = (_QWORD *)a1;
LABEL_19:
      *v24 = v18;
      if (++v14 == 8)
        return v12 + 8 == a2;
    }
    v11 = v12;
    v13 += 8;
    v12 += 8;
    if (v12 == a2)
      return 1;
  }
}

uint64_t sig_extractor_pipe<spectral_peak_t>::~sig_extractor_pipe(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 10496);
  if (v2)
  {
    *(_QWORD *)(a1 + 10504) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 2032);
  *(_QWORD *)(a1 + 2032) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  free(*(void **)(a1 + 2008));
  free(*(void **)(a1 + 2000));
  free(*(void **)(a1 + 1992));
  v4 = *(_QWORD **)(a1 + 1960);
  if (v4 == (_QWORD *)(a1 + 1936))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 1936);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = *(_QWORD *)(a1 + 1928);
  *(_QWORD *)(a1 + 1928) = 0;
  if (v6)
    MEMORY[0x219A2155C](v6, 0x1000C8052888210);
  free(*(void **)(a1 + 1888));
  free(*(void **)(a1 + 1880));
  v7 = *(void **)(a1 + 1736);
  if (v7)
  {
    *(_QWORD *)(a1 + 1744) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1672);
  if (v8)
  {
    *(_QWORD *)(a1 + 1680) = v8;
    operator delete(v8);
  }
  free(*(void **)(a1 + 1632));
  std::deque<spectral_peak_t>::~deque[abi:ne180100]((_QWORD *)(a1 + 1584));
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t std::deque<spectral_peak_t>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<spectral_peak_t *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<spectral_peak_t *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<spectral_peak_t>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getProgressiveSig(shazam::signature_density)::{lambda(void)#1}>::~final_action(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 1592);
    if (*(_QWORD *)(*(_QWORD *)a1 + 1600) == v3)
      v4 = 0;
    else
      v4 = *(_QWORD *)(v3 + 8 * (*(_QWORD *)(*(_QWORD *)a1 + 1616) >> 9))
         + 8 * (*(_QWORD *)(*(_QWORD *)a1 + 1616) & 0x1FFLL);
    v12[0] = v3 + 8 * (*(_QWORD *)(*(_QWORD *)a1 + 1616) >> 9);
    v12[1] = v4;
    v6 = (char *)std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)v12, *(_QWORD *)(a1 + 8));
    v7 = v2[202] + v2[203];
    v8 = v2[199];
    v9 = (char *)(v8 + 8 * (v7 >> 9));
    if (v2[200] == v8)
      v10 = 0;
    else
      v10 = *(_QWORD *)v9 + 8 * (v7 & 0x1FF);
    std::deque<spectral_peak_t>::erase(v2 + 198, v6, v5, v9, v10);
  }
  return a1;
}

_QWORD *std::deque<spectral_peak_t>::erase(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - ((a3 - *(_QWORD *)a2) >> 3);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 9));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 8 * (a1[4] & 0x1FFLL);
  v33 = (char **)(v7 + 8 * (a1[4] >> 9));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v8) << 6) - ((v9 - *(_QWORD *)v8) >> 3);
  v11 = (char **)std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v6);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,0>(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 8;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((std::deque<spectral_peak_t>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = (char **)std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 9));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[8 * (v15 & 0x1FF)];
      v35 = v32;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>>>(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((std::deque<spectral_peak_t>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 9);
  v35.n128_u64[1] = v30;
  return std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)&v35, v10);
}

_QWORD *std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

uint64_t std::deque<spectral_peak_t>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a1) >> 3;
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13)
        result = memmove(a4, v11, 8 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,spectral_peak_t *,spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,spectral_peak_t *,spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,spectral_peak_t *,spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,spectral_peak_t *,spectral_peak_t *,std::__deque_iterator<spectral_peak_t,spectral_peak_t *,spectral_peak_t&,spectral_peak_t **,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

_BYTE *gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getStreamingSig(shazam::signature_density)::{lambda(void)#1}>::~final_action(_BYTE *a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1[8])
    return a1;
  v2 = *(_QWORD **)a1;
  v3 = *(void ***)(*(_QWORD *)a1 + 1592);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 1600);
  *(_QWORD *)(*(_QWORD *)a1 + 1624) = 0;
  v5 = v4 - (_QWORD)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v3 = (void **)(v2[199] + 8);
      v2[199] = v3;
      v5 = v2[200] - (_QWORD)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 >> 3 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  v2[202] = v6;
LABEL_9:
  v7 = v2[224];
  if (v7 >= 1)
    v2[206] = v7;
  return a1;
}

uint64_t gsl::final_action<sig_extractor_pipe<spectral_peak_t>::getWindowedSig(shazam::signature_density)::{lambda(void)#1}>::~final_action(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 1592);
    if (*(_QWORD *)(*(_QWORD *)a1 + 1600) == v3)
      v4 = 0;
    else
      v4 = *(_QWORD *)(v3 + 8 * (*(_QWORD *)(*(_QWORD *)a1 + 1616) >> 9))
         + 8 * (*(_QWORD *)(*(_QWORD *)a1 + 1616) & 0x1FFLL);
    v12[0] = v3 + 8 * (*(_QWORD *)(*(_QWORD *)a1 + 1616) >> 9);
    v12[1] = v4;
    v6 = (char *)std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)v12, *(_QWORD *)(a1 + 8));
    v7 = v2[202] + v2[203];
    v8 = v2[199];
    v9 = (char *)(v8 + 8 * (v7 >> 9));
    if (v2[200] == v8)
      v10 = 0;
    else
      v10 = *(_QWORD *)v9 + 8 * (v7 & 0x1FF);
    std::deque<spectral_peak_t>::erase(v2 + 198, v6, v5, v9, v10);
  }
  return a1;
}

uint64_t std::deque<spectral_peak_t>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (uint64_t *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  std::deque<spectral_peak_t>::__append<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>,0>((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_218C52C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<spectral_peak_t *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<spectral_peak_t>::__append<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>,0>(_QWORD *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  return std::deque<spectral_peak_t>::__append_with_size[abi:ne180100]<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<spectral_peak_t>::__append_with_size[abi:ne180100]<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>>(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<spectral_peak_t>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v22[0] = v8 + 8 * (v11 >> 9);
  v22[1] = v14;
  result = std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>::operator+[abi:ne180100]((uint64_t)v22, a4);
  while (v14 != v16)
  {
    v17 = (_QWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_QWORD *)v14 == v17)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v18 = (_QWORD *)v14;
      do
      {
        v19 = *a3++;
        *v18++ = v19;
        if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
        {
          v20 = (uint64_t *)a2[1];
          ++a2;
          a3 = v20;
        }
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result)
      break;
    v21 = v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

void std::deque<spectral_peak_t>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<spectral_peak_t *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<spectral_peak_t *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<spectral_peak_t *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<spectral_peak_t>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<spectral_peak_t *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_218C53290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<spectral_peak_t>::deque<std::__deque_iterator<spectral_peak_t,spectral_peak_t*,spectral_peak_t&,spectral_peak_t**,long,512l>,0>(uint64_t a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<spectral_peak_t>::__append<std::__deque_iterator<spectral_peak_t,spectral_peak_t const*,spectral_peak_t const&,spectral_peak_t const* const*,long,512l>,0>((_QWORD *)a1, a2, a3, a4, a5);
  return a1;
}

void sub_218C53334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<spectral_peak_t *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void sub_218C535A4(void *a1, int a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v7;

  MEMORY[0x219A21574](v4, 0x20C4093837F09);
  if (a2 == 3)
  {
    objc_msgSend(v2, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v3);

  }
  else
  {
    v7 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v2, "ConvertException:toError:", v7, v3);
    else
      objc_msgSend(v2, "FillUnknownError:", v3);

  }
  __cxa_end_catch();
  JUMPOUT(0x218C53588);
}

void sub_218C53638(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218C53BC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v12;
  void *v15;

  if (__p)
    operator delete(__p);
  if (a2 == 3)
  {
    objc_msgSend(v12, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v11);
  }
  else
  {
    v15 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v12, "ConvertException:toError:", v15, v11);
    else
      objc_msgSend(v12, "FillUnknownError:", v11);
  }
  __cxa_end_catch();
  JUMPOUT(0x218C53BACLL);
}

void sub_218C53C38(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_218C53E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

gsl::details *gsl::details::span_iterator<float>::operator++(gsl::details *result)
{
  unint64_t v1;
  unint64_t v2;

  if (!*(_QWORD *)result || (v1 = *((_QWORD *)result + 2)) == 0 || (v2 = *((_QWORD *)result + 1)) == 0 || v1 >= v2)
    gsl::details::terminate(result);
  *((_QWORD *)result + 2) = v1 + 4;
  return result;
}

uint64_t shazam::SumoHeaderIterator(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  gsl::details *subspan;
  char *v7;
  _BOOL8 v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  gsl::details *v14;
  uint64_t v15;
  uint64_t v16;
  void *exception;
  uint64_t error_code;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  gsl::details *v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  unint64_t v41;
  uint64_t v42;

  v41 = a1;
  v42 = a2;
  if (a1 <= 0x2B)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, error_code, v20);
    goto LABEL_22;
  }
  v4 = shazam::reinterpret_safer<SumoSigInfo const*,0>(&v41);
  v40[0] = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v41, 0x1CuLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  v40[1] = v5;
  subspan = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v41, 8uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  v8 = crc32_check(*(_DWORD *)(v4 + 4), v7, (uint64_t)subspan);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v21 = shazam::make_error_code((shazam *)0x84);
    MEMORY[0x219A21418](exception, v21, v22);
    goto LABEL_22;
  }
  v37 = 1342177283;
  v38 = v41;
  if (v41 == -1 || (v39 = v42) == 0 && v41)
    gsl::details::terminate((gsl::details *)v8);
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
LABEL_15:
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v37);
  v10 = (_DWORD *)shazam::reinterpret_safer<shazam::fp_data_header_extern_new const*,0>(v40);
  *(_QWORD *)&v36 = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)v40, 8uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  *((_QWORD *)&v36 + 1) = v11;
  if (*v10 != 0x40000000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = shazam::make_error_code((shazam *)0x72);
    MEMORY[0x219A21418](exception, v23, v24);
    goto LABEL_22;
  }
  if (v40[0] != v10[1])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v25 = shazam::make_error_code((shazam *)0x70);
    MEMORY[0x219A21418](exception, v25, v26);
    goto LABEL_22;
  }
  v34 = 0x40000000;
  v35 = v36;
  v12 = *(_QWORD *)(a3 + 24);
  if (!v12)
    goto LABEL_15;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v34);
  v13 = (_DWORD *)shazam::reinterpret_safer<shazam::fp_data_header_extern_new const*,0>(&v36);
  v14 = gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)&v36, 8uLL, (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
  if (*v13 != 1610874935)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = shazam::make_error_code((shazam *)0x6B);
    MEMORY[0x219A21418](exception, v27, v28);
    goto LABEL_22;
  }
  if (v14 != (gsl::details *)v13[1])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v29 = shazam::make_error_code((shazam *)0x70);
    MEMORY[0x219A21418](exception, v29, v30);
LABEL_22:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  v31 = 1610874935;
  v32 = v14;
  v33 = v15;
  v16 = *(_QWORD *)(a3 + 24);
  if (!v16)
    goto LABEL_15;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v31);
}

void sub_218C5434C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t get_peak_band(float a1)
{
  uint64_t v1;
  unint64_t v2;

  if (a1 < 250.0)
  {
    v1 = 0;
    v2 = 0;
  }
  else
  {
    v1 = 0;
    v2 = 0;
    if (a1 <= 5500.0)
    {
      v1 = 0;
      while (FREQ_BAND_EDGES[v1 + 1] < a1)
      {
        if (++v1 == 4)
        {
          v1 = 0;
          v2 = 0;
          return v2 | v1;
        }
      }
      v2 = v1 & 0xFFFFFFFFFFFFFF00;
    }
  }
  return v2 | v1;
}

uint64_t chooseAnchors(uint64_t *a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unsigned int *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  _DWORD *v35;
  char *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  _BOOL4 v58;
  _BOOL4 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unsigned int v64;
  BOOL v65;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v71;
  uint64_t v73;
  _DWORD *v74;
  char *v75;
  unint64_t v76;
  char v77;

  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  std::vector<shazam::lmfp<(shazam::fp_type)0>>::reserve((void **)a4, 0x200uLL);
  v7 = (char *)*a1;
  v8 = (char *)a1[1];
  if (v8 != (char *)*a1)
  {
    v9 = 0;
    v10 = (uint64_t)&v8[-*a1] >> 3;
    v11 = a3[1];
    v12 = a2;
    v13 = (char *)*a1;
    v71 = a3;
    do
    {
      if (v8 != v13)
      {
        do
        {
          v14 = v10 >> 1;
          v15 = (unsigned int *)&v13[8 * (v10 >> 1)];
          v17 = *v15;
          v16 = (char *)(v15 + 2);
          v10 += ~(v10 >> 1);
          if (v17 < v11)
            v13 = v16;
          else
            v10 = v14;
        }
        while (v10);
        v8 = v13;
      }
      v18 = (v8 - v7) >> 3;
      v76 = v18;
      v19 = v18 - v9;
      if (v18 - v9 >= v12)
        v20 = v12;
      else
        v20 = v18 - v9;
      v21 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      std::vector<spectral_peak_t>::resize(a4, v20 + (v21 >> 3));
      v22 = v21 >> 3;
      if (v19 <= v12)
      {
        if (v20)
        {
          v26 = 8 * v22;
          v27 = 8 * v9;
          do
          {
            *(_QWORD *)(*(_QWORD *)a4 + v26) = *(_QWORD *)(*a1 + v27);
            v26 += 8;
            v27 += 8;
            --v20;
          }
          while (v20);
        }
      }
      else if (a2)
      {
        v74 = (_DWORD *)*a1;
        v75 = *(char **)a4;
        v23 = (unint64_t *)(*(_QWORD *)a4 + 8 * v22);
        v24 = *a1 + 8 * v9;
        if (v76 == v9)
        {
          v25 = (char *)(*(_QWORD *)a4 + 8 * v22);
        }
        else
        {
          v28 = 8 * v76 - 8 * v9 - 8;
          v29 = 8 * a2 - 8;
          v25 = (char *)(*(_QWORD *)a4 + 8 * v22);
          do
          {
            v30 = *(_QWORD *)v24;
            v24 += 8;
            *(_QWORD *)v25 = v30;
            v25 += 8;
            if (!v28)
              break;
            v28 -= 8;
            v31 = v29;
            v29 -= 8;
          }
          while (v31);
        }
        v73 = v25 - (char *)v23;
        if (v25 - (char *)v23 >= 9)
        {
          v32 = (unint64_t)(((v25 - (char *)v23) >> 3) - 2) >> 1;
          v33 = v32 + 1;
          v34 = (unint64_t *)&v75[8 * v22 + 8 * v32];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((uint64_t)v23, (v25 - (char *)v23) >> 3, v34--);
            --v33;
          }
          while (v33);
        }
        v35 = &v74[2 * v76];
        if ((_DWORD *)v24 != v35)
        {
          v36 = &v75[8 * v22];
          v37 = (unsigned __int16 *)(v36 + 6);
          v38 = (unsigned __int16 *)(v36 + 4);
          do
          {
            v39 = *(unsigned __int16 *)(v24 + 6);
            v40 = *v37;
            v41 = v39 == v40;
            v42 = v39 > v40;
            if (v41)
              v42 = *(unsigned __int16 *)(v24 + 4) > *v38;
            if (v42)
            {
              *v23 = *(_QWORD *)v24;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>((uint64_t)v23, (v25 - (char *)v23) >> 3, v23);
            }
            v24 += 8;
          }
          while ((_DWORD *)v24 != v35);
        }
        v12 = a2;
        a3 = v71;
        if (v73 >= 9)
        {
          v43 = (unint64_t)v73 >> 3;
          do
          {
            v44 = 0;
            v45 = *v23;
            v46 = v23;
            do
            {
              v47 = &v46[v44 + 1];
              v48 = (2 * v44) | 1;
              v49 = 2 * v44 + 2;
              if (v49 < v43)
              {
                v50 = *((unsigned __int16 *)v47 + 3);
                v51 = *((unsigned __int16 *)v47 + 7);
                v41 = v50 == v51;
                v52 = v50 > v51;
                if (v41)
                  v52 = *((unsigned __int16 *)v47 + 2) > *((unsigned __int16 *)v47 + 6);
                v47 += v52;
                if (v52)
                  v48 = v49;
              }
              *v46 = *v47;
              v46 = v47;
              v44 = v48;
            }
            while (v48 <= (uint64_t)((unint64_t)(v43 - 2) >> 1));
            v25 -= 8;
            if (v47 == (unint64_t *)v25)
            {
              *v47 = v45;
            }
            else
            {
              *v47 = *(_QWORD *)v25;
              *(_QWORD *)v25 = v45;
              v53 = (char *)v47 - (char *)v23 + 8;
              if (v53 >= 9)
              {
                v54 = (((unint64_t)v53 >> 3) - 2) >> 1;
                v55 = &v23[v54];
                v56 = *((unsigned __int16 *)v55 + 3);
                v57 = *((unsigned __int16 *)v47 + 3);
                v58 = *((unsigned __int16 *)v55 + 2) > *((unsigned __int16 *)v47 + 2);
                v41 = v56 == v57;
                v59 = v56 > v57;
                if (!v41)
                  v58 = v59;
                if (v58)
                {
                  v60 = *v47;
                  v61 = HIWORD(*v47);
                  do
                  {
                    v62 = v47;
                    v47 = &v23[v54];
                    *v62 = *v47;
                    if (!v54)
                      break;
                    v54 = (v54 - 1) >> 1;
                    v63 = &v23[v54];
                    v64 = *((unsigned __int16 *)v63 + 3);
                    v65 = *((unsigned __int16 *)v63 + 2) > WORD2(v60);
                    if (v64 != (_DWORD)v61)
                      v65 = v64 > v61;
                  }
                  while (v65);
                  *v47 = v60;
                }
              }
            }
          }
          while (v43-- > 2);
        }
      }
      v11 += *a3;
      v7 = (char *)*a1;
      v8 = (char *)a1[1];
      v10 = (uint64_t)&v8[-*a1] >> 3;
      v9 = v76;
      v13 = (char *)*a1;
    }
    while (v76 < v10);
  }
  v67 = *(uint64_t **)(a4 + 8);
  v68 = 126 - 2 * __clz(((uint64_t)v67 - *(_QWORD *)a4) >> 3);
  if (v67 == *(uint64_t **)a4)
    v69 = 0;
  else
    v69 = v68;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,spectral_peak_t *,false>(*(_QWORD *)a4, v67, (uint64_t)&v77, v69, 1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,$_1 &,spectral_peak_t *>(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) + 1;
      v7 = (unint64_t *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2)
      {
        v9 = *((unsigned __int16 *)v7 + 3);
        v10 = *((unsigned __int16 *)v7 + 7);
        v11 = v9 == v10;
        v12 = v9 > v10;
        if (v11)
          v12 = *((unsigned __int16 *)v7 + 2) > *((unsigned __int16 *)v7 + 6);
        v7 += v12;
        if (v12)
          v6 = v8;
      }
      v13 = *((unsigned __int16 *)v7 + 3);
      v14 = *((unsigned __int16 *)a3 + 3);
      v11 = v13 == v14;
      v15 = v13 > v14;
      if (v11)
        v15 = *((unsigned __int16 *)v7 + 2) > *((unsigned __int16 *)a3 + 2);
      if (!v15)
      {
        v16 = *a3;
        v17 = (unsigned __int16)WORD2(*a3);
        v18 = HIWORD(*a3);
        do
        {
          v19 = a3;
          a3 = v7;
          *v19 = *v7;
          if (v4 < v6)
            break;
          v20 = (2 * v6) | 1;
          v7 = (unint64_t *)(result + 8 * v20);
          v21 = 2 * v6 + 2;
          if (v21 < a2)
          {
            v22 = *((unsigned __int16 *)v7 + 3);
            v23 = *((unsigned __int16 *)v7 + 7);
            v11 = v22 == v23;
            v24 = v22 > v23;
            if (v11)
              v24 = *((unsigned __int16 *)v7 + 2) > *((unsigned __int16 *)v7 + 6);
            v7 += v24;
            if (v24)
              v20 = v21;
          }
          v25 = *((unsigned __int16 *)v7 + 3);
          v26 = *((unsigned __int16 *)v7 + 2) > v17;
          v11 = v25 == (_DWORD)v18;
          v27 = v25 > v18;
          if (!v11)
            v26 = v27;
          v6 = v20;
        }
        while (!v26);
        *a3 = v16;
      }
    }
  }
  return result;
}

void fft_stream::reset(void **this)
{
  bzero(this[12], 0x2010uLL);
  bzero(this[14], 0x2020uLL);
  this[15] = 0;
  *((_DWORD *)this + 2158) = 0;
  SpectralOutput::reset((SpectralOutput *)this);
}

void *fft_stream::checkpoint(fft_stream *this)
{
  void *exception;
  uint64_t error_code;
  uint64_t v4;

  if (*((_QWORD *)this + 16) != -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x1F7);
    MEMORY[0x219A21418](exception, error_code, v4);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  return memcpy(*((void **)this + 13), *((const void **)this + 12), 0x2010uLL);
}

void sub_218C549E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fft_stream::rewind(fft_stream *this)
{
  uint64_t v1;
  void *exception;
  uint64_t error_code;
  uint64_t v5;

  v1 = *((_QWORD *)this + 16);
  if (v1 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x1F8);
    MEMORY[0x219A21418](exception, error_code, v5);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  *((_QWORD *)this + 15) = v1;
  memcpy(*((void **)this + 12), *((const void **)this + 13), 0x2010uLL);
  *((_QWORD *)this + 16) = -1;
  bzero(*((void **)this + 13), 0x2010uLL);
}

void sub_218C54A8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fft_stream::stream_flow(uint64_t a1, char *a2, const float *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t i;
  float v14;
  uint64_t frame;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  v6 = *(_QWORD *)(a1 + 120) & 0x7FFLL;
  if ((unint64_t)(2048 - v6) >= 0x80)
    v7 = 128;
  else
    v7 = 2048 - v6;
  memcpy((void *)(*(_QWORD *)(a1 + 96) + 4 * v6), a2, 4 * v7);
  memcpy(*(void **)(a1 + 96), &a2[4 * v7], 512 - 4 * v7);
  v8 = *(char **)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120) + 128;
  *(_QWORD *)(a1 + 120) = v9;
  v10 = v9 & 0x7FF;
  v11 = 2048 - v10;
  v12 = 4 * v10;
  memcpy(v8, (const void *)(*(_QWORD *)(a1 + 96) + 4 * v10), 4 * (2048 - v10));
  memcpy(&v8[4 * v11], *(const void **)(a1 + 96), v12);
  SHZ_FFT::complexform(a1 + 136, (float *)v8, (uint64_t)a3);
  for (i = 0; i != 1025; ++i)
  {
    v14 = a3[i];
    if (v14 <= 1.0e-10)
      v14 = 1.0e-10;
    a3[i] = v14;
  }
  if (SpectralOutput::is_enabled((SpectralOutput *)a1))
  {
    if (SpectralOutput::should_use_frame((SpectralOutput *)a1, *(_DWORD *)(a1 + 8632)))
      SpectralOutput::process_frame((SpectralOutput *)a1, a3);
  }
  else if (SpectralOutput::is_legacy_enabled((SpectralOutput *)a1)
         && SpectralOutput::should_use_frame((SpectralOutput *)a1, *(_DWORD *)(a1 + 8632)))
  {
    frame = SpectralOutput::get_frame((SpectralOutput *)a1, *(_DWORD *)(a1 + 72));
    v16 = *(_DWORD *)(a1 + 88);
    if (v16 <= 0xA)
    {
      v17 = frame;
      v18 = 0;
      do
      {
        v19 = 0;
        v20 = 0.0;
        do
          v20 = v20 + (float)(logf(a3[v19++] + 1.0) * 1477.3);
        while (1 << v16 != v19);
        *(_DWORD *)(v17 + 4 * v18++) = (int)v20 >> v16;
        a3 += 1 << v16;
      }
      while (v18 != 0x400uLL >> v16);
    }
    ++*(_DWORD *)(a1 + 72);
  }
  ++*(_DWORD *)(a1 + 8632);
}

void LegacyFatSigInfo::LegacyFatSigInfo(LegacyFatSigInfo *this, int a2)
{
  uint64_t v2;
  int v3;

  v2 = 0;
  *((_DWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = 0xFACADE99CAFE2580;
  {
    v2 += 2;
    if (v2 == 14)
    {
      v3 = 0;
      goto LABEL_6;
    }
  }
LABEL_6:
  *((_DWORD *)this + 7) = v3;
  *((_DWORD *)this + 11) = 7864320;
}

uint64_t LegacyFatSigInfo::set_audio_sample_length(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 40) = a2;
  *(_WORD *)(this + 44) = WORD2(a2);
  return this;
}

unint64_t LegacyFatSigInfo::get_sample_length_samples(LegacyFatSigInfo *this)
{
  return *((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int16 *)this + 22) << 32);
}

uint64_t LegacyFatSigInfo::get_raw_sample_rate(LegacyFatSigInfo *this)
{
  uint64_t v1;

  v1 = 0;
  {
    v1 += 2;
    if (v1 == 14)
      return 0;
  }
}

uint64_t LegacyFatSigInfo::set_stream_pos(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 32) = a2;
  *(_BYTE *)(result + 36) = BYTE4(a2);
  return result;
}

unint64_t LegacyFatSigInfo::get_stream_pos(LegacyFatSigInfo *this)
{
  return *((unsigned int *)this + 8) | ((unint64_t)*((unsigned __int8 *)this + 36) << 32);
}

double shazam::algo<(AlgoType)12>::matrix_for@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = shazam::algo<(AlgoType)12>::matrix_for (QueryDensity)::query;
  a1[1] = unk_218C7D7A8;
  *(_QWORD *)&result = 0xB0909060000;
  a1[2] = xmmword_218C7D7B8;
  return result;
}

double shazam::algo<(AlgoType)12>::matrix_for@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0x902070B0000;
  result = *(double *)&shazam::algo<(AlgoType)12>::matrix_for (DBDensity)::db;
  *(_OWORD *)a1 = shazam::algo<(AlgoType)12>::matrix_for (DBDensity)::db;
  *(_OWORD *)(a1 + 16) = unk_218C7D7D8;
  return result;
}

uint64_t shazam::algo<(AlgoType)12>::tzones_for@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  {
    v4 = 6;
    v5 = 0xBF00000002;
    v6 = 10;
    v7 = 0xF600000015;
    v8 = 11;
    v9 = 0xF600000001;
    v10 = 12;
    v11 = 0xDF0000000ALL;
    v12 = 13;
    v13 = 0x6900000002;
    std::unordered_map<int,shazam::target_zone_2d>::unordered_map((uint64_t)&shazam::algo<(AlgoType)12>::tzones_for (void)::m, &v4, 5);
    __cxa_atexit((void (*)(void *))std::unordered_map<int,shazam::target_zone_2d>::~unordered_map[abi:ne180100], &shazam::algo<(AlgoType)12>::tzones_for (void)::m, &dword_218BF1000);
  }
  result = std::unordered_map<int,shazam::target_zone_2d>::unordered_map(a1, (uint64_t)&shazam::algo<(AlgoType)12>::tzones_for (void)::m);
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

void sub_218C54EEC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::unordered_map<int,shazam::target_zone_2d>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__emplace_unique_key_args<int,std::pair<int const,shazam::target_zone_2d> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_218C54F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__emplace_unique_key_args<int,std::pair<int const,shazam::target_zone_2d> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *(_QWORD *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_218C553B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,shazam::target_zone_2d>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 12 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::__emplace_unique_key_args<int,std::pair<int const,shazam::target_zone_2d> const&>(a1, a2, (uint64_t)a2);
      a2 += 3;
      v5 -= 12;
    }
    while (v5);
  }
  return a1;
}

void sub_218C55428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,shazam::target_zone_2d>,std::__unordered_map_hasher<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,shazam::target_zone_2d>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,shazam::target_zone_2d>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void SHAZAM_SIGX::SHAZAM_SIGX(uint64_t *a1, uint64_t a2, SHAZAM_SIGX *this, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::logic_error *exception;
  std::runtime_error *v11;

  *a1 = 0;
  if ((a2 - 1) >= 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid signature type.");
    goto LABEL_12;
  }
  if ((a4 - 2) >= 4 && (_DWORD)a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid sig options.");
    goto LABEL_12;
  }
  if ((resample_stream::sample_rate_check(this) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid input sample rate.");
LABEL_12:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D9B6418, MEMORY[0x24BEDAB88]);
  }
  if ((_DWORD)a4 == 2)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Sumo Sig generation not supported!");
    __cxa_throw(v11, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v8 = operator new();
  sig_extractor_pipe<spectral_peak_t>::sig_extractor_pipe(v8, a2, this, a4);
  v9 = *a1;
  *a1 = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_218C555A0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v4;

  __cxa_free_exception(v2);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void SHAZAM_SIGX::~SHAZAM_SIGX(SHAZAM_SIGX *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t SHAZAM_SIGX::flow(SHAZAM_SIGX *this, const __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD, const __int16 *))(**(_QWORD **)this + 16))(*(_QWORD *)this, a2);
}

uint64_t SHAZAM_SIGX::flow(SHAZAM_SIGX *this, __int16 *a2, uint64_t a3, int a4)
{
  shazam::audio::downMix<short>((uint64_t)a2, (int)a3, a4);
  return (*(uint64_t (**)(_QWORD, __int16 *, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, a2, a3);
}

uint64_t shazam::audio::downMix<short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  float v4;
  __int16 *v5;
  int v6;
  __int16 *v7;
  unint64_t v8;
  int v9;

  if (a3 >= 2 && a2)
  {
    v3 = 0;
    v4 = 1.0 / (float)a3;
    v5 = (__int16 *)(result + 2);
    do
    {
      v6 = (int)(float)(v4 * (float)*(__int16 *)(result + 2 * v3 * a3));
      *(_WORD *)(result + 2 * v3) = v6;
      v7 = v5;
      v8 = a3 - 1;
      do
      {
        v9 = *v7++;
        v6 = (int)(float)((float)(__int16)v6 + (float)((float)v9 * v4));
        *(_WORD *)(result + 2 * v3) = v6;
        --v8;
      }
      while (v8);
      ++v3;
      v5 += a3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t SHAZAM_SIGX::flow(SHAZAM_SIGX *this, const float *a2)
{
  return (*(uint64_t (**)(_QWORD, const float *))(**(_QWORD **)this + 24))(*(_QWORD *)this, a2);
}

uint64_t SHAZAM_SIGX::flow(SHAZAM_SIGX *this, float *a2, uint64_t a3, int a4)
{
  shazam::audio::downMix<float>((uint64_t)a2, (int)a3, a4);
  return (*(uint64_t (**)(_QWORD, float *, uint64_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, a2, a3);
}

uint64_t shazam::audio::downMix<float>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  float v4;
  float *v5;
  float v6;
  float *v7;
  unint64_t v8;
  float v9;

  if (a3 >= 2 && a2)
  {
    v3 = 0;
    v4 = 1.0 / (float)a3;
    v5 = (float *)(result + 4);
    do
    {
      v6 = v4 * *(float *)(result + 4 * v3 * a3);
      *(float *)(result + 4 * v3) = v6;
      v7 = v5;
      v8 = a3 - 1;
      do
      {
        v9 = *v7++;
        v6 = v6 + (float)(v9 * v4);
        *(float *)(result + 4 * v3) = v6;
        --v8;
      }
      while (v8);
      ++v3;
      v5 += a3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t SHAZAM_SIGX::get_signature(_QWORD *a1, _QWORD *a2)
{
  a2[1] = *a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
}

uint64_t SHAZAM_SIGX::set_max_rolling_buffer(SHAZAM_SIGX *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)this + 64))(*(_QWORD *)this, a2);
}

uint64_t SHAZAM_SIGX::reset(SHAZAM_SIGX *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 56))(*(_QWORD *)this);
}

uint64_t shazam::sig_alignment::lowerBoundTime(uint64_t a1, unsigned int a2)
{
  return (float)((float)((float)(*(float *)(a1 + 8) + 1.0) * (float)((float)a2 - (float)*(int *)(a1 + 4)))
                             + (float)*(int *)a1);
}

_DWORD *shazam::sig_alignment::setZeroPadding(_DWORD *result, int a2, int a3)
{
  if (a3)
  {
    if (a2)
      return result;
LABEL_6:
    *result += 15;
    return result;
  }
  if (a2)
  {
    ++result;
    goto LABEL_6;
  }
  return result;
}

__n128 shazam::algo<(AlgoType)1>::matrix_for@<Q0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  char *v2;
  __int128 v3;
  __n128 result;

  if (a1 >= 4)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  v2 = (char *)&shazam::algo<(AlgoType)1>::matrix_for (QueryDensity)::query + 48 * a1;
  v3 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v3;
  result = *((__n128 *)v2 + 2);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  char *v2;
  __n128 result;
  __int128 v4;

  if (a1 >= 7)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  v2 = (char *)&shazam::algo<(AlgoType)1>::matrix_for (DBDensity)::db + 40 * a1;
  result = *(__n128 *)v2;
  v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)v2 + 4);
  return result;
}

void shazam::algo<(AlgoType)1>::tzones_for (_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[40] = 0;
}

void sub_218C559F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v18;
  void *v21;

  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = &a17;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 3)
  {
    objc_msgSend(v18, "ConvertSystemError:toError:", __cxa_begin_catch(a1), v17);
  }
  else
  {
    v21 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v18, "ConvertException:toError:", v21, v17);
    else
      objc_msgSend(v18, "FillUnknownError:", v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x218C559D4);
}

void sub_218C55A98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *shazam::ShazamKitHeader::validate(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  result = (_DWORD *)shazam::reinterpret_safer<shazam::ShazamKitHeader const*,0>(v8);
  if (*result != 629155200)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x67);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (v8[0] <= (unint64_t)result[2])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C55E10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::reinterpret_safer<shazam::ShazamKitHeader const*,0>(_QWORD *a1)
{
  uint64_t result;
  void *exception;
  uint64_t error_code;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[1];
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    error_code = shazam::make_error_code((shazam *)0x64);
    MEMORY[0x219A21418](exception, error_code, v5);
    goto LABEL_6;
  }
  if (*a1 <= 0xBuLL)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v6 = shazam::make_error_code((shazam *)0x69);
    MEMORY[0x219A21418](exception, v6, v7);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_218C55ED4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

gsl::details *shazam::ShazamKitHeader::pop(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return gsl::span<char const,18446744073709551615ul>::make_subspan((gsl::details *)v3, *(unsigned int *)(a2 + 8), (gsl::details *)0xFFFFFFFFFFFFFFFFLL);
}

uint64_t shazam::unpack_time(uint64_t a1)
{
  uint64_t result;

  result = shazam::io::read_unaligned<unsigned char,0>(a1);
  if ((_DWORD)result == 255)
    return shazam::io::read_unaligned<unsigned int,0>(a1);
  return result;
}

uint64_t shazam::io::read_unaligned<unsigned int,0>(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  std::logic_error *exception;

  v1 = *(unsigned int **)(a1 + 16);
  v2 = v1 + 1;
  if ((unint64_t)(v1 + 1) > *(_QWORD *)(a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Reading out of bounds of buffer!");
    __cxa_throw(exception, (struct type_info *)off_24D9B6408, MEMORY[0x24BEDAB00]);
  }
  v3 = *v1;
  *(_QWORD *)(a1 + 16) = v2;
  return v3;
}

void sub_218C55FBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t shazam::io::read_unaligned<unsigned short,0>(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  uint64_t v3;
  std::logic_error *exception;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = v1 + 1;
  if ((unint64_t)(v1 + 1) > *(_QWORD *)(a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Reading out of bounds of buffer!");
    __cxa_throw(exception, (struct type_info *)off_24D9B6408, MEMORY[0x24BEDAB00]);
  }
  v3 = *v1;
  *(_QWORD *)(a1 + 16) = v2;
  return v3;
}

void sub_218C56034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void shazam::inflate_basic_sumo_peak_data(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 a4@<W3>, uint64_t *a5@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  unint64_t peak_band;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  std::logic_error *exception;
  std::runtime_error *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  void **v30;

  v29 = a4;
  v28 = a3;
  std::vector<std::vector<spectral_peak_t>>::vector(a5, 4uLL);
  v8 = a2 + a1;
  v25 = a2;
  v26 = a2 + a1;
  v27 = a2;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<shazam::density_filter<spectral_peak_t>>::reserve((uint64_t *)&v22, 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  v9 = *a5;
  v10 = a5[1];
  if (*a5 != v10)
  {
    do
    {
      std::vector<shazam::density_filter<spectral_peak_t>>::emplace_back<std::vector<spectral_peak_t> &,shazam::signature_density const&,std::chrono::duration<unsigned char,std::ratio<1l,125l>> const&>((uint64_t *)&v22, v9, &v28, &v29);
      v9 += 24;
    }
    while (v9 != v10);
    v8 = v26;
    a2 = v27;
  }
  if (a2 != v8)
  {
    v11 = 0;
    do
    {
      v12 = shazam::unpack_time((uint64_t)&v25);
      v13 = shazam::io::read_unaligned<unsigned short,0>((uint64_t)&v25);
      v14 = shazam::io::read_unaligned<unsigned short,0>((uint64_t)&v25);
      if (v27 + 48 > v26)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Reading out of bounds of buffer!");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24D9B6408, MEMORY[0x24BEDAB00]);
      }
      v15 = v14;
      v11 += v12;
      v27 += 48;
      peak_band = get_peak_band((float)((float)v13 * 7.8125) * 0.015625);
      if (v17)
      {
        LODWORD(v30) = v11;
        WORD2(v30) = v13;
        HIWORD(v30) = v15;
        shazam::density_filter<spectral_peak_t>::operator<<(&v22[4 * peak_band], (unsigned int *)&v30);
      }
    }
    while (v27 != v26);
  }
  v18 = v22;
  v19 = v23;
  if (v22 != v23)
  {
    do
    {
      shazam::density_filter<spectral_peak_t>::flush(v18);
      v18 += 4;
    }
    while (v18 != v19);
    if (v27 != v26)
    {
      v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Sumo decoding read more bytes than expected! Can't unpack this sig.");
      __cxa_throw(v21, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  v30 = (void **)&v22;
  std::vector<shazam::density_filter<spectral_peak_t>>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_218C56250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16)
{
  void *v16;

  __cxa_free_exception(v16);
  a16 = &a9;
  std::vector<shazam::density_filter<spectral_peak_t>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<shazam::density_filter<spectral_peak_t>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[5];

  v4 = a1[2];
  result = a1 + 2;
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = (uint64_t)result;
    v7[0] = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SearchPlan>>((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<shazam::density_filter<spectral_peak_t>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<shazam::density_filter<spectral_peak_t>>::~__split_buffer(v7);
  }
  return result;
}

void sub_218C56324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<shazam::density_filter<spectral_peak_t>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<shazam::density_filter<spectral_peak_t>>::emplace_back<std::vector<spectral_peak_t> &,shazam::signature_density const&,std::chrono::duration<unsigned char,std::ratio<1l,125l>> const&>(uint64_t *a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v28[5];

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD **)(v8 - 8);
  if ((unint64_t)v11 >= v10)
  {
    v17 = ((uint64_t)v11 - *a1) >> 5;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v19 = v9 - *a1;
    if (v19 >> 4 > v18)
      v18 = v19 >> 4;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
      v20 = 0x7FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    v28[4] = v8;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SearchPlan>>(v8, v20);
    v22 = &v21[32 * v17];
    v28[0] = (uint64_t)v21;
    v28[1] = (uint64_t)v22;
    v28[3] = (uint64_t)&v21[32 * v23];
    v24 = *a3;
    v25 = *a4;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = a2;
    if (v24 == 0x7FFFFFFF)
      v24 = -1;
    v14 = v25 == 15;
    v26 = 256;
    if (v14)
      v26 = 211;
    *((_QWORD *)v22 + 2) = v24;
    *((_QWORD *)v22 + 3) = v26;
    v28[2] = (uint64_t)(v22 + 32);
    std::vector<shazam::density_filter<spectral_peak_t>>::__swap_out_circular_buffer(a1, v28);
    v16 = (_QWORD *)a1[1];
    std::__split_buffer<shazam::density_filter<spectral_peak_t>>::~__split_buffer(v28);
  }
  else
  {
    v12 = *a3;
    v13 = *a4;
    *v11 = 0;
    v11[1] = a2;
    if (v12 == 0x7FFFFFFF)
      v12 = -1;
    v14 = v13 == 15;
    v15 = 256;
    if (v14)
      v15 = 211;
    v11[2] = v12;
    v11[3] = v15;
    v16 = v11 + 4;
    a1[1] = (uint64_t)(v11 + 4);
  }
  a1[1] = (uint64_t)v16;
  return v16 - 4;
}

void sub_218C56474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<shazam::density_filter<spectral_peak_t>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t shazam::io::read_unaligned<unsigned char,0>(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  std::logic_error *exception;

  v1 = *(unsigned __int8 **)(a1 + 16);
  v2 = v1 + 1;
  if ((unint64_t)(v1 + 1) > *(_QWORD *)(a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Reading out of bounds of buffer!");
    __cxa_throw(exception, (struct type_info *)off_24D9B6408, MEMORY[0x24BEDAB00]);
  }
  v3 = *v1;
  *(_QWORD *)(a1 + 16) = v2;
  return v3;
}

void sub_218C564EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<shazam::density_filter<spectral_peak_t>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<shazam::density_filter<spectral_peak_t>>::__base_destruct_at_end[abi:ne180100]((uint64_t *)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

uint64_t *std::vector<shazam::density_filter<spectral_peak_t>>::__base_destruct_at_end[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *i;

  v3 = result;
  for (i = (uint64_t *)result[1]; i != a2; result = shazam::density_filter<spectral_peak_t>::flush(i))
    i -= 4;
  v3[1] = (uint64_t)a2;
  return result;
}

uint64_t std::vector<shazam::density_filter<spectral_peak_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v10;
      v9 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>,std::reverse_iterator<std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t *std::__allocator_destroy[abi:ne180100]<std::allocator<shazam::density_filter<spectral_peak_t>>,std::reverse_iterator<std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>,std::reverse_iterator<std::reverse_iterator<shazam::density_filter<spectral_peak_t>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;

  for (result = *(uint64_t **)(a2 + 32); result != *(uint64_t **)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    shazam::density_filter<spectral_peak_t>::flush(result);
    result = (uint64_t *)(*(_QWORD *)(a2 + 32) + 32);
  }
  return result;
}

uint64_t *std::__split_buffer<shazam::density_filter<spectral_peak_t>>::~__split_buffer(uint64_t *a1)
{
  std::__split_buffer<shazam::density_filter<spectral_peak_t>>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  if (*a1)
    operator delete((void *)*a1);
  return a1;
}

uint64_t *std::__split_buffer<shazam::density_filter<spectral_peak_t>>::__destruct_at_end[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  while (1)
  {
    v4 = v3[2];
    if (v4 == a2)
      break;
    v3[2] = v4 - 32;
    result = shazam::density_filter<spectral_peak_t>::flush((uint64_t *)(v4 - 32));
  }
  return result;
}

void shazam::get_grain(float **a1@<X0>, float **a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  float **v7;
  float *v8;
  float **v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;

  v7 = (float **)std::vector<float>::vector(a3, a1[1] - *a1);
  v9 = a1;
  v8 = *a1;
  v10 = (char *)v9[1] - (char *)v8;
  if (v10)
  {
    v11 = v10 >> 2;
    v12 = a4 * 6.2832;
    v13 = *a2;
    v14 = *v7;
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = v11;
    do
    {
      v16 = *v8++;
      v17 = v16;
      v18 = *v13++;
      *v14++ = v17 * cosf(v12 * v18);
      --v15;
    }
    while (v15);
  }
}

void shazam::blips_and_blops(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  float v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  int64x2_t v10;
  uint64x2_t v11;
  int64x2_t v12;
  int32x2_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  int v21;
  float v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float *v27;
  float *v28;
  BOOL v29;
  float *v30;
  float v31;
  float *v32;
  unsigned int v33;
  float v34;
  float v35;
  int v36;
  _WORD *v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  uint64_t v41;
  float *v42;
  float v43;
  void *__p[3];
  float *v45;
  float *v46;
  void *v47[3];
  void *v48[3];

  v5 = (float)a2;
  v6 = (int)(float)((float)a2 * 0.03);
  if ((v6 & 0x80000001) == 1)
    v7 = v6 + 1;
  else
    v7 = v6;
  shazam::windows::blackmanHarris((shazam::windows *)(int)v7, v48);
  std::vector<float>::vector(v47, (int)v7);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = (float *)v47[0];
    v10 = (int64x2_t)xmmword_218C5E9D0;
    v11 = (uint64x2_t)vdupq_n_s64(v7 - 1);
    v12 = vdupq_n_s64(2uLL);
    do
    {
      v13 = vmovn_s64((int64x2_t)vcgeq_u64(v11, (uint64x2_t)v10));
      if ((v13.i8[0] & 1) != 0)
        v9[v8] = (float)(int)v8 / v5;
      if ((v13.i8[4] & 1) != 0)
        v9[v8 + 1] = (float)(v8 + 1) / v5;
      v8 += 2;
      v10 = vaddq_s64(v10, v12);
    }
    while (((v7 + 1) & 0x1FFFFFFFELL) != v8);
  }
  v14 = (int)(float)((float)((float)((float)*(unsigned int *)(a1[1] - 8) / 125.0) + 0.03) * v5);
  std::vector<short>::vector(a3, v14);
  std::vector<float>::vector(&v45, v14);
  v17 = *a1;
  v16 = a1[1];
  if (v17 != v16)
  {
    while (1)
    {
      v18 = *(_DWORD *)v17;
      LOWORD(v15) = *(_WORD *)(v17 + 4);
      shazam::get_grain((float **)v48, (float **)v47, __p, (float)((float)v15 * 7.8125) * 0.015625);
      v19 = __p[0];
      if ((int)v7 >= 1)
        break;
      if (__p[0])
        goto LABEL_17;
LABEL_18:
      v17 += 8;
      if (v17 == v16)
        goto LABEL_19;
    }
    *(float *)&v20 = (float)((float)((float)v18 / 125.0) + -0.015) * v5;
    LODWORD(v24) = (int)*(float *)&v20;
    v21 = v7 + (int)*(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v17 + 6);
    v22 = (float)v20;
    v23 = v45;
    v24 = (int)v24;
    v25 = (float *)__p[0];
    do
    {
      v26 = *v25++;
      v23[v24] = v23[v24] + (float)(v22 * v26);
      ++v24;
    }
    while (v24 < v21);
LABEL_17:
    __p[1] = v19;
    operator delete(v19);
    goto LABEL_18;
  }
LABEL_19:
  v27 = v45;
  v28 = v45 + 1;
  v29 = v45 == v46 || v28 == v46;
  v30 = v45;
  if (!v29)
  {
    v31 = *v45;
    v30 = v45;
    v32 = v45 + 1;
    do
    {
      v33 = (int)v31;
      v34 = *v32++;
      v35 = v34;
      v36 = (int)v34;
      if ((int)v31 < 0)
        v33 = -v33;
      if (v36 < 0)
        v36 = -v36;
      if (v33 < v36)
      {
        v31 = v35;
        v30 = v28;
      }
      v28 = v32;
    }
    while (v32 != v46);
  }
  v37 = (_WORD *)*a3;
  v38 = a3[1] - *a3;
  if (v38)
  {
    v39 = v38 >> 1;
    v40 = *v30;
    if (v39 <= 1)
      v41 = 1;
    else
      v41 = v39;
    v42 = v45;
    do
    {
      v43 = *v42++;
      *v37++ = (int)(float)((float)(v43 / v40) * 32767.0);
      --v41;
    }
    while (v41);
  }
  else if (!v45)
  {
    goto LABEL_40;
  }
  v46 = v27;
  operator delete(v27);
LABEL_40:
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
}

void sub_218C56B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void shazam::sonify_signature(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void *__p[3];

  flatten_and_sort((char ***)(a1 + 32), (uint64_t)__p);
  shazam::blips_and_blops((uint64_t *)__p, a2, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_218C56C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_218C56C88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_218C5736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t *a47,uint64_t a48,char a49)
{
  void *v49;
  uint64_t v50;
  void *v53;

  if (a2)
  {
    shazam::CPUDatabases::~CPUDatabases((shazam::CPUDatabases *)&a15);
    shazam::CPUDatabaseBuilder::~CPUDatabaseBuilder((shazam::CPUDatabaseBuilder *)&a30);
    std::unique_ptr<MREInstance>::reset[abi:ne180100](&a47, 0);
    if (a2 == 3)
    {
      objc_msgSend(v49, "ConvertSystemError:toError:", __cxa_begin_catch(exception_object), v50);

      __cxa_end_catch();
    }
    else
    {
      v53 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
        objc_msgSend(v49, "ConvertException:toError:", v53, v50);
      else
        objc_msgSend(v49, "FillUnknownError:", v50);

      __cxa_end_catch();
    }
    JUMPOUT(0x218C5732CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_218C576F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  void *v20;
  char *v23;
  uint64_t v24;
  void *v25;

  if (!a2)
    _Unwind_Resume(exception_object);
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_7;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_7:
  a15 = &a9;
  std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (a2 == 3)
  {
    objc_msgSend(v20, "ConvertSystemError:toError:", __cxa_begin_catch(exception_object), v19);
    __cxa_end_catch();
  }
  else
  {
    v25 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      objc_msgSend(v20, "ConvertException:toError:", v25, v19);
    else
      objc_msgSend(v20, "FillUnknownError:", v19);
    __cxa_end_catch();
  }
  JUMPOUT(0x218C57610);
}

void shazam::make_vector<shazam::basic_signature<(shazam::signature_density)24>,gsl::span<char const,18446744073709551615ul> const&>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::vector<shazam::basic_signature<(shazam::signature_density)24>>::reserve(&v7, 1uLL);
  v4 = v8;
  if (v8 >= v9)
  {
    v5 = std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__emplace_back_slow_path<gsl::span<char const,18446744073709551615ul> const&>(&v7, a1);
  }
  else
  {
    std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__construct_one_at_end[abi:ne180100]<gsl::span<char const,18446744073709551615ul> const&>((uint64_t)&v7, a1);
    v5 = v4 + 56;
  }
  v6 = v9;
  *a2 = v7;
  a2[1] = v5;
  a2[2] = v6;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v10 = (void **)&v7;
  std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_218C578AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::vector<shazam::basic_signature<(shazam::signature_density)24>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 56 * v6;
    std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::~__split_buffer(v7);
  }
  return result;
}

void sub_218C57C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__construct_one_at_end[abi:ne180100]<gsl::span<char const,18446744073709551615ul> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *(_QWORD *)(a1 + 8);
  shazam::packed_signature_view::packed_signature_view(v5, *a2, a2[1]);
  result = shazam::basic_signature<(shazam::signature_density)24>::basic_signature(v3, v5);
  *(_QWORD *)(a1 + 8) = v3 + 56;
  return result;
}

void sub_218C57C6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__emplace_back_slow_path<gsl::span<char const,18446744073709551615ul> const&>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  _BYTE v18[24];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<shazam::basic_signature<(shazam::signature_density)24>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v15 = v14;
  v16 = &v10[56 * v9];
  shazam::packed_signature_view::packed_signature_view(v18, *a2, a2[1]);
  shazam::basic_signature<(shazam::signature_density)24>::basic_signature(v14, v18);
  v15 = v14 + 56;
  std::vector<shazam::basic_signature<(shazam::signature_density)24>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::~__split_buffer(&v13);
  return v11;
}

void sub_218C57D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__split_buffer<shazam::basic_signature<(shazam::signature_density)24>>::~__split_buffer(&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<MREInstance>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x219A21574);
  }
  return result;
}

void FFT_implementation_apple::FFT_implementation_apple(FFT_implementation_apple *this, uint64_t a2)
{
  signed int v3;

  *(_QWORD *)this = &off_24D9B7180;
  v3 = 31 - __clz(a2);
  *((_DWORD *)this + 2) = v3;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = vDSP_create_fftsetup(v3, 0);
  *((_QWORD *)this + 4) = operator new[]();
  *((_QWORD *)this + 5) = operator new[]();
}

void FFT_implementation_apple::~FFT_implementation_apple(FFTSetup *this)
{
  FFTSetup v2;
  FFTSetup v3;

  *this = (FFTSetup)&off_24D9B7180;
  vDSP_destroy_fftsetup(this[3]);
  v2 = this[4];
  if (v2)
    MEMORY[0x219A2155C](v2, 0x1000C8052888210);
  v3 = this[5];
  if (v3)
    MEMORY[0x219A2155C](v3, 0x1000C8052888210);
}

{
  FFT_implementation_apple::~FFT_implementation_apple(this);
  JUMPOUT(0x219A21574);
}

void FFT_implementation_apple::magxform(FFT_implementation_apple *this, DSPComplex *__C, float *a3)
{
  const DSPSplitComplex *v5;
  _DWORD *v6;
  int v7;

  v5 = (const DSPSplitComplex *)((char *)this + 32);
  vDSP_ctoz(__C, 2, (const DSPSplitComplex *)this + 2, 1, 1 << (*((_DWORD *)this + 2) - 1));
  vDSP_fft_zrip(*((FFTSetup *)this + 3), v5, 1, *((int *)this + 2), 1);
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  v7 = 1 << (*((_DWORD *)this + 2) - 1);
  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v7) = *v6;
  v6[v7] = 0;
  *v6 = 0;
  FFT_implementation_apple::toSHZFFT_Magnitude((const DSPSplitComplex *)this, a3);
}

void FFT_implementation_apple::toSHZFFT_Magnitude(const DSPSplitComplex *this, float *__C)
{
  float __B;

  vDSP_zvmags(this + 2, 1, __C, 1, 0x401uLL);
  __B = 0.0000019073;
  vDSP_vsmul(__C, 1, &__B, __C, 1, 0x401uLL);
}

void FFT_implementation_apple::magcomplexform(uint64_t a1, DSPComplex *__C, float *a3, uint64_t a4)
{
  const DSPSplitComplex *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  int v13;

  v7 = (const DSPSplitComplex *)(a1 + 32);
  vDSP_ctoz(__C, 2, (const DSPSplitComplex *)(a1 + 32), 1, 1 << (*(_DWORD *)(a1 + 8) - 1));
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 24), v7, 1, *(int *)(a1 + 8), 1);
  v8 = 0;
  v10 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD **)(a1 + 40);
  v11 = 1 << (*(_DWORD *)(a1 + 8) - 1);
  *(_DWORD *)(v10 + 4 * v11) = *v9;
  v9[v11] = 0;
  *v9 = 0;
  v12 = (_DWORD *)(a4 + 4);
  do
  {
    v13 = v9[v8];
    *(v12 - 1) = *(_DWORD *)(v10 + 4 * v8);
    *v12 = v13;
    ++v8;
    v12 += 2;
  }
  while (v8 != 1025);
  FFT_implementation_apple::toSHZFFT_Magnitude((const DSPSplitComplex *)a1, a3);
}

void FFT_implementation_apple::fftr(uint64_t a1, DSPComplex *__C, uint64_t a3)
{
  const DSPSplitComplex *v5;
  float *v6;
  float *v7;
  int v8;
  vDSP_Length v9;
  int *v10;
  int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  float __B;

  v5 = (const DSPSplitComplex *)(a1 + 32);
  vDSP_ctoz(__C, 2, (const DSPSplitComplex *)(a1 + 32), 1, 1 << (*(_DWORD *)(a1 + 8) - 1));
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 24), v5, 1, *(int *)(a1 + 8), 1);
  v6 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v8 = 1 << (*(_DWORD *)(a1 + 8) - 1);
  v6[v8] = *v7;
  v7[v8] = 0.0;
  *v7 = 0.0;
  v9 = (*(_QWORD *)(a1 + 16) >> 1) + 1;
  __B = 0.5;
  vDSP_vsmul(v6, 1, &__B, v6, 1, v9);
  vDSP_vsmul(*(const float **)(a1 + 40), 1, &__B, *(float **)(a1 + 40), 1, v9);
  v10 = *(int **)(a1 + 32);
  v11 = *(int **)(a1 + 40);
  v12 = (_DWORD *)(a3 + 4);
  do
  {
    v14 = *v10++;
    v13 = v14;
    v15 = *v11++;
    *(v12 - 1) = v13;
    *v12 = v15;
    v12 += 2;
    --v9;
  }
  while (v9);
}

void FFT_implementation_apple::fftc(uint64_t a1, DSPComplex *__C, DSPComplex *a3)
{
  const DSPSplitComplex *v5;
  vDSP_Length v6;

  v5 = (const DSPSplitComplex *)(a1 + 32);
  v6 = 1 << (*(_DWORD *)(a1 + 8) - 1);
  vDSP_ctoz(__C, 2, (const DSPSplitComplex *)(a1 + 32), 1, v6);
  vDSP_fft_zip(*(FFTSetup *)(a1 + 24), v5, 1, *(int *)(a1 + 8) - 1, 1);
  vDSP_ztoc(v5, 1, a3, 2, v6);
}

void FFT_implementation_apple::fftri(uint64_t a1, uint64_t a2, unint64_t a3, DSPComplex *a4)
{
  const DSPSplitComplex *v7;
  vDSP_Length v8;
  OpaqueFFTSetup *v9;

  v7 = (const DSPSplitComplex *)(a1 + 32);
  vDSP_ctoz(*(const DSPComplex **)(a2 + 8), 2, (const DSPSplitComplex *)(a1 + 32), 1, *(_QWORD *)a2);
  v8 = *(int *)(a1 + 8);
  v9 = *(OpaqueFFTSetup **)(a1 + 24);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * (1 << (v8 - 1)));
  vDSP_fft_zrip(v9, v7, 1, v8, -1);
  vDSP_ztoc(v7, 1, a4, 2, a3 >> 1);
}

uint64_t sub_218C584E4()
{
  return MEMORY[0x24BDBB2D8]();
}

uint64_t sub_218C584F0()
{
  return MEMORY[0x24BDBB2E0]();
}

uint64_t sub_218C584FC()
{
  return MEMORY[0x24BDCAEB0]();
}

uint64_t sub_218C58508()
{
  return MEMORY[0x24BDCAED8]();
}

uint64_t sub_218C58514()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_218C58520()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_218C5852C()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_218C58538()
{
  return MEMORY[0x24BDCB8E8]();
}

uint64_t sub_218C58544()
{
  return MEMORY[0x24BDCB900]();
}

uint64_t sub_218C58550()
{
  return MEMORY[0x24BDCB918]();
}

uint64_t sub_218C5855C()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t sub_218C58568()
{
  return MEMORY[0x24BDCD280]();
}

uint64_t sub_218C58574()
{
  return MEMORY[0x24BDCD288]();
}

uint64_t sub_218C58580()
{
  return MEMORY[0x24BDCD290]();
}

uint64_t sub_218C5858C()
{
  return MEMORY[0x24BDCD298]();
}

uint64_t sub_218C58598()
{
  return MEMORY[0x24BDCD2A8]();
}

uint64_t sub_218C585A4()
{
  return MEMORY[0x24BDCD2B8]();
}

uint64_t sub_218C585B0()
{
  return MEMORY[0x24BDCD2C0]();
}

uint64_t sub_218C585BC()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_218C585C8()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_218C585D4()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_218C585E0()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_218C585EC()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_218C585F8()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t sub_218C58604()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_218C58610()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_218C5861C()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_218C58628()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_218C58634()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_218C58640()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_218C5864C()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t sub_218C58658()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_218C58664()
{
  return MEMORY[0x24BEE5C38]();
}

uint64_t sub_218C58670()
{
  return MEMORY[0x24BEE5C40]();
}

uint64_t sub_218C5867C()
{
  return MEMORY[0x24BEE5C48]();
}

uint64_t sub_218C58688()
{
  return MEMORY[0x24BEE5C50]();
}

uint64_t sub_218C58694()
{
  return MEMORY[0x24BEE5C58]();
}

uint64_t sub_218C586A0()
{
  return MEMORY[0x24BEE5C60]();
}

uint64_t sub_218C586AC()
{
  return MEMORY[0x24BEE63B8]();
}

uint64_t sub_218C586B8()
{
  return MEMORY[0x24BEE6410]();
}

uint64_t sub_218C586C4()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_218C586D0()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_218C586DC()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_218C586E8()
{
  return MEMORY[0x24BDB9818]();
}

uint64_t sub_218C586F4()
{
  return MEMORY[0x24BDB9B40]();
}

uint64_t sub_218C58700()
{
  return MEMORY[0x24BDB9B50]();
}

uint64_t sub_218C5870C()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t sub_218C58718()
{
  return MEMORY[0x24BDB9F90]();
}

uint64_t sub_218C58724()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t sub_218C58730()
{
  return MEMORY[0x24BDDF500]();
}

uint64_t sub_218C5873C()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_218C58748()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_218C58754()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_218C58760()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_218C5876C()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_218C58778()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_218C58784()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_218C58790()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_218C5879C()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_218C587A8()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_218C587B4()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_218C587C0()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_218C587CC()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_218C587D8()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_218C587E4()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_218C587F0()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_218C587FC()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_218C58808()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_218C58814()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_218C58820()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_218C5882C()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_218C58838()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t sub_218C58844()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_218C58850()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_218C5885C()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_218C58868()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t sub_218C58874()
{
  return MEMORY[0x24BEE6A68]();
}

uint64_t sub_218C58880()
{
  return MEMORY[0x24BEE6A78]();
}

uint64_t sub_218C5888C()
{
  return MEMORY[0x24BEE6A98]();
}

uint64_t sub_218C58898()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t sub_218C588A4()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_218C588B0()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_218C588BC()
{
  return MEMORY[0x24BEE6CB8]();
}

uint64_t sub_218C588C8()
{
  return MEMORY[0x24BEE6CC0]();
}

uint64_t sub_218C588D4()
{
  return MEMORY[0x24BEE6CC8]();
}

uint64_t sub_218C588E0()
{
  return MEMORY[0x24BEE6CE0]();
}

uint64_t sub_218C588EC()
{
  return MEMORY[0x24BEE6CF8]();
}

uint64_t sub_218C588F8()
{
  return MEMORY[0x24BEE6D30]();
}

uint64_t sub_218C58904()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_218C58910()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t sub_218C5891C()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_218C58928()
{
  return MEMORY[0x24BDD0078]();
}

uint64_t sub_218C58934()
{
  return MEMORY[0x24BDD0098]();
}

uint64_t sub_218C58940()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_218C5894C()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_218C58958()
{
  return MEMORY[0x24BEE5BD0]();
}

uint64_t sub_218C58964()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_218C58970()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_218C5897C()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_218C58988()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_218C58994()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t sub_218C589A0()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t sub_218C589AC()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_218C589B8()
{
  return MEMORY[0x24BEE2360]();
}

uint64_t sub_218C589C4()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_218C589D0()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_218C589DC()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_218C589E8()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_218C589F4()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_218C58A00()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t sub_218C58A0C()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_218C58A18()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_218C58A24()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_218C58A30()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_218C58A3C()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_218C58A48()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_218C58A54()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_218C58A60()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_218C58A6C()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_218C58A78()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_218C58A84()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_218C58A90()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_218C58A9C()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_218C58AA8()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_218C58AB4()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_218C58AC0()
{
  return MEMORY[0x24BEE3540]();
}

uint64_t sub_218C58ACC()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_218C58AD8()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t sub_218C58AE4()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_218C58AF0()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t sub_218C58AFC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_218C58B08()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_218C58B14()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_218C58B20()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_218C58B2C()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_218C58B38()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_218C58B44()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_218C58B50()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_218C58B5C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_218C58B68()
{
  return MEMORY[0x24BEE4328]();
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

OSStatus CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(CMSampleBufferRef sbuf, size_t *bufferListSizeNeededOut, AudioBufferList *bufferListOut, size_t bufferListSize, CFAllocatorRef blockBufferStructureAllocator, CFAllocatorRef blockBufferBlockAllocator, uint32_t flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x24BDC02B0](sbuf, bufferListSizeNeededOut, bufferListOut, bufferListSize, blockBufferStructureAllocator, blockBufferBlockAllocator, *(_QWORD *)&flags, blockBufferOut);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x24BDE8D38](task, error);
}

uint64_t SecTaskCopyTeamIdentifier()
{
  return MEMORY[0x24BDE8D40]();
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x24BDE8D78](allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec)
{
  return (std::system_error *)MEMORY[0x24BEDAD98](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec, const std::string *__what_arg)
{
  return (std::system_error *)MEMORY[0x24BEDADA8](this, *(_QWORD *)&__ec.__val_, __ec.__cat_, __what_arg);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const std::string *__what_arg)
{
  return (std::system_error *)MEMORY[0x24BEDADB8](this, *(_QWORD *)&__ev, __ecat, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
  MEMORY[0x24BEDADC8](this);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF40]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void *__cdecl std::align(size_t __align, size_t __sz, void **__ptr, size_t *__space)
{
  return (void *)MEMORY[0x24BEDB340](__align, __sz, __ptr, __space);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24D9B6470();
}

void operator delete(void *__p)
{
  off_24D9B6478(__p);
}

uint64_t operator delete()
{
  return off_24D9B6480();
}

uint64_t operator new[]()
{
  return off_24D9B6488();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24D9B6490(__sz);
}

uint64_t operator new()
{
  return off_24D9B6498();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

long double expm1(long double __x)
{
  long double result;

  MEMORY[0x24BDAE290](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED68](alignment, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x24BDAF478](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x24BEE71C8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

FFTSetup vDSP_create_fftsetup(vDSP_Length __Log2n, FFTRadix __Radix)
{
  return (FFTSetup)MEMORY[0x24BDB31A0](__Log2n, *(_QWORD *)&__Radix);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x24BDB31A8](__C, __IC, __Z, __IZ, __N);
}

void vDSP_destroy_fftsetup(FFTSetup __setup)
{
  MEMORY[0x24BDB31C0](__setup);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_fft_zip(FFTSetup __Setup, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
  MEMORY[0x24BDB31F0](__Setup, __C, __IC, __Log2N, *(_QWORD *)&__Direction);
}

void vDSP_fft_zrip(FFTSetup __Setup, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
  MEMORY[0x24BDB31F8](__Setup, __C, __IC, __Log2N, *(_QWORD *)&__Direction);
}

void vDSP_hann_window(float *__C, vDSP_Length __N, int __Flag)
{
  MEMORY[0x24BDB3208](__C, __N, *(_QWORD *)&__Flag);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34F0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3598](__Z, __IZ, __C, __IC, __N);
}

void vDSP_zvmags(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB35C0](__A, __IA, __C, __IC, __N);
}

