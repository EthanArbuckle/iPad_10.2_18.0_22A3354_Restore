ValueMetadata *type metadata accessor for SHA512Digest()
{
  return &type metadata for SHA512Digest;
}

ValueMetadata *type metadata accessor for SHA512()
{
  return &type metadata for SHA512;
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

ValueMetadata *type metadata accessor for SHA256()
{
  return &type metadata for SHA256;
}

ValueMetadata *type metadata accessor for Insecure.MD5Digest()
{
  return &type metadata for Insecure.MD5Digest;
}

ValueMetadata *type metadata accessor for Insecure.MD5()
{
  return &type metadata for Insecure.MD5;
}

ValueMetadata *type metadata accessor for SHA256Digest()
{
  return &type metadata for SHA256Digest;
}

uint64_t dispatch thunk of HashFunction.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of HashFunction.finalize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_1A5BEB208()
{
  return 0;
}

uint64_t sub_1A5BEB210@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF123C(MEMORY[0x1E0C821F0], &qword_1ECF97550, a1);
}

void *_s9CryptoKit8InsecureO3MD5V6update13bufferPointerySW_tF_0(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEC300(a1, a2, &qword_1ECF97550);
}

uint64_t sub_1A5BEB234(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1)
    v6 = a1 + 32;
  else
    v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t SHA256.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF10EC(MEMORY[0x1E0C823E0], &qword_1ECF97A18, a1);
}

uint64_t static SHA256Digest.byteCount.getter()
{
  return 32;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _s5NonceVwxx(uint64_t a1)
{
  return sub_1A5BEFF90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

ValueMetadata *type metadata accessor for P256.Signing.ECDSASignature()
{
  return &type metadata for P256.Signing.ECDSASignature;
}

ValueMetadata *type metadata accessor for P256.Signing.PrivateKey()
{
  return &type metadata for P256.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SymmetricKey()
{
  return &type metadata for SymmetricKey;
}

ValueMetadata *type metadata accessor for P256.Signing.PublicKey()
{
  return &type metadata for P256.Signing.PublicKey;
}

uint64_t _s5NonceVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t _s5NonceVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

ValueMetadata *type metadata accessor for ChaChaPoly.Nonce()
{
  return &type metadata for ChaChaPoly.Nonce;
}

ValueMetadata *type metadata accessor for Insecure.SHA1()
{
  return &type metadata for Insecure.SHA1;
}

uint64_t P256.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BEBA08(MEMORY[0x1E0C81C60], a1);
}

uint64_t type metadata accessor for CoreCryptoDigestBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoDigestBuffer);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1A85B3FA4](a1, v6, a5);
}

uint64_t sub_1A5BEB404()
{
  return swift_initClassMetadata2();
}

void static ChaChaPoly.open(_:using:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  sub_1A5BEDEC4(*a3, a1, a2);
}

uint64_t static ChaChaPoly.seal<A>(_:using:nonce:)(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12[3];
  uint64_t v13;

  v13 = *a2;
  v8 = *a3;
  v11 = xmmword_1A5C43D50;
  *(_OWORD *)v12 = v8;
  v9 = sub_1A5BEB4F4();
  return sub_1A5BEE4AC(&v13, a1, v12, (uint64_t)&v11, a4, MEMORY[0x1E0CB0338], a5, v9);
}

unint64_t sub_1A5BEB4F4()
{
  unint64_t result;

  result = qword_1ECF976F8;
  if (!qword_1ECF976F8)
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ECF976F8);
  }
  return result;
}

uint64_t sub_1A5BEB538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BECEF8(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1A5BEB554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 32) + 40))(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A5BEB588(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEB5A4(a1, a2, MEMORY[0x1E0C81D50]);
}

uint64_t sub_1A5BEB5A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;

  return sub_1A5BEB5DC(a1, a2, *(_QWORD **)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD **)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_1A5BEB5DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v18;
  _QWORD v19[4];

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(a9 + 24))(v19, a7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  result = swift_dynamicCast();
  if (a1)
  {
    result = a11(v18, a2 - a1, a1, a4);
    *a3 = (int)result;
    *a5 = a6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1A5BEE468(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_1A5BEB6D4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  memset_s(v1, 0x100uLL, 0, 0x100uLL);
  MEMORY[0x1A85B4070](v1, -1, -1);
  return swift_deallocClassInstance();
}

uint64_t P256.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5BEB73C(a1, a2, MEMORY[0x1E0C81C60], a3);
}

uint64_t sub_1A5BEB73C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A5C41C54();
  result = a3();
  if (!result)
    goto LABEL_9;
  v12 = result;
  v13 = (void *)objc_opt_self();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  v21 = v12;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v13, sel_groupOrderByteCountForCP_, v23);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result + 0x4000000000000000 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v10 == 2 * result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    v14 = sub_1A5C419FC();
    v16 = v15;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    v17 = v20;
    *v20 = v14;
    v17[1] = v16;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v18 = 1;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }
  return result;
}

uint64_t sub_1A5BEB8F0()
{
  return sub_1A5BEB910();
}

uint64_t sub_1A5BEB910()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5BEBA08@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  size_t v6;
  uint64_t v7;

  v4 = *v2;
  result = a1();
  if (!result)
    goto LABEL_8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v6 = result;
  swift_retain();
  if (v6)
  {
    v7 = sub_1A5C41C00();
    *(_QWORD *)(v7 + 16) = v6;
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v7 + 32), (const void *)(v4 + 32), v6);
  *(_QWORD *)(v7 + 16) = v6;
  result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t P256.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, sub_1A5BEBC10, a4);
}

uint64_t sub_1A5BEBB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v14 = a4();
  v15 = a6(a1, a5, a2, v14, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v7)
    *a7 = v15;
  return result;
}

uint64_t P256.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BEC630, a4);
}

unint64_t sub_1A5BEBBCC()
{
  unint64_t result;

  result = qword_1ECF97770;
  if (!qword_1ECF97770)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for P256, &type metadata for P256);
    atomic_store(result, (unint64_t *)&qword_1ECF97770);
  }
  return result;
}

uint64_t sub_1A5BEBC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A5BEBC2C(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5BEBE40);
}

uint64_t sub_1A5BEBC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;

  v12 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v11, a2, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  v10 = getccec_pub_ctx_size();
  v7 = sub_1A5BEBD48(v10, a6);
  if (v12)
  {
    swift_bridgeObjectRelease();
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = 1;
    *(_BYTE *)(v8 + 4) = 1;
    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1A5BEBD48(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  if (result)
  {
    v5 = sub_1A5C41C00();
    *(_QWORD *)(v5 + 16) = v4;
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v6 = v5 + 32;
  v7[1] = v4;
  v8 = 0;
  v7[0] = v5 + 32;
  result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(_QWORD *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(_QWORD *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

_QWORD *sub_1A5BEBE40(_QWORD *a1)
{
  return sub_1A5BEBE5C(a1);
}

_QWORD *sub_1A5BEBE5C(_QWORD *a1)
{
  return sub_1A5BEBE90(a1);
}

_QWORD *sub_1A5BEBE90(_QWORD *result)
{
  if (*result)
    return (_QWORD *)sub_1A5C418D0();
  __break(1u);
  return result;
}

void P256.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  sub_1A5BEBF08();
}

void sub_1A5BEBF08()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = ccec_export_pub_size();
  v1 = sub_1A5C41C00();
  *(_QWORD *)(v1 + 16) = v0;
  ccec_export_pub();
  *(_QWORD *)(v1 + 16) = v0;
  sub_1A5BEBFDC(v1);
  v3 = v2;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_1A5BEBF80()
{
  unint64_t v0;
  uint64_t v1;

  if (BYTE6(v0))
  {
    sub_1A5C41978();
    sub_1A5BEFF90(v1, v0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A5BEBFDC(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v10 = sub_1A5BEC08C((unint64_t *)&qword_1ECF979B0, &qword_1ECF979A8, MEMORY[0x1E0CB1B08]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  sub_1A5C41BF4();
  sub_1A5BF0850(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t sub_1A5BEC08C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A85B3FE0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A5BEC0CC()
{
  return sub_1A5BEC0EC();
}

uint64_t sub_1A5BEC0EC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

size_t sub_1A5BEC1E8@<X0>(size_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int64_t v4;
  size_t v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a2 - result;
  if (result)
    v5 = a2 - result;
  else
    v5 = 0;
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (HIDWORD(v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = (const void *)result;
  if ((_DWORD)v5)
  {
    v7 = (v5 - 1) | ((v5 - 1) >> 1) | ((((_DWORD)v5 - 1) | ((v5 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = v10;
  _swift_stdlib_malloc_size(v11);
  if (v6)
    memmove(v11 + 4, v6, v4);
  else
    v4 = 0;
  swift_beginAccess();
  v11[2] = v4;
  result = _swift_stdlib_malloc_size(v11);
  if ((uint64_t)(result - 32) >= v4)
  {
    *a3 = v11;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

void *sub_1A5BEC300(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  size_t DigestSizeForDigestInfo;
  void *result;
  void *v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v3;
  if (isUniquelyReferenced_nonNull_native)
    return (void *)ccdigest_update();
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  DigestSizeForDigestInfo = getDigestSizeForDigestInfo();
  result = (void *)swift_slowAlloc();
  if ((DigestSizeForDigestInfo & 0x8000000000000000) == 0)
  {
    v10 = result;
    memmove(result, *(const void **)(v6 + 24), DigestSizeForDigestInfo);
    swift_release();
    *(_QWORD *)(v7 + 24) = v10;
    *v3 = v7;
    return (void *)ccdigest_update();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BEC3C8()
{
  uint64_t v0;

  swift_beginAccess();
  memset_s((void *)(v0 + 32), *(_QWORD *)(v0 + 24), 0, *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_1A5BEC418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA256Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = v3[1];
  v10[0] = *v3;
  v10[1] = v5;
  v12 = a3;
  v13 = a1;
  v14 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979D8);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECF979E0);
  return sub_1A5C34C7C((uint64_t)v10, (uint64_t)sub_1A5BEB234, (uint64_t)v11, v6, v7, a3, MEMORY[0x1E0DEDB38], (uint64_t)&v9);
}

uint64_t sub_1A5BEC4F4()
{
  uint64_t v0;

  MEMORY[0x1A85B4070](*(_QWORD *)(v0 + 24), -1, -1);
  return swift_deallocClassInstance();
}

uint64_t sub_1A5BEC520@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5BEC540(a1);
}

uint64_t sub_1A5BEC540@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (_QWORD *)sub_1A5C41C00();
  v3[2] = 16;
  v3[5] = 0;
  v3[4] = 0;
  ccdigest_final(*(_QWORD *)(v1 + 16));
  if (v3[2] != 16)
  {
    swift_bridgeObjectRelease();
    __break(1u);
  }
  v4 = v3[4];
  v5 = v3[5];
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t sub_1A5BEC5F0(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEC60C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BEC8C0);
}

uint64_t sub_1A5BEC60C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

unint64_t sub_1A5BEC630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A5BEC64C(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5BECD38);
}

unint64_t sub_1A5BEC64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t *))
{
  _QWORD v13[7];
  unint64_t v14;
  _QWORD v15[4];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v15, a2, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a1;
  v14 = getccec_full_ctx_size();
  return sub_1A5BEC704(v14, a6, (uint64_t)v13);
}

unint64_t sub_1A5BEC704(unint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  v13 = v11;
  v12 = (const void *)swift_retain();
  sub_1A5BEC7EC(v12, v4, a2, a3, &v13);
  swift_release();
  if (v3)
    swift_release();
  return v11;
}

uint64_t sub_1A5BEC7EC(const void *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = (uint64_t)a1 + 32;
  v12 = (uint64_t)a1 + result;
  v13 = result - 32;
  result = sub_1A5BED098(0, a2, result - 32, v11, v12);
  if ((v14 & 1) != 0)
    v15 = v13;
  else
    v15 = result;
  if (v15 < 0)
    goto LABEL_10;
  v18[0] = v11;
  v18[1] = v11 + v15;
  v19 = 0;
  result = a3(v18, &v19);
  if (!v5)
  {
    v16 = *a5;
    v17 = v19;
    result = swift_beginAccess();
    *(_QWORD *)(v16 + 16) = v17;
  }
  return result;
}

uint64_t sub_1A5BEC8C0(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD v17[4];
  int v18;

  v6 = *a3;
  if (!*a3)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = result;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 24))(v17, a4, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  result = swift_dynamicCast();
  if (!v10)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v11 = ccec_raw_import_priv_only();
  v18 = v11;
  if (v11)
  {
    v12 = v11;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v14 = ccec_der_export_priv_size();
    if (v14)
    {
      v15 = (_QWORD *)sub_1A5BECAD4(v14);
    }
    else
    {
      if (qword_1ECF977F0 != -1)
        swift_once();
      v15 = off_1ECF977E8;
      swift_retain();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v16 = sub_1A5C0FFD4((uint64_t)v15);
      swift_release();
      v15 = (_QWORD *)v16;
    }
    swift_beginAccess();
    sub_1A5BECBFC((uint64_t)(v15 + 4), (uint64_t)v15 + v15[2] + 32, &v18, v6, a4, a5, a6);
    return swift_release();
  }
}

uint64_t sub_1A5BECA88@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  if (result)
  {
    v4 = result;
    result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    a2[3] = result;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5BECAC8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BECA88(MEMORY[0x1E0C81C60], a1);
}

uint64_t sub_1A5BECAD4(int64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((_DWORD)a1)
  {
    v2 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
    v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
    v4 = v3 | HIWORD(v3);
    if (v4 == -1)
      v5 = 0xFFFFFFFFLL;
    else
      v5 = (v4 + 1);
  }
  else
  {
    v5 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = v5;
  v7 = _swift_stdlib_malloc_size(v6);
  if (!a1)
    goto LABEL_12;
  if ((uint64_t)(v7 - 32) < a1)
  {
LABEL_15:
    __break(1u);
    __break(1u);
  }
  result = ccrng();
  if (result)
  {
    ccrng_generate_bridge();
LABEL_12:
    swift_beginAccess();
    v6[2] = a1;
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BECBFC(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD v14[4];

  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = ccec_der_export_priv();
  *a3 = v10;
  if (v10)
  {
    v11 = v10;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v12 = v11;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a7 + 24))(v14, a5, a7);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    result = ccec_der_import_priv();
    *a3 = result;
    if (!(_DWORD)result)
      return result;
    v13 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v12 = v13;
  }
  *(_BYTE *)(v12 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_1A5BECD38(uint64_t a1, _QWORD *a2)
{
  return sub_1A5BECD54(a1, a2);
}

uint64_t sub_1A5BECD54(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 56);
  result = sub_1A5C418D0();
  if (!v3)
    *a2 = v5;
  return result;
}

uint64_t SymmetricKey.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_1A5BECE14();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t sub_1A5BECE14()
{
  type metadata accessor for SecureBytes.Backing();
  return sub_1A5BECE58();
}

uint64_t sub_1A5BECE58()
{
  uint64_t v1;

  type metadata accessor for SecureBytes.Backing();
  sub_1A5C418D0();
  return v1;
}

uint64_t type metadata accessor for SecureBytes.Backing()
{
  uint64_t result;

  result = qword_1ECF979C8;
  if (!qword_1ECF979C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A5BECEF8(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = result;
  v9 = a2 - result;
  if (result)
    v10 = a2 - result;
  else
    v10 = 0;
  v11 = *a3;
  if (*a3)
    v11 = a3[1] - v11;
  if (v11 < v10)
  {
    __break(1u);
  }
  else if (qword_1EE800188 == -1)
  {
    if (result)
      goto LABEL_9;
LABEL_16:
    __break(1u);
    return result;
  }
  result = swift_once();
  if (!v8)
    goto LABEL_16;
LABEL_9:
  v12 = a4(qword_1EE805A88, *(_QWORD *)(a5 + 16), v9, v8, *a3);
  if (v12)
  {
    v13 = v12;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v14 = v13;
    *(_BYTE *)(v14 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    result = sub_1A5BED00C(v9, *a3, a3[1]);
    v16 = v15 + result;
    v18 = v15 + v17;
    if (!v15)
    {
      v18 = 0;
      v16 = 0;
    }
    *a3 = v16;
    a3[1] = v18;
  }
  return result;
}

uint64_t sub_1A5BED00C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v5 = a3 - a2;
  if (a2)
    v6 = a3 - a2;
  else
    v6 = 0;
  result = sub_1A5BED098(0, result, v6, a2, a3);
  if ((v7 & 1) != 0)
  {
    result = v5;
    if (!a2)
      return 0;
  }
  else if (!a2)
  {
    v5 = 0;
  }
  if (v5 < result)
    goto LABEL_13;
  return result;
}

uint64_t sub_1A5BED098(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = a5 - a4;
  if (!a4)
    v5 = 0;
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3)
    goto LABEL_19;
  v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_14:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result)
    goto LABEL_21;
  return result;
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  v10 = *v4;
  v11 = sub_1A5BED2FC();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA256, a3, v11, a4);
  v16 = 0;
  v14[0] = v17;
  v14[1] = v18;
  sub_1A5C3E93C((uint64_t)v14, (uint64_t)&v15, v8, v9, v10 + 32, (uint64_t)&v16);
  return (v13 == 0) & v16;
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = *v3;
  v8 = sub_1A5BED2FC();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA256, a2, v8, a3);
  swift_beginAccess();
  v9 = v7 + 32 + *(_QWORD *)(v7 + 16);
  v11 = v14;
  v12 = v15;
  v13 = v16;
  return sub_1A5BED340((uint64_t)&v11, (uint64_t)&v14, v7 + 32, v9);
}

unint64_t sub_1A5BED2FC()
{
  unint64_t result;

  result = qword_1ECF97A20[0];
  if (!qword_1ECF97A20[0])
  {
    result = MEMORY[0x1A85B3FE0]("5U3?", &type metadata for SHA256);
    atomic_store(result, qword_1ECF97A20);
  }
  return result;
}

uint64_t sub_1A5BED340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5BED368(a1, a2, a3, a4, MEMORY[0x1E0C81C60], sub_1A5BED4F0);
}

uint64_t sub_1A5BED368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!a3)
    goto LABEL_10;
  v8 = a5();
  if (!v8)
    goto LABEL_11;
  v9 = v8;
  v10 = (void *)objc_opt_self();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v15 = v9;
  swift_dynamicCast();
  v11 = (int64_t)objc_msgSend(v10, sel_groupOrderByteCountForCP_, v18);
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v11 + 0x4000000000000000 < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  *(_QWORD *)&v15 = sub_1A5BED678(2 * v11);
  *((_QWORD *)&v15 + 1) = v12;
  sub_1A5BED714((uint64_t)&v15);
  v17 = v15;
  sub_1A5BED8EC((uint64_t)&v17);
  v13 = v17;
  if (!v6)
  {
    sub_1A5BEE468(v17, *((unint64_t *)&v17 + 1));
    a6(v13, *((_QWORD *)&v13 + 1));
  }
  return sub_1A5BEFF90(v13, *((unint64_t *)&v13 + 1));
}

void sub_1A5BED4F0(uint64_t a1, uint64_t a2)
{
  sub_1A5BED50C(a1, a2);
}

void sub_1A5BED50C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5BED558(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v6 = a3();
  if (!v6)
    goto LABEL_8;
  v7 = v6;
  v8 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v8, sel_groupOrderByteCountForCP_, v11, v7);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result + 0x4000000000000000 < 0)
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x1A5BED66CLL);
  }
  if (BYTE6(v3) == 2 * result)
  {
    *v5 = v4;
    v5[1] = v3;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v10 = 1;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return sub_1A5BEFF90(v4, v3);
  }
  return result;
}

uint64_t sub_1A5BED678(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_1A5C418C4();
      swift_allocObject();
      sub_1A5C418A0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1A5C4193C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void sub_1A5BED714(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_1A5BED770(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

void sub_1A5BED8EC(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A5BED954@<X0>(uint64_t a1@<X4>, uint64_t (*a2)(void)@<X5>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;

  v9 = v3;
  LOWORD(v10) = a3;
  BYTE2(v10) = BYTE2(a3);
  HIBYTE(v10) = BYTE3(a3);
  v11 = BYTE4(a3);
  v12 = BYTE5(a3);
  v13 = BYTE6(a3);
  result = sub_1A5BEDC78((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a3), v6, v5, a1, a2);
  v8 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *v4 = v9;
  v4[1] = v8;
  return result;
}

char *sub_1A5BEDB28(int *a1, int a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  size_t v11;

  result = (char *)sub_1A5C41918();
  v5 = *a1;
  v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = (char *)sub_1A5C41894();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v7 = result;
  result = (char *)sub_1A5C418B8();
  v8 = v5 - (_QWORD)result;
  if (__OFSUB__(v5, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v6 - v5;
  v10 = sub_1A5C418AC();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  return (char *)memset(&v7[v8], a2, v11);
}

uint64_t sub_1A5BEDBA8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1A5C41918();
  v12 = *a1;
  v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = a2;
  result = sub_1A5C41894();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v13 = result;
  result = sub_1A5C418B8();
  v14 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v11 - v12;
  v16 = sub_1A5C418AC();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  return sub_1A5BEDC78(v13 + v14, v13 + v14 + v17, v18, a3, a4, a5);
}

uint64_t sub_1A5BEDC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (a1)
    v8 = a2 - a1;
  else
    v8 = 0;
  if (!a6())
    goto LABEL_36;
  v9 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  v10 = (int64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v10 + 0x4000000000000000 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v8 < 2 * v10)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_dynamicCast();
  v11 = (uint64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v11 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v11)
  {
    v12 = v8 >= v11 ? v11 : v8;
    if ((v8 & 0x8000000000000000) == 0 && v12 < 0)
      goto LABEL_35;
  }
  swift_dynamicCast();
  v13 = (uint64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v13 < 0)
    goto LABEL_33;
  if (-v13 < -v8 && -v8 < 1)
    v15 = 0;
  else
    v15 = v8 - v13;
  if (v8 < v15)
    goto LABEL_34;
  if (!a4)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!a1)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  if (!ccrng())
    goto LABEL_39;
  result = ccec_sign_composite();
  if ((_DWORD)result)
  {
    v17 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v18 = v17;
    *(_BYTE *)(v18 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_1A5BEDEC4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_retain();
  sub_1A5BEE468(a2, a3);
  sub_1A5BEF928(12, a2, a3);
  __asm { BR              X10 }
}

uint64_t sub_1A5BEDF4C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD v25[7];

  if (BYTE6(a2) != 12)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v20 = 1;
    *(_BYTE *)(v20 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v8, a2);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A5BEE42CLL);
  }
  sub_1A5BF05B8(v8, a2);
  v23 = v3;
  *(_QWORD *)&v25[0] = v9;
  *((_QWORD *)&v25[0] + 1) = v10;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  result = sub_1A5BEE7D0(&v23, (uint64_t *)v25);
  if (!v2)
  {
    v12 = result;
    if (v6 >> 60 != 15)
    {
      sub_1A5BEE468(v7, v6);
      if (!swift_isUniquelyReferenced_nonNull_native())
      {
        v13 = swift_allocObject();
        swift_retain();
        v14 = (void *)swift_slowAlloc();
        *(_QWORD *)(v13 + 16) = v14;
        memmove(v14, *(const void **)(v12 + 16), 0x100uLL);
        swift_release_n();
        v12 = v13;
      }
      sub_1A5C16268(v7, v6);
      sub_1A5BF4040(v7, v6);
    }
    v25[0] = xmmword_1A5C42A80;
    sub_1A5BEE468(v5, v4);
    sub_1A5BEFD14(12, v5, v4);
    sub_1A5BEFA74(16, v21, v22);
    v15 = v23;
    v16 = v24;
    if (!swift_isUniquelyReferenced_nonNull_native())
    {
      v17 = swift_allocObject();
      swift_retain();
      v18 = (void *)swift_slowAlloc();
      *(_QWORD *)(v17 + 16) = v18;
      memmove(v18, *(const void **)(v12 + 16), 0x100uLL);
      swift_release_n();
    }
    sub_1A5BF047C(v15, v16, (uint64_t)v25);
    sub_1A5BEFF90(v15, v16);
    sub_1A5BEE468(v5, v4);
    swift_retain();
    sub_1A5BEFBC4(16, v5, v4);
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1A5BEE468(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1A5BEE4AC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v28 = a8;
  v29 = a2;
  v30 = a5;
  v31 = a7;
  v33 = a4;
  v39 = *MEMORY[0x1E0C80C00];
  v34 = sub_1A5C41CF0();
  v32 = *(_QWORD *)(v34 - 8);
  v12 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v14 = (char *)&v27 - v13;
  v35 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v12);
  v27 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = *a3;
  v19 = *a3;
  v20 = a3[1];
  v18 = v20;
  if (v20 >> 60 == 15)
  {
    *(_QWORD *)((char *)&v38 + 6) = 0;
    *(_QWORD *)&v38 = 0;
    BYTE14(v38) = 12;
    LODWORD(v37) = 0;
    result = ccrng();
    if (!result)
    {
      __break(1u);
      return result;
    }
    if ((_DWORD)v37)
      __break(1u);
    ccrng_generate_bridge();
    v19 = v38;
    v20 = DWORD2(v38) | ((unint64_t)BYTE12(v38) << 32) | ((unint64_t)BYTE13(v38) << 40) | ((unint64_t)BYTE14(v38) << 48);
  }
  v36 = v16;
  *(_QWORD *)&v38 = v19;
  *((_QWORD *)&v38 + 1) = v20;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  sub_1A5BEF914(v17, v18);
  swift_retain();
  sub_1A5BEE468(v19, v20);
  v22 = sub_1A5BEE7D0(&v36, (uint64_t *)&v38);
  if (v8)
    return sub_1A5BEFF90(v19, v20);
  v37 = v22;
  v23 = v32;
  v24 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v14, v33, v34);
  v25 = v35;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v14, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);
  }
  else
  {
    v26 = (uint64_t)v27;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v14, a6);
    sub_1A5C16EC0(v26, a6, v28);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, a6);
  }
  *(_QWORD *)&v38 = v19;
  *((_QWORD *)&v38 + 1) = v20;
  sub_1A5BEE468(v19, v20);
  sub_1A5BEECDC(v29, (uint64_t)&v38);
  swift_retain();
  sub_1A5BEEBC0();
  swift_release();
  sub_1A5BEFF90(v19, v20);
  swift_release();
  return v38;
}

uint64_t sub_1A5BEE7D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *a2;
  v5 = a2[1];
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 16);
  if (v6 >> 60)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  if (v6 != 32)
  {
    swift_release();
    sub_1A5BEFF90(v4, v5);
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v11 = 0;
    *(_BYTE *)(v11 + 4) = 1;
    swift_willThrow();
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    swift_deallocPartialClassInstance();
    return v2;
  }
  v7 = (_OWORD *)swift_slowAlloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[14] = 0u;
  *(_OWORD *)((char *)v7 + 233) = 0u;
  if (qword_1EE800188 != -1)
    goto LABEL_10;
LABEL_4:
  v8 = ccchacha20poly1305_init();
  if (!v8)
  {
    swift_release();
    __asm { BR              X10 }
  }
  v9 = v8;
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v10 = v9;
  *(_BYTE *)(v10 + 4) = 0;
  swift_willThrow();
  sub_1A5BEFF90(v4, v5);
  swift_release();
  swift_release();
  return v2;
}

uint64_t type metadata accessor for CoreCryptoChaChaPolyImpl.Context()
{
  return objc_opt_self();
}

uint64_t sub_1A5BEEBC0()
{
  int v0;
  int v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[1] = 0;
  if (qword_1EE800188 != -1)
    swift_once();
  v0 = ccchacha20poly1305_finalize();
  if (v0)
  {
    v1 = v0;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v2 = v1;
    *(_BYTE *)(v2 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v5[3] = MEMORY[0x1E0DEAC20];
    v5[4] = MEMORY[0x1E0CB1AA8];
    v5[0] = v4;
    v5[1] = v5;
    __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
    sub_1A5C4196C();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

void sub_1A5BEECDC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *v2;
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    v6 = swift_allocObject();
    swift_retain();
    v7 = (void *)swift_slowAlloc();
    *(_QWORD *)(v6 + 16) = v7;
    memmove(v7, *(const void **)(v5 + 16), 0x100uLL);
    swift_release();
    *v2 = v6;
    swift_release();
  }
  sub_1A5BEEDA4(a1, a2);
}

void sub_1A5BEEDA4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_1A5BEEE00()
{
  uint64_t v0;

  if (sub_1A5C41C54() < 0)
  {
    __break(1u);
    JUMPOUT(0x1A5BEEEACLL);
  }
  v0 = sub_1A5BEEEB4();
  MEMORY[0x1E0C80A78](v0);
  sub_1A5BF08C4();
}

uint64_t sub_1A5BEEEB4()
{
  _QWORD *v1;
  __int128 v3[2];
  uint64_t v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97740);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97788);
  if (!swift_dynamicCast())
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    sub_1A5BEF518((uint64_t)v3);
    __asm { BR              X12 }
  }
  sub_1A5BF9FC8(v3, (uint64_t)v5);
  v1 = __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  MEMORY[0x1E0C80A78](v1);
  sub_1A5C418D0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

void sub_1A5BEF230()
{
  __asm { BR              X11 }
}

_QWORD *sub_1A5BEF290@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2)
    result = v12;
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_1A5BEF518(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97738);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1A5BEF558(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_1A5C41894();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_1A5C418B8();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_1A5C418AC();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1A5BEF608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1A5BEF648(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_BYTE *)(*(_QWORD *)(v3 + 32) + 8));
  if (!v4)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v9;
  }
  return result;
}

uint64_t sub_1A5BEF648(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  if (!result)
    return a4;
  if (!__OFSUB__(a2 - result, a3))
  {
    sub_1A5BEF6BC((uint64_t)&v5, (_BYTE *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BEF6BC(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t *v13;
  _BYTE *v14;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = a4;
  if (!a4)
  {
LABEL_23:
    *(_QWORD *)result = a4;
    *(_BYTE *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v5;
    return v5;
  }
  v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6)
        v6 = a3 - 2;
      if (v6 >= a3 - 1)
        v6 = a3 - 1;
      v7 = v6 + 1;
      if (v7 > 0x10)
      {
        v10 = v7 & 0xF;
        if ((v7 & 0xF) == 0)
          v10 = 16;
        v11 = v7 - v10;
        v8 = v7 - v10 + 1;
        v9 = &a2[v11];
        v12 = vdupq_n_s8(a5);
        v13 = (int8x16_t *)(a2 + 1);
        do
        {
          *v13++ = v12;
          v11 -= 16;
        }
        while (v11);
      }
      else
      {
        v8 = 1;
        v9 = a2;
      }
      v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8)
          goto LABEL_22;
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A5BEF794(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A5BEF7B4(a1, a2, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3]);
}

uint64_t sub_1A5BEF7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v23 = a5;
  v24 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)&v23 - v15;
  v17 = sub_1A5BED00C(a3, a1, a2);
  v19 = v18 + v17;
  v21 = v18 + v20;
  if (!v18)
  {
    v21 = 0;
    v19 = 0;
  }
  v30[0] = v19;
  v30[1] = v21;
  sub_1A5C41828();
  v25 = a7;
  v26 = a8;
  v27 = v30;
  v28 = v23;
  v29 = v24;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t sub_1A5BEF914(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1A5BEE468(a1, a2);
  return a1;
}

void sub_1A5BEF928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1A5BEFA70);
}

uint64_t sub_1A5BEFA74(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  return result;
}

void sub_1A5BEFBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1A5BEFD10);
}

void sub_1A5BEFD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1A5BEFE70);
}

uint64_t sub_1A5BEFE74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1A5BEFE84 + *((int *)qword_1A5C1B8D8 + (a4 >> 62))))();
}

uint64_t sub_1A5BEFE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1A5BEFF24);
  }
  return ((uint64_t (*)(void))((char *)&loc_1A5BEFED4 + *((int *)qword_1A5C1B8E8 + a3)))();
}

uint64_t sub_1A5BEFF2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1A5BEFF8CLL);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1A5BEFF44 + *((int *)qword_1A5C1B8C8 + (a4 >> 62))))(v5);
}

uint64_t sub_1A5BEFF90(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void sub_1A5BEFFD4()
{
  __asm { BR              X10 }
}

uint64_t sub_1A5BF0008()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = sub_1A5C41978();
  if (BYTE6(v1) < (uint64_t)((v1 >> 49) & 0x7F))
  {
    __break(1u);
    JUMPOUT(0x1A5BF00DCLL);
  }
  sub_1A5C41978();
  sub_1A5BEFF90(v0, v1);
  return v2;
}

uint64_t sub_1A5BF0154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BF0174(a1, a2, *(_QWORD *)(v2 + 16), **(_QWORD **)(v2 + 24), *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8));
}

uint64_t sub_1A5BF0174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  sub_1A5BED00C(a3, a1, a2);
  sub_1A5BEE468(a4, a5);
  sub_1A5BF0220(a4, a5);
  return sub_1A5BEFF90(a4, a5);
}

void sub_1A5BF0220(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5BF0280()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v3;
  v7 = v4;
  v8 = BYTE2(v4);
  v9 = BYTE3(v4);
  v10 = BYTE4(v4);
  v11 = BYTE5(v4);
  return sub_1A5BECEF8((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v4), v2, v1, v0);
}

void sub_1A5BF047C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X12 }
}

uint64_t sub_1A5BF04CC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1A5BF0504 + dword_1A5C1653C[a2 >> 62]))();
}

void sub_1A5BF0514()
{
  uint64_t v0;

  v0 = sub_1A5BEEEB4();
  MEMORY[0x1E0C80A78](v0);
  sub_1A5BF08C4();
}

void sub_1A5BF05B8(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1A5BF061C
     + dword_1A5BF95BC[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1A5BF062C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1A5BEE468(v1, v0);
  sub_1A5BF0850(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1A5BEFF90(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

_BYTE *sub_1A5BF0850@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1A5BF0B68(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1A5BF9C78((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1A5BF0AE8((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_1A5BF08C4()
{
  __asm { BR              X12 }
}

uint64_t sub_1A5BF0924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

uint64_t sub_1A5BF0AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1A5C418C4();
  swift_allocObject();
  result = sub_1A5C41888();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1A5BF0B68(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

void sub_1A5BF0C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = sub_1A5C41894();
  if (v12)
  {
    v13 = sub_1A5C418B8();
    if (__OFSUB__(a1, v13))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v12 += a1 - v13;
  }
  v14 = __OFSUB__(a2, a1);
  v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = sub_1A5C418AC();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = v12 + v17;
  if (v12)
    v19 = v18;
  else
    v19 = 0;
  sub_1A5BF0D10(v12, v19, a4, a5, a6, a7);
}

void sub_1A5BF0D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5BF0D7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v4;
  v8 = v1;
  v9 = BYTE2(v1);
  v10 = BYTE3(v1);
  v11 = BYTE4(v1);
  v12 = BYTE5(v1);
  result = sub_1A5BF0FD8((uint64_t)&v7, v0, v3, &v6);
  *v2 = v6;
  return result;
}

uint64_t sub_1A5BF0FD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!a3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result)
  {
    result = ccec_verify_composite();
    *a4 = (int)result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A5BF1038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_1A5C41894();
  if (v2)
  {
    v3 = v2;
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
      goto LABEL_10;
    v5 = v3 + a1 - result;
  }
  else
  {
    v5 = 0;
  }
  result = sub_1A5C418AC();
  if (qword_1EE800188 == -1)
  {
    if (v5)
      return ccchacha20poly1305_verify() == 0;
  }
  else
  {
    result = swift_once();
    if (v5)
      return ccchacha20poly1305_verify() == 0;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1A5BF10EC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = a1();
  if (result)
  {
    v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    v8 = swift_slowAlloc();
    result = ccdigest_init();
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v8;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static HashFunction.hash<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
  HashFunction.update<A>(data:)(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_1A5BF123C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = a1();
  if (result)
  {
    v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    v8 = swift_slowAlloc();
    result = ccdigest_init();
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v8;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5BF12B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF123C(MEMORY[0x1E0C823E0], &qword_1ECF97A18, a1);
}

uint64_t sub_1A5BF12C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5BF1308(a1);
}

uint64_t SHA256.finalize()@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5BF1308(a1);
}

uint64_t sub_1A5BF1308@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;

  v3 = sub_1A5C41C00();
  *(_QWORD *)(v3 + 16) = 32;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(_QWORD *)(v1 + 16));
  if (*(_QWORD *)(v3 + 16) == 32)
  {
    v7 = *(_OWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 56);
    result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

size_t sub_1A5BF13A0@<X0>(size_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  size_t result;
  _OWORD v5[2];
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  result = sub_1A5BF1478((size_t)v5, (unint64_t)v6);
  *a1 = result;
  a1[1] = 0;
  return result;
}

size_t sub_1A5BF140C@<X0>(size_t *a1@<X8>)
{
  __int128 *v1;
  size_t result;
  __int128 v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = *v1;
  result = sub_1A5BF1478((size_t)&v4, (unint64_t)v5);
  *a1 = result;
  a1[1] = 0;
  return result;
}

size_t sub_1A5BF1478(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;

  if (!result)
    return MEMORY[0x1E0DEE9D8];
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return MEMORY[0x1E0DEE9D8];
  if (v4 < 1)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
    v5 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

void *sub_1A5BF1528(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1ECF97A18);
}

void *sub_1A5BF1544(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  size_t DigestSizeForDigestInfo;
  void *result;
  void *v9;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    return (void *)ccdigest_update();
  v5 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  swift_retain();
  DigestSizeForDigestInfo = getDigestSizeForDigestInfo();
  result = (void *)swift_slowAlloc();
  if ((DigestSizeForDigestInfo & 0x8000000000000000) == 0)
  {
    v9 = result;
    memmove(result, *(const void **)(v5 + 24), DigestSizeForDigestInfo);
    swift_release();
    *(_QWORD *)(v6 + 24) = v9;
    *v3 = v6;
    swift_release();
    return (void *)ccdigest_update();
  }
  __break(1u);
  return result;
}

uint64_t HashFunction.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = &v15[-v12];
  sub_1A5C41828();
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = v5;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A85B3FC8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t ccdigest_final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 56))();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t ccec_export_pub_size()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A85B3FD4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for ccec_cp(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1ECF979B8);
}

void sub_1A5BF1844(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_1A5BF1888()
{
  unint64_t result;

  result = qword_1ECF97558[0];
  if (!qword_1ECF97558[0])
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5, &type metadata for Insecure.MD5);
    atomic_store(result, qword_1ECF97558);
  }
  return result;
}

unint64_t sub_1A5BF18CC(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5BF1888();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for Insecure.SHA1Digest()
{
  return &type metadata for Insecure.SHA1Digest;
}

uint64_t sub_1A5BF1900@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF123C(MEMORY[0x1E0C823F8], &qword_1EE800340, a1);
}

uint64_t sub_1A5BF1914@<X0>(_OWORD *a1@<X8>)
{
  return sub_1A5BF1AD0(a1);
}

void *sub_1A5BF1934(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1EE800340);
}

unint64_t sub_1A5BF1950(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5BED2FC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

size_t sub_1A5BF1974@<X0>(size_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  size_t result;
  _OWORD v6[4];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  v4 = v1[3];
  v6[2] = v1[2];
  v6[3] = v4;
  result = sub_1A5BF1478((size_t)v6, (unint64_t)v7);
  *a1 = result;
  a1[1] = 0;
  return result;
}

__int128 *sub_1A5BF19E8@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (result)
    v3 = a2 - (_QWORD)result == 64;
  else
    v3 = 0;
  v4 = !v3;
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  if (v3)
  {
    v5 = *result;
    v6 = result[1];
    v7 = result[2];
    v8 = result[3];
  }
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(_BYTE *)(a3 + 64) = v4;
  return result;
}

uint64_t sub_1A5BF1A68()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for SecureBytes.BackingHeader()
{
  return &type metadata for SecureBytes.BackingHeader;
}

uint64_t sub_1A5BF1AB4()
{
  uint64_t result;

  result = ccchacha20poly1305_info();
  qword_1EE805A88 = result;
  return result;
}

uint64_t sub_1A5BF1AD0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[4];
  char v9;

  v3 = sub_1A5C41C00();
  *(_QWORD *)(v3 + 16) = 64;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(_QWORD *)(v1 + 16));
  sub_1A5BF19E8((__int128 *)(v3 + 32), v3 + 32 + *(_QWORD *)(v3 + 16), (uint64_t)v8);
  result = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = v8[1];
    v6 = v8[2];
    v7 = v8[3];
    *a1 = v8[0];
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

uint64_t HPKE.KDF.value.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

BOOL static HPKE.KDF.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.KDF.hash(into:)()
{
  return sub_1A5C41F18();
}

void *static HPKE.KDF.allCases.getter()
{
  return &unk_1E4F75CE8;
}

uint64_t HPKE.KDF.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

BOOL sub_1A5BF1C08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1A5BF1C1C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4F75D10;
}

uint64_t sub_1A5BF1C2C()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5BF1C70()
{
  return sub_1A5C41F18();
}

uint64_t sub_1A5BF1C98()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

unint64_t sub_1A5BF1CDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE801018;
  if (!qword_1EE801018)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE801020);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE801018);
  }
  return result;
}

unint64_t sub_1A5BF1D2C()
{
  unint64_t result;

  result = qword_1EE801028;
  if (!qword_1EE801028)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HPKE.KDF, &type metadata for HPKE.KDF);
    atomic_store(result, (unint64_t *)&qword_1EE801028);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s3KDFOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s3KDFOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A5BF1E58 + 4 * byte_1A5C42815[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A5BF1E8C + 4 * byte_1A5C42810[v4]))();
}

uint64_t sub_1A5BF1E8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5BF1E94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5BF1E9CLL);
  return result;
}

uint64_t sub_1A5BF1EA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5BF1EB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A5BF1EB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5BF1EBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5BF1EC8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1A5BF1ED4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.KDF()
{
  return &type metadata for HPKE.KDF;
}

void type metadata accessor for ccdigest_ctx(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801030);
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A5BF1F24(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1A5BF1F80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

void type metadata accessor for ccdigest_info(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801038);
}

__n128 __swift_memcpy256_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t sub_1A5BF203C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A5BF205C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 256) = v3;
  return result;
}

void type metadata accessor for ccchacha20poly1305_ctx(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801040);
}

uint64_t _s11KeyScheduleVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_1A5BF2128(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1A5BF2184(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

void type metadata accessor for ccmode_gcm(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801048);
}

void type metadata accessor for ccgcm_ctx(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801050);
}

uint64_t getEnumTagSinglePayload for SHA256Digest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SHA256Digest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1ECF97780);
}

void type metadata accessor for cc_impl(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801058);
}

void type metadata accessor for ccdigest_state(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801060);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1A5BF22B8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A5BF22D8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for ccpoly1305_ctx(uint64_t a1)
{
  sub_1A5BF1844(a1, &qword_1EE801068);
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1A5BF2364(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A5BF2384(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 136) = v3;
  return result;
}

void type metadata accessor for ccchacha20_ctx(uint64_t a1)
{
  sub_1A5BF1844(a1, qword_1EE801070);
}

uint64_t sub_1A5BF23E4(uint64_t a1)
{
  MEMORY[0x1A85B3FE0](&unk_1A5C429E0, a1);
  return sub_1A5C41A20();
}

uint64_t sub_1A5BF2420()
{
  MEMORY[0x1A85B3FE0](&unk_1A5C429E0);
  return sub_1A5C41A14();
}

uint64_t sub_1A5BF2468(uint64_t a1, uint64_t a2)
{
  sub_1A5C41F00();
  MEMORY[0x1A85B3FE0](&unk_1A5C429E0, a2);
  sub_1A5C41A14();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5BF24C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A85B3FE0](&unk_1A5C429E0, a3);
  return sub_1A5C41A08();
}

uint64_t sub_1A5BF250C()
{
  return sub_1A5BF2554((unint64_t *)&qword_1EE800350, (uint64_t)&unk_1A5C42A0C);
}

uint64_t sub_1A5BF2530()
{
  return sub_1A5BF2554(&qword_1ECF97778, (uint64_t)&unk_1A5C429B4);
}

uint64_t sub_1A5BF2554(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1A85B3FE0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedConformanceWitness;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t result;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD **v43;
  char *v44;
  _QWORD v45[3];
  _QWORD *v46;

  v41 = a5;
  v42 = a7;
  v40 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v44 = (char *)&v30 - v16;
  v36 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 < 0)
    goto LABEL_18;
  v8 = *a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v37 = *(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 40);
  v38 = AssociatedConformanceWitness;
  v20 = v37(AssociatedTypeWitness);
  if ((v20 & 0x8000000000000000) != 0)
    goto LABEL_19;
  if (!is_mul_ok(v20, 0xFFFFFFFFuLL))
    goto LABEL_20;
  v30 = a8;
  if (0xFFFFFFFF * v20 > a3)
  {
    if (qword_1ECF977F0 != -1)
      goto LABEL_21;
    while (1)
    {
      v46 = off_1ECF977E8;
      swift_retain();
      sub_1A5BFDE70(a3);
      v31 = a3;
      if (!a3)
        break;
      v21 = *(void (**)(uint64_t, uint64_t))(a6 + 32);
      v34 = v8 + 32;
      v35 = v21;
      v33 = (_QWORD *)(v8 + 16);
      swift_beginAccess();
      v8 = 0;
      v22 = 1;
      v32 = MEMORY[0x1E0DEE9C0] + 8;
      a3 = v31;
      while (1)
      {
        v35(a4, a6);
        v23 = v34 + *v33;
        v45[0] = v34;
        v45[1] = v23;
        v24 = sub_1A5BF2A88();
        HashFunction.update<A>(data:)((uint64_t)v45, a4, MEMORY[0x1E0DEAC20], a6, v24);
        sub_1A5C1BB88(bswap32(v22), a4, a6);
        HashFunction.update<A>(data:)(v40, a4, v41, a6, v42);
        (*(void (**)(uint64_t, uint64_t))(a6 + 48))(a4, a6);
        if (v22 == -1)
          break;
        v25 = ((uint64_t (*)(uint64_t, uint64_t))v37)(AssociatedTypeWitness, v38);
        v43 = &v30;
        if (v25 >= a3)
          v26 = a3;
        else
          v26 = v25;
        MEMORY[0x1E0C80A78](v25);
        sub_1A5C418D0();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v44, AssociatedTypeWitness);
        v27 = __OFSUB__(a3, v26);
        a3 -= v26;
        if (v27)
          goto LABEL_17;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v18, a4);
        ++v22;
        if (a3 <= 0)
          goto LABEL_14;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_once();
    }
LABEL_14:
    v28 = v46;
    result = swift_beginAccess();
    if (v28[2] == v31)
    {
      *v30 = v28;
      return result;
    }
    __break(1u);
  }
  result = sub_1A5C41E64();
  __break(1u);
  return result;
}

uint64_t static ANSIKDFx963.deriveKey(inputKeyMaterial:outputByteCount:)@<X0>(uint64_t *a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v13 = *a1;
  v12 = MEMORY[0x1E0DEE9D8];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v10 = sub_1A5BF2A28();
  return static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)(&v13, (uint64_t)&v12, a2, a3, v9, a4, v10, a5);
}

size_t sub_1A5BF29E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_1A5C19B5C(*(_QWORD *)(v2 + 24), a1, a2);
  return sub_1A5C0FCA8(v3, v4, v5, v6);
}

unint64_t sub_1A5BF2A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECF97998;
  if (!qword_1ECF97998)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECF979A8);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB1B00], v1);
    atomic_store(result, (unint64_t *)&qword_1ECF97998);
  }
  return result;
}

uint64_t sub_1A5BF2A74()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for ANSIKDFx963(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ANSIKDFx963);
}

unint64_t sub_1A5BF2A88()
{
  unint64_t result;

  result = qword_1ECF97808;
  if (!qword_1ECF97808)
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&qword_1ECF97808);
  }
  return result;
}

uint64_t sub_1A5BF2ACC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x685F64695F6B7370, 0xEB00000000687361);
  qword_1EE8010F8 = result;
  unk_1EE801100 = v1;
  return result;
}

uint64_t sub_1A5BF2B08()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x7361685F6F666E69, 0xE900000000000068);
  qword_1EE801108 = result;
  unk_1EE801110 = v1;
  return result;
}

uint64_t sub_1A5BF2B40()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x746572636573, 0xE600000000000000);
  qword_1EE801118 = result;
  unk_1EE801120 = v1;
  return result;
}

uint64_t sub_1A5BF2B70()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(7955819, 0xE300000000000000);
  qword_1EE801128 = result;
  unk_1EE801130 = v1;
  return result;
}

uint64_t sub_1A5BF2B9C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x6E6F6E5F65736162, 0xEA00000000006563);
  qword_1EE801138 = result;
  unk_1EE801140 = v1;
  return result;
}

uint64_t sub_1A5BF2BD4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(7370853, 0xE300000000000000);
  qword_1EE801148 = result;
  unk_1EE801150 = v1;
  return result;
}

uint64_t sub_1A5BF2C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int16 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  unsigned __int16 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _OWORD v161[3];
  uint64_t v162;

  v14 = a1;
  v162 = *MEMORY[0x1E0C80C00];
  v15 = *a5;
  v16 = *a8;
  v17 = a8[1];
  v18 = a8[2];
  *(_QWORD *)&v161[0] = *a5;
  sub_1A5BF3F04(a1, v161, a6, a7);
  if (v9)
  {
    sub_1A5BF4040(a6, a7);
    sub_1A5BEFF90(a3, a4);
    __swift_destroy_boxed_opaque_existential_1(a2);
    swift_release();
    return sub_1A5BF4040(0, 0xF000000000000000);
  }
  else
  {
    v151 = v17;
    v139 = v14;
    v147 = a4;
    v146 = a3;
    if (qword_1EE800F98 != -1)
      swift_once();
    if (a7 >> 60 == 15)
    {
      v20 = 0;
      memset((char *)v161 + 8, 0, 32);
    }
    else
    {
      *((_QWORD *)&v161[1] + 1) = &type metadata for SymmetricKey;
      *(_QWORD *)&v161[2] = sub_1A5BF4054();
      sub_1A5BEE468(a6, a7);
      sub_1A5C100D4(a6, a7);
      v20 = v21;
      sub_1A5BF4040(a6, a7);
    }
    v22 = v16;
    v141 = a6;
    v142 = a7;
    *(_QWORD *)&v161[0] = v20;
    if (qword_1EE800FD8 != -1)
    {
      swift_once();
      v22 = v16;
    }
    v136 = v15;
    v160 = xmmword_1EE801388;
    v23 = qword_1A5C42AA0[v22];
    sub_1A5BEE468(xmmword_1EE801388, *((unint64_t *)&xmmword_1EE801388 + 1));
    v150 = v23;
    sub_1A5C17A00(v23, 2);
    v25 = v24;
    v27 = v26;
    sub_1A5C419D8();
    sub_1A5BEFF90(v25, v27);
    v152 = v17 + 1;
    sub_1A5C17A00(v17 + 1, 2);
    v29 = v28;
    v31 = v30;
    sub_1A5C419D8();
    sub_1A5BEFF90(v29, v31);
    v153 = qword_1A5C42AC0[v18];
    sub_1A5C17A00(v153, 2);
    v33 = v32;
    v35 = v34;
    sub_1A5C419D8();
    sub_1A5BEFF90(v33, v35);
    v36 = v160;
    if (qword_1EE801000 != -1)
      swift_once();
    v160 = xmmword_1EE8018C0;
    sub_1A5BEE468(xmmword_1EE8018C0, *((unint64_t *)&xmmword_1EE8018C0 + 1));
    sub_1A5C419D8();
    sub_1A5C419D8();
    sub_1A5C1F7E4((uint64_t)v161);
    v37 = v160;
    sub_1A5BEE468(v160, *((unint64_t *)&v160 + 1));
    sub_1A5C100D4(v160, *((uint64_t *)&v160 + 1));
    sub_1A5BEFF90(v160, *((unint64_t *)&v160 + 1));
    sub_1A5C1F334(0, 0xC000000000000000, v17, (uint64_t *)&v159);
    swift_release();
    sub_1A5BEFF90(v37, *((unint64_t *)&v37 + 1));
    v38 = v159;
    swift_beginAccess();
    v39 = v38 + 32 + *(_QWORD *)(v38 + 16);
    swift_retain();
    v40 = sub_1A5BF8F60(v38 + 32, v39);
    v144 = v41;
    v145 = v40;
    swift_release_n();
    sub_1A5BEFF90(v36, *((unint64_t *)&v36 + 1));
    sub_1A5BEF518((uint64_t)v161);
    if (qword_1EE800FA0 != -1)
      swift_once();
    *((_QWORD *)&v161[1] + 1) = &type metadata for SymmetricKey;
    v133 = sub_1A5BF4054();
    *(_QWORD *)&v161[2] = v133;
    sub_1A5BEE468(a3, v147);
    sub_1A5C100D4(a3, v147);
    v43 = v42;
    sub_1A5BEFF90(a3, v147);
    *(_QWORD *)&v161[0] = v43;
    v159 = xmmword_1EE801388;
    sub_1A5BEE468(xmmword_1EE801388, *((unint64_t *)&xmmword_1EE801388 + 1));
    sub_1A5C17A00(v150, 2);
    v45 = v44;
    v47 = v46;
    sub_1A5C419D8();
    sub_1A5BEFF90(v45, v47);
    sub_1A5C17A00(v152, 2);
    v49 = v48;
    v51 = v50;
    sub_1A5C419D8();
    sub_1A5BEFF90(v49, v51);
    sub_1A5C17A00(v153, 2);
    v53 = v52;
    v55 = v54;
    sub_1A5C419D8();
    sub_1A5BEFF90(v53, v55);
    v56 = v159;
    v159 = xmmword_1EE8018C0;
    sub_1A5BEE468(xmmword_1EE8018C0, *((unint64_t *)&xmmword_1EE8018C0 + 1));
    sub_1A5C419D8();
    sub_1A5C419D8();
    sub_1A5C1F7E4((uint64_t)v161);
    v57 = v159;
    sub_1A5BEE468(v159, *((unint64_t *)&v159 + 1));
    sub_1A5C100D4(v57, *((uint64_t *)&v57 + 1));
    sub_1A5BEFF90(v57, *((unint64_t *)&v57 + 1));
    sub_1A5C1F334(0, 0xC000000000000000, v17, (uint64_t *)&v158);
    swift_release();
    sub_1A5BEFF90(v57, *((unint64_t *)&v57 + 1));
    v58 = v158;
    swift_beginAccess();
    v59 = v58 + 32 + *(_QWORD *)(v58 + 16);
    swift_retain();
    v60 = sub_1A5BF8F60(v58 + 32, v59);
    v62 = v61;
    swift_release_n();
    sub_1A5BEFF90(v56, *((unint64_t *)&v56 + 1));
    sub_1A5BEF518((uint64_t)v161);
    v158 = xmmword_1A5C42A80;
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801168);
    *((_QWORD *)&v161[1] + 1) = v63;
    *(_QWORD *)&v161[2] = sub_1A5BF4098();
    LOBYTE(v161[0]) = v139;
    LOBYTE(v157) = *(_BYTE *)__swift_project_boxed_opaque_existential_1(v161, v63);
    sub_1A5C41954();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    sub_1A5C419D8();
    v138 = v62;
    v140 = v60;
    sub_1A5C419D8();
    sub_1A5BF40E4(a2, (uint64_t)v161);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v161, *((uint64_t *)&v161[1] + 1));
    v64 = sub_1A5C1FF98();
    v66 = v65;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    if (qword_1EE800FA8 != -1)
      swift_once();
    v154 = v18;
    if (v136)
    {
      *((_QWORD *)&v161[1] + 1) = &type metadata for SymmetricKey;
      *(_QWORD *)&v161[2] = v133;
      *(_QWORD *)&v161[0] = sub_1A5C0FFD4(v136);
      swift_release();
    }
    else
    {
      memset(v161, 0, 40);
    }
    v143 = v16;
    v157 = xmmword_1EE801388;
    sub_1A5BEE468(xmmword_1EE801388, *((unint64_t *)&xmmword_1EE801388 + 1));
    sub_1A5C17A00(v150, 2);
    v68 = v67;
    v70 = v69;
    sub_1A5C419D8();
    sub_1A5BEFF90(v68, v70);
    sub_1A5C17A00(v152, 2);
    v72 = v71;
    v74 = v73;
    sub_1A5C419D8();
    sub_1A5BEFF90(v72, v74);
    sub_1A5C17A00(v153, 2);
    v76 = v75;
    v78 = v77;
    sub_1A5C419D8();
    sub_1A5BEFF90(v76, v78);
    v79 = v157;
    v157 = xmmword_1EE8018C0;
    sub_1A5BEE468(xmmword_1EE8018C0, *((unint64_t *)&xmmword_1EE8018C0 + 1));
    sub_1A5C419D8();
    sub_1A5C419D8();
    sub_1A5C1F7E4((uint64_t)v161);
    v80 = v157;
    sub_1A5BEE468(v64, v66);
    sub_1A5BEE468(v157, *((unint64_t *)&v157 + 1));
    sub_1A5C100D4(v157, *((uint64_t *)&v157 + 1));
    sub_1A5BEFF90(v157, *((unint64_t *)&v157 + 1));
    v81 = v151;
    sub_1A5C1F334(v64, v66, v151, &v156);
    swift_release();
    sub_1A5BEFF90(v64, v66);
    sub_1A5BEFF90(v80, *((unint64_t *)&v80 + 1));
    sub_1A5BEFF90(v79, *((unint64_t *)&v79 + 1));
    sub_1A5BEFF90(v64, v66);
    sub_1A5BEF518((uint64_t)v161);
    v148 = v156;
    if (v18 == 3)
    {
      v135 = 0;
      v137 = 0;
      v134 = 0xF000000000000000;
    }
    else
    {
      if (qword_1EE800FB0 != -1)
        swift_once();
      v82 = v158;
      v83 = xmmword_1EE801388;
      v161[0] = xmmword_1EE801388;
      sub_1A5BEE468(v158, *((unint64_t *)&v158 + 1));
      sub_1A5BEE468(v83, *((unint64_t *)&v83 + 1));
      sub_1A5C17A00(v150, 2);
      v85 = v84;
      v87 = v86;
      sub_1A5C419D8();
      sub_1A5BEFF90(v85, v87);
      sub_1A5C17A00(v152, 2);
      v89 = v88;
      v91 = v90;
      sub_1A5C419D8();
      sub_1A5BEFF90(v89, v91);
      sub_1A5C17A00(v153, 2);
      v93 = v92;
      v95 = v94;
      sub_1A5C419D8();
      sub_1A5BEFF90(v93, v95);
      v96 = v161[0];
      sub_1A5C1F8BC(v148, v82, *((uint64_t *)&v82 + 1), 0x2000200010uLL >> (16 * v18), (size_t *)v161, v151);
      sub_1A5BEFF90(v96, *((unint64_t *)&v96 + 1));
      sub_1A5BEFF90(v82, *((unint64_t *)&v82 + 1));
      v137 = *(_QWORD *)&v161[0];
      if (qword_1EE800FB8 != -1)
        swift_once();
      v97 = xmmword_1EE801388;
      v161[0] = xmmword_1EE801388;
      sub_1A5BEE468(v82, *((unint64_t *)&v82 + 1));
      sub_1A5BEE468(v97, *((unint64_t *)&v97 + 1));
      sub_1A5C17A00(v150, 2);
      v99 = v98;
      v101 = v100;
      sub_1A5C419D8();
      sub_1A5BEFF90(v99, v101);
      sub_1A5C17A00(v152, 2);
      v103 = v102;
      v105 = v104;
      sub_1A5C419D8();
      sub_1A5BEFF90(v103, v105);
      sub_1A5C17A00(v153, 2);
      v107 = v106;
      v109 = v108;
      sub_1A5C419D8();
      sub_1A5BEFF90(v107, v109);
      v110 = v161[0];
      v81 = v151;
      sub_1A5C1F8BC(v148, v82, *((uint64_t *)&v82 + 1), 0xCu, (size_t *)&v157, v151);
      v111 = v157;
      swift_beginAccess();
      v112 = v111 + 32 + *(_QWORD *)(v111 + 16);
      swift_retain();
      v113 = sub_1A5BF8F60(v111 + 32, v112);
      v134 = v114;
      v135 = v113;
      swift_release_n();
      sub_1A5BEFF90(v110, *((unint64_t *)&v110 + 1));
      sub_1A5BEFF90(v82, *((unint64_t *)&v82 + 1));
      sub_1A5BF4040(0, 0xF000000000000000);
    }
    if (qword_1EE800FC0 != -1)
      swift_once();
    v115 = v158;
    v116 = 16 * v81 + 32;
    v117 = xmmword_1EE801388;
    v157 = xmmword_1EE801388;
    sub_1A5BEE468(v158, *((unint64_t *)&v158 + 1));
    sub_1A5BEE468(v117, *((unint64_t *)&v117 + 1));
    sub_1A5C17A00(v150, 2);
    v119 = v118;
    v120 = v81;
    v122 = v121;
    sub_1A5C419D8();
    sub_1A5BEFF90(v119, v122);
    sub_1A5C17A00(v152, 2);
    v124 = v123;
    v126 = v125;
    sub_1A5C419D8();
    sub_1A5BEFF90(v124, v126);
    sub_1A5C17A00(v153, 2);
    v128 = v127;
    v130 = v129;
    sub_1A5C419D8();
    sub_1A5BEFF90(v128, v130);
    v131 = v157;
    sub_1A5C1F8BC(v148, v115, *((uint64_t *)&v115 + 1), v116, (size_t *)&v157, v120);
    sub_1A5BEFF90(v131, *((unint64_t *)&v131 + 1));
    sub_1A5BEFF90(v140, v138);
    sub_1A5BEFF90(v145, v144);
    sub_1A5BF4040(v141, v142);
    sub_1A5BEFF90(v146, v147);
    __swift_destroy_boxed_opaque_existential_1(a2);
    sub_1A5BEFF90(v115, *((unint64_t *)&v115 + 1));
    sub_1A5BEFF90(v115, *((unint64_t *)&v115 + 1));
    swift_release();
    v132 = v157;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = v137;
    *(_QWORD *)(a9 + 16) = v135;
    *(_QWORD *)(a9 + 24) = v134;
    *(_QWORD *)(a9 + 32) = v132;
    *(_BYTE *)(a9 + 40) = v143;
    *(_BYTE *)(a9 + 41) = v120;
    *(_BYTE *)(a9 + 42) = v154;
    swift_retain();
    sub_1A5BEF914(v135, v134);
    swift_retain();
    swift_release();
    sub_1A5BF4040(v135, v134);
    return swift_release();
  }
}

uint64_t sub_1A5BF3924(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;

  v5 = *((unsigned __int8 *)v2 + 42);
  if (v5 == 3)
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v6 = 2;
    swift_willThrow();
    return v4;
  }
  v18 = *v2;
  v19 = *(_OWORD *)(v2 + 1);
  sub_1A5BF3B1C();
  if ((_QWORD)v19)
  {
    v11 = v9;
    v12 = v10;
    swift_retain();
    sub_1A5C06B9C(a1, a2, v11, v12);
    v4 = v13;
    v15 = v14;
    swift_release();
    sub_1A5BEFF90(v11, v12);
    if (v3)
      return v4;
    if (v5 < 3)
    {
      if (v18 == -1)
      {
        sub_1A5BF3EC0();
        swift_allocError();
        *v17 = 6;
        swift_willThrow();
        sub_1A5BEFF90(v4, v15);
      }
      else
      {
        *v2 = v18 + 1;
      }
      return v4;
    }
  }
  else
  {
    __break(1u);
  }
  result = sub_1A5C41E64();
  __break(1u);
  return result;
}

void sub_1A5BF3B1C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[6] = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(v0 + 42) < 3u)
  {
    v1 = *(_QWORD *)v0;
    v2 = *(_QWORD *)(v0 + 24);
    v3 = sub_1A5C41C00();
    *(_QWORD *)(v3 + 16) = 4;
    *(_DWORD *)(v3 + 32) = 0;
    v4 = bswap64(v1);
    v5[0] = v3;
    sub_1A5C3F080((uint64_t)&v4, (char *)v5);
    if (v2 >> 60 != 15)
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x1A5BF3C54);
  }
  sub_1A5C41E64();
  __break(1u);
  JUMPOUT(0x1A5BF3CA4);
}

uint64_t sub_1A5BF3CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;

  v7 = *((unsigned __int8 *)v4 + 42);
  if (v7 == 3)
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v8 = 2;
    swift_willThrow();
    return v6;
  }
  v31 = *((_BYTE *)v4 + 42);
  v11 = v4[3];
  v12 = v4[4];
  v13 = *((_WORD *)v4 + 20);
  v22 = *v4;
  v25 = *v4;
  v26 = *(_OWORD *)(v4 + 1);
  v27 = v11;
  v28 = v12;
  v29 = v13;
  v30 = v7;
  sub_1A5BF3B1C();
  if ((_QWORD)v26)
  {
    v16 = v14;
    v17 = v15;
    v25 = v26;
    swift_retain();
    v6 = sub_1A5C06F80(a1, v16, v17, a2, &v25, a3, a4);
    v19 = v18;
    swift_release();
    sub_1A5BEFF90(v16, v17);
    if (v5)
      return v6;
    if (v7 < 3)
    {
      if (v22 == -1)
      {
        sub_1A5BF3EC0();
        swift_allocError();
        *v21 = 6;
        swift_willThrow();
        sub_1A5BEFF90(v6, v19);
      }
      else
      {
        *v4 = v22 + 1;
      }
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  result = sub_1A5C41E64();
  __break(1u);
  return result;
}

_BYTE *sub_1A5BF3EAC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result[1] ^ *result;
  return result;
}

unint64_t sub_1A5BF3EC0()
{
  unint64_t result;

  result = qword_1EE801158;
  if (!qword_1EE801158)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HPKE.Errors, &type metadata for HPKE.Errors);
    atomic_store(result, (unint64_t *)&qword_1EE801158);
  }
  return result;
}

uint64_t sub_1A5BF3F04(uint64_t result, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t i;
  uint64_t v9;

  if ((a4 >> 60 == 15) == (*a2 != 0))
  {
    v6 = 3;
LABEL_10:
    sub_1A5BF3EC0();
    swift_allocError();
    *v7 = v6;
    return swift_willThrow();
  }
  if (!*a2)
  {
    if (result != 1)
    {
      for (i = 0x21u; ; ++i)
      {
        v9 = i - 31;
        if (__OFADD__(i - 32, 1))
          break;
        if (byte_1E4F75C98[i] == result)
          goto LABEL_13;
        if (v9 == 2)
          return result;
      }
      goto LABEL_20;
    }
LABEL_13:
    v6 = 4;
    goto LABEL_10;
  }
  if (result != 1)
  {
    v4 = 0x21u;
    while (1)
    {
      v5 = v4 - 31;
      if (__OFADD__(v4 - 32, 1))
        break;
      if (byte_1E4F75CC0[v4] == result)
        return result;
      ++v4;
      if (v5 == 2)
      {
        v6 = 5;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5BF4040(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1A5BEFF90(a1, a2);
  return a1;
}

unint64_t sub_1A5BF4054()
{
  unint64_t result;

  result = qword_1EE801160;
  if (!qword_1EE801160)
  {
    result = MEMORY[0x1A85B3FE0](")S3?", &type metadata for SymmetricKey);
    atomic_store(result, (unint64_t *)&qword_1EE801160);
  }
  return result;
}

unint64_t sub_1A5BF4098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE801170;
  if (!qword_1EE801170)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE801168);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB25E0], v1);
    atomic_store(result, (unint64_t *)&qword_1EE801170);
  }
  return result;
}

uint64_t sub_1A5BF40E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t _s11KeyScheduleVwxx(uint64_t a1)
{
  unint64_t v2;

  swift_release();
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >> 60 != 15)
    sub_1A5BEFF90(*(_QWORD *)(a1 + 16), v2);
  return swift_release();
}

uint64_t _s11KeyScheduleVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_1A5BEE468(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  swift_retain();
  return a1;
}

uint64_t _s11KeyScheduleVwca(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1A5BEE468(*v4, *(_QWORD *)(a2 + 24));
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v5;
      sub_1A5BEFF90(v8, v9);
      goto LABEL_8;
    }
    sub_1A5BF431C(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1A5BEE468(*v4, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  return a1;
}

uint64_t sub_1A5BF431C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy43_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s11KeyScheduleVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v5;
      *(_QWORD *)(a1 + 24) = v7;
      sub_1A5BEFF90(v8, v6);
      goto LABEL_6;
    }
    sub_1A5BF431C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  return a1;
}

uint64_t _s11KeyScheduleVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 43))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11KeyScheduleVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 43) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 43) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s11KeyScheduleVMa()
{
  return &_s11KeyScheduleVN;
}

size_t sub_1A5BF44B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  size_t result;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    return sub_1A5BF53D0(a1, a2, a3);
  v7 = *v3;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  v8 = swift_allocObject();
  v9 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v8 + 24) = v9;
  swift_retain();
  MEMORY[0x1A85B3CC8](v9);
  v10 = (void *)swift_slowAlloc();
  v11 = *(const void **)(v7 + 16);
  result = MEMORY[0x1A85B3CC8](v9);
  if ((result & 0x8000000000000000) == 0)
  {
    memmove(v10, v11, result);
    swift_release();
    *(_QWORD *)(v8 + 16) = v10;
    *v3 = v8;
    swift_release();
    return sub_1A5BF53D0(a1, a2, a3);
  }
  __break(1u);
  return result;
}

void sub_1A5BF45A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_4;
  v5 = *v2;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  v6 = swift_allocObject();
  v7 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v6 + 24) = v7;
  swift_retain();
  MEMORY[0x1A85B3CC8](v7);
  v8 = (void *)swift_slowAlloc();
  v9 = *(const void **)(v5 + 16);
  v10 = MEMORY[0x1A85B3CC8](v7);
  if ((v10 & 0x8000000000000000) == 0)
  {
    memmove(v8, v9, v10);
    swift_release();
    *(_QWORD *)(v6 + 16) = v8;
    *v2 = v6;
    swift_release();
LABEL_4:
    sub_1A5BF564C(a1, a2);
    return;
  }
  __break(1u);
}

uint64_t sub_1A5BF46AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v32 = a8;
  v33 = a2;
  v34 = a5;
  v35 = a7;
  v36 = a4;
  v30[1] = a9;
  v42 = *MEMORY[0x1E0C80C00];
  v37 = sub_1A5C41CF0();
  v13 = *(_QWORD *)(v37 - 8);
  v14 = MEMORY[0x1E0C80A78](v37);
  v16 = (char *)v30 - v15;
  v38 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v14);
  v31 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v19 = *a3;
  v20 = a3[1];
  v21 = *a3;
  v22 = v20;
  if (v20 >> 60 == 15)
  {
    *(_QWORD *)((char *)&v41 + 6) = 0;
    *(_QWORD *)&v41 = 0;
    BYTE14(v41) = 12;
    LODWORD(v40) = 0;
    if (!ccrng())
    {
      __break(1u);
      JUMPOUT(0x1A5BF4AB0);
    }
    if ((_DWORD)v40)
    {
      __break(1u);
      JUMPOUT(0x1A5BF4A94);
    }
    ccrng_generate_bridge();
    v21 = v41;
    v22 = DWORD2(v41) | ((unint64_t)BYTE12(v41) << 32) | ((unint64_t)BYTE13(v41) << 40) | ((unint64_t)BYTE14(v41) << 48);
  }
  swift_retain();
  sub_1A5BEE468(v21, v22);
  sub_1A5BEF914(v19, v20);
  v23 = ccaes_gcm_encrypt_mode();
  if (!v23)
    __break(1u);
  v24 = v23;
  v39 = v18;
  *(_QWORD *)&v41 = v21;
  *((_QWORD *)&v41 + 1) = v22;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  v25 = sub_1A5BF5018(&v39, (uint64_t *)&v41, v24);
  if (!v9)
  {
    v40 = v25;
    v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v36, v37);
    v28 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v16, 1, a6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v27);
    }
    else
    {
      v29 = (uint64_t)v31;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v16, a6);
      sub_1A5BF44B4(v29, a6, v32);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, a6);
    }
    __asm { BR              X10 }
  }
  return sub_1A5BEFF90(v21, v22);
}

void sub_1A5BF4AC0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[14];

  v12[2] = a5;
  v12[4] = a3;
  v6 = sub_1A5C41CF0();
  v12[5] = *(_QWORD *)(v6 - 8);
  v12[6] = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v12[1] = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  sub_1A5BEE468(*a2, v10);
  sub_1A5BEE468(v9, v10);
  swift_retain();
  sub_1A5BEF928(v11, v9, v10);
  __asm { BR              X10 }
}

uint64_t sub_1A5BF4BC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (BYTE6(v3) < 0xCuLL)
  {
LABEL_10:
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v5, v3);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A5BF4FF8);
  }
  *(_QWORD *)(v9 - 168) = v8;
  sub_1A5BF05B8(v5, v3);
  v5 = v10;
  v12 = v11;
  sub_1A5BEFF90(v0, v2);
  v13 = ccaes_gcm_decrypt_mode();
  if (!v13)
  {
    __break(1u);
    goto LABEL_10;
  }
  v14 = v13;
  *(_QWORD *)(v9 - 112) = v1;
  *(_QWORD *)(v9 - 96) = v5;
  *(_QWORD *)(v9 - 88) = v12;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  v15 = *(_QWORD *)(v9 - 136);
  result = sub_1A5BF5018((uint64_t *)(v9 - 112), (uint64_t *)(v9 - 96), v14);
  if (!v15)
  {
    *(_QWORD *)(v9 - 72) = result;
    v17 = *(_QWORD *)(v9 - 152);
    v18 = *(_QWORD *)(v9 - 144);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v4, *(_QWORD *)(v9 - 160), v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v18);
    }
    else
    {
      v20 = *(_QWORD *)(v9 - 184);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v20, v4, v6);
      sub_1A5BF44B4(v20, v6, *(_QWORD *)(v9 - 176));
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
    }
    v19 = *(_QWORD *)(v9 - 168);
    *(_OWORD *)(v9 - 96) = xmmword_1A5C42A80;
    sub_1A5BEE468(v0, v2);
    sub_1A5BEFD14(v19, v0, v2);
    sub_1A5BEFA74(16, *(_QWORD *)(v9 - 128), *(_QWORD *)(v9 - 120));
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1A5BF5018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  v6 = *a1;
  v8 = *a2;
  v7 = a2[1];
  swift_beginAccess();
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    JUMPOUT(0x1A5BF53A0);
  }
  v10 = 8 * v9;
  if (v10 == 128 || v10 == 192 || v10 == 256)
  {
    MEMORY[0x1A85B3CC8](a3);
    *(_QWORD *)(v4 + 16) = swift_slowAlloc();
    *(_QWORD *)(v4 + 24) = a3;
    v11 = ccgcm_init();
    if (!v11)
    {
      swift_release();
      __asm { BR              X10 }
    }
    v12 = v11;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    swift_willThrow();
    sub_1A5BEFF90(v8, v7);
    swift_release();
    swift_release();
  }
  else
  {
    sub_1A5BEFF90(v8, v7);
    swift_release();
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v14 = 0;
    *(_BYTE *)(v14 + 4) = 1;
    swift_willThrow();
    type metadata accessor for CoreCryptoGCMImpl.Context();
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t sub_1A5BF53D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = &v11[-v8];
  sub_1A5C41828();
  v12 = a2;
  v13 = a3;
  v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_1A5BF54E4()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5BF55D8(uint64_t result)
{
  int v1;
  uint64_t v2;

  if (result)
  {
    result = ccgcm_aad();
    if ((_DWORD)result)
    {
      v1 = result;
      sub_1A5BF5E74();
      swift_allocError();
      *(_DWORD *)v2 = v1;
      *(_BYTE *)(v2 + 4) = 0;
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A5BF564C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_1A5BF56A0()
{
  uint64_t v0;

  if (sub_1A5C41C54() < 0)
  {
    __break(1u);
    JUMPOUT(0x1A5BF5748);
  }
  v0 = sub_1A5BEEEB4();
  MEMORY[0x1E0C80A78](v0);
  sub_1A5BF08C4();
}

uint64_t sub_1A5BF5760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];

  v23 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v22 - v14;
  v16 = sub_1A5BED00C(a3, a1, a2);
  v18 = v17 + v16;
  v20 = v17 + v19;
  if (!v17)
  {
    v20 = 0;
    v18 = 0;
  }
  v28[0] = v18;
  v28[1] = v20;
  sub_1A5C41828();
  v24 = a6;
  v25 = a7;
  v26 = v28;
  v27 = v23;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t sub_1A5BF58BC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5BF59B4(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2 - result;
  if (result)
    v5 = a2 - result;
  else
    v5 = 0;
  if (!*a3)
  {
    if (v5 <= 0)
      goto LABEL_6;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3[1] - *a3 < v5)
    goto LABEL_10;
LABEL_6:
  if (!result)
  {
    __break(1u);
    return result;
  }
  v6 = ccgcm_update();
  if (v6)
  {
    v7 = v6;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }
LABEL_11:
  result = sub_1A5BED00C(v4, *a3, a3[1]);
  v10 = v9 + result;
  v12 = v9 + v11;
  if (!v9)
  {
    v12 = 0;
    v10 = 0;
  }
  *a3 = v10;
  a3[1] = v12;
  return result;
}

uint64_t sub_1A5BF5A90()
{
  int v0;
  int v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v4[1] = 0;
  v0 = ccgcm_finalize();
  if (v0)
  {
    v1 = v0;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v2 = v1;
    *(_BYTE *)(v2 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v5[3] = MEMORY[0x1E0DEAC20];
    v5[4] = MEMORY[0x1E0CB1AA8];
    v5[0] = v4;
    v5[1] = v5;
    __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1E0DEAC20]);
    sub_1A5C4196C();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

void sub_1A5BF5B80(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

BOOL sub_1A5BF5BD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __src, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t __dst,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  BOOL v54;
  int64_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  __int16 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  _QWORD v64[13];

  if (BYTE6(v40) != 16)
    return 0;
  v64[0] = 0;
  v64[1] = 0;
  v41 = *(_QWORD *)(v37 + 24);
  v42 = ccaes_gcm_decrypt_mode();
  if (!v42)
  {
    __break(1u);
    JUMPOUT(0x1A5BF5DF4);
  }
  if (v41 != v42)
  {
    __break(1u);
    JUMPOUT(0x1A5BF5DD4);
  }
  if (v38)
  {
    if (v38 == 1)
    {
      if (v39 >> 32 >= (int)v39)
      {
        sub_1A5BEE468(v39, v40);
        v43 = sub_1A5C41894();
        if (!v43)
        {
          sub_1A5C418AC();
LABEL_26:
          sub_1A5BEFF90(v39, v40);
          return ccgcm_finalize() == 0;
        }
        v44 = v43;
        v45 = sub_1A5C418B8();
        v46 = (int)v39 - v45;
        if (!__OFSUB__((int)v39, v45))
        {
          v47 = sub_1A5C418AC();
          if (v47 >= (v39 >> 32) - (int)v39)
            v48 = (v39 >> 32) - (int)v39;
          else
            v48 = v47;
          memmove(v64, (const void *)(v44 + v46), v48);
          goto LABEL_26;
        }
        goto LABEL_31;
      }
      __break(1u);
    }
    else
    {
      v50 = *(_QWORD *)(v39 + 16);
      v51 = *(_QWORD *)(v39 + 24);
      swift_retain();
      swift_retain();
      v52 = (char *)sub_1A5C41894();
      if (v52)
      {
        v53 = sub_1A5C418B8();
        if (__OFSUB__(v50, v53))
          goto LABEL_32;
        v52 += v50 - v53;
      }
      v54 = __OFSUB__(v51, v50);
      v55 = v51 - v50;
      if (!v54)
      {
        v56 = sub_1A5C418AC();
        if (v52)
        {
          if (v56 >= v55)
            v57 = v55;
          else
            v57 = v56;
          memmove(v64, v52, v57);
        }
        swift_release();
        swift_release();
        return ccgcm_finalize() == 0;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  v58 = v39;
  v59 = v40;
  v60 = BYTE2(v40);
  v61 = BYTE3(v40);
  v62 = BYTE4(v40);
  v63 = BYTE5(v40);
  memcpy(v64, &v58, BYTE6(v40));
  return ccgcm_finalize() == 0;
}

uint64_t sub_1A5BF5E04()
{
  uint64_t v0;
  void *v1;
  rsize_t v2;

  v1 = *(void **)(v0 + 16);
  v2 = MEMORY[0x1A85B3CC8](*(_QWORD *)(v0 + 24));
  memset_s(v1, v2, 0, v2);
  MEMORY[0x1A85B4070](v1, -1, -1);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreCryptoGCMImpl.Context()
{
  return objc_opt_self();
}

unint64_t sub_1A5BF5E74()
{
  unint64_t result;

  result = qword_1EE801178;
  if (!qword_1EE801178)
  {
    result = MEMORY[0x1A85B3FE0]("aO3?0W", &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_1EE801178);
  }
  return result;
}

uint64_t sub_1A5BF5EB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A5BF5760(a1, a2, v2[4], v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_1A5BF5ED8()
{
  return sub_1A5BF58BC();
}

uint64_t sub_1A5BF5EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BF59B4(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1A5BF5F0C()
{
  return sub_1A5BF54E4();
}

uint64_t sub_1A5BF5F28(uint64_t a1)
{
  return sub_1A5BF55D8(a1);
}

ValueMetadata *type metadata accessor for CoreCryptoGCMImpl()
{
  return &type metadata for CoreCryptoGCMImpl;
}

uint64_t Curve25519.Signing.PublicKey.isValidSignature<A, B>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  return sub_1A5C07820(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t Curve25519.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C07ED8(a1, a2, a3);
}

uint64_t sub_1A5BF5FAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  sub_1A5C41F18();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_1A5C41F18();
      --v2;
    }
    while (v2);
  }
  if (!v0[1])
    return sub_1A5C41F24();
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[2];
  sub_1A5C41F24();
  v7 = v5 >> 1;
  result = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_14;
  }
  result = sub_1A5C41F18();
  v9 = __OFSUB__(v7, v4);
  v10 = v7 - v4;
  if (!v10)
    return result;
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v11 = v6 + v4;
  do
  {
    ++v11;
    result = sub_1A5C41F24();
    --v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1A5BF6060()
{
  sub_1A5C41F00();
  sub_1A5BF5FAC();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5BF60A0()
{
  sub_1A5C41F00();
  sub_1A5BF5FAC();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5BF60D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  if (sub_1A5C054F4(*(_QWORD **)a1, *(_QWORD **)a2))
  {
    if (v2)
    {
      if (v6 && (sub_1A5BFAB10(v3, v4, v5, v7, v8, v9) & 1) != 0)
        return 1;
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1A5BF6168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  char *v7;

  if (qword_1EE800168 != -1)
    swift_once();
  v0 = qword_1EE805A38;
  v1 = qword_1EE800170;
  sub_1A5C41BF4();
  if (v1 != -1)
    swift_once();
  v2 = qword_1EE805A40;
  sub_1A5C41BF4();
  v7 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  MEMORY[0x1E0C80A78](v7);
  v6[2] = v2;
  sub_1A5C27378(6, &v7, (uint64_t (*)(char **))sub_1A5BF6B38, (uint64_t)v6);
  v3 = v7;
  v4 = *((_QWORD *)v7 + 2);
  result = swift_bridgeObjectRelease();
  qword_1EE805A58 = v0;
  unk_1EE805A60 = v3;
  xmmword_1EE805A68 = (unint64_t)(v3 + 32);
  qword_1EE805A78 = (2 * v4) | 1;
  return result;
}

uint64_t sub_1A5BF6294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  char *v7;

  if (qword_1EE800168 != -1)
    swift_once();
  v0 = qword_1EE805A38;
  v1 = qword_1EE800FE0;
  sub_1A5C41BF4();
  if (v1 != -1)
    swift_once();
  v2 = qword_1EE805AE0;
  sub_1A5C41BF4();
  v7 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  MEMORY[0x1E0C80A78](v7);
  v6[2] = v2;
  sub_1A5C27378(6, &v7, (uint64_t (*)(char **))sub_1A5BF6B38, (uint64_t)v6);
  v3 = v7;
  v4 = *((_QWORD *)v7 + 2);
  result = swift_bridgeObjectRelease();
  qword_1EE805A90 = v0;
  *(_QWORD *)algn_1EE805A98 = v3;
  xmmword_1EE805AA0 = (unint64_t)(v3 + 32);
  qword_1EE805AB0 = (2 * v4) | 1;
  return result;
}

uint64_t sub_1A5BF63C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  char *v7;

  if (qword_1EE800168 != -1)
    swift_once();
  v0 = qword_1EE805A38;
  v1 = qword_1EE800FE8;
  sub_1A5C41BF4();
  if (v1 != -1)
    swift_once();
  v2 = qword_1EE805AE8;
  sub_1A5C41BF4();
  v7 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  MEMORY[0x1E0C80A78](v7);
  v6[2] = v2;
  sub_1A5C27378(6, &v7, (uint64_t (*)(char **))sub_1A5BF64EC, (uint64_t)v6);
  v3 = v7;
  v4 = *((_QWORD *)v7 + 2);
  result = swift_bridgeObjectRelease();
  qword_1EE805AB8 = v0;
  unk_1EE805AC0 = v3;
  xmmword_1EE805AC8 = (unint64_t)(v3 + 32);
  qword_1EE805AD8 = (2 * v4) | 1;
  return result;
}

uint64_t sub_1A5BF64EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1A5C050B8(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1A5BF6504@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, char **a3@<X8>)
{
  uint64_t v3;
  _BYTE *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t result;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD v24[4];
  _BYTE v25[56];
  _BYTE v26[56];
  _BYTE v27[56];
  _OWORD v28[3];
  unsigned __int8 v29;
  _OWORD v30[3];
  unsigned __int8 v31;
  _BYTE v32[32];
  char *v33;
  char *v34;

  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v6 = 1;
    swift_willThrow();
    return sub_1A5BF67DC((uint64_t)a1);
  }
  swift_unknownObjectRetain_n();
  sub_1A5C184E0(0x30u, &v23);
  if (v3)
  {
LABEL_9:
    swift_unknownObjectRelease();
    sub_1A5BF67DC((uint64_t)a1);
    return sub_1A5BF67DC((uint64_t)a1);
  }
  v7 = v23;
  v34 = (char *)v24[0];
  v8 = (char *)v24[1];
  v9 = (char *)v24[2];
  v10 = (char *)v24[3];
  sub_1A5C20D4C((uint64_t)v25);
  sub_1A5BF683C((uint64_t)v25, (uint64_t)v28, &qword_1ECF977C0);
  if (v29 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v17 = 3;
    swift_willThrow();
    v33 = v23;
    sub_1A5BF6814((uint64_t)&v33);
    sub_1A5BF683C((uint64_t)v24, (uint64_t)v32, &qword_1EE800178);
    sub_1A5BF6880((uint64_t)v32);
    goto LABEL_9;
  }
  v30[0] = v28[0];
  v30[1] = v28[1];
  v30[2] = v28[2];
  v31 = v29;
  v11 = sub_1A5BFAE94((unsigned __int8 *)v30, 3u);
  v20 = v13;
  v21 = v12;
  v22 = v14;
  v15 = v11;
  sub_1A5C20D4C((uint64_t)v26);
  sub_1A5BF68A8((uint64_t)v26);
  sub_1A5BF683C((uint64_t)v26, (uint64_t)v27, &qword_1ECF977C0);
  if (v27[48] != 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v16 = 3;
    swift_willThrow();
    sub_1A5BF67DC((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_1A5BF67DC((uint64_t)a1);
  }
  swift_unknownObjectRelease();
  sub_1A5BF67DC((uint64_t)a1);
  result = sub_1A5BF67DC((uint64_t)a1);
  v19 = v34;
  *a3 = v7;
  a3[1] = v19;
  a3[2] = v8;
  a3[3] = v9;
  a3[4] = v10;
  a3[5] = (char *)v15;
  a3[6] = v22;
  a3[7] = v21;
  a3[8] = v20;
  return result;
}

unint64_t sub_1A5BF6798()
{
  unint64_t result;

  result = qword_1EE801180;
  if (!qword_1EE801180)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for CryptoKitASN1Error, &type metadata for CryptoKitASN1Error);
    atomic_store(result, (unint64_t *)&qword_1EE801180);
  }
  return result;
}

uint64_t sub_1A5BF67DC(uint64_t a1)
{
  j__swift_unknownObjectRelease(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_1A5BF6814(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A5BF683C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A5BF6880(uint64_t a1)
{
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1A5BF68A8(uint64_t a1)
{
  sub_1A5BF68E0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return a1;
}

uint64_t sub_1A5BF68E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 != 255)
    return j__swift_unknownObjectRelease(a2, a3, a4, a5, a6, a7 & 1);
  return result;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwxx()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t _s26RFC5480AlgorithmIdentifierVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *_s26RFC5480AlgorithmIdentifierVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_1A5C41BF4();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s26RFC5480AlgorithmIdentifierVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s26RFC5480AlgorithmIdentifierVMa()
{
  return &_s26RFC5480AlgorithmIdentifierVN;
}

unint64_t sub_1A5BF6AF4()
{
  unint64_t result;

  result = qword_1EE801188;
  if (!qword_1EE801188)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C42B7C, &_s26RFC5480AlgorithmIdentifierVN);
    atomic_store(result, (unint64_t *)&qword_1EE801188);
  }
  return result;
}

uint64_t sub_1A5BF6B38(uint64_t a1)
{
  return sub_1A5BF64EC(a1);
}

uint64_t sub_1A5BF6B4C()
{
  return sub_1A5BF6CB4(&qword_1EE801190, &qword_1EE801198);
}

uint64_t sub_1A5BF6B70()
{
  return sub_1A5BF6CB4(&qword_1EE8011A0, &qword_1EE8011A8);
}

uint64_t sub_1A5BF6B94()
{
  return sub_1A5BF6CB4(&qword_1EE8011B0, &qword_1EE8011B8);
}

uint64_t sub_1A5BF6BB8()
{
  return sub_1A5BF6CB4(&qword_1EE8011C0, &qword_1EE8011C8);
}

uint64_t sub_1A5BF6BDC()
{
  return sub_1A5BF6CB4(&qword_1EE8011D0, &qword_1EE8011D8);
}

uint64_t sub_1A5BF6C00()
{
  return sub_1A5BF6CB4(&qword_1EE8011E0, &qword_1EE8011E8);
}

uint64_t sub_1A5BF6C24()
{
  return sub_1A5BF6CB4(&qword_1EE8011F0, &qword_1EE8011F8);
}

uint64_t sub_1A5BF6C48()
{
  return sub_1A5BF6CB4(&qword_1EE801200, &qword_1EE801208);
}

uint64_t sub_1A5BF6C6C()
{
  return sub_1A5BF6CB4(&qword_1EE801210, &qword_1EE801218);
}

uint64_t sub_1A5BF6C90()
{
  return sub_1A5BF6CB4(&qword_1EE801220, qword_1EE801228);
}

uint64_t sub_1A5BF6CB4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A85B3FE0](&unk_1A5C431F8, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A5BF6CF4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A5BF6CFC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A5BF6D68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1A5BF6DD8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1A5BF6DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1A5BF6E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1A5BF6E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1A5BF6E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1A5BF6EA8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A5BF6F58 + 4 * byte_1A5C42C20[(v7 - 1)]))();
}

void sub_1A5BF6FA8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for IntegerBytesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerBytesCollection);
}

void sub_1A5BF7164()
{
  JUMPOUT(0x1A85B3FE0);
}

uint64_t sub_1A5BF7174()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1A5BF7180()
{
  return MEMORY[0x1E0DEB468];
}

uint64_t sub_1A5BF718C(uint64_t result)
{
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else if ((unint64_t)(result - 0x1000000000000001) >> 61 == 7)
  {
    sub_1A5BF852C();
    return sub_1A5C41DBC();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BF7210()
{
  return sub_1A5C20EBC();
}

uint64_t sub_1A5BF721C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char v29;
  uint64_t result;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  unsigned int v36;
  unsigned __int8 v37;
  char *v38;
  char *v39;
  char v40;
  char *v41;
  unsigned __int8 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t AssociatedTypeWitness;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t AssociatedConformanceWitness;
  char *v59;
  unsigned __int8 v60;

  v3 = *(_QWORD *)(a2 + 16);
  v53 = *(_QWORD *)(a2 + 24);
  v54 = (char *)a1;
  v48 = *(_QWORD *)(*(_QWORD *)(v53 + 8) + 24);
  v49 = v3;
  swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v52 = (char *)&v45 - v5;
  v6 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_checkMetadataState();
  v57 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v50 = (char *)&v45 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v59 = (char *)&v45 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)&v45 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v45 - v19;
  v47 = (char *)&v45 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v45 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1A5C41D74();
  sub_1A5BF718C((uint64_t)v54);
  sub_1A5C41D8C();
  v23 = v3;
  v24 = (char *)AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v23);
  v25 = *(void (**)(char *, uint64_t))(v57 + 8);
  v25(v20, v9);
  swift_getAssociatedConformanceWitness();
  sub_1A5C41EB8();
  sub_1A5C41E88();
  v26 = v56;
  v54 = v22;
  sub_1A5C41D80();
  v25(v20, v9);
  v27 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v27(v59, v26, v9);
  if ((sub_1A5C41DB0() & 1) == 0
    || (sub_1A5C41EB8(),
        v28 = v47,
        sub_1A5C41E88(),
        swift_getAssociatedConformanceWitness(),
        v29 = sub_1A5C41A80(),
        result = ((uint64_t (*)(char *, uint64_t))v25)(v28, v9),
        (v29 & 1) != 0))
  {
    if (sub_1A5C41DA4() < 8)
      goto LABEL_15;
    v27(v50, v59, v9);
    v60 = -1;
    v31 = sub_1A5C41DB0();
    v32 = sub_1A5C41DA4();
    if ((v31 & 1) != 0)
    {
      if (v32 <= 8)
      {
        sub_1A5C41EB8();
        v33 = v47;
        sub_1A5C41E88();
        swift_getAssociatedConformanceWitness();
        v34 = v50;
        v35 = sub_1A5C41A68();
        v25(v33, v9);
        v36 = v60;
        v24 = v46;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v46, v34, v9);
        if ((v35 & 1) == 0)
        {
LABEL_14:
          v25(v24, v9);
          goto LABEL_15;
        }
        v37 = sub_1A5C41D98();
        v25(v24, v9);
        if (v36 < v37)
        {
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
LABEL_15:
        v43 = v59;
        v44 = sub_1A5C41D98();
        v25(v43, v9);
        v25(v56, v9);
        v25(v54, v9);
        return v44;
      }
    }
    else if (v32 < 9)
    {
      v41 = v50;
      v42 = sub_1A5C41D98();
      v25(v41, v9);
      if (v60 < v42)
        goto LABEL_13;
      goto LABEL_15;
    }
    sub_1A5BF84E8();
    v38 = v47;
    sub_1A5C41D74();
    swift_getAssociatedConformanceWitness();
    v39 = v50;
    v40 = sub_1A5C41A74();
    v25(v38, v9);
    v25(v39, v9);
    if ((v40 & 1) != 0)
      goto LABEL_13;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BF784C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v4);
  return sub_1A5C41C24();
}

uint64_t sub_1A5BF78C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v4);
  return sub_1A5C41C3C();
}

uint64_t sub_1A5BF7928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF7C88(a1, a2, a3, MEMORY[0x1E0DEB508]);
}

_QWORD *sub_1A5BF7934(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF7D18(a1, a2, a3, MEMORY[0x1E0DEB508]);
}

uint64_t sub_1A5BF7944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1A85B3FE0](&unk_1A5C431F8, a4);
  return sub_1A5C41C18();
}

uint64_t sub_1A5BF79AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A5BF7210();
  *a1 = result;
  return result;
}

uint64_t sub_1A5BF79D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A5BEB208();
  *a1 = result;
  return result;
}

void (*sub_1A5BF79FC(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _BYTE *v6;
  uint64_t (*v7)();
  char v8;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v7 = sub_1A5BF7A8C((uint64_t)v6, *a2, a3);
  v6[40] = v8;
  *((_QWORD *)v6 + 4) = v7;
  return sub_1A5BF7A60;
}

void sub_1A5BF7A60(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1A5BF7A8C(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  sub_1A5BF721C(a2, a3);
  return nullsub_1;
}

uint64_t sub_1A5BF7AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1A85B3FE0](&unk_1A5C431F8, a1);
  v3 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v3);
  return sub_1A5C41C30();
}

void sub_1A5BF7B28(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1A5BF7B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1A85B3FE0](&unk_1A5C431F8, a3);
  v5 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v4);
  MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v5);
  return sub_1A5C41C24();
}

uint64_t sub_1A5BF7BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1A85B3FE0](&unk_1A5C431F8, a3);
  v5 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v4);
  MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v5);
  return sub_1A5C41C3C();
}

uint64_t sub_1A5BF7C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5BF81B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1A5BF7C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5BF81B0(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_1A5BF7C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF7C88(a1, a2, a3, MEMORY[0x1E0DEB500]);
}

uint64_t sub_1A5BF7C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = MEMORY[0x1A85B3FE0](&unk_1A5C431F8);
  v8 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v7);
  v9 = MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v8);
  return a4(a1, a2, v6, v9);
}

_QWORD *sub_1A5BF7D0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF7D18(a1, a2, a3, MEMORY[0x1E0DEB500]);
}

_QWORD *sub_1A5BF7D18(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;

  v7 = MEMORY[0x1A85B3FE0](&unk_1A5C431F8);
  v9 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v8);
  v10 = MEMORY[0x1A85B3FE0](&unk_1A5C42F88, v9);
  result = a4(&v12, a1, a2, v7, v10);
  *a1 = v12;
  return result;
}

uint64_t sub_1A5BF7DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  v6 = sub_1A5BF7210();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x1A85B3FE0](&unk_1A5C430B8, a1);
  result = sub_1A5C41E40();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t sub_1A5BF7E2C(uint64_t a1)
{
  MEMORY[0x1A85B3FE0](&unk_1A5C430B8, a1);
  return sub_1A5C41C6C();
}

uint64_t sub_1A5BF7E60()
{
  return 2;
}

uint64_t sub_1A5BF7E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1A85B3FE0](&unk_1A5C430B8, a1);
  v4 = sub_1A5BF835C(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t sub_1A5BF7ECC()
{
  return sub_1A5C41BAC();
}

uint64_t sub_1A5BF7EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A85B3FE0](&unk_1A5C42F88, a3);
  return sub_1A5C41D5C();
}

BOOL sub_1A5BF7F38(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

BOOL sub_1A5BF7F44(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_1A5BF7F50(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_1A5BF7F5C(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_1A5BF7F68(uint64_t *a1, uint64_t *a2)
{
  return sub_1A5BF7F38(*a1, *a2);
}

BOOL sub_1A5BF7F74(uint64_t *a1, uint64_t *a2)
{
  return sub_1A5BF7F50(*a1, *a2);
}

BOOL sub_1A5BF7F80(uint64_t *a1, uint64_t *a2)
{
  return sub_1A5BF7F5C(*a1, *a2);
}

BOOL sub_1A5BF7F8C(uint64_t *a1, uint64_t *a2)
{
  return sub_1A5BF7F44(*a1, *a2);
}

uint64_t sub_1A5BF7F98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a2, a1);
  result = a2 - a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_1A5BF7FA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1A5BF7F98(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1A5BF7FD4()
{
  return sub_1A5C41D68();
}

void sub_1A5BF7FF0()
{
  JUMPOUT(0x1A85B3FE0);
}

void sub_1A5BF8000()
{
  JUMPOUT(0x1A85B3FE0);
}

void sub_1A5BF8010()
{
  JUMPOUT(0x1A85B3FE0);
}

uint64_t sub_1A5BF8020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF8100(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

unint64_t sub_1A5BF802C()
{
  unint64_t result;

  result = qword_1EE8012B0;
  if (!qword_1EE8012B0)
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EE8012B0);
  }
  return result;
}

void sub_1A5BF8070()
{
  JUMPOUT(0x1A85B3FE0);
}

void sub_1A5BF8080()
{
  JUMPOUT(0x1A85B3FE0);
}

uint64_t sub_1A5BF8090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF8100(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1A5BF809C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1A85B3FE0](&unk_1A5C43198);
  return MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_1A5BF80E4()
{
  JUMPOUT(0x1A85B3FE0);
}

uint64_t sub_1A5BF80F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5BF8100(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1A5BF8100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[2];

  v7[0] = MEMORY[0x1A85B3FE0](&unk_1A5C42F88, *(_QWORD *)(a1 + 16));
  v7[1] = sub_1A5BF802C();
  return MEMORY[0x1A85B3FE0](a4, a1, v7);
}

uint64_t sub_1A5BF815C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1A85B3FE0](&unk_1A5C431F8);
  return MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t type metadata accessor for IntegerBytesCollection.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerBytesCollection.Index);
}

uint64_t sub_1A5BF81B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_1A5C41A8C();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1A5BF8360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1A5C41CC0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_1A5C41A8C();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_1A5C41A8C();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

unint64_t sub_1A5BF84E8()
{
  unint64_t result;

  result = qword_1EE8012B8;
  if (!qword_1EE8012B8)
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEDEA0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EE8012B8);
  }
  return result;
}

unint64_t sub_1A5BF852C()
{
  unint64_t result;

  result = qword_1EE8012C0[0];
  if (!qword_1EE8012C0[0])
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, qword_1EE8012C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve25519()
{
  return &type metadata for Curve25519;
}

uint64_t AES.CCM.SealedBox.tag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1A5BEE468(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t AES.CCM.SealedBox.ciphertext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1A5BEE468(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AES.CCM.SealedBox.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return sub_1A5BEE468(v2, v3);
}

void AES.CCM.SealedBox.securityLevel.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t AES.CCM.SealedBox.init<A, B>(nonce:ciphertext:tag:securityLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v33 = a5;
  v38 = a2;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (uint64_t *)MEMORY[0x1E0C80A78](v10);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v15[1];
  v36 = *v15;
  v37 = v18;
  v20 = *v19;
  v21 = sub_1A5C41C54();
  v34 = v20;
  v22 = 8;
  if (v20)
    v22 = 16;
  if (v21 == v22)
  {
    v23 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v38, v35);
    v24 = sub_1A5C419FC();
    v33 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, a4);
    v26 = sub_1A5C419FC();
    v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, a4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v38, v23);
    *(_QWORD *)a6 = v26;
    *(_QWORD *)(a6 + 8) = v28;
    v30 = v33;
    *(_QWORD *)(a6 + 16) = v24;
    *(_QWORD *)(a6 + 24) = v30;
    v31 = v37;
    *(_QWORD *)(a6 + 32) = v36;
    *(_QWORD *)(a6 + 40) = v31;
    *(_BYTE *)(a6 + 48) = v34;
  }
  else
  {
    sub_1A5BEFF90(v36, v37);
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v32 = 1;
    *(_BYTE *)(v32 + 4) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v38, v35);
  }
  return result;
}

uint64_t _s9SealedBoxVwxx(uint64_t a1)
{
  sub_1A5BEFF90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_1A5BEFF90(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_1A5BEFF90(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t _s9SealedBoxVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1A5BEE468(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_1A5BEE468(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_1A5BEE468(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s9SealedBoxVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1A5BEE468(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_1A5BEFF90(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_1A5BEE468(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_1A5BEFF90(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  sub_1A5BEE468(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  sub_1A5BEFF90(v14, v15);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9SealedBoxVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1A5BEFF90(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1A5BEFF90(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1A5BEFF90(v8, v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s9SealedBoxVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s9SealedBoxVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CCM.SealedBox()
{
  return &type metadata for AES.CCM.SealedBox;
}

uint64_t sub_1A5BF8A5C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  sub_1A5C41BF4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97788);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_1A5BF9F44((uint64_t)v14, &qword_1ECF97738);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_1A5C41E28();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_1A5BF9CF0(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_1A5C41B10();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_1A5BED678(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x1E0C80A78](*(_QWORD *)&v14[0]);
    sub_1A5C17278();
    __asm { BR              X12 }
  }
  sub_1A5BF9FC8(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_1A5C418D0();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_1A5BF8F60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1A5BF0B68(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1A5BF9C78((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1A5BF0AE8((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_1A5BF9018(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801348);
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801350);
  MEMORY[0x1E0C80A78](v3);
  v15 = *(_OWORD *)a1;
  v4 = *(_OWORD *)a1;
  v16 = *(_OWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 16);
  v11 = v4;
  v12 = v5;
  v13 = *(_QWORD *)(a1 + 32);
  sub_1A5BF9E98(a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801358);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97788);
  if (!swift_dynamicCast())
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_1A5BF9F44((uint64_t)v9, &qword_1ECF97738);
    __asm { BR              X13 }
  }
  sub_1A5BF9FC8(v9, (uint64_t)v14);
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  sub_1A5C418D0();
  v6 = *((_QWORD *)&v15 + 1);
  v7 = v16;
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(v6, v7);
  swift_release();
  v11 = v9[0];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v11;
}

void sub_1A5BF95CC(uint64_t a1, uint64_t a2)
{
  char *v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v5[3] = &type metadata for ChaChaPoly.Nonce;
  v5[4] = sub_1A5BFA074();
  v5[0] = a1;
  v5[1] = a2;
  v4 = (char *)&loc_1A5BF9634
     + *((int *)qword_1A5BF9868
       + (__swift_project_boxed_opaque_existential_1(v5, (uint64_t)&type metadata for ChaChaPoly.Nonce)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1A5BF9644()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1A5BEE468(v1, v0);
  sub_1A5BF0850(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1A5BEFF90(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t Curve448.Signing.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_1A5C41C00();
  *(_QWORD *)(v2 + 16) = 57;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  v5 = v2;
  v3 = sub_1A5C013F4(0x39uLL, (uint64_t)&v5);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

size_t Curve448.Signing.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result;

  result = sub_1A5C1EF10();
  *a1 = result;
  return result;
}

uint64_t Curve448.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C1F254();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve448.Signing.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = sub_1A5C01410(v0);
  swift_release();
  return v1;
}

uint64_t Curve448.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C1F2C0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve448.Signing.PublicKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1A5C41BF4();
  v1 = sub_1A5BEBFDC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *sub_1A5BF9A68(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

uint64_t sub_1A5BF9ACC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    return a1(a3, a4 - a3);
  else
    return a1(0, 0);
}

uint64_t sub_1A5BF9B18@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    sub_1A5C41BF4();
    result = sub_1A5C41E1C();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BF9BA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v3;
  _QWORD v5[4];
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v6 = *a3;
  v3 = *(_OWORD *)(a3 + 3);
  v7 = *(_OWORD *)(a3 + 1);
  v8 = v3;
  v5[2] = &v6;
  return sub_1A5BF9ACC((uint64_t (*)(uint64_t, uint64_t))sub_1A5BF9FE0, (uint64_t)v5, a1, a2);
}

void sub_1A5BF9BF4(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  v9 = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE801348) + 48);
  sub_1A5BF9E98((uint64_t)v8);
  sub_1A5C25B70(a3, a1);
  *(_QWORD *)(a3 + v6) = v7;
}

uint64_t sub_1A5BF9C78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1A5C418C4();
  swift_allocObject();
  result = sub_1A5C41888();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A5C4193C();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

_BYTE *sub_1A5BF9CF0(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1A5BF0B68(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1A5BF9C78((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_1A5BF0AE8((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

_QWORD *sub_1A5BF9D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97708);
  v19[3] = v8;
  v19[4] = sub_1A5BEC08C((unint64_t *)&qword_1ECF97700, &qword_1ECF97708, MEMORY[0x1E0CB25C0]);
  v9 = (_QWORD *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  result = __swift_project_boxed_opaque_existential_1(v19, v8);
  v11 = result[2];
  v12 = result[3] >> 1;
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = (_BYTE *)(result[1] + v11);
    v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_1A5BF0850(v15, v16, &v18);
    v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (_QWORD *)v17;
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve448.Signing()
{
  return &type metadata for Curve448.Signing;
}

ValueMetadata *type metadata accessor for Curve448.Signing.PrivateKey()
{
  return &type metadata for Curve448.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for Curve448.Signing.PublicKey()
{
  return &type metadata for Curve448.Signing.PublicKey;
}

uint64_t sub_1A5BF9E74()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A5BF9E98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  sub_1A5C41BF4();
  sub_1A5BEE468(v2, v3);
  swift_retain();
  return a1;
}

uint64_t sub_1A5BF9EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BF9BA0(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1A5BF9EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A5BF9F44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1A5BF9F80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE800100;
  if (!qword_1EE800100)
  {
    v1 = sub_1A5C419E4();
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB02D0], v1);
    atomic_store(result, (unint64_t *)&qword_1EE800100);
  }
  return result;
}

uint64_t sub_1A5BF9FC8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_1A5BF9FE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1A5BF9BF4(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_1A5BF9FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1A5BF9A68((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1A5BFA058, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1A5BFA058@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A5BF9B18(a1, a2);
}

unint64_t sub_1A5BFA074()
{
  unint64_t result;

  result = qword_1EE801368;
  if (!qword_1EE801368)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for ChaChaPoly.Nonce, &type metadata for ChaChaPoly.Nonce);
    atomic_store(result, (unint64_t *)&qword_1EE801368);
  }
  return result;
}

uint64_t Curve448.Signing.PublicKey.isValidSignature<A, B>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  return sub_1A5C089E0(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t Curve448.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C09098(a1, a2, a3);
}

uint64_t KEM.EncapsulationResult.sharedSecret.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t KEM.EncapsulationResult.encapsulated.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A5BEE468(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

_QWORD *KEM.EncapsulationResult.init(sharedSecret:encapsulated:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = *result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

ValueMetadata *type metadata accessor for KEM()
{
  return &type metadata for KEM;
}

uint64_t destroy for KEM.EncapsulationResult(uint64_t a1)
{
  swift_release();
  return sub_1A5BEFF90(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *_s9CryptoKit3KEMO19EncapsulationResultVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  swift_retain();
  sub_1A5BEE468(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for KEM.EncapsulationResult(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v5 = a2[1];
  v4 = a2[2];
  sub_1A5BEE468(v5, v4);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_1A5BEFF90(v6, v7);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for KEM.EncapsulationResult(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_release();
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1A5BEFF90(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KEM.EncapsulationResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KEM.EncapsulationResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KEM.EncapsulationResult()
{
  return &type metadata for KEM.EncapsulationResult;
}

uint64_t dispatch thunk of KEMPublicKey.encapsulate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static KEMPrivateKey.generate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of KEMPrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of KEMPrivateKey.publicKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unint64_t HPKE.KEM.value.getter()
{
  _BYTE *v0;

  return 0x20001200110010uLL >> (16 * *v0);
}

unint64_t HPKE.KEM.nEnc.getter()
{
  _BYTE *v0;

  return 0x20008500610041uLL >> (16 * *v0);
}

BOOL static HPKE.KEM.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.KEM.hash(into:)()
{
  return sub_1A5C41F18();
}

void *static HPKE.KEM.allCases.getter()
{
  return &unk_1E4F75D38;
}

uint64_t HPKE.KEM.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

void sub_1A5BFA450(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4F75D60;
}

unint64_t sub_1A5BFA464()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE801370;
  if (!qword_1EE801370)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE801378);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE801370);
  }
  return result;
}

unint64_t sub_1A5BFA4B4()
{
  unint64_t result;

  result = qword_1EE801380;
  if (!qword_1EE801380)
  {
    result = MEMORY[0x1A85B3FE0]("Y_3?8d", &type metadata for HPKE.KEM);
    atomic_store(result, (unint64_t *)&qword_1EE801380);
  }
  return result;
}

uint64_t _s3KEMOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s3KEMOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A5BFA5D4 + 4 * byte_1A5C433C1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A5BFA608 + 4 * asc_1A5C433BC[v4]))();
}

uint64_t sub_1A5BFA608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5BFA610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5BFA618);
  return result;
}

uint64_t sub_1A5BFA624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5BFA62CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A5BFA630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5BFA638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.KEM()
{
  return &type metadata for HPKE.KEM;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoTokenKitError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CryptoTokenKitError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1A5BFA6B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A5BFA6D4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenKitError()
{
  return &type metadata for CryptoTokenKitError;
}

_BYTE *HPKE.Ciphersuite.init(kem:kdf:aead:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, char *a3@<X2>, _BYTE *a4@<X8>)
{
  char v4;
  char v5;

  v4 = *a2;
  v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

void static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.P521_SHA512_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 514;
  *(_BYTE *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.Curve25519_SHA256_ChachaPoly.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 3;
  *(_BYTE *)(a1 + 2) = 2;
}

uint64_t sub_1A5BFA77C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(1162563656, 0xE400000000000000);
  qword_1EE801388 = result;
  unk_1EE801390 = v1;
  return result;
}

void HPKE.Ciphersuite.kem.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void HPKE.Ciphersuite.kdf.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void HPKE.Ciphersuite.aead.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t _s11CiphersuiteVwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      v2 = a1[3];
      if (a1[3])
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
    }
    else
    {
      v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
    }
  }
  v4 = a1[1];
  v5 = v4 >= 3;
  v6 = v4 - 3;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t _s11CiphersuiteVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554178) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFD)
    v3 = 0;
  if (a2 > 0xFD)
  {
    *(_WORD *)result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Ciphersuite()
{
  return &type metadata for HPKE.Ciphersuite;
}

uint64_t sub_1A5BFA8EC(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v9 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = sub_1A5BFC774(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v11 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  if (v11 >= v10 >> 1)
    v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 1, 1, v9);
  *((_QWORD *)v9 + 2) = v11 + 1;
  v9[v11 + 32] = 0;
  *a1 = v9;
  v12 = swift_unknownObjectRetain();
  sub_1A5C4157C(v12, a3, a4, a5);
  return swift_unknownObjectRelease();
}

uint64_t sub_1A5BFA9D4()
{
  uint64_t v0;

  return sub_1A5BFAFF0(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A5BFA9E0(uint64_t a1)
{
  uint64_t v1;

  return sub_1A5BFAF8C(a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A5BFA9EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  sub_1A5C41F00();
  v4 = v3 >> 1;
  result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }
  else
  {
    result = sub_1A5C41F18();
    v6 = __OFSUB__(v4, v2);
    v7 = v4 - v2;
    if (!v7)
      return sub_1A5C41F3C();
    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      v8 = v1 + v2;
      do
      {
        ++v8;
        sub_1A5C41F24();
        --v7;
      }
      while (v7);
      return sub_1A5C41F3C();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BFAA6C(uint64_t a1, uint64_t a2)
{
  return sub_1A5BFAB10(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1A5BFAA88()
{
  return sub_1A5C41DD4();
}

uint64_t sub_1A5BFAAA8()
{
  return sub_1A5BFAA88();
}

unint64_t sub_1A5BFAACC()
{
  unint64_t result;

  result = qword_1EE801398;
  if (!qword_1EE801398)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43514, &_s13ASN1BitStringVN);
    atomic_store(result, (unint64_t *)&qword_1EE801398);
  }
  return result;
}

uint64_t sub_1A5BFAB10(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5))
      goto LABEL_20;
    if (v7 != (a6 >> 1) - a5)
      return 0;
    if (!v7 || result + a2 == a4 + a5 || v6 == a2)
      return 1;
    if (v6 <= a2)
      goto LABEL_22;
    v9 = a2 + 1;
    v10 = *(unsigned __int8 *)(result + a2);
    if (v6 == a2)
      return 1;
    v11 = a5;
    if (v8 == a5)
      return 0;
    while (v11 >= a5 && v11 < v8)
    {
      if (v10 != *(unsigned __int8 *)(a4 + v11))
        return 0;
      if (v6 == v9)
        return 1;
      if (v9 >= v6)
        goto LABEL_21;
      v10 = *(unsigned __int8 *)(result + v9++);
      if (v8 == ++v11)
        return 0;
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFABE4(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v8 = a5;
  v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5))
    goto LABEL_34;
  if (v7 != (a6 >> 1) - a5)
  {
    v13 = 0;
    return v13 & 1;
  }
  if (!v7)
    goto LABEL_11;
  v11 = result;
  v12 = (unsigned __int8 *)(result + 48 * a2);
  if (v12 == (unsigned __int8 *)(a4 + 48 * a5) || v6 == a2)
    goto LABEL_11;
  if (v6 <= a2)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  v14 = *v12;
  v15 = (_QWORD *)(result + 48 * a2);
  v17 = v15[4];
  v16 = v15[5];
  v18 = v15[2];
  v35 = a2 + 1;
  v37 = v15[3];
  v38 = v15[1];
  result = swift_unknownObjectRetain();
  v19 = v35;
  if (v18 == 1)
  {
LABEL_11:
    v13 = 1;
    return v13 & 1;
  }
  v20 = 0;
  v36 = a4 + 48 * v8;
  v32 = v11 + 48 * v19;
  v33 = v9;
  v21 = v8;
  while (1)
  {
    if (v9 == v21)
    {
      sub_1A5BFB078(v14, v38, v18);
      v29 = 0;
      v30 = 0;
      v31 = 1;
      goto LABEL_31;
    }
    if (v21 < v8 || v21 >= v9)
      goto LABEL_35;
    v22 = (_QWORD *)(v36 + v20);
    if (*(unsigned __int8 *)(v36 + v20) != v14 || v38 != v22[1])
    {
      v29 = v14;
      v30 = v38;
      v31 = v18;
LABEL_31:
      sub_1A5BFB078(v29, v30, v31);
      v13 = 0;
      return v13 & 1;
    }
    v23 = v22[2];
    if (!v18)
      break;
    if (!v23)
      goto LABEL_32;
    v34 = v18;
    v24 = v20;
    v13 = sub_1A5BFAB10(v37, v17, v16, v22[3], v22[4], v22[5]);
    result = sub_1A5BFB078(v14, v38, v34);
    if ((v13 & 1) == 0 || v6 == v19)
      return v13 & 1;
LABEL_26:
    if (v19 >= v6)
      goto LABEL_36;
    v25 = v6;
    v26 = v8;
    v27 = v24 + 48;
    ++v19;
    ++v21;
    v28 = v32 + v24;
    v14 = *(unsigned __int8 *)(v32 + v24);
    v17 = *(_QWORD *)(v32 + v24 + 32);
    v16 = *(_QWORD *)(v32 + v24 + 40);
    v18 = *(_QWORD *)(v32 + v24 + 16);
    v37 = *(_QWORD *)(v28 + 24);
    v38 = *(_QWORD *)(v28 + 8);
    result = swift_unknownObjectRetain();
    v13 = 1;
    v20 = v27;
    v8 = v26;
    v6 = v25;
    v9 = v33;
    if (v18 == 1)
      return v13 & 1;
  }
  if (!v23)
  {
    v24 = v20;
    result = sub_1A5BFB078(v14, v38, 0);
    if (v6 == v19)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_32:
  swift_unknownObjectRelease();
  v13 = 0;
  return v13 & 1;
}

uint64_t sub_1A5BFAE94(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t result;
  char *v4;
  char v5;
  _BYTE v6[48];
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;
  char v10;

  if (*a1 != a2)
  {
    sub_1A5BF6798();
    swift_allocError();
    v5 = 1;
    goto LABEL_9;
  }
  sub_1A5BFB08C((uint64_t)(a1 + 8), (uint64_t)v6);
  result = sub_1A5BFB08C((uint64_t)v6, (uint64_t)v7);
  if ((v10 & 1) != 0)
  {
    if (v8 != v9 >> 1)
    {
      if (v8 >= (uint64_t)(v9 >> 1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      if (!*(_BYTE *)(v7[1] + v8))
      {
        if (!__OFSUB__(v9 >> 1, v8))
          return v7[0];
        goto LABEL_12;
      }
    }
    sub_1A5BF6798();
    swift_allocError();
    v5 = 3;
LABEL_9:
    *v4 = v5;
    swift_willThrow();
    return sub_1A5BF67DC((uint64_t)a1);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFAF8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4 >> 1;
  result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_8;
  }
  result = sub_1A5C41F18();
  v8 = __OFSUB__(v4, a3);
  v9 = v4 - a3;
  if (!v9)
    return result;
  if ((v9 < 0) ^ v8 | (v9 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = a2 + a3;
  do
  {
    ++v10;
    result = sub_1A5C41F24();
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1A5BFAFF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  sub_1A5C41F00();
  v6 = a3 >> 1;
  result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
  }
  else
  {
    result = sub_1A5C41F18();
    v8 = __OFSUB__(v6, a2);
    v9 = v6 - a2;
    if (!v9)
      return sub_1A5C41F3C();
    if (!((v9 < 0) ^ v8 | (v9 == 0)))
    {
      v10 = a1 + a2;
      do
      {
        ++v10;
        sub_1A5C41F24();
        --v9;
      }
      while (v9);
      return sub_1A5C41F3C();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BFB078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t sub_1A5BFB08C(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t _s7ASN1AnyVwxx()
{
  return swift_unknownObjectRelease();
}

uint64_t _s7ASN1AnyVwcp(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *_s7ASN1AnyVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *_s7ASN1AnyVwta(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t _s7ASN1AnyVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7ASN1AnyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13ASN1BitStringVMa()
{
  return &_s13ASN1BitStringVN;
}

uint64_t static HMAC.isValidAuthenticationCode(_:authenticating:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD v15[2];

  v9 = *a4;
  v15[0] = a2;
  v15[1] = a3;
  v14 = v9;
  v10 = type metadata accessor for HashedAuthenticationCode(0, a5, a6, (uint64_t)a4);
  v11 = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, v10);
  v12 = sub_1A5BF2A88();
  return sub_1A5BFB2D8(a1, (uint64_t)v15, &v14, a5, v10, MEMORY[0x1E0DEAC20], a6, v11, v12) & 1;
}

uint64_t sub_1A5BFB2D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a5;
  v28 = a8;
  v25 = a6;
  v26 = a1;
  v24 = a9;
  v13 = type metadata accessor for HashedAuthenticationCode(0, a4, a7, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v24 - v15;
  v18 = type metadata accessor for HMAC(0, a4, a7, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v24 - v20;
  v29 = *a3;
  swift_retain();
  HMAC.init(key:)(&v29, a4, a7);
  HMAC.update<A>(data:)(a2, v18, v25, v24);
  HMAC.finalize()(v18, v16);
  v22 = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, v13);
  LOBYTE(a2) = sub_1A5C28A38(v26, v16, v27, v13, v28, v22);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return a2 & 1;
}

uint64_t type metadata accessor for HashedAuthenticationCode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HashedAuthenticationCode);
}

uint64_t HMAC.init(key:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  size_t v21;
  char *v22;
  __int128 v23[2];
  uint64_t v24;
  _QWORD v25[3];
  ValueMetadata *v26;
  unint64_t v27;

  v5 = *a1;
  v6 = (unint64_t *)(*a1 + 16);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  if (v7 == v8(a2, a3))
  {
    v26 = &type metadata for SymmetricKey;
    v27 = sub_1A5BF4054();
    v25[0] = v5;
    goto LABEL_18;
  }
  v10 = *v6;
  v11 = a2;
  if (v8(a2, a3) >= (uint64_t)v10)
  {
    v16 = v8(a2, a3);
    if ((v16 & 0x8000000000000000) == 0)
    {
      v10 = v16;
      if (v16)
      {
        v11 = sub_1A5C41C00();
        *(_QWORD *)(v11 + 16) = v10;
        bzero((void *)(v11 + 32), v10);
      }
      else
      {
        v11 = MEMORY[0x1E0DEE9D8];
        v10 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      }
      v13 = *(_QWORD *)(v5 + 16);
      if (v10 >= v13)
      {
        if (v10 <= *(_QWORD *)(v11 + 24) >> 1)
        {
          if (!v13)
          {
LABEL_17:
            swift_release();
            v26 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
            v27 = sub_1A5BEC08C((unint64_t *)&qword_1ECF979B0, &qword_1ECF979A8, MEMORY[0x1E0CB1B08]);
            v25[0] = v11;
            goto LABEL_18;
          }
LABEL_16:
          memcpy((void *)(v11 + 32), (const void *)(v5 + 32), v13);
          goto LABEL_17;
        }
LABEL_22:
        v21 = v13;
        v22 = sub_1A5BFC774((char *)1, v10, 1, (char *)v11);
        v13 = v21;
        v11 = (uint64_t)v22;
        if (!v21)
          goto LABEL_17;
        goto LABEL_16;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v12 = v8(a2, a3);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v14 = v12;
  if (v12)
  {
    v15 = sub_1A5C41C00();
    *(_QWORD *)(v15 + 16) = v14;
    bzero((void *)(v15 + 32), v14);
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v24 = v15;
  sub_1A5BFB7C8(v5 + 32, v5 + 32 + *(_QWORD *)(v5 + 16), (uint64_t)&v24, a2, a3);
  swift_release();
  sub_1A5BF9FC8(v23, (uint64_t)v25);
  swift_bridgeObjectRelease();
LABEL_18:
  v17 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
  type metadata accessor for HMAC(0, a2, a3, v9);
  v17(a2, a3);
  __swift_project_boxed_opaque_existential_1(v25, (uint64_t)v26);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  sub_1A5C418D0();
  v19 = sub_1A5BEC08C((unint64_t *)&qword_1ECF97998, &qword_1ECF979A8, MEMORY[0x1E0CB1B00]);
  HashFunction.update<A>(data:)((uint64_t)v23, a2, v18, a3, v19);
  swift_bridgeObjectRelease();
  v17(a2, a3);
  __swift_project_boxed_opaque_existential_1(v25, (uint64_t)v26);
  sub_1A5C418D0();
  HashFunction.update<A>(data:)((uint64_t)v23, a2, v18, a3, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A5BFB7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[16];
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = &v15[-v12];
  static HashFunction.hash(bufferPointer:)(a1, a2, a4, a5);
  v16 = a3;
  swift_getAssociatedConformanceWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97788);
  sub_1A5C418D0();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t sub_1A5BFB8FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  const void *v6;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  char *v10;

  if (result)
  {
    v6 = (const void *)result;
    v8 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v8 = sub_1A5BFC774(0, *((_QWORD *)v8 + 2), 0, v8);
    *a3 = v8;
    memcpy(v8 + 32, v6, a2 - (_QWORD)v6);
    v10 = *a3;
    a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    a4[4] = (char *)sub_1A5BEC08C((unint64_t *)&qword_1ECF979B0, &qword_1ECF979A8, MEMORY[0x1E0CB1B08]);
    *a4 = v10;
    return sub_1A5C41BF4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1A5BFB9C4@<X0>(char *result@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!result)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    goto LABEL_10;
  }
  v4 = result;
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = a2 - result;
  if (a2 == result)
  {
LABEL_10:
    *a3 = v5;
    return result;
  }
  v11 = MEMORY[0x1E0DEE9D8];
  result = sub_1A5BFCCA4(0, v6 & ~(v6 >> 63), 0);
  if (v6 >= 1)
  {
    v5 = v11;
    v7 = *(_QWORD *)(v11 + 16);
    do
    {
      v9 = *v4++;
      v8 = v9;
      v12 = v5;
      v10 = *(_QWORD *)(v5 + 24);
      if (v7 >= v10 >> 1)
      {
        result = sub_1A5BFCCA4((char *)(v10 > 1), v7 + 1, 1);
        v5 = v12;
      }
      *(_QWORD *)(v5 + 16) = v7 + 1;
      *(_BYTE *)(v5 + v7++ + 32) = v8 ^ 0x36;
      --v6;
    }
    while (v6);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

char *sub_1A5BFBABC@<X0>(char *result@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!result)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    goto LABEL_10;
  }
  v4 = result;
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = a2 - result;
  if (a2 == result)
  {
LABEL_10:
    *a3 = v5;
    return result;
  }
  v11 = MEMORY[0x1E0DEE9D8];
  result = sub_1A5BFCCA4(0, v6 & ~(v6 >> 63), 0);
  if (v6 >= 1)
  {
    v5 = v11;
    v7 = *(_QWORD *)(v11 + 16);
    do
    {
      v9 = *v4++;
      v8 = v9;
      v12 = v5;
      v10 = *(_QWORD *)(v5 + 24);
      if (v7 >= v10 >> 1)
      {
        result = sub_1A5BFCCA4((char *)(v10 > 1), v7 + 1, 1);
        v5 = v12;
      }
      *(_QWORD *)(v5 + 16) = v7 + 1;
      *(_BYTE *)(v5 + v7++ + 32) = v8 ^ 0x5C;
      --v6;
    }
    while (v6);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t static HMAC.authenticationCode<A>(for:using:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;

  v14 = type metadata accessor for HMAC(0, a3, a5, a4);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v19 - v16;
  v20 = *a2;
  swift_retain();
  HMAC.init(key:)(&v20, a3, a5);
  HMAC.update<A>(data:)(a1, v14, a4, a6);
  HMAC.finalize()(v14, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t HMAC.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v14[-v10];
  sub_1A5C41828();
  v12 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = a3;
  v17 = v12;
  v18 = a4;
  v19 = v4;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t HMAC.finalize()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v20 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v20 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t))(v7 + 48))(v3, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v6, v2, v3);
  v22 = v3;
  v23 = v7;
  v24 = v6;
  swift_getAssociatedConformanceWitness();
  sub_1A5C418D0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, AssociatedTypeWitness);
  v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v18(v12, v15, AssociatedTypeWitness);
  v18(v20, v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v3);
}

uint64_t static HMAC.isValidAuthenticationCode<A>(_:authenticating:using:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *a3;
  v13 = type metadata accessor for HashedAuthenticationCode(0, a4, a6, a4);
  v14 = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, v13);
  return sub_1A5BFB2D8(a1, a2, &v16, a4, v13, a5, a6, v14, a7) & 1;
}

uint64_t static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;

  v10 = *a3;
  return sub_1A5BFB2D8(a1, a2, &v10, a4, a5, a6, a7, a8, a9) & 1;
}

uint64_t sub_1A5BFC05C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5BFC158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 40))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_1A5BFC184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x1E0C80A78]();
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v12 + 40))(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a4);
}

uint64_t HashedAuthenticationCode.byteCount.getter()
{
  return sub_1A5BFD0EC();
}

uint64_t HashedAuthenticationCode.description.getter()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v4 = (char *)&v10 - v3;
  v13 = 0;
  v14 = 0xE000000000000000;
  sub_1A5C41E10();
  swift_bridgeObjectRelease();
  v13 = 0x7469772043414D48;
  v14 = 0xEA00000000002068;
  sub_1A5C41F48();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  sub_1A5C41B04();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  result = sub_1A5C41C0C();
  v6 = *(_QWORD *)(result + 16);
  if (v6 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = 2 * v6;
  if (2 * v6 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v8 = result;
  if (v6)
  {
    v9 = sub_1A5C41C00();
    *(_QWORD *)(v9 + 16) = v7;
    bzero((void *)(v9 + 32), v7);
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v11 = 0;
  v12 = v9;
  sub_1A5C41BF4();
  sub_1A5BFCFA0(v8, &v12, &v11);
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t HashedAuthenticationCode.withUnsafeBytes<A>(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t HashedAuthenticationCode.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C41A44();
}

uint64_t HashedAuthenticationCode.hashValue.getter()
{
  sub_1A5C41F00();
  HashedAuthenticationCode.hash(into:)();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5BFC5E8()
{
  return sub_1A5BFD0EC();
}

uint64_t sub_1A5BFC5FC()
{
  sub_1A5C41F00();
  HashedAuthenticationCode.hash(into:)();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5BFC63C()
{
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A5BFC660@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, a1);
  v5 = MessageAuthenticationCode.makeIterator()();
  v7 = v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_1A5BFC6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = sub_1A5BFCCC0(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_1A5BFC71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, a3);
  return static MessageAuthenticationCode.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for HMAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HMAC);
}

char *sub_1A5BFC774(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A5BFC85C()
{
  return sub_1A5BFC05C();
}

uint64_t sub_1A5BFC87C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A5BFC184(a1, a2, v2[4], v2[2], v2[3]);
}

char *sub_1A5BFC898(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A5BFC8B0(a1, a2, a3, a4, &qword_1ECF977C8);
}

char *sub_1A5BFC8A4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1A5BFC8B0(a1, a2, a3, a4, &qword_1ECF977D0);
}

char *sub_1A5BFC8B0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1A5BFC9A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE8013A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5BFCAA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF977D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A5BFCBBC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1A5BFCCA4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A5BFCBBC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_1A5BFCCC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v12;
  unsigned __int8 *v13;
  char v14;
  unsigned int v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v6 = (a4 >> 1) - a3;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) > a3)
    {
      result = swift_unknownObjectRetain();
      v12 = *a6;
      v13 = (unsigned __int8 *)(a2 + a3);
      while (v12 + 0x4000000000000000 >= 0)
      {
        v15 = *v13++;
        v14 = v15;
        v16 = (v15 >> 4) + 87;
        v17 = (v15 >> 4) | 0x30;
        if (v15 <= 0x9F)
          v18 = v17;
        else
          v18 = v16;
        v19 = *a5;
        result = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v19;
        if ((result & 1) != 0)
        {
          v20 = 2 * v12;
          if (2 * v12 < 0)
            goto LABEL_20;
        }
        else
        {
          result = (uint64_t)sub_1A5C11888(v19);
          v19 = result;
          v20 = 2 * v12;
          if (2 * v12 < 0)
          {
LABEL_20:
            __break(1u);
            return swift_unknownObjectRelease();
          }
        }
        v21 = *(_QWORD *)(v19 + 16);
        if (v20 >= v21)
          goto LABEL_24;
        *(_BYTE *)(v19 + 32 + v20) = v18;
        v22 = *a6;
        if (*a6 + 0x4000000000000000 < 0)
          goto LABEL_25;
        if (v22 < 0)
          goto LABEL_26;
        v23 = (2 * v22) | 1;
        if (v23 >= (uint64_t)v21)
          goto LABEL_26;
        if ((v14 & 0xFu) <= 9)
          v24 = v14 & 0xF | 0x30;
        else
          v24 = (v14 & 0xF) + 87;
        *(_BYTE *)(v19 + 32 + v23) = v24;
        *a5 = v19;
        v12 = v22 + 1;
        *a6 = v22 + 1;
        if (!--v6)
          return swift_unknownObjectRelease();
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5BFCE18(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v6 = (_QWORD *)(a1 + 16);
  swift_retain();
  result = swift_beginAccess();
  v20 = a1;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = 32;
  while (1)
  {
    if (v9 - 32 == v8)
      return swift_release();
    v10 = v9 - 31;
    if (__OFADD__(v9 - 32, 1))
      break;
    v11 = *a3;
    if (*a3 + 0x4000000000000000 < 0)
      goto LABEL_24;
    v12 = *(unsigned __int8 *)(v20 + v9);
    if (v12 <= 0x9F)
      v13 = (*(_BYTE *)(v20 + v9) >> 4) | 0x30;
    else
      v13 = (*(_BYTE *)(v20 + v9) >> 4) + 87;
    v14 = *a2;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((result & 1) != 0)
    {
      v15 = 2 * v11;
      if (2 * v11 < 0)
        goto LABEL_21;
    }
    else
    {
      result = (uint64_t)sub_1A5C11888(v14);
      v14 = result;
      v15 = 2 * v11;
      if (2 * v11 < 0)
      {
LABEL_21:
        __break(1u);
        return swift_release();
      }
    }
    v16 = *(_QWORD *)(v14 + 16);
    if (v15 >= v16)
      goto LABEL_25;
    *(_BYTE *)(v14 + 32 + v15) = v13;
    v17 = *a3;
    if (*a3 + 0x4000000000000000 < 0)
      goto LABEL_26;
    if (v17 < 0)
      goto LABEL_27;
    v18 = (2 * v17) | 1;
    if (v18 >= (uint64_t)v16)
      goto LABEL_27;
    if ((v12 & 0xF) <= 9)
      v19 = v12 & 0xF | 0x30;
    else
      v19 = (v12 & 0xF) + 87;
    *(_BYTE *)(v14 + 32 + v18) = v19;
    *a2 = v14;
    *a3 = v17 + 1;
    v8 = *v6;
    ++v9;
    if (__OFSUB__(*v6, v10))
      goto LABEL_28;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFCFA0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *(_QWORD *)(result + 16);
  if (v16)
  {
    v5 = result;
    result = sub_1A5C41BF4();
    v6 = 0;
    v7 = *a3;
    while (v7 + 0x4000000000000000 >= 0)
    {
      v8 = *(unsigned __int8 *)(v5 + v6 + 32);
      if (v8 <= 0x9F)
        v9 = (*(_BYTE *)(v5 + v6 + 32) >> 4) | 0x30;
      else
        v9 = (*(_BYTE *)(v5 + v6 + 32) >> 4) + 87;
      v10 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v10;
      if ((result & 1) != 0)
      {
        v11 = 2 * v7;
        if (2 * v7 < 0)
          goto LABEL_19;
      }
      else
      {
        result = (uint64_t)sub_1A5C11888(v10);
        v10 = result;
        v11 = 2 * v7;
        if (2 * v7 < 0)
        {
LABEL_19:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      v12 = *(_QWORD *)(v10 + 16);
      if (v11 >= v12)
        goto LABEL_23;
      *(_BYTE *)(v10 + 32 + v11) = v9;
      v13 = *a3;
      if (*a3 + 0x4000000000000000 < 0)
        goto LABEL_24;
      if (v13 < 0)
        goto LABEL_25;
      v14 = (2 * v13) | 1;
      if (v14 >= (uint64_t)v12)
        goto LABEL_25;
      ++v6;
      if ((v8 & 0xF) <= 9)
        v15 = v8 & 0xF | 0x30;
      else
        v15 = (v8 & 0xF) + 87;
      *(_BYTE *)(v10 + 32 + v14) = v15;
      *a2 = v10;
      v7 = v13 + 1;
      *a3 = v13 + 1;
      if (v16 == v6)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5BFD0EC()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

void sub_1A5BFD168()
{
  JUMPOUT(0x1A85B3FE0);
}

uint64_t sub_1A5BFD178(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>);
  a1[2] = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, a2);
  a1[3] = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, a2);
  result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, a2);
  a1[4] = result;
  return result;
}

void sub_1A5BFD1E4()
{
  JUMPOUT(0x1A85B3FE0);
}

uint64_t sub_1A5BFD1F4()
{
  return sub_1A5BEC08C((unint64_t *)&qword_1ECF97888, &qword_1ECF979C0, MEMORY[0x1E0DEC908]);
}

uint64_t sub_1A5BFD220()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A5BFD28C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t sub_1A5BFD340(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

unint64_t sub_1A5BFD3A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_1A5BFD414(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_1A5BFD480(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_1A5BFD4EC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t sub_1A5BFD558(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A5BFD618 + 4 * byte_1A5C435C0[(v7 - 1)]))();
}

void sub_1A5BFD668(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1A5BFD828()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A5BFD8A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1A5BFD938(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_1A5BFD984(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A5BFD9DC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A5BFDA34(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A5BFDA8C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1A5BFDAE4(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void sub_1A5BFDC24(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1A5BFDDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  v7 = type metadata accessor for HMAC(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 + 24) + 40))(a1, a2, *(_QWORD *)(v7 + 16));
}

uint64_t sub_1A5BFDE58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;

  return sub_1A5BFB8FC(a1, a2, *(char ***)(v3 + 16), a3);
}

size_t sub_1A5BFDE70(int64_t a1)
{
  const void **v1;
  const void **v2;
  char *v4;
  size_t result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = (char *)*v2;
  result = _swift_stdlib_malloc_size(*v2);
  if ((uint64_t)(result - 32) < a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (!HIDWORD(a1))
    {
      if ((_DWORD)a1)
      {
        v6 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
        v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
        v8 = v7 | HIWORD(v7);
        if (v8 == -1)
          v9 = 0xFFFFFFFFLL;
        else
          v9 = (v8 + 1);
      }
      else
      {
        v9 = 1;
      }
      type metadata accessor for SecureBytes.Backing();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = v9;
      result = swift_beginAccess();
      v11 = *((_QWORD *)v4 + 2);
      if ((v11 & 0x8000000000000000) == 0)
      {
        sub_1A5BFEB14(v4, 0, v11);
        result = swift_release();
        *v2 = (const void *)v10;
        return result;
      }
LABEL_14:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1A5BFDF58(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_14;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_14:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    result = swift_beginAccess();
    v8 = *(_QWORD *)(a4 + 16);
    if (v8)
    {
      *a2 = *(_BYTE *)(a4 + 32);
      v9 = v6 - 1;
      if (v6 != 1)
      {
        v10 = 0;
        while (v9 != v10)
        {
          if (__OFSUB__(v8, v10 + 1))
            goto LABEL_16;
          if (v8 - 1 == v10)
            goto LABEL_13;
          a2[v10 + 1] = *(_BYTE *)(a4 + 33 + v10);
          if (v9 == ++v10)
            goto LABEL_14;
        }
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      v6 = v8;
    }
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFE02C()
{
  uint64_t result;

  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  off_1ECF977E8 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_1A5BFE05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  _DWORD v16[6];
  _QWORD v17[2];

  v7 = sub_1A5C19B98(a3, a1, a2);
  v9 = v8 + v7;
  v11 = v8 + v10;
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
  }
  v17[0] = v9;
  v17[1] = v11;
  swift_beginAccess();
  sub_1A5C2B844(a5 + 32, v17, v16);
  v12 = v16[0];
  if (v16[0])
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v15 = *a4;
    swift_beginAccess();
    *(_QWORD *)(v15 + 16) = 32;
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A5BFE180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _DWORD v14[6];
  _QWORD v15[2];

  v7 = sub_1A5C19B98(a3, a1, a2);
  v9 = v8 + v7;
  v11 = v8 + v10;
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
  }
  v15[0] = v9;
  v15[1] = v11;
  swift_beginAccess();
  result = sub_1A5C19950(a5 + 32, v15, v14);
  if (v14[0])
  {
    __break(1u);
  }
  else
  {
    v13 = *a4;
    swift_beginAccess();
    *(_QWORD *)(v13 + 16) = 56;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A5BFE25C(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD v20[2];
  uint64_t v21;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v19 = a3;
  v12 = (uint64_t)a1 + 32;
  v13 = (uint64_t)a1 + result;
  v14 = result - 32;
  result = sub_1A5BED098(0, a2, result - 32, v12, v13);
  if ((v15 & 1) != 0)
    v16 = v14;
  else
    v16 = result;
  if (v16 < 0)
    goto LABEL_10;
  v20[0] = v12;
  v20[1] = v12 + v16;
  v21 = 0;
  sub_1A5C00C04((uint64_t)v20, (uint64_t)&v21, a4, a5);
  if (!v5)
  {
    v17 = *v19;
    v18 = v21;
    swift_beginAccess();
    *(_QWORD *)(v17 + 16) = v18;
  }
  return sub_1A5BEFF90(a4, a5);
}

uint64_t sub_1A5BFE36C(const void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v6 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  v7 = (uint64_t)a1 + 32;
  v8 = (uint64_t)a1 + v6;
  v9 = v6 - 32;
  v10 = sub_1A5BED098(0, a2, v6 - 32, v7, v8);
  if ((v11 & 1) != 0)
    v12 = v9;
  else
    v12 = v10;
  if (v12 < 0)
    goto LABEL_10;
  if (!ccrng())
    goto LABEL_12;
  if (cccurve25519_make_priv())
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  v13 = *a3;
  result = swift_beginAccess();
  *(_QWORD *)(v13 + 16) = 32;
  return result;
}

size_t sub_1A5BFE468(const void *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  size_t result;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v14 = (uint64_t)a1 + 32;
  v15 = (uint64_t)a1 + result;
  v16 = result - 32;
  result = sub_1A5BED098(0, a2, result - 32, v14, v15);
  if ((v17 & 1) != 0)
    v18 = v16;
  else
    v18 = result;
  if ((v18 & 0x8000000000000000) != 0)
    goto LABEL_10;
  v22[0] = v14;
  v22[1] = v14 + v18;
  v21 = 0;
  result = (size_t)sub_1A5C00A7C(v22, &v21, a4 & 1, a5, a6);
  if (!v6)
  {
    v19 = *a3;
    v20 = v21;
    result = swift_beginAccess();
    *(_QWORD *)(v19 + 16) = v20;
  }
  return result;
}

uint64_t sub_1A5BFE54C(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v11 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
LABEL_12:
    __break(1u);
  }
  v12 = (uint64_t)a1 + 32;
  v13 = (uint64_t)a1 + v11;
  v14 = v11 - 32;
  v15 = sub_1A5BED098(0, a2, v11 - 32, v12, v13);
  if ((v16 & 1) != 0)
    v17 = v14;
  else
    v17 = v15;
  if (v17 < 0)
    goto LABEL_11;
  if (!ccrng())
    goto LABEL_12;
  v18 = ccecdh_compute_shared_secret();
  if (v18)
  {
    v19 = v18;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v20 = v19;
    *(_BYTE *)(v20 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v22 = *a3;
    result = swift_beginAccess();
    *(_QWORD *)(v22 + 16) = a7;
  }
  return result;
}

uint64_t sub_1A5BFE6A8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v12;

  v12 = &a1[_swift_stdlib_malloc_size(a1)];
  swift_retain();
  sub_1A5C41BF4();
  a6(a1 + 32, v12, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1A5BFE750(const void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v6 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }
  v7 = (uint64_t)a1 + 32;
  v8 = (uint64_t)a1 + v6;
  v9 = v6 - 32;
  v10 = sub_1A5BED098(0, a2, v6 - 32, v7, v8);
  if ((v11 & 1) != 0)
    v12 = v9;
  else
    v12 = v10;
  if (v12 < 0)
    goto LABEL_10;
  if (!ccrng())
    goto LABEL_12;
  if (cccurve448_make_priv())
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  v13 = *a3;
  result = swift_beginAccess();
  *(_QWORD *)(v13 + 16) = 56;
  return result;
}

uint64_t sub_1A5BFE84C(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD *, uint64_t *, uint64_t))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v12 = (uint64_t)a1 + 32;
  v13 = (uint64_t)a1 + result;
  v14 = result - 32;
  result = sub_1A5BED098(0, a2, result - 32, v12, v13);
  if ((v15 & 1) != 0)
    v16 = v14;
  else
    v16 = result;
  if (v16 < 0)
    goto LABEL_10;
  v19[0] = v12;
  v19[1] = v12 + v16;
  v20 = 0;
  result = a5(v19, &v20, a4);
  if (!v5)
  {
    v17 = *a3;
    v18 = v20;
    result = swift_beginAccess();
    *(_QWORD *)(v17 + 16) = v18;
  }
  return result;
}

uint64_t sub_1A5BFE924(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD **a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v14 = (uint64_t)a1 + 32;
    v15 = (uint64_t)a1 + result;
    v16 = result - 32;
    result = sub_1A5BED098(0, a2, result - 32, v14, v15);
    if ((v17 & 1) != 0)
      v18 = v16;
    else
      v18 = result;
    if ((v18 & 0x8000000000000000) == 0)
    {
      swift_retain();
      init_ccec_ctx_full();
      swift_beginAccess();
      sub_1A5C2A3D0(a5 + 32, a5 + 32 + *(_QWORD *)(a5 + 16), a6);
      v19 = *a3;
      swift_beginAccess();
      *(_QWORD *)(v19 + 16) = a7;
      return swift_release_n();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BFEA38(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v12 = (uint64_t)a1 + 32;
  v13 = (uint64_t)a1 + result;
  v14 = result - 32;
  result = sub_1A5BED098(0, a2, result - 32, v12, v13);
  if ((v15 & 1) != 0)
    v16 = v14;
  else
    v16 = result;
  if (v16 < 0)
    goto LABEL_10;
  result = a6();
  if (result)
  {
    cckem_full_ctx_init();
    result = cckem_generate_key();
    if (!(_DWORD)result)
    {
      v17 = *a3;
      result = swift_beginAccess();
      *(_QWORD *)(v17 + 16) = a5;
      return result;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

char *sub_1A5BFEB14(char *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  size_t v13;
  size_t v14;
  size_t v15;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v7 = result;
  result = (char *)_swift_stdlib_malloc_size(result);
  if ((uint64_t)(result - 32) < a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = _swift_stdlib_malloc_size(v4) - 32;
  v9 = v4 + 2;
  result = (char *)swift_beginAccess();
  v10 = v4[2];
  v11 = v8 - v10;
  if (__OFSUB__(v8, v10))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v12 = __OFSUB__(a3, a2);
  v13 = a3 - a2;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = __OFSUB__(v11, v13);
  v14 = v11 - v13;
  if (v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = (char *)_swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (char *)memmove((char *)v4 + v10 + 32, &v7[a2 + 32], v13);
  v15 = *v9 + v13;
  if (!__OFADD__(*v9, v13))
  {
    result = (char *)swift_beginAccess();
    *v9 = v15;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

size_t sub_1A5BFEC24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  size_t v3;
  size_t result;
  int64_t v5;
  size_t v6;
  BOOL v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = sub_1A5C41C54();
  v3 = _swift_stdlib_malloc_size(v1) - 32;
  result = swift_beginAccess();
  v5 = v1[2];
  v6 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = __OFSUB__(v6, v2);
  v8 = v6 - v2;
  if (v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = _swift_stdlib_malloc_size(v1);
  if ((uint64_t)(result - 32) < v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A5C41D50();
  v9 = v1[2];
  v7 = __OFADD__(v9, v2);
  v10 = v9 + v2;
  if (!v7)
  {
    v1[2] = v10;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFED10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1A5C17BC0(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

void sub_1A5BFED70(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1A5BFED78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *a1 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t (*sub_1A5BFEDBC(_BYTE *a1, _QWORD *a2))()
{
  _QWORD *v2;

  *a1 = *(_BYTE *)(*v2 + *a2 + 32);
  return nullsub_1;
}

uint64_t sub_1A5BFEDE4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *a1;
  v4 = a1[1];
  v6 = *v2;
  result = swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 16);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFEE5C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v5;
  }
  return result;
}

BOOL sub_1A5BFEEA8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 16) == 0;
}

uint64_t *sub_1A5BFEEF8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_1A5BFEF14(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_1A5BFEF30(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *sub_1A5BFEF4C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_1A5BFEF64(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_1A5BFEF7C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1A5BFEF88()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 16);
}

uint64_t sub_1A5BFEFC4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1A5C011F4(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1A5BFEFF8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1A5BFDF58(a1, a2, a3, *v3);
}

uint64_t sub_1A5BFF000@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1A5BFF01C(a1, a2, a3);
}

uint64_t sub_1A5BFF01C@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1A5BFFF6C(a1, a2, a3);
}

_QWORD *sub_1A5BFF040@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_1A5BFF058(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

_QWORD *sub_1A5BFF070@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    v6 = *v3;
    result = (_QWORD *)swift_beginAccess();
    if ((v5 & 0x8000000000000000) == 0 && *(_QWORD *)(v6 + 16) >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5BFF0DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  char v7;

  result = sub_1A5C0FE28(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_1A5BFF114(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 >= v4 && ((v4 | v3) & 0x8000000000000000) == 0 && v7 >= v3)
    return v4 - v3;
  __break(1u);
  return result;
}

_BYTE *sub_1A5BFF180(_BYTE *result, _QWORD *a2)
{
  _QWORD *v2;

  *(_BYTE *)(*v2 + *a2 + 32) = *result;
  return result;
}

uint64_t (*sub_1A5BFF198(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(*v2 + v3 + 32);
  return sub_1A5BFF1C4;
}

uint64_t sub_1A5BFF1C4(uint64_t result)
{
  *(_BYTE *)(**(_QWORD **)result + *(_QWORD *)(result + 8) + 32) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_1A5BFF1DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;

  sub_1A5C01054(v2, *a2, a2[1], *a1, a1[1], a1[2]);
  return swift_release();
}

void (*sub_1A5BFF214(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1A5BFF260(v4, *a2, a2[1]);
  return sub_1A5BF7A60;
}

void (*sub_1A5BFF260(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  void (*result)(uint64_t **);
  uint64_t v10;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  v8 = *v3;
  result = (void (*)(uint64_t **))swift_beginAccess();
  v10 = *(_QWORD *)(v8 + 16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a3)
  {
    *v7 = a2;
    v7[1] = a3;
    v7[2] = v8;
    swift_retain();
    return sub_1A5BFF304;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1A5BFF304(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1A5C01054((uint64_t *)(*a1)[8], v1[6], (*a1)[7], *v1, v1[1], v1[2]);
  swift_release();
  free(v1);
}

uint64_t sub_1A5BFF340@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A5C012CC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

_QWORD *sub_1A5BFF368(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *result;
  v4 = *a2;
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else if (*a2 != *result)
  {
    v5 = *v2 + 32;
    v6 = *(_BYTE *)(v5 + v3);
    *(_BYTE *)(v5 + v3) = *(_BYTE *)(v5 + v4);
    *(_BYTE *)(v5 + v4) = v6;
  }
  return result;
}

uint64_t sub_1A5BFF39C()
{
  return sub_1A5C41AB0();
}

uint64_t sub_1A5BFF3BC()
{
  return sub_1A5C41AA4();
}

uint64_t sub_1A5BFF3DC(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v4;
  const void **v5;
  _QWORD *v10;
  uint64_t result;
  int64_t v12;
  int64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  uint64_t v22;

  v5 = v4;
  v10 = (char *)*v4 + 16;
  result = swift_beginAccess();
  v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = *v10 - v12;
  if (__OFSUB__(*v10, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = sub_1A5C41C54();
  v14 = __OFADD__(v13, result);
  v15 = v13 + result;
  if (v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1)
        return sub_1A5BFF5A8(a1, a2, a3, a4);
      goto LABEL_26;
    }
  }
  if (v15 < 0)
    goto LABEL_22;
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v15)
  {
    v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    v18 = v17 | HIWORD(v17);
    if (v18 == -1)
      v19 = 0xFFFFFFFFLL;
    else
      v19 = (v18 + 1);
  }
  else
  {
    v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v19;
  if (a1 < 0)
    goto LABEL_24;
  v20 = (const void *)result;
  v21 = (char *)*v5;
  result = swift_beginAccess();
  v22 = *((_QWORD *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1A5BFEB14(v21, 0, a1);
  sub_1A5BFEC24();
  sub_1A5BFEB14((char *)*v5, a2, v22);
  *v5 = v20;
  return swift_release();
}

uint64_t sub_1A5BFF5A8(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t *v4;
  int64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t *v15;
  uint64_t result;
  int64_t v17;
  int64_t v18;
  BOOL v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v14);
  v15 = v5 + 2;
  result = swift_beginAccess();
  v17 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v27 = a2;
  v18 = *v15 - v17;
  if (__OFSUB__(*v15, v17))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = sub_1A5C41C54();
  v19 = __OFADD__(v18, result);
  v20 = v18 + result;
  if (v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = a1;
  v21 = _swift_stdlib_malloc_size(v5) - 32;
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  if (v21 < v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = sub_1A5C41C54();
  v22 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = v27;
  if (*v15 < v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1A5C002A4(v27, *v15, v22);
  sub_1A5C00358(a3, v26, a4);
  result = sub_1A5C41C54();
  v23 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19 = __OFADD__(*v15, v23);
  v24 = *v15 + v23;
  if (!v19)
  {
    *v15 = v24;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFF738(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  size_t v14;
  uint64_t v15;
  _BYTE v16[16];
  _QWORD *v17;
  char v18;
  unsigned __int8 v19;
  char v20;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = &v16[-v11];
  v17 = v3;
  result = sub_1A5C41B94();
  if (v18 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    sub_1A5C41B88();
    swift_getAssociatedConformanceWitness();
    sub_1A5C41D44();
    if ((v20 & 1) == 0)
    {
      v14 = v19;
      do
      {
        v15 = *v3;
        swift_beginAccess();
        sub_1A5C2D060(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 16), v14);
        sub_1A5C41D44();
        v14 = v19;
      }
      while (v20 != 1);
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1A5BFF908@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1ECF977F0 != -1)
    swift_once();
  *a1 = off_1ECF977E8;
  return swift_retain();
}

uint64_t sub_1A5BFF958(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1A5BFF3DC(*a1, a1[1], a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

_QWORD *sub_1A5BFF9AC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_1A5C01F58(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A5BFF9D4()
{
  return sub_1A5C41CB4();
}

uint64_t sub_1A5BFF9EC(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  size_t v3;

  v2 = *v1;
  v3 = *a1;
  swift_beginAccess();
  return sub_1A5C2D060(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 16), v3);
}

uint64_t sub_1A5BFFA44(uint64_t a1, uint64_t a2)
{
  sub_1A5BFF738(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_1A5BFFA80(unsigned __int8 *a1, int64_t *a2)
{
  return sub_1A5C2D060(*a2, *a2, *a1);
}

uint64_t sub_1A5BFFA90()
{
  return sub_1A5C41CA8();
}

uint64_t sub_1A5BFFAA8@<X0>(int64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  char v8;

  v4 = *a1;
  v5 = *v2;
  result = swift_beginAccess();
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= v4)
  {
    v8 = *(_BYTE *)(v5 + v4 + 32);
    result = sub_1A5C2FD8C(v4, v7);
    *a2 = v8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A5BFFB28(int64_t *a1)
{
  return sub_1A5C2FD8C(*a1, a1[1]);
}

void sub_1A5BFFB34(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t sub_1A5BFFB40()
{
  return 0;
}

int64_t sub_1A5BFFB48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = *(_BYTE *)(v3 + 32);
  result = sub_1A5C0FE28(0, 1, v5, v3);
  if ((v7 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      result = sub_1A5C2FD8C(0, result);
      *a1 = v6;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

int64_t sub_1A5BFFBD0(int64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (result)
  {
    v2 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = *v1;
      swift_beginAccess();
      result = sub_1A5C0FE28(0, v2, *(_QWORD *)(v3 + 16), v3);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) == 0)
        return sub_1A5C2FD8C(0, result);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1A5BFFC54(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;

  v2 = *v1;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    v3 = *(_QWORD *)(v2 + 16);
    if ((v3 & 0x8000000000000000) == 0)
      return sub_1A5C2FD8C(0, v3);
    __break(1u);
    goto LABEL_7;
  }
  swift_release();
  if (qword_1ECF977F0 != -1)
LABEL_7:
    swift_once();
  *v1 = (uint64_t)off_1ECF977E8;
  return swift_retain();
}

uint64_t sub_1A5BFFCF0(uint64_t (*a1)(char *))
{
  return sub_1A5BFFD04(a1);
}

uint64_t sub_1A5BFFD04(uint64_t (*a1)(char *))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  BOOL v9;
  int64_t v10;
  char v11;
  char v12;

  v4 = *v1;
  v5 = (_QWORD *)(*v1 + 16);
  swift_retain();
  result = swift_beginAccess();
  v7 = 0;
  v8 = v4 + 32;
  do
  {
    if (__OFSUB__(*v5, v7))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v7 == *v5)
      goto LABEL_9;
    v12 = *(_BYTE *)(v4 + v7 + 32);
    result = a1(&v12);
    if (v2)
      return swift_release();
    if ((result & 1) != 0)
    {
      result = swift_release();
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_14;
      }
      while (!__OFSUB__(*v5, v10))
      {
        if (*v5 == v10)
        {
          if (v10 < v7)
            goto LABEL_29;
          return sub_1A5C2FD8C(v7, v10);
        }
        v12 = *(_BYTE *)(v8 + v10);
        result = a1(&v12);
        if ((result & 1) == 0)
        {
          if (__OFSUB__(v10, v7))
            goto LABEL_28;
          if (v10 != v7)
          {
            v11 = *(_BYTE *)(v8 + v7);
            *(_BYTE *)(v8 + v7) = *(_BYTE *)(v8 + v10);
            *(_BYTE *)(v8 + v10) = v11;
          }
LABEL_14:
          v9 = __OFADD__(v7++, 1);
          if (v9)
            goto LABEL_27;
        }
        v9 = __OFADD__(v10++, 1);
        if (v9)
          goto LABEL_26;
      }
      goto LABEL_25;
    }
    v9 = __OFADD__(v7++, 1);
  }
  while (!v9);
  __break(1u);
LABEL_9:
  swift_release();
  v10 = *(_QWORD *)(v4 + 16);
  v7 = v10;
  return sub_1A5C2FD8C(v7, v10);
}

uint64_t sub_1A5BFFE88(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  return a1(a3 + 32, a3 + 32 + *(_QWORD *)(a3 + 16));
}

uint64_t sub_1A5BFFEFC(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;

  swift_beginAccess();
  return a1(v1 + 32, v1 + 32 + *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A5BFFF6C@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  result = a1(v3 + 32, *(_QWORD *)(v3 + 16));
  if (!v4)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1, a2);
  return result;
}

uint64_t sub_1A5C00004(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return sub_1A5BFFE88(a1, a2, *v2);
}

uint64_t sub_1A5C0001C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1A5C00028()
{
  return sub_1A5C41834();
}

uint64_t sub_1A5C0004C()
{
  return sub_1A5C41870();
}

uint64_t sub_1A5C00074()
{
  return sub_1A5C41858();
}

uint64_t sub_1A5C00084()
{
  return sub_1A5C4184C();
}

uint64_t sub_1A5C0009C()
{
  return sub_1A5C41840();
}

uint64_t sub_1A5C000B8()
{
  return sub_1A5C418DC();
}

uint64_t sub_1A5C000D0()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C00114()
{
  return sub_1A5C41F18();
}

uint64_t sub_1A5C0013C()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

_QWORD *sub_1A5C0017C(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 == *result);
  __break(1u);
  return result;
}

BOOL sub_1A5C00198(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1A5C001AC(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1A5C001C0(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1A5C001D4(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

_QWORD *sub_1A5C001E8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFSUB__(*result, *v2))
    __break(1u);
  else
    *a2 = *result - *v2;
  return result;
}

_QWORD *sub_1A5C00204@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, *result))
    __break(1u);
  else
    *a2 = *v2 + *result;
  return result;
}

_QWORD *sub_1A5C00220(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *result = *a4 + *a6;
    return 0;
  }
  return result;
}

uint64_t sub_1A5C00244()
{
  return type metadata accessor for SecureBytes.Backing();
}

uint64_t getEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SecureBytes()
{
  return &type metadata for SecureBytes;
}

size_t sub_1A5C002A4(size_t result, int64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  size_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v7 = result;
  result = _swift_stdlib_malloc_size(v4);
  v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = __OFADD__(a2, a3);
  v10 = a2 + a3;
  if (v9)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v10 < v8)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < 1 || (uint64_t)(result - 32) < a2)
    goto LABEL_13;
  result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) >= v10)
  {
    _swift_stdlib_malloc_size(v4);
    return (size_t)memmove(&v4[v8 + 32], &v4[v7 + 32], a2 - v7);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1A5C00358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;

  v4 = v3;
  v8 = *(_QWORD *)(a3 - 8);
  result = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  result = sub_1A5C41C54();
  v13 = a2 + result;
  if (__OFADD__(a2, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = _swift_stdlib_malloc_size(v4) - 32;
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  if (v14 < v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = sub_1A5C41C54();
  if (__OFADD__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + result >= a2)
  {
    _swift_stdlib_malloc_size(v4);
    return sub_1A5C41D50();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A5C0047C(uint64_t (*a1)(uint64_t, uint64_t))
{
  return sub_1A5BFFEFC(a1);
}

unint64_t sub_1A5C004A0()
{
  unint64_t result;

  result = qword_1EE8013A8;
  if (!qword_1EE8013A8)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C4384C, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_1EE8013A8);
  }
  return result;
}

unint64_t sub_1A5C004E8()
{
  unint64_t result;

  result = qword_1EE8013B0;
  if (!qword_1EE8013B0)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43894, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_1EE8013B0);
  }
  return result;
}

unint64_t sub_1A5C00530()
{
  unint64_t result;

  result = qword_1ECF97820;
  if (!qword_1ECF97820)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43CAC, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF97820);
  }
  return result;
}

unint64_t sub_1A5C00578()
{
  unint64_t result;

  result = qword_1EE8013B8;
  if (!qword_1EE8013B8)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C439F4, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1EE8013B8);
  }
  return result;
}

unint64_t sub_1A5C005C0()
{
  unint64_t result;

  result = qword_1ECF97840;
  if (!qword_1ECF97840)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C4393C, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF97840);
  }
  return result;
}

unint64_t sub_1A5C00608()
{
  unint64_t result;

  result = qword_1ECF97838;
  if (!qword_1ECF97838)
  {
    result = MEMORY[0x1A85B3FE0]("-\\3?(^", &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF97838);
  }
  return result;
}

uint64_t sub_1A5C0064C()
{
  return sub_1A5C00A14(&qword_1EE8013C0, (uint64_t (*)(void))sub_1A5C005C0, MEMORY[0x1E0DEDE50]);
}

uint64_t sub_1A5C00678()
{
  return sub_1A5C00A14(&qword_1EE8013C8, (uint64_t (*)(void))sub_1A5C00578, MEMORY[0x1E0DEDE30]);
}

unint64_t sub_1A5C006A8()
{
  unint64_t result;

  result = qword_1ECF97828;
  if (!qword_1ECF97828)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43AB4, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF97828);
  }
  return result;
}

uint64_t sub_1A5C006EC()
{
  return sub_1A5C008AC(&qword_1EE8013D0, MEMORY[0x1E0DEB8B8]);
}

unint64_t sub_1A5C00710()
{
  unint64_t result;

  result = qword_1EE8013E0;
  if (!qword_1EE8013E0)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C437F4, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_1EE8013E0);
  }
  return result;
}

uint64_t sub_1A5C00754()
{
  return sub_1A5C00A14(&qword_1EE8013E8, (uint64_t (*)(void))sub_1A5C00780, MEMORY[0x1E0DEDE40]);
}

unint64_t sub_1A5C00780()
{
  unint64_t result;

  result = qword_1ECF97830;
  if (!qword_1ECF97830)
  {
    result = MEMORY[0x1A85B3FE0]("u\\3?@_", &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF97830);
  }
  return result;
}

uint64_t sub_1A5C007C4()
{
  return sub_1A5C008AC(&qword_1EE8013F0, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1A5C007E8()
{
  return sub_1A5C00A14(&qword_1EE8013F8, (uint64_t (*)(void))sub_1A5C006A8, MEMORY[0x1E0DEDE28]);
}

uint64_t sub_1A5C00814()
{
  return sub_1A5BEC08C(&qword_1EE801400, &qword_1EE801408, MEMORY[0x1E0DEC908]);
}

unint64_t sub_1A5C00844()
{
  unint64_t result;

  result = qword_1ECF97800;
  if (!qword_1ECF97800)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43B14, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF97800);
  }
  return result;
}

uint64_t sub_1A5C00888()
{
  return sub_1A5C008AC(&qword_1EE801410, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1A5C008AC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE8013D8);
    v6[0] = sub_1A5C00710();
    v6[1] = sub_1A5BF802C();
    result = MEMORY[0x1A85B3FE0](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A5C00918()
{
  return sub_1A5BEC08C(&qword_1EE801418, &qword_1ECF97810, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1A5C00948()
{
  return sub_1A5BEC08C(&qword_1ECF97878, &qword_1ECF97880, MEMORY[0x1E0DEC640]);
}

uint64_t sub_1A5C00974()
{
  return sub_1A5C00A14(&qword_1EE801420, (uint64_t (*)(void))sub_1A5C00530, MEMORY[0x1E0CB26A8]);
}

unint64_t sub_1A5C009A4()
{
  unint64_t result;

  result = qword_1ECF977F8;
  if (!qword_1ECF977F8)
  {
    result = MEMORY[0x1A85B3FE0]("}X3? ]", &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_1ECF977F8);
  }
  return result;
}

uint64_t sub_1A5C009E8()
{
  return sub_1A5C00A14(&qword_1EE801428, (uint64_t (*)(void))sub_1A5C009A4, MEMORY[0x1E0CB26B0]);
}

uint64_t sub_1A5C00A14(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECF97810);
    v8 = a2();
    result = MEMORY[0x1A85B3FE0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1A5C00A7C(uint64_t *result, _QWORD *a2, char a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7;

  v7 = *result;
  if ((a3 & 1) == 0)
    goto LABEL_7;
  if (!v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t *)a5();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = (uint64_t *)ccrng();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = (uint64_t *)ccec_compact_generate_key();
  if (!(_DWORD)result)
  {
LABEL_11:
    *a2 = a4;
    return result;
  }
  __break(1u);
LABEL_7:
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (uint64_t *)a5();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = (uint64_t *)ccrng();
  if (result)
  {
    result = (uint64_t *)ccec_generate_key_fips();
    if ((_DWORD)result)
      __break(1u);
    goto LABEL_11;
  }
LABEL_18:
  __break(1u);
  return result;
}

void sub_1A5C00C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_1A5C00C70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v2;
  v8 = v3;
  v9 = BYTE2(v3);
  v10 = BYTE3(v3);
  v11 = BYTE4(v3);
  v12 = BYTE5(v3);
  sub_1A5C00ED8((uint64_t)&v7, (uint64_t)&v7 + BYTE6(v3), v6, v2, v3, v5, v4);
  *v1 = v0;
}

void sub_1A5C00ED8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  if (a1)
  {
    if (*a3)
    {
      if (a7())
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
        swift_dynamicCast();
        __asm { BR              X10 }
      }
LABEL_7:
      __break(1u);
      JUMPOUT(0x1A5C0103CLL);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_7;
}

uint64_t sub_1A5C01054(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v11 = *a1;
  result = swift_beginAccess();
  v13 = *(_QWORD *)(v11 + 16);
  if (v13 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a2 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v13 < a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFSUB__(a3, a2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a3 != a2)
  {
    if (__OFSUB__(a5, a4))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (a5 == a4)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    while (a4 < a5)
    {
      *(_BYTE *)(v11 + 32 + a2) = *(_BYTE *)(a6 + 32 + a4);
      v14 = a2 + 1;
      if (__OFADD__(a2, 1))
        goto LABEL_19;
      if (__OFSUB__(a3, v14))
        goto LABEL_20;
      ++a4;
      if (v14 == a3)
        goto LABEL_6;
      if (__OFSUB__(a5, a4))
        goto LABEL_21;
      ++a2;
      if (a5 == a4)
      {
        __break(1u);
        break;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_6:
  if (__OFSUB__(a5, a4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a4 != a5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

_QWORD *sub_1A5C01168(const void *a1, int64_t a2)
{
  _QWORD *v4;
  size_t v5;

  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * v5 - 64;
  }
  memcpy(v4 + 4, a1, a2);
  return v4;
}

uint64_t sub_1A5C011F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  if (v2 <= 0)
  {
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
    v3 = swift_allocObject();
    v4 = _swift_stdlib_malloc_size((const void *)v3);
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  }
  v5 = sub_1A5BFDF58((uint64_t)&v7, (_BYTE *)(v3 + 32), v2, a1);
  swift_retain();
  result = swift_release();
  if (v5 == v2)
    return v3;
  __break(1u);
  return result;
}

uint64_t sub_1A5C012CC(uint64_t (*a1)(char *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *v1;
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 < 1)
    return 0;
  v6 = 0;
  v7 = v4 + 32;
  v8 = v4 + 31;
  do
  {
    v14 = *(_BYTE *)(v7 + v6);
    v9 = a1(&v14);
    if (v2)
      break;
    if ((v9 & 1) != 0)
    {
      if (v6 >= v5 - 1)
        return v6;
      while (1)
      {
        v14 = *(_BYTE *)(v8 + v5);
        result = a1(&v14);
        v11 = v5 - 1;
        if ((result & 1) == 0)
          break;
        v12 = v5 - 2;
        if (__OFSUB__(v11, 1))
        {
          __break(1u);
          goto LABEL_17;
        }
        --v5;
        if (v6 >= v12)
          return v6;
      }
      if (!__OFSUB__(v11, v6))
      {
        v13 = *(_BYTE *)(v7 + v6);
        *(_BYTE *)(v7 + v6) = *(_BYTE *)(v8 + v5);
        *(_BYTE *)(v8 + v5--) = v13;
        goto LABEL_3;
      }
LABEL_17:
      __break(1u);
      return result;
    }
LABEL_3:
    ++v6;
  }
  while (v6 < v5);
  return v6;
}

unint64_t sub_1A5C013F4(unint64_t a1, uint64_t a2)
{
  return sub_1A5C01BCC(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *, uint64_t))sub_1A5C1F018);
}

uint64_t sub_1A5C01410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v12;

  v2 = sub_1A5C4190C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t (**)())((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *v5 = sub_1A5C0201C;
  v5[1] = (uint64_t (*)())v7;
  (*(void (**)(uint64_t (**)(), _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0CB00D8], v2);
  swift_retain();
  sub_1A5C41900();
  if (v6)
  {
    sub_1A5C418C4();
    swift_allocObject();
    swift_retain();
    v8 = sub_1A5C4187C();
    v9 = sub_1A5C2B374(v8, v6);
    swift_release();
  }
  else
  {
    v10 = (void (*)(uint64_t, _QWORD))sub_1A5C41900();
    v10(a1 + 32, 0);
    swift_release();
    swift_release();
    v9 = 0;
  }
  (*(void (**)(uint64_t (**)(), uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

unint64_t sub_1A5C015A4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1A5C015DC(a1, a2, a3);
}

unint64_t sub_1A5C015C0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1A5C015DC(a1, a2, a3);
}

unint64_t sub_1A5C015DC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  v13 = v11;
  sub_1A5BEE468(a2, a3);
  v12 = (const void *)swift_retain();
  sub_1A5BFE25C(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3)
    swift_release();
  return v11;
}

unint64_t sub_1A5C016F4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1A5C015DC(a1, a2, a3);
}

unint64_t sub_1A5C01710(unint64_t a1)
{
  return sub_1A5C01ADC(a1, (void (*)(uint64_t, unint64_t, uint64_t *))sub_1A5BFE36C);
}

unint64_t sub_1A5C0172C(unint64_t a1, char a2, uint64_t a3)
{
  return sub_1A5C01780(a1, a2, a3, MEMORY[0x1E0C81C60]);
}

unint64_t sub_1A5C01748(unint64_t a1, char a2, uint64_t a3)
{
  return sub_1A5C01780(a1, a2, a3, MEMORY[0x1E0C81C68]);
}

unint64_t sub_1A5C01764(unint64_t a1, char a2, uint64_t a3)
{
  return sub_1A5C01780(a1, a2, a3, MEMORY[0x1E0C81C70]);
}

unint64_t sub_1A5C01780(unint64_t result, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v9 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    v11 = v10 | HIWORD(v10);
    if (v11 == -1)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = (v11 + 1);
  }
  else
  {
    v12 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  v15 = v13;
  v14 = (const void *)swift_retain();
  sub_1A5BFE468(v14, v5, &v15, a2 & 1, a3, a4);
  swift_release();
  if (v4)
    swift_release();
  return v13;
}

unint64_t sub_1A5C01870(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C019BC(a1, a2, a3, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BFE05C);
}

unint64_t sub_1A5C0188C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A5C018A0(a1, a2, a3, a4, a5);
}

unint64_t sub_1A5C018A0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v11 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    v13 = v12 | HIWORD(v12);
    if (v13 == -1)
      v14 = 0xFFFFFFFFLL;
    else
      v14 = (v13 + 1);
  }
  else
  {
    v14 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = v14;
  v17 = v15;
  v16 = (const void *)swift_retain();
  sub_1A5BFE54C(v16, v6, &v17, a2, a3, a4, a5);
  swift_release();
  if (v5)
    swift_release();
  return v15;
}

unint64_t sub_1A5C019A0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C019BC(a1, a2, a3, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BFE180);
}

unint64_t sub_1A5C019BC(unint64_t result, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v9 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    v11 = v10 | HIWORD(v10);
    if (v11 == -1)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = (v11 + 1);
  }
  else
  {
    v12 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  v15 = v13;
  swift_retain();
  sub_1A5C41BF4();
  v14 = (char *)swift_retain();
  sub_1A5BFE6A8(v14, v5, (uint64_t)&v15, a2, a3, a4);
  swift_release();
  if (v4)
    swift_release();
  return v13;
}

unint64_t sub_1A5C01AC0(unint64_t a1)
{
  return sub_1A5C01ADC(a1, (void (*)(uint64_t, unint64_t, uint64_t *))sub_1A5BFE750);
}

unint64_t sub_1A5C01ADC(unint64_t result, void (*a2)(uint64_t, unint64_t, uint64_t *))
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v5 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    v7 = v6 | HIWORD(v6);
    if (v7 == -1)
      v8 = 0xFFFFFFFFLL;
    else
      v8 = (v7 + 1);
  }
  else
  {
    v8 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v8;
  v11 = v9;
  v10 = swift_retain();
  a2(v10, v3, &v11);
  swift_release();
  if (v2)
    swift_release();
  return v9;
}

unint64_t sub_1A5C01BB0(unint64_t a1, uint64_t a2)
{
  return sub_1A5C01BCC(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *, uint64_t))sub_1A5C2A920);
}

unint64_t sub_1A5C01BCC(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | HIWORD(v8);
    if (v9 == -1)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = (v9 + 1);
  }
  else
  {
    v10 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v10;
  v13 = v11;
  v12 = (const void *)swift_retain();
  sub_1A5BFE84C(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3)
    swift_release();
  return v11;
}

unint64_t sub_1A5C01CB4(unint64_t result, uint64_t a2, uint64_t a3, _QWORD **a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v11 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    v13 = v12 | HIWORD(v12);
    if (v13 == -1)
      v14 = 0xFFFFFFFFLL;
    else
      v14 = (v13 + 1);
  }
  else
  {
    v14 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = v14;
  v17 = v15;
  swift_retain();
  v16 = (const void *)swift_retain();
  sub_1A5BFE924(v16, v6, &v17, a2, a3, a4, a5);
  swift_release();
  if (v5)
    swift_release();
  return v15;
}

unint64_t sub_1A5C01DC0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C01DF8(a1, a2, a3, MEMORY[0x1E0C82180]);
}

unint64_t sub_1A5C01DDC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C01DF8(a1, a2, a3, MEMORY[0x1E0C82178]);
}

unint64_t sub_1A5C01DF8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if ((_DWORD)result)
  {
    v9 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    v11 = v10 | HIWORD(v10);
    if (v11 == -1)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = (v11 + 1);
  }
  else
  {
    v12 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = v12;
  v15 = v13;
  v14 = (const void *)swift_retain();
  sub_1A5BFEA38(v14, v5, &v15, a2, a3, a4);
  swift_release();
  if (v4)
    swift_release();
  return v13;
}

uint64_t sub_1A5C01EE8(void *a1, size_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = **(_QWORD **)(v2 + 16);
  swift_beginAccess();
  return sub_1A5C2D1FC(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 16), a1, a2);
}

_QWORD *sub_1A5C01F58(size_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;

  if (qword_1ECF977F0 != -1)
    swift_once();
  result = off_1ECF977E8;
  v5 = off_1ECF977E8;
  if (!a2)
    return (_QWORD *)swift_retain();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_1A5C2D060(v5[2], v5[2], a1);
      --a2;
    }
    while (a2);
    return v5;
  }
  return result;
}

uint64_t sub_1A5C0200C()
{
  return swift_deallocObject();
}

uint64_t sub_1A5C0201C()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SecureBytes.Index()
{
  return &type metadata for SecureBytes.Index;
}

unint64_t sub_1A5C02038(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1A5C02C60(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1A5C02C60(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1A5C41B40();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C02124(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = v6 - result;
  if (__OFSUB__(v6, result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 < 1)
  {
    v7 = 0;
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = a5 >> 1;
    if (v6 < v7)
    {
LABEL_10:
      if (v8 >= a4)
      {
        if (v5 >= a4)
        {
          if (v5 >= v8)
          {
            if ((v8 & 0x8000000000000000) == 0)
              return a2;
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  v8 = a4 + v7;
  if (!__OFADD__(a4, v7))
    goto LABEL_10;
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1A5C021B8(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;

  sub_1A5C419A8();
  v6 = v5;
  v7 = sub_1A5C41B7C();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  v14 = sub_1A5C02038(v7, v9, v11, v13);
  v16 = v14 + 64;
  if (__OFADD__(v14, 64))
    goto LABEL_21;
  v49 = v11;
  if (v16 < 0)
    v16 = v14 + 127;
  v17 = v16 >> 6;
  if (v17 <= -2)
    v17 = -2;
  v18 = sub_1A5BFC9A4(0, v17 + 2, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41E10();
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  sub_1A5C41B04();
  v11 = MEMORY[0x1A85B3614](0x4745422D2D2D2D2DLL, 0xEB00000000204E49);
  v3 = v19;
  a1 = v20;
  v2 = v21;
  v15 = v18;
  v1 = *((_QWORD *)v18 + 2);
  v16 = *((_QWORD *)v18 + 3);
  v6 = v1 + 1;
  if (v1 >= (unint64_t)v16 >> 1)
    goto LABEL_22;
  while (1)
  {
    *((_QWORD *)v15 + 2) = v6;
    v22 = v15;
    v23 = &v15[32 * v1];
    *((_QWORD *)v23 + 4) = v11;
    *((_QWORD *)v23 + 5) = v3;
    *((_QWORD *)v23 + 6) = a1;
    *((_QWORD *)v23 + 7) = v2;
    sub_1A5C41BF4();
    a1 = v49;
    v24 = sub_1A5C41D20();
    swift_bridgeObjectRelease();
    if (v24 < 1)
      break;
    while (1)
    {
      sub_1A5C41BF4();
      v6 = sub_1A5C41CFC();
      v26 = v25;
      swift_bridgeObjectRelease();
      v11 = (v26 & 1) != 0 ? v9 : v6;
      v1 = v11 >> 14;
      if (v11 >> 14 < v7 >> 14)
        break;
      sub_1A5C41BF4();
      v49 = a1;
      v2 = sub_1A5C41D38();
      v3 = v27;
      a1 = v28;
      v48 = v29;
      swift_bridgeObjectRelease();
      v15 = v22;
      v30 = *((_QWORD *)v22 + 2);
      v31 = *((_QWORD *)v15 + 3);
      v6 = v30 + 1;
      if (v30 >= v31 >> 1)
        v15 = sub_1A5BFC9A4((char *)(v31 > 1), v30 + 1, 1, v15);
      *((_QWORD *)v15 + 2) = v6;
      v16 = (uint64_t)&v15[32 * v30];
      *(_QWORD *)(v16 + 32) = v2;
      *(_QWORD *)(v16 + 40) = v3;
      *(_QWORD *)(v16 + 48) = a1;
      *(_QWORD *)(v16 + 56) = v48;
      if (v1 > v9 >> 14)
        goto LABEL_20;
      v22 = v15;
      sub_1A5C41BF4();
      v7 = sub_1A5C41D38();
      v9 = v32;
      a1 = v33;
      v2 = v34;
      swift_bridgeObjectRelease_n();
      sub_1A5C41BF4();
      v35 = sub_1A5C41D20();
      swift_bridgeObjectRelease();
      if (v35 <= 0)
        goto LABEL_16;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    v15 = sub_1A5BFC9A4((char *)((unint64_t)v16 > 1), v6, 1, v15);
  }
LABEL_16:
  sub_1A5C41E10();
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  sub_1A5C41B04();
  v36 = MEMORY[0x1A85B3614](0x444E452D2D2D2D2DLL, 0xE900000000000020);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = *((_QWORD *)v22 + 2);
  v43 = *((_QWORD *)v22 + 3);
  if (v44 >= v43 >> 1)
    v22 = sub_1A5BFC9A4((char *)(v43 > 1), v44 + 1, 1, v22);
  *((_QWORD *)v22 + 2) = v44 + 1;
  v45 = &v22[32 * v44];
  *((_QWORD *)v45 + 4) = v36;
  *((_QWORD *)v45 + 5) = v38;
  *((_QWORD *)v45 + 6) = v40;
  *((_QWORD *)v45 + 7) = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801430);
  sub_1A5BEC08C(&qword_1EE801438, &qword_1EE801430, MEMORY[0x1E0DEAF38]);
  sub_1A5C02C1C();
  v46 = sub_1A5C41BC4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v46;
}

unint64_t sub_1A5C02688(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;

  if (a6 >> 14 < a5 >> 14)
  {
    __break(1u);
LABEL_24:
    result = sub_1A5C41B10();
    v20 = result;
    if ((v8 & 0x1000000000000000) == 0)
      goto LABEL_7;
LABEL_25:
    result = sub_1A5C41B10();
    v21 = result;
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_11;
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  v8 = a4;
  v10 = a3;
  v9 = a2;
  v11 = a1;
  result = sub_1A5C02CD8(a5, a6, a5, a6, a7, a8);
  v13 = result;
  v14 = v17;
  v15 = v18;
  v12 = v19;
  if ((v9 & 0x1000000000000000) != 0)
    goto LABEL_24;
  if ((v9 & 0x2000000000000000) != 0)
    v20 = HIBYTE(v9) & 0xF;
  else
    v20 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x1000000000000000) != 0)
    goto LABEL_25;
LABEL_7:
  if ((v8 & 0x2000000000000000) != 0)
    v21 = HIBYTE(v8) & 0xF;
  else
    v21 = v10 & 0xFFFFFFFFFFFFLL;
  if (v20 < 0)
    goto LABEL_26;
LABEL_11:
  sub_1A5C41BF4();
  result = sub_1A5C41D08();
  if ((v22 & 1) != 0)
    v23 = v14;
  else
    v23 = result;
  if (v23 >> 14 < v13 >> 14)
    goto LABEL_27;
  v58 = v11;
  v24 = sub_1A5C02CD8(v13, v23, v13, v14, v15, v12);
  v56 = v25;
  v57 = v24;
  v55 = v26;
  v28 = v27;
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  result = sub_1A5C41D08();
  if ((v29 & 1) != 0)
    result = v14;
  if (v14 >> 14 < result >> 14)
    goto LABEL_28;
  v54 = v10;
  v30 = sub_1A5C02CD8(result, v14, v13, v14, v15, v12);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_1A5C41BF4();
  swift_bridgeObjectRelease_n();
  v37 = sub_1A5C1B8F8(v21, v30, v32, v34, v36);
  v52 = v38;
  v53 = v37;
  v51 = v39;
  v41 = v40;
  v42 = sub_1A5C1BA24(v21, v30, v32, v34, v36);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_1A5C41BF4();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  LOBYTE(v32) = sub_1A5C0297C(v58, v9, v57, v56, v55, v28);
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0
    && (sub_1A5C41BF4(), v49 = sub_1A5C0297C(v54, v8, v53, v52, v51, v41), swift_bridgeObjectRelease(), (v49 & 1) != 0))
  {
    v50 = MEMORY[0x1A85B3458](v42, v44, v46, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = 0;
  }
  swift_bridgeObjectRelease();
  return v50;
}

unint64_t sub_1A5C0297C(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t result;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  _QWORD v31[2];

  v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((a6 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a6) & 0xF;
  else
    v10 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a2) & 0xF;
  else
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v12 = 4 << v9;
  v29 = 4 * v11;
  v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v25 = a2 & 0xFFFFFFFFFFFFFFLL;
  v26 = v12;
  v23 = v10;
  v24 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v15 = 15;
  while (1)
  {
    v16 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      if (v29 != v15 >> 14)
      {
        v17 = 0;
        goto LABEL_19;
      }
      v22 = 1;
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v22;
    }
    result = sub_1A5C41D14();
    v17 = result;
    if ((a3 & 0xC) == v26)
    {
      result = sub_1A5C02C60(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_17:
        a3 = (a3 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_18;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_17;
    }
    if (v23 <= a3 >> 16)
      goto LABEL_46;
    a3 = sub_1A5C41B1C();
LABEL_18:
    if (v29 == v15 >> 14)
    {
      v22 = 0;
      goto LABEL_43;
    }
LABEL_19:
    v19 = v15 & 0xC;
    result = v15;
    if (v19 == v14)
      result = sub_1A5C02C60(v15, a1, a2);
    v20 = result >> 16;
    if (result >> 16 >= v11)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = sub_1A5C41B4C();
      v21 = result;
      if (v19 != v14)
        goto LABEL_29;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v31[0] = a1;
      v31[1] = v25;
      v21 = *((_BYTE *)v31 + v20);
      if (v19 != v14)
        goto LABEL_29;
    }
    else
    {
      result = v24;
      if ((a1 & 0x1000000000000000) == 0)
        result = sub_1A5C41E28();
      v21 = *(_BYTE *)(result + v20);
      if (v19 != v14)
      {
LABEL_29:
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_33;
        goto LABEL_30;
      }
    }
    result = sub_1A5C02C60(v15, a1, a2);
    v15 = result;
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_33:
      if (v11 <= v15 >> 16)
        goto LABEL_45;
      v15 = sub_1A5C41B1C();
      goto LABEL_35;
    }
LABEL_30:
    v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_35:
    v22 = 0;
    if (v16 < 0x4000 || v17 != v21)
      goto LABEL_43;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

unint64_t sub_1A5C02C1C()
{
  unint64_t result;

  result = qword_1EE801440;
  if (!qword_1EE801440)
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE801440);
  }
  return result;
}

uint64_t sub_1A5C02C60(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1A5C41B58();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1A85B341C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1A5C02CD8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a2;
  v11 = result;
  v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  if ((a2 & 0xC) == 4 << v12)
  {
    result = sub_1A5C02C60(a2, a5, a6);
    v10 = result;
  }
  if ((v11 & 0xC) == v13)
  {
    result = sub_1A5C02C60(v11, a5, a6);
    v11 = result;
  }
  if (v10 >> 14 <= a4 >> 14 && v11 >> 14 >= a3 >> 14 && v10 >> 14 >= v11 >> 14)
    return v11;
  __break(1u);
  return result;
}

uint64_t sub_1A5C02DB4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    swift_bridgeObjectRelease();
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    v2 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v2)
      goto LABEL_32;
LABEL_48:
    sub_1A5BF6798();
    swift_allocError();
    *v49 = 7;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  v4 = a1;
  v5 = 4 * v3;
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  v7 = 15;
  v8 = 15;
  v9 = 15;
  v70 = 4 * v3;
  do
  {
    while (1)
    {
      v11 = sub_1A5C41B64();
      if ((v12 & 0x2000000000000000) != 0)
        v13 = HIBYTE(v12) & 0xF;
      else
        v13 = v11 & 0xFFFFFFFFFFFFLL;
      if (!v13)
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if ((v12 & 0x1000000000000000) != 0)
      {
        v14 = sub_1A5C41E04();
      }
      else
      {
        if ((v12 & 0x2000000000000000) == 0 && (v11 & 0x1000000000000000) == 0)
          sub_1A5C41E28();
        v14 = sub_1A5C41E34();
      }
      v2 = v14;
      swift_bridgeObjectRelease();
      if ((v2 - 14) <= 0xFFFFFFFB && (v2 - 8232) >= 2 && (_DWORD)v2 != 133)
        break;
      if (v8 >> 14 != v7 >> 14)
      {
        if (v7 >> 14 < v8 >> 14)
          goto LABEL_80;
        v15 = sub_1A5C41B7C();
        v17 = v16;
        v19 = v18;
        v2 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1A5BFC9A4(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v22 = *((_QWORD *)v6 + 2);
        v21 = *((_QWORD *)v6 + 3);
        v23 = v6;
        if (v22 >= v21 >> 1)
          v23 = sub_1A5BFC9A4((char *)(v21 > 1), v22 + 1, 1, v6);
        *((_QWORD *)v23 + 2) = v22 + 1;
        v6 = v23;
        v10 = &v23[32 * v22];
        *((_QWORD *)v10 + 4) = v15;
        *((_QWORD *)v10 + 5) = v17;
        *((_QWORD *)v10 + 6) = v19;
        *((_QWORD *)v10 + 7) = v2;
        v5 = v70;
      }
      v7 = sub_1A5C41AF8();
      v8 = v7;
      v9 = v7;
      if (v5 == v7 >> 14)
        goto LABEL_28;
    }
    v7 = sub_1A5C41AF8();
  }
  while (v5 != v7 >> 14);
LABEL_28:
  if (v5 != v8 >> 14)
  {
    if (v5 >= v9 >> 14)
    {
      v4 = sub_1A5C41B7C();
      v2 = v42;
      v7 = v43;
      v8 = v44;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_42;
      goto LABEL_83;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    v6 = sub_1A5BFC9A4(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
LABEL_42:
    v46 = *((_QWORD *)v6 + 2);
    v45 = *((_QWORD *)v6 + 3);
    v47 = v6;
    if (v46 >= v45 >> 1)
      v47 = sub_1A5BFC9A4((char *)(v45 > 1), v46 + 1, 1, v6);
    *((_QWORD *)v47 + 2) = v46 + 1;
    v6 = v47;
    v48 = &v47[32 * v46];
    *((_QWORD *)v48 + 4) = v4;
    *((_QWORD *)v48 + 5) = v2;
    *((_QWORD *)v48 + 6) = v7;
    *((_QWORD *)v48 + 7) = v8;
    v2 = *((_QWORD *)v47 + 2);
    if (v2)
      goto LABEL_32;
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  v2 = *((_QWORD *)v6 + 2);
  if (!v2)
    goto LABEL_48;
LABEL_32:
  v24 = v6 + 32;
  v25 = v6;
  v27 = *((_QWORD *)v6 + 4);
  v26 = *((_QWORD *)v6 + 5);
  v28 = *((_QWORD *)v25 + 6);
  v29 = *((_QWORD *)v25 + 7);
  v30 = (uint64_t)v25;
  v69 = (uint64_t)v24;
  v31 = &v24[32 * v2];
  v32 = *((_QWORD *)v31 - 4);
  v33 = *((_QWORD *)v31 - 3);
  v35 = *((_QWORD *)v31 - 2);
  v34 = *((_QWORD *)v31 - 1);
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v71 = sub_1A5C02688(0x4745422D2D2D2D2DuLL, 0xEB00000000204E49, 0x2D2D2D2D2DuLL, 0xE500000000000000, v27, v26, v28, v29);
  v37 = v36;
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  sub_1A5C41BF4();
  v38 = sub_1A5C02688(0x444E452D2D2D2D2DuLL, 0xE900000000000020, 0x2D2D2D2D2DuLL, 0xE500000000000000, v32, v33, v35, v34);
  v8 = v39;
  swift_bridgeObjectRelease();
  if (!v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_48;
  }
  if (v71 == v38 && v37 == v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = sub_1A5C41E94();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
      goto LABEL_46;
  }
  result = sub_1A5C02124(1, v30, v69, 1, (2 * v2) | 1);
  if (__OFSUB__(v53 >> 1, v52))
  {
    __break(1u);
    goto LABEL_85;
  }
  v7 = result;
  if ((uint64_t)((v53 >> 1) - v52) < 1)
  {
LABEL_76:
    swift_bridgeObjectRelease();
LABEL_77:
    sub_1A5BF6798();
    swift_allocError();
    *v65 = 7;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  v66 = v51;
  v67 = v53 >> 1;
  v68 = v52;
  result = sub_1A5C02124(1, result, v51, v52, v53);
  v56 = result;
  v4 = v57 >> 1;
  if (v55 != v57 >> 1)
  {
    v58 = v55;
    v6 = (char *)(v54 + 32 * v55 + 16);
    do
    {
      if (v58 >= v4)
        goto LABEL_81;
      v59 = *((_QWORD *)v6 - 2);
      v8 = *((_QWORD *)v6 - 1);
      v60 = *(_QWORD *)v6;
      v2 = *((_QWORD *)v6 + 1);
      v61 = (*(_QWORD *)v6 >> 59) & 1;
      if ((v2 & 0x1000000000000000) == 0)
        LOBYTE(v61) = 1;
      v7 = 4 << v61;
      if ((*((_QWORD *)v6 - 2) & 0xCLL) == 4 << v61)
      {
        result = sub_1A5C02C60(*((_QWORD *)v6 - 2), *(_QWORD *)v6, *((_QWORD *)v6 + 1));
        v59 = result;
      }
      if ((v8 & 0xC) == v7)
      {
        v7 = v56;
        result = sub_1A5C02C60(v8, v60, v2);
        v8 = result;
        if ((v2 & 0x1000000000000000) == 0)
        {
LABEL_65:
          result = (v8 >> 16) - (v59 >> 16);
          if (result != 64)
            goto LABEL_74;
          goto LABEL_66;
        }
      }
      else if ((v2 & 0x1000000000000000) == 0)
      {
        goto LABEL_65;
      }
      v62 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000) == 0)
        v62 = v60 & 0xFFFFFFFFFFFFLL;
      if (v62 < v59 >> 16)
        goto LABEL_87;
      if (v62 < v8 >> 16)
        goto LABEL_88;
      v7 = v56;
      result = sub_1A5C41B40();
      if (result != 64)
      {
LABEL_74:
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_77;
      }
LABEL_66:
      ++v58;
      v6 += 32;
    }
    while (v4 != v58);
  }
  swift_unknownObjectRetain_n();
  result = swift_unknownObjectRelease();
  if (v68 == v67)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    return result;
  }
  if (v67 <= v68)
    goto LABEL_86;
  if ((uint64_t)sub_1A5C02038(*(_QWORD *)(v66 + 32 * v67 - 32), *(_QWORD *)(v66 + 32 * v67 - 24), *(_QWORD *)(v66 + 32 * v67 - 16), *(_QWORD *)(v66 + 32 * v67 - 8)) > 64)
  {
    swift_unknownObjectRelease();
    goto LABEL_76;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801448);
  sub_1A5BEC08C(qword_1EE801450, &qword_1EE801448, MEMORY[0x1E0DEBF78]);
  sub_1A5C02C1C();
  sub_1A5C41BC4();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C41930();
  v64 = v63;
  swift_bridgeObjectRelease();
  if (v64 >> 60 == 15)
    goto LABEL_76;
  swift_unknownObjectRelease();
  return v71;
}

uint64_t static AES.CCM.seal<A, B>(_:using:nonce:authenticating:)(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;

  v20 = a7;
  v18 = a1;
  v19 = a5;
  v11 = sub_1A5C41CF0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v17 - v13;
  v23 = *a2;
  v22 = *a3;
  v15 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, a4, a6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, a6);
  v21 = 1;
  sub_1A5C12EA8(v18, &v23, (uint64_t *)&v22, (uint64_t)v14, &v21);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t static AES.CCM.seal<A>(_:using:nonce:)(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  __int128 v4;
  unsigned __int8 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *a2;
  v4 = *a3;
  v7 = xmmword_1A5C43D50;
  v8 = v4;
  v6 = 1;
  sub_1A5BEB4F4();
  return sub_1A5C12EA8(a1, &v9, (uint64_t *)&v8, (uint64_t)&v7, &v6);
}

uint64_t static AES.CCM.open<A>(_:using:authenticating:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[3];
  char v18;
  uint64_t v19;

  v8 = sub_1A5C41CF0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v17 - v10;
  LOBYTE(v10) = *(_BYTE *)(a1 + 48);
  v12 = *a2;
  v13 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v13;
  v17[2] = *(_OWORD *)(a1 + 32);
  v18 = v10;
  v19 = v12;
  v14 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v11, a3, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, a4);
  v15 = sub_1A5C13170((uint64_t)v17, &v19, (uint64_t)v11, a4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v15;
}

uint64_t sub_1A5C03880(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  _BYTE v9[16];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  ccaes_ccm_decrypt_mode();
  swift_beginAccess();
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >> 60)
  {
    __break(1u);
    JUMPOUT(0x1A5C03D28);
  }
  v5 = 8 * v4;
  if (v5 == 128 || v5 == 256 || v5 == 192)
  {
    v8 = *(_OWORD *)(a1 + 16);
    sub_1A5C04364((uint64_t)&v8, (uint64_t)v9);
    sub_1A5C04364((uint64_t)v9, (uint64_t)v10);
    __asm { BR              X11 }
  }
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  swift_willThrow();
  return a1;
}

uint64_t static AES.CCM.open(_:using:)(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  _OWORD v4[3];
  char v5;

  v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 48);
  return sub_1A5C03880((uint64_t)v4, *a2);
}

ValueMetadata *type metadata accessor for AES.CCM()
{
  return &type metadata for AES.CCM;
}

void sub_1A5C03DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  _BYTE v4[16];
  _BYTE v5[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a3 + 32);
  sub_1A5C04364((uint64_t)&v3, (uint64_t)v4);
  sub_1A5C04364((uint64_t)v4, (uint64_t)v5);
  __asm { BR              X11 }
}

uint64_t sub_1A5C03E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a2 & 0x3FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v2 - 288) = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 282) = *(_QWORD *)(v2 - 106);
  *(_OWORD *)(v2 - 192) = *(_OWORD *)(v2 - 176);
  MEMORY[0x1E0C80A78](a1);
  sub_1A5BF08C4();
  return sub_1A5C044C4(v2 - 160);
}

void sub_1A5C04058(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1A5C04350);
}

uint64_t sub_1A5C04364(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CB01A0] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1A5C043A0(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = sub_1A5C41894();
  v20 = result;
  if (result)
  {
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v20 += a1 - result;
  }
  v21 = __OFSUB__(a2, a1);
  v22 = a2 - a1;
  if (v21)
  {
    __break(1u);
    goto LABEL_13;
  }
  v23 = sub_1A5C418AC();
  if (v23 >= v22)
    v24 = v22;
  else
    v24 = v23;
  v25 = v20 + v24;
  if (v20)
    v26 = v25;
  else
    v26 = 0;
  return sub_1A5C142BC(v20, v26, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1A5C04498(uint64_t a1)
{
  sub_1A5BEE468(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1A5C044C4(uint64_t a1)
{
  sub_1A5BEFF90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t *sub_1A5C044F0(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

void sub_1A5C04550()
{
  sub_1A5BF08C4();
}

void sub_1A5C045B4()
{
  sub_1A5C04604();
}

void sub_1A5C045C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A5C04058(a1, a2, **(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8));
}

void sub_1A5C04604()
{
  sub_1A5BF08C4();
}

uint64_t static P256.hash2fieldL.getter()
{
  return 48;
}

uint64_t static P256.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C046C0(MEMORY[0x1E0C81C60], a1);
}

uint64_t sub_1A5C0467C()
{
  return 48;
}

uint64_t static P384.hash2fieldL.getter()
{
  return 72;
}

uint64_t static P384.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C046C0(MEMORY[0x1E0C81C68], a1);
}

uint64_t sub_1A5C04698@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BECA88(MEMORY[0x1E0C81C68], a1);
}

uint64_t sub_1A5C046A4()
{
  return 72;
}

uint64_t static P521.hash2fieldL.getter()
{
  return 98;
}

uint64_t static P521.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C046C0(MEMORY[0x1E0C81C70], a1);
}

uint64_t sub_1A5C046C0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  if (result)
  {
    v4 = result;
    result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    a2[3] = result;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1A5C04708()
{
  unint64_t result;

  result = qword_1ECF97870;
  if (!qword_1ECF97870)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384, &type metadata for SHA384);
    atomic_store(result, (unint64_t *)&qword_1ECF97870);
  }
  return result;
}

unint64_t sub_1A5C04750()
{
  unint64_t result;

  result = qword_1EE800348;
  if (!qword_1EE800348)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA512, &type metadata for SHA512);
    atomic_store(result, (unint64_t *)&qword_1EE800348);
  }
  return result;
}

uint64_t sub_1A5C04794@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BECA88(MEMORY[0x1E0C81C70], a1);
}

uint64_t sub_1A5C047A0()
{
  return 98;
}

uint64_t dispatch thunk of static CorecryptoSupportedNISTCurve.curveType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static CorecryptoSupportedNISTCurve.hash2fieldL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for CoreCryptoNISTCurvePrivateKeyImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoNISTCurvePrivateKeyImpl);
}

uint64_t type metadata accessor for CoreCryptoNISTCurvePublicKeyImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoNISTCurvePublicKeyImpl);
}

unint64_t sub_1A5C047D0(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t result;
  uint64_t v6;
  _QWORD v7[4];

  v4 = (void *)objc_opt_self();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 24))(v7, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = (unint64_t)objc_msgSend(v4, sel_groupOrderByteCountForCP_, v6);
  if ((result & 0x8000000000000000) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1A5C0486C(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!*a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 24))(v9, a4, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  result = swift_dynamicCast();
  if (!v6)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  result = ccec_x963_import_priv();
  if ((_DWORD)result)
  {
    v7 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A5C04950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;

  v15 = 0;
  v9 = a1;
  sub_1A5C418D0();
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v14, a2, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    v10 = getccec_pub_ctx_size();
    v13 = MEMORY[0x1E0C80A78](v10);
    v9 = sub_1A5BEBD48(v13, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C04F84);
    if (v15)
    {
      sub_1A5BF5E74();
      swift_allocError();
      *(_DWORD *)v11 = 1;
      *(_BYTE *)(v11 + 4) = 1;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    }
  }
  return v9;
}

unint64_t sub_1A5C04B00(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v8;

  result = sub_1A5C047D0(a3, a5);
  if ((uint64_t)(result + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a1 || a2 - a1 != ((2 * result) | 1))
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = 1;
    goto LABEL_8;
  }
  if (a2 == a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*a1 == 4)
    return result;
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v8 = 5;
LABEL_8:
  *(_BYTE *)(v8 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A5C04BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;

  v9 = a1;
  sub_1A5C418D0();
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  }
  else
  {
    v15 = 0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v14, a2, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    v10 = getccec_pub_ctx_size();
    v13 = MEMORY[0x1E0C80A78](v10);
    v9 = sub_1A5BEBD48(v13, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C04EDC);
    if (v15)
    {
      sub_1A5BF5E74();
      swift_allocError();
      *(_DWORD *)v11 = 1;
      *(_BYTE *)(v11 + 4) = 1;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    }
  }
  return v9;
}

unint64_t sub_1A5C04D90(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;

  result = sub_1A5C047D0(a3, a5);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    return result;
  }
  v8 = a2 - a1;
  if (!a1)
    v8 = 0;
  if (v8 != result + 1)
  {
    sub_1A5BF5E74();
    swift_allocError();
    v10 = 1;
    goto LABEL_10;
  }
  if (!a1 || a2 == a1 || (*a1 & 0xFE) != 2)
  {
    sub_1A5BF5E74();
    swift_allocError();
    v10 = 5;
LABEL_10:
    *(_DWORD *)v9 = v10;
    *(_BYTE *)(v9 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1A5C04E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A5BEC64C(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C04E88);
}

uint64_t sub_1A5C04E88(uint64_t a1, _QWORD *a2)
{
  return sub_1A5BECD54(a1, a2);
}

uint64_t sub_1A5C04EA4(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEC60C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C0486C);
}

unint64_t sub_1A5C04EC0(_BYTE *a1, _BYTE *a2)
{
  uint64_t *v2;

  return sub_1A5C04D90(a1, a2, v2[2], v2[3], v2[4]);
}

_QWORD *sub_1A5C04EDC(_QWORD *a1)
{
  return sub_1A5BEBE5C(a1);
}

uint64_t sub_1A5C04EF8(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEB5A4(a1, a2, MEMORY[0x1E0C81C40]);
}

uint64_t sub_1A5C04F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A5BEBC2C(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C04F30);
}

_QWORD *sub_1A5C04F30(_QWORD *a1)
{
  return sub_1A5BEBE5C(a1);
}

uint64_t sub_1A5C04F4C(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEB5A4(a1, a2, MEMORY[0x1E0C81C18]);
}

unint64_t sub_1A5C04F68(_BYTE *a1, _BYTE *a2)
{
  uint64_t *v2;

  return sub_1A5C04B00(a1, a2, v2[2], v2[3], v2[4]);
}

_QWORD *sub_1A5C04F84(_QWORD *a1)
{
  return sub_1A5BEBE5C(a1);
}

uint64_t sub_1A5C04FA0(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEB5A4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C81D20]);
}

void sub_1A5C04FBC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v2 >> 1;
  if (v1 == v2 >> 1)
    goto LABEL_2;
  if (v1 >= (uint64_t)(v2 >> 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = v0[1];
  v6 = v0[2];
  if (*(char *)(v5 + v1) < 0)
  {
    v6 = v1 + 1;
    if (v1 + 1 == v3)
    {
LABEL_2:
      sub_1A5BF6798();
      swift_allocError();
      *v4 = 3;
      swift_willThrow();
      return;
    }
    while (v6 < v3)
    {
      if ((*(char *)(v5 + v6) & 0x80000000) == 0)
        goto LABEL_5;
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_15;
      ++v6;
      if (v10 == v3)
        goto LABEL_2;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_5:
  v7 = v6 + 1;
  if (v6 + 1 < v1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= -1)
  {
    v8 = v0[3] & 1 | (2 * v7);
    v0[2] = v7;
    v9 = swift_unknownObjectRetain();
    sub_1A5C05380(v9, v5, v1, v8);
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1A5C050B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2[2];
  if (!v2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4 = a2[4];
  if (!is_mul_ok(v4, 0x28uLL))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = 40 * v4;
  v6 = a2[5];
  v7 = v5 + v6;
  if (!__CFADD__(v5, v6))
  {
    v8 = (char **)result;
    sub_1A5C41BF4();
    result = sub_1A5C0596C(v7, v8);
    v9 = v2 - 2;
    if (!v9)
      return swift_bridgeObjectRelease();
    v10 = 0;
    while (v9 != v10)
    {
      result = sub_1A5C0596C(a2[v10++ + 6], v8);
      if (v9 == v10)
        return swift_unknownObjectRelease();
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1A5C05194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1A5C41F00();
  v2 = *(_QWORD *)(a1 + 16);
  sub_1A5C41F18();
  if (v2)
  {
    v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_1A5C41F18();
      --v2;
    }
    while (v2);
  }
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C05200()
{
  uint64_t *v0;

  return sub_1A5C05194(*v0);
}

uint64_t sub_1A5C05208()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  result = sub_1A5C41F18();
  if (v2)
  {
    v4 = v1 + 32;
    do
    {
      v4 += 8;
      result = sub_1A5C41F18();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1A5C05258()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_1A5C41F00();
  v2 = *(_QWORD *)(v1 + 16);
  sub_1A5C41F18();
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_1A5C41F18();
      --v2;
    }
    while (v2);
  }
  return sub_1A5C41F3C();
}

BOOL sub_1A5C052C0(_QWORD **a1, _QWORD **a2)
{
  return sub_1A5C054F4(*a1, *a2);
}

uint64_t sub_1A5C052CC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t sub_1A5C052D8()
{
  unint64_t result;

  result = qword_1EE801558;
  if (!qword_1EE801558)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43ED0, &_s20ASN1ObjectIdentifierVN);
    atomic_store(result, (unint64_t *)&qword_1EE801558);
  }
  return result;
}

void sub_1A5C0531C()
{
  qword_1EE805A40 = (uint64_t)&unk_1E4F75B48;
}

void sub_1A5C05330()
{
  qword_1EE805AE0 = (uint64_t)&unk_1E4F75BA0;
}

void sub_1A5C05344()
{
  qword_1EE805AE8 = (uint64_t)&unk_1E4F75BE8;
}

void sub_1A5C05358()
{
  qword_1EE805A50 = (uint64_t)&unk_1E4F75C30;
}

void sub_1A5C0536C()
{
  qword_1EE805A38 = (uint64_t)&unk_1E4F75AA0;
}

void sub_1A5C05380(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  int64_t v7;
  _BYTE *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = 7 * v5;
  if ((unsigned __int128)(v5 * (__int128)7) >> 64 != (7 * v5) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!__OFADD__(v7, 7))
  {
    if (v7 + 7 > 71)
    {
      sub_1A5BF6798();
      swift_allocError();
      *v8 = 3;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    v10 = sub_1A5C3A724(0, v7, 7);
    v11 = *(_QWORD *)(v10 + 16);
    if (!v11)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
    v12 = 0;
    v13 = 0;
    if (a3 <= v4)
      v14 = v4;
    else
      v14 = a3;
    v15 = v14 - a3;
    while (v15 > v11 - 1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v13 + 32);
      if (v17 - 65 <= 0xFFFFFFFFFFFFFF7ELL)
      {
        v16 = 0;
      }
      else
      {
        v18 = *(_BYTE *)(a2 + a3 + v13) & 0x7F;
        if ((v17 & 0x8000000000000000) != 0)
        {
          v20 = v18 >> -(char)v17;
          if (v17 <= 0xFFFFFFFFFFFFFFC0)
            v16 = 0;
          else
            v16 = v20;
        }
        else
        {
          v19 = v18 << v17;
          if (v17 >= 0x40)
            v16 = 0;
          else
            v16 = v19;
        }
      }
      ++v13;
      v12 |= v16;
      if (v11 == v13)
        goto LABEL_22;
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_26:
  __break(1u);
}

BOOL sub_1A5C054F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

char *sub_1A5C05560(char *result, char a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;

  v8 = (uint64_t)result;
  if (*result != a2)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v16 = 1;
    swift_willThrow();
    return (char *)sub_1A5BF67DC(v8);
  }
  if (result[48] != 1)
  {
LABEL_48:
    __break(1u);
    return result;
  }
  v9 = v5;
  v10 = *((_QWORD *)result + 3);
  v40 = v10;
  v41 = *((_QWORD *)result + 4);
  v11 = v41 >> 1;
  v12 = (v41 >> 1) - v10;
  if (__OFSUB__(v41 >> 1, v10))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  swift_unknownObjectRetain();
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  if (v12 >= 1)
  {
    do
    {
      sub_1A5C04FBC();
      if (v9)
      {
        sub_1A5BF67DC(v8);
        swift_bridgeObjectRelease();
        return (char *)swift_unknownObjectRelease();
      }
      v14 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1A5BFC8A4(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v7 = *((_QWORD *)v6 + 2);
      v15 = *((_QWORD *)v6 + 3);
      v4 = v7 + 1;
      if (v7 >= v15 >> 1)
        v6 = sub_1A5BFC8A4((char *)(v15 > 1), v7 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v4;
      *(_QWORD *)&v6[8 * v7 + 32] = v14;
      v10 = v41 >> 1;
      v11 = (v41 >> 1) - v40;
      if (__OFSUB__(v41 >> 1, v40))
      {
        __break(1u);
        goto LABEL_39;
      }
    }
    while (v11 > 0);
    if (v4 < 2)
      goto LABEL_15;
LABEL_19:
    result = sub_1A5BFC8A4(0, v4 + 1, 0, MEMORY[0x1E0DEE9D8]);
    v11 = *((_QWORD *)v6 + 2);
    if (v11)
    {
      a4 = result;
      v7 = (unint64_t)(v6 + 32);
      v19 = *((_QWORD *)v6 + 4);
      if (v19 <= 0x27)
      {
        v11 = *((_QWORD *)result + 2);
        v10 = *((_QWORD *)result + 3);
        v4 = v11 + 1;
        if (v11 < v10 >> 1)
          goto LABEL_22;
        goto LABEL_41;
      }
      v21 = *((_QWORD *)result + 2);
      v22 = *((_QWORD *)result + 3);
      v23 = v22 >> 1;
      v24 = v21 + 1;
      if (v19 <= 0x4F)
      {
        if (v23 <= v21)
        {
          v30 = v21 + 1;
          v37 = *((_QWORD *)result + 2);
          result = sub_1A5BFC8A4((char *)(v22 > 1), v21 + 1, 1, result);
          v21 = v37;
          v24 = v30;
          a4 = result;
        }
        *((_QWORD *)a4 + 2) = v24;
        *(_QWORD *)&a4[8 * v21 + 32] = 1;
        v22 = *((_QWORD *)v6 + 2);
        if (!v22)
        {
          __break(1u);
          goto LABEL_45;
        }
        v22 = *(_QWORD *)v7 - 40;
        if (*(_QWORD *)v7 >= 0x28uLL)
        {
LABEL_34:
          v25 = *((_QWORD *)a4 + 3);
          v26 = v21 + 2;
          if (v24 >= v25 >> 1)
          {
            v33 = v22;
            v36 = v24;
            v29 = sub_1A5BFC8A4((char *)(v25 > 1), v21 + 2, 1, a4);
            v22 = v33;
            v24 = v36;
            a4 = v29;
          }
          *((_QWORD *)a4 + 2) = v26;
          *(_QWORD *)&a4[8 * v24 + 32] = v22;
          goto LABEL_37;
        }
        __break(1u);
      }
      if (v23 > v21)
      {
LABEL_32:
        *((_QWORD *)a4 + 2) = v24;
        *(_QWORD *)&a4[8 * v21 + 32] = 2;
        if (*((_QWORD *)v6 + 2))
        {
          v22 = *(_QWORD *)v7 - 80;
          if (*(_QWORD *)v7 >= 0x50uLL)
            goto LABEL_34;
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_48;
      }
LABEL_45:
      v31 = v24;
      v38 = v21;
      result = sub_1A5BFC8A4((char *)(v22 > 1), v24, 1, a4);
      v21 = v38;
      v24 = v31;
      a4 = result;
      goto LABEL_32;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    v34 = v11;
    v27 = sub_1A5BFC8A4((char *)(v10 > 1), v4, 1, a4);
    v11 = v34;
    a4 = v27;
LABEL_22:
    *((_QWORD *)a4 + 2) = v4;
    *(_QWORD *)&a4[8 * v11 + 32] = 0;
    v20 = *((_QWORD *)v6 + 2);
    if (v20)
    {
      v20 = *(_QWORD *)v7;
      v18 = *((_QWORD *)a4 + 3);
      v11 += 2;
      if (v4 < v18 >> 1)
      {
LABEL_24:
        *((_QWORD *)a4 + 2) = v11;
        *(_QWORD *)&a4[8 * v4 + 32] = v20;
LABEL_37:
        v39 = a4;
        sub_1A5C41488((uint64_t)v6, v7, *((_QWORD *)v6 + 2) != 0, (2 * *((_QWORD *)v6 + 2)) | 1);
        swift_bridgeObjectRelease();
        sub_1A5BF67DC(v8);
        swift_unknownObjectRelease();
        return v39;
      }
    }
    else
    {
      __break(1u);
    }
    v32 = v20;
    v35 = v11;
    v28 = sub_1A5BFC8A4((char *)(v18 > 1), v11, 1, a4);
    v20 = v32;
    v11 = v35;
    a4 = v28;
    goto LABEL_24;
  }
  v4 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v4 >= 2)
    goto LABEL_19;
LABEL_15:
  swift_bridgeObjectRelease();
  sub_1A5BF6798();
  swift_allocError();
  *v17 = 2;
  swift_willThrow();
  sub_1A5BF67DC(v8);
  return (char *)swift_unknownObjectRelease();
}

uint64_t sub_1A5C0596C(unint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;

  if (a1)
  {
    v4 = __clz(a1);
    v5 = *a2;
    if (v4 - 57 >= 7)
    {
      v6 = (((37 * (70 - v4)) >> 8)
          + (((70 - v4 - ((unsigned __int16)(37 * (70 - v4)) >> 8)) & 0xFE) >> 1)) >> 2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1A5BFC774(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v7 = 7 * v6 - 7;
      v8 = v6;
      while (v8 <= v6)
      {
        v10 = *((_QWORD *)v5 + 2);
        v9 = *((_QWORD *)v5 + 3);
        if (v10 >= v9 >> 1)
          v5 = sub_1A5BFC774((char *)(v9 > 1), v10 + 1, 1, v5);
        --v8;
        *((_QWORD *)v5 + 2) = v10 + 1;
        v5[v10 + 32] = (a1 >> v7) | 0x80;
        v7 -= 7;
        if (v8 == 1)
          goto LABEL_17;
      }
      __break(1u);
LABEL_17:
      *a2 = v5;
    }
    v15 = a1 & 0x7F;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v5 = (char *)result;
    }
    v13 = *((_QWORD *)v5 + 2);
    v16 = *((_QWORD *)v5 + 3);
    v14 = v13 + 1;
    if (v13 >= v16 >> 1)
    {
      result = (uint64_t)sub_1A5BFC774((char *)(v16 > 1), v13 + 1, 1, v5);
      v5 = (char *)result;
    }
  }
  else
  {
    v5 = *a2;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v5 = (char *)result;
    }
    v13 = *((_QWORD *)v5 + 2);
    v12 = *((_QWORD *)v5 + 3);
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)sub_1A5BFC774((char *)(v12 > 1), v13 + 1, 1, v5);
      v5 = (char *)result;
    }
    v15 = 0;
  }
  *((_QWORD *)v5 + 2) = v14;
  v5[v13 + 32] = v15;
  *a2 = v5;
  return result;
}

ValueMetadata *_s20ASN1ObjectIdentifierVMa()
{
  return &_s20ASN1ObjectIdentifierVN;
}

ValueMetadata *type metadata accessor for P256()
{
  return &type metadata for P256;
}

ValueMetadata *type metadata accessor for P384()
{
  return &type metadata for P384;
}

ValueMetadata *type metadata accessor for P521()
{
  return &type metadata for P521;
}

uint64_t static HMAC.isValidAuthenticationCode<A>(_:authenticating:using:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = a2;
  v13 = type metadata accessor for HashedAuthenticationCode(0, a4, a6, a4);
  v32 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - v14;
  v17 = type metadata accessor for HMAC(0, a4, a6, v16);
  v31 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v26 - v18;
  v34 = *a3;
  swift_retain();
  v27 = a4;
  v29 = a6;
  HMAC.init(key:)(&v34, a4, a6);
  v20 = v30;
  v28 = a5;
  v30 = a7;
  HMAC.update<A>(data:)(v20, v17, a5, a7);
  HMAC.finalize()(v17, v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A5C418D0();
  v21 = v34;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  if (v21 == v33)
  {
    v22 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    MEMORY[0x1E0C80A78](v22);
    v23 = v28;
    *(&v26 - 6) = v27;
    *(&v26 - 5) = v23;
    v24 = v30;
    *(&v26 - 4) = v29;
    *(&v26 - 3) = v24;
    *(&v26 - 2) = (uint64_t)v15;
    sub_1A5C418D0();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v17);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v13);
    return v34;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v17);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v13);
    return 0;
  }
}

uint64_t sub_1A5C05E14@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = a2 - result;
  if (!result)
    v3 = 0;
  *a3 = v3;
  return result;
}

uint64_t sub_1A5C05E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for HashedAuthenticationCode(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A5C05E98@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      result = cc_cmp_safe();
      *a3 = (_DWORD)result == 0;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C05EE8@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return sub_1A5C05E98(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1A5C05F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C05E14(a1, a2, a3);
}

uint64_t Digest.makeIterator()()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979C0);
  sub_1A5C418D0();
  return v1;
}

size_t sub_1A5C05F78@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result;

  result = sub_1A5BF1478(a1, a2);
  *a3 = result;
  a3[1] = 0;
  return result;
}

uint64_t static Digest.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C28A38(a1, a2, a3, a3, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8));
}

uint64_t static Digest.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  char *v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v41 = a5;
  v42 = a1;
  v43 = a3;
  swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1A5C41CF0();
  v11 = MEMORY[0x1E0C80A78](v10);
  v38 = (char *)v37 - v12;
  v37[0] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_checkMetadataState();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v37 - v20;
  v40 = a6;
  sub_1A5C41828();
  v37[1] = v9;
  v22 = sub_1A5C41C54();
  v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v21, v15);
  if (v22 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37[0] + 16))(v14, a2, a4);
    v34 = sub_1A5C419FC();
    v36 = v35;
    v44[0] = v34;
    v44[1] = v35;
    v33 = sub_1A5C28A38(v42, v44, v43, MEMORY[0x1E0CB0338], *(_QWORD *)(v41 + 8), MEMORY[0x1E0CB0318]);
    sub_1A5BEFF90(v34, v36);
    return v33 & 1;
  }
  v24 = v41;
  v25 = v42;
  v26 = v43;
  sub_1A5C41828();
  v27 = v38;
  sub_1A5C41C78();
  v23(v19, v15);
  v28 = AssociatedTypeWitness;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    v31 = *(_QWORD *)(v24 + 8);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v33 = sub_1A5C28A38(v25, v27, v26, v28, v31, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
    return v33 & 1;
  }
  __break(1u);
  return result;
}

uint64_t Digest.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A5C41F48();
  v16 = v6;
  sub_1A5C41B04();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  result = sub_1A5C41C0C();
  v8 = *(_QWORD *)(result + 16);
  if (v8 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = 2 * v8;
  if (2 * v8 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  if (v8)
  {
    v11 = sub_1A5C41C00();
    *(_QWORD *)(v11 + 16) = v9;
    bzero((void *)(v11 + 32), v9);
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v13 = 0;
  v14 = v11;
  sub_1A5C41BF4();
  sub_1A5BFCFA0(v10, &v14, &v13);
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t dispatch thunk of static Digest.byteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t static AES.permute<A>(_:key:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C06650(a1, a2, a3, a4, 0);
}

uint64_t sub_1A5C06464(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];
  char v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  if (sub_1A5C41C54() != 16)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v16 = 1;
LABEL_11:
    *(_BYTE *)(v16 + 4) = 1;
    return swift_willThrow();
  }
  v11 = swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  if (v12 >> 60)
    __break(1u);
  v13 = 8 * v12;
  if (v13 != 128 && v13 != 192 && v13 != 256)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v16 = 0;
    goto LABEL_11;
  }
  v14 = a3 & 1;
  MEMORY[0x1E0C80A78](v11);
  result = sub_1A5C41A98();
  if (!v5 && (LOBYTE(v17[0]) == 2 || (v17[0] & 1) != 0))
  {
    v17[0] = 0;
    v17[1] = 0;
    return sub_1A5C066D4((char *)v17, v18, a1, v10, v14, a4, a5);
  }
  return result;
}

uint64_t static AES.inversePermute<A>(_:key:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C06650(a1, a2, a3, a4, 1);
}

uint64_t sub_1A5C06650(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  v6 = *a2;
  return sub_1A5C06464(a1, &v6, a5, a3, a4);
}

uint64_t sub_1A5C06688@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = *a1;
  v7 = *a1 + a1[1];
  if (!*a1)
    v7 = 0;
  v9 = a2;
  result = sub_1A5C06994(v6, v7, &v9, a3 & 1);
  if (!v4)
    *a4 = 0;
  return result;
}

uint64_t sub_1A5C066D4(char *a1, char *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  void (*v10)(_QWORD, _QWORD);
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void (*v29)(_QWORD, _QWORD);
  char v30;
  uint64_t v31;
  _BYTE v32[4];
  int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, uint64_t);
  void (*v37)(_QWORD, _QWORD);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v34 = a4;
  v33 = a5;
  v43 = a3;
  v40 = a7;
  v10 = *(void (**)(_QWORD, _QWORD))(a7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v42 = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = &v32[-v16];
  v18 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v15);
  v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = (char *)(a2 - a1);
  if (!a1)
    v21 = 0;
  v38 = a2;
  v39 = v21;
  v22 = *(char **)(v18 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v22)(v20, v43, a6);
  v37 = v10;
  v23 = sub_1A5C41C54();
  v36 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v36(v20, a6);
  if (v39 != (char *)v23)
  {
    __break(1u);
    goto LABEL_11;
  }
  v24 = v33 & 1;
  v25 = v43;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v22)(v20, v43, a6);
  v26 = (uint64_t)v38;
  sub_1A5C41D50();
  v36(v20, a6);
  v27 = v35;
  v45 = v34;
  result = sub_1A5C06994((uint64_t)a1, v26, &v45, v24);
  if (!v27)
  {
    v35 = 0;
    v39 = v22;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v22)(v20, v25, a6);
    v29 = (void (*)(_QWORD, _QWORD))v36;
    sub_1A5C41C48();
    v10 = v29;
    v29(v20, a6);
    v22 = v38;
    if (a1)
    {
      if (v38)
        goto LABEL_11;
    }
    else
    {
      if (!v38)
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v17, v42);
      a1 = 0;
    }
    do
    {
      do
      {
        v30 = *a1++;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v14, v17, v42);
        v44 = v30;
        v31 = v43;
        sub_1A5C41ABC();
        ((void (*)(_BYTE *, uint64_t, uint64_t))v39)(v20, v31, a6);
        sub_1A5C41C60();
        v10(v20, a6);
      }
      while (!v22);
LABEL_11:
      ;
    }
    while (a1 != v22);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v17, v42);
  }
  return result;
}

uint64_t sub_1A5C06978@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1A5C06688(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_1A5C06994(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v7 = *a3;
  result = swift_beginAccess();
  v9 = *(_QWORD *)(v7 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10 = 8 * v9;
  if (v10 != 128 && v10 != 192 && v10 != 256)
    goto LABEL_16;
  if (!a1 || a2 - a1 != 16)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((a4 & 1) == 0)
  {
    if (ccaes_ecb_encrypt_mode())
      goto LABEL_11;
    __break(1u);
  }
  result = ccaes_ecb_decrypt_mode();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
LABEL_11:
  result = ccecb_one_shot();
  if ((_DWORD)result)
  {
    v11 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v12 = v11;
    *(_BYTE *)(v12 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

void HPKE.AEAD.keyByteCount.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C06ACC()
{
  return 32;
}

void sub_1A5C06ADC()
{
  sub_1A5C41E64();
  __break(1u);
}

uint64_t HPKE.AEAD.nonceByteCount.getter()
{
  unsigned __int8 *v0;
  uint64_t result;

  if (*v0 <= 2u)
    return 12;
  result = sub_1A5C41E64();
  __break(1u);
  return result;
}

void sub_1A5C06B9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _BYTE *v4;
  unint64_t v5;

  v5 = a4 >> 62;
  if (*v4 == 2)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

void sub_1A5C06E44(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  if (BYTE6(v2) >= a1)
  {
    sub_1A5C41978();
    sub_1A5BEFF90(v1, v2);
    JUMPOUT(0x1A5C06D68);
  }
  __break(1u);
  JUMPOUT(0x1A5C06F1CLL);
}

uint64_t sub_1A5C06F80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _QWORD v24[12];
  __int128 v25;

  v8 = v7;
  v24[3] = a4;
  v24[4] = a7;
  v24[8] = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v24[10] = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[11] = v13;
  v24[9] = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8);
  *(_QWORD *)&v25 = swift_getAssociatedTypeWitness();
  v24[7] = *(_QWORD *)(v25 - 8);
  v14 = MEMORY[0x1E0C80A78](v25);
  v24[5] = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v24[6] = (char *)v24 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v18);
  v24[2] = *a5;
  v19 = *v8;
  v20 = sub_1A5C41C54();
  if (v19 >= 3)
  {
    sub_1A5C41E64();
    __break(1u);
    JUMPOUT(0x1A5C07570);
  }
  if (v20 >= 16)
  {
    v22 = a3 >> 62;
    if (v19 <= 1)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  sub_1A5BF3EC0();
  swift_allocError();
  *v21 = 4;
  swift_willThrow();
  return a1;
}

unint64_t HPKE.AEAD.value.getter()
{
  _BYTE *v0;

  return 0xFFFF000300020001 >> (16 * *v0);
}

BOOL static HPKE.AEAD.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.AEAD.tagByteCount.getter()
{
  unsigned __int8 *v0;
  uint64_t result;

  if (*v0 <= 2u)
    return 16;
  result = sub_1A5C41E64();
  __break(1u);
  return result;
}

uint64_t HPKE.AEAD.hash(into:)()
{
  return sub_1A5C41F18();
}

void *static HPKE.AEAD.allCases.getter()
{
  return &unk_1E4F75D88;
}

uint64_t HPKE.AEAD.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

void sub_1A5C076AC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4F75DB0;
}

unint64_t sub_1A5C076C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE801560;
  if (!qword_1EE801560)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE801568);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE801560);
  }
  return result;
}

unint64_t sub_1A5C07710()
{
  unint64_t result;

  result = qword_1EE801570;
  if (!qword_1EE801570)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HPKE.AEAD, &type metadata for HPKE.AEAD);
    atomic_store(result, (unint64_t *)&qword_1EE801570);
  }
  return result;
}

uint64_t _s4AEADOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A5C077A0 + 4 * byte_1A5C44005[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A5C077D4 + 4 * byte_1A5C44000[v4]))();
}

uint64_t sub_1A5C077D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C077DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5C077E4);
  return result;
}

uint64_t sub_1A5C077F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5C077F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A5C077FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C07804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.AEAD()
{
  return &type metadata for HPKE.AEAD;
}

uint64_t sub_1A5C07820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t AssociatedTypeWitness;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t AssociatedConformanceWitness;
  _QWORD v79[5];

  v66 = a2;
  v70 = a1;
  swift_getAssociatedTypeWitness();
  v67 = a6;
  v65 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1A5C41CF0();
  v11 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v54 - v12;
  v68 = a4;
  v55 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = swift_checkMetadataState();
  v63 = *(_QWORD *)(v64 - 8);
  v14 = MEMORY[0x1E0C80A78](v64);
  v54 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v62 = (char *)&v54 - v16;
  swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v60 = swift_getAssociatedTypeWitness();
  v17 = sub_1A5C41CF0();
  v18 = MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v54 - v19;
  v20 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_checkMetadataState();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v54 - v28;
  v61 = *v71;
  v71 = a5;
  v30 = v70;
  if (sub_1A5C41C54() != 64)
    return 0;
  sub_1A5C41828();
  v31 = sub_1A5C41C54();
  v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v29, v23);
  if (v31 == 1)
  {
    sub_1A5C41828();
    v33 = v59;
    sub_1A5C41C78();
    v32(v27, v23);
    v34 = v60;
    v35 = *(_QWORD *)(v60 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v60);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_14;
    }
    v77 = v34;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_1, v33, v34);
    sub_1A5BF9FC8(&v76, (uint64_t)v79);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v30, a3);
    v39 = sub_1A5C41C0C();
    v79[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    v79[4] = sub_1A5C082C0();
    v79[0] = v39;
  }
  v40 = v68;
  v41 = v66;
  v42 = v64;
  v43 = v62;
  sub_1A5C41828();
  v44 = sub_1A5C41C54();
  v45 = *(void (**)(char *, uint64_t))(v63 + 8);
  v45(v43, v42);
  if (v44 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v41, v40);
    v51 = sub_1A5C41C0C();
    v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    AssociatedConformanceWitness = sub_1A5C082C0();
    *(_QWORD *)&v76 = v51;
    goto LABEL_11;
  }
  v46 = v54;
  sub_1A5C41828();
  v47 = v57;
  sub_1A5C41C78();
  v45(v46, v42);
  v48 = AssociatedTypeWitness;
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    v74 = v48;
    v75 = swift_getAssociatedConformanceWitness();
    v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v50, v47, v48);
    sub_1A5BF9FC8(&v73, (uint64_t)&v76);
LABEL_11:
    v52 = v61;
    sub_1A5BF40E4((uint64_t)&v76, (uint64_t)&v73);
    v53 = __swift_project_boxed_opaque_existential_1(&v73, v74);
    MEMORY[0x1E0C80A78](v53);
    *(&v54 - 2) = (char *)v79;
    *(&v54 - 1) = v52;
    sub_1A5C418D0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    v38 = v72;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    return v38;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1A5C07ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  unint64_t v46;
  _QWORD v47[5];
  char *v48;

  v4 = v3;
  swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1A5C41CF0();
  v9 = MEMORY[0x1E0C80A78](v8);
  v36 = (char *)&v34 - v10;
  v35 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_checkMetadataState();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v34 - v18;
  v38 = *v4;
  v20 = a1;
  v41 = a3;
  sub_1A5C41828();
  v21 = sub_1A5C41C54();
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 == 1)
  {
    sub_1A5C41828();
    v23 = v36;
    sub_1A5C41C78();
    v22(v17, v13);
    v24 = AssociatedTypeWitness;
    v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v43 = v24;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_1A5BF9FC8(&v42, (uint64_t)v47);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v20, a2);
    v28 = sub_1A5C41C0C();
    v47[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    v47[4] = sub_1A5C082C0();
    v47[0] = v28;
  }
  v30 = v38;
  v29 = v39;
  sub_1A5C418C4();
  swift_allocObject();
  v31 = sub_1A5C418A0();
  *(_QWORD *)&v42 = 0x4000000000;
  *((_QWORD *)&v42 + 1) = v31;
  sub_1A5BEDB28((int *)&v42, 0);
  v45 = v42;
  v46 = *((_QWORD *)&v42 + 1) | 0x4000000000000000;
  v32 = sub_1A5C41C00();
  *(_QWORD *)(v32 + 16) = 32;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  v48 = (char *)v32;
  swift_beginAccess();
  v33 = v30 + 32 + *(_QWORD *)(v30 + 16);
  swift_retain();
  sub_1A5C08420(v30 + 32, v33, &v48, v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_1A5BEFF90(v45, v46);
  }
  else
  {
    v33 = v45;
    swift_bridgeObjectRelease();
  }
  return v33;
}

unint64_t sub_1A5C082C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECF979B0;
  if (!qword_1ECF979B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECF979A8);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB1B08], v1);
    atomic_store(result, (unint64_t *)&qword_1ECF979B0);
  }
  return result;
}

uint64_t sub_1A5C0830C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  return sub_1A5C418D0();
}

uint64_t sub_1A5C083A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = ccsha512_di();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1)
  {
    result = cced25519_verify();
    *a3 = (_DWORD)result == 0;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A5C08420(uint64_t result, uint64_t a2, char **a3, _QWORD *a4)
{
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  int pub;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = ccsha512_di();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v6 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v6 = sub_1A5BFC774(0, *((_QWORD *)v6 + 2), 0, v6);
  *a3 = v6;
  pub = cced25519_make_pub();
  if (pub)
  {
    v9 = pub;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v10 = v9;
LABEL_9:
    *(_BYTE *)(v10 + 4) = 0;
    return swift_willThrow();
  }
  v11 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  MEMORY[0x1E0C80A78](v11);
  result = sub_1A5C418D0();
  if (v12)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v10 = v12;
    goto LABEL_9;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1A5C085D8(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A5C08640@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  if (!ccsha512_di())
  {
    __break(1u);
    goto LABEL_5;
  }
  if (!v2)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x1A5C088BCLL);
  }
  result = cced25519_sign();
  *v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

void sub_1A5C088D4(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v3;

  sub_1A5C085D8(*(_QWORD *)(v1 + 16));
  *a1 = v3;
}

uint64_t sub_1A5C08908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_1A5C41894();
  if (!result)
    goto LABEL_7;
  result = sub_1A5C418B8();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1A5C418AC();
  result = ccsha512_di();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3)
    return cced25519_sign();
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1A5C089AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C0830C(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_1A5C089C4@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return sub_1A5C083A0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1A5C089E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t AssociatedTypeWitness;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t AssociatedConformanceWitness;
  _QWORD v79[5];

  v66 = a2;
  v70 = a1;
  swift_getAssociatedTypeWitness();
  v67 = a6;
  v65 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1A5C41CF0();
  v11 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v54 - v12;
  v68 = a4;
  v55 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = swift_checkMetadataState();
  v63 = *(_QWORD *)(v64 - 8);
  v14 = MEMORY[0x1E0C80A78](v64);
  v54 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v62 = (char *)&v54 - v16;
  swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v60 = swift_getAssociatedTypeWitness();
  v17 = sub_1A5C41CF0();
  v18 = MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v54 - v19;
  v20 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_checkMetadataState();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v54 - v28;
  v61 = *v71;
  v71 = a5;
  v30 = v70;
  if (sub_1A5C41C54() != 114)
    return 0;
  sub_1A5C41828();
  v31 = sub_1A5C41C54();
  v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v29, v23);
  if (v31 == 1)
  {
    sub_1A5C41828();
    v33 = v59;
    sub_1A5C41C78();
    v32(v27, v23);
    v34 = v60;
    v35 = *(_QWORD *)(v60 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v60);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_14;
    }
    v77 = v34;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_1, v33, v34);
    sub_1A5BF9FC8(&v76, (uint64_t)v79);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v30, a3);
    v39 = sub_1A5C41C0C();
    v79[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    v79[4] = sub_1A5C082C0();
    v79[0] = v39;
  }
  v40 = v68;
  v41 = v66;
  v42 = v64;
  v43 = v62;
  sub_1A5C41828();
  v44 = sub_1A5C41C54();
  v45 = *(void (**)(char *, uint64_t))(v63 + 8);
  v45(v43, v42);
  if (v44 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v41, v40);
    v51 = sub_1A5C41C0C();
    v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    AssociatedConformanceWitness = sub_1A5C082C0();
    *(_QWORD *)&v76 = v51;
    goto LABEL_11;
  }
  v46 = v54;
  sub_1A5C41828();
  v47 = v57;
  sub_1A5C41C78();
  v45(v46, v42);
  v48 = AssociatedTypeWitness;
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    v74 = v48;
    v75 = swift_getAssociatedConformanceWitness();
    v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v50, v47, v48);
    sub_1A5BF9FC8(&v73, (uint64_t)&v76);
LABEL_11:
    v52 = v61;
    sub_1A5BF40E4((uint64_t)&v76, (uint64_t)&v73);
    v53 = __swift_project_boxed_opaque_existential_1(&v73, v74);
    MEMORY[0x1E0C80A78](v53);
    *(&v54 - 2) = (char *)v79;
    *(&v54 - 1) = v52;
    sub_1A5C418D0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    v38 = v72;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    return v38;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1A5C09098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  unint64_t v46;
  _QWORD v47[5];
  char *v48;

  v4 = v3;
  swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1A5C41CF0();
  v9 = MEMORY[0x1E0C80A78](v8);
  v36 = (char *)&v34 - v10;
  v35 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_checkMetadataState();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v34 - v18;
  v38 = *v4;
  v20 = a1;
  v41 = a3;
  sub_1A5C41828();
  v21 = sub_1A5C41C54();
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 == 1)
  {
    sub_1A5C41828();
    v23 = v36;
    sub_1A5C41C78();
    v22(v17, v13);
    v24 = AssociatedTypeWitness;
    v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v43 = v24;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_1A5BF9FC8(&v42, (uint64_t)v47);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v20, a2);
    v28 = sub_1A5C41C0C();
    v47[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    v47[4] = sub_1A5C082C0();
    v47[0] = v28;
  }
  v30 = v38;
  v29 = v39;
  sub_1A5C418C4();
  swift_allocObject();
  v31 = sub_1A5C418A0();
  *(_QWORD *)&v42 = 0x7200000000;
  *((_QWORD *)&v42 + 1) = v31;
  sub_1A5BEDB28((int *)&v42, 0);
  v45 = v42;
  v46 = *((_QWORD *)&v42 + 1) | 0x4000000000000000;
  v32 = sub_1A5C41C00();
  *(_QWORD *)(v32 + 16) = 57;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 73) = 0u;
  v48 = (char *)v32;
  swift_beginAccess();
  v33 = v30 + 32 + *(_QWORD *)(v30 + 16);
  swift_retain();
  sub_1A5C09570(v30 + 32, v33, &v48, v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_1A5BEFF90(v45, v46);
  }
  else
  {
    v33 = v45;
    swift_bridgeObjectRelease();
  }
  return v33;
}

uint64_t sub_1A5C09488(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  return sub_1A5C418D0();
}

uint64_t sub_1A5C0951C@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      result = cced448_verify();
      *a3 = (_DWORD)result == 0;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C09570(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  int pub;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  if (!a1)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!ccrng())
    goto LABEL_9;
  v6 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v6 = sub_1A5BFC774(0, *((_QWORD *)v6 + 2), 0, v6);
  *a3 = v6;
  pub = cced448_make_pub();
  if (pub)
  {
    v9 = pub;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v10 = v9;
    *(_BYTE *)(v10 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v11 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
    MEMORY[0x1E0C80A78](v11);
    return sub_1A5C418D0();
  }
}

void sub_1A5C09730(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A5C09798@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  if (!ccrng())
  {
    __break(1u);
    goto LABEL_5;
  }
  if (!v2)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x1A5C09A3CLL);
  }
  result = cced448_sign();
  *v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

void sub_1A5C09A54(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v3;

  sub_1A5C09730(*(_QWORD *)(v1 + 16));
  *a1 = v3;
}

uint64_t sub_1A5C09A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_1A5C41894())
    goto LABEL_7;
  if (__OFSUB__(a1, sub_1A5C418B8()))
  {
    __break(1u);
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1A5C418AC();
  if (!ccrng())
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!a3)
    goto LABEL_9;
  return cced448_sign();
}

uint64_t sub_1A5C09B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C09488(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_1A5C09B8C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return sub_1A5C0951C(a1, *(_QWORD *)(v2 + 16), a2);
}

double AES.CCM.Nonce.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_1A5BECAD4(12);
  sub_1A5C09C14(v2, &v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1A5C09C14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[5];

  swift_beginAccess();
  if (*(uint64_t *)(a1 + 16) < 1)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v10 = 1;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    v12[3] = &type metadata for SecureBytes;
    v12[4] = sub_1A5C009A4();
    v12[0] = a1;
    v4 = *__swift_project_boxed_opaque_existential_1(v12, (uint64_t)&type metadata for SecureBytes);
    swift_beginAccess();
    v5 = (_BYTE *)(v4 + 32);
    v6 = (_BYTE *)(v4 + 32 + *(_QWORD *)(v4 + 16));
    swift_retain_n();
    sub_1A5BF0850(v5, v6, v11);
    swift_release();
    v7 = v11[0];
    v8 = v11[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    result = swift_release();
    *a2 = v7;
    a2[1] = v8;
  }
  return result;
}

uint64_t AES.CCM.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A5C41C54() < 1)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    v9 = sub_1A5C419FC();
    v11 = v10;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v9;
    a3[1] = v11;
  }
  return result;
}

uint64_t AES.CCM.Nonce.withUnsafeBytes<A>(_:)()
{
  return sub_1A5C41990();
}

void AES.CCM.Nonce.makeIterator()()
{
  __asm { BR              X10 }
}

size_t sub_1A5C09EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  return sub_1A5BF1478((size_t)&v3, (unint64_t)&v3 + BYTE6(v1));
}

uint64_t sub_1A5C0A094()
{
  return AES.CCM.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A5C0A0A8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  AES.CCM.Nonce.makeIterator()();
  v4 = v3;
  result = sub_1A5BEFF90(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *a1 = v4;
  a1[1] = 0;
  return result;
}

uint64_t sub_1A5C0A0E0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = sub_1A5C26274(v1, v2);
  sub_1A5BEFF90(v1, v2);
  return v3;
}

uint64_t sub_1A5C0A124(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1A5C252BC(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

unint64_t sub_1A5C0A130()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECF97888;
  if (!qword_1ECF97888)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECF979C0);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEC908], v1);
    atomic_store(result, (unint64_t *)&qword_1ECF97888);
  }
  return result;
}

uint64_t *_s5NonceVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1A5BEE468(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t *_s5NonceVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1A5BEE468(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1A5BEFF90(v5, v6);
  return a1;
}

uint64_t *_s5NonceVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1A5BEFF90(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AES.CCM.Nonce()
{
  return &type metadata for AES.CCM.Nonce;
}

uint64_t sub_1A5C0A248()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(5064011, 0xE300000000000000);
  qword_1EE801578 = result;
  unk_1EE801580 = v1;
  return result;
}

uint64_t sub_1A5C0A274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, unint64_t a3@<X6>, char *a4@<X7>, size_t *a5@<X8>, char *a6)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  char v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;

  v8 = *a4;
  v19 = *a4;
  v9 = *a6;
  if (qword_1EE800FF0 != -1)
    swift_once();
  v24 = qword_1EE801578;
  v25 = qword_1EE801580;
  v10 = qword_1A5C44170[v8];
  sub_1A5BEE468(qword_1EE801578, qword_1EE801580);
  sub_1A5C17A00(v10, 2);
  v12 = v11;
  v14 = v13;
  sub_1A5C419D8();
  sub_1A5BEFF90(v12, v14);
  v23 = xmmword_1A5C42A80;
  sub_1A5C419D8();
  sub_1A5C419D8();
  if (a3 >> 60 != 15)
  {
    sub_1A5BEE468(a2, a3);
    sub_1A5C419D8();
    sub_1A5BF4040(a2, a3);
  }
  v15 = v23;
  v16 = v24;
  v17 = v25;
  LOBYTE(v23) = v19;
  v22 = v9;
  sub_1A5BEE468(v24, v25);
  sub_1A5C1FBF4(a1, v15, *((uint64_t *)&v15 + 1), (unsigned __int8 *)&v23, &v22, a5);
  sub_1A5BEFF90(v16, v17);
  sub_1A5BEFF90(v15, *((unint64_t *)&v15 + 1));
  return sub_1A5BEFF90(v16, v17);
}

uint64_t sub_1A5C0A414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  swift_unknownObjectRetain();
  sub_1A5C4157C(a2, a3, a4, a5);
  return swift_unknownObjectRelease();
}

unint64_t sub_1A5C0A484()
{
  unint64_t result;

  result = qword_1EE801588;
  if (!qword_1EE801588)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C441B8, &_s15ASN1OctetStringVN);
    atomic_store(result, (unint64_t *)&qword_1EE801588);
  }
  return result;
}

ValueMetadata *_s15ASN1OctetStringVMa()
{
  return &_s15ASN1OctetStringVN;
}

BOOL static IEEESecurity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t IEEESecurity.hash(into:)()
{
  return sub_1A5C41F18();
}

void *static IEEESecurity.allCases.getter()
{
  return &unk_1E4F753A0;
}

uint64_t IEEESecurity.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

BOOL sub_1A5C0A568(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_1A5C0A584()
{
  unint64_t result;

  result = qword_1EE801590;
  if (!qword_1EE801590)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for IEEESecurity, &type metadata for IEEESecurity);
    atomic_store(result, (unint64_t *)&qword_1EE801590);
  }
  return result;
}

unint64_t sub_1A5C0A5CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE801598;
  if (!qword_1EE801598)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE8015A0);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE801598);
  }
  return result;
}

void sub_1A5C0A618(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4F75438;
}

uint64_t getEnumTagSinglePayload for IEEESecurity(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEESecurity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A5C0A704 + 4 * byte_1A5C44265[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A5C0A738 + 4 * byte_1A5C44260[v4]))();
}

uint64_t sub_1A5C0A738(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C0A740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5C0A748);
  return result;
}

uint64_t sub_1A5C0A754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5C0A75CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A5C0A760(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C0A768(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1A5C0A774(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IEEESecurity()
{
  return &type metadata for IEEESecurity;
}

uint64_t SecureEnclave.P256.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A5C0A800();
}

uint64_t sub_1A5C0A7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1A5C0A85C(a1, a2, *(void **)(v3 + 40), (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C60], 32, a3);
}

uint64_t SecureEnclave.P384.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A5C0A800();
}

uint64_t sub_1A5C0A800()
{
  return sub_1A5C418D0();
}

uint64_t sub_1A5C0A85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  _OWORD *v26;
  uint64_t (*v27)(uint64_t);

  v25 = a5;
  v26 = a6;
  v27 = a4;
  v10 = sub_1A5C4190C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0CB00C8], v10);
    sub_1A5C41900();
    v14 = a2 - a1;
    if (v14)
    {
      sub_1A5C418C4();
      swift_allocObject();
      swift_retain();
      v18 = sub_1A5C4187C();
      v16 = sub_1A5C2B374(v18, v14);
      v17 = v19;
      swift_release();
    }
    else
    {
      v15 = (void (*)(uint64_t, _QWORD))sub_1A5C41900();
      v15(a1, 0);
      swift_release();
      swift_release();
      v16 = 0;
      v17 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v20 = sub_1A5C0AA74(a3);
    if (!v6)
    {
      v22 = (uint64_t)v20;
      v23 = v21;
      sub_1A5BEE468((uint64_t)v20, v21);
      sub_1A5C0AC00(v22, v23, v27, v26);
      sub_1A5BEFF90(v22, v23);
    }
    return sub_1A5BEFF90(v16, v17);
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C0AA4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1A5C0A85C(a1, a2, *(void **)(v3 + 40), (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C68], 61, a3);
}

void *sub_1A5C0AA74(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)sub_1A5C4199C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800120);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A5C44370;
  *(_QWORD *)(v3 + 32) = sub_1A5C41AD4();
  *(_QWORD *)(v3 + 40) = v4;
  v5 = (void *)sub_1A5C41BDC();
  swift_bridgeObjectRelease();
  sub_1A5C14AD8(MEMORY[0x1E0DEE9D8]);
  v6 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v7 = objc_msgSend(a1, sel_sign_algorithms_parameters_error_, v2, v5, v6, v11);

  v8 = v11[0];
  if (v7)
  {
    v9 = (void *)sub_1A5C419B4();

  }
  else
  {
    v9 = v8;
    sub_1A5C418E8();

    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1A5C0AC00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37[8];
  uint64_t v38;
  _BYTE v39[56];
  uint64_t v40;

  sub_1A5C29738(a1, a2);
  sub_1A5C274FC(v9, v9 + 32, 0, (2 * *(_QWORD *)(v9 + 16)) | 1, (uint64_t)v37);
  if (v4)
  {
    sub_1A5BEFF90(a1, a2);
    return swift_release();
  }
  swift_release();
  sub_1A5BFB08C((uint64_t)&v38, (uint64_t)v39);
  sub_1A5C0B808((uint64_t)v39);
  v11 = sub_1A5C3FFE4(v37, 0x30u, (uint64_t *)&v31);
  v12 = v32;
  v29 = v33;
  v27 = v34;
  v28 = v31;
  v25 = v36;
  v26 = v35;
  result = a3(v11);
  if (!result)
    goto LABEL_34;
  v13 = result;
  v14 = (void *)objc_opt_self();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  v33 = v15;
  *(_QWORD *)&v31 = v13;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v30);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v24 = v12;
  v16 = __OFSUB__(v29 >> 1, v12);
  v17 = (v29 >> 1) - v12;
  if (v16)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result < v17)
  {
LABEL_9:
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v18 = 1;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1A5BF67DC((uint64_t)v37);
    return sub_1A5BEFF90(a1, a2);
  }
  if (__OFSUB__(v25 >> 1, v26))
    goto LABEL_23;
  if (result < (uint64_t)((v25 >> 1) - v26))
    goto LABEL_9;
  v23 = (v25 >> 1) - v26;
  v33 = v15;
  *(_QWORD *)&v31 = v13;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
    goto LABEL_24;
  if (result + 0x4000000000000000 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1A5C41960();
  v33 = v15;
  *(_QWORD *)&v31 = v13;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v16 = __OFSUB__(result, v17);
  result -= v17;
  if (v16)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (result < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1A5BEEEB4();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97708);
  v33 = v19;
  v22 = sub_1A5C0B840();
  *(_QWORD *)&v34 = v22;
  v20 = swift_allocObject();
  *(_QWORD *)&v31 = v20;
  *(_OWORD *)(v20 + 16) = v28;
  *(_QWORD *)(v20 + 32) = v24;
  *(_QWORD *)(v20 + 40) = v29;
  result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v31, v19);
  if (__OFSUB__(*(_QWORD *)(result + 24) >> 1, *(_QWORD *)(result + 16)))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_unknownObjectRetain_n();
  sub_1A5C4196C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  swift_unknownObjectRelease();
  v33 = v15;
  *(_QWORD *)&v31 = v13;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v16 = __OFSUB__(result, v23);
  result -= v23;
  if (v16)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1A5BEEEB4();
    v33 = v19;
    *(_QWORD *)&v34 = v22;
    v21 = swift_allocObject();
    *(_QWORD *)&v31 = v21;
    *(_OWORD *)(v21 + 16) = v27;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v21 + 40) = v25;
    result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v31, v19);
    if (!__OFSUB__(*(_QWORD *)(result + 24) >> 1, *(_QWORD *)(result + 16)))
    {
      swift_unknownObjectRetain_n();
      sub_1A5C4196C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1A5BF67DC((uint64_t)v37);
      sub_1A5BEFF90(a1, a2);
      result = swift_unknownObjectRelease();
      *a4 = xmmword_1A5C42A80;
      return result;
    }
    goto LABEL_33;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t SecureEnclave.P256.Signing.PrivateKey.signature<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD v24[2];
  _OWORD v25[2];
  _QWORD v26[2];

  v23 = a3;
  v26[1] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v18 - v8;
  v10 = *v3;
  v21 = v3[1];
  v22 = v10;
  v11 = v3[2];
  v19 = (void *)v3[3];
  v20 = v11;
  v12 = ccsha256_di();
  if (!v12)
    __break(1u);
  v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A18);
  v14 = swift_allocObject();
  getDigestSizeForDigestInfo();
  v15 = swift_slowAlloc();
  ccdigest_init();
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v15;
  v26[0] = v14;
  v16 = sub_1A5C41828();
  MEMORY[0x1E0C80A78](v16);
  *(&v18 - 4) = a1;
  *(&v18 - 3) = a2;
  *(&v18 - 2) = (uint64_t)v26;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_retain();
  sub_1A5BF1308((uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  sub_1A5C0A85C((uint64_t)v24, (uint64_t)v25, v19, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C60], 32, v23);
  return swift_release();
}

uint64_t sub_1A5C0B308()
{
  return sub_1A5C0B568();
}

uint64_t SecureEnclave.P384.Signing.PrivateKey.signature<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD v24[3];
  _OWORD v25[3];
  _QWORD v26[2];

  v23 = a3;
  v26[1] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v18 - v8;
  v10 = *v3;
  v21 = v3[1];
  v22 = v10;
  v11 = v3[2];
  v19 = (void *)v3[3];
  v20 = v11;
  v12 = ccsha384_di();
  if (!v12)
    __break(1u);
  v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97818);
  v14 = swift_allocObject();
  getDigestSizeForDigestInfo();
  v15 = swift_slowAlloc();
  ccdigest_init();
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v15;
  v26[0] = v14;
  v16 = sub_1A5C41828();
  MEMORY[0x1E0C80A78](v16);
  *(&v18 - 4) = a1;
  *(&v18 - 3) = a2;
  *(&v18 - 2) = (uint64_t)v26;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_retain();
  sub_1A5C0B664((uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  v24[2] = v25[2];
  sub_1A5C0A85C((uint64_t)v24, (uint64_t)v25, v19, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C68], 61, v23);
  return swift_release();
}

uint64_t sub_1A5C0B568()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5C0B664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;

  v3 = sub_1A5C41C00();
  *(_QWORD *)(v3 + 16) = 48;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(_QWORD *)(v1 + 16));
  if (*(_QWORD *)(v3 + 16) == 48)
  {
    v7 = *(_OWORD *)(v3 + 48);
    v8 = *(_OWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 64);
    v5 = *(_QWORD *)(v3 + 72);
    result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C0B704@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = sub_1A5C41C00();
  *(_QWORD *)(v3 + 16) = 20;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  ccdigest_final(*(_QWORD *)(v1 + 16));
  if (*(_QWORD *)(v3 + 16) == 20)
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(unsigned int *)(v3 + 48);
    result = swift_bridgeObjectRelease();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C0B794()
{
  return sub_1A5C0B568();
}

void *sub_1A5C0B7B8(uint64_t a1, uint64_t a2)
{
  return sub_1A5C11CB0(a1, a2);
}

void *sub_1A5C0B7E0(uint64_t a1, uint64_t a2)
{
  return sub_1A5C11CBC(a1, a2);
}

uint64_t sub_1A5C0B808(uint64_t a1)
{
  j__swift_unknownObjectRetain(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

unint64_t sub_1A5C0B840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECF97700;
  if (!qword_1ECF97700)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECF97708);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB25C0], v1);
    atomic_store(result, (unint64_t *)&qword_1ECF97700);
  }
  return result;
}

uint64_t sub_1A5C0B88C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t _s7ContextVwxx(_QWORD *a1)
{
  unint64_t v2;

  swift_release();
  v2 = a1[3];
  if (v2 >> 60 != 15)
    sub_1A5BEFF90(a1[2], v2);
  swift_release();
  return sub_1A5BEFF90(a1[6], a1[7]);
}

uint64_t _s7ContextVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_1A5BEE468(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v9 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  swift_retain();
  sub_1A5BEE468(v9, v8);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

uint64_t _s7ContextVwca(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1A5BEE468(*v4, *(_QWORD *)(a2 + 24));
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v5;
      sub_1A5BEFF90(v8, v9);
      goto LABEL_8;
    }
    sub_1A5BF431C(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1A5BEE468(*v4, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  sub_1A5BEE468(v11, v10);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v10;
  sub_1A5BEFF90(v12, v13);
  return a1;
}

uint64_t _s7ContextVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v5;
      *(_QWORD *)(a1 + 24) = v7;
      sub_1A5BEFF90(v8, v6);
      goto LABEL_6;
    }
    sub_1A5BF431C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_1A5BEFF90(v9, v10);
  return a1;
}

uint64_t _s7ContextVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7ContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s7ContextVMa()
{
  return &_s7ContextVN;
}

uint64_t sub_1A5C0BC14@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  int v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t *, uint64_t);
  uint64_t *v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char v59[3];
  _QWORD v60[5];
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int16 v66;
  char v67;
  uint64_t v68;

  v57 = a3;
  v53 = a7;
  v54 = a8;
  v55 = a4;
  v56 = a5;
  v52 = a2;
  v49 = a9;
  v13 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = _s5DHKEMO9PublicKeyVMa(0, a10, a11, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v45 - v19;
  v21 = *a1;
  v22 = a1[1];
  v50 = a1[2];
  v51 = v22;
  v23 = *v57;
  v24 = *(void (**)(char *, uint64_t *, uint64_t))(v13 + 16);
  v57 = a6;
  v25 = a6;
  v26 = v21;
  v24(v15, v25, a10);
  LOBYTE(v61) = v26;
  v27 = v58;
  sub_1A5C0CCD8((uint64_t)v15, (char *)&v61, a10, a11, v20);
  if (v27)
  {
    swift_release();
    sub_1A5BEFF90(v53, v54);
    sub_1A5BF4040(v55, v56);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v57, a10);
  }
  else
  {
    v28 = v26;
    v29 = v23;
    v30 = v53;
    v48 = a10;
    v58 = v18;
    v31 = v57;
    sub_1A5C0CD8C(v17, &v61);
    v46 = v20;
    v47 = v17;
    v33 = v61;
    v34 = v62;
    v35 = v63;
    v60[3] = &type metadata for SymmetricKey;
    v60[4] = sub_1A5BF4054();
    v60[0] = v33;
    v68 = v29;
    v36 = v34;
    v59[0] = v28;
    v59[1] = v51;
    v59[2] = v50;
    sub_1A5BEE468(v34, v35);
    sub_1A5BEE468(v34, v35);
    swift_retain();
    sub_1A5BF2C00(v52, (uint64_t)v60, v30, v54, &v68, v55, v56, v59, (uint64_t)&v61);
    v37 = v31;
    v38 = v58;
    v39 = v48;
    swift_release();
    sub_1A5BEFF90(v36, v35);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v37, v39);
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v46, v47);
    v40 = v62;
    v58 = v61;
    v41 = v63;
    v42 = v64;
    v43 = v65;
    LODWORD(v57) = v66;
    LOBYTE(v30) = v67;
    swift_retain();
    sub_1A5BEF914(v41, v42);
    swift_retain();
    sub_1A5BEE468(v36, v35);
    sub_1A5BEFF90(v36, v35);
    v44 = v49;
    *v49 = v58;
    v44[1] = v40;
    v44[2] = v41;
    v44[3] = v42;
    v44[4] = v43;
    *((_WORD *)v44 + 20) = (_WORD)v57;
    *((_BYTE *)v44 + 42) = v30;
    v44[6] = v36;
    v44[7] = v35;
    swift_release();
    sub_1A5BF4040(v41, v42);
    swift_release();
    return sub_1A5BEFF90(v36, v35);
  }
}

uint64_t sub_1A5C0BFAC@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, size_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  size_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t *v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char v75[3];
  _QWORD v76[5];
  size_t v77[5];
  unsigned __int16 v78;
  char v79;
  uint64_t v80;

  v66 = a8;
  v65 = a7;
  v71 = a6;
  v72 = a3;
  v67 = a4;
  v68 = a5;
  v59 = a2;
  v56 = a9;
  v74 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v63 = (unint64_t)&v53 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v69 = AssociatedTypeWitness;
  v62 = AssociatedConformanceWitness;
  v61 = _s5DHKEMO9PublicKeyVMa(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v60 = *(_QWORD *)(v61 - 8);
  v17 = MEMORY[0x1E0C80A78](v61);
  v64 = (char *)&v53 - v18;
  v19 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = _s5DHKEMO10PrivateKeyVMa(0, a11, a12, v22);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (uint64_t *)((char *)&v53 - v25);
  v27 = *a1;
  v58 = a1[1];
  v57 = a1[2];
  v28 = *v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v74, a11);
  LOBYTE(v77[0]) = v27;
  v29 = v73;
  sub_1A5C0D0B0((uint64_t)v21, (char *)v77, a11, a12, (uint64_t)v26);
  if (v29)
  {
    swift_release();
    sub_1A5BEFF90(v65, v66);
    sub_1A5BF4040(v67, v68);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v74, a11);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v71, v69);
  }
  else
  {
    v53 = v28;
    v54 = v19;
    v72 = v26;
    v55 = v24;
    v73 = v23;
    v31 = v70;
    v32 = v71;
    v33 = v63;
    v34 = v69;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v70 + 16))(v63, v71, v69);
    LOBYTE(v77[0]) = v27;
    v35 = v64;
    sub_1A5C0CCD8(v33, (char *)v77, v34, v62, v64);
    v36 = sub_1A5C0D228(v77, (uint64_t)v35, v73);
    v37 = v77[0];
    v39 = v38;
    v40 = v36;
    swift_retain();
    sub_1A5BEE468(v40, v39);
    swift_release();
    v76[3] = &type metadata for SymmetricKey;
    v76[4] = sub_1A5BF4054();
    v76[0] = v37;
    v80 = v53;
    v75[0] = v27;
    v75[1] = v58;
    v75[2] = v57;
    swift_retain();
    v41 = v40;
    v63 = v39;
    sub_1A5BEE468(v40, v39);
    sub_1A5BF2C00(v59, (uint64_t)v76, v65, v66, &v80, v67, v68, v75, (uint64_t)v77);
    v42 = v74;
    v43 = v55;
    swift_release();
    v44 = v41;
    v45 = v41;
    v46 = v63;
    sub_1A5BEFF90(v45, v63);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v42, a11);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v34);
    (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v64, v61);
    (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v72, v73);
    v47 = v77[0];
    v48 = v77[1];
    v49 = v77[2];
    v50 = v77[3];
    v51 = v77[4];
    LODWORD(v74) = v78;
    LOBYTE(v32) = v79;
    swift_retain();
    sub_1A5BEF914(v49, v50);
    swift_retain();
    sub_1A5BEE468(v44, v46);
    sub_1A5BEFF90(v44, v46);
    v52 = v56;
    *v56 = v47;
    v52[1] = v48;
    v52[2] = v49;
    v52[3] = v50;
    v52[4] = v51;
    *((_WORD *)v52 + 20) = v74;
    *((_BYTE *)v52 + 42) = v32;
    v52[6] = v44;
    v52[7] = v46;
    swift_release();
    sub_1A5BF4040(v49, v50);
    swift_release();
    return sub_1A5BEFF90(v44, v46);
  }
}

uint64_t sub_1A5C0C5FC@<X0>(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, size_t a8@<X7>, size_t *a9@<X8>, uint64_t a10, unint64_t a11, _BYTE *a12, uint64_t a13, uint64_t a14)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  size_t v55;
  __int16 v56;
  size_t *v57;
  _BYTE v58[12];
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t *v64;
  int v65;
  int v66;
  unsigned int v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  size_t v83;
  char v84[3];
  _QWORD v85[5];
  size_t v86[5];
  __int16 v87;
  char v88;
  uint64_t v89;

  v83 = a8;
  v75 = a7;
  v74 = a6;
  v78 = a4;
  v79 = a5;
  v77 = a3;
  v67 = a2;
  v64 = a9;
  v82 = a12;
  v73 = a11;
  v72 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v81 = sub_1A5C41CF0();
  v76 = *(_QWORD *)(v81 - 8);
  v16 = MEMORY[0x1E0C80A78](v81);
  v69 = &v58[-v17];
  v71 = AssociatedTypeWitness;
  v70 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v68 = &v58[-v19];
  v20 = *(_QWORD *)(a13 - 8);
  MEMORY[0x1E0C80A78](v18);
  v22 = &v58[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = _s5DHKEMO10PrivateKeyVMa(0, a13, a14, v23);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (uint64_t *)&v58[-v26];
  v28 = *a1;
  v66 = a1[1];
  v65 = a1[2];
  v29 = *v79;
  (*(void (**)(_BYTE *, size_t, uint64_t))(v20 + 16))(v22, v83, a13);
  LOBYTE(v86[0]) = v28;
  v30 = v80;
  sub_1A5C0D0B0((uint64_t)v22, (char *)v86, a13, a14, (uint64_t)v27);
  if (v30)
  {
    swift_release();
    sub_1A5BEFF90(v72, v73);
    sub_1A5BF4040(v74, v75);
    sub_1A5BEFF90(v77, v78);
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v82, v81);
    return (*(uint64_t (**)(size_t, uint64_t))(v20 + 8))(v83, a13);
  }
  v63 = 0;
  v59 = v28;
  v32 = v68;
  v79 = v27;
  v61 = a13;
  v62 = v25;
  v80 = v24;
  v60 = v20;
  v34 = v77;
  v33 = v78;
  v35 = v76;
  v36 = v69;
  v38 = v81;
  v37 = v82;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 16))(v69, v82, v81);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48))(v36, 1, v71) == 1)
  {
    v39 = *(void (**)(_BYTE *, uint64_t))(v35 + 8);
    v39(v36, v38);
    v40 = v34;
    v41 = v34;
    v42 = v35;
    v43 = v79;
    v44 = v80;
    v45 = v63;
    sub_1A5C0E1E0(v41, v33, v80, v86);
    if (v45)
    {
      swift_release();
      sub_1A5BEFF90(v72, v73);
      sub_1A5BF4040(v74, v75);
      sub_1A5BEFF90(v40, v33);
      v39(v82, v38);
      (*(void (**)(size_t, uint64_t))(v60 + 8))(v83, v61);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v62 + 8))(v43, v44);
    }
    v50 = v86[0];
  }
  else
  {
    v46 = v32;
    (*(void (**)(char *, _BYTE *, uint64_t))(v70 + 32))(v32, v36, v71);
    v40 = v34;
    v47 = v34;
    v43 = v79;
    v48 = v80;
    v49 = v63;
    sub_1A5C0DA68(v47, v33, v46, v80, v86);
    if (v49)
    {
      swift_release();
      sub_1A5BEFF90(v72, v73);
      sub_1A5BF4040(v74, v75);
      sub_1A5BEFF90(v40, v33);
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v37, v81);
      (*(void (**)(size_t, uint64_t))(v60 + 8))(v83, v61);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v71);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v62 + 8))(v43, v48);
    }
    v42 = v35;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v71);
    v50 = v86[0];
    v38 = v81;
  }
  v51 = v60;
  v85[3] = &type metadata for SymmetricKey;
  v85[4] = sub_1A5BF4054();
  v85[0] = v50;
  v89 = v29;
  v84[0] = v59;
  v84[1] = v66;
  v84[2] = v65;
  sub_1A5BEE468(v40, v33);
  swift_retain();
  sub_1A5BF2C00(v67, (uint64_t)v85, v72, v73, &v89, v74, v75, v84, (uint64_t)v86);
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v82, v38);
  (*(void (**)(size_t, uint64_t))(v51 + 8))(v83, v61);
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v43, v80);
  v52 = v86[1];
  v83 = v86[0];
  v53 = v86[2];
  v54 = v86[3];
  v55 = v86[4];
  v56 = v87;
  LOBYTE(v51) = v88;
  swift_retain();
  sub_1A5BEF914(v53, v54);
  swift_retain();
  sub_1A5BEE468(v40, v33);
  sub_1A5BEFF90(v40, v33);
  v57 = v64;
  *v64 = v83;
  v57[1] = v52;
  v57[2] = v53;
  v57[3] = v54;
  v57[4] = v55;
  *((_WORD *)v57 + 20) = v56;
  *((_BYTE *)v57 + 42) = v51;
  v57[6] = v40;
  v57[7] = v33;
  swift_release();
  sub_1A5BF4040(v53, v54);
  swift_release();
  return sub_1A5BEFF90(v40, v33);
}

uint64_t dispatch thunk of HPKEPublicKeySerialization.init<A>(_:kem:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of HPKEPublicKeySerialization.hpkeRepresentation(kem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of HPKEDiffieHellmanPrivateKeyGeneration.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for HPKE.DHKEM()
{
  return &type metadata for HPKE.DHKEM;
}

uint64_t sub_1A5C0CCD8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v10 = *a2;
  v16 = *a2;
  v11 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a4 + 8) + 16))(&v16, a3);
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  sub_1A5BEFF90(v11, v12);
  v15 = _s5DHKEMO9PublicKeyVMa(0, a3, a4, v14);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(&a5[*(int *)(v15 + 36)], a1, a3);
  *a5 = v10;
  return result;
}

uint64_t sub_1A5C0CD8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD v39[5];
  size_t v40;

  v32 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v5 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v27 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v13 = *(int *)(a1 + 36);
  v34 = v2;
  v14 = *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8);
  v15 = v36;
  (*(void (**)(_QWORD *__return_ptr, _BYTE *, uint64_t, uint64_t))(v14 + 24))(v39, &v2[v13], AssociatedTypeWitness, v14);
  if (v15)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v36 = v9;
  v31 = v39[0];
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(AssociatedTypeWitness, v14);
  v17 = v34;
  LOBYTE(v39[0]) = *v34;
  v18 = *(_QWORD *)(v7 + 8);
  v28 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16);
  v29 = v28(v39, v4, v18);
  v30 = v19;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v4);
  LOBYTE(v39[0]) = *v17;
  v20 = v39[0];
  v21 = v28(v39, v4, v18);
  v23 = v22;
  v39[3] = &type metadata for SharedSecret;
  v39[4] = sub_1A5C0E168();
  v39[0] = v31;
  v38 = v20;
  v37 = 0x20100u >> (8 * v20);
  swift_retain();
  v25 = v29;
  v24 = v30;
  sub_1A5C0A274((uint64_t)v39, 0, 0xF000000000000000, &v38, &v40, &v37);
  sub_1A5BEFF90(v21, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, AssociatedTypeWitness);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  v26 = v32;
  *v32 = v40;
  v26[1] = v25;
  v26[2] = v24;
  return result;
}

uint64_t sub_1A5C0D0B0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD v23[2];
  char v24;

  v23[0] = a5;
  v9 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v23 - v12;
  v14 = *a2;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(a3, v9);
  v24 = v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = v23[1];
  v17 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 16))(&v24, AssociatedTypeWitness);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    sub_1A5BEFF90(v17, v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    v21 = _s5DHKEMO10PrivateKeyVMa(0, a3, a4, v20);
    v22 = (_BYTE *)v23[0];
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v23[0] + *(int *)(v21 + 36), a1, a3);
    *v22 = v14;
  }
  return result;
}

uint64_t sub_1A5C0D228(size_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *__return_ptr, unint64_t, uint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  void (*v31)(_QWORD *__return_ptr, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unsigned __int8 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD v86[3];
  ValueMetadata *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;

  v73 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v77 = a3;
  v80 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v74 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v76 = (char *)v68 - v9;
  v79 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v68 - v13;
  v15 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v11, v15);
  v17 = a2 + *(int *)(_s5DHKEMO9PublicKeyVMa(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16) + 36);
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8);
  v19 = *(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t, uint64_t))(v18 + 24);
  v87 = &type metadata for SharedSecret;
  v20 = sub_1A5C0E168();
  v88 = v20;
  v81 = v17;
  v21 = v91;
  v19(v86, v17, v11, v18);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)v86);
  }
  else
  {
    v70 = AssociatedTypeWitness;
    v71 = v12;
    v72 = v11;
    v91 = v14;
    v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v86, (uint64_t)v87);
    MEMORY[0x1E0C80A78](v22);
    v24 = (_QWORD *)((char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v25 + 16))(v24);
    v26 = *v24;
    swift_beginAccess();
    v27 = sub_1A5BF8F60(v26 + 32, v26 + 32 + *(_QWORD *)(v26 + 16));
    v29 = v28;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    v89 = v27;
    v90 = v29;
    v30 = v78;
    v31 = *(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t))(v80 + 24);
    v87 = &type metadata for SharedSecret;
    v88 = v20;
    v31(v86, v81, v79);
    v77 = 0;
    v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v86, (uint64_t)v87);
    MEMORY[0x1E0C80A78](v33);
    v35 = (_QWORD *)((char *)v68 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    v37 = *v35;
    swift_beginAccess();
    v38 = sub_1A5BF8F60(v37 + 32, v37 + 32 + *(_QWORD *)(v37 + 16));
    v40 = v39;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    sub_1A5C419D8();
    sub_1A5BEFF90(v38, v40);
    v41 = v76;
    v42 = v30;
    v43 = v91;
    v44 = v72;
    (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v72, v18);
    LOBYTE(v86[0]) = *v42;
    v45 = *(_QWORD *)(AssociatedConformanceWitness + 8);
    v46 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v45 + 16);
    v47 = v77;
    v48 = v70;
    v49 = v46(v86, v70, v45);
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v48);
      sub_1A5BEFF90(v89, v90);
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v43, v44);
    }
    else
    {
      v68[1] = v50;
      v69 = v49;
      v51 = *(void (**)(char *, uint64_t))(v75 + 8);
      v51(v41, v48);
      v87 = (ValueMetadata *)MEMORY[0x1E0CB0338];
      v88 = MEMORY[0x1E0CB0318];
      v86[0] = v89;
      v86[1] = v90;
      LODWORD(v77) = *v42;
      LOBYTE(v84) = v77;
      sub_1A5BEE468(v89, v90);
      v76 = (char *)v46(&v84, v48, v45);
      v81 = v52;
      v53 = v74;
      (*(void (**)(uint64_t))(v80 + 16))(v79);
      LOBYTE(v84) = v77;
      v54 = v46(&v84, v48, v45);
      v56 = v55;
      v77 = 0;
      v51(v53, v48);
      v57 = (char)*v78;
      LODWORD(v80) = *v78;
      LODWORD(v79) = 0x20100u >> (8 * v80);
      if (qword_1EE800FF0 != -1)
        swift_once();
      v84 = qword_1EE801578;
      v85 = qword_1EE801580;
      v58 = qword_1A5C44510[v57];
      sub_1A5BEE468(qword_1EE801578, qword_1EE801580);
      sub_1A5C17A00(v58, 2);
      v60 = v59;
      v62 = v61;
      sub_1A5C419D8();
      sub_1A5BEFF90(v60, v62);
      v83 = xmmword_1A5C42A80;
      sub_1A5C419D8();
      v63 = (uint64_t)v76;
      v64 = v81;
      sub_1A5C419D8();
      sub_1A5BEE468(v54, v56);
      sub_1A5C419D8();
      sub_1A5BEFF90(v54, v56);
      v65 = v83;
      v66 = v84;
      v67 = v85;
      LOBYTE(v83) = v80;
      v82 = v79;
      sub_1A5BEE468(v84, v85);
      sub_1A5C1FBF4((uint64_t)v86, v65, *((uint64_t *)&v65 + 1), (unsigned __int8 *)&v83, &v82, v73);
      sub_1A5BEFF90(v66, v67);
      sub_1A5BEFF90(v65, *((unint64_t *)&v65 + 1));
      sub_1A5BEFF90(v66, v67);
      sub_1A5BEFF90(v54, v56);
      sub_1A5BEFF90(v63, v64);
      sub_1A5BEFF90(v89, v90);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v91, v72);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
      return v69;
    }
  }
}

uint64_t sub_1A5C0DA68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, size_t *a5@<X8>)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *, char *, _QWORD, _QWORD, uint64_t, uint64_t);
  void (*v19)(_QWORD, _QWORD);
  uint64_t result;
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, char *, uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(_QWORD, _QWORD);
  uint64_t v44;
  uint64_t (*v45)(uint64_t *, uint64_t, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  char v81[24];
  uint64_t v82;
  unint64_t v83;
  ValueMetadata *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(_QWORD, _QWORD);

  v6 = v5;
  v72 = a3;
  v71 = a5;
  v10 = *(_QWORD *)(a4 + 16);
  v74 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v64 - v15;
  v82 = a1;
  v83 = a2;
  v75 = v6;
  v81[0] = *v6;
  v76 = v10;
  v17 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v18 = *(uint64_t (**)(uint64_t *, char *, _QWORD, _QWORD, uint64_t, uint64_t))(v17 + 8);
  sub_1A5BEE468(a1, a2);
  v19 = v88;
  result = v18(&v82, v81, MEMORY[0x1E0CB0338], MEMORY[0x1E0CB0318], AssociatedTypeWitness, v17);
  if (!v19)
  {
    v69 = v17;
    v88 = (void (*)(_QWORD, _QWORD))v14;
    v67 = a1;
    v70 = AssociatedTypeWitness;
    v68 = a2;
    v21 = (uint64_t *)&v75[*(int *)(a4 + 36)];
    v22 = v74;
    v23 = *(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t))(v74 + 24);
    v84 = &type metadata for SharedSecret;
    v24 = sub_1A5C0E168();
    v85 = v24;
    v23(&v82, v16, v76, v22);
    v65 = v16;
    v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v82, (uint64_t)v84);
    v66 = &v64;
    MEMORY[0x1E0C80A78](v25);
    v27 = v21;
    v28 = (uint64_t *)((char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    v30 = *v28;
    swift_beginAccess();
    v31 = sub_1A5BF8F60(v30 + 32, v30 + 32 + *(_QWORD *)(v30 + 16));
    v33 = v32;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
    v86 = v31;
    v87 = v33;
    v84 = &type metadata for SharedSecret;
    v85 = v24;
    v66 = v27;
    v23(&v82, v72, v76, v22);
    v34 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v82, (uint64_t)v84);
    MEMORY[0x1E0C80A78](v34);
    v36 = (uint64_t *)((char *)&v64 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v37 + 16))(v36);
    v38 = *v36;
    swift_beginAccess();
    v39 = sub_1A5BF8F60(v38 + 32, v38 + 32 + *(_QWORD *)(v38 + 16));
    v41 = v40;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
    sub_1A5C419D8();
    sub_1A5BEFF90(v39, v41);
    v84 = (ValueMetadata *)MEMORY[0x1E0CB0338];
    v85 = MEMORY[0x1E0CB0318];
    v82 = v86;
    v83 = v87;
    v42 = *(void (**)(uint64_t, uint64_t))(v22 + 16);
    sub_1A5BEE468(v86, v87);
    v43 = v88;
    v42(v76, v22);
    LOBYTE(v79) = *v75;
    v44 = v69;
    v45 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v69 + 16);
    v46 = v70;
    v47 = v75;
    v48 = v45(&v79, v70, v69);
    v50 = v49;
    v88 = *(void (**)(_QWORD, _QWORD))(v73 + 8);
    v88(v43, v46);
    v51 = (char)*v47;
    LOBYTE(v79) = *v47;
    v52 = v45(&v79, v46, v44);
    v54 = v53;
    v55 = v52;
    v76 = 0;
    LODWORD(v75) = v51;
    LODWORD(v74) = 0x20100u >> (8 * v51);
    if (qword_1EE800FF0 != -1)
      swift_once();
    v79 = qword_1EE801578;
    v80 = qword_1EE801580;
    v56 = qword_1A5C44510[v51];
    sub_1A5BEE468(qword_1EE801578, qword_1EE801580);
    sub_1A5C17A00(v56, 2);
    v58 = v57;
    v60 = v59;
    sub_1A5C419D8();
    sub_1A5BEFF90(v58, v60);
    v78 = xmmword_1A5C42A80;
    sub_1A5C419D8();
    sub_1A5C419D8();
    sub_1A5BEE468(v55, v54);
    sub_1A5C419D8();
    sub_1A5BEFF90(v55, v54);
    v61 = v78;
    v62 = v79;
    v63 = v80;
    LOBYTE(v78) = (_BYTE)v75;
    v77 = v74;
    sub_1A5BEE468(v79, v80);
    sub_1A5C1FBF4((uint64_t)&v82, v61, *((uint64_t *)&v61 + 1), (unsigned __int8 *)&v78, &v77, v71);
    sub_1A5BEFF90(v62, v63);
    sub_1A5BEFF90(v61, *((unint64_t *)&v61 + 1));
    sub_1A5BEFF90(v62, v63);
    sub_1A5BEFF90(v55, v54);
    sub_1A5BEFF90(v48, v50);
    sub_1A5BEFF90(v86, v87);
    v88(v65, v46);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
  }
  return result;
}

unint64_t sub_1A5C0E168()
{
  unint64_t result;

  result = qword_1EE8015A8[0];
  if (!qword_1EE8015A8[0])
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SharedSecret, &type metadata for SharedSecret);
    atomic_store(result, qword_1EE8015A8);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1A85B4070);
  return result;
}

uint64_t sub_1A5C0E1E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, size_t *a4@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, char *, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  _QWORD v32[3];
  size_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  int v40;
  char v41;
  char v42;

  v5 = v4;
  v33 = a4;
  v8 = *(_QWORD *)(a3 + 16);
  v37 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v32 - v13;
  v39[0] = a1;
  v39[1] = a2;
  v34 = v5;
  v15 = *v5;
  v42 = v15;
  v36 = v8;
  v16 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v17 = *(uint64_t (**)(_QWORD *, char *, _QWORD, _QWORD, uint64_t, uint64_t))(v16 + 8);
  sub_1A5BEE468(a1, a2);
  v18 = v38;
  result = v17(v39, &v42, MEMORY[0x1E0CB0338], MEMORY[0x1E0CB0318], AssociatedTypeWitness, v16);
  if (!v18)
  {
    v40 = v15;
    v38 = AssociatedTypeWitness;
    v32[1] = a1;
    v32[2] = a2;
    v20 = v34;
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(v37 + 24))(v39, v14, v36);
    v21 = v14;
    v22 = v20;
    v32[0] = v21;
    v23 = v39[0];
    v39[3] = &type metadata for SharedSecret;
    v39[4] = sub_1A5C0E168();
    v39[0] = v23;
    v24 = v37;
    v25 = *(void (**)(uint64_t, uint64_t))(v37 + 16);
    swift_retain();
    v26 = v12;
    v25(v36, v24);
    v42 = v40;
    v27 = v38;
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(&v42, v38, v16);
    v30 = v29;
    v31 = *(void (**)(char *, uint64_t))(v35 + 8);
    v31(v26, v27);
    v42 = *v22;
    v41 = 0x20100u >> (8 * v42);
    sub_1A5C0A274((uint64_t)v39, 0, 0xF000000000000000, &v42, v33, &v41);
    sub_1A5BEFF90(v28, v30);
    swift_release();
    v31((char *)v32[0], v27);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  return result;
}

uint64_t sub_1A5C0E4B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A5C0CD8C(a1, a2);
}

void sub_1A5C0E4C8()
{
  sub_1A5C41E64();
  __break(1u);
}

uint64_t sub_1A5C0E520@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v12 = *v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1A5C0CCD8((uint64_t)v8, &v12, AssociatedTypeWitness, AssociatedConformanceWitness, a2);
}

void sub_1A5C0E63C()
{
  sub_1A5C0E4C8();
}

uint64_t sub_1A5C0E648@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, size_t *a4@<X8>)
{
  return sub_1A5C0E1E0(a1, a2, a3, a4);
}

uint64_t _s5DHKEMO10PrivateKeyVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s5DHKEMO10PrivateKeyVMn);
}

uint64_t _s5DHKEMO9PublicKeyVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s5DHKEMO9PublicKeyVMn);
}

uint64_t sub_1A5C0E69C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A5C0E714(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

uint64_t sub_1A5C0E7B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_1A5C0E7D0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_1A5C0E820(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_1A5C0E870(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_1A5C0E8C0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1A5C0E910(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFC)
    v6 = 252;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFC)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      if (v15 >= 4)
        return v15 - 3;
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A5C0E9E4 + 4 * byte_1A5C443D0[(v9 - 1)]))();
}

void sub_1A5C0EA54(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFCu)
    v6 = 252;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_UNKNOWN **sub_1A5C0EC40()
{
  return &off_1E4F77888;
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C0EC88(a1);
}

uint64_t sub_1A5C0EC60@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C0EC88(a1);
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C0EC88(a1);
}

uint64_t sub_1A5C0EC88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t)sub_1A5C0ED04(*(void **)(v1 + 24));
  if (!v2)
  {
    v6 = result;
    v7 = v5;
    sub_1A5BEE468(result, v5);
    sub_1A5C100D4(v6, v7);
    v9 = v8;
    sub_1A5BEFF90(v6, v7);
    result = sub_1A5BEFF90(v6, v7);
    *a1 = v9;
  }
  return result;
}

void *sub_1A5C0ED04(void *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x1E0C80C00];
  sub_1A5C41BF4();
  v2 = ccec_export_pub_size();
  v3 = sub_1A5C41C00();
  *(_QWORD *)(v3 + 16) = v2;
  ccec_export_pub();
  *(_QWORD *)(v3 + 16) = v2;
  v4 = sub_1A5BEBFDC(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (void *)sub_1A5C4199C();
  sub_1A5BEFF90(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800120);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A5C44370;
  *(_QWORD *)(v8 + 32) = sub_1A5C41AD4();
  *(_QWORD *)(v8 + 40) = v9;
  v10 = (void *)sub_1A5C41BDC();
  swift_bridgeObjectRelease();
  sub_1A5C14AD8(MEMORY[0x1E0DEE9D8]);
  v11 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v16[0] = 0;
  v12 = objc_msgSend(a1, sel_exchangeKey_algorithms_parameters_error_, v7, v10, v11, v16);

  v13 = v16[0];
  if (v12)
  {
    v14 = (void *)sub_1A5C419B4();

  }
  else
  {
    v14 = v13;
    sub_1A5C418E8();

    swift_willThrow();
  }
  return v14;
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (uint64_t)sub_1A5C0EF78(*(void **)(v2 + 24), *a1);
  if (!v3)
  {
    v7 = result;
    v8 = v6;
    sub_1A5BEE468(result, v6);
    sub_1A5C100D4(v7, v8);
    v10 = v9;
    sub_1A5BEFF90(v7, v8);
    result = sub_1A5BEFF90(v7, v8);
    *a2 = v10;
  }
  return result;
}

void *sub_1A5C0EF78(void *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x1E0C80C00];
  sub_1A5C41BF4();
  v4 = sub_1A5BEBFDC(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = (void *)sub_1A5C4199C();
  sub_1A5BEFF90(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800120);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A5C44370;
  *(_QWORD *)(v8 + 32) = sub_1A5C41AD4();
  *(_QWORD *)(v8 + 40) = v9;
  v10 = (void *)sub_1A5C41BDC();
  swift_bridgeObjectRelease();
  sub_1A5C14AD8(MEMORY[0x1E0DEE9D8]);
  v11 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v16[0] = 0;
  v12 = objc_msgSend(a1, sel_exchangeKey_algorithms_parameters_error_, v7, v10, v11, v16);

  v13 = v16[0];
  if (v12)
  {
    v14 = (void *)sub_1A5C419B4();

  }
  else
  {
    v14 = v13;
    sub_1A5C418E8();

    swift_willThrow();
  }
  return v14;
}

uint64_t sub_1A5C0F134@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (uint64_t)sub_1A5C0EF78(*(void **)(v2 + 24), *a1);
  if (!v3)
  {
    v7 = result;
    v8 = v6;
    sub_1A5BEE468(result, v6);
    sub_1A5C100D4(v7, v8);
    v10 = v9;
    sub_1A5BEFF90(v7, v8);
    result = sub_1A5BEFF90(v7, v8);
    *a2 = v10;
  }
  return result;
}

uint64_t static HKDF.extract<A>(inputKeyMaterial:salt:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;

  v44 = a3;
  v45 = a5;
  v47 = a1;
  v48 = a2;
  v46 = a7;
  swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v39 - v10;
  v11 = swift_checkMetadataState();
  v42 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v39 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v39 - v14;
  v16 = sub_1A5C41CF0();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v39 - v19;
  v21 = *((_QWORD *)a4 - 1);
  v22 = MEMORY[0x1E0C80A78](v18);
  v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v39 - v25;
  v47 = (_QWORD *)*v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v48, v16);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v21 + 48))(v20, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v27 = sub_1A5C0FEEC(MEMORY[0x1E0DEE9D8]);
    v28 = v27;
LABEL_7:
    v49 = v47;
    MEMORY[0x1E0C80A78](v27);
    *(&v39 - 6) = (char *)v36;
    *(&v39 - 5) = a4;
    *(&v39 - 4) = (char *)v37;
    *(&v39 - 3) = a6;
    *(&v39 - 2) = (char *)v28;
    type metadata accessor for HashedAuthenticationCode(0, v36, v37, v38);
    SymmetricKey.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))sub_1A5C10900, (uint64_t)(&v39 - 8));
    return swift_release();
  }
  (*(void (**)(char *, char *, char *))(v21 + 32))(v26, v20, a4);
  sub_1A5C41828();
  v29 = sub_1A5C41C54();
  v30 = *(void (**)(char *, uint64_t))(v42 + 8);
  v30(v15, v11);
  if (v29 != 1)
  {
    (*(void (**)(char *, char *, char *))(v21 + 16))(v24, v26, a4);
    v35 = sub_1A5C41C0C();
    v28 = sub_1A5C0FEEC(v35);
    swift_bridgeObjectRelease();
    v27 = (*(uint64_t (**)(char *, char *))(v21 + 8))(v26, a4);
    goto LABEL_7;
  }
  v31 = v39;
  sub_1A5C41828();
  v32 = (uint64_t)v40;
  sub_1A5C41C78();
  v30(v31, v11);
  v33 = AssociatedTypeWitness;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v32, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    swift_getAssociatedConformanceWitness();
    SymmetricKey.init<A>(data:)(v32, v33, (uint64_t *)&v49);
    v27 = (*(uint64_t (**)(char *, char *))(v21 + 8))(v26, a4);
    v28 = (size_t)v49;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  double v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t result;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73[5];

  v55 = a8;
  v13 = a4;
  v63 = a2;
  v67 = a1;
  v51 = a9;
  v73[3] = *MEMORY[0x1E0C80C00];
  v58 = type metadata accessor for HashedAuthenticationCode(0, a4, a7, a4);
  v62 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)&v51 - v15;
  v16 = sub_1A5C41CF0();
  v60 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v51 - v18;
  v65 = a6;
  v59 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v17);
  v54 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for HMAC(0, v13, a7, v21);
  v57 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v51 - v24;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = a7;
  v64 = v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31 = ceil((double)a3/ (double)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness));
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v31 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v31 < 256.0)
  {
    v13 = a5;
    LODWORD(a5) = (int)v31;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  swift_once();
LABEL_5:
  v32 = off_1ECF977E8;
  v72 = off_1ECF977E8;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v67, v13);
  swift_retain();
  SymmetricKey.init<A>(data:)((uint64_t)v28, v13, v73);
  if (!(_DWORD)a5)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  v53 = a10;
  v67 = v73[0];
  v55 = (uint64_t)v73 + 1;
  swift_retain();
  LOBYTE(v33) = 1;
  v34 = v59;
  while (1)
  {
    v73[0] = v67;
    swift_retain();
    HMAC.init(key:)(v73, v64, v66);
    v73[0] = (uint64_t)v32;
    v35 = sub_1A5C00530();
    HMAC.update<A>(data:)((uint64_t)v73, v22, (uint64_t)&type metadata for SecureBytes, v35);
    v37 = v60;
    v36 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v19, v63, v61);
    v38 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v19, 1, v65) == 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v36);
    }
    else
    {
      v39 = (uint64_t)v54;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v19, v38);
      HMAC.update<A>(data:)(v39, v22, v38, v53);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v38);
    }
    LOBYTE(v73[0]) = v33;
    sub_1A5BFC158((uint64_t)v73, v55, v22);
    v40 = v56;
    HMAC.finalize()(v22, v56);
    v41 = v58;
    MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, v58);
    v42 = sub_1A5BECE14();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v41);
    swift_release();
    v43 = swift_retain();
    sub_1A5C0FB68(v43);
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v22);
    if ((_DWORD)a5 == v33)
      break;
    v33 = v33 + 1;
    v32 = (void *)v42;
    if ((v33 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  v44 = v52;
  if (v52 < 0)
    goto LABEL_25;
  v45 = (uint64_t)v72;
  swift_beginAccess();
  v46 = *(_QWORD *)(v45 + 16);
  v47 = sub_1A5C0FE28(0, v44, v46, v45);
  if ((v48 & 1) != 0)
    v49 = v46;
  else
    v49 = v47;
  if ((v49 | v46) < 0)
    goto LABEL_26;
  if (v46 < v49)
    goto LABEL_27;
  v68 = 0;
  v69 = v49;
  v70 = v45;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  type metadata accessor for SecureBytes.Backing();
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v51 = v71;
  return result;
}

uint64_t sub_1A5C0FB68(uint64_t a1)
{
  const void **v1;
  const void **v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v2 = v1;
  v4 = *v1;
  swift_beginAccess();
  v5 = v4[2];
  result = swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = __OFADD__(v5, v7);
  v9 = v5 + v7;
  if (v8)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v2);
    if (result - 32 >= v9)
      return sub_1A5C2CD10(a1);
  }
  if (v9 < 0)
    goto LABEL_15;
  if (HIDWORD(v9))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((_DWORD)v9)
  {
    v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v12 = v11 | HIWORD(v11);
    if (v12 == -1)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = (v12 + 1);
  }
  else
  {
    v13 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = (char *)*v2;
  result = swift_beginAccess();
  v16 = *((_QWORD *)v15 + 2);
  if ((v16 & 0x8000000000000000) == 0)
  {
    sub_1A5BFEB14(v15, 0, v16);
    *v2 = (const void *)v14;
    swift_release();
    return sub_1A5C2CD10(a1);
  }
LABEL_17:
  __break(1u);
  return result;
}

size_t sub_1A5C0FCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v4;
  const void **v5;
  _QWORD *v10;
  size_t result;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v5 = v4;
  v10 = *v4;
  result = swift_beginAccess();
  v12 = a4 - a3;
  if (!a3)
    v12 = 0;
  if (a1 < 0 || v12 < a1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a2 < 0 || v12 < a2)
    goto LABEL_21;
  v13 = v10[2];
  v14 = v13 + a2 - a1;
  if (__OFADD__(v13, a2 - a1))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v5);
    if ((uint64_t)(result - 32) >= v14)
      return sub_1A5C2CDDC(a1, a2, a3, a4);
  }
  if (v14 < 0)
    goto LABEL_23;
  if (HIDWORD(v14))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v14)
  {
    v15 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v17 = v16 | HIWORD(v16);
    if (v17 == -1)
      v18 = 0xFFFFFFFFLL;
    else
      v18 = (v17 + 1);
  }
  else
  {
    v18 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = (char *)*v5;
  result = swift_beginAccess();
  v21 = *((_QWORD *)v20 + 2);
  if ((v21 & 0x8000000000000000) == 0)
  {
    sub_1A5BFEB14(v20, 0, v21);
    *v5 = (const void *)v19;
    swift_release();
    return sub_1A5C2CDDC(a1, a2, a3, a4);
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1A5C0FE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = swift_beginAccess();
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 < a3 || (a3 | a1) < 0 || v9 < a1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= a2)
      goto LABEL_11;
    return 0;
  }
  if (v10 <= 0 && v10 > a2)
    return 0;
LABEL_11:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v9 < result)
    goto LABEL_17;
  return result;
}

size_t sub_1A5C0FEEC(size_t result)
{
  size_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(result + 16);
  if (HIDWORD(v1))
  {
    __break(1u);
  }
  else
  {
    if ((_DWORD)v1)
    {
      v2 = (v1 - 1) | ((v1 - 1) >> 1) | ((((_DWORD)v1 - 1) | ((v1 - 1) >> 1)) >> 2);
      v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
      v4 = v3 | HIWORD(v3);
      if (v4 == -1)
        v5 = 0xFFFFFFFFLL;
      else
        v5 = (v4 + 1);
    }
    else
    {
      v5 = 1;
    }
    v6 = (const void *)(result + 32);
    type metadata accessor for SecureBytes.Backing();
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = 0;
    v7[3] = v5;
    _swift_stdlib_malloc_size(v7);
    memcpy(v7 + 4, v6, v1);
    swift_beginAccess();
    v7[2] = v1;
    result = _swift_stdlib_malloc_size(v7);
    if ((uint64_t)(result - 32) >= (uint64_t)v1)
      return (size_t)v7;
  }
  __break(1u);
  return result;
}

size_t sub_1A5C0FFD4(uint64_t a1)
{
  size_t result;
  size_t v3;
  const void *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;

  result = swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
  }
  else
  {
    v4 = (const void *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
      v7 = v6 | HIWORD(v6);
      if (v7 == -1)
        v8 = 0xFFFFFFFFLL;
      else
        v8 = (v7 + 1);
    }
    else
    {
      v8 = 1;
    }
    type metadata accessor for SecureBytes.Backing();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = 0;
    v9[3] = v8;
    _swift_stdlib_malloc_size(v9);
    memcpy(v9 + 4, v4, v3);
    swift_beginAccess();
    v9[2] = v3;
    result = _swift_stdlib_malloc_size(v9);
    if ((uint64_t)(result - 32) >= (uint64_t)v3)
      return (size_t)v9;
  }
  __break(1u);
  return result;
}

void sub_1A5C100D4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_1A5C10114(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __src, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  __int16 v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v44 = v37;
  v45 = v38;
  v46 = BYTE2(v38);
  v47 = BYTE3(v38);
  v48 = BYTE4(v38);
  v39 = BYTE6(v38);
  v49 = BYTE5(v38);
  if (BYTE6(v38))
  {
    v40 = (BYTE6(v38) - 1) | ((BYTE6(v38) - 1) >> 1) | (((BYTE6(v38) - 1) | ((BYTE6(v38) - 1) >> 1)) >> 2);
    v41 = (v40 | (v40 >> 4)) + 1;
  }
  else
  {
    v41 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  v42 = (_QWORD *)swift_allocObject();
  v42[2] = 0;
  v42[3] = v41;
  _swift_stdlib_malloc_size(v42);
  memcpy(v42 + 4, &v44, v39);
  swift_beginAccess();
  v42[2] = v39;
  if ((uint64_t)(_swift_stdlib_malloc_size(v42) - 32) < v39)
  {
    __break(1u);
    JUMPOUT(0x1A5C10328);
  }
  return v42;
}

uint64_t static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char *a10, uint64_t a11)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v32 = a8;
  v33 = a2;
  v41 = a4;
  v39 = a9;
  v36 = a3;
  v37 = a11;
  v34 = a10;
  v40 = sub_1A5C41CF0();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v17 = (char *)&v31 - v16;
  v18 = sub_1A5C41CF0();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v31 - v20;
  v23 = type metadata accessor for HashedAuthenticationCode(0, a5, a8, v22);
  v35 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v31 - v24;
  v42 = *a1;
  v26 = *((_QWORD *)a6 - 1);
  (*(void (**)(char *, uint64_t, char *))(v26 + 16))(v21, v33, a6);
  (*(void (**)(char *, _QWORD, uint64_t, char *))(v26 + 56))(v21, 0, 1, a6);
  v27 = v32;
  static HKDF.extract<A>(inputKeyMaterial:salt:)(&v42, (uint64_t)v21, a5, a6, v32, v34, (uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v28 = *(_QWORD *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v17, v36, a7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v17, 0, 1, a7);
  v29 = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HashedAuthenticationCode<A>, v23);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)((uint64_t)v25, (uint64_t)v17, v41, a5, v23, a7, v27, v29, v39, v37);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v23);
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v19 = *a1;
  v18 = MEMORY[0x1E0DEE9D8];
  v15 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v16 = (char *)sub_1A5BF2A28();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v19, (uint64_t)&v18, a2, a3, a4, v15, a5, a6, a8, v16, a7);
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = *a1;
  v18 = MEMORY[0x1E0DEE9D8];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v16 = sub_1A5BF2A28();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v19, a2, (uint64_t)&v18, a3, a4, a5, v15, a6, a8, a7, v16);
}

uint64_t static HKDF.deriveKey(inputKeyMaterial:outputByteCount:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *a1;
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEE9D8];
  v9 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v10 = (char *)sub_1A5BF2A28();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v14, (uint64_t)&v13, (uint64_t)&v12, a2, a3, v9, (uint64_t)v9, a4, a5, v10, (uint64_t)v10);
}

uint64_t sub_1A5C10900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _QWORD v11[2];

  v5 = v3[2];
  v6 = v3[4];
  v7 = v3[6];
  v11[0] = a1;
  v11[1] = a2;
  v10 = v7;
  v8 = sub_1A5BF2A88();
  return static HMAC.authenticationCode<A>(for:using:)((uint64_t)v11, &v10, v5, MEMORY[0x1E0DEAC20], v6, v8, a3);
}

uint64_t sub_1A5C10970(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4 - a3;
  if (!a3)
    v4 = 0;
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HKDF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKDF);
}

void sub_1A5C109B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C10A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v4;
  v9 = v5;
  v10 = BYTE2(v5);
  v11 = BYTE3(v5);
  v12 = BYTE4(v5);
  v13 = BYTE5(v5);
  sub_1A5C17C64((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v5), a3, a4);
  return v6 & 1;
}

uint64_t AES.CMAC.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = &v11[-v8];
  sub_1A5C41828();
  v12 = a2;
  v13 = a3;
  v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t AES.CMAC.finalize()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = sub_1A5BED678(*(_QWORD *)(v1 + 8));
  v8 = v3;
  sub_1A5BED714((uint64_t)&v7);
  sub_1A5C41BF4();
  sub_1A5C114FC((uint64_t)&v7);
  sub_1A5BF05B8(v7, v8);
  *a1 = v4;
  a1[1] = v5;
  return swift_bridgeObjectRelease();
}

uint64_t AES.CMAC.init(key:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v5 = *a1;
  result = AES.CMAC.init(key:outputSize:)(&v5, 16, v6);
  v4 = v6[1];
  *a2 = v6[0];
  a2[1] = v4;
  return result;
}

uint64_t AES.CMAC.init(key:outputSize:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;

  v5 = *a1;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 >> 60)
  {
    __break(1u);
  }
  else
  {
    v8 = 8 * v7;
    if (v8 != 128 && v8 != 192 && v8 != 256)
      goto LABEL_14;
    result = getCMACContextSize();
    if ((result & 0x8000000000000000) == 0)
    {
      v9 = result;
      if (result)
      {
        v10 = sub_1A5C41C00();
        *(_QWORD *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), v9);
      }
      else
      {
        v10 = MEMORY[0x1E0DEE9D8];
      }
      ccaes_cbc_encrypt_mode();
      v11 = cccmac_init();
      result = swift_release();
      if (!v11)
      {
        *a3 = v10;
        a3[1] = a2;
        return result;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t AES.CMAC.update(bufferPointer:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (a1)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1A5C11888(v3);
  v3 = result;
  if (!a1)
    goto LABEL_6;
LABEL_3:
  result = cccmac_update();
  if (!(_DWORD)result)
  {
    *v1 = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A5C10EB8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5C10FAC()
{
  return sub_1A5C10EB8();
}

uint64_t sub_1A5C10FC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if ((result & 1) != 0)
  {
    if (a1)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1A5C11888(v5);
  v5 = result;
  *a3 = result;
  if (!a1)
    goto LABEL_6;
LABEL_3:
  result = cccmac_update();
  if (!(_DWORD)result)
  {
    *a3 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AES.CMAC.MAC.byteCount.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_1A5C11064
                                         + *((int *)qword_1A5C110A8 + (*(_QWORD *)(v0 + 8) >> 62))))(0);
}

uint64_t sub_1A5C11074()
{
  uint64_t v0;

  return BYTE6(v0);
}

uint64_t AES.CMAC.MAC.withUnsafeBytes<A>(_:)()
{
  return sub_1A5C41990();
}

uint64_t AES.CMAC.MAC.hash(into:)()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_1A5BEE468(v2, v1);
  sub_1A5C419C0();
  return sub_1A5BEFF90(v2, v1);
}

uint64_t AES.CMAC.MAC.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A5C41F00();
  sub_1A5BEE468(v1, v2);
  sub_1A5C419C0();
  sub_1A5BEFF90(v1, v2);
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C11180()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_1A5C11194
                                         + *((int *)qword_1A5C111D8 + (*(_QWORD *)(v0 + 8) >> 62))))(0);
}

uint64_t sub_1A5C111A4()
{
  uint64_t v0;

  return BYTE6(v0);
}

uint64_t sub_1A5C111E8()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A5C41F00();
  sub_1A5BEE468(v1, v2);
  sub_1A5C419C0();
  sub_1A5BEFF90(v1, v2);
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C11248()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_1A5BEE468(v2, v1);
  sub_1A5C419C0();
  return sub_1A5BEFF90(v2, v1);
}

uint64_t sub_1A5C11294()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1A5C41F00();
  sub_1A5BEE468(v1, v2);
  sub_1A5C419C0();
  sub_1A5BEFF90(v1, v2);
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C112F0()
{
  return AES.CMAC.MAC.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A5C11304()
{
  uint64_t v0;

  return sub_1A5C1130C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1A5C1130C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v11 = 0x203A43414DLL;
  v12 = 0xE500000000000000;
  sub_1A5BEE468(a1, a2);
  v4 = sub_1A5C26408(a1, a2);
  result = sub_1A5BEFF90(a1, a2);
  v6 = *(_QWORD *)(v4 + 16);
  if (v6 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = 2 * v6;
  if (2 * v6 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v6)
  {
    v8 = sub_1A5C41C00();
    *(_QWORD *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), v7);
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = 0;
  v10 = v8;
  sub_1A5C41BF4();
  sub_1A5BFCFA0(v4, &v10, &v9);
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1A5C11448@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  sub_1A5C20F6C(v4, v3);
  v6 = v5;
  v8 = v7;
  result = sub_1A5BEFF90(v4, v3);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

uint64_t sub_1A5C1149C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = sub_1A5C26408(v1, v2);
  sub_1A5BEFF90(v1, v2);
  return v3;
}

uint64_t sub_1A5C114E0(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1A5C25450(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

void sub_1A5C114E8(uint64_t *a1)
{
  sub_1A5C109B0(*a1, a1[1]);
}

void sub_1A5C114FC(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A5C11558()
{
  uint64_t v0;
  char **v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v7 = v0;
  LOWORD(v8) = v3;
  BYTE2(v8) = BYTE2(v3);
  HIBYTE(v8) = BYTE3(v3);
  v4 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1A5C11888((uint64_t)v4);
    *v1 = v4;
  }
  result = cccmac_final_generate();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x1A5C11754);
  }
  *v1 = v4;
  *v2 = v7;
  v2[1] = v8 | ((unint64_t)BYTE4(v3) << 32) | ((unint64_t)BYTE5(v3) << 40) | ((unint64_t)BYTE6(v3) << 48);
  return result;
}

uint64_t sub_1A5C117A4(char *a1, char **a2)
{
  uint64_t v4;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;

  sub_1A5C41918();
  v4 = *(int *)a1;
  if (*((_DWORD *)a1 + 1) < (int)v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  a1 = (char *)*((_QWORD *)a1 + 1);
  result = sub_1A5C41894();
  if (!result)
    goto LABEL_11;
  if (__OFSUB__(v4, sub_1A5C418B8()))
    goto LABEL_8;
  sub_1A5C418AC();
  a1 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = a1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    a1 = sub_1A5C11888((uint64_t)a1);
    *a2 = a1;
  }
  result = cccmac_final_generate();
  if (!(_DWORD)result)
  {
    *a2 = a1;
    return result;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1A5C11874(uint64_t a1)
{
  return sub_1A5BFC898(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1A5C11888(uint64_t a1)
{
  return sub_1A5BFC774(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1A5C118A0()
{
  unint64_t result;

  result = qword_1EE801730;
  if (!qword_1EE801730)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_1EE801730);
  }
  return result;
}

unint64_t sub_1A5C118E4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1A5C11920();
  a1[2] = sub_1A5C11964();
  a1[3] = sub_1A5C119A8();
  result = sub_1A5C119EC();
  a1[4] = result;
  return result;
}

unint64_t sub_1A5C11920()
{
  unint64_t result;

  result = qword_1EE801738;
  if (!qword_1EE801738)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_1EE801738);
  }
  return result;
}

unint64_t sub_1A5C11964()
{
  unint64_t result;

  result = qword_1EE801740;
  if (!qword_1EE801740)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_1EE801740);
  }
  return result;
}

unint64_t sub_1A5C119A8()
{
  unint64_t result;

  result = qword_1EE801748;
  if (!qword_1EE801748)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_1EE801748);
  }
  return result;
}

unint64_t sub_1A5C119EC()
{
  unint64_t result;

  result = qword_1EE801750;
  if (!qword_1EE801750)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_1EE801750);
  }
  return result;
}

unint64_t sub_1A5C11A34()
{
  unint64_t result;

  result = qword_1EE801758;
  if (!qword_1EE801758)
  {
    result = MEMORY[0x1A85B3FE0]("iU3?8Y", &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_1EE801758);
  }
  return result;
}

_QWORD *_s4CMACVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  sub_1A5C41BF4();
  return a1;
}

uint64_t _s4CMACVwxx()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s4CMACVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_1A5C41BF4();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *_s4CMACVwta(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t _s4CMACVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s4CMACVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CMAC()
{
  return &type metadata for AES.CMAC;
}

ValueMetadata *type metadata accessor for AES.CMAC.MAC()
{
  return &type metadata for AES.CMAC.MAC;
}

void sub_1A5C11BD8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  sub_1A5C17C64(a1, a2, **(_QWORD **)(v3 + 16), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8));
  if (!v4)
    *a3 = v6 & 1;
}

uint64_t sub_1A5C11C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C10FC8(a1, a2, *(uint64_t **)(v2 + 16));
}

void *SHA256.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1ECF97A18);
}

uint64_t SHA384.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF10EC(MEMORY[0x1E0C823E8], &qword_1ECF97818, a1);
}

void *SHA384.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1ECF97818);
}

uint64_t SHA384.finalize()@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5C0B664(a1);
}

uint64_t static SHA256.blockByteCount.getter()
{
  return 64;
}

uint64_t static SHA256.byteCount.getter()
{
  return 32;
}

void *sub_1A5C11CA4(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1EE800340);
}

void *sub_1A5C11CB0(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1ECF97818);
}

void *sub_1A5C11CBC(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1ECF97A18);
}

void *_s9CryptoKit8InsecureO4SHA1V6update13bufferPointerySW_tF_0(uint64_t a1, uint64_t a2)
{
  return sub_1A5BEC300(a1, a2, &qword_1ECF976D8);
}

uint64_t sub_1A5C11CD4()
{
  return 64;
}

uint64_t static SHA384.blockByteCount.getter()
{
  return 128;
}

uint64_t static SHA384.byteCount.getter()
{
  return 48;
}

uint64_t sub_1A5C11CEC()
{
  return 128;
}

uint64_t sub_1A5C11CF4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF123C(MEMORY[0x1E0C823E8], &qword_1ECF97818, a1);
}

void *sub_1A5C11D08(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1ECF97818);
}

uint64_t sub_1A5C11D24@<X0>(uint64_t a1@<X8>)
{
  return sub_1A5C0B664(a1);
}

uint64_t static SHA512.blockByteCount.getter()
{
  return 128;
}

uint64_t static SHA512.byteCount.getter()
{
  return 64;
}

uint64_t SHA512.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF10EC(MEMORY[0x1E0C823F8], &qword_1EE800340, a1);
}

void *SHA512.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF1544(a1, a2, &qword_1EE800340);
}

uint64_t SHA512.finalize()@<X0>(_OWORD *a1@<X8>)
{
  return sub_1A5BF1AD0(a1);
}

unint64_t sub_1A5C11DA8()
{
  unint64_t result;

  result = qword_1EE801760;
  if (!qword_1EE801760)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45B08, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801760);
  }
  return result;
}

unint64_t sub_1A5C11DF0()
{
  unint64_t result;

  result = qword_1ECF976D0;
  if (!qword_1ECF976D0)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF976D0);
  }
  return result;
}

unint64_t sub_1A5C11E38()
{
  unint64_t result;

  result = qword_1EE801768;
  if (!qword_1EE801768)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45C60, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801768);
  }
  return result;
}

unint64_t sub_1A5C11E7C(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C04708();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A5C11EA4()
{
  unint64_t result;

  result = qword_1ECF977E0;
  if (!qword_1ECF977E0)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF977E0);
  }
  return result;
}

unint64_t sub_1A5C11EEC()
{
  unint64_t result;

  result = qword_1EE801770;
  if (!qword_1EE801770)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45DB8, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801770);
  }
  return result;
}

unint64_t sub_1A5C11F30(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C04750();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A5C11F58()
{
  unint64_t result;

  result = qword_1EE801778;
  if (!qword_1EE801778)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801778);
  }
  return result;
}

ValueMetadata *type metadata accessor for SHA384()
{
  return &type metadata for SHA384;
}

ValueMetadata *type metadata accessor for Insecure()
{
  return &type metadata for Insecure;
}

uint64_t sub_1A5C11FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  rsize_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t AssociatedTypeWitness;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t AssociatedConformanceWitness;
  _QWORD v56[5];
  uint64_t v57;

  v42 = a5;
  v45 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v9);
  v44 = (char *)&v41 - v10;
  v11 = swift_checkMetadataState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v43 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v41 - v15;
  v51 = a4;
  v52 = a2;
  sub_1A5C41C54();
  v48 = ccwrap_unwrapped_size();
  result = ccaes_ecb_decrypt_mode();
  if (result)
  {
    v18 = result;
    v57 = MEMORY[0x1A85B3CB0]();
    v19 = swift_slowAlloc();
    swift_beginAccess();
    v20 = (void *)v19;
    v21 = ccecb_init();
    if (v21)
    {
      v22 = v21;
      sub_1A5BF5E74();
      swift_allocError();
      *(_DWORD *)v23 = v22;
      *(_BYTE *)(v23 + 4) = 0;
      swift_willThrow();
      goto LABEL_10;
    }
    v41 = v19;
    sub_1A5C41828();
    v24 = sub_1A5C41C54();
    v25 = *(void (**)(char *, uint64_t))(v12 + 8);
    v25(v16, v11);
    if (v24 != 1)
    {
      v31 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v52, a3);
      v34 = sub_1A5C419FC();
      v56[3] = MEMORY[0x1E0CB0338];
      v56[4] = MEMORY[0x1E0CB0318];
      v56[0] = v34;
      v56[1] = v35;
      v33 = v49;
      v27 = v51;
      goto LABEL_8;
    }
    v26 = v43;
    v27 = v51;
    sub_1A5C41828();
    v28 = v44;
    sub_1A5C41C78();
    v25(v26, v11);
    v29 = AssociatedTypeWitness;
    v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, AssociatedTypeWitness);
    v31 = v52;
    if ((_DWORD)result != 1)
    {
      v54 = v29;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v53);
      (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(boxed_opaque_existential_1, v28, v29);
      sub_1A5BF9FC8(&v53, (uint64_t)v56);
      v33 = v49;
LABEL_8:
      v36 = MEMORY[0x1E0C80A78](v48);
      *(&v41 - 6) = a3;
      *(&v41 - 5) = v27;
      *(&v41 - 4) = (uint64_t)v56;
      *(&v41 - 3) = v18;
      v20 = (void *)v41;
      *(&v41 - 2) = v41;
      *(&v41 - 1) = v31;
      v37 = sub_1A5BEC704(v36, (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C1250C, (uint64_t)(&v41 - 8));
      if (!v33)
      {
        v40 = v37;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
        *v42 = v40;
        v39 = v20;
        v38 = v57;
        goto LABEL_11;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
LABEL_10:
      v38 = v57;
      v39 = v20;
LABEL_11:
      memset_s(v39, v38, 0, v38);
      return MEMORY[0x1A85B4070](v20, -1, -1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C12410(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  result = sub_1A5C418D0();
  if (v5)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v4 = 4;
    *(_BYTE *)(v4 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A5C1250C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C12410(a1, a2, *(_QWORD **)(v2 + 32));
}

uint64_t sub_1A5C1252C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v3;

  if (*a2)
  {
    v3 = result;
    result = sub_1A5C41C54();
    if (v3)
    {
      result = ccwrap_auth_decrypt();
      *a3 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C125C8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1A5C1252C(a1, *(_QWORD **)(v2 + 32), a2);
}

void sub_1A5C125F8(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A5C12660@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  v5 = BYTE4(a1);
  v6 = BYTE5(a1);
  v7 = BYTE6(a1);
  swift_beginAccess();
  result = ccwrap_auth_encrypt();
  *v1 = v2;
  v1[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

uint64_t sub_1A5C129BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  rsize_t v4;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  swift_beginAccess();
  v14 = ccwrap_wrapped_size();
  *(_QWORD *)&v15 = sub_1A5BED678(v14);
  *((_QWORD *)&v15 + 1) = v3;
  sub_1A5BED714((uint64_t)&v15);
  v16 = v15;
  if (!ccaes_ecb_encrypt_mode())
    __break(1u);
  v4 = MEMORY[0x1A85B3CB0]();
  v5 = (void *)swift_slowAlloc();
  swift_beginAccess();
  v6 = ccecb_init();
  if (v6)
  {
    v7 = v6;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
  }
  else
  {
    swift_retain();
    sub_1A5C125F8((uint64_t)&v16);
    v10 = v9;
    swift_release();
    if (!v10)
    {
      v13 = *((_QWORD *)&v16 + 1);
      v2 = v16;
      sub_1A5BEE468(v16, *((unint64_t *)&v16 + 1));
      memset_s(v5, v4, 0, v4);
      MEMORY[0x1A85B4070](v5, -1, -1);
      sub_1A5BEFF90(v2, v13);
      return v2;
    }
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v11 = 3;
    *(_BYTE *)(v11 + 4) = 1;
  }
  swift_willThrow();
  memset_s(v5, v4, 0, v4);
  MEMORY[0x1A85B4070](v5, -1, -1);
  sub_1A5BEFF90(v16, *((unint64_t *)&v16 + 1));
  return v2;
}

uint64_t sub_1A5C12BE0()
{
  unsigned __int8 v1;

  sub_1A5C418D0();
  return v1;
}

uint64_t sub_1A5C12C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;

  result = a4 - a3;
  if (a3)
    v8 = a4 - a3;
  else
    v8 = 0;
  if (a1)
  {
    if (v8 == a2 - a1)
    {
      if (a3)
      {
        result = cc_cmp_safe();
        v9 = (_DWORD)result == 0;
LABEL_10:
        *a5 = v9;
        return result;
      }
      goto LABEL_12;
    }
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if (v8)
    goto LABEL_9;
  if (!a3)
LABEL_12:
    __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_1A5C12CBC()
{
  return sub_1A5C418D0();
}

uint64_t sub_1A5C12D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;

  return sub_1A5C12C44(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

void sub_1A5C12D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C12D78()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = 16;
  if (!v7)
    v8 = 8;
  if (BYTE6(v2) == v8)
  {
    sub_1A5BEE468(v1, v0);
    sub_1A5BF05B8(v1, v0);
    v18 = v9;
    v17 = v10;
    sub_1A5BF05B8(v3, v2);
    v12 = v11;
    v14 = v13;
    result = sub_1A5BEFF90(v1, v0);
    *(_QWORD *)v6 = v12;
    *(_QWORD *)(v6 + 8) = v14;
    *(_QWORD *)(v6 + 16) = v18;
    *(_QWORD *)(v6 + 24) = v17;
    *(_QWORD *)(v6 + 32) = v5;
    *(_QWORD *)(v6 + 40) = v4;
    *(_BYTE *)(v6 + 48) = v7;
  }
  else
  {
    sub_1A5BEFF90(v5, v4);
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v16 = 1;
    *(_BYTE *)(v16 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v3, v2);
    return sub_1A5BEFF90(v1, v0);
  }
  return result;
}

uint64_t sub_1A5C12EA8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int128 v19;
  __int128 v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v6 = *a2;
  v7 = *a3;
  v8 = a3[1];
  v27 = *a5;
  swift_beginAccess();
  v9 = *(_QWORD *)(v6 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    goto LABEL_18;
  }
  v10 = 8 * v9;
  if (v10 != 128 && v10 != 256 && v10 != 192)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v22 = 0;
    *(_BYTE *)(v22 + 4) = 1;
    return swift_willThrow();
  }
  ccaes_ccm_encrypt_mode();
  if (v8 >> 60 != 15)
  {
    v23 = v7;
    v12 = v8;
    goto LABEL_9;
  }
  v11 = sub_1A5BECAD4(12);
  sub_1A5C09C14(v11, &v26);
  if (v5)
  {
LABEL_18:
    swift_unexpectedError();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v12 = *((_QWORD *)&v26 + 1);
  v23 = v26;
LABEL_9:
  sub_1A5BEF914(v7, v8);
  v13 = sub_1A5C41C54();
  *(_QWORD *)&v25 = sub_1A5BED678(v13);
  *((_QWORD *)&v25 + 1) = v14;
  sub_1A5BED714((uint64_t)&v25);
  v26 = v25;
  if (v27)
    v15 = 16;
  else
    v15 = 8;
  *(_QWORD *)&v24 = sub_1A5BED678(v15);
  *((_QWORD *)&v24 + 1) = v16;
  sub_1A5BED714((uint64_t)&v24);
  v25 = v24;
  sub_1A5C1367C(v6 + 32, v6 + 32 + *(_QWORD *)(v6 + 16), v23, v12);
  if (v5)
  {
    sub_1A5BEFF90(v23, v12);
    sub_1A5BEFF90(v25, *((unint64_t *)&v25 + 1));
    v18 = *((_QWORD *)&v26 + 1);
    v17 = v26;
  }
  else
  {
    v19 = v26;
    v20 = v25;
    sub_1A5BEE468(v23, v12);
    sub_1A5BEE468(v19, *((unint64_t *)&v19 + 1));
    sub_1A5BEE468(v20, *((unint64_t *)&v20 + 1));
    sub_1A5C12D18(v23, v12, v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1));
    sub_1A5BEFF90(v23, v12);
    sub_1A5BEFF90(v20, *((unint64_t *)&v20 + 1));
    v18 = v19 >> 64;
    v17 = v19;
  }
  return sub_1A5BEFF90(v17, v18);
}

uint64_t sub_1A5C13170(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _BYTE v12[16];
  _QWORD v13[7];

  v13[4] = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)(a1 + 16);
  v5 = *a2;
  ccaes_ccm_decrypt_mode();
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 >> 60)
  {
    __break(1u);
    JUMPOUT(0x1A5C13634);
  }
  v7 = 8 * v6;
  if (v7 == 128 || v7 == 256 || v7 == 192)
  {
    v11 = v10;
    sub_1A5C04364((uint64_t)&v11, (uint64_t)v12);
    sub_1A5C04364((uint64_t)v12, (uint64_t)v13);
    __asm { BR              X11 }
  }
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  swift_willThrow();
  return a4;
}

void sub_1A5C1367C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X17 }
}

uint64_t sub_1A5C136FC@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v13 = v10;
  v14 = v11;
  v15 = BYTE2(v11);
  v16 = BYTE3(v11);
  v17 = BYTE4(v11);
  v18 = BYTE5(v11);
  return sub_1A5C138A8((uint64_t)&v13, (uint64_t)&v13 + BYTE6(v11), a1, a2, a3, v6, v4, v9, v5, v8, v7, a4);
}

uint64_t sub_1A5C138A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a6;
  v34 = a7;
  v31 = a5;
  v32 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a1;
  v35 = a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v28 - v14;
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v28 - v18;
  sub_1A5C41828();
  sub_1A5C41C78();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](result);
    *(&v28 - 12) = a10;
    *(&v28 - 11) = v22;
    *(&v28 - 10) = a12;
    *(&v28 - 9) = v23;
    v24 = v29;
    *(&v28 - 8) = v28;
    *(&v28 - 7) = v24;
    v25 = v33;
    *(&v28 - 6) = v31;
    *(&v28 - 5) = v25;
    *(&v28 - 4) = v34;
    *(&v28 - 3) = v26;
    v27 = v32;
    *(&v28 - 2) = v30;
    *(&v28 - 1) = v27;
    swift_getAssociatedConformanceWitness();
    sub_1A5C418D0();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1A5C13B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a9;
  v40 = a2;
  v41 = a8;
  v38 = a1;
  v39 = a7;
  v36 = a5;
  v37 = a6;
  v35 = a4;
  v44 = a3;
  swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v35 - v16;
  v18 = swift_checkMetadataState();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v35 - v20;
  v22 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v35 - v23;
  (*(void (**)(char *, uint64_t))(v25 + 16))((char *)&v35 - v23, v44);
  v26 = *(_QWORD *)(a14 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, a14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A5C41828();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, a14);
    sub_1A5C41C78();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1, AssociatedTypeWitness);
    if ((_DWORD)result != 1)
    {
      MEMORY[0x1E0C80A78](result);
      v29 = v36;
      *(&v35 - 10) = v35;
      *(&v35 - 9) = v29;
      v30 = v39;
      *(&v35 - 8) = v37;
      *(&v35 - 7) = v30;
      *(&v35 - 6) = v41;
      *(&v35 - 5) = v31;
      *(&v35 - 4) = v33;
      *(&v35 - 3) = v32;
      v34 = v40;
      *(&v35 - 2) = v38;
      *(&v35 - 1) = v34;
      swift_getAssociatedConformanceWitness();
      sub_1A5C418D0();
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, AssociatedTypeWitness);
    }
  }
  __break(1u);
  return result;
}

void sub_1A5C13DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  _BYTE v4[16];
  _BYTE v5[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a3 + 32);
  sub_1A5C04364((uint64_t)&v3, (uint64_t)v4);
  sub_1A5C04364((uint64_t)v4, (uint64_t)v5);
  __asm { BR              X11 }
}

uint64_t sub_1A5C13E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[112];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;

  *((_QWORD *)&v12 + 1) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  *(_QWORD *)v10 = v12;
  *(_QWORD *)&v10[6] = *(_QWORD *)((char *)&v12 + 6);
  v13 = v1;
  v14 = v2;
  v15 = v8;
  v16 = v7;
  v17 = v5;
  v18 = v3;
  v19 = v6;
  v20 = v4;
  v21 = v10;
  v22 = &v10[BYTE6(a1)];
  sub_1A5BF08C4();
  return sub_1A5C044C4((uint64_t)&v11);
}

uint64_t sub_1A5C13FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a9;
  v39 = a7;
  v40 = a8;
  v37 = a6;
  v38 = a2;
  v34 = a4;
  v35 = a5;
  v43 = a3;
  v36 = a1;
  swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v34 - v15;
  v17 = swift_checkMetadataState();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v34 - v19;
  v21 = sub_1A5C41CF0();
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t))(v24 + 16))((char *)&v34 - v22, v43);
  v25 = *(_QWORD *)(a13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, a13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A5C41828();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, a13);
    sub_1A5C41C78();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1, AssociatedTypeWitness);
    if ((_DWORD)result != 1)
    {
      MEMORY[0x1E0C80A78](result);
      v28 = v35;
      *(&v34 - 10) = v34;
      *(&v34 - 9) = v28;
      v29 = v39;
      *(&v34 - 8) = v37;
      *(&v34 - 7) = v29;
      *(&v34 - 6) = v40;
      *(&v34 - 5) = v30;
      v31 = v38;
      *(&v34 - 4) = v36;
      *(&v34 - 3) = v31;
      *(&v34 - 2) = v33;
      *(&v34 - 1) = v32;
      swift_getAssociatedConformanceWitness();
      sub_1A5C418D0();
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, AssociatedTypeWitness);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C142BC(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  v14 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_1A5C11888((uint64_t)v14);
    *a3 = v14;
  }
  result = sub_1A5C143B0((uint64_t)(v14 + 32), (uint64_t)&v14[*((_QWORD *)v14 + 2) + 32], a4, a5, a6, a7, a8, a9, a10, a11, a12, a1);
  *a3 = v14;
  return result;
}

uint64_t sub_1A5C14384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_1A5C143B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1A5C143B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;

  if (!a4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!a8)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!a10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  result = ccccm_one_shot();
  if ((_DWORD)result)
  {
    v12 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_1A5C14490(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A5C14504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;

  *(_QWORD *)(v15 - 112) = v8;
  *(_WORD *)(v15 - 104) = v10;
  *(_BYTE *)(v15 - 102) = BYTE2(v10);
  *(_BYTE *)(v15 - 101) = BYTE3(v10);
  *(_BYTE *)(v15 - 100) = BYTE4(v10);
  *(_BYTE *)(v15 - 99) = BYTE5(v10);
  *(_BYTE *)(v15 - 98) = BYTE6(v10);
  result = sub_1A5C143B0(v15 - 112, v15 - 112 + BYTE6(v10), a3, a4, a5, a6, a7, v9, a8, v11, v12, v14);
  v17 = *(unsigned int *)(v15 - 104) | ((unint64_t)*(unsigned __int8 *)(v15 - 100) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 - 99) << 40) | ((unint64_t)*(unsigned __int8 *)(v15 - 98) << 48);
  *v13 = *(_QWORD *)(v15 - 112);
  v13[1] = v17;
  return result;
}

uint64_t sub_1A5C14718(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = sub_1A5C41918();
  v18 = *a1;
  v19 = a1[1];
  if ((int)v19 < (int)v18)
  {
    __break(1u);
    goto LABEL_9;
  }
  v25 = a3;
  v26 = a4;
  result = sub_1A5C41894();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v20 = result;
  result = sub_1A5C418B8();
  v21 = v18 - result;
  if (__OFSUB__(v18, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v22 = v19 - v18;
  v23 = sub_1A5C418AC();
  if (v23 >= v22)
    v24 = v22;
  else
    v24 = v23;
  return sub_1A5C143B0(v20 + v21, v20 + v21 + v24, a2, v25, v26, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1A5C14810()
{
  sub_1A5BF08C4();
}

void sub_1A5C1486C()
{
  sub_1A5BF08C4();
}

uint64_t sub_1A5C148C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1A5C13FF0(a1, a2, v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], a3, v3[10], v3[11], v3[12], v3[2]);
}

uint64_t sub_1A5C14908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C142BC(a1, a2, *(char ***)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_1A5C14940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1A5C138A8(a1, a2, v3[7], v3[8], v3[9], v3[10], v3[11], a3, v3[12], v3[2], v3[3], v3[4]);
}

void sub_1A5C14980()
{
  sub_1A5BF08C4();
}

uint64_t sub_1A5C149E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1A5C13B08(a1, a2, v3[6], v3[7], v3[8], v3[9], v3[10], v3[11], a3, v3[12], v3[13], v3[14], v3[2], v3[3]);
}

void sub_1A5C14A28()
{
  uint64_t v0;

  sub_1A5C14490(*(_QWORD *)(v0 + 16));
}

uint64_t static AES.KeyWrap.wrap(_:using:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  v4 = *a1;
  v5 = v2;
  return sub_1A5C129BC((uint64_t)&v5, &v4);
}

uint64_t static AES.KeyWrap.unwrap<A>(_:using:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v6;

  v6 = *a2;
  return sub_1A5C11FBC((uint64_t)&v6, a1, a3, a4, a5);
}

ValueMetadata *type metadata accessor for AES.KeyWrap()
{
  return &type metadata for AES.KeyWrap;
}

unint64_t sub_1A5C14AD8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE8017B0);
  v2 = sub_1A5C41E70();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A5C157F8(v6, (uint64_t)&v15, &qword_1EE8017B8);
    v7 = v15;
    v8 = v16;
    result = sub_1A5C153FC(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1A5C155D4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A5C14C0C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE8017C0);
  v2 = (_QWORD *)sub_1A5C41E70();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    sub_1A5C41BF4();
    swift_unknownObjectRetain();
    result = sub_1A5C153FC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A5C14D24(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800198);
  v2 = sub_1A5C41E70();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A5C157F8(v6, (uint64_t)v15, &qword_1EE800190);
    result = sub_1A5C15460((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_1A5C155D4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1A5C14F38(a1, (uint64_t (*)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t))sub_1A5C37C18, a2);
}

unint64_t sub_1A5C14E80()
{
  unint64_t result;

  result = qword_1EE801780;
  if (!qword_1EE801780)
  {
    result = MEMORY[0x1A85B3FE0](")T3?hX", &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_1EE801780);
  }
  return result;
}

unint64_t sub_1A5C14EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE801790;
  if (!qword_1EE801790)
  {
    v1 = sub_1A5C153C4(255, &qword_1EE801788);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE801790);
  }
  return result;
}

void SecureEnclave.P256.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1A5C14F38(a1, (uint64_t (*)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t))sub_1A5C37B6C, a2);
}

void sub_1A5C14F38(__SecKey *a1@<X0>, uint64_t (*a2)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  unint64_t v20;
  char v21;
  uint64_t inited;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  _QWORD *v38;
  __SecKey *v39;
  uint64_t v40;

  v7 = SecKeyCopyAttributes(a1);
  if (!v7)
  {
    sub_1A5C14E80();
    swift_allocError();
    *v13 = 0;
    swift_willThrow();

    return;
  }
  v8 = v7;
  v38 = a3;
  v39 = a1;
  sub_1A5C153C4(0, &qword_1EE801788);
  sub_1A5C14EC4();
  v9 = sub_1A5C41A38();
  v10 = sub_1A5C41AC8();
  v11 = (void *)v10;
  if ((v9 & 0xC000000000000001) != 0)
  {
    v12 = sub_1A5C41E58();

    swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_13;
  }
  else
  {
    if (!*(_QWORD *)(v9 + 16) || (sub_1A5C15490(v10), (v14 & 1) == 0))
    {

      swift_bridgeObjectRelease();
LABEL_13:
      sub_1A5C14E80();
      swift_allocError();
      *v19 = 1;
      swift_willThrow();

      return;
    }
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  v15 = sub_1A5C41A38();
  v16 = sub_1A5C41AC8();
  v17 = (void *)v16;
  if ((v15 & 0xC000000000000001) != 0)
  {
    v18 = (void *)sub_1A5C41E58();

    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_22;
  }
  else
  {
    if (!*(_QWORD *)(v15 + 16) || (v20 = sub_1A5C15490(v16), (v21 & 1) == 0))
    {

      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    v18 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v20);
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  if ((objc_msgSend(v18, sel_respondsToSelector_, sel_BOOLValue) & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (objc_msgSend(v18, sel_BOOLValue))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801798);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A5C44370;
    *(_QWORD *)(inited + 32) = sub_1A5C41AD4();
    *(_QWORD *)(inited + 40) = v23;
    sub_1A5C153C4(0, &qword_1EE8017A0);
    *(_QWORD *)(inited + 48) = sub_1A5C41CCC();
    v24 = sub_1A5C14C0C(inited);
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  swift_unknownObjectRelease();
LABEL_22:
  v24 = 0;
LABEL_23:
  swift_unknownObjectRetain();
  objc_opt_self();
  v25 = (void *)swift_dynamicCastObjCClassUnconditional();
  v26 = sub_1A5C419B4();
  v28 = v27;

  v29 = a2(&v40, v26, v28, 0, v24);
  if (v3)
  {
    sub_1A5BEFF90(v26, v28);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = (void *)v29;
    v33 = v30;
    v34 = v31;
    sub_1A5BEFF90(v26, v28);
    swift_bridgeObjectRelease();
    v35 = v40;
    v36 = v32;
    sub_1A5BEE468(v33, v34);
    sub_1A5BEFF90(v33, v34);
    v37 = v36;
    sub_1A5BEE468(v33, v34);

    sub_1A5BEFF90(v33, v34);
    swift_unknownObjectRelease();

    *v38 = v35;
    v38[1] = v33;
    v38[2] = v34;
    v38[3] = v37;
  }
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1A5C14F38(a1, (uint64_t (*)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t))sub_1A5C38E84, a2);
}

void SecureEnclave.P384.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1A5C14F38(a1, (uint64_t (*)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t))sub_1A5C38DD8, a2);
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1A5C14F38(a1, (uint64_t (*)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t))sub_1A5C39B90, a2);
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1A5C14F38(a1, (uint64_t (*)(uint64_t *, uint64_t, unint64_t, _QWORD, unint64_t))sub_1A5C39AEC, a2);
}

uint64_t sub_1A5C153C4(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1A5C153FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A5C41F00();
  sub_1A5C41AEC();
  v4 = sub_1A5C41F3C();
  return sub_1A5C155E4(a1, a2, v4);
}

unint64_t sub_1A5C15460(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A5C41DE0();
  return sub_1A5C156C4(a1, v2);
}

unint64_t sub_1A5C15490(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A5C41CD8();
  return sub_1A5C1583C(a1, v2);
}

uint64_t storeEnumTagSinglePayload for SecKeySEPInteropErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A5C1550C + 4 * byte_1A5C44825[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A5C15540 + 4 * asc_1A5C44820[v4]))();
}

uint64_t sub_1A5C15540(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C15548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5C15550);
  return result;
}

uint64_t sub_1A5C1555C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5C15564);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A5C15568(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C15570(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecKeySEPInteropErrors()
{
  return &type metadata for SecKeySEPInteropErrors;
}

unint64_t sub_1A5C15590()
{
  unint64_t result;

  result = qword_1EE8017A8;
  if (!qword_1EE8017A8)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C44888, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_1EE8017A8);
  }
  return result;
}

_OWORD *sub_1A5C155D4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1A5C155E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A5C41E94() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A5C41E94() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1A5C156C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1A5C15788(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1A85B36D4](v9, a1);
      sub_1A5C157C4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1A5C15788(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1A5C157C4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1A5C157F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1A5C1583C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1A5C153C4(0, &qword_1EE801788);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_1A5C41CE4();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_1A5C41CE4();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t Curve448.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C19A7C();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve448.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1A5C41BF4();
  v1 = sub_1A5BEBFDC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t Curve448.KeyAgreement.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_1A5C01AC0(0x38uLL);
  *a1 = result;
  return result;
}

size_t Curve448.KeyAgreement.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result;

  result = sub_1A5C19770();
  *a1 = result;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C19AF0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C019A0(0x38uLL, v5, v4);
  swift_release();
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = sub_1A5C01410(v0);
  swift_release();
  return v1;
}

size_t sub_1A5C15B7C@<X0>(size_t *a1@<X8>)
{
  size_t result;

  result = sub_1A5C19770();
  *a1 = result;
  return result;
}

uint64_t sub_1A5C15BA4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C019A0(0x38uLL, v5, v4);
  swift_release();
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement()
{
  return &type metadata for Curve448.KeyAgreement;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement.PublicKey()
{
  return &type metadata for Curve448.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement.PrivateKey()
{
  return &type metadata for Curve448.KeyAgreement.PrivateKey;
}

void sub_1A5C15C48(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1A5C15C84()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (BYTE6(v0) == 12)
  {
    sub_1A5BF05B8(v1, v0);
    *v2 = v3;
    v2[1] = v4;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v5 = 1;
    *(_BYTE *)(v5 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v1, v0);
  }
}

uint64_t static ChaChaPoly.seal<A, B>(_:using:nonce:authenticating:)(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v23 = a8;
  v22 = a7;
  v14 = sub_1A5C41CF0();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v21 - v16;
  v25 = *a2;
  v24 = *a3;
  v18 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v21 - v16, a4, a6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, a6);
  v19 = sub_1A5BEE4AC(&v25, a1, (uint64_t *)&v24, (uint64_t)v17, a5, a6, v22, v23);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v19;
}

uint64_t ChaChaPoly.SealedBox.init<A, B>(nonce:ciphertext:tag:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = sub_1A5C1660C(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  return v9;
}

uint64_t static ChaChaPoly.open<A>(_:using:authenticating:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v10 = sub_1A5C41CF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v18 - v12;
  v19 = *a3;
  v14 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v18 - v12, a4, a5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, a5);
  sub_1A5C16864((uint64_t)&v19, a1, a2);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v16;
}

uint64_t ChaChaPoly.SealedBox.combined.getter(uint64_t a1, unint64_t a2)
{
  sub_1A5BEE468(a1, a2);
  return a1;
}

uint64_t ChaChaPoly.SealedBox.tag.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v5;

  sub_1A5BEE468(a1, a2);
  sub_1A5BEFBC4(16, a1, a2);
  return v5;
}

uint64_t ChaChaPoly.SealedBox.ciphertext.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1A5BEE468(a1, a2);
  sub_1A5BEFD14(12, a1, a2);
  sub_1A5BEFA74(16, v5, v6);
  return v7;
}

void ChaChaPoly.SealedBox.nonce.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1A5BEE468(a1, a2);
  sub_1A5BEF928(12, a1, a2);
  sub_1A5C15C48(v4, v5);
}

char *ChaChaPoly.SealedBox.init<A>(combined:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A5C41C54() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    v6 = (char *)sub_1A5C419FC();
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v7 = 1;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v6;
}

void sub_1A5C16268(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C162C0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  v2 = qword_1EE800188;
  swift_retain_n();
  if (v2 != -1)
    swift_once();
  v3 = ccchacha20poly1305_aad();
  if (v3)
  {
    v4 = v3;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v5 = v4;
    *(_BYTE *)(v5 + 4) = 0;
    swift_willThrow();
  }
  sub_1A5BEFF90(v1, v0);
  return swift_release_n();
}

uint64_t sub_1A5C1655C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1A5C41894();
  v5 = result;
  if (result)
  {
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v5 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1A5C418AC();
    sub_1A5C17190(v5);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A5C1660C(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v1 = a1[1];
  if (sub_1A5C41C54() == 16)
  {
    sub_1A5BF95CC(v2, v1);
    v4 = v3;
    v6 = v5;
    v11 = v3;
    sub_1A5C16820();
    sub_1A5C41C9C();
    sub_1A5BEFF90(v4, v6);
    sub_1A5C41C9C();
    sub_1A5BEFF90(v9, v10);
    return v11;
  }
  else
  {
    sub_1A5BEFF90(v2, v1);
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = 1;
    *(_BYTE *)(v8 + 4) = 1;
    return swift_willThrow();
  }
}

unint64_t sub_1A5C16774()
{
  unint64_t result;

  result = qword_1EE8017C8;
  if (!qword_1EE8017C8)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for ChaChaPoly.Nonce, &type metadata for ChaChaPoly.Nonce);
    atomic_store(result, (unint64_t *)&qword_1EE8017C8);
  }
  return result;
}

unint64_t sub_1A5C167BC()
{
  unint64_t result;

  result = qword_1EE8017D0;
  if (!qword_1EE8017D0)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C44990, &type metadata for ChaChaPoly.SealedBox);
    atomic_store(result, (unint64_t *)&qword_1EE8017D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChaChaPoly()
{
  return &type metadata for ChaChaPoly;
}

ValueMetadata *type metadata accessor for ChaChaPoly.SealedBox()
{
  return &type metadata for ChaChaPoly.SealedBox;
}

unint64_t sub_1A5C16820()
{
  unint64_t result;

  result = qword_1EE8017D8;
  if (!qword_1EE8017D8)
  {
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0CB0390], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE8017D8);
  }
  return result;
}

void sub_1A5C16864(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1A5C41CF0();
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  swift_retain();
  sub_1A5BEE468(a2, a3);
  sub_1A5BEF928(12, a2, a3);
  __asm { BR              X10 }
}

uint64_t sub_1A5C16960()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  if (BYTE6(v2) != 12)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v5, v2);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A5C16E64);
  }
  sub_1A5BF05B8(v5, v2);
  *(_QWORD *)(v9 - 128) = v1;
  *(_QWORD *)(v9 - 112) = v10;
  *(_QWORD *)(v9 - 104) = v11;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  v12 = *(_QWORD *)(v9 - 160);
  result = sub_1A5BEE7D0((uint64_t *)(v9 - 128), (uint64_t *)(v9 - 112));
  if (!v12)
  {
    *(_QWORD *)(v9 - 152) = result;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 16))(v8, *(_QWORD *)(v9 - 168), v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v8, 1, v4) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v8, v6);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v7, v8, v4);
      sub_1A5C16EC0(v7, v4, *(_QWORD *)(v9 - 192));
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
    }
    *(_OWORD *)(v9 - 112) = xmmword_1A5C42A80;
    v15 = *(_QWORD *)(v9 - 184);
    v14 = *(_QWORD *)(v9 - 176);
    sub_1A5BEE468(v15, v14);
    sub_1A5BEFD14(12, v15, v14);
    sub_1A5BEFA74(16, *(_QWORD *)(v9 - 144), *(_QWORD *)(v9 - 136));
    v16 = *(_QWORD *)(v9 - 128);
    v17 = *(_QWORD *)(v9 - 120);
    v18 = *(_QWORD *)(v9 - 152);
    if (!swift_isUniquelyReferenced_nonNull_native())
    {
      v19 = swift_allocObject();
      swift_retain();
      v20 = (void *)swift_slowAlloc();
      *(_QWORD *)(v19 + 16) = v20;
      memmove(v20, *(const void **)(v18 + 16), 0x100uLL);
      swift_release();
      *(_QWORD *)(v9 - 152) = v19;
      swift_release();
    }
    sub_1A5BF047C(v16, v17, v9 - 112);
    sub_1A5BEFF90(v16, v17);
    sub_1A5BEE468(v15, v14);
    swift_retain();
    sub_1A5BEFBC4(16, v15, v14);
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1A5C16EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = *v3;
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    v8 = swift_allocObject();
    swift_retain();
    v9 = (void *)swift_slowAlloc();
    *(_QWORD *)(v8 + 16) = v9;
    memmove(v9, *(const void **)(v7 + 16), 0x100uLL);
    swift_release();
    *v3 = v8;
    swift_release();
  }
  return sub_1A5C16F88(a1, a2, a3);
}

uint64_t sub_1A5C16F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78]();
  v9 = &v11[-v8];
  sub_1A5C41828();
  v12 = a2;
  v13 = a3;
  v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_1A5C41BB8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_1A5C1709C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1A5C418D0();
}

uint64_t sub_1A5C17190(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = result;
  if (qword_1EE800188 == -1)
  {
    if (result)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    return result;
  }
  result = swift_once();
  if (!v1)
    goto LABEL_7;
LABEL_3:
  result = ccchacha20poly1305_aad();
  if ((_DWORD)result)
  {
    v2 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v3 = v2;
    *(_BYTE *)(v3 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_1A5C17244(uint64_t a1, uint64_t a2)
{
  sub_1A5BEEDA4(a1, a2);
}

void sub_1A5C17278()
{
  __asm { BR              X11 }
}

_QWORD *sub_1A5C172D8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

void sub_1A5C17568()
{
  __asm { BR              X12 }
}

uint64_t sub_1A5C175C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

uint64_t sub_1A5C177BC(uint64_t (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_1A5C41918();
  v4 = *v1;
  v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1A5C41894();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v6 = result;
  result = sub_1A5C418B8();
  v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = v5 - v4;
  v9 = sub_1A5C418AC();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return a1(v6 + v7, v6 + v7 + v10);
}

char *sub_1A5C17864(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_1A5C41894();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_1A5C418B8();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_1A5C418AC();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1A5C17910()
{
  return sub_1A5C1709C();
}

uint64_t sub_1A5C1792C(uint64_t a1)
{
  return sub_1A5C17190(a1);
}

uint64_t sub_1A5C17944(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_1A5C41894();
  if (v2)
  {
    v3 = v2;
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
      goto LABEL_10;
    v5 = v3 + a1 - result;
  }
  else
  {
    v5 = 0;
  }
  result = sub_1A5C418AC();
  if (qword_1EE800188 == -1)
  {
    if (v5)
      return ccchacha20poly1305_setnonce();
  }
  else
  {
    result = swift_once();
    if (v5)
      return ccchacha20poly1305_setnonce();
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CoreCryptoChaChaPolyImpl()
{
  return &type metadata for CoreCryptoChaChaPolyImpl;
}

void sub_1A5C17A00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[2];

  if (a1 < 0 || (v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1)
    v4 = 1;
  else
    v4 = a1;
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    goto LABEL_27;
  v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = sub_1A5BED678(a2);
  v14[1] = v9;
  sub_1A5BED714((uint64_t)v14);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    v10 = -v8;
    while (1)
    {
      v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10))
        break;
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7)
        goto LABEL_25;
      v13 = __CFADD__(v10++, 1);
      sub_1A5C41984();
      if (v13)
        return;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

ValueMetadata *type metadata accessor for AES()
{
  return &type metadata for AES;
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return sub_1A5BFFE88(a1, a2, *v2);
}

uint64_t sub_1A5C17BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C17BD8(a1, a2, a3) & 1;
}

uint64_t sub_1A5C17BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  swift_beginAccess();
  result = a2 - a1;
  if (a1)
    v7 = a2 - a1;
  else
    v7 = 0;
  if (v7 != *(_QWORD *)(a3 + 16))
    return 0;
  if (a1)
    return cc_cmp_safe() == 0;
  __break(1u);
  return result;
}

void sub_1A5C17C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

BOOL sub_1A5C17CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
    v3 = v1 - v0;
  else
    v3 = 0;
  if (v3 != BYTE6(v2))
    return 0;
  if (!v0)
  {
    __break(1u);
    JUMPOUT(0x1A5C17F28);
  }
  return cc_cmp_safe() == 0;
}

void sub_1A5C17F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

BOOL sub_1A5C17FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1A5C12C44((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v3), v0, v1, &v5);
  return v5;
}

uint64_t SymmetricKey.bitCount.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;

  v1 = *v0;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (!(v3 >> 60))
    return 8 * v3;
  __break(1u);
  return result;
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static SymmetricKeySize.bits128.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

CryptoKit::SymmetricKeySize __swiftcall SymmetricKeySize.init(bitCount:)(CryptoKit::SymmetricKeySize bitCount)
{
  CryptoKit::SymmetricKeySize *v1;

  if (bitCount.bitCount < 1 || (bitCount.bitCount & 7) != 0)
    __break(1u);
  else
    v1->bitCount = bitCount.bitCount;
  return bitCount;
}

void static SymmetricKeySize.bits192.getter(_QWORD *a1@<X8>)
{
  *a1 = 192;
}

void static SymmetricKeySize.bits256.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t SymmetricKey.init(size:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  if ((unint64_t)(*a1 + 7) > 0xE)
  {
    if (v3 < 0)
      v3 = *a1 + 7;
    result = sub_1A5BECAD4(v3 >> 3);
  }
  else
  {
    if (qword_1ECF977F0 != -1)
      swift_once();
    result = swift_retain();
  }
  *a2 = result;
  return result;
}

uint64_t sub_1A5C18324(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SymmetricKey.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t static SymmetricKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1A5C17BD8(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

uint64_t sub_1A5C18398(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1A5C17BD8(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

ValueMetadata *type metadata accessor for SymmetricKeySize()
{
  return &type metadata for SymmetricKeySize;
}

uint64_t static HashFunction.hash(bufferPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78]();
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
}

uint64_t dispatch thunk of static HashFunction.blockByteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1A5C184E0@<X0>(unsigned __int8 a1@<W1>, char **a2@<X8>)
{
  uint64_t v2;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[56];
  _BYTE v29[25];
  _QWORD v30[6];
  char v31;
  _BYTE v32[25];
  _BYTE v33[56];
  _BYTE v34[56];
  _OWORD v35[3];
  unsigned __int8 v36;
  _OWORD v37[3];
  unsigned __int8 v38;
  _OWORD v39[3];
  unsigned __int8 v40;
  _OWORD v41[3];
  unsigned __int8 v42;
  _BYTE v43[48];
  char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _OWORD v51[2];
  uint64_t v52;
  char v53;
  char *v54;

  sub_1A5C20D4C((uint64_t)v28);
  sub_1A5BF683C((uint64_t)v28, (uint64_t)v39, &qword_1ECF977C0);
  if (v40 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v41[0] = v39[0];
  v41[1] = v39[1];
  v41[2] = v39[2];
  v42 = v40;
  if (LOBYTE(v39[0]) != a1
    || (sub_1A5BFB08C((uint64_t)v41 + 8, (uint64_t)v43), sub_1A5BFB08C((uint64_t)v43, (uint64_t)v51), (v53 & 1) != 0))
  {
    sub_1A5BF6798();
    swift_allocError();
    *v5 = 1;
    swift_willThrow();
    return sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  }
  v25 = v51[0];
  v26 = v51[1];
  v27 = v52;
  sub_1A5C20D4C((uint64_t)v29);
  sub_1A5BF683C((uint64_t)v29, (uint64_t)v35, &qword_1ECF977C0);
  if (v36 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v22 = 3;
    sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
    sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
    swift_willThrow();
    goto LABEL_11;
  }
  v37[0] = v35[0];
  v37[1] = v35[1];
  v37[2] = v35[2];
  v38 = v36;
  sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
  sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
  v10 = sub_1A5C05560((char *)v37, 6, v8, v9);
  if (v2)
  {
LABEL_11:
    swift_unknownObjectRelease();
    sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
    return sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  }
  v54 = v10;
  sub_1A5C20D4C((uint64_t)v30);
  v11 = v30[0];
  v12 = v30[1];
  v13 = v30[2];
  v14 = v30[3];
  v15 = v30[4];
  v16 = v30[5];
  v17 = v31;
  sub_1A5BF683C((uint64_t)v30, (uint64_t)v34, &qword_1ECF977C0);
  if (v34[48] == 255)
  {
    v18 = 0;
    v19 = 0;
    v21 = 0;
  }
  else
  {
    v44[0] = v11;
    v45 = v12;
    v46 = v13;
    v47 = v14;
    v48 = v15;
    v49 = v16;
    v50 = v17 & 1;
    v24 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
    sub_1A5C194FC((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
    sub_1A5C2707C(v11, (uint64_t)&v24, (uint64_t)v44);
    sub_1A5C194FC((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
    v18 = v24;
    v19 = v24 + 32;
    v20 = *((_QWORD *)v24 + 2);
    sub_1A5C194FC((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
    v21 = (2 * v20) | 1;
  }
  sub_1A5C20D4C((uint64_t)v32);
  sub_1A5C194FC((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  sub_1A5BF683C((uint64_t)v32, (uint64_t)v33, &qword_1ECF977C0);
  if (v33[48] != 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v23 = 3;
    swift_willThrow();
    sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  }
  swift_unknownObjectRelease();
  sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  result = sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  *a2 = v54;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = 0;
  a2[4] = (char *)v21;
  return result;
}

uint64_t sub_1A5C188F8(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2)
  {
    v3 = sub_1A5C3F72C(a2);
    return sub_1A5C3F284(v3, v4, v5);
  }
  else
  {
    v7 = *a1;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A5BFC774(0, *(_QWORD *)(v7 + 16) + 1, 1, (char *)v7);
      v7 = result;
    }
    v9 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if (v9 >= v8 >> 1)
    {
      result = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v9 + 1, 1, (char *)v7);
      v7 = result;
    }
    *(_QWORD *)(v7 + 16) = v9 + 1;
    *(_BYTE *)(v7 + v9 + 32) = 0;
    *a1 = v7;
  }
  return result;
}

uint64_t sub_1A5C189B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  _BYTE *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE v34[56];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE v40[56];
  unsigned __int8 v41[56];
  _QWORD *v42[5];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  unsigned __int8 v48;
  _OWORD v49[3];
  unsigned __int8 v50;
  _OWORD v51[3];
  unsigned __int8 v52;
  _OWORD v53[3];
  unsigned __int8 v54;
  _BYTE v55[48];
  _BYTE v56[32];
  char *v57;
  _BYTE v58[32];
  char *v59;
  _QWORD v60[5];
  char v61;
  unint64_t v62;

  sub_1A5C20D4C((uint64_t)v34);
  sub_1A5BF683C((uint64_t)v34, (uint64_t)v51, &qword_1ECF977C0);
  if (v52 != 255)
  {
    v53[0] = v51[0];
    v53[1] = v51[1];
    v53[2] = v51[2];
    v54 = v52;
    result = sub_1A5C2B8FC((unsigned __int8 *)v53, 2u);
    if (v2)
      return result;
    if (!result)
    {
      sub_1A5C184E0(0x30u, &v35);
      v7 = v35;
      v8 = v36;
      v9 = v37;
      v10 = v38;
      v62 = v39;
      sub_1A5C20D4C((uint64_t)v40);
      sub_1A5BF683C((uint64_t)v40, (uint64_t)v47, &qword_1ECF977C0);
      if (v48 == 255)
      {
        sub_1A5BF6798();
        swift_allocError();
        *v15 = 3;
        swift_willThrow();
      }
      else
      {
        v49[0] = v47[0];
        v49[1] = v47[1];
        v49[2] = v47[2];
        v50 = v48;
        if (LOBYTE(v47[0]) == 4)
        {
          v30 = v10;
          v31 = v9;
          v32 = v8;
          v33 = v7;
          sub_1A5BFB08C((uint64_t)v49 + 8, (uint64_t)v55);
          result = sub_1A5BFB08C((uint64_t)v55, (uint64_t)v60);
          if ((v61 & 1) == 0)
          {
            __break(1u);
            return result;
          }
          v11 = v60[0];
          v12 = v60[1];
          v13 = v60[2];
          v14 = v60[3];
          sub_1A5C21170(a1, 0, 2);
          sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
          sub_1A5C274FC(v11, v12, v13, v14, (uint64_t)v41);
          sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
          sub_1A5C19568((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
          sub_1A5C2CAD4(v41, 0x30u, (uint64_t)v42);
          v18 = v42[0];
          v19 = v42[1];
          v20 = v42[2];
          v21 = v42[3];
          v22 = v42[4];
          v28 = v44;
          v29 = v43;
          v26 = v46;
          v27 = v45;
          if (!v42[0])
          {
            sub_1A5C19568((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
            result = sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
LABEL_27:
            v25 = v62;
            *(_QWORD *)a2 = v33;
            *(_QWORD *)(a2 + 8) = v32;
            *(_QWORD *)(a2 + 16) = v31;
            *(_QWORD *)(a2 + 24) = v30;
            *(_QWORD *)(a2 + 32) = v25;
            *(_QWORD *)(a2 + 40) = v18;
            *(_QWORD *)(a2 + 48) = v19;
            *(_QWORD *)(a2 + 56) = v20;
            *(_QWORD *)(a2 + 64) = v21;
            *(_QWORD *)(a2 + 72) = v22;
            *(_OWORD *)(a2 + 80) = v29;
            *(_OWORD *)(a2 + 96) = v28;
            *(_OWORD *)(a2 + 112) = v27;
            *(_OWORD *)(a2 + 128) = v26;
            return result;
          }
          v57 = v35;
          if (sub_1A5C054F4(v42[0], v35))
          {
            if (v19)
            {
              if (v36)
              {
                v23 = sub_1A5BFAB10((uint64_t)v20, (uint64_t)v21, (unint64_t)v22, v37, v38, v39);
                swift_unknownObjectRetain();
                sub_1A5C41BF4();
                if ((v23 & 1) != 0)
                {
                  sub_1A5C19568((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
                  sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
                  swift_unknownObjectRelease();
LABEL_26:
                  result = swift_bridgeObjectRelease();
                  goto LABEL_27;
                }
                goto LABEL_24;
              }
            }
            else if (!v36)
            {
              sub_1A5C41BF4();
              sub_1A5C19568((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
              sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
              goto LABEL_26;
            }
            sub_1A5C41BF4();
            swift_unknownObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_1A5C41BF4();
          }
LABEL_24:
          sub_1A5BF6798();
          swift_allocError();
          *v24 = 3;
          swift_willThrow();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          sub_1A5C193D8((uint64_t *)v42);
          sub_1A5C19568((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
          sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
          sub_1A5BF6814((uint64_t)&v57);
          sub_1A5BF683C((uint64_t)&v36, (uint64_t)v56, &qword_1EE800178);
          v17 = v56;
          return sub_1A5BF6880((uint64_t)v17);
        }
        sub_1A5BF6798();
        swift_allocError();
        *v16 = 1;
        swift_willThrow();
        sub_1A5C194FC((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
      }
      v59 = v35;
      sub_1A5BF6814((uint64_t)&v59);
      sub_1A5BF683C((uint64_t)&v36, (uint64_t)v58, &qword_1EE800178);
      v17 = v58;
      return sub_1A5BF6880((uint64_t)v17);
    }
  }
  sub_1A5BF6798();
  swift_allocError();
  *v6 = 3;
  return swift_willThrow();
}

uint64_t sub_1A5C18F44(char **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  _BYTE v15[16];
  char **v16;
  char *v17;
  _OWORD v18[6];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  _BYTE v22[32];
  uint64_t v23;

  v16 = &v17;
  v17 = 0;
  sub_1A5C27378(2, a1, (uint64_t (*)(char **))sub_1A5C190F0, (uint64_t)v15);
  v5 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v5;
  v21 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)&v20[0];
  sub_1A5BF683C((uint64_t)v20 + 8, (uint64_t)v22, &qword_1EE800178);
  sub_1A5C1910C((uint64_t)&v23);
  sub_1A5C19134((uint64_t)v22);
  result = sub_1A5C23040(48, a1, (char *)v20);
  if (!v2)
  {
    v17 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
    v7 = *(_OWORD *)(a2 + 88);
    v8 = *(_OWORD *)(a2 + 120);
    v18[4] = *(_OWORD *)(a2 + 104);
    v18[5] = v8;
    v19 = *(_QWORD *)(a2 + 136);
    v9 = *(_OWORD *)(a2 + 56);
    v18[0] = *(_OWORD *)(a2 + 40);
    v18[1] = v9;
    v18[2] = *(_OWORD *)(a2 + 72);
    v18[3] = v7;
    sub_1A5C19358((uint64_t *)v18);
    sub_1A5C27994(48, &v17, (char *)v18);
    v10 = sub_1A5C193D8((uint64_t *)v18);
    v11 = v17;
    MEMORY[0x1E0C80A78](v10);
    v14[2] = v11;
    v14[3] = v12;
    v14[4] = 0;
    v14[5] = v13;
    sub_1A5C27378(4, a1, (uint64_t (*)(char **))sub_1A5C19454, (uint64_t)v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A5C190D8(uint64_t *a1, unint64_t *a2)
{
  return sub_1A5C188F8(a1, *a2);
}

uint64_t sub_1A5C190F0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A5C188F8(a1, **(_QWORD **)(v1 + 16));
}

uint64_t sub_1A5C1910C(uint64_t a1)
{
  sub_1A5C41BF4();
  return a1;
}

uint64_t sub_1A5C19134(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1A5C1915C@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  _BYTE v28[56];
  _BYTE v29[56];

  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v6 = 1;
    swift_willThrow();
    v7 = (uint64_t)a1;
    return sub_1A5C19568(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  v8 = *((_QWORD *)a1 + 5);
  v9 = *(_OWORD *)(a1 + 24);
  v26[0] = *(_OWORD *)(a1 + 8);
  v26[1] = v9;
  v27 = v8;
  swift_unknownObjectRetain_n();
  sub_1A5C189B0((uint64_t)v26, (uint64_t)&v17);
  if (v3)
  {
    swift_unknownObjectRelease();
    sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
LABEL_8:
    v7 = (uint64_t)a1;
    return sub_1A5C19568(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  sub_1A5C20D4C((uint64_t)v28);
  sub_1A5C194FC((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  sub_1A5BF683C((uint64_t)v28, (uint64_t)v29, &qword_1ECF977C0);
  if (v29[48] != 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v10 = 3;
    swift_willThrow();
    sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    v16[6] = v23;
    v16[7] = v24;
    v16[8] = v25;
    v16[2] = v19;
    v16[3] = v20;
    v16[4] = v21;
    v16[5] = v22;
    v16[0] = v17;
    v16[1] = v18;
    sub_1A5C19470((uint64_t)v16);
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  swift_unknownObjectRelease();
  sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  result = sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  v12 = v24;
  a3[6] = v23;
  a3[7] = v12;
  a3[8] = v25;
  v13 = v20;
  a3[2] = v19;
  a3[3] = v13;
  v14 = v22;
  a3[4] = v21;
  a3[5] = v14;
  v15 = v18;
  *a3 = v17;
  a3[1] = v15;
  return result;
}

uint64_t *sub_1A5C19358(uint64_t *a1)
{
  sub_1A5C193A8(*a1);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1A5C193A8(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return sub_1A5C41BF4();
  }
  return result;
}

uint64_t *sub_1A5C193D8(uint64_t *a1)
{
  sub_1A5C19428(*a1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1A5C19428(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1A5C19454(uint64_t a1)
{
  uint64_t v1;

  return sub_1A5C0A414(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1A5C19470(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1A5C19428(v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1A5C194FC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_1A5C19538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 != 255)
    return j__swift_unknownObjectRetain(a2, a3, a4, a5, a6, a7 & 1);
  return result;
}

uint64_t sub_1A5C19568(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_1A5C195A0()
{
  sub_1A5C41F00();
  sub_1A5C41F24();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C195E4()
{
  return sub_1A5C41F24();
}

uint64_t sub_1A5C1960C()
{
  sub_1A5C41F00();
  sub_1A5C41F24();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C1964C()
{
  sub_1A5C41E10();
  sub_1A5C41B04();
  sub_1A5C41E7C();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  sub_1A5C41B04();
  return 0;
}

unint64_t sub_1A5C196FC()
{
  unint64_t result;

  result = qword_1EE8017E0;
  if (!qword_1EE8017E0)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C44ABC, &_s14ASN1IdentifierVN);
    atomic_store(result, (unint64_t *)&qword_1EE8017E0);
  }
  return result;
}

ValueMetadata *_s14ASN1IdentifierVMa()
{
  return &_s14ASN1IdentifierVN;
}

ValueMetadata *_s32CoreCryptoCurve448PrivateKeyImplVMa_0()
{
  return &_s32CoreCryptoCurve448PrivateKeyImplVN_0;
}

ValueMetadata *_s31CoreCryptoCurve448PublicKeyImplVMa_0()
{
  return &_s31CoreCryptoCurve448PublicKeyImplVN_0;
}

size_t sub_1A5C19770()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;

  v0 = sub_1A5C41C00();
  *(_QWORD *)(v0 + 16) = 56;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  if (!ccrng())
LABEL_5:
    __break(1u);
  if (cccurve448_make_pub())
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = sub_1A5C41BF4();
  v2 = sub_1A5C19A08(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

size_t sub_1A5C19878@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result;
  uint64_t v5;

  if (a1 && a2 - a1 == 56)
  {
    result = sub_1A5BF1478(a1, a2);
    *a3 = result;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A5C198EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!result || a2 - result != 56)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v2 = 0;
    *(_BYTE *)(v2 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A5C19950@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result;

  if (!ccrng())
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  if (!a1)
    goto LABEL_7;
  result = cccurve448();
  *a3 = result;
  return result;
}

size_t sub_1A5C19A08(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16) == 56)
    return sub_1A5BF1478(a1 + 32, a1 + 88);
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A5C19A7C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  result = sub_1A5C418D0();
  if (!v0)
    return v2;
  return result;
}

uint64_t sub_1A5C19AF0()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1A5C418D0();
  if (!v0)
    return sub_1A5BECE14();
  return result;
}

uint64_t sub_1A5C19B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C19BA4(a1, a2, a3, sub_1A5C1B828);
}

uint64_t sub_1A5C19B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C19BA4(a1, a2, a3, sub_1A5BED098);
}

uint64_t sub_1A5C19BA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
      v4 = a3 - a2;
    else
      v4 = 0;
    result = a4(0, result, v4, a2, a3);
    if ((v5 & 1) != 0)
      v6 = v4;
    else
      v6 = result;
    if ((v6 & 0x8000000000000000) == 0)
      return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C19C18(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (v7 = a5 >> 1, v6 >= result))
  {
    v7 = a4 + result;
    if (__OFADD__(a4, result))
      goto LABEL_18;
  }
  if (v7 < a4)
    goto LABEL_14;
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
      return a2;
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_1A5C19C94(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1A5C19CF8
     + dword_1A5C19E9C[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1A5C19D08()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_1A5BEE468(v1, v0);
  sub_1A5C4196C();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

void sub_1A5C19EDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  sub_1A5BEE468(a2, a3);
  sub_1A5BEE468(a2, a3);
  swift_retain();
  sub_1A5BEF928(a4, a2, a3);
  __asm { BR              X10 }
}

uint64_t sub_1A5C19F6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__src, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  size_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];
  __int128 v56;
  uint64_t v57;

  if (BYTE6(v33) < 0xCuLL)
  {
LABEL_14:
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v50 = 1;
    *(_BYTE *)(v50 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v31, v33);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1A5C1A3ECLL);
  }
  v57 = v32;
  v36 = v35;
  sub_1A5BF05B8(v31, v33);
  v33 = v37;
  v39 = v38;
  sub_1A5BEFF90(v29, v27);
  v40 = ccaes_gcm_decrypt_mode();
  if (!v40)
  {
    __break(1u);
    goto LABEL_14;
  }
  v41 = v40;
  v55[0] = v28;
  *(_QWORD *)&v56 = v33;
  *((_QWORD *)&v56 + 1) = v39;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  result = sub_1A5BF5018(v55, (uint64_t *)&v56, v41);
  if (!v30)
  {
    v43 = result;
    if (v34 >> 60 == 15)
    {
      v44 = v57;
    }
    else
    {
      v45 = v36;
      sub_1A5BEE468(v36, v34);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v46 = swift_allocObject();
        v47 = *(_QWORD *)(v43 + 24);
        v52 = v46;
        *(_QWORD *)(v46 + 24) = v47;
        swift_retain();
        MEMORY[0x1A85B3CC8](v47);
        v48 = (void *)swift_slowAlloc();
        v51 = *(const void **)(v43 + 16);
        v49 = MEMORY[0x1A85B3CC8](v47);
        if ((v49 & 0x8000000000000000) != 0)
        {
          __break(1u);
          JUMPOUT(0x1A5C1A384);
        }
        memmove(v48, v51, v49);
        swift_release();
        *(_QWORD *)(v52 + 16) = v48;
        swift_release();
        v45 = v36;
      }
      sub_1A5C1A540(v45, v34);
      sub_1A5BF4040(v45, v34);
      v44 = v57;
    }
    v56 = xmmword_1A5C42A80;
    sub_1A5BEE468(v29, v27);
    sub_1A5BEFD14(v44, v29, v27);
    sub_1A5BEFA74(16, v53, v54);
    __asm { BR              X10 }
  }
  return result;
}

void AES.GCM.SealedBox.nonce.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  sub_1A5BEE468(v1, v2);
  sub_1A5BEF928(v3, v1, v2);
  sub_1A5C1AD00(v4, v5);
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  sub_1A5BEE468(v1, v2);
  sub_1A5BEFD14(v3, v1, v2);
  sub_1A5BEFA74(16, v5, v6);
  return v7;
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  sub_1A5BEE468(v1, v2);
  sub_1A5BEFBC4(16, v1, v2);
  return v4;
}

void sub_1A5C1A540(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C1A598()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;

  swift_retain_n();
  v2 = ccgcm_aad();
  if (v2)
  {
    v3 = v2;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v4 = v3;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
  }
  sub_1A5BEFF90(v1, v0);
  return swift_release_n();
}

void sub_1A5C1A7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X12 }
}

uint64_t sub_1A5C1A7F8(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1A5C1A830 + dword_1A5C1A8F4[a2 >> 62]))();
}

void sub_1A5C1A840()
{
  uint64_t v0;

  v0 = sub_1A5BEEEB4();
  MEMORY[0x1E0C80A78](v0);
  sub_1A5BF08C4();
}

uint64_t sub_1A5C1A904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  sub_1A5BED00C(a3, a1, a2);
  sub_1A5BEE468(a4, a5);
  sub_1A5C1AA44(a4, a5);
  return sub_1A5BEFF90(a4, a5);
}

uint64_t sub_1A5C1A9D4(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4)
            return a2;
          goto LABEL_15;
        }
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7)
      goto LABEL_8;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

void sub_1A5C1AA44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C1AAA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return sub_1A5BF59B4((uint64_t)&v4, (uint64_t)&v4 + BYTE6(v2), v0);
}

void sub_1A5C1AD00(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1A5C1AD3C()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (BYTE6(v0) >= 0xCuLL)
  {
    sub_1A5BF05B8(v1, v0);
    *v2 = v4;
    v2[1] = v5;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v3 = 1;
    *(_BYTE *)(v3 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v1, v0);
  }
}

uint64_t static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v23 = a8;
  v21 = a5;
  v22 = a7;
  v15 = sub_1A5C41CF0();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v21 - v17;
  v25 = *a2;
  v24 = *a3;
  v19 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v21 - v17, a4, a6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a6);
  sub_1A5BF46AC(&v25, a1, (uint64_t *)&v24, (uint64_t)v18, v21, a6, v22, v23, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;

  if (v0[2] != 12)
    return 0;
  v2 = v0;
  v1 = *v0;
  sub_1A5BEE468(v1, v2[1]);
  return v1;
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = *a1;
  v9 = a1[1];
  if (sub_1A5C41C54() == 16)
    __asm { BR              X10 }
  sub_1A5BEFF90(v10, v9);
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v11 = 1;
  *(_BYTE *)(v11 + 4) = 1;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
}

uint64_t static AES.GCM.open<A>(_:using:authenticating:)(__int128 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v10 = sub_1A5C41CF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v19 - v12;
  v14 = *((_QWORD *)a1 + 2);
  v21 = *a2;
  v19 = *a1;
  v20 = v14;
  v15 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a3, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, a4);
  sub_1A5BF4AC0((uint64_t)&v21, (uint64_t *)&v19, (uint64_t)v13, a4, a5);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *a2;
  v10 = *a3;
  v13 = xmmword_1A5C43D50;
  v14 = v10;
  v11 = sub_1A5BEB4F4();
  return sub_1A5BF46AC(&v15, a1, (uint64_t *)&v14, (uint64_t)&v13, a4, MEMORY[0x1E0CB0338], a5, v11, a6);
}

void static AES.GCM.open(_:using:)(uint64_t a1, uint64_t *a2)
{
  sub_1A5C19EDC(*a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t AES.GCM.SealedBox.init(combined:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 12;
  return result;
}

uint64_t AES.GCM.SealedBox.init<A>(combined:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A5C41C54() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    v11 = sub_1A5C419FC();
    v13 = v12;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v11;
    a3[1] = v13;
    a3[2] = 12;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v9 = 1;
    *(_BYTE *)(v9 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  return result;
}

unint64_t sub_1A5C1B4A0()
{
  unint64_t result;

  result = qword_1EE8017E8;
  if (!qword_1EE8017E8)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for AES.GCM.Nonce, &type metadata for AES.GCM.Nonce);
    atomic_store(result, (unint64_t *)&qword_1EE8017E8);
  }
  return result;
}

unint64_t sub_1A5C1B4E8()
{
  unint64_t result;

  result = qword_1EE8017F0;
  if (!qword_1EE8017F0)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C44BAC, &type metadata for AES.GCM.SealedBox);
    atomic_store(result, (unint64_t *)&qword_1EE8017F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.GCM()
{
  return &type metadata for AES.GCM;
}

uint64_t *sub_1A5C1B540(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_1A5BEE468(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s3GCMO9SealedBoxVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_1A5BEE468(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1A5BEFF90(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s3GCMO9SealedBoxVwta(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1A5BEFF90(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t _s3GCMO9SealedBoxVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s3GCMO9SealedBoxVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.GCM.SealedBox()
{
  return &type metadata for AES.GCM.SealedBox;
}

uint64_t sub_1A5C1B6CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1A5C41894();
  if (!result || (result = sub_1A5C418B8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1A5C418AC();
      return sub_1A5C4196C();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C1B75C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  result = sub_1A5C41894();
  v5 = result;
  if (result)
  {
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    v5 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  result = sub_1A5C418AC();
  if (!v5)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v6 = ccgcm_aad();
  if (v6)
  {
    v7 = v6;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_1A5C1B828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = sub_1A5C10970(a1, a3, a4, a5);
  if (a2 > 0)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2)
      goto LABEL_8;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_8:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = a5 - a4;
  if (!a4)
    v11 = 0;
  if (result < 0 || v11 < result)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x1A5C1B8C8);
  }
  return result;
}

unint64_t sub_1A5C1B8F8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a5;
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v9 = a1;
    v10 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v10) = 1;
    result = a3;
    if ((a3 & 0xC) != 4 << v10)
    {
      if ((a5 & 0x1000000000000000) == 0)
        goto LABEL_6;
LABEL_21:
      result = sub_1A5C41B28();
      if ((v16 & 1) != 0)
        result = v8;
      goto LABEL_17;
    }
  }
  result = sub_1A5C02C60(v7, v6, v5);
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_21;
LABEL_6:
  v12 = result >> 16;
  v13 = (result >> 16) - v9;
  v14 = v8 >> 16;
  if (v9)
  {
    if (v12 < v14)
      goto LABEL_12;
    result = v8;
    if (v13 >= (uint64_t)v14)
      goto LABEL_12;
LABEL_17:
    if (v7 >> 14 >= result >> 14)
      return sub_1A5C02CD8(result, v7, v8, v7, v6, v5);
    __break(1u);
    goto LABEL_25;
  }
  if (v14 >= v12)
  {
    result = v8;
    if ((uint64_t)v14 < v13)
      goto LABEL_17;
  }
LABEL_12:
  if ((v13 & 0x8000000000000000) == 0)
  {
    v15 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v15 = v6 & 0xFFFFFFFFFFFFLL;
    if (v15 < v13)
      goto LABEL_26;
    result = (v13 << 16) | 4;
    goto LABEL_17;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1A5C1BA24(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a5;
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v9 = a1;
    v10 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v10) = 1;
    result = a3;
    if ((a3 & 0xC) != 4 << v10)
    {
      if ((a5 & 0x1000000000000000) == 0)
        goto LABEL_6;
LABEL_21:
      result = sub_1A5C41B28();
      if ((v17 & 1) != 0)
        v15 = v8;
      else
        v15 = result;
      goto LABEL_17;
    }
  }
  result = sub_1A5C02C60(v7, v6, v5);
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_21;
LABEL_6:
  v12 = result >> 16;
  v13 = (result >> 16) - v9;
  v14 = v8 >> 16;
  if (v9)
  {
    if (v12 < v14)
      goto LABEL_12;
    v15 = v8;
    if (v13 >= (uint64_t)v14)
      goto LABEL_12;
LABEL_17:
    if (v15 >> 14 >= v8 >> 14)
      return sub_1A5C02CD8(v8, v15, v8, v7, v6, v5);
    __break(1u);
    goto LABEL_25;
  }
  if (v14 >= v12)
  {
    v15 = v8;
    if ((uint64_t)v14 < v13)
      goto LABEL_17;
  }
LABEL_12:
  if ((v13 & 0x8000000000000000) == 0)
  {
    v16 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v16 = v6 & 0xFFFFFFFFFFFFLL;
    if (v16 < v13)
      goto LABEL_26;
    v15 = (v13 << 16) | 4;
    goto LABEL_17;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1A5C1BB50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C1A904(a1, a2, *(_QWORD *)(v2 + 16), **(_QWORD **)(v2 + 24), *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8));
}

uint64_t sub_1A5C1BB70()
{
  return sub_1A5C41150();
}

uint64_t sub_1A5C1BB88(int a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t))(a3 + 40))(&v4, &v5, a2);
}

uint64_t SharedSecret.init<A>(withExternalSS:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_1A5BECE14();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SharedSecret.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return sub_1A5BFFE88(a1, a2, *v2);
}

uint64_t SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)@<X0>(uint64_t a1@<X1>, int64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v15;

  v15 = *v7;
  swift_beginAccess();
  return sub_1A5C1BCF0(v15 + 32, v15 + 32 + *(_QWORD *)(v15 + 16), a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1A5C1BCF0@<X0>(size_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v17;

  sub_1A5BEC1E8(a1, a2, &v17);
  static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)(&v17, a3, a4, a5, a6, a7, a8, a9);
  return swift_release();
}

uint64_t SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, char *a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;

  v12 = *v10;
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(&v12, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1A5C1BDB8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SharedSecret.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t SharedSecret.hash(into:)()
{
  swift_beginAccess();
  return sub_1A5C41F0C();
}

uint64_t SharedSecret.hashValue.getter()
{
  sub_1A5C41F00();
  swift_beginAccess();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C1BE7C()
{
  sub_1A5C41F00();
  swift_beginAccess();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C1BEDC()
{
  swift_beginAccess();
  return sub_1A5C41F0C();
}

uint64_t sub_1A5C1BF2C()
{
  sub_1A5C41F00();
  swift_beginAccess();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t static SharedSecret.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return sub_1A5C17BC0(v2 + 32, v2 + 32 + *(_QWORD *)(v2 + 16), v3) & 1;
}

uint64_t static SharedSecret.== infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t AssociatedConformanceWitness;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1A5C41CF0();
  v9 = MEMORY[0x1E0C80A78](v8);
  v36 = (char *)&v34 - v10;
  v35 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_checkMetadataState();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v34 - v18;
  v20 = *a1;
  v38 = a2;
  v39 = a4;
  sub_1A5C41828();
  v21 = sub_1A5C41C54();
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v38, a3);
    v30 = sub_1A5C419FC();
    v32 = v31;
    swift_beginAccess();
    sub_1A5C17F50(v20 + 32, v20 + 32 + *(_QWORD *)(v20 + 16), v30, v32);
    v29 = v33;
    sub_1A5BEFF90(v30, v32);
    return v29 & 1;
  }
  v40[0] = v20;
  sub_1A5C41828();
  v23 = v36;
  sub_1A5C41C78();
  v22(v17, v13);
  v24 = AssociatedTypeWitness;
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    v27 = sub_1A5C0E168();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v29 = sub_1A5C28A38(v40, v23, &type metadata for SharedSecret, v24, v27, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    return v29 & 1;
  }
  __break(1u);
  return result;
}

uint64_t SharedSecret.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v1 = *v0;
  strcpy((char *)v9, "SharedSecret: ");
  HIBYTE(v9[1]) = -18;
  result = swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = 2 * v3;
  if (2 * v3 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  swift_retain();
  if (v4)
  {
    v5 = sub_1A5C41C00();
    *(_QWORD *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), v4);
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v7 = 0;
  v8 = v5;
  v6 = swift_retain();
  sub_1A5BFCE18(v6, &v8, &v7);
  swift_release();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v9[0];
}

unint64_t sub_1A5C1C434()
{
  unint64_t result;

  result = qword_1EE8017F8;
  if (!qword_1EE8017F8)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SharedSecret, &type metadata for SharedSecret);
    atomic_store(result, (unint64_t *)&qword_1EE8017F8);
  }
  return result;
}

uint64_t dispatch thunk of DiffieHellmanKeyAgreement.publicKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DiffieHellmanKeyAgreement.sharedSecretFromKeyAgreement(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SharedSecret()
{
  return &type metadata for SharedSecret;
}

uint64_t static Insecure.SHA1.blockByteCount.getter()
{
  return 64;
}

uint64_t static Insecure.SHA1.byteCount.getter()
{
  return 20;
}

uint64_t Insecure.SHA1.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF10EC(MEMORY[0x1E0C823D0], &qword_1ECF976D8, a1);
}

uint64_t Insecure.SHA1.finalize()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C0B704(a1);
}

uint64_t sub_1A5C1C4F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF123C(MEMORY[0x1E0C823D0], &qword_1ECF976D8, a1);
}

uint64_t sub_1A5C1C508@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C0B704(a1);
}

uint64_t static Insecure.MD5.blockByteCount.getter()
{
  return 64;
}

uint64_t static Insecure.MD5.byteCount.getter()
{
  return 16;
}

uint64_t Insecure.MD5.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BF10EC(MEMORY[0x1E0C821F0], &qword_1ECF97550, a1);
}

uint64_t Insecure.MD5.finalize()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5BEC540(a1);
}

unint64_t sub_1A5C1C574()
{
  unint64_t result;

  result = qword_1EE801800;
  if (!qword_1EE801800)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45F10, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801800);
  }
  return result;
}

unint64_t sub_1A5C1C5B8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C1C5DC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A5C1C5DC()
{
  unint64_t result;

  result = qword_1ECF976E0;
  if (!qword_1ECF976E0)
  {
    result = MEMORY[0x1A85B3FE0]("1Q3?XW", &type metadata for Insecure.SHA1);
    atomic_store(result, (unint64_t *)&qword_1ECF976E0);
  }
  return result;
}

unint64_t sub_1A5C1C624()
{
  unint64_t result;

  result = qword_1EE801808;
  if (!qword_1EE801808)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.SHA1Digest, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801808);
  }
  return result;
}

unint64_t sub_1A5C1C66C()
{
  unint64_t result;

  result = qword_1EE801810;
  if (!qword_1EE801810)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C46068, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801810);
  }
  return result;
}

unint64_t sub_1A5C1C6B4()
{
  unint64_t result;

  result = qword_1EE801818[0];
  if (!qword_1EE801818[0])
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5Digest, &type metadata for Insecure.MD5Digest);
    atomic_store(result, qword_1EE801818);
  }
  return result;
}

uint64_t type metadata accessor for CoreCryptoDigestImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoDigestImpl);
}

uint64_t Curve25519.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t result;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v10 == 3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    Curve25519.KeyAgreement.PublicKey.init<A>(rawRepresentation:)((uint64_t)v9, a2, &v14);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    if (!v3)
      *a3 = v14;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v12 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }
  return result;
}

uint64_t Curve25519.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v4;

  if (*a1 == 3)
  {
    v1 = sub_1A5C41BF4();
    v2 = sub_1A5BEBFDC(v1);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v4 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A5C1C8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  return Curve25519.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3);
}

uint64_t sub_1A5C1C8D0(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v4;

  if (*a1 == 3)
  {
    v1 = sub_1A5C41BF4();
    v2 = sub_1A5BEBFDC(v1);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v4 = 1;
    return swift_willThrow();
  }
}

_UNKNOWN **sub_1A5C1C960()
{
  return &protocol witness table for Curve25519.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A5C1C96C()
{
  return &protocol witness table for Curve25519.KeyAgreement.PrivateKey;
}

uint64_t MessageAuthenticationCode.makeIterator()()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979C0);
  sub_1A5C418D0();
  return v1;
}

uint64_t static MessageAuthenticationCode.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C28A38(a1, a2, a3, a3, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8));
}

uint64_t MessageAuthenticationCode.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A5C41F48();
  v16 = v6;
  sub_1A5C41B04();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  result = sub_1A5C41C0C();
  v8 = *(_QWORD *)(result + 16);
  if (v8 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = 2 * v8;
  if (2 * v8 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  if (v8)
  {
    v11 = sub_1A5C41C00();
    *(_QWORD *)(v11 + 16) = v9;
    bzero((void *)(v11 + 32), v9);
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v13 = 0;
  v14 = v11;
  sub_1A5C41BF4();
  sub_1A5BFCFA0(v10, &v14, &v13);
  swift_bridgeObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t static MessageAuthenticationCode.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  char *v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v41 = a5;
  v42 = a1;
  v43 = a3;
  swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1A5C41CF0();
  v11 = MEMORY[0x1E0C80A78](v10);
  v38 = (char *)v37 - v12;
  v37[0] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_checkMetadataState();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v37 - v20;
  v40 = a6;
  sub_1A5C41828();
  v37[1] = v9;
  v22 = sub_1A5C41C54();
  v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v21, v15);
  if (v22 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37[0] + 16))(v14, a2, a4);
    v34 = sub_1A5C419FC();
    v36 = v35;
    v44[0] = v34;
    v44[1] = v35;
    v33 = sub_1A5C28A38(v42, v44, v43, MEMORY[0x1E0CB0338], *(_QWORD *)(v41 + 8), MEMORY[0x1E0CB0318]);
    sub_1A5BEFF90(v34, v36);
    return v33 & 1;
  }
  v24 = v41;
  v25 = v42;
  v26 = v43;
  sub_1A5C41828();
  v27 = v38;
  sub_1A5C41C78();
  v23(v19, v15);
  v28 = AssociatedTypeWitness;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    v31 = *(_QWORD *)(v24 + 8);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v33 = sub_1A5C28A38(v25, v27, v26, v28, v31, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
    return v33 & 1;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A5C1CE7C@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int64_t v4;
  _QWORD *result;

  if (a1)
    v4 = a2 - (_QWORD)a1;
  else
    v4 = 0;
  result = sub_1A5C01168(a1, v4);
  *a3 = result;
  a3[1] = 0;
  return result;
}

uint64_t dispatch thunk of MessageAuthenticationCode.byteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t CryptoKitError.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) == 1)
    __asm { BR              X9 }
  sub_1A5C41F18();
  return sub_1A5C41F30();
}

uint64_t CryptoKitError.hashValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 4);
  sub_1A5C41F00();
  if (v2 == 1)
    __asm { BR              X9 }
  sub_1A5C41F18();
  sub_1A5C41F30();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C1D014()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4) == 1)
    __asm { BR              X9 }
  sub_1A5C41F18();
  return sub_1A5C41F30();
}

uint64_t sub_1A5C1D0A0()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 4);
  sub_1A5C41F00();
  if (v2 == 1)
    __asm { BR              X9 }
  sub_1A5C41F18();
  sub_1A5C41F30();
  return sub_1A5C41F3C();
}

BOOL static CryptoKitASN1Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptoKitASN1Error.hash(into:)()
{
  return sub_1A5C41F18();
}

uint64_t CryptoKitASN1Error.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

uint64_t _s9CryptoKit0aB5ErrorO2eeoiySbAC_ACtFZ_0(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*((_BYTE *)a1 + 4) == 1)
    return ((uint64_t (*)(void))((char *)&loc_1A5C1D20C + 4 * byte_1A5C44F18[v2]))();
  if ((*(_BYTE *)(a2 + 4) & 1) != 0)
    return 0;
  return (_DWORD)v2 == *(_DWORD *)a2;
}

uint64_t sub_1A5C1D238@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 1)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1A5C1D224);
  return 1;
}

uint64_t sub_1A5C1D24C@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 2)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1A5C1D224);
  return 1;
}

uint64_t sub_1A5C1D260@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 3)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1A5C1D224);
  return 1;
}

uint64_t sub_1A5C1D274@<X0>(char a1@<W8>)
{
  int v1;

  if (v1 != 4)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1A5C1D224);
  return 1;
}

uint64_t sub_1A5C1D288@<X0>(char a1@<W8>)
{
  unsigned int v1;

  if (v1 <= 4)
    a1 = 0;
  if ((a1 & 1) == 0)
    JUMPOUT(0x1A5C1D224);
  return 1;
}

unint64_t sub_1A5C1D2A0()
{
  unint64_t result;

  result = qword_1EE8018A0;
  if (!qword_1EE8018A0)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_1EE8018A0);
  }
  return result;
}

unint64_t sub_1A5C1D2E8()
{
  unint64_t result;

  result = qword_1EE8018A8;
  if (!qword_1EE8018A8)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for CryptoKitASN1Error, &type metadata for CryptoKitASN1Error);
    atomic_store(result, (unint64_t *)&qword_1EE8018A8);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CryptoKitError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_1A5C1D38C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A5C1D3A8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitError()
{
  return &type metadata for CryptoKitError;
}

uint64_t getEnumTagSinglePayload for CryptoKitASN1Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptoKitASN1Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A5C1D4B4 + 4 * byte_1A5C44F23[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A5C1D4E8 + 4 * byte_1A5C44F1E[v4]))();
}

uint64_t sub_1A5C1D4E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C1D4F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5C1D4F8);
  return result;
}

uint64_t sub_1A5C1D504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5C1D50CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A5C1D510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C1D518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitASN1Error()
{
  return &type metadata for CryptoKitASN1Error;
}

uint64_t Curve25519.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1A5C41BF4();
  v1 = sub_1A5BEBFDC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_1A5C1D57C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_1A5C01710(0x20uLL);
  *a1 = result;
  return result;
}

unint64_t Curve25519.KeyAgreement.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_1A5C01710(0x20uLL);
  *a1 = result;
  return result;
}

uint64_t Curve25519.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C2ABE4();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

size_t Curve25519.KeyAgreement.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result;

  result = sub_1A5C2B740();
  *a1 = result;
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C2AB78();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *a1;
  v6 = *v2;
  swift_retain();
  sub_1A5C41BF4();
  v7 = sub_1A5C01870(0x20uLL, v6, v5);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (!v3)
    *a2 = v7;
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = sub_1A5C01410(v0);
  swift_release();
  return v1;
}

size_t sub_1A5C1D79C@<X0>(size_t *a1@<X8>)
{
  size_t result;

  result = sub_1A5C2B740();
  *a1 = result;
  return result;
}

uint64_t sub_1A5C1D7C4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *a1;
  v6 = *v2;
  swift_retain();
  sub_1A5C41BF4();
  v7 = sub_1A5C01870(0x20uLL, v6, v5);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (!v3)
    *a2 = v7;
  return result;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement()
{
  return &type metadata for Curve25519.KeyAgreement;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement.PublicKey()
{
  return &type metadata for Curve25519.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement.PrivateKey()
{
  return &type metadata for Curve25519.KeyAgreement.PrivateKey;
}

uint64_t sub_1A5C1D86C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(6514035, 0xE300000000000000);
  qword_1EE8018B0 = result;
  *(_QWORD *)algn_1EE8018B8 = v1;
  return result;
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1A5BEE468(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t HPKE.Sender.exportSecret<A>(context:outputByteCount:)@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  if (a1 < 1)
  {
    __break(1u);
  }
  else
  {
    v3 = a1;
    v7 = a2;
    v4 = *(char *)(v2 + 40);
    v5 = *(unsigned __int8 *)(v2 + 41);
    v6 = *(char *)(v2 + 42);
    v28 = *(_QWORD *)(v2 + 32);
    v8 = qword_1EE800FF8;
    swift_retain();
    if (v8 == -1)
    {
      if (!(v3 >> 16))
        goto LABEL_4;
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }
  swift_once();
  if (v3 >> 16)
    goto LABEL_8;
LABEL_4:
  v25 = v7;
  if (qword_1EE800FD8 != -1)
LABEL_9:
    swift_once();
  v26 = qword_1EE801388;
  v27 = qword_1EE801390;
  v9 = qword_1A5C45160[v4];
  sub_1A5BEE468(qword_1EE801388, qword_1EE801390);
  sub_1A5C17A00(v9, 2);
  v11 = v10;
  v13 = v12;
  sub_1A5C419D8();
  sub_1A5BEFF90(v11, v13);
  sub_1A5C17A00(v5 + 1, 2);
  v15 = v14;
  v17 = v16;
  sub_1A5C419D8();
  sub_1A5BEFF90(v15, v17);
  sub_1A5C17A00(qword_1A5C45180[v6], 2);
  v19 = v18;
  v21 = v20;
  sub_1A5C419D8();
  sub_1A5BEFF90(v19, v21);
  v22 = v26;
  v23 = v27;
  LOBYTE(v26) = v5;
  sub_1A5C1FA50(&v28, v3, (unsigned __int8 *)&v26, v25);
  sub_1A5BEFF90(v22, v23);
  return swift_release();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int16 *v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  char v35;

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (uint64_t *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *((_BYTE *)v16 + 2);
  v34 = *v16;
  v35 = v17;
  v27 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v18);
  sub_1A5C0BC14((char *)&v34, 0, &v27, 0, 0xF000000000000000, v15, a2, a3, v28, a4, a5);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  if (!v6)
  {
    v20 = v29;
    v21 = v30;
    v22 = v31;
    v23 = v32;
    v24 = v33;
    v25 = v28[1];
    *(_OWORD *)a6 = v28[0];
    *(_OWORD *)(a6 + 16) = v25;
    *(_QWORD *)(a6 + 32) = v20;
    *(_WORD *)(a6 + 40) = v21;
    *(_BYTE *)(a6 + 42) = v22;
    *(_QWORD *)(a6 + 48) = v23;
    *(_QWORD *)(a6 + 56) = v24;
    *(_QWORD *)(a6 + 64) = v23;
    *(_QWORD *)(a6 + 72) = v24;
    return sub_1A5BEE468(v23, v24);
  }
  return result;
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:presharedKey:presharedKeyIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, unint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int16 *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  __int16 v40;
  char v41;

  v31 = a5;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *((_BYTE *)v17 + 2);
  v20 = *v19;
  v40 = *v17;
  v41 = v18;
  v33 = v20;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v21);
  v22 = v32;
  sub_1A5C0BC14((char *)&v40, 1u, &v33, a4, v31, v16, a2, a3, v34, a6, a8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a6);
  if (!v22)
  {
    v24 = v35;
    v25 = v36;
    v26 = v37;
    v27 = v38;
    v28 = v39;
    v29 = v34[1];
    *(_OWORD *)a7 = v34[0];
    *(_OWORD *)(a7 + 16) = v29;
    *(_QWORD *)(a7 + 32) = v24;
    *(_WORD *)(a7 + 40) = v25;
    *(_BYTE *)(a7 + 42) = v26;
    *(_QWORD *)(a7 + 48) = v27;
    *(_QWORD *)(a7 + 56) = v28;
    *(_QWORD *)(a7 + 64) = v27;
    *(_QWORD *)(a7 + 72) = v28;
    return sub_1A5BEE468(v27, v28);
  }
  return result;
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:authenticatedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  __int16 v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  __int16 v45;
  char v46;

  v35 = a4;
  v33 = a1;
  v34 = a3;
  v32 = a8;
  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v31 - v17;
  LOWORD(v17) = *(_WORD *)a2;
  v19 = *(_BYTE *)(a2 + 2);
  v20 = v33;
  v45 = v17;
  v46 = v19;
  v38 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, AssociatedTypeWitness);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v37 = a5;
  v21(v14, a5, a6);
  v22 = v36;
  sub_1A5C0BFAC((char *)&v45, 2u, &v38, 0, 0xF000000000000000, (uint64_t)v18, v34, v35, (size_t *)v39, (uint64_t)v14, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v37, a6);
  if (v22)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  v24 = v40;
  v25 = v41;
  v26 = v42;
  v27 = v43;
  v28 = v44;
  v29 = v39[1];
  v30 = v32;
  *v32 = v39[0];
  v30[1] = v29;
  *((_QWORD *)v30 + 4) = v24;
  *((_WORD *)v30 + 20) = v25;
  *((_BYTE *)v30 + 42) = v26;
  *((_QWORD *)v30 + 6) = v27;
  *((_QWORD *)v30 + 7) = v28;
  *((_QWORD *)v30 + 8) = v27;
  *((_QWORD *)v30 + 9) = v28;
  return sub_1A5BEE468(v27, v28);
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:authenticatedBy:presharedKey:presharedKeyIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  __int16 v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  __int16 v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  __int16 v49;
  char v50;

  v39 = a8;
  v37 = a7;
  v38 = a4;
  v41 = a6;
  v35 = a1;
  v36 = a3;
  v34 = a9;
  v13 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v33 - v18;
  LOWORD(v18) = *(_WORD *)a2;
  v20 = *(_BYTE *)(a2 + 2);
  v21 = v35;
  v22 = *v41;
  v49 = v18;
  v50 = v20;
  v42 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v35, AssociatedTypeWitness);
  v23 = *(void (**)(char *, uint64_t *, uint64_t))(v13 + 16);
  v41 = a5;
  v23(v15, a5, a10);
  v24 = v40;
  sub_1A5C0BFAC((char *)&v49, 3u, &v42, v37, v39, (uint64_t)v19, v36, v38, (size_t *)v43, (uint64_t)v15, a10, a11);
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v41, a10);
  if (v24)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  v26 = v44;
  v27 = v45;
  v28 = v46;
  v29 = v47;
  v30 = v48;
  v31 = v43[1];
  v32 = v34;
  *v34 = v43[0];
  v32[1] = v31;
  *((_QWORD *)v32 + 4) = v26;
  *((_WORD *)v32 + 20) = v27;
  *((_BYTE *)v32 + 42) = v28;
  *((_QWORD *)v32 + 6) = v29;
  *((_QWORD *)v32 + 7) = v30;
  *((_QWORD *)v32 + 8) = v29;
  *((_QWORD *)v32 + 9) = v30;
  return sub_1A5BEE468(v29, v30);
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)(uint64_t a1, uint64_t a2)
{
  return sub_1A5BF3924(a1, a2);
}

uint64_t HPKE.Sender.seal<A>(_:)(uint64_t a1)
{
  __int128 v3;

  v3 = xmmword_1A5C42A80;
  sub_1A5BEB4F4();
  return sub_1A5BF3924(a1, (uint64_t)&v3);
}

uint64_t HPKE.Recipient.exportSecret<A>(context:outputByteCount:)@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  size_t *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 < 1)
  {
    __break(1u);
  }
  else
  {
    v3 = a1;
    v7 = a2;
    v4 = *(char *)(v2 + 40);
    v5 = *(unsigned __int8 *)(v2 + 41);
    v6 = *(char *)(v2 + 42);
    v26 = *(_QWORD *)(v2 + 32);
    v8 = qword_1EE800FF8;
    swift_retain();
    if (v8 == -1)
    {
      if (!(v3 >> 16))
        goto LABEL_4;
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }
  swift_once();
  if (v3 >> 16)
    goto LABEL_8;
LABEL_4:
  v24 = v7;
  if (qword_1EE800FD8 != -1)
LABEL_9:
    swift_once();
  v25 = xmmword_1EE801388;
  v9 = qword_1A5C45160[v4];
  sub_1A5BEE468(xmmword_1EE801388, *((unint64_t *)&xmmword_1EE801388 + 1));
  sub_1A5C17A00(v9, 2);
  v11 = v10;
  v13 = v12;
  sub_1A5C419D8();
  sub_1A5BEFF90(v11, v13);
  sub_1A5C17A00(v5 + 1, 2);
  v15 = v14;
  v17 = v16;
  sub_1A5C419D8();
  sub_1A5BEFF90(v15, v17);
  sub_1A5C17A00(qword_1A5C45180[v6], 2);
  v19 = v18;
  v21 = v20;
  sub_1A5C419D8();
  sub_1A5BEFF90(v19, v21);
  v22 = v25;
  LOBYTE(v25) = v5;
  sub_1A5C1FA50(&v26, v3, (unsigned __int8 *)&v25, v24);
  sub_1A5BEFF90(v22, *((unint64_t *)&v22 + 1));
  return swift_release();
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int16 v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  __int16 v38;
  char v39;
  __int128 v40;
  __int16 v41;
  char v42;

  v33 = a6;
  v31 = a4;
  v32 = a5;
  v30 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1A5C41CF0();
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v30 - v17;
  v19 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *((_BYTE *)a2 + 2);
  v41 = *a2;
  v42 = v22;
  v35 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v18, 1, 1, AssociatedTypeWitness);
  v23 = v34;
  sub_1A5C0C5FC((unsigned __int8 *)&v41, 0, v32, v33, &v35, 0, 0xF000000000000000, (size_t)v21, (size_t *)v36, v30, v31, v18, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, a7);
  if (!v23)
  {
    v25 = v37;
    v26 = v38;
    v27 = v39;
    result = *(double *)v36;
    v28 = v36[1];
    v29 = v40;
    *(_OWORD *)a9 = v36[0];
    *(_OWORD *)(a9 + 16) = v28;
    *(_QWORD *)(a9 + 32) = v25;
    *(_WORD *)(a9 + 40) = v26;
    *(_BYTE *)(a9 + 42) = v27;
    *(_OWORD *)(a9 + 48) = v29;
  }
  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:presharedKey:presharedKeyIdentifier:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  __int16 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  __int16 v45;
  char v46;
  __int128 v47;
  __int16 v48;
  char v49;

  v40 = a8;
  v38 = a5;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v34 = a9;
  v37 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = sub_1A5C41CF0();
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v33 - v18;
  v20 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *((_BYTE *)a2 + 2);
  v24 = *a7;
  v48 = *a2;
  v49 = v23;
  v42 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1, AssociatedTypeWitness);
  v25 = v41;
  sub_1A5C0C5FC((unsigned __int8 *)&v48, 1u, v38, v39, &v42, v40, v37, (size_t)v22, (size_t *)v43, v35, v36, v19, a11, a12);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a11);
  if (!v25)
  {
    v27 = v44;
    v28 = v45;
    v29 = v46;
    result = *(double *)v43;
    v30 = v43[1];
    v31 = v47;
    v32 = v34;
    *v34 = v43[0];
    v32[1] = v30;
    *((_QWORD *)v32 + 4) = v27;
    *((_WORD *)v32 + 20) = v28;
    *((_BYTE *)v32 + 42) = v29;
    v32[3] = v31;
  }
  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:authenticatedBy:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  __int16 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  __int16 v42;
  char v43;
  __int128 v44;
  __int16 v45;
  char v46;

  v36 = a6;
  v34 = a4;
  v35 = a5;
  v32 = a9;
  v33 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1A5C41CF0();
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v32 - v17;
  v19 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *((_BYTE *)a2 + 2);
  v45 = *a2;
  v46 = v22;
  v38 = a1;
  v39 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a8);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v23 + 16))(v18, a7, AssociatedTypeWitness);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, AssociatedTypeWitness);
  v24 = v37;
  sub_1A5C0C5FC((unsigned __int8 *)&v45, 2u, v35, v36, &v39, 0, 0xF000000000000000, (size_t)v21, (size_t *)v40, v33, v34, v18, a8, a10);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v38, a8);
  if (!v24)
  {
    v26 = v41;
    v27 = v42;
    v28 = v43;
    result = *(double *)v40;
    v29 = v40[1];
    v30 = v44;
    v31 = v32;
    *v32 = v40[0];
    v31[1] = v29;
    *((_QWORD *)v31 + 4) = v26;
    *((_WORD *)v31 + 20) = v27;
    *((_BYTE *)v31 + 42) = v28;
    v31[3] = v30;
  }
  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:authenticatedBy:presharedKey:presharedKeyIdentifier:)@<D0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  __int16 v32;
  char v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  __int16 v51;
  char v52;
  __int128 v53;
  __int16 v54;
  char v55;

  v45 = a6;
  v38 = a9;
  v39 = a7;
  v43 = a4;
  v44 = a5;
  v41 = a10;
  v42 = a3;
  v40 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = sub_1A5C41CF0();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v37 - v19;
  v21 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *((_BYTE *)a2 + 2);
  v25 = *a8;
  v54 = *a2;
  v55 = v24;
  v47 = a1;
  v48 = v25;
  v26 = a1;
  v27 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v26, a12);
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v28 + 16))(v20, v27, AssociatedTypeWitness);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v20, 0, 1, AssociatedTypeWitness);
  v29 = v46;
  sub_1A5C0C5FC((unsigned __int8 *)&v54, 3u, v44, v45, &v48, v41, v40, (size_t)v23, (size_t *)v49, v42, v43, v20, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v47, a12);
  if (!v29)
  {
    v31 = v50;
    v32 = v51;
    v33 = v52;
    result = *(double *)v49;
    v34 = v49[1];
    v35 = v53;
    v36 = v38;
    *v38 = v49[0];
    v36[1] = v34;
    *((_QWORD *)v36 + 4) = v31;
    *((_WORD *)v36 + 20) = v32;
    *((_BYTE *)v36 + 42) = v33;
    v36[3] = v35;
  }
  return result;
}

uint64_t HPKE.Recipient.open<A, B>(_:authenticating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5BF3CB4(a1, a2, a3, a4);
}

uint64_t HPKE.Recipient.open<A>(_:)(uint64_t a1, uint64_t a2)
{
  __int128 v5;

  v5 = xmmword_1A5C42A80;
  sub_1A5BEB4F4();
  return sub_1A5BF3CB4(a1, (uint64_t)&v5, a2, MEMORY[0x1E0CB0338]);
}

ValueMetadata *type metadata accessor for HPKE()
{
  return &type metadata for HPKE;
}

uint64_t destroy for HPKE.Sender(_QWORD *a1)
{
  unint64_t v2;

  swift_release();
  v2 = a1[3];
  if (v2 >> 60 != 15)
    sub_1A5BEFF90(a1[2], v2);
  swift_release();
  sub_1A5BEFF90(a1[6], a1[7]);
  return sub_1A5BEFF90(a1[8], a1[9]);
}

uint64_t initializeWithCopy for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_1A5BEE468(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  swift_retain();
  sub_1A5BEE468(v8, v9);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  sub_1A5BEE468(v11, v10);
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v10;
  return a1;
}

uint64_t assignWithCopy for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1A5BEE468(*v4, *(_QWORD *)(a2 + 24));
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v5;
      sub_1A5BEFF90(v8, v9);
      goto LABEL_8;
    }
    sub_1A5BF431C(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1A5BEE468(*v4, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_1A5BEE468(v10, v11);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  sub_1A5BEFF90(v12, v13);
  v15 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  sub_1A5BEE468(v15, v14);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v14;
  sub_1A5BEFF90(v16, v17);
  return a1;
}

uint64_t assignWithTake for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v5;
      *(_QWORD *)(a1 + 24) = v7;
      sub_1A5BEFF90(v8, v6);
      goto LABEL_6;
    }
    sub_1A5BF431C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_1A5BEFF90(v9, v10);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_1A5BEFF90(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKE.Sender(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKE.Sender(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Sender()
{
  return &type metadata for HPKE.Sender;
}

ValueMetadata *type metadata accessor for HPKE.Recipient()
{
  return &type metadata for HPKE.Recipient;
}

ValueMetadata *_s31CoreCryptoCurve448PublicKeyImplVMa()
{
  return &_s31CoreCryptoCurve448PublicKeyImplVN;
}

ValueMetadata *_s32CoreCryptoCurve448PrivateKeyImplVMa()
{
  return &_s32CoreCryptoCurve448PrivateKeyImplVN;
}

size_t sub_1A5C1EF10()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;

  v0 = sub_1A5C41C00();
  *(_QWORD *)(v0 + 16) = 57;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 73) = 0u;
  if (!ccrng())
LABEL_5:
    __break(1u);
  if (cced448_make_pub())
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = sub_1A5C41BF4();
  v2 = sub_1A5C1F1E0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1A5C1F018(_QWORD *a1, _QWORD *a2, char **a3)
{
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  if (!ccrng())
    goto LABEL_8;
  if (!*a1)
    goto LABEL_9;
  v6 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v6 = sub_1A5BFC774(0, *((_QWORD *)v6 + 2), 0, v6);
  *a3 = v6;
  result = cced448_make_key_pair();
  if ((_DWORD)result)
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  *a2 = 57;
  return result;
}

uint64_t sub_1A5C1F108(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!result || a2 - result != 57)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v2 = 0;
    *(_BYTE *)(v2 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A5C1F16C@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result;
  uint64_t v5;

  if (a1 && a2 - a1 == 57)
  {
    result = sub_1A5BF1478(a1, a2);
    *a3 = result;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A5C1F1E0(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16) == 57)
    return sub_1A5BF1478(a1 + 32, a1 + 89);
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A5C1F254()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1A5C418D0();
  if (!v0)
    return sub_1A5BECE14();
  return result;
}

uint64_t sub_1A5C1F2C0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  result = sub_1A5C418D0();
  if (!v0)
    return v2;
  return result;
}

int64_t sub_1A5C1F334@<X0>(int64_t result@<X0>, unint64_t a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v4 = a2;
  v5 = result;
  v46 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
LABEL_5:
    sub_1A5BEE468(result, a2);
    sub_1A5C100D4(v5, v4);
    swift_beginAccess();
    v13 = swift_retain();
    sub_1A5C326F4(v13, &v41);
    v14 = sub_1A5C41BD0();
    sub_1A5C11CBC(v14, v15);
    v16 = v41;
    sub_1A5BF1308((uint64_t)&v42);
    v40 = v16;
    v30 = v42;
    v31 = v43;
    swift_retain();
    sub_1A5C11CBC((uint64_t)&v30, (uint64_t)&v32);
    swift_retain();
    sub_1A5BF1308((uint64_t)&v35);
    swift_release();
    swift_release();
    swift_release_n();
    v28 = v35;
    v17 = v36;
    swift_release();
    sub_1A5BEFF90(v5, v4);
    type metadata accessor for SecureBytes.Backing();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A5C45200;
    v4 = v12 + 16;
    _swift_stdlib_malloc_size((const void *)v12);
    *(_OWORD *)(v12 + 32) = v28;
    *(_OWORD *)(v12 + 48) = v17;
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = 32;
    result = _swift_stdlib_malloc_size((const void *)v12);
    if (result >= 64)
      goto LABEL_8;
    __break(1u);
    goto LABEL_7;
  }
  if (a3 == 1)
  {
    sub_1A5BEE468(result, a2);
    sub_1A5C100D4(v5, v4);
    swift_beginAccess();
    v7 = swift_retain();
    sub_1A5C323A0(v7, &v41);
    v8 = sub_1A5C41BD0();
    sub_1A5C11CB0(v8, v9);
    v10 = v41;
    sub_1A5C0B664((uint64_t)&v42);
    v40 = v10;
    v30 = v42;
    v31 = v43;
    v32 = v44;
    swift_retain();
    sub_1A5C11CB0((uint64_t)&v30, (uint64_t)&v33);
    swift_retain();
    sub_1A5C0B664((uint64_t)&v35);
    swift_release();
    swift_release();
    swift_release_n();
    v25 = v36;
    v27 = v35;
    v11 = v37;
    swift_release();
    sub_1A5BEFF90(v5, v4);
    type metadata accessor for SecureBytes.Backing();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1A5C451F0;
    v4 = v12 + 16;
    _swift_stdlib_malloc_size((const void *)v12);
    *(_OWORD *)(v12 + 32) = v27;
    *(_OWORD *)(v12 + 48) = v25;
    *(_OWORD *)(v12 + 64) = v11;
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = 48;
    result = _swift_stdlib_malloc_size((const void *)v12);
    if (result >= 80)
      goto LABEL_8;
    __break(1u);
    goto LABEL_5;
  }
LABEL_7:
  sub_1A5BEE468(result, a2);
  sub_1A5C100D4(v5, v4);
  swift_beginAccess();
  v18 = swift_retain();
  sub_1A5C3237C(v18, &v41);
  v19 = sub_1A5C41BD0();
  sub_1A5C11CA4(v19, v20);
  v21 = v41;
  sub_1A5BF1AD0(&v42);
  v40 = v21;
  v30 = v42;
  v31 = v43;
  v32 = v44;
  v33 = v45;
  swift_retain();
  sub_1A5C11CA4((uint64_t)&v30, (uint64_t)&v34);
  swift_retain();
  sub_1A5BF1AD0(&v35);
  swift_release();
  swift_release();
  swift_release_n();
  v26 = v36;
  v29 = v35;
  v24 = v37;
  v22 = v38;
  v23 = v39;
  swift_release();
  sub_1A5BEFF90(v5, v4);
  type metadata accessor for SecureBytes.Backing();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A5C451F0;
  _swift_stdlib_malloc_size((const void *)v12);
  *(_OWORD *)(v12 + 32) = v29;
  *(_OWORD *)(v12 + 48) = v26;
  *(_OWORD *)(v12 + 64) = v24;
  *(_QWORD *)(v12 + 80) = v22;
  *(_QWORD *)(v12 + 88) = v23;
  swift_beginAccess();
  *(_QWORD *)(v12 + 16) = 64;
  result = _swift_stdlib_malloc_size((const void *)v12);
  if (result < 96)
    __break(1u);
LABEL_8:
  *a4 = v12;
  return result;
}

BOOL sub_1A5C1F7E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5[4];
  _BYTE v6[40];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  sub_1A5C1FF50(a1, (uint64_t)&v7);
  v1 = v8;
  if (v8)
  {
    sub_1A5BF9FC8(&v7, (uint64_t)v6);
    sub_1A5BF40E4((uint64_t)v6, (uint64_t)v5);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v5[3]);
    sub_1A5C418D0();
    v2 = v9;
    v3 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    sub_1A5C419D8();
    sub_1A5BEFF90(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return v1 == 0;
}

uint64_t sub_1A5C1F8BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, unsigned __int16 a4@<W5>, size_t *a5@<X8>, char a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v9 = a4;
  sub_1A5C17A00(a4, 2);
  v18 = v10;
  v19 = v11;
  if (qword_1EE801000 != -1)
    swift_once();
  sub_1A5C419D8();
  sub_1A5C419D8();
  sub_1A5C419D8();
  sub_1A5C19C94(a2, a3);
  v13 = v18;
  v12 = v19;
  if (a6)
  {
    sub_1A5BEE468(v18, v19);
    if (a6 == 1)
      sub_1A5C30564(a1, v19, v9, &v17);
    else
      sub_1A5C30B54(a1, v19, v9, &v17);
  }
  else
  {
    sub_1A5BEE468(v18, v19);
    sub_1A5C2FFA8(a1, v19, v9, &v17);
  }
  v14 = sub_1A5C0FFD4(v17);
  swift_release();
  sub_1A5BEFF90(v13, v12);
  result = sub_1A5BEFF90(v13, v12);
  *a5 = v14;
  return result;
}

uint64_t sub_1A5C1FA50@<X0>(uint64_t *a1@<X0>, unsigned __int16 a2@<W4>, unsigned __int8 *a3@<X7>, size_t *a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v12 = *a1;
  v4 = *a3;
  v5 = a2;
  sub_1A5C17A00(a2, 2);
  v15 = v6;
  v16 = v7;
  if (qword_1EE801000 != -1)
    swift_once();
  sub_1A5C419D8();
  sub_1A5C419D8();
  sub_1A5C419D8();
  sub_1A5C419CC();
  v9 = v15;
  v8 = v16;
  if (v4)
  {
    sub_1A5BEE468(v15, v16);
    if (v4 == 1)
      sub_1A5C30564(v12, v16, v5, &v14);
    else
      sub_1A5C30B54(v12, v16, v5, &v14);
  }
  else
  {
    sub_1A5BEE468(v15, v16);
    sub_1A5C2FFA8(v12, v16, v5, &v14);
  }
  v10 = sub_1A5C0FFD4(v14);
  swift_release();
  sub_1A5BEFF90(v9, v8);
  result = sub_1A5BEFF90(v9, v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1A5C1FBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X5>, char *a5@<X6>, size_t *a6@<X8>)
{
  int v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[40];
  uint64_t v19;

  v10 = *a4;
  v11 = *a5;
  if (qword_1EE801008 != -1)
    swift_once();
  sub_1A5BF40E4(a1, (uint64_t)v18);
  if (qword_1EE801000 != -1)
    swift_once();
  v16 = qword_1EE8018C0;
  v17 = *(_QWORD *)algn_1EE8018C8;
  sub_1A5BEE468(qword_1EE8018C0, *(unint64_t *)algn_1EE8018C8);
  sub_1A5C419D8();
  sub_1A5C419D8();
  sub_1A5C1F7E4((uint64_t)v18);
  sub_1A5BEE468(v16, v17);
  sub_1A5C100D4(v16, v17);
  sub_1A5BEFF90(v16, v17);
  sub_1A5C1F334(0, 0xC000000000000000, v11, &v19);
  swift_release();
  sub_1A5BEFF90(v16, v17);
  sub_1A5BEF518((uint64_t)v18);
  v12 = v19;
  if (qword_1EE801010 != -1)
    swift_once();
  if (v10 == 2)
    v13 = 64;
  else
    v13 = 32;
  if (v10 == 1)
    v14 = 48;
  else
    v14 = v13;
  sub_1A5C1F8BC(v12, a2, a3, v14, a6, v11);
  return swift_release();
}

uint64_t sub_1A5C1FDE0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x31762D454B5048, 0xE700000000000000);
  qword_1EE8018C0 = result;
  *(_QWORD *)algn_1EE8018C8 = v1;
  return result;
}

uint64_t sub_1A5C1FE14()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x6B72705F656165, 0xE700000000000000);
  qword_1EE8018D0 = result;
  *(_QWORD *)algn_1EE8018D8 = v1;
  return result;
}

uint64_t sub_1A5C1FE48()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1A5BF8A5C(0x735F646572616873, 0xED00007465726365);
  qword_1EE8018E0 = result;
  *(_QWORD *)algn_1EE8018E8 = v1;
  return result;
}

uint64_t sub_1A5C1FE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_1A5BF0B68(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1A5BF9C78((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_1A5BF0AE8((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_1A5C1FF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A5C1FF98()
{
  uint64_t v1;

  sub_1A5C418D0();
  return v1;
}

unint64_t sub_1A5C1FFF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE8018F0;
  if (!qword_1EE8018F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ECF97708);
    result = MEMORY[0x1A85B3FE0](MEMORY[0x1E0DEBF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EE8018F0);
  }
  return result;
}

uint64_t P256.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C204EC(MEMORY[0x1E0C81C60], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C0172C, a1);
}

uint64_t sub_1A5C20054@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C20590(MEMORY[0x1E0C81C60], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C0172C, a1);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v12)
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v13 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4)
      *a4 = v16;
  }
  return result;
}

uint64_t P256.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  _BYTE *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*a1)
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v1 = 1;
    return swift_willThrow();
  }
  else
  {
    sub_1A5C41BF4();
    v3 = ccec_export_pub_size();
    v4 = sub_1A5C41C00();
    *(_QWORD *)(v4 + 16) = v3;
    ccec_export_pub();
    *(_QWORD *)(v4 + 16) = v3;
    v5 = sub_1A5BEBFDC(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
}

uint64_t sub_1A5C2024C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return P256.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_1A5C20274(_BYTE *a1)
{
  return P256.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

uint64_t P384.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C204EC(MEMORY[0x1E0C81C68], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01748, a1);
}

uint64_t sub_1A5C2029C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C20590(MEMORY[0x1E0C81C68], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01748, a1);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v12 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P384.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4)
      *a4 = v16;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v14 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  return result;
}

uint64_t P384.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v5;

  if (*a1 == 1)
  {
    sub_1A5C41BF4();
    v1 = ccec_export_pub_size();
    v2 = sub_1A5C41C00();
    *(_QWORD *)(v2 + 16) = v1;
    ccec_export_pub();
    *(_QWORD *)(v2 + 16) = v1;
    v3 = sub_1A5BEBFDC(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v5 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A5C2049C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return P384.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_1A5C204C4(_BYTE *a1)
{
  return P384.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

uint64_t P521.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C204EC(MEMORY[0x1E0C81C70], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01764, a1);
}

uint64_t sub_1A5C204EC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = a1();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    v6 = getccec_full_ctx_size();
    result = a2(v6, 0, v6);
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C2057C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C20590(MEMORY[0x1E0C81C70], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01764, a1);
}

uint64_t sub_1A5C20590@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = a1();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    v6 = getccec_full_ctx_size();
    result = a2(v6, 0, v6);
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v12 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P521.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4)
      *a4 = v16;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v14 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v5;

  if (*a1 == 2)
  {
    sub_1A5C41BF4();
    v1 = ccec_export_pub_size();
    v2 = sub_1A5C41C00();
    *(_QWORD *)(v2 + 16) = v1;
    ccec_export_pub();
    *(_QWORD *)(v2 + 16) = v1;
    v3 = sub_1A5BEBFDC(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    sub_1A5BF3EC0();
    swift_allocError();
    *v5 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A5C2080C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return P521.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_1A5C20834(_BYTE *a1)
{
  return P521.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

_UNKNOWN **sub_1A5C20848()
{
  return &protocol witness table for P256.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A5C20854()
{
  return &protocol witness table for P256.KeyAgreement.PrivateKey;
}

_UNKNOWN **sub_1A5C20860()
{
  return &protocol witness table for P384.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A5C2086C()
{
  return &protocol witness table for P384.KeyAgreement.PrivateKey;
}

_UNKNOWN **sub_1A5C20878()
{
  return &protocol witness table for P521.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_1A5C20884()
{
  return &protocol witness table for P521.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for ASN1()
{
  return &type metadata for ASN1;
}

uint64_t destroy for ASN1.ASN1Node(uint64_t a1)
{
  return j__swift_unknownObjectRelease(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t initializeWithCopy for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(unsigned __int8 *)(a2 + 48);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  return a1;
}

uint64_t assignWithCopy for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(unsigned __int8 *)(a2 + 48);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1Node(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1Node()
{
  return &type metadata for ASN1.ASN1Node;
}

uint64_t destroy for ASN1.ASN1Node.Content(uint64_t a1)
{
  return j__swift_unknownObjectRelease(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t initializeWithCopy for ASN1.ASN1Node.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for ASN1.ASN1Node.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = *((unsigned __int8 *)a1 + 40);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  *((_BYTE *)a1 + 40) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ASN1.ASN1Node.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *a1;
  v7 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = *((unsigned __int8 *)a1 + 40);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  a1[4] = v3;
  *((_BYTE *)a1 + 40) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1Node.Content(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1Node.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A5C20CE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1A5C20CE8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1Node.Content()
{
  return &type metadata for ASN1.ASN1Node.Content;
}

unint64_t sub_1A5C20D08()
{
  unint64_t result;

  result = qword_1EE8018F8;
  if (!qword_1EE8018F8)
  {
    result = MEMORY[0x1A85B3FE0]("QK3?\\T", &type metadata for ASN1.ASN1NodeCollection.Iterator);
    atomic_store(result, (unint64_t *)&qword_1EE8018F8);
  }
  return result;
}

void sub_1A5C20D4C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  int64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;

  v3 = v1[2];
  v4 = v1[3];
  if (v3 == v4 >> 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0uLL;
    v8 = -1;
    v9 = 0uLL;
LABEL_9:
    *(_QWORD *)a1 = v5;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v8;
    return;
  }
  if (v3 >= (uint64_t)(v4 >> 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v10 = *v1;
  v11 = v1[1];
  v12 = (unsigned __int8 *)(v11 + 48 * v3);
  v5 = *v12;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *((_OWORD *)v12 + 1);
  v15 = *((_OWORD *)v12 + 2);
  v16 = v3 + 1;
  v1[2] = v3 + 1;
  if ((v5 & 0x20) != 0)
  {
    sub_1A5C2747C(v10, v11, v3 + 1, v4, v13);
    v21 = v20;
    v22 = (v19 >> 1) - v18;
    if (!__OFSUB__(v19 >> 1, v18))
    {
      v23 = v18;
      v24 = v19;
      v33 = v17;
      v25 = v11;
      v26 = v21;
      *v1 = sub_1A5C1A9A0(v22, v10, v25, v16, v4);
      v1[1] = v27;
      v1[2] = v28;
      v1[3] = v29;
      sub_1A5C26B38(v26, v33, v23, v24, v13, v35);
      v31 = v35[1];
      v34 = v35[0];
      v6 = v36;
      swift_unknownObjectRetain();
      v9 = v31;
      v7 = v34;
      v8 = 0;
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  v30 = v15;
  v32 = v14;
  if ((_QWORD)v14)
  {
    swift_unknownObjectRetain();
    v6 = 0;
    v8 = 1;
    v9 = v30;
    v7 = v32;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_1A5C20EBC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v0 = sub_1A5C41DA4();
  result = sub_1A5C41E4C();
  v2 = v0 - result;
  if (__OFSUB__(v0, result))
  {
    __break(1u);
  }
  else
  {
    v3 = __OFADD__(v2, 7);
    v4 = v2 + 7;
    if (!v3)
      return v4 / 8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C20F24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v1 = v0[2];
  v2 = v0[3] >> 1;
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    if (v1 >= v2)
    {
      __break(1u);
      return result;
    }
    v3 = *(unsigned __int8 *)(v0[1] + v1);
    v0[2] = v1 + 1;
  }
  return v3 | ((v1 == v2) << 8);
}

void sub_1A5C20F6C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_1A5C20FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  return sub_1A5C01168(&v3, BYTE6(v1));
}

uint64_t sub_1A5C21170(uint64_t a1, unint64_t a2, char a3)
{
  _BYTE v6[56];
  _OWORD v7[3];
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  sub_1A5C20D4C((uint64_t)v6);
  sub_1A5BF683C((uint64_t)v6, (uint64_t)v7, &qword_1ECF977C0);
  if (v8 != 255)
  {
    v9 = v7[0];
    v10 = v7[1];
    v11 = v7[2];
    v12 = v8;
    if (a2 <= 0x1E)
      __asm { BR              X12 }
    __break(1u);
    JUMPOUT(0x1A5C21458);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 1;
}

uint64_t sub_1A5C21470(uint64_t a1, unint64_t a2, char a3)
{
  return sub_1A5C214A8(a1, a2, a3);
}

uint64_t sub_1A5C2148C(uint64_t a1, unint64_t a2, char a3)
{
  return sub_1A5C214A8(a1, a2, a3);
}

uint64_t sub_1A5C214A8(uint64_t a1, unint64_t a2, char a3)
{
  _BYTE v6[56];
  _OWORD v7[3];
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  sub_1A5C20D4C((uint64_t)v6);
  sub_1A5BF683C((uint64_t)v6, (uint64_t)v7, &qword_1ECF977C0);
  if (v8 != 255)
  {
    v9 = v7[0];
    v10 = v7[1];
    v11 = v7[2];
    v12 = v8;
    if (a2 <= 0x1E)
      __asm { BR              X12 }
    __break(1u);
    JUMPOUT(0x1A5C217E4);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 1;
}

uint64_t sub_1A5C217FC(uint64_t a1, unint64_t a2, char a3)
{
  _BYTE v6[56];
  _OWORD v7[3];
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  sub_1A5C20D4C((uint64_t)v6);
  sub_1A5BF683C((uint64_t)v6, (uint64_t)v7, &qword_1ECF977C0);
  if (v8 != 255)
  {
    v9 = v7[0];
    v10 = v7[1];
    v11 = v7[2];
    v12 = v8;
    if (a2 <= 0x1E)
      __asm { BR              X12 }
    __break(1u);
    JUMPOUT(0x1A5C21BC0);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 1;
}

uint64_t sub_1A5C21BD8(uint64_t a1, unint64_t a2, char a3)
{
  _BYTE v6[56];
  _OWORD v7[3];
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  sub_1A5C20D4C((uint64_t)v6);
  sub_1A5BF683C((uint64_t)v6, (uint64_t)v7, &qword_1ECF977C0);
  if (v8 != 255)
  {
    v9 = v7[0];
    v10 = v7[1];
    v11 = v7[2];
    v12 = v8;
    if (a2 <= 0x1E)
      __asm { BR              X12 }
    __break(1u);
    JUMPOUT(0x1A5C21F04);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 0;
}

uint64_t sub_1A5C21F1C(uint64_t a1, unint64_t a2, char a3)
{
  _BYTE v6[56];
  _OWORD v7[3];
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;

  sub_1A5C20D4C((uint64_t)v6);
  sub_1A5BF683C((uint64_t)v6, (uint64_t)v7, &qword_1ECF977C0);
  if (v8 != 255)
  {
    v9 = v7[0];
    v10 = v7[1];
    v11 = v7[2];
    v12 = v8;
    if (a2 <= 0x1E)
      __asm { BR              X12 }
    __break(1u);
    JUMPOUT(0x1A5C222A0);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 0;
}

uint64_t sub_1A5C222B8()
{
  sub_1A5C41E10();
  swift_bridgeObjectRelease();
  sub_1A5C41E7C();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  sub_1A5C41B04();
  sub_1A5C41B04();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A5C22380()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  sub_1A5C41F00();
  sub_1A5C41F24();
  sub_1A5C41F18();
  if (!v0[2])
  {
    sub_1A5C41F24();
    return sub_1A5C41F3C();
  }
  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  sub_1A5C41F24();
  v4 = v2 >> 1;
  result = (v2 >> 1) - v1;
  if (__OFSUB__(v2 >> 1, v1))
  {
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A5C41F18();
  v6 = __OFSUB__(v4, v1);
  v7 = v4 - v1;
  if (!v7)
    return sub_1A5C41F3C();
  if (!((v7 < 0) ^ v6 | (v7 == 0)))
  {
    v8 = v3 + v1;
    do
    {
      ++v8;
      sub_1A5C41F24();
      --v7;
    }
    while (v7);
    return sub_1A5C41F3C();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A5C2244C()
{
  return sub_1A5C22380();
}

uint64_t sub_1A5C22484()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  sub_1A5C41F24();
  sub_1A5C41F18();
  if (!v1)
    return sub_1A5C41F24();
  sub_1A5C41F24();
  v5 = v4 >> 1;
  result = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A5C41F18();
  v7 = __OFSUB__(v5, v3);
  v8 = v5 - v3;
  if (!v8)
    return result;
  if ((v8 < 0) ^ v7 | (v8 == 0))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v9 = v2 + v3;
  do
  {
    ++v9;
    result = sub_1A5C41F24();
    --v8;
  }
  while (v8);
  return result;
}

uint64_t sub_1A5C22520()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  sub_1A5C41F00();
  sub_1A5C41F24();
  sub_1A5C41F18();
  if (!v1)
  {
    sub_1A5C41F24();
    return sub_1A5C41F3C();
  }
  sub_1A5C41F24();
  v5 = v4 >> 1;
  result = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A5C41F18();
  v7 = __OFSUB__(v5, v3);
  v8 = v5 - v3;
  if (!v8)
    return sub_1A5C41F3C();
  if (!((v8 < 0) ^ v7 | (v8 == 0)))
  {
    v9 = v2 + v3;
    do
    {
      ++v9;
      sub_1A5C41F24();
      --v8;
    }
    while (v8);
    return sub_1A5C41F3C();
  }
LABEL_11:
  __break(1u);
  return result;
}

BOOL sub_1A5C225EC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1A5C26BC8(v7, v8);
}

uint64_t sub_1A5C22630()
{
  uint64_t v0;
  uint64_t result;
  _BYTE v2[32];
  _QWORD v3[4];

  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1A5C41E10();
  sub_1A5C41B04();
  sub_1A5C222B8();
  sub_1A5C41B04();
  v3[0] = *(_QWORD *)(v0 + 8);
  sub_1A5C41E7C();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  sub_1A5C41B04();
  sub_1A5BF683C(v0 + 16, (uint64_t)v2, &qword_1EE801910);
  result = sub_1A5BF683C((uint64_t)v2, (uint64_t)v3, &qword_1EE801910);
  if (v3[0] && __OFSUB__(v3[3] >> 1, v3[2]))
  {
    __break(1u);
  }
  else
  {
    sub_1A5C41E7C();
    sub_1A5C41B04();
    swift_bridgeObjectRelease();
    sub_1A5C41B04();
    return 0;
  }
  return result;
}

uint64_t sub_1A5C227A8()
{
  return sub_1A5C22630();
}

char *sub_1A5C227E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v4;
  uint64_t v5;
  char *result;
  _BYTE *v7;
  _QWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  char *v11;

  v10 = a4;
  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  swift_unknownObjectRetain();
  v11 = sub_1A5BFCAA4(0, 16, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C228D4((char *)v8, 1, &v11);
  result = (char *)v8[0];
  if (v5)
    goto LABEL_6;
  if (!__OFSUB__(v10 >> 1, v9))
  {
    if (v10 >> 1 == v9)
    {
      v4 = v11;
      swift_unknownObjectRelease();
      return v4;
    }
    sub_1A5BF6798();
    swift_allocError();
    *v7 = 3;
    swift_willThrow();
LABEL_6:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

void sub_1A5C228D4(char *a1, uint64_t a2, char **a3)
{
  uint64_t v3;
  char *v4;
  char v5;
  __int16 v9;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _BYTE *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  if (a2 > 10)
    goto LABEL_2;
  v9 = sub_1A5C20F24();
  if ((v9 & 0x100) != 0)
    goto LABEL_16;
  v10 = v9;
  if ((~v9 & 0x1F) == 0)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v11 = 0;
LABEL_18:
    swift_willThrow();
    return;
  }
  sub_1A5C22C20();
  if (v3)
    return;
  if ((v13 & 1) != 0)
  {
LABEL_16:
    sub_1A5BF6798();
    swift_allocError();
    v5 = 5;
    goto LABEL_17;
  }
  v14 = v12;
  if (v12 < 0)
  {
LABEL_2:
    sub_1A5BF6798();
    swift_allocError();
    v5 = 3;
LABEL_17:
    *v4 = v5;
    goto LABEL_18;
  }
  v15 = *(_QWORD *)a1;
  v40 = *((_QWORD *)a1 + 1);
  v35 = *((_QWORD *)a1 + 3);
  v36 = *((_QWORD *)a1 + 2);
  v16 = sub_1A5C19C18(v12, v15, v40, v36, v35);
  v18 = v17;
  v20 = v19;
  v33 = v21;
  v34 = v16;
  v37[0] = v16;
  v37[1] = v21;
  v38 = v17;
  v39 = v19;
  *(_QWORD *)a1 = sub_1A5C1A9A0(v14, v15, v40, v36, v35);
  *((_QWORD *)a1 + 1) = v22;
  *((_QWORD *)a1 + 2) = v23;
  *((_QWORD *)a1 + 3) = v24;
  v40 = v20;
  if (__OFSUB__(v20 >> 1, v18))
    goto LABEL_32;
  if ((v20 >> 1) - v18 == v14)
  {
    v15 = v18;
    a1 = *a3;
    swift_unknownObjectRetain();
    if ((v10 & 0x20) == 0)
    {
      v20 = v34;
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_13:
        v25 = v33;
        v27 = *((_QWORD *)a1 + 2);
        v26 = *((_QWORD *)a1 + 3);
        if (v27 >= v26 >> 1)
        {
          v32 = sub_1A5BFCAA4((char *)(v26 > 1), v27 + 1, 1, a1);
          v25 = v33;
          a1 = v32;
        }
        *((_QWORD *)a1 + 2) = v27 + 1;
        v28 = &a1[48 * v27];
        v28[32] = v10;
        *((_QWORD *)v28 + 5) = a2;
        *((_QWORD *)v28 + 6) = v20;
        *((_QWORD *)v28 + 7) = v25;
        *((_QWORD *)v28 + 8) = v15;
        *((_QWORD *)v28 + 9) = v40;
        swift_unknownObjectRelease();
        *a3 = a1;
        return;
      }
LABEL_33:
      a1 = sub_1A5BFCAA4(0, *((_QWORD *)a1 + 2) + 1, 1, a1);
      goto LABEL_13;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a1 = sub_1A5BFCAA4(0, *((_QWORD *)a1 + 2) + 1, 1, a1);
    v20 = *((_QWORD *)a1 + 2);
    v30 = *((_QWORD *)a1 + 3);
    if (v20 >= v30 >> 1)
      a1 = sub_1A5BFCAA4((char *)(v30 > 1), v20 + 1, 1, a1);
    *((_QWORD *)a1 + 2) = v20 + 1;
    v31 = &a1[48 * v20];
    v31[32] = v10;
    *((_QWORD *)v31 + 5) = a2;
    *((_OWORD *)v31 + 3) = 0u;
    *((_OWORD *)v31 + 4) = 0u;
    *a3 = a1;
    if (!v14)
    {
      swift_unknownObjectRelease();
      return;
    }
    while (1)
    {
      sub_1A5C228D4(v37, a2 + 1, a3);
      if (__OFSUB__(v39 >> 1, v38))
        break;
      if ((uint64_t)((v39 >> 1) - v38) <= 0)
        goto LABEL_21;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  sub_1A5BF6798();
  swift_allocError();
  *v29 = 5;
  swift_unknownObjectRetain();
  swift_willThrow();
LABEL_21:
  swift_unknownObjectRelease();
}

void sub_1A5C22C20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int64_t v8;
  _BYTE *v9;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v3 >> 1;
  if (v2 == v3 >> 1)
    return;
  if (v2 >= v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = *v0;
  v6 = v0[1];
  v7 = *(unsigned __int8 *)(v6 + v2);
  v8 = v2 + 1;
  v0[2] = v2 + 1;
  if (v7 == 128)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v9 = 6;
    swift_willThrow();
    return;
  }
  if ((v7 & 0x80) != 0)
  {
    v10 = __OFSUB__(v4, v8);
    v11 = v4 - v8;
    if (!v10)
    {
      v12 = v7 & 0x7F;
      if (v11 >= (uint64_t)v12)
      {
        sub_1A5C19C18(v7 & 0x7F, v5, v6, v2 + 1, v3);
        v24 = v13;
        v15 = v14;
        v23 = v16;
        *v0 = sub_1A5C1A9A0(v12, v5, v6, v8, v3);
        v0[1] = v17;
        v0[2] = v18;
        v0[3] = v19;
        swift_unknownObjectRetain();
        v20 = swift_unknownObjectRetain();
        sub_1A5C2BE18(v20, v24, v15, v23);
        if (!v1 && (v21 <= 0x7F || v12 > (71 - __clz(v21)) >> 3))
        {
          sub_1A5BF6798();
          swift_allocError();
          *v22 = 6;
          swift_willThrow();
        }
        swift_unknownObjectRelease();
      }
      return;
    }
LABEL_16:
    __break(1u);
  }
}

uint64_t sub_1A5C22DE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  sub_1A5C41F00();
  sub_1A5C2738C((uint64_t)v5, v1, v2, v3);
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C22E38(uint64_t a1)
{
  uint64_t v1;

  return sub_1A5C2738C(a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A5C22E44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  sub_1A5C41F00();
  sub_1A5C2738C((uint64_t)v5, v1, v2, v3);
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C22E98(uint64_t a1, uint64_t a2)
{
  return sub_1A5BFABE4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1A5C22EB4@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[56];

  sub_1A5C20D4C((uint64_t)v3);
  return sub_1A5BF683C((uint64_t)v3, a1, &qword_1ECF977C0);
}

__n128 sub_1A5C22EF4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1A5C22F08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1A5C26C90(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1A5C22F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C255C4(a1, a2, a3);
}

unint64_t sub_1A5C22F7C()
{
  unint64_t result;

  result = qword_1EE801900;
  if (!qword_1EE801900)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45478, &type metadata for ASN1.ASN1ParseResult);
    atomic_store(result, (unint64_t *)&qword_1EE801900);
  }
  return result;
}

unint64_t sub_1A5C22FC4()
{
  unint64_t result;

  result = qword_1EE801908;
  if (!qword_1EE801908)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45508, &type metadata for ASN1.ASN1ParserNode);
    atomic_store(result, (unint64_t *)&qword_1EE801908);
  }
  return result;
}

uint64_t sub_1A5C23008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1A5C2707C();
  return sub_1A5C19568(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
}

uint64_t sub_1A5C23040(char a1, char **a2, char *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t result;
  _QWORD v24[6];

  v5 = v3;
  v9 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v9 = (char *)isUniquelyReferenced_nonNull_native;
  }
  v12 = *((_QWORD *)v9 + 2);
  v11 = *((_QWORD *)v9 + 3);
  v13 = v11 >> 1;
  v14 = v12 + 1;
  if (v11 >> 1 <= v12)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v11 > 1), v12 + 1, 1, v9);
    v9 = (char *)isUniquelyReferenced_nonNull_native;
    v11 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
    v13 = v11 >> 1;
  }
  *((_QWORD *)v9 + 2) = v14;
  v9[v12 + 32] = a1;
  v15 = v12 + 2;
  if (v13 < (uint64_t)v15)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v11 > 1), v15, 1, v9);
    v9 = (char *)isUniquelyReferenced_nonNull_native;
  }
  *((_QWORD *)v9 + 2) = v15;
  v9[v14 + 32] = 0;
  *a2 = v9;
  v16 = v15 - 1;
  if (__OFSUB__(v15, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  v17 = *(_QWORD *)a3;
  MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
  v24[2] = v17;
  sub_1A5C27694(6, a2, (uint64_t (*)(char **))sub_1A5BF64EC, (uint64_t)v24);
  if (*((_QWORD *)a3 + 1))
  {
    v14 = *((_QWORD *)a3 + 3);
    v18 = *((_QWORD *)a3 + 4);
    v19 = *((_QWORD *)a3 + 2);
    v20 = swift_unknownObjectRetain();
    sub_1A5C4157C(v20, v19, v14, v18);
    swift_unknownObjectRelease();
  }
  a3 = *a2;
  v21 = *((_QWORD *)*a2 + 2);
  v4 = v21 - v15;
  if ((uint64_t)(v21 - v15) >= 128)
  {
    if (v21 >= v15)
    {
      v24[5] = v5;
      v5 = 71 - __clz(v4);
      v14 = v5 >> 3;
      sub_1A5C24D08(v5 >> 3, v15, v21);
      a3 = *a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_13:
        if (v16 < *((_QWORD *)a3 + 2))
        {
          v22 = a3 + 32;
          a3[v16 + 32] = (v5 >> 3) | 0x80;
          *a2 = a3;
          if (v15 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15] = v4 >> (8 * ((v14 - 1) & 7));
          if (v14 == 1)
            goto LABEL_34;
          if (v15 + 1 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15 + 1] = v4 >> (8 * ((v14 - 2) & 7));
          if (v14 == 2)
            goto LABEL_34;
          if (v15 + 2 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15 + 2] = v4 >> (8 * ((v14 - 3) & 7));
          if (v14 == 3)
            goto LABEL_34;
          if (v15 + 3 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15 + 3] = v4 >> (8 * ((v14 - 4) & 7));
          if (v14 == 4)
            goto LABEL_34;
          if (v15 + 4 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15 + 4] = v4 >> (8 * ((v14 - 5) & 7));
          if (v14 == 5)
            goto LABEL_34;
          if (v15 + 5 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15 + 5] = v4 >> (8 * ((v14 - 6) & 7));
          if (v14 == 6)
            goto LABEL_34;
          if (v15 + 6 >= *((_QWORD *)a3 + 2))
            goto LABEL_35;
          v22[v15 + 6] = v4 >> (8 * ((v14 - 7) & 7));
          if (v14 == 7)
            goto LABEL_34;
          if (v15 + 7 >= *((_QWORD *)a3 + 2))
          {
LABEL_35:
            __break(1u);
            goto LABEL_34;
          }
          v22[v15 + 7] = v4 >> (v5 & 0x38);
LABEL_34:
          swift_bridgeObjectRelease();
          result = swift_unknownObjectRelease();
          *a2 = a3;
          return result;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_39:
      a3 = sub_1A5C11888((uint64_t)a3);
      goto LABEL_13;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_32;
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  result = (uint64_t)sub_1A5C11888((uint64_t)a3);
  a3 = (char *)result;
LABEL_32:
  if (v16 < *((_QWORD *)a3 + 2))
  {
    a3[v16 + 32] = v4;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C233C8(unint64_t a1, char **a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD v19[4];

  v6 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_36;
  while (1)
  {
    v9 = *((_QWORD *)v6 + 2);
    v8 = *((_QWORD *)v6 + 3);
    v10 = v8 >> 1;
    v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v9 + 1, 1, v6);
      v6 = (char *)isUniquelyReferenced_nonNull_native;
      v8 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
      v10 = v8 >> 1;
    }
    *((_QWORD *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v12, 1, v6);
      v6 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((_QWORD *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    v13 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
    }
    else if (qword_1EE800110 == -1)
    {
      goto LABEL_8;
    }
    isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
    v19[2] = v14;
    sub_1A5C27694(6, a2, (uint64_t (*)(char **))sub_1A5BF6B38, (uint64_t)v19);
    result = sub_1A5C23730(48, a2);
    if (v2)
      return result;
    v6 = *a2;
    v16 = *((_QWORD *)*a2 + 2);
    v17 = v16 - v12;
    if ((uint64_t)(v16 - v12) <= 127)
      break;
    if (v16 < v12)
    {
      __break(1u);
    }
    else
    {
      v3 = 71 - __clz(v17);
      a1 = v3 >> 3;
      sub_1A5C24D08(v3 >> 3, v12, v16);
      v6 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_12;
    }
    result = (uint64_t)sub_1A5C11888((uint64_t)v6);
    v6 = (char *)result;
LABEL_12:
    if (v13 >= *((_QWORD *)v6 + 2))
    {
      __break(1u);
      goto LABEL_42;
    }
    v18 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((_QWORD *)v6 + 2))
    {
      v18[v12] = v17 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1)
        goto LABEL_33;
      if (v12 + 1 < *((_QWORD *)v6 + 2))
      {
        v18[v12 + 1] = v17 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2)
          goto LABEL_33;
        if (v12 + 2 < *((_QWORD *)v6 + 2))
        {
          v18[v12 + 2] = v17 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3)
            goto LABEL_33;
          if (v12 + 3 < *((_QWORD *)v6 + 2))
          {
            v18[v12 + 3] = v17 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4)
              goto LABEL_33;
            if (v12 + 4 < *((_QWORD *)v6 + 2))
            {
              v18[v12 + 4] = v17 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5)
                goto LABEL_33;
              if (v12 + 5 < *((_QWORD *)v6 + 2))
              {
                v18[v12 + 5] = v17 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6)
                  goto LABEL_33;
                if (v12 + 6 < *((_QWORD *)v6 + 2))
                {
                  v18[v12 + 6] = v17 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7)
                    goto LABEL_33;
                  if (v12 + 7 < *((_QWORD *)v6 + 2))
                  {
                    v18[v12 + 7] = v17 >> (v3 & 0x38);
LABEL_33:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v6 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_31;
LABEL_43:
  result = (uint64_t)sub_1A5C11888((uint64_t)v6);
  v6 = (char *)result;
LABEL_31:
  if (v13 < *((_QWORD *)v6 + 2))
  {
    v6[v13 + 32] = v17;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C23730(char a1, char **a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  char *v15;

  v6 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1A5BFC774(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
  v8 = *((_QWORD *)v6 + 2);
  v7 = *((_QWORD *)v6 + 3);
  v9 = v7 >> 1;
  v10 = v8 + 1;
  if (v7 >> 1 <= v8)
  {
    v6 = sub_1A5BFC774((char *)(v7 > 1), v8 + 1, 1, v6);
    v7 = *((_QWORD *)v6 + 3);
    v9 = v7 >> 1;
  }
  *((_QWORD *)v6 + 2) = v10;
  v6[v8 + 32] = a1;
  v11 = (char *)(v8 + 2);
  if (v9 < (uint64_t)(v8 + 2))
    v6 = sub_1A5BFC774((char *)(v7 > 1), v8 + 2, 1, v6);
  *((_QWORD *)v6 + 2) = v11;
  v6[v10 + 32] = 0;
  *a2 = v6;
  v12 = v8 + 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  result = sub_1A5C23A6C(160, a2, (uint64_t (*)(uint64_t, char **))sub_1A5C240A0);
  if (!v2)
  {
    sub_1A5C23A6C(161, a2, (uint64_t (*)(uint64_t, char **))sub_1A5C243F8);
    sub_1A5C23D68(0xA2uLL, a2);
    v6 = *a2;
    v14 = *((_QWORD *)*a2 + 2);
    v8 = v14 - (_QWORD)v11;
    if ((uint64_t)(v14 - (_QWORD)v11) <= 127)
    {
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_38;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_32;
    }
    else
    {
      if (v14 < (unint64_t)v11)
        goto LABEL_37;
      v3 = 71 - __clz(v8);
      v6 = (char *)(v3 >> 3);
      sub_1A5C24D08(v3 >> 3, (uint64_t)v11, v14);
      v11 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        goto LABEL_39;
      while (v12 < *((_QWORD *)v11 + 2))
      {
        v15 = v11 + 32;
        v11[v12 + 32] = (v3 >> 3) | 0x80;
        *a2 = v11;
        if (v12 + 1 < *((_QWORD *)v11 + 2))
        {
          v15[v12 + 1] = v8 >> (8 * (((_BYTE)v6 - 1) & 7u));
          if (v6 == (char *)1)
            goto LABEL_29;
          if (v12 + 2 < *((_QWORD *)v11 + 2))
          {
            v15[v12 + 2] = v8 >> (8 * (((_BYTE)v6 - 2) & 7u));
            if (v6 == (char *)2)
              goto LABEL_29;
            if (v12 + 3 < *((_QWORD *)v11 + 2))
            {
              v15[v12 + 3] = v8 >> (8 * (((_BYTE)v6 - 3) & 7u));
              if (v6 == (char *)3)
                goto LABEL_29;
              if (v12 + 4 < *((_QWORD *)v11 + 2))
              {
                v15[v12 + 4] = v8 >> (8 * (((_BYTE)v6 - 4) & 7u));
                if (v6 == (char *)4)
                  goto LABEL_29;
                if (v12 + 5 < *((_QWORD *)v11 + 2))
                {
                  v15[v12 + 5] = v8 >> (8 * (((_BYTE)v6 - 5) & 7u));
                  if (v6 == (char *)5)
                    goto LABEL_29;
                  if (v12 + 6 < *((_QWORD *)v11 + 2))
                  {
                    v15[v12 + 6] = v8 >> (8 * (((_BYTE)v6 - 6) & 7u));
                    if (v6 == (char *)6)
                      goto LABEL_29;
                    if (v12 + 7 < *((_QWORD *)v11 + 2))
                    {
                      v15[v12 + 7] = v8 >> (8 * (((_BYTE)v6 - 7) & 7u));
                      if (v6 == (char *)7)
                        goto LABEL_29;
                      if (v12 + 8 < *((_QWORD *)v11 + 2))
                      {
                        v15[v12 + 8] = v8 >> (v3 & 0x38);
LABEL_29:
                        *a2 = v11;
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        result = (uint64_t)sub_1A5C11888((uint64_t)v11);
        v11 = (char *)result;
      }
      __break(1u);
    }
    result = (uint64_t)sub_1A5C11888((uint64_t)v6);
    v6 = (char *)result;
LABEL_32:
    if (v12 >= *((_QWORD *)v6 + 2))
    {
      __break(1u);
    }
    else
    {
      v6[v12 + 32] = v8;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t sub_1A5C23A6C(char a1, char **a2, uint64_t (*a3)(uint64_t, char **))
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;

  v6 = v3;
  LOBYTE(v8) = a1;
  v9 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v11 = *((_QWORD *)v9 + 2);
    v10 = *((_QWORD *)v9 + 3);
    v12 = v10 >> 1;
    v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 1, 1, v9);
      v10 = *((_QWORD *)v9 + 3);
      v12 = v10 >> 1;
    }
    *((_QWORD *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2))
      v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 2, 1, v9);
    *((_QWORD *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *a2 = v9;
    v14 = v11 + 1;
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = a3(48, a2);
    a3 = (uint64_t (*)(uint64_t, char **))v6;
    if (v6)
      return result;
    v6 = (uint64_t)*a2;
    v16 = *((_QWORD *)*a2 + 2);
    v11 = v16 - v8;
    if ((uint64_t)(v16 - v8) <= 127)
      break;
    if (v16 >= v8)
    {
      v4 = 71 - __clz(v11);
      v9 = (char *)(v4 >> 3);
      sub_1A5C24D08(v4 >> 3, v8, v16);
      v6 = (uint64_t)*a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888(v6);
    v6 = result;
LABEL_11:
    if (v14 >= *(_QWORD *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    v17 = v6 + 32;
    *(_BYTE *)(v6 + 32 + v14) = (v4 >> 3) | 0x80;
    *a2 = (char *)v6;
    if (v8 < *(_QWORD *)(v6 + 16))
    {
      *(_BYTE *)(v17 + v8) = v11 >> (8 * (((_BYTE)v9 - 1) & 7u));
      if (v9 == (char *)1)
        goto LABEL_32;
      if (v8 + 1 < *(_QWORD *)(v6 + 16))
      {
        *(_BYTE *)(v17 + v8 + 1) = v11 >> (8 * (((_BYTE)v9 - 2) & 7u));
        if (v9 == (char *)2)
          goto LABEL_32;
        if (v8 + 2 < *(_QWORD *)(v6 + 16))
        {
          *(_BYTE *)(v17 + v8 + 2) = v11 >> (8 * (((_BYTE)v9 - 3) & 7u));
          if (v9 == (char *)3)
            goto LABEL_32;
          if (v8 + 3 < *(_QWORD *)(v6 + 16))
          {
            *(_BYTE *)(v17 + v8 + 3) = v11 >> (8 * (((_BYTE)v9 - 4) & 7u));
            if (v9 == (char *)4)
              goto LABEL_32;
            if (v8 + 4 < *(_QWORD *)(v6 + 16))
            {
              *(_BYTE *)(v17 + v8 + 4) = v11 >> (8 * (((_BYTE)v9 - 5) & 7u));
              if (v9 == (char *)5)
                goto LABEL_32;
              if (v8 + 5 < *(_QWORD *)(v6 + 16))
              {
                *(_BYTE *)(v17 + v8 + 5) = v11 >> (8 * (((_BYTE)v9 - 6) & 7u));
                if (v9 == (char *)6)
                  goto LABEL_32;
                if (v8 + 6 < *(_QWORD *)(v6 + 16))
                {
                  *(_BYTE *)(v17 + v8 + 6) = v11 >> (8 * (((_BYTE)v9 - 7) & 7u));
                  if (v9 == (char *)7)
                    goto LABEL_32;
                  if (v8 + 7 < *(_QWORD *)(v6 + 16))
                  {
                    *(_BYTE *)(v17 + v8 + 7) = v11 >> (v4 & 0x38);
LABEL_32:
                    *a2 = (char *)v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v9 = sub_1A5BFC774(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888(v6);
  v6 = result;
LABEL_30:
  if (v14 < *(_QWORD *)(v6 + 16))
  {
    *(_BYTE *)(v6 + v14 + 32) = v11;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C23D68(unint64_t a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  char *v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  char *v16;
  _QWORD v17[5];
  uint64_t v18;

  v6 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_33;
  while (1)
  {
    v9 = *((_QWORD *)v6 + 2);
    v8 = *((_QWORD *)v6 + 3);
    v10 = v8 >> 1;
    v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v9 + 1, 1, v6);
      v6 = (char *)isUniquelyReferenced_nonNull_native;
      v8 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
      v10 = v8 >> 1;
    }
    *((_QWORD *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v12, 1, v6);
      v6 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((_QWORD *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    v13 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    v18 = 48;
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
    v17[2] = &v18;
    sub_1A5C27694(2, a2, (uint64_t (*)(char **))sub_1A5C2870C, (uint64_t)v17);
    v6 = *a2;
    v14 = *((_QWORD *)*a2 + 2);
    v2 = v14 - v12;
    if ((uint64_t)(v14 - v12) < 128)
      break;
    if (v14 >= v12)
    {
      v3 = 71 - __clz(v2);
      a1 = v3 >> 3;
      sub_1A5C24D08(v3 >> 3, v12, v14);
      v6 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_10;
      goto LABEL_36;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    result = (uint64_t)sub_1A5C11888((uint64_t)v6);
    v6 = (char *)result;
LABEL_10:
    if (v13 >= *((_QWORD *)v6 + 2))
    {
      __break(1u);
      goto LABEL_38;
    }
    v16 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((_QWORD *)v6 + 2))
    {
      v16[v12] = v2 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1)
        goto LABEL_31;
      if (v12 + 1 < *((_QWORD *)v6 + 2))
      {
        v16[v12 + 1] = v2 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2)
          goto LABEL_31;
        if (v12 + 2 < *((_QWORD *)v6 + 2))
        {
          v16[v12 + 2] = v2 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3)
            goto LABEL_31;
          if (v12 + 3 < *((_QWORD *)v6 + 2))
          {
            v16[v12 + 3] = v2 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4)
              goto LABEL_31;
            if (v12 + 4 < *((_QWORD *)v6 + 2))
            {
              v16[v12 + 4] = v2 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5)
                goto LABEL_31;
              if (v12 + 5 < *((_QWORD *)v6 + 2))
              {
                v16[v12 + 5] = v2 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6)
                  goto LABEL_31;
                if (v12 + 6 < *((_QWORD *)v6 + 2))
                {
                  v16[v12 + 6] = v2 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7)
                    goto LABEL_31;
                  if (v12 + 7 < *((_QWORD *)v6 + 2))
                  {
                    v16[v12 + 7] = v2 >> (v3 & 0x38);
LABEL_31:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_33:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v6 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_29;
LABEL_39:
  result = (uint64_t)sub_1A5C11888((uint64_t)v6);
  v6 = (char *)result;
LABEL_29:
  if (v13 < *((_QWORD *)v6 + 2))
  {
    v6[v13 + 32] = v2;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C240A0(unint64_t a1, char **a2)
{
  unint64_t v2;
  char *v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  char *v17;
  _QWORD v18[4];

  v5 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_34;
  while (1)
  {
    v8 = *((_QWORD *)v5 + 2);
    v7 = *((_QWORD *)v5 + 3);
    v9 = v7 >> 1;
    v10 = v8 + 1;
    if (v7 >> 1 <= v8)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v7 > 1), v8 + 1, 1, v5);
      v5 = (char *)isUniquelyReferenced_nonNull_native;
      v7 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
      v9 = v7 >> 1;
    }
    *((_QWORD *)v5 + 2) = v10;
    v5[v8 + 32] = a1;
    v11 = v8 + 2;
    if (v9 < (uint64_t)v11)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v7 > 1), v11, 1, v5);
      v5 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((_QWORD *)v5 + 2) = v11;
    v5[v10 + 32] = 0;
    *a2 = v5;
    v12 = v11 - 1;
    if (__OFSUB__(v11, 1))
    {
      __break(1u);
    }
    else if (qword_1EE800130 == -1)
    {
      goto LABEL_8;
    }
    isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
    v18[2] = v13;
    sub_1A5C27694(6, a2, (uint64_t (*)(char **))sub_1A5BF6B38, (uint64_t)v18);
    v5 = *a2;
    v14 = *((_QWORD *)*a2 + 2);
    v15 = v14 - v11;
    if ((uint64_t)(v14 - v11) < 128)
      break;
    if (v14 < v11)
    {
      __break(1u);
    }
    else
    {
      v2 = 71 - __clz(v15);
      a1 = v2 >> 3;
      sub_1A5C24D08(v2 >> 3, v11, v14);
      v5 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
    }
    result = (uint64_t)sub_1A5C11888((uint64_t)v5);
    v5 = (char *)result;
LABEL_11:
    if (v12 >= *((_QWORD *)v5 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    v17 = v5 + 32;
    v5[v12 + 32] = (v2 >> 3) | 0x80;
    *a2 = v5;
    if (v11 < *((_QWORD *)v5 + 2))
    {
      v17[v11] = v15 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1)
        goto LABEL_32;
      if (v11 + 1 < *((_QWORD *)v5 + 2))
      {
        v17[v11 + 1] = v15 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2)
          goto LABEL_32;
        if (v11 + 2 < *((_QWORD *)v5 + 2))
        {
          v17[v11 + 2] = v15 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3)
            goto LABEL_32;
          if (v11 + 3 < *((_QWORD *)v5 + 2))
          {
            v17[v11 + 3] = v15 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4)
              goto LABEL_32;
            if (v11 + 4 < *((_QWORD *)v5 + 2))
            {
              v17[v11 + 4] = v15 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5)
                goto LABEL_32;
              if (v11 + 5 < *((_QWORD *)v5 + 2))
              {
                v17[v11 + 5] = v15 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6)
                  goto LABEL_32;
                if (v11 + 6 < *((_QWORD *)v5 + 2))
                {
                  v17[v11 + 6] = v15 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7)
                    goto LABEL_32;
                  if (v11 + 7 < *((_QWORD *)v5 + 2))
                  {
                    v17[v11 + 7] = v15 >> (v2 & 0x38);
LABEL_32:
                    *a2 = v5;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_34:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    v5 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888((uint64_t)v5);
  v5 = (char *)result;
LABEL_30:
  if (v12 < *((_QWORD *)v5 + 2))
  {
    v5[v12 + 32] = v15;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C243F8(unint64_t a1, char **a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD v19[4];

  v6 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_36;
  while (1)
  {
    v9 = *((_QWORD *)v6 + 2);
    v8 = *((_QWORD *)v6 + 3);
    v10 = v8 >> 1;
    v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v9 + 1, 1, v6);
      v6 = (char *)isUniquelyReferenced_nonNull_native;
      v8 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
      v10 = v8 >> 1;
    }
    *((_QWORD *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774((char *)(v8 > 1), v12, 1, v6);
      v6 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((_QWORD *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    v13 = v12 - 1;
    if (__OFSUB__(v12, 1))
    {
      __break(1u);
    }
    else if (qword_1EE800128 == -1)
    {
      goto LABEL_8;
    }
    isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
    v19[2] = v14;
    sub_1A5C27694(6, a2, (uint64_t (*)(char **))sub_1A5BF6B38, (uint64_t)v19);
    result = sub_1A5C240A0(0x30uLL, a2);
    if (v2)
      return result;
    v6 = *a2;
    v16 = *((_QWORD *)*a2 + 2);
    v17 = v16 - v12;
    if ((uint64_t)(v16 - v12) <= 127)
      break;
    if (v16 < v12)
    {
      __break(1u);
    }
    else
    {
      v3 = 71 - __clz(v17);
      a1 = v3 >> 3;
      sub_1A5C24D08(v3 >> 3, v12, v16);
      v6 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_12;
    }
    result = (uint64_t)sub_1A5C11888((uint64_t)v6);
    v6 = (char *)result;
LABEL_12:
    if (v13 >= *((_QWORD *)v6 + 2))
    {
      __break(1u);
      goto LABEL_42;
    }
    v18 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((_QWORD *)v6 + 2))
    {
      v18[v12] = v17 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1)
        goto LABEL_33;
      if (v12 + 1 < *((_QWORD *)v6 + 2))
      {
        v18[v12 + 1] = v17 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2)
          goto LABEL_33;
        if (v12 + 2 < *((_QWORD *)v6 + 2))
        {
          v18[v12 + 2] = v17 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3)
            goto LABEL_33;
          if (v12 + 3 < *((_QWORD *)v6 + 2))
          {
            v18[v12 + 3] = v17 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4)
              goto LABEL_33;
            if (v12 + 4 < *((_QWORD *)v6 + 2))
            {
              v18[v12 + 4] = v17 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5)
                goto LABEL_33;
              if (v12 + 5 < *((_QWORD *)v6 + 2))
              {
                v18[v12 + 5] = v17 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6)
                  goto LABEL_33;
                if (v12 + 6 < *((_QWORD *)v6 + 2))
                {
                  v18[v12 + 6] = v17 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7)
                    goto LABEL_33;
                  if (v12 + 7 < *((_QWORD *)v6 + 2))
                  {
                    v18[v12 + 7] = v17 >> (v3 & 0x38);
LABEL_33:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_36:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A5BFC774(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v6 = (char *)isUniquelyReferenced_nonNull_native;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_31;
LABEL_43:
  result = (uint64_t)sub_1A5C11888((uint64_t)v6);
  v6 = (char *)result;
LABEL_31:
  if (v13 < *((_QWORD *)v6 + 2))
  {
    v6[v13 + 32] = v17;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C24760(char a1, uint64_t (*a2)(char **), uint64_t a3)
{
  char **v3;
  uint64_t v4;
  char **v5;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;

  v5 = v3;
  LOBYTE(v8) = a1;
  v9 = *v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v11 = *((_QWORD *)v9 + 2);
    v10 = *((_QWORD *)v9 + 3);
    v12 = v10 >> 1;
    v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 1, 1, v9);
      v10 = *((_QWORD *)v9 + 3);
      v12 = v10 >> 1;
    }
    *((_QWORD *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2))
      v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 2, 1, v9);
    *((_QWORD *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *v5 = v9;
    v9 = (char *)(v11 + 1);
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = a2(v5);
    if (v4)
      return result;
    a3 = (uint64_t)*v5;
    v15 = *((_QWORD *)*v5 + 2);
    v13 = v15 - v8;
    if ((uint64_t)(v15 - v8) <= 127)
      break;
    if (v15 >= v8)
    {
      v11 = 71 - __clz(v13);
      a2 = (uint64_t (*)(char **))(v11 >> 3);
      sub_1A5C24D08(v11 >> 3, v8, v15);
      a3 = (uint64_t)*v5;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888(a3);
    a3 = result;
LABEL_11:
    if ((unint64_t)v9 >= *(_QWORD *)(a3 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    v16 = a3 + 32;
    v9[a3 + 32] = (v11 >> 3) | 0x80;
    *v5 = (char *)a3;
    if (v8 < *(_QWORD *)(a3 + 16))
    {
      *(_BYTE *)(v16 + v8) = v13 >> (8 * (((_BYTE)a2 - 1) & 7u));
      if (a2 == (uint64_t (*)(char **))1)
        goto LABEL_32;
      if (v8 + 1 < *(_QWORD *)(a3 + 16))
      {
        *(_BYTE *)(v16 + v8 + 1) = v13 >> (8 * (((_BYTE)a2 - 2) & 7u));
        if (a2 == (uint64_t (*)(char **))2)
          goto LABEL_32;
        if (v8 + 2 < *(_QWORD *)(a3 + 16))
        {
          *(_BYTE *)(v16 + v8 + 2) = v13 >> (8 * (((_BYTE)a2 - 3) & 7u));
          if (a2 == (uint64_t (*)(char **))3)
            goto LABEL_32;
          if (v8 + 3 < *(_QWORD *)(a3 + 16))
          {
            *(_BYTE *)(v16 + v8 + 3) = v13 >> (8 * (((_BYTE)a2 - 4) & 7u));
            if (a2 == (uint64_t (*)(char **))4)
              goto LABEL_32;
            if (v8 + 4 < *(_QWORD *)(a3 + 16))
            {
              *(_BYTE *)(v16 + v8 + 4) = v13 >> (8 * (((_BYTE)a2 - 5) & 7u));
              if (a2 == (uint64_t (*)(char **))5)
                goto LABEL_32;
              if (v8 + 5 < *(_QWORD *)(a3 + 16))
              {
                *(_BYTE *)(v16 + v8 + 5) = v13 >> (8 * (((_BYTE)a2 - 6) & 7u));
                if (a2 == (uint64_t (*)(char **))6)
                  goto LABEL_32;
                if (v8 + 6 < *(_QWORD *)(a3 + 16))
                {
                  *(_BYTE *)(v16 + v8 + 6) = v13 >> (8 * (((_BYTE)a2 - 7) & 7u));
                  if (a2 == (uint64_t (*)(char **))7)
                    goto LABEL_32;
                  if (v8 + 7 < *(_QWORD *)(a3 + 16))
                  {
                    *(_BYTE *)(v16 + v8 + 7) = v13 >> (v11 & 0x38);
LABEL_32:
                    *v5 = (char *)a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v9 = sub_1A5BFC774(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888(a3);
  a3 = result;
LABEL_30:
  if ((unint64_t)v9 < *(_QWORD *)(a3 + 16))
  {
    v9[a3 + 32] = v13;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C24A60(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;

  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    sub_1A5C19568(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    sub_1A5C4157C(v4, v5, v6, v7);
    return sub_1A5C19568(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  else
  {
    v8 = v7 >> 1;
    if (v6 != v7 >> 1)
    {
      sub_1A5C19568(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
      v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v36 = v4;
      result = swift_unknownObjectRetain();
      v25 = v7 & 0xFFFFFFFFFFFFFFFELL;
      while (v6 < (uint64_t)(v7 >> 1))
      {
        if (v8 <= v6)
          goto LABEL_38;
        if (v7 >> 1 < v8)
          goto LABEL_39;
        v12 = (unsigned __int8 *)(v5 + 48 * v6);
        v13 = *v12;
        v14 = v6 + 1;
        v15 = v7 & 1;
        if ((v13 & 0x20) != 0)
        {
          v16 = *((_QWORD *)v12 + 1);
          if (v14 == v8)
          {
            v17 = v8;
          }
          else
          {
            v18 = (uint64_t *)(v5 + 56 + 48 * v6);
            v17 = v6 + 1;
            do
            {
              if (v17 >= v8)
              {
                __break(1u);
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
              if (v16 >= *v18)
                goto LABEL_20;
              v19 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_36;
              ++v17;
              v18 += 6;
            }
            while (v19 != v8);
            v17 = v8;
LABEL_20:
            if (v17 <= v6)
              goto LABEL_40;
            if (v17 < 0)
              goto LABEL_41;
          }
          v20 = v17 - v14;
          if (__OFSUB__(v17, v14))
            goto LABEL_42;
          if (v20 < 0)
            goto LABEL_43;
          v21 = v8 - v14;
          if (__OFSUB__(v8, v14))
            goto LABEL_44;
          v22 = v3;
          if (!v20 || v21 < 0 || (v23 = v8, v21 >= v20))
          {
            v23 = v17;
            if (__OFADD__(v14, v20))
              goto LABEL_47;
            if (v8 < v17)
              goto LABEL_45;
          }
          if (v23 <= v6)
            goto LABEL_46;
          sub_1A5C26B38(v36, v5, v14, v15 | (2 * v17), v16, v29);
          v26 = v29[1];
          v28 = v29[0];
          v10 = v30;
          swift_unknownObjectRetain();
          v11 = v28;
          v14 = v23;
          v3 = v22;
          v9 = v25;
        }
        else
        {
          v27 = *((_OWORD *)v12 + 1);
          result = *((_QWORD *)v12 + 2);
          if (!(_QWORD)v27)
            goto LABEL_48;
          v26 = *((_OWORD *)v12 + 2);
          swift_unknownObjectRetain();
          v10 = 0;
          v11 = v27;
        }
        v31[0] = v13;
        v7 = v15 | v9;
        v32 = v11;
        v33 = v26;
        v34 = v10;
        v35 = (v13 & 0x20) == 0;
        result = sub_1A5C23008(v13, v3, (uint64_t)v31);
        v6 = v14;
        if (v14 == v8)
        {
          swift_unknownObjectRelease();
          v2 = a2;
          return sub_1A5C19568(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
        }
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1A5C24D08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (result < 1)
    goto LABEL_28;
  v6 = a3;
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 - a3;
  if (__OFSUB__(v8, a3))
    goto LABEL_29;
  v3 = a2;
  v5 = result;
  if (v9 >= result)
    goto LABEL_13;
  v10 = result - v9;
  if (__OFSUB__(result, v9))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v10 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    result = (uint64_t)sub_1A5BFC774(0, v8 + 1, 1, (char *)v7);
    v7 = result;
LABEL_8:
    v11 = *(_QWORD *)(v7 + 16);
    do
    {
      v12 = *(_QWORD *)(v7 + 24);
      if (v11 >= v12 >> 1)
      {
        result = (uint64_t)sub_1A5BFC774((char *)(v12 > 1), v11 + 1, 1, (char *)v7);
        v7 = result;
      }
      *(_QWORD *)(v7 + 16) = v11 + 1;
      *(_BYTE *)(v7 + v11++ + 32) = 0;
      --v10;
    }
    while (v10);
    *v4 = v7;
    goto LABEL_13;
  }
  if (v10)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_13:
  if (v6 == v3)
    return result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_30;
  do
  {
    while (1)
    {
      if (v6 <= v3)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v13 = v6 - 1 + v5;
      if (__OFADD__(v6 - 1, v5))
        goto LABEL_24;
      v14 = v6 - 1;
      if (v6 < 1)
        goto LABEL_25;
      v15 = *(_QWORD *)(v7 + 16);
      if (v14 >= v15)
        goto LABEL_26;
      if (v13 < v15)
        break;
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      result = (uint64_t)sub_1A5C11888(v7);
      v7 = result;
    }
    *(_BYTE *)(v7 + 32 + v13) = *(_BYTE *)(v7 + v6-- + 31);
  }
  while (v14 != v3);
  *v4 = v7;
  return result;
}

uint64_t sub_1A5C24E8C(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A5C252D4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, _BYTE *))ChaChaPoly.Nonce.makeIterator());
}

size_t sub_1A5C24E98(size_t *a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  _BYTE *v21;
  _QWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = a6;
  v23[3] = a7;
  v10 = sub_1A5BF1478((size_t)v23, (unint64_t)&v24);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_26;
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        *a2 = *(_BYTE *)(v10 + 32);
        v12 = a3 - 1;
        if (a3 != 1)
        {
          if (v11 - 1 < v12)
            v12 = v11 - 1;
          if (v12 >= a3 - 2)
            v12 = a3 - 2;
          v13 = v12 + 1;
          if (v13 <= 0x10 || ((unint64_t)&a2[-v10] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            v14 = 1;
            v15 = a2;
          }
          else
          {
            v16 = v13 & 0xF;
            if ((v13 & 0xF) == 0)
              v16 = 16;
            v17 = v13 - v16;
            v14 = v13 - v16 + 1;
            v15 = &a2[v17];
            v18 = a2 + 1;
            v19 = (__int128 *)(v10 + 33);
            do
            {
              v20 = *v19++;
              *v18++ = v20;
              v17 -= 16;
            }
            while (v17);
          }
          v21 = v15 + 1;
          while (a3 != v14)
          {
            if (v11 == v14)
              goto LABEL_23;
            *v21++ = *(_BYTE *)(v10 + 32 + v14);
            if (a3 == ++v14)
              goto LABEL_24;
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v11;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v10;
  a1[1] = a3;
  return a3;
}

size_t sub_1A5C24FF4(size_t *a1, _BYTE *a2, size_t a3)
{
  _OWORD *v3;
  __int128 v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  _BYTE *v19;
  _OWORD v21[3];
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v7 = v3[1];
  v21[0] = *v3;
  v21[1] = v7;
  v21[2] = v3[2];
  v8 = sub_1A5BF1478((size_t)v21, (unint64_t)v22);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_26;
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        *a2 = *(_BYTE *)(v8 + 32);
        v10 = a3 - 1;
        if (a3 != 1)
        {
          if (v9 - 1 < v10)
            v10 = v9 - 1;
          if (v10 >= a3 - 2)
            v10 = a3 - 2;
          v11 = v10 + 1;
          if (v11 <= 0x10 || ((unint64_t)&a2[-v8] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            v12 = 1;
            v13 = a2;
          }
          else
          {
            v14 = v11 & 0xF;
            if ((v11 & 0xF) == 0)
              v14 = 16;
            v15 = v11 - v14;
            v12 = v11 - v14 + 1;
            v13 = &a2[v15];
            v16 = a2 + 1;
            v17 = (__int128 *)(v8 + 33);
            do
            {
              v18 = *v17++;
              *v16++ = v18;
              v15 -= 16;
            }
            while (v15);
          }
          v19 = v13 + 1;
          while (a3 != v12)
          {
            if (v9 == v12)
              goto LABEL_23;
            *v19++ = *(_BYTE *)(v8 + 32 + v12);
            if (a3 == ++v12)
              goto LABEL_24;
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v9;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v8;
  a1[1] = a3;
  return a3;
}

size_t sub_1A5C25158(size_t *a1, _BYTE *a2, size_t a3)
{
  _OWORD *v3;
  __int128 v7;
  __int128 v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  _BYTE *v20;
  _OWORD v22[4];
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v7 = v3[1];
  v22[0] = *v3;
  v22[1] = v7;
  v8 = v3[3];
  v22[2] = v3[2];
  v22[3] = v8;
  v9 = sub_1A5BF1478((size_t)v22, (unint64_t)v23);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_26;
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        *a2 = *(_BYTE *)(v9 + 32);
        v11 = a3 - 1;
        if (a3 != 1)
        {
          if (v10 - 1 < v11)
            v11 = v10 - 1;
          if (v11 >= a3 - 2)
            v11 = a3 - 2;
          v12 = v11 + 1;
          if (v12 <= 0x10 || ((unint64_t)&a2[-v9] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            v13 = 1;
            v14 = a2;
          }
          else
          {
            v15 = v12 & 0xF;
            if ((v12 & 0xF) == 0)
              v15 = 16;
            v16 = v12 - v15;
            v13 = v12 - v15 + 1;
            v14 = &a2[v16];
            v17 = a2 + 1;
            v18 = (__int128 *)(v9 + 33);
            do
            {
              v19 = *v18++;
              *v17++ = v19;
              v16 -= 16;
            }
            while (v16);
          }
          v20 = v14 + 1;
          while (a3 != v13)
          {
            if (v10 == v13)
              goto LABEL_23;
            *v20++ = *(_BYTE *)(v9 + 32 + v13);
            if (a3 == ++v13)
              goto LABEL_24;
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v10;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v9;
  a1[1] = a3;
  return a3;
}

uint64_t sub_1A5C252BC(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A5C252D4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, _BYTE *))AES.CCM.Nonce.makeIterator());
}

uint64_t sub_1A5C252C8(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1A5C252D4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, _BYTE *))AES.GCM.Nonce.makeIterator());
}

uint64_t sub_1A5C252D4(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t *, _BYTE *))
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  _BYTE *v27;

  v11 = a6(a1, a2);
  v13 = v12;
  result = sub_1A5BEFF90(a4, a5);
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    *a1 = v11;
    a1[1] = v13;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_28;
  v15 = *(_QWORD *)(v11 + 16);
  if (v13 == v15)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (v13 < v15)
  {
    v16 = v13 + 1;
    *a2 = *(_BYTE *)(v11 + 32 + v13);
    v17 = a3 - 1;
    if (a3 == 1)
    {
      ++v13;
      goto LABEL_6;
    }
    v18 = a3 - 2;
    if (a3 - 2 >= v15 + ~v13)
      v18 = v15 + ~v13;
    if (v18 < v17)
      v17 = v18;
    v19 = v17 + 1;
    if (v19 <= 0x10 || ((unint64_t)&a2[-v13 - v11] & 0xFFFFFFFFFFFFFFF0) == 0x20)
    {
      v20 = 1;
      v21 = a2;
    }
    else
    {
      v22 = v19 & 0xF;
      if ((v19 & 0xF) == 0)
        v22 = 16;
      v23 = v19 - v22;
      v20 = v19 - v22 + 1;
      v16 += v23;
      v21 = &a2[v23];
      v24 = a2 + 1;
      v25 = (__int128 *)(v13 + v11 + 33);
      do
      {
        v26 = *v25++;
        *v24++ = v26;
        v23 -= 16;
      }
      while (v23);
    }
    v27 = v21 + 1;
    while (a3 != v20)
    {
      if (v15 == v16)
      {
        v13 = v15;
        a3 = v20;
        goto LABEL_6;
      }
      ++v20;
      v13 = v16 + 1;
      *v27++ = *(_BYTE *)(v11 + 32 + v16++);
      if (a3 == v20)
        goto LABEL_6;
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C25450(_QWORD *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  _BYTE *v27;

  sub_1A5C20F6C(a4, a5);
  v11 = v10;
  v13 = v12;
  result = sub_1A5BEFF90(a4, a5);
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    *a1 = v11;
    a1[1] = v13;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_28;
  v15 = *(_QWORD *)(v11 + 16);
  if (v13 == v15)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (v13 < v15)
  {
    v16 = v13 + 1;
    *a2 = *(_BYTE *)(v11 + 32 + v13);
    v17 = a3 - 1;
    if (a3 == 1)
    {
      ++v13;
      goto LABEL_6;
    }
    v18 = a3 - 2;
    if (a3 - 2 >= v15 + ~v13)
      v18 = v15 + ~v13;
    if (v18 < v17)
      v17 = v18;
    v19 = v17 + 1;
    if (v19 <= 0x10 || ((unint64_t)&a2[-v13 - v11] & 0xFFFFFFFFFFFFFFF0) == 0x20)
    {
      v20 = 1;
      v21 = a2;
    }
    else
    {
      v22 = v19 & 0xF;
      if ((v19 & 0xF) == 0)
        v22 = 16;
      v23 = v19 - v22;
      v20 = v19 - v22 + 1;
      v16 += v23;
      v21 = &a2[v23];
      v24 = a2 + 1;
      v25 = (__int128 *)(v13 + v11 + 33);
      do
      {
        v26 = *v25++;
        *v24++ = v26;
        v23 -= 16;
      }
      while (v23);
    }
    v27 = v21 + 1;
    while (a3 != v20)
    {
      if (v15 == v16)
      {
        v13 = v15;
        a3 = v20;
        goto LABEL_6;
      }
      ++v20;
      v13 = v16 + 1;
      *v27++ = *(_BYTE *)(v11 + 32 + v16++);
      if (a3 == v20)
        goto LABEL_6;
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C255C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v30 = *(_OWORD *)(v3 + 3);
  if (!a2)
    goto LABEL_5;
  v7 = a3;
  if (!a3)
  {
LABEL_6:
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = v6;
    *(_OWORD *)(result + 24) = v30;
    return v7;
  }
  if (a3 < 0)
    goto LABEL_68;
  v8 = (unint64_t)v30 >> 1;
  if (v6 == (unint64_t)v30 >> 1)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v29 = v4;
  v26 = result;
  if (v6 >= (uint64_t)((unint64_t)v30 >> 1))
  {
LABEL_48:
    __break(1u);
LABEL_49:
    result = v26;
    v4 = v29;
    v5 = v31;
    goto LABEL_6;
  }
  v9 = a2;
  v27 = v5 + 104;
  v10 = 1;
  v31 = v5;
  while (1)
  {
    if (v8 <= v6)
      goto LABEL_53;
    v11 = (char *)(v5 + 48 * v6);
    v12 = *v11;
    v13 = v6 + 1;
    if ((*v11 & 0x20) == 0)
    {
      result = *((_QWORD *)v11 + 2);
      if (!result)
        goto LABEL_70;
      v5 = *((_QWORD *)v11 + 3);
      v14 = *((_QWORD *)v11 + 4);
      v15 = *((_QWORD *)v11 + 5);
      result = swift_unknownObjectRetain();
      v16 = 0;
      v6 = v13;
      goto LABEL_45;
    }
    v16 = *((_QWORD *)v11 + 1);
    v17 = (unint64_t)v30 >> 1;
    if (v13 != v8)
      break;
LABEL_25:
    v20 = v17 - v13;
    if (__OFSUB__(v17, v13))
      goto LABEL_58;
    if (v20 < 0)
      goto LABEL_59;
    v21 = v8 - v13;
    if (__OFSUB__(v8, v13))
      goto LABEL_60;
    if (!v20 || v21 < 0 || (v22 = (unint64_t)v30 >> 1, v21 >= v20))
    {
      v22 = v17;
      if (__OFADD__(v13, v20))
        goto LABEL_63;
      if (v8 < v17)
        goto LABEL_61;
    }
    if (v22 <= v6)
      goto LABEL_62;
    if (v13 != v17)
    {
      if (v13 >= v17)
        goto LABEL_65;
      v23 = *(_QWORD *)(v5 + 48 * v13 + 8);
      if (v16 >= v23)
        goto LABEL_66;
      v24 = v6 + 2;
      if (v6 + 2 != v17)
      {
        if (v6 + 2 >= v17)
          goto LABEL_69;
        v25 = (_QWORD *)(v27 + 48 * v6);
        while (v24 > v6)
        {
          if (v16 >= *v25)
            goto LABEL_52;
          ++v24;
          v25 += 6;
          if (v17 == v24)
            goto LABEL_43;
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
LABEL_43:
      if (v23 != v16 + 1)
        goto LABEL_67;
    }
    v15 = v30 & 1 | (2 * v17);
    result = swift_unknownObjectRetain();
    v14 = v13;
    v6 = v22;
    v7 = a3;
LABEL_45:
    *(_BYTE *)v9 = v12;
    *(_QWORD *)(v9 + 8) = result;
    *(_QWORD *)(v9 + 16) = v5;
    *(_QWORD *)(v9 + 24) = v14;
    *(_QWORD *)(v9 + 32) = v15;
    *(_QWORD *)(v9 + 40) = v16;
    *(_BYTE *)(v9 + 48) = (v12 & 0x20) == 0;
    if (v10 == v7)
      goto LABEL_49;
    v5 = v31;
    if (v6 == v8)
    {
      v6 = (unint64_t)v30 >> 1;
      v7 = v10;
      result = v26;
      v4 = v29;
      goto LABEL_6;
    }
    ++v10;
    v9 += 56;
    if (v6 >= v8)
      goto LABEL_48;
  }
  if (v13 >= v8)
    goto LABEL_64;
  v17 = v6 + 1;
  if (v16 >= *(_QWORD *)(v5 + 48 * v13 + 8))
  {
LABEL_24:
    if (v17 < 0)
      goto LABEL_57;
    goto LABEL_25;
  }
  v17 = (unint64_t)v30 >> 1;
  if (v6 + 2 == v8)
  {
LABEL_23:
    if (v17 <= v6)
      goto LABEL_56;
    goto LABEL_24;
  }
  v18 = (_QWORD *)(v27 + 48 * v6);
  v17 = v6 + 2;
  while (v17 < v8)
  {
    if (v16 >= *v18)
      goto LABEL_23;
    v19 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_55;
    ++v17;
    v18 += 6;
    if (v19 == v8)
    {
      v17 = (unint64_t)v30 >> 1;
      goto LABEL_23;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

size_t sub_1A5C258BC(size_t *a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  _BYTE *v20;
  _QWORD v22[2];
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v22[0] = a4;
  v22[1] = a5;
  v23[0] = a6;
  v9 = sub_1A5BF1478((size_t)v22, (unint64_t)v23 + 4);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_26;
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        *a2 = *(_BYTE *)(v9 + 32);
        v11 = a3 - 1;
        if (a3 != 1)
        {
          if (v10 - 1 < v11)
            v11 = v10 - 1;
          if (v11 >= a3 - 2)
            v11 = a3 - 2;
          v12 = v11 + 1;
          if (v12 <= 0x10 || ((unint64_t)&a2[-v9] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            v13 = 1;
            v14 = a2;
          }
          else
          {
            v15 = v12 & 0xF;
            if ((v12 & 0xF) == 0)
              v15 = 16;
            v16 = v12 - v15;
            v13 = v12 - v15 + 1;
            v14 = &a2[v16];
            v17 = a2 + 1;
            v18 = (__int128 *)(v9 + 33);
            do
            {
              v19 = *v18++;
              *v17++ = v19;
              v16 -= 16;
            }
            while (v16);
          }
          v20 = v14 + 1;
          while (a3 != v13)
          {
            if (v10 == v13)
              goto LABEL_23;
            *v20++ = *(_BYTE *)(v9 + 32 + v13);
            if (a3 == ++v13)
              goto LABEL_24;
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v10;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v9;
  a1[1] = a3;
  return a3;
}

size_t sub_1A5C25A18(size_t *a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  _BYTE *v19;
  _QWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21[0] = a4;
  v21[1] = a5;
  v8 = sub_1A5BF1478((size_t)v21, (unint64_t)&v22);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_26;
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        *a2 = *(_BYTE *)(v8 + 32);
        v10 = a3 - 1;
        if (a3 != 1)
        {
          if (v9 - 1 < v10)
            v10 = v9 - 1;
          if (v10 >= a3 - 2)
            v10 = a3 - 2;
          v11 = v10 + 1;
          if (v11 <= 0x10 || ((unint64_t)&a2[-v8] & 0xFFFFFFFFFFFFFFF0) == 0x20)
          {
            v12 = 1;
            v13 = a2;
          }
          else
          {
            v14 = v11 & 0xF;
            if ((v11 & 0xF) == 0)
              v14 = 16;
            v15 = v11 - v14;
            v12 = v11 - v14 + 1;
            v13 = &a2[v15];
            v16 = a2 + 1;
            v17 = (__int128 *)(v8 + 33);
            do
            {
              v18 = *v17++;
              *v16++ = v18;
              v15 -= 16;
            }
            while (v15);
          }
          v19 = v13 + 1;
          while (a3 != v12)
          {
            if (v9 == v12)
              goto LABEL_23;
            *v19++ = *(_BYTE *)(v8 + 32 + v12);
            if (a3 == ++v12)
              goto LABEL_24;
          }
          __break(1u);
LABEL_26:
          __break(1u);
        }
      }
      else
      {
LABEL_23:
        a3 = v9;
      }
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_24:
  *a1 = v8;
  a1[1] = a3;
  return a3;
}

void sub_1A5C25B70(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801350);
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v2[2];
  v8 = *v2;
  *v5 = v8;
  v5[1] = 0;
  __asm { BR              X10 }
}

uint64_t sub_1A5C25C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void (*v11)(uint64_t);
  void (**v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;

  sub_1A5BEE468(v4, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801360);
  sub_1A5C419F0();
  sub_1A5BEFF90(v4, v6);
  v9 = *(int *)(v8 + 56);
  *(_BYTE *)(v1 + v9) = 0;
  v11 = *(void (**)(uint64_t))(v0 + 24);
  v10 = *(void (**)(uint64_t))(v0 + 32);
  v12 = (void (**)(uint64_t))(v1 + *(int *)(v5 + 44));
  *v12 = v11;
  v12[1] = v10;
  if (*(_QWORD *)(v7 - 96))
  {
    if (v3)
    {
      if (v3 < 0)
      {
        __break(1u);
        JUMPOUT(0x1A5C25DA4);
      }
      v13 = *(_QWORD *)(v7 - 104);
      if (*(_QWORD *)(v13 + 16))
      {
        *(_QWORD *)(v7 - 136) = v9;
        *(_QWORD *)(v7 - 128) = v2;
        *(_QWORD *)(v7 - 112) = v13 + 32;
        *(_QWORD *)(v7 - 120) = sub_1A5C419E4();
        sub_1A5BF9F80();
        v14 = v3;
        v3 = 0;
        *(_QWORD *)(v7 - 144) = v14;
        v2 = v14 - 1;
        while (1)
        {
          v15 = *(_BYTE *)(*(_QWORD *)(v7 - 112) + v3);
          v16 = v3 + 1;
          sub_1A5C41D44();
          if ((*(_BYTE *)(v7 - 81) & 1) != 0)
          {
            *(_QWORD *)(v1 + 8) = v16;
            goto LABEL_16;
          }
          v17 = *(_BYTE *)(v7 - 82);
          *(_BYTE *)(v7 - 84) = v15;
          *(_BYTE *)(v7 - 83) = v17;
          v11(v7 - 84);
          *(_BYTE *)(*(_QWORD *)(v7 - 96) + v3) = *(_BYTE *)(v7 - 85);
          if (v2 == v3)
          {
            v3 = *(_QWORD *)(v7 - 144);
            *(_QWORD *)(v1 + 8) = v3;
            v2 = *(_QWORD *)(v7 - 128);
            goto LABEL_18;
          }
          v18 = *(_QWORD *)(*(_QWORD *)(v7 - 104) + 16);
          if (v16 == v18)
            break;
          ++v3;
          if (v16 >= v18)
          {
            __break(1u);
            goto LABEL_11;
          }
        }
        *(_QWORD *)(v1 + 8) = ++v3;
LABEL_16:
        v9 = *(_QWORD *)(v7 - 136);
        v2 = *(_QWORD *)(v7 - 128);
      }
      else
      {
        v3 = 0;
      }
      *(_BYTE *)(v1 + v9) = 1;
    }
  }
  else
  {
LABEL_11:
    v3 = 0;
  }
LABEL_18:
  sub_1A5BF683C(v1, v2, &qword_1EE801350);
  return v3;
}

uint64_t sub_1A5C25DB4(uint64_t a1, uint64_t a2)
{
  return sub_1A5C2628C(a1, a2, (uint64_t (*)(void))ChaChaPoly.Nonce.makeIterator());
}

_QWORD *sub_1A5C25DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  _BYTE *v8;
  char *v9;
  char v10;
  char v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  size_t v18;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v25[0] = a1;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v4 = sub_1A5BF1478((size_t)v25, (unint64_t)&v26);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = 0;
  if (v5)
  {
    v8 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
    v9 = (char *)(v4 + 32);
    while (1)
    {
      v11 = *v9++;
      v10 = v11;
      if (!v7)
      {
        v12 = v6[3];
        if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_24;
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1)
          v14 = 1;
        else
          v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
        v15 = (_QWORD *)swift_allocObject();
        v16 = 2 * _swift_stdlib_malloc_size(v15) - 64;
        v15[2] = v14;
        v15[3] = v16;
        v17 = (unint64_t)(v15 + 4);
        v18 = v6[3] >> 1;
        if (v6[2])
        {
          if (v15 != v6 || v17 >= (unint64_t)v6 + v18 + 32)
            memmove(v15 + 4, v6 + 4, v18);
          v6[2] = 0;
        }
        v8 = (_BYTE *)(v17 + v18);
        v7 = (v16 >> 1) - v18;
        swift_release();
        v6 = v15;
      }
      v20 = __OFSUB__(v7--, 1);
      if (v20)
        break;
      *v8++ = v10;
      if (!--v5)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  v21 = v6[3];
  if (v21 >= 2)
  {
    v22 = v21 >> 1;
    v20 = __OFSUB__(v22, v7);
    v23 = v22 - v7;
    if (v20)
      goto LABEL_25;
    v6[2] = v23;
  }
  return v6;
}

_QWORD *sub_1A5C25F4C(_OWORD *a1)
{
  __int128 v1;
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _BYTE *v6;
  char *v7;
  char v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v23[3];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v23[0] = *a1;
  v23[1] = v1;
  v23[2] = a1[2];
  v2 = sub_1A5BF1478((size_t)v23, (unint64_t)v24);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = 0;
  if (v3)
  {
    v6 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
    v7 = (char *)(v2 + 32);
    while (1)
    {
      v9 = *v7++;
      v8 = v9;
      if (!v5)
      {
        v10 = v4[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_24;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
        v13 = (_QWORD *)swift_allocObject();
        v14 = 2 * _swift_stdlib_malloc_size(v13) - 64;
        v13[2] = v12;
        v13[3] = v14;
        v15 = (unint64_t)(v13 + 4);
        v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v13 != v4 || v15 >= (unint64_t)v4 + v16 + 32)
            memmove(v13 + 4, v4 + 4, v16);
          v4[2] = 0;
        }
        v6 = (_BYTE *)(v15 + v16);
        v5 = (v14 >> 1) - v16;
        swift_release();
        v4 = v13;
      }
      v18 = __OFSUB__(v5--, 1);
      if (v18)
        break;
      *v6++ = v8;
      if (!--v3)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  v19 = v4[3];
  if (v19 >= 2)
  {
    v20 = v19 >> 1;
    v18 = __OFSUB__(v20, v5);
    v21 = v20 - v5;
    if (v18)
      goto LABEL_25;
    v4[2] = v21;
  }
  return v4;
}

_QWORD *sub_1A5C260E0(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  size_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  _BYTE *v7;
  char *v8;
  char v9;
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  size_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD v24[4];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v24[0] = *a1;
  v24[1] = v1;
  v2 = a1[3];
  v24[2] = a1[2];
  v24[3] = v2;
  v3 = sub_1A5BF1478((size_t)v24, (unint64_t)v25);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v6 = 0;
  if (v4)
  {
    v7 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
    v8 = (char *)(v3 + 32);
    while (1)
    {
      v10 = *v8++;
      v9 = v10;
      if (!v6)
      {
        v11 = v5[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_24;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
        v14 = (_QWORD *)swift_allocObject();
        v15 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        v14[2] = v13;
        v14[3] = v15;
        v16 = (unint64_t)(v14 + 4);
        v17 = v5[3] >> 1;
        if (v5[2])
        {
          if (v14 != v5 || v16 >= (unint64_t)v5 + v17 + 32)
            memmove(v14 + 4, v5 + 4, v17);
          v5[2] = 0;
        }
        v7 = (_BYTE *)(v16 + v17);
        v6 = (v15 >> 1) - v17;
        swift_release();
        v5 = v14;
      }
      v19 = __OFSUB__(v6--, 1);
      if (v19)
        break;
      *v7++ = v9;
      if (!--v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  v20 = v5[3];
  if (v20 >= 2)
  {
    v21 = v20 >> 1;
    v19 = __OFSUB__(v21, v6);
    v22 = v21 - v6;
    if (v19)
      goto LABEL_25;
    v5[2] = v22;
  }
  return v5;
}

uint64_t sub_1A5C26274(uint64_t a1, uint64_t a2)
{
  return sub_1A5C2628C(a1, a2, (uint64_t (*)(void))AES.CCM.Nonce.makeIterator());
}

uint64_t sub_1A5C26280(uint64_t a1, uint64_t a2)
{
  return sub_1A5C2628C(a1, a2, (uint64_t (*)(void))AES.GCM.Nonce.makeIterator());
}

uint64_t sub_1A5C2628C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  _BYTE *v10;
  char v11;
  char v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  size_t v19;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  result = a3();
  v5 = *(_QWORD *)(result + 16);
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = v5 - v4;
  if (v5 != v4)
  {
    if (v5 > v4)
    {
      if (v4 < 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (!v5)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      v8 = 0;
      v9 = (char *)(v4 + result + 32);
      v10 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
      while (1)
      {
        v12 = *v9++;
        v11 = v12;
        if (!v8)
        {
          v13 = v6[3];
          if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_28;
          v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
          if (v14 <= 1)
            v15 = 1;
          else
            v15 = v14;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
          v16 = (_QWORD *)swift_allocObject();
          v17 = 2 * _swift_stdlib_malloc_size(v16) - 64;
          v16[2] = v15;
          v16[3] = v17;
          v18 = (unint64_t)(v16 + 4);
          v19 = v6[3] >> 1;
          if (v6[2])
          {
            if (v16 != v6 || v18 >= (unint64_t)v6 + v19 + 32)
              memmove(v16 + 4, v6 + 4, v19);
            v6[2] = 0;
          }
          v10 = (_BYTE *)(v18 + v19);
          v8 = (v17 >> 1) - v19;
          result = swift_release();
          v6 = v16;
        }
        v21 = __OFSUB__(v8--, 1);
        if (v21)
          break;
        *v10++ = v11;
        if (!--v7)
          goto LABEL_23;
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  v8 = 0;
LABEL_23:
  result = swift_bridgeObjectRelease();
  v22 = v6[3];
  if (v22 < 2)
    return (uint64_t)v6;
  v23 = v22 >> 1;
  v21 = __OFSUB__(v23, v8);
  v24 = v23 - v8;
  if (!v21)
  {
    v6[2] = v24;
    return (uint64_t)v6;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A5C26408(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  char v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  unint64_t v22;
  size_t v23;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  sub_1A5BEE468(a1, a2);
  sub_1A5C20F6C(a1, a2);
  v5 = v4;
  v7 = v6;
  result = sub_1A5BEFF90(a1, a2);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v11 = v9 - v7;
  if (v9 != v7)
  {
    if (v9 > v7)
    {
      if (v7 < 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (!v9)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      v12 = 0;
      v13 = (char *)(v7 + v5 + 32);
      v14 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
      while (1)
      {
        v16 = *v13++;
        v15 = v16;
        if (!v12)
        {
          v17 = v10[3];
          if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_28;
          v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v18 <= 1)
            v19 = 1;
          else
            v19 = v18;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
          v20 = (_QWORD *)swift_allocObject();
          v21 = 2 * _swift_stdlib_malloc_size(v20) - 64;
          v20[2] = v19;
          v20[3] = v21;
          v22 = (unint64_t)(v20 + 4);
          v23 = v10[3] >> 1;
          if (v10[2])
          {
            if (v20 != v10 || v22 >= (unint64_t)v10 + v23 + 32)
              memmove(v20 + 4, v10 + 4, v23);
            v10[2] = 0;
          }
          v14 = (_BYTE *)(v22 + v23);
          v12 = (v21 >> 1) - v23;
          result = swift_release();
          v10 = v20;
        }
        v25 = __OFSUB__(v12--, 1);
        if (v25)
          break;
        *v14++ = v15;
        if (!--v11)
          goto LABEL_23;
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  v12 = 0;
LABEL_23:
  result = swift_bridgeObjectRelease();
  v26 = v10[3];
  if (v26 < 2)
    return (uint64_t)v10;
  v27 = v26 >> 1;
  v25 = __OFSUB__(v27, v12);
  v28 = v27 - v12;
  if (!v25)
  {
    v10[2] = v28;
    return (uint64_t)v10;
  }
LABEL_32:
  __break(1u);
  return result;
}

_QWORD *sub_1A5C265A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  _BYTE *v7;
  char *v8;
  char v9;
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  size_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v24[0] = a1;
  v24[1] = a2;
  v25[0] = a3;
  v3 = sub_1A5BF1478((size_t)v24, (unint64_t)v25 + 4);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v6 = 0;
  if (v4)
  {
    v7 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
    v8 = (char *)(v3 + 32);
    while (1)
    {
      v10 = *v8++;
      v9 = v10;
      if (!v6)
      {
        v11 = v5[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_24;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
        v14 = (_QWORD *)swift_allocObject();
        v15 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        v14[2] = v13;
        v14[3] = v15;
        v16 = (unint64_t)(v14 + 4);
        v17 = v5[3] >> 1;
        if (v5[2])
        {
          if (v14 != v5 || v16 >= (unint64_t)v5 + v17 + 32)
            memmove(v14 + 4, v5 + 4, v17);
          v5[2] = 0;
        }
        v7 = (_BYTE *)(v16 + v17);
        v6 = (v15 >> 1) - v17;
        swift_release();
        v5 = v14;
      }
      v19 = __OFSUB__(v6--, 1);
      if (v19)
        break;
      *v7++ = v9;
      if (!--v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  v20 = v5[3];
  if (v20 >= 2)
  {
    v21 = v20 >> 1;
    v19 = __OFSUB__(v21, v6);
    v22 = v21 - v6;
    if (v19)
      goto LABEL_25;
    v5[2] = v22;
  }
  return v5;
}

_QWORD *sub_1A5C26730(uint64_t a1, uint64_t a2)
{
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _BYTE *v6;
  char *v7;
  char v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v23[0] = a1;
  v23[1] = a2;
  v2 = sub_1A5BF1478((size_t)v23, (unint64_t)&v24);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = 0;
  if (v3)
  {
    v6 = (_BYTE *)(MEMORY[0x1E0DEE9D8] + 32);
    v7 = (char *)(v2 + 32);
    while (1)
    {
      v9 = *v7++;
      v8 = v9;
      if (!v5)
      {
        v10 = v4[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_24;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
        v13 = (_QWORD *)swift_allocObject();
        v14 = 2 * _swift_stdlib_malloc_size(v13) - 64;
        v13[2] = v12;
        v13[3] = v14;
        v15 = (unint64_t)(v13 + 4);
        v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v13 != v4 || v15 >= (unint64_t)v4 + v16 + 32)
            memmove(v13 + 4, v4 + 4, v16);
          v4[2] = 0;
        }
        v6 = (_BYTE *)(v15 + v16);
        v5 = (v14 >> 1) - v16;
        swift_release();
        v4 = v13;
      }
      v18 = __OFSUB__(v5--, 1);
      if (v18)
        break;
      *v6++ = v8;
      if (!--v3)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
LABEL_19:
  swift_release();
  v19 = v4[3];
  if (v19 >= 2)
  {
    v20 = v19 >> 1;
    v18 = __OFSUB__(v20, v5);
    v21 = v20 - v5;
    if (v18)
      goto LABEL_25;
    v4[2] = v21;
  }
  return v4;
}

uint64_t sub_1A5C268B8(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _BOOL4 v9;
  BOOL v10;
  int64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t *v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v5 = result;
  v6 = 0;
  v7 = 32;
  v8 = result;
  while (1)
  {
    v9 = v8 <= a2;
    if (a3 > 0)
      v9 = v8 >= a2;
    if (v9)
      break;
    v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10)
      v8 = (v8 >> 63) ^ 0x8000000000000000;
    v7 += 8;
    v10 = __OFADD__(v6++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF977C8);
    v11 = (int64_t *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v11);
    v12 = result - 32;
    if (result < 32)
      v12 = result - 25;
    v13 = v12 >> 3;
    v11[2] = v6;
    v11[3] = 2 * v13;
    v14 = v11 + 4;
    v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      v16 = v5 <= a2;
      if (a3 > 0)
        v16 = v5 >= a2;
      if (v16)
        break;
      if (__OFADD__(v5, a3))
        v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000;
      else
        v17 = v5 + a3;
      *v14++ = v5;
      v5 = v17;
      if (!--v6)
        goto LABEL_23;
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v11 = (int64_t *)MEMORY[0x1E0DEE9D8];
  v14 = (int64_t *)(MEMORY[0x1E0DEE9D8] + 32);
  v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  if (v6)
    goto LABEL_15;
  v17 = result;
LABEL_23:
  v18 = v17 <= a2;
  if (a3 > 0)
    v18 = v17 >= a2;
  if (!v18)
  {
    v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v20 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        v20 = v19;
        if (!v15)
          goto LABEL_32;
        v20 = v19;
      }
      else if (!v15)
      {
LABEL_32:
        v21 = v11[3];
        if ((uint64_t)((v21 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_58;
        v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        if (v22 <= 1)
          v23 = 1;
        else
          v23 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF977C8);
        v24 = (int64_t *)swift_allocObject();
        v25 = _swift_stdlib_malloc_size(v24);
        v26 = v25 - 32;
        if (v25 < 32)
          v26 = v25 - 25;
        v27 = v26 >> 3;
        v24[2] = v23;
        v24[3] = 2 * (v26 >> 3);
        v28 = (unint64_t)(v24 + 4);
        v29 = (unint64_t)v11[3] >> 1;
        if (v11[2])
        {
          if (v24 != v11 || v28 >= (unint64_t)&v11[v29 + 4])
            memmove(v24 + 4, v11 + 4, 8 * v29);
          v11[2] = 0;
        }
        v14 = (int64_t *)(v28 + 8 * v29);
        v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
        result = swift_release();
        v11 = v24;
        v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }
      v10 = __OFSUB__(v15--, 1);
      if (v10)
        goto LABEL_57;
      *v14++ = v17;
      v31 = v20 <= a2;
      if (a3 > 0)
        v31 = v20 >= a2;
      v17 = v20;
    }
    while (!v31);
  }
  v32 = v11[3];
  if (v32 < 2)
    return (uint64_t)v11;
  v33 = v32 >> 1;
  v10 = __OFSUB__(v33, v15);
  v34 = v33 - v15;
  if (!v10)
  {
    v11[2] = v34;
    return (uint64_t)v11;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1A5C26B38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = a4 >> 1;
  if (a4 >> 1 == a3)
    goto LABEL_10;
  if ((uint64_t)(a4 >> 1) <= a3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(a2 + 48 * a3 + 8);
  if (v7 <= a5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = a3 + 1;
  if (a3 + 1 != v6)
  {
    v9 = (_QWORD *)(a2 + 48 * a3 + 56);
    while (v8 < v6)
    {
      if (*v9 <= a5)
        goto LABEL_12;
      ++v8;
      v9 += 6;
      if (v6 == v8)
        goto LABEL_9;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
LABEL_9:
  if (v7 == a5 + 1)
  {
LABEL_10:
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    a6[4] = a5;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

BOOL sub_1A5C26BC8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return 0;
  v3 = a2[2];
  if (a1[2])
  {
    if (v3)
      return (sub_1A5BFAB10(a1[3], a1[4], a1[5], a2[3], a2[4], a2[5]) & 1) != 0;
LABEL_8:
    sub_1A5C26C68((uint64_t)a1);
    sub_1A5C26C68((uint64_t)a2);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
  if (v3)
    goto LABEL_8;
  return 1;
}

uint64_t sub_1A5C26C68(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1A5C26C90(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v5 = a4 >> 1;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a4 >> 1 != a3)
  {
    v7 = a4;
    v8 = a3;
    v10 = result;
    result = swift_unknownObjectRetain();
    if (v5 <= v8)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      result = swift_unknownObjectRelease();
      goto LABEL_62;
    }
    v4 = 0;
    v43 = v7 & 1;
    v44 = v5;
    v41 = a2 + 104;
    v42 = v10;
    v11 = v6 + 4;
    v45 = a2;
    while (1)
    {
      if (v5 <= v8)
        goto LABEL_68;
      v12 = (char *)(a2 + 48 * v8);
      v13 = v8 + 1;
      v48 = *v12;
      if ((*v12 & 0x20) != 0)
        break;
      v14 = *((_QWORD *)v12 + 2);
      if (!v14)
        goto LABEL_87;
      v15 = *((_QWORD *)v12 + 4);
      v46 = *((_QWORD *)v12 + 3);
      v16 = *((_QWORD *)v12 + 5);
      result = swift_unknownObjectRetain();
      v17 = 0;
      v18 = v13;
      v13 = v15;
      if (!v4)
        goto LABEL_43;
      v47 = v16;
      v8 = v18;
      v13 = v15;
LABEL_56:
      a2 = v45;
      v27 = v46;
LABEL_57:
      v37 = __OFSUB__(v4--, 1);
      if (v37)
        goto LABEL_70;
      *(_BYTE *)v11 = v48;
      v11[1] = v14;
      v11[2] = v27;
      v11[3] = v13;
      v11[4] = v47;
      v11[5] = v17;
      *((_BYTE *)v11 + 48) = (v48 & 0x20) == 0;
      v5 = v44;
      if (v8 == v44)
        goto LABEL_61;
      v11 += 7;
      if (v8 >= v44)
        goto LABEL_60;
    }
    v17 = *((_QWORD *)v12 + 1);
    v19 = v5;
    if (v13 != v5)
    {
      if (v13 >= v5)
        goto LABEL_81;
      v19 = v8 + 1;
      if (v17 < *(_QWORD *)(a2 + 48 * v13 + 8))
      {
        v19 = v5;
        if (v8 + 2 != v5)
        {
          v20 = (_QWORD *)(v41 + 48 * v8);
          v19 = v8 + 2;
          while (v19 < v5)
          {
            if (v17 >= *v20)
              goto LABEL_20;
            v21 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_71;
            ++v19;
            v20 += 6;
            if (v21 == v5)
            {
              v19 = v5;
              goto LABEL_20;
            }
          }
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
          return result;
        }
LABEL_20:
        if (v19 <= v8)
          goto LABEL_72;
      }
      if (v19 < 0)
        goto LABEL_73;
    }
    v22 = v19 - v13;
    if (__OFSUB__(v19, v13))
      goto LABEL_74;
    if (v22 < 0)
      goto LABEL_75;
    v23 = v5 - v13;
    if (__OFSUB__(v5, v13))
      goto LABEL_76;
    if (!v22 || v23 < 0 || (v18 = v5, v23 >= v22))
    {
      v18 = v19;
      if (__OFADD__(v13, v22))
        goto LABEL_80;
      if (v5 < v19)
        goto LABEL_77;
    }
    if (v18 <= v8)
      goto LABEL_78;
    if (v13 != v19)
    {
      if (v13 >= v19)
        goto LABEL_82;
      v24 = *(_QWORD *)(a2 + 48 * v13 + 8);
      if (v17 >= v24)
        goto LABEL_83;
      v25 = v8 + 2;
      if (v8 + 2 != v19)
      {
        if (v8 + 2 >= v19)
          goto LABEL_85;
        v26 = (_QWORD *)(v41 + 48 * v8);
        while (v25 > v8)
        {
          if (v17 >= *v26)
            goto LABEL_67;
          ++v25;
          v26 += 6;
          if (v19 == v25)
            goto LABEL_40;
        }
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
LABEL_40:
      if (v24 != v17 + 1)
        goto LABEL_84;
    }
    v16 = v43 | (2 * v19);
    result = swift_unknownObjectRetain();
    v46 = a2;
    v14 = v10;
    if (v4)
    {
      v47 = v16;
      v8 = v18;
      a2 = v45;
      v27 = v45;
      v14 = v10;
      goto LABEL_57;
    }
LABEL_43:
    v28 = v6[3];
    if ((uint64_t)((v28 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_79;
    v29 = v6;
    v47 = v16;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    if (v30 <= 1)
      v31 = 1;
    else
      v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE801918);
    v6 = (_QWORD *)swift_allocObject();
    v32 = (uint64_t)(_swift_stdlib_malloc_size(v6) - 32) / 56;
    v6[2] = v31;
    v6[3] = 2 * v32;
    v33 = (unint64_t)(v6 + 4);
    v34 = v29[3] >> 1;
    v35 = 7 * v34;
    if (v29[2])
    {
      if (v6 != v29 || v33 >= (unint64_t)&v29[v35 + 4])
        memmove(v6 + 4, v29 + 4, 56 * v34);
      v29[2] = 0;
    }
    v11 = (_QWORD *)(v33 + v35 * 8);
    v4 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
    result = swift_release();
    v8 = v18;
    v10 = v42;
    goto LABEL_56;
  }
  v4 = 0;
LABEL_62:
  v38 = v6[3];
  if (v38 >= 2)
  {
    v39 = v38 >> 1;
    v37 = __OFSUB__(v39, v4);
    v40 = v39 - v4;
    if (v37)
      goto LABEL_86;
    v6[2] = v40;
  }
  return (uint64_t)v6;
}

uint64_t sub_1A5C2707C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;

  LOBYTE(v7) = a1;
  v8 = *(char **)a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v10 = *((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
    v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 1, 1, v8);
      v9 = *((_QWORD *)v8 + 3);
      v11 = v9 >> 1;
    }
    *((_QWORD *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2))
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 2, 1, v8);
    *((_QWORD *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *(_QWORD *)a2 = v8;
    v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = sub_1A5C24A60(a2, a3);
    if (v3)
      return result;
    a3 = *(_QWORD *)a2;
    v15 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v10 = v15 - v7;
    if ((uint64_t)(v15 - v7) <= 127)
      break;
    if (v15 >= v7)
    {
      v4 = 71 - __clz(v10);
      v8 = (char *)(v4 >> 3);
      sub_1A5C24D08(v4 >> 3, v7, v15);
      a3 = *(_QWORD *)a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888(a3);
    a3 = result;
LABEL_11:
    if (v13 >= *(_QWORD *)(a3 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    v16 = a3 + 32;
    *(_BYTE *)(a3 + 32 + v13) = (v4 >> 3) | 0x80;
    *(_QWORD *)a2 = a3;
    if (v7 < *(_QWORD *)(a3 + 16))
    {
      *(_BYTE *)(v16 + v7) = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1)
        goto LABEL_32;
      if (v7 + 1 < *(_QWORD *)(a3 + 16))
      {
        *(_BYTE *)(v16 + v7 + 1) = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2)
          goto LABEL_32;
        if (v7 + 2 < *(_QWORD *)(a3 + 16))
        {
          *(_BYTE *)(v16 + v7 + 2) = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3)
            goto LABEL_32;
          if (v7 + 3 < *(_QWORD *)(a3 + 16))
          {
            *(_BYTE *)(v16 + v7 + 3) = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4)
              goto LABEL_32;
            if (v7 + 4 < *(_QWORD *)(a3 + 16))
            {
              *(_BYTE *)(v16 + v7 + 4) = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5)
                goto LABEL_32;
              if (v7 + 5 < *(_QWORD *)(a3 + 16))
              {
                *(_BYTE *)(v16 + v7 + 5) = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6)
                  goto LABEL_32;
                if (v7 + 6 < *(_QWORD *)(a3 + 16))
                {
                  *(_BYTE *)(v16 + v7 + 6) = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7)
                    goto LABEL_32;
                  if (v7 + 7 < *(_QWORD *)(a3 + 16))
                  {
                    *(_BYTE *)(v16 + v7 + 7) = v10 >> (v4 & 0x38);
LABEL_32:
                    *(_QWORD *)a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v8 = sub_1A5BFC774(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888(a3);
  a3 = result;
LABEL_30:
  if (v13 < *(_QWORD *)(a3 + 16))
  {
    *(_BYTE *)(a3 + v13 + 32) = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C27378(char a1, char **a2, uint64_t (*a3)(char **), uint64_t a4)
{
  return sub_1A5C27694(a1, a2, a3, a4);
}

uint64_t sub_1A5C2738C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4 >> 1;
  result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v6 = a3;
  result = sub_1A5C41F18();
  if (v4 != v6)
  {
    while (v6 < v4)
    {
      v8 = (_QWORD *)(a2 + 48 * v6);
      v9 = v8[3];
      v10 = v8[4];
      v11 = v8[5];
      v12 = v8[2];
      sub_1A5C41F24();
      sub_1A5C41F18();
      if (v12)
      {
        sub_1A5C41F24();
        v13 = v11 >> 1;
        result = (v11 >> 1) - v10;
        if (__OFSUB__(v11 >> 1, v10))
          goto LABEL_16;
        result = sub_1A5C41F18();
        v14 = __OFSUB__(v13, v10);
        v15 = v13 - v10;
        if (v15)
        {
          if ((v15 < 0) ^ v14 | (v15 == 0))
            goto LABEL_17;
          v16 = v9 + v10;
          do
          {
            ++v16;
            result = sub_1A5C41F24();
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        result = sub_1A5C41F24();
      }
      if (++v6 == v4)
        return result;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void sub_1A5C2747C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5;
  int64_t v6;
  _QWORD *v7;

  v5 = a4 >> 1;
  v6 = a3;
  if (a4 >> 1 != a3)
  {
    v7 = (_QWORD *)(a2 + 48 * a3 + 8);
    v6 = a3;
    while (1)
    {
      if (v6 >= v5)
      {
        __break(1u);
        goto LABEL_13;
      }
      if (*v7 <= a5)
        break;
      ++v6;
      v7 += 6;
      if (v5 == v6)
      {
        v6 = a4 >> 1;
        break;
      }
    }
    if (v6 >= a3)
      goto LABEL_8;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (v5 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 < 0)
LABEL_16:
    __break(1u);
}

uint64_t sub_1A5C274FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  result = (uint64_t)sub_1A5C227E0(a1, a2, a3, a4);
  if (!v5)
  {
    v11 = v10;
    v12 = v10 >> 1;
    if (v9 == v10 >> 1)
    {
      __break(1u);
    }
    else if (v9 < (uint64_t)(v10 >> 1))
    {
      v13 = result;
      v14 = v8;
      v15 = v8 + 48 * v9;
      v16 = *(_BYTE *)v15;
      v17 = v9 + 1;
      if ((*(_BYTE *)v15 & 0x20) != 0)
      {
        v31 = *(_QWORD *)(v15 + 8);
        sub_1A5C2747C(result, v8, v9 + 1, v10, v31);
        v29 = v21;
        v34 = v22;
        result = (v20 >> 1) - v19;
        if (__OFSUB__(v20 >> 1, v19))
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        v23 = v19;
        v24 = v20;
        sub_1A5C1A9A0(result, v13, v14, v17, v11);
        v17 = v25;
        v27 = v26;
        sub_1A5C26B38(v29, v34, v23, v24, v31, v32);
        v28 = v32[1];
        v30 = v32[0];
        v18 = v33;
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v12 = v27 >> 1;
      }
      else
      {
        v30 = *(_OWORD *)(v15 + 16);
        result = *(_QWORD *)(v15 + 16);
        if (!(_QWORD)v30)
        {
LABEL_18:
          __break(1u);
          return result;
        }
        v28 = *(_OWORD *)(v15 + 32);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v18 = 0;
      }
      if (!__OFSUB__(v12, v17))
      {
        if (v12 == v17)
        {
          *(_BYTE *)a5 = v16;
          *(_OWORD *)(a5 + 8) = v30;
          *(_OWORD *)(a5 + 24) = v28;
          *(_QWORD *)(a5 + 40) = v18;
          *(_BYTE *)(a5 + 48) = (v16 & 0x20) == 0;
          return result;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1A5C27694(char a1, char **a2, uint64_t (*a3)(char **), uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;

  LOBYTE(v8) = a1;
  v9 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v11 = *((_QWORD *)v9 + 2);
    v10 = *((_QWORD *)v9 + 3);
    v12 = v10 >> 1;
    v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 1, 1, v9);
      v10 = *((_QWORD *)v9 + 3);
      v12 = v10 >> 1;
    }
    *((_QWORD *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2))
      v9 = sub_1A5BFC774((char *)(v10 > 1), v11 + 2, 1, v9);
    *((_QWORD *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *a2 = v9;
    v9 = (char *)(v11 + 1);
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = a3(a2);
    if (v4)
      return result;
    a4 = (uint64_t)*a2;
    v15 = *((_QWORD *)*a2 + 2);
    v13 = v15 - v8;
    if ((uint64_t)(v15 - v8) <= 127)
      break;
    if (v15 >= v8)
    {
      v11 = 71 - __clz(v13);
      a3 = (uint64_t (*)(char **))(v11 >> 3);
      sub_1A5C24D08(v11 >> 3, v8, v15);
      a4 = (uint64_t)*a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888(a4);
    a4 = result;
LABEL_11:
    if ((unint64_t)v9 >= *(_QWORD *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }
    v16 = a4 + 32;
    v9[a4 + 32] = (v11 >> 3) | 0x80;
    *a2 = (char *)a4;
    if (v8 < *(_QWORD *)(a4 + 16))
    {
      *(_BYTE *)(v16 + v8) = v13 >> (8 * (((_BYTE)a3 - 1) & 7u));
      if (a3 == (uint64_t (*)(char **))1)
        goto LABEL_32;
      if (v8 + 1 < *(_QWORD *)(a4 + 16))
      {
        *(_BYTE *)(v16 + v8 + 1) = v13 >> (8 * (((_BYTE)a3 - 2) & 7u));
        if (a3 == (uint64_t (*)(char **))2)
          goto LABEL_32;
        if (v8 + 2 < *(_QWORD *)(a4 + 16))
        {
          *(_BYTE *)(v16 + v8 + 2) = v13 >> (8 * (((_BYTE)a3 - 3) & 7u));
          if (a3 == (uint64_t (*)(char **))3)
            goto LABEL_32;
          if (v8 + 3 < *(_QWORD *)(a4 + 16))
          {
            *(_BYTE *)(v16 + v8 + 3) = v13 >> (8 * (((_BYTE)a3 - 4) & 7u));
            if (a3 == (uint64_t (*)(char **))4)
              goto LABEL_32;
            if (v8 + 4 < *(_QWORD *)(a4 + 16))
            {
              *(_BYTE *)(v16 + v8 + 4) = v13 >> (8 * (((_BYTE)a3 - 5) & 7u));
              if (a3 == (uint64_t (*)(char **))5)
                goto LABEL_32;
              if (v8 + 5 < *(_QWORD *)(a4 + 16))
              {
                *(_BYTE *)(v16 + v8 + 5) = v13 >> (8 * (((_BYTE)a3 - 6) & 7u));
                if (a3 == (uint64_t (*)(char **))6)
                  goto LABEL_32;
                if (v8 + 6 < *(_QWORD *)(a4 + 16))
                {
                  *(_BYTE *)(v16 + v8 + 6) = v13 >> (8 * (((_BYTE)a3 - 7) & 7u));
                  if (a3 == (uint64_t (*)(char **))7)
                    goto LABEL_32;
                  if (v8 + 7 < *(_QWORD *)(a4 + 16))
                  {
                    *(_BYTE *)(v16 + v8 + 7) = v13 >> (v11 & 0x38);
LABEL_32:
                    *a2 = (char *)a4;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v9 = sub_1A5BFC774(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888(a4);
  a4 = result;
LABEL_30:
  if ((unint64_t)v9 < *(_QWORD *)(a4 + 16))
  {
    v9[a4 + 32] = v13;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C27994(char a1, char **a2, char *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  char *v16;

  LOBYTE(v7) = a1;
  v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v10 = *((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
    v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 1, 1, v8);
      v9 = *((_QWORD *)v8 + 3);
      v11 = v9 >> 1;
    }
    *((_QWORD *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2))
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 2, 1, v8);
    *((_QWORD *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = sub_1A5C2C250(a2, (uint64_t)a3);
    if (v3)
      return result;
    a3 = *a2;
    v15 = *((_QWORD *)*a2 + 2);
    v10 = v15 - v7;
    if ((uint64_t)(v15 - v7) <= 127)
      break;
    if (v15 >= v7)
    {
      v4 = 71 - __clz(v10);
      v8 = (char *)(v4 >> 3);
      sub_1A5C24D08(v4 >> 3, v7, v15);
      a3 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((_QWORD *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    v16 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((_QWORD *)a3 + 2))
    {
      v16[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1)
        goto LABEL_32;
      if (v7 + 1 < *((_QWORD *)a3 + 2))
      {
        v16[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2)
          goto LABEL_32;
        if (v7 + 2 < *((_QWORD *)a3 + 2))
        {
          v16[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3)
            goto LABEL_32;
          if (v7 + 3 < *((_QWORD *)a3 + 2))
          {
            v16[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4)
              goto LABEL_32;
            if (v7 + 4 < *((_QWORD *)a3 + 2))
            {
              v16[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5)
                goto LABEL_32;
              if (v7 + 5 < *((_QWORD *)a3 + 2))
              {
                v16[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6)
                  goto LABEL_32;
                if (v7 + 6 < *((_QWORD *)a3 + 2))
                {
                  v16[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7)
                    goto LABEL_32;
                  if (v7 + 7 < *((_QWORD *)a3 + 2))
                  {
                    v16[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v8 = sub_1A5BFC774(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((_QWORD *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C27C90(char a1, char **a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD v23[6];

  LOBYTE(v8) = a1;
  v9 = (unint64_t)*a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v11 = *(_QWORD *)(v9 + 16);
    v10 = *(_QWORD *)(v9 + 24);
    v12 = v10 >> 1;
    v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      v9 = (unint64_t)sub_1A5BFC774((char *)(v10 > 1), v11 + 1, 1, (char *)v9);
      v10 = *(_QWORD *)(v9 + 24);
      v12 = v10 >> 1;
    }
    *(_QWORD *)(v9 + 16) = v13;
    *(_BYTE *)(v9 + v11 + 32) = v8;
    v8 = v11 + 2;
    if (v12 < (uint64_t)(v11 + 2))
      v9 = (unint64_t)sub_1A5BFC774((char *)(v10 > 1), v11 + 2, 1, (char *)v9);
    *(_QWORD *)(v9 + 16) = v8;
    *(_BYTE *)(v9 + v13 + 32) = 0;
    *a2 = (char *)v9;
    v14 = v11 + 1;
    if (__OFSUB__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = sub_1A5C233C8(0x30uLL, a2);
    if (v4)
      return result;
    sub_1A5BEE468(a3, (unint64_t)a4);
    sub_1A5C29738(a3, (uint64_t)a4);
    v17 = v16;
    v18 = sub_1A5BEFF90(a3, (unint64_t)a4);
    MEMORY[0x1E0C80A78](v18);
    v23[2] = v17;
    v23[3] = v19;
    v23[4] = 0;
    v23[5] = v20;
    sub_1A5C27694(3, a2, sub_1A5C28A24, (uint64_t)v23);
    swift_release();
    a4 = *a2;
    v21 = *((_QWORD *)*a2 + 2);
    v9 = v21 - v8;
    if ((uint64_t)(v21 - v8) <= 127)
      break;
    if (v21 >= v8)
    {
      v11 = 71 - __clz(v9);
      a3 = v11 >> 3;
      sub_1A5C24D08(v11 >> 3, v8, v21);
      a4 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888((uint64_t)a4);
    a4 = (char *)result;
LABEL_11:
    if (v14 >= *((_QWORD *)a4 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    v22 = a4 + 32;
    a4[v14 + 32] = (v11 >> 3) | 0x80;
    *a2 = a4;
    if (v8 < *((_QWORD *)a4 + 2))
    {
      v22[v8] = v9 >> (8 * ((a3 - 1) & 7));
      if (a3 == 1)
        goto LABEL_32;
      if (v8 + 1 < *((_QWORD *)a4 + 2))
      {
        v22[v8 + 1] = v9 >> (8 * ((a3 - 2) & 7));
        if (a3 == 2)
          goto LABEL_32;
        if (v8 + 2 < *((_QWORD *)a4 + 2))
        {
          v22[v8 + 2] = v9 >> (8 * ((a3 - 3) & 7));
          if (a3 == 3)
            goto LABEL_32;
          if (v8 + 3 < *((_QWORD *)a4 + 2))
          {
            v22[v8 + 3] = v9 >> (8 * ((a3 - 4) & 7));
            if (a3 == 4)
              goto LABEL_32;
            if (v8 + 4 < *((_QWORD *)a4 + 2))
            {
              v22[v8 + 4] = v9 >> (8 * ((a3 - 5) & 7));
              if (a3 == 5)
                goto LABEL_32;
              if (v8 + 5 < *((_QWORD *)a4 + 2))
              {
                v22[v8 + 5] = v9 >> (8 * ((a3 - 6) & 7));
                if (a3 == 6)
                  goto LABEL_32;
                if (v8 + 6 < *((_QWORD *)a4 + 2))
                {
                  v22[v8 + 6] = v9 >> (8 * ((a3 - 7) & 7));
                  if (a3 == 7)
                    goto LABEL_32;
                  if (v8 + 7 < *((_QWORD *)a4 + 2))
                  {
                    v22[v8 + 7] = v9 >> (v11 & 0x38);
LABEL_32:
                    *a2 = a4;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v9 = (unint64_t)sub_1A5BFC774(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888((uint64_t)a4);
  a4 = (char *)result;
LABEL_30:
  if (v14 < *((_QWORD *)a4 + 2))
  {
    a4[v14 + 32] = v9;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C2801C(char a1, char **a2, char *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  char *v19;
  _OWORD v20[3];
  _OWORD v21[2];
  uint64_t v22;
  _BYTE v23[32];
  uint64_t v24;

  LOBYTE(v7) = a1;
  v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v10 = *((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
    v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 1, 1, v8);
      v9 = *((_QWORD *)v8 + 3);
      v11 = v9 >> 1;
    }
    *((_QWORD *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2))
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 2, 1, v8);
    *((_QWORD *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    v14 = *((_OWORD *)a3 + 1);
    v21[0] = *(_OWORD *)a3;
    v21[1] = v14;
    v22 = *((_QWORD *)a3 + 4);
    v24 = *(_QWORD *)&v21[0];
    sub_1A5BF683C((uint64_t)v21 + 8, (uint64_t)v23, &qword_1EE800178);
    sub_1A5C1910C((uint64_t)&v24);
    sub_1A5C19134((uint64_t)v23);
    result = sub_1A5C23040(48, a2, (char *)v21);
    if (v3)
      return result;
    v8 = (char *)v21;
    *(double *)&v16 = MEMORY[0x1E0C80A78](result);
    v20[1] = v17;
    v20[2] = v16;
    sub_1A5C27694(3, a2, sub_1A5C286AC, (uint64_t)v20);
    a3 = *a2;
    v18 = *((_QWORD *)*a2 + 2);
    v10 = v18 - v7;
    if ((uint64_t)(v18 - v7) <= 127)
      break;
    if (v18 >= v7)
    {
      v4 = 71 - __clz(v10);
      v8 = (char *)(v4 >> 3);
      sub_1A5C24D08(v4 >> 3, v7, v18);
      a3 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((_QWORD *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    v19 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((_QWORD *)a3 + 2))
    {
      v19[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1)
        goto LABEL_32;
      if (v7 + 1 < *((_QWORD *)a3 + 2))
      {
        v19[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2)
          goto LABEL_32;
        if (v7 + 2 < *((_QWORD *)a3 + 2))
        {
          v19[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3)
            goto LABEL_32;
          if (v7 + 3 < *((_QWORD *)a3 + 2))
          {
            v19[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4)
              goto LABEL_32;
            if (v7 + 4 < *((_QWORD *)a3 + 2))
            {
              v19[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5)
                goto LABEL_32;
              if (v7 + 5 < *((_QWORD *)a3 + 2))
              {
                v19[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6)
                  goto LABEL_32;
                if (v7 + 6 < *((_QWORD *)a3 + 2))
                {
                  v19[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7)
                    goto LABEL_32;
                  if (v7 + 7 < *((_QWORD *)a3 + 2))
                  {
                    v19[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v8 = sub_1A5BFC774(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((_QWORD *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C283B0(char a1, char **a2, char *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  char *v16;

  LOBYTE(v7) = a1;
  v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  while (1)
  {
    v10 = *((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    v11 = v9 >> 1;
    v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 1, 1, v8);
      v9 = *((_QWORD *)v8 + 3);
      v11 = v9 >> 1;
    }
    *((_QWORD *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    v7 = v10 + 2;
    if (v11 < (uint64_t)(v10 + 2))
      v8 = sub_1A5BFC774((char *)(v9 > 1), v10 + 2, 1, v8);
    *((_QWORD *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    v13 = v10 + 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    result = sub_1A5C18F44(a2, (uint64_t)a3);
    if (v3)
      return result;
    a3 = *a2;
    v15 = *((_QWORD *)*a2 + 2);
    v10 = v15 - v7;
    if ((uint64_t)(v15 - v7) <= 127)
      break;
    if (v15 >= v7)
    {
      v4 = 71 - __clz(v10);
      v8 = (char *)(v4 >> 3);
      sub_1A5C24D08(v4 >> 3, v7, v15);
      a3 = *a2;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_11;
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    result = (uint64_t)sub_1A5C11888((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((_QWORD *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }
    v16 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((_QWORD *)a3 + 2))
    {
      v16[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v8 == (char *)1)
        goto LABEL_32;
      if (v7 + 1 < *((_QWORD *)a3 + 2))
      {
        v16[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v8 == (char *)2)
          goto LABEL_32;
        if (v7 + 2 < *((_QWORD *)a3 + 2))
        {
          v16[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v8 == (char *)3)
            goto LABEL_32;
          if (v7 + 3 < *((_QWORD *)a3 + 2))
          {
            v16[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v8 == (char *)4)
              goto LABEL_32;
            if (v7 + 4 < *((_QWORD *)a3 + 2))
            {
              v16[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v8 == (char *)5)
                goto LABEL_32;
              if (v7 + 5 < *((_QWORD *)a3 + 2))
              {
                v16[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v8 == (char *)6)
                  goto LABEL_32;
                if (v7 + 6 < *((_QWORD *)a3 + 2))
                {
                  v16[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v8 == (char *)7)
                    goto LABEL_32;
                  if (v7 + 7 < *((_QWORD *)a3 + 2))
                  {
                    v16[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    v8 = sub_1A5BFC774(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
    goto LABEL_30;
LABEL_41:
  result = (uint64_t)sub_1A5C11888((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((_QWORD *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C286AC(char **a1)
{
  uint64_t v1;

  return sub_1A5BFA8EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_1A5C286C8()
{
  unint64_t result;

  result = qword_1EE800108;
  if (!qword_1EE800108)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C4574C, &type metadata for RSAPSSSPKIErrors);
    atomic_store(result, (unint64_t *)&qword_1EE800108);
  }
  return result;
}

uint64_t sub_1A5C2870C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A5C190D8(a1, *(unint64_t **)(v1 + 16));
}

uint64_t destroy for ASN1.ASN1ParserNode()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1ParserNode(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1ParserNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1ParserNode()
{
  return &type metadata for ASN1.ASN1ParserNode;
}

ValueMetadata *type metadata accessor for ASN1.ASN1ParseResult()
{
  return &type metadata for ASN1.ASN1ParseResult;
}

ValueMetadata *type metadata accessor for ASN1.ASN1NodeCollection.Iterator()
{
  return &type metadata for ASN1.ASN1NodeCollection.Iterator;
}

uint64_t _s9CryptoKit4ASN1O18ASN1NodeCollectionVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *_s9CryptoKit4ASN1O18ASN1NodeCollectionVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t _s9CryptoKit4ASN1O18ASN1NodeCollectionVwta_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ASN1.ASN1NodeCollection()
{
  return &type metadata for ASN1.ASN1NodeCollection;
}

uint64_t sub_1A5C28A24(char **a1)
{
  return sub_1A5C286AC(a1);
}

BOOL static HPKE.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.Errors.hash(into:)()
{
  return sub_1A5C41F18();
}

uint64_t HPKE.Errors.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F18();
  return sub_1A5C41F3C();
}

unint64_t sub_1A5C28AC0()
{
  unint64_t result;

  result = qword_1EE801920;
  if (!qword_1EE801920)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for HPKE.Errors, &type metadata for HPKE.Errors);
    atomic_store(result, (unint64_t *)&qword_1EE801920);
  }
  return result;
}

uint64_t _s6ErrorsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A5C28B50 + 4 * byte_1A5C455B9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A5C28B84 + 4 * asc_1A5C455B4[v4]))();
}

uint64_t sub_1A5C28B84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C28B8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5C28B94);
  return result;
}

uint64_t sub_1A5C28BA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5C28BA8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A5C28BAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C28BB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Errors()
{
  return &type metadata for HPKE.Errors;
}

void sub_1A5C28BD0()
{
  qword_1EE805A30 = (uint64_t)&unk_1E4F75AF0;
}

void sub_1A5C28BE4()
{
  qword_1EE805A48 = (uint64_t)&unk_1E4F75A48;
}

uint64_t RSAPSSSPKI.rsaPublicKeyBytes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1A5BEE468(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t RSAPSSSPKI.rsaPublicKeyBytes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A5BEFF90(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*RSAPSSSPKI.rsaPublicKeyBytes.modify())()
{
  return nullsub_1;
}

uint64_t static RSAPSSSPKI.serialize(_:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v6;
  char *v7;

  v7 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5BEE468(a1, (unint64_t)a2);
  sub_1A5C27C90(48, &v7, a1, a2);
  sub_1A5BEFF90(a1, (unint64_t)a2);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = sub_1A5BEBFDC((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1A5C28D28(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _OWORD v8[2];
  uint64_t v9;
  _BYTE v10[56];
  _BYTE v11[56];

  if (*(_BYTE *)a1 == 48 && (*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_OWORD *)(a1 + 24);
    v8[0] = *(_OWORD *)(a1 + 8);
    v8[1] = v6;
    v9 = v5;
    swift_unknownObjectRetain_n();
    sub_1A5C29290((uint64_t)v8, 2);
    if (v1
      || (sub_1A5C20D4C((uint64_t)v10),
          sub_1A5C194FC((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0), sub_1A5C29E84((uint64_t)v10, (uint64_t)v11), v11[48] == 255))
    {
      swift_unknownObjectRelease();
      return sub_1A5C19568(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v7 = 3;
      swift_willThrow();
      sub_1A5C19568(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1A5BF6798();
    swift_allocError();
    *v3 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A5C28E6C(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v3;
  _BYTE *v5;
  _BYTE v6[56];
  _BYTE v7[56];

  if (*a1 == 48 && (a1[48] & 1) == 0)
  {
    swift_unknownObjectRetain_n();
    sub_1A5C28FAC();
    if (v1
      || (sub_1A5C20D4C((uint64_t)v6),
          sub_1A5C194FC((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0), sub_1A5C29E84((uint64_t)v6, (uint64_t)v7), v7[48] == 255))
    {
      swift_unknownObjectRelease();
      return sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v5 = 3;
      swift_willThrow();
      sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1A5BF6798();
    swift_allocError();
    *v3 = 1;
    return swift_willThrow();
  }
}

char *sub_1A5C28FAC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *result;
  char *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  char v13;
  _BYTE *v14;
  _BYTE *v15;
  _OWORD v16[2];
  uint64_t v17;
  _BYTE v18[56];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[56];
  _BYTE v27[56];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  _OWORD v33[3];
  unsigned __int8 v34;
  _OWORD v35[3];
  unsigned __int8 v36;

  sub_1A5C20D4C((uint64_t)v18);
  sub_1A5C29E84((uint64_t)v18, (uint64_t)v33);
  if (v34 == 255)
  {
    sub_1A5BF6798();
LABEL_10:
    swift_allocError();
    v13 = 3;
    goto LABEL_11;
  }
  v35[0] = v33[0];
  v35[1] = v33[1];
  v35[2] = v33[2];
  v36 = v34;
  result = sub_1A5C05560((char *)v35, 6, v1, v2);
  if (v0)
    return result;
  v4 = result;
  if (qword_1EE800128 != -1)
    swift_once();
  v5 = sub_1A5C054F4(v4, (_QWORD *)qword_1EE805A48);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    sub_1A5C286C8();
    goto LABEL_10;
  }
  sub_1A5C20D4C((uint64_t)v19);
  v6 = v20;
  v7 = v21;
  v8 = v22;
  v9 = v23;
  v10 = v24;
  v11 = v25;
  sub_1A5C29E84((uint64_t)v19, (uint64_t)v28);
  if (v32 == 255)
  {
    sub_1A5C286C8();
    swift_allocError();
    v13 = 4;
LABEL_11:
    *v12 = v13;
    return (char *)swift_willThrow();
  }
  if (v28[0] != 48 || (v32 & 1) != 0)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v14 = 1;
    swift_willThrow();
  }
  else
  {
    v16[0] = v29;
    v16[1] = v30;
    v17 = v31;
    j__swift_unknownObjectRetain(v6, v7, v8, v9, v10, v11 & 1);
    swift_unknownObjectRetain();
    sub_1A5C29290((uint64_t)v16, 5);
    sub_1A5C20D4C((uint64_t)v26);
    sub_1A5C194FC((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
    sub_1A5C29E84((uint64_t)v26, (uint64_t)v27);
    if (v27[48] == 255)
    {
      swift_unknownObjectRelease();
      sub_1A5C194FC((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v15 = 3;
      swift_willThrow();
      sub_1A5C194FC((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
      swift_unknownObjectRelease();
    }
  }
  return (char *)sub_1A5C194FC((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
}

uint64_t sub_1A5C29290(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t result;
  _QWORD *v7;
  BOOL v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE v12[56];
  _BYTE v13[56];
  _BYTE v14[56];
  _OWORD v15[3];
  unsigned __int8 v16;
  _OWORD v17[3];
  unsigned __int8 v18;

  sub_1A5C20D4C((uint64_t)v12);
  sub_1A5C29E84((uint64_t)v12, (uint64_t)v15);
  if (v16 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v10 = 3;
    return swift_willThrow();
  }
  v17[0] = v15[0];
  v17[1] = v15[1];
  v17[2] = v15[2];
  v18 = v16;
  result = (uint64_t)sub_1A5C05560((char *)v17, 6, v4, v5);
  if (v2)
    return result;
  v7 = (_QWORD *)result;
  if (qword_1EE800130 != -1)
    swift_once();
  v8 = sub_1A5C054F4(v7, (_QWORD *)qword_1EE805A50);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    sub_1A5C286C8();
    swift_allocError();
    *v11 = a2;
    return swift_willThrow();
  }
  sub_1A5C20D4C((uint64_t)v13);
  result = sub_1A5C29E84((uint64_t)v13, (uint64_t)v14);
  if (v14[48] != 255)
  {
    if (v14[0] != 5)
    {
      sub_1A5BF6798();
      swift_allocError();
      *v9 = 3;
      swift_willThrow();
    }
    return sub_1A5C194FC((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  }
  return result;
}

uint64_t RSAPSSSPKI.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE v19[8];
  uint64_t v20;
  _BYTE v21[56];
  _BYTE v22[56];
  _BYTE v23[56];
  _OWORD v24[3];
  unsigned __int8 v25;
  _OWORD v26[3];
  unsigned __int8 v27;
  _BYTE v28[48];
  __int128 v29;
  char v30;

  sub_1A5C29738(a1, a2);
  sub_1A5C274FC(v7, v7 + 32, 0, (2 * *(_QWORD *)(v7 + 16)) | 1, (uint64_t)v19);
  if (v3)
  {
    sub_1A5BEFF90(a1, a2);
    return swift_release();
  }
  swift_release();
  if (v19[0] != 48
    || (sub_1A5BFB08C((uint64_t)&v20, (uint64_t)v28), sub_1A5BFB08C((uint64_t)v28, (uint64_t)&v29), (v30 & 1) != 0))
  {
    sub_1A5BF6798();
    swift_allocError();
    *v9 = 1;
    swift_willThrow();
    sub_1A5BEFF90(a1, a2);
    return sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1A5C29B20();
  sub_1A5C20D4C((uint64_t)v21);
  sub_1A5C29E84((uint64_t)v21, (uint64_t)v24);
  if (v25 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v18 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    goto LABEL_7;
  }
  v26[0] = v24[0];
  v26[1] = v24[1];
  v26[2] = v24[2];
  v27 = v25;
  v10 = sub_1A5BFAE94((unsigned __int8 *)v26, 3u);
  v14 = sub_1A5BF9D54(v10, v11, v12, v13);
  v16 = v15;
  swift_unknownObjectRelease();
  sub_1A5C20D4C((uint64_t)v22);
  sub_1A5C194FC((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  sub_1A5C29E84((uint64_t)v22, (uint64_t)v23);
  if (v23[48] != 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v17 = 3;
    swift_willThrow();
    sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    sub_1A5BEFF90((uint64_t)v14, v16);
    swift_unknownObjectRelease();
LABEL_7:
    sub_1A5BEFF90(a1, a2);
    return sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  swift_unknownObjectRelease();
  sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  sub_1A5BEFF90(a1, a2);
  result = sub_1A5C19568((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  *a3 = v14;
  a3[1] = v16;
  return result;
}

void sub_1A5C29738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1A5C419E4();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

_QWORD *sub_1A5C297B4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A10);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_1A5BEE468(v2, v0);
    v7 = sub_1A5C41924();
    sub_1A5BEFF90(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1A5C29888);
    }
  }
  return v4;
}

uint64_t sub_1A5C298A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v10;
  _BYTE *v11;
  _OWORD v12[2];
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[56];
  _BYTE v22[56];
  _OWORD v23[3];
  unsigned __int8 v24;
  _OWORD v25[3];
  unsigned __int8 v26;
  _BYTE v27[48];
  _OWORD v28[2];
  uint64_t v29;
  char v30;

  sub_1A5C20D4C((uint64_t)v14);
  v1 = v15;
  v2 = v16;
  v3 = v17;
  v4 = v18;
  v5 = v19;
  v6 = v20;
  sub_1A5C29E84((uint64_t)v14, (uint64_t)v23);
  if (v24 == 255)
  {
    sub_1A5C286C8();
    swift_allocError();
    *v8 = 1;
    return swift_willThrow();
  }
  else
  {
    v25[0] = v23[0];
    v25[1] = v23[1];
    v25[2] = v23[2];
    v26 = v24;
    if (LOBYTE(v23[0]) == 48
      && (sub_1A5BFB08C((uint64_t)v25 + 8, (uint64_t)v27), sub_1A5BFB08C((uint64_t)v27, (uint64_t)v28), (v30 & 1) == 0))
    {
      v12[0] = v28[0];
      v12[1] = v28[1];
      v13 = v29;
      v10 = v6 & 1;
      j__swift_unknownObjectRetain(v1, v2, v3, v4, v5, v10);
      j__swift_unknownObjectRetain(v1, v2, v3, v4, v5, v10);
      sub_1A5C21470((uint64_t)v12, 0, 2);
      if (v0
        || (sub_1A5C2148C((uint64_t)v12, 1uLL, 2),
            sub_1A5C217FC((uint64_t)v12, 2uLL, 2),
            sub_1A5C20D4C((uint64_t)v21),
            sub_1A5C194FC((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0), sub_1A5C29E84((uint64_t)v21, (uint64_t)v22), v22[48] == 255))
      {
        swift_unknownObjectRelease();
        sub_1A5C194FC((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
      }
      else
      {
        sub_1A5BF6798();
        swift_allocError();
        *v11 = 3;
        swift_willThrow();
        sub_1A5C194FC((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
        swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v7 = 1;
      swift_willThrow();
    }
    return sub_1A5C194FC((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
  }
}

uint64_t sub_1A5C29B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  BOOL v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[56];
  _BYTE v26[56];
  _BYTE v27[56];
  _OWORD v28[3];
  unsigned __int8 v29;
  _OWORD v30[3];
  unsigned __int8 v31;
  _OWORD v32[3];
  unsigned __int8 v33;
  _OWORD v34[3];
  unsigned __int8 v35;
  _BYTE v36[48];
  __int128 v37;
  char v38;

  sub_1A5C20D4C((uint64_t)v18);
  v2 = v19;
  v1 = v20;
  v4 = v21;
  v3 = v22;
  v5 = v23;
  v6 = v24;
  sub_1A5C29E84((uint64_t)v18, (uint64_t)v32);
  if (v33 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v8 = 0;
    return swift_willThrow();
  }
  v34[0] = v32[0];
  v34[1] = v32[1];
  v34[2] = v32[2];
  v35 = v33;
  if (LOBYTE(v32[0]) == 48)
  {
    sub_1A5BFB08C((uint64_t)v34 + 8, (uint64_t)v36);
    sub_1A5BFB08C((uint64_t)v36, (uint64_t)&v37);
    if ((v38 & 1) == 0)
    {
      sub_1A5C20D4C((uint64_t)v25);
      sub_1A5C29E84((uint64_t)v25, (uint64_t)v28);
      if (v29 == 255)
      {
        sub_1A5BF6798();
        swift_allocError();
        *v16 = 3;
        sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
        j__swift_unknownObjectRetain(v2, v1, v4, v3, v5, v6 & 1);
      }
      else
      {
        v30[0] = v28[0];
        v30[1] = v28[1];
        v30[2] = v28[2];
        v31 = v29;
        sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5C19538);
        j__swift_unknownObjectRetain(v2, v1, v4, v3, v5, v6 & 1);
        v12 = sub_1A5C05560((char *)v30, 6, v10, v11);
        if (v0)
          goto LABEL_16;
        v13 = v12;
        if (qword_1EE800110 != -1)
          swift_once();
        v14 = sub_1A5C054F4(v13, (_QWORD *)qword_1EE805A30);
        swift_bridgeObjectRelease();
        if (v14)
        {
          sub_1A5C298A0();
          sub_1A5C20D4C((uint64_t)v26);
          sub_1A5C194FC((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
          sub_1A5C29E84((uint64_t)v26, (uint64_t)v27);
          if (v27[48] != 255)
          {
            sub_1A5BF6798();
            swift_allocError();
            *v15 = 3;
            swift_willThrow();
            sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
            swift_unknownObjectRelease();
            return sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
          }
LABEL_16:
          swift_unknownObjectRelease();
          sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
          return sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
        }
        sub_1A5C286C8();
        swift_allocError();
        *v17 = 0;
      }
      swift_willThrow();
      goto LABEL_16;
    }
  }
  sub_1A5BF6798();
  swift_allocError();
  *v7 = 1;
  swift_willThrow();
  return sub_1A5C194FC((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A5BF68E0);
}

uint64_t sub_1A5C29E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF977C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RSAPSSSPKI()
{
  return &type metadata for RSAPSSSPKI;
}

uint64_t getEnumTagSinglePayload for RSAPSSSPKIErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RSAPSSSPKIErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1A5C29FB8 + 4 * byte_1A5C456A5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1A5C29FEC + 4 * byte_1A5C456A0[v4]))();
}

uint64_t sub_1A5C29FEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C29FF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A5C29FFCLL);
  return result;
}

uint64_t sub_1A5C2A008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A5C2A010);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1A5C2A014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A5C2A01C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RSAPSSSPKIErrors()
{
  return &type metadata for RSAPSSSPKIErrors;
}

unint64_t sub_1A5C2A03C()
{
  unint64_t result;

  result = qword_1EE801928;
  if (!qword_1EE801928)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C45724, &type metadata for RSAPSSSPKIErrors);
    atomic_store(result, (unint64_t *)&qword_1EE801928);
  }
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = sub_1A5C41C00();
  *(_QWORD *)(v2 + 16) = 32;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  v5 = v2;
  v3 = sub_1A5C01BB0(0x20uLL, (uint64_t)&v5);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A5C2A594();
  *a1 = result;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C2AB78();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = sub_1A5C01410(v0);
  swift_release();
  return v1;
}

uint64_t Curve25519.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = sub_1A5C2ABE4();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t Curve25519.Signing.PublicKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1A5C41BF4();
  v1 = sub_1A5BEBFDC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

ValueMetadata *type metadata accessor for Curve25519.Signing()
{
  return &type metadata for Curve25519.Signing;
}

ValueMetadata *type metadata accessor for Curve25519.Signing.PrivateKey()
{
  return &type metadata for Curve25519.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for Curve25519.Signing.PublicKey()
{
  return &type metadata for Curve25519.Signing.PublicKey;
}

uint64_t sub_1A5C2A298@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  size_t v3;
  uint64_t v4;
  uint64_t result;

  if (!a1)
    goto LABEL_8;
  init_ccec_ctx_pub();
  swift_beginAccess();
  if (!ccrng())
    goto LABEL_9;
  if (ccec_diversify_pub_twin())
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  bzero((void *)(v4 + 32), v3);
  result = ccec_export_pub();
  if ((_DWORD)result)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  *a2 = v4;
  return result;
}

uint64_t sub_1A5C2A3D0(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t result;

  ccec_ctx_k(a3);
  if (!a1)
    goto LABEL_5;
  if (!ccrng())
    goto LABEL_6;
  result = ccec_diversify_priv_twin();
  if ((_DWORD)result)
  {
    __break(1u);
LABEL_5:
    __break(1u);
LABEL_6:
    __break(1u);
  }
  return result;
}

uint64_t ccec_ctx_k(_QWORD **a1)
{
  return (uint64_t)&a1[3 * **a1 + 2];
}

ValueMetadata *_s7ASN1AnyVMa()
{
  return &_s7ASN1AnyVN;
}

uint64_t sub_1A5C2A4C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3] >> 1;
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v0[1];
  result = sub_1A5C41F18();
  v5 = __OFSUB__(v2, v1);
  v6 = v2 - v1;
  if (!v6)
    return result;
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v7 = v4 + v1;
  do
  {
    ++v7;
    result = sub_1A5C41F24();
    --v6;
  }
  while (v6);
  return result;
}

unint64_t sub_1A5C2A530()
{
  unint64_t result;

  result = qword_1EE801930;
  if (!qword_1EE801930)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C457C8, &_s7ASN1AnyVN);
    atomic_store(result, (unint64_t *)&qword_1EE801930);
  }
  return result;
}

ValueMetadata *_s33CoreCryptoCurve25519PublicKeyImplVMa_0()
{
  return &_s33CoreCryptoCurve25519PublicKeyImplVN_0;
}

ValueMetadata *_s34CoreCryptoCurve25519PrivateKeyImplVMa_0()
{
  return &_s34CoreCryptoCurve25519PrivateKeyImplVN_0;
}

uint64_t sub_1A5C2A594()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;
  uint64_t result;

  v0 = sub_1A5C41C00();
  *(_QWORD *)(v0 + 16) = 32;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  if (ccsha512_di())
  {
    if (!cced25519_make_pub())
    {
      v1 = sub_1A5C41BF4();
      v2 = sub_1A5C2AB04(v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_1A5C2A658(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

size_t sub_1A5C2A6AC()
{
  unint64_t v0;
  size_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[6];

  v5 = v2;
  v6 = v0;
  v7 = BYTE2(v0);
  v8 = BYTE3(v0);
  v9 = BYTE4(v0);
  v10 = BYTE5(v0);
  if ((v0 & 0xFF000000000000) == 0x20000000000000)
  {
    v1 = sub_1A5BF1478((size_t)&v5, (unint64_t)v11);
    sub_1A5BEFF90(v2, v0);
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v3 = 0;
    *(_BYTE *)(v3 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v2, v0);
  }
  return v1;
}

uint64_t sub_1A5C2A920(_QWORD *a1, _QWORD *a2, char **a3)
{
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  if (!ccsha512_di())
    goto LABEL_9;
  if (!ccrng())
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (!*a1)
    goto LABEL_11;
  v6 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v6 = sub_1A5BFC774(0, *((_QWORD *)v6 + 2), 0, v6);
  *a3 = v6;
  result = cced25519_make_key_pair();
  if ((_DWORD)result)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *a2 = 32;
  return result;
}

uint64_t sub_1A5C2AA2C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!result || a2 - result != 32)
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v2 = 0;
    *(_BYTE *)(v2 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A5C2AA90@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result;
  uint64_t v5;

  if (a1 && a2 - a1 == 32)
  {
    result = sub_1A5BF1478(a1, a2);
    *a3 = result;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

size_t sub_1A5C2AB04(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16) == 32)
    return sub_1A5BF1478(a1 + 32, a1 + 64);
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_1A5C2AB78()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1A5C418D0();
  if (!v0)
    return sub_1A5BECE14();
  return result;
}

uint64_t sub_1A5C2ABE4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  result = sub_1A5C418D0();
  if (!v0)
    return v2;
  return result;
}

ValueMetadata *type metadata accessor for Curve448()
{
  return &type metadata for Curve448;
}

uint64_t SecureEnclave.Curve25519.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t AssociatedConformanceWitness;
  _QWORD v50[8];

  swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1A5C41CF0();
  v9 = MEMORY[0x1E0C80A78](v8);
  v39 = (char *)&v35 - v10;
  v36 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v37 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_checkMetadataState();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - v17;
  v19 = *v3;
  v43 = v3[1];
  v44 = v19;
  v20 = v3[2];
  v41 = v3[3];
  v42 = v20;
  v50[7] = a3;
  sub_1A5C41828();
  v38 = v7;
  v21 = sub_1A5C41C54();
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v18, v12);
  if (v21 == 1)
  {
    sub_1A5C41828();
    v23 = v39;
    sub_1A5C41C78();
    v22(v16, v12);
    v24 = AssociatedTypeWitness;
    v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, AssociatedTypeWitness);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v48 = v24;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_1A5BF9FC8(&v47, (uint64_t)v50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v37, a1, a2);
    v28 = sub_1A5C41C0C();
    v50[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    v50[4] = sub_1A5C082C0();
    v50[0] = v28;
  }
  v30 = v44;
  v29 = v45;
  v32 = v42;
  v31 = v43;
  v33 = v41;
  sub_1A5BF40E4((uint64_t)v50, (uint64_t)&v47);
  v34 = __swift_project_boxed_opaque_existential_1(&v47, v48);
  MEMORY[0x1E0C80A78](v34);
  *(&v35 - 4) = v30;
  *(&v35 - 3) = v31;
  *(&v35 - 2) = v32;
  *(&v35 - 1) = v33;
  sub_1A5C418D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (!v29)
    v34 = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  return (uint64_t)v34;
}

uint64_t sub_1A5C2B014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  v25 = a4;
  v8 = sub_1A5C4190C();
  v9 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0CB00C8], v8);
    sub_1A5C41900();
    v13 = a2 - a1;
    if (v13)
    {
      sub_1A5C418C4();
      swift_allocObject();
      swift_retain();
      v17 = sub_1A5C4187C();
      v15 = sub_1A5C2B374(v17, v13);
      v16 = v18;
      swift_release();
    }
    else
    {
      v14 = (void (*)(uint64_t, _QWORD))sub_1A5C41900();
      v14(a1, 0);
      swift_release();
      swift_release();
      v15 = 0;
      v16 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v19 = sub_1A5C2B1E0(a3);
    if (v4)
    {
      return sub_1A5BEFF90(v15, v16);
    }
    else
    {
      v21 = v19;
      v22 = v20;
      result = sub_1A5BEFF90(v15, v16);
      v23 = v25;
      *v25 = v21;
      v23[1] = v22;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C2B1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1A5C2B014(a1, a2, *(void **)(v3 + 40), a3);
}

void *sub_1A5C2B1E0(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)sub_1A5C4199C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800120);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A5C44370;
  if (!*MEMORY[0x1E0CD6E20])
    __break(1u);
  *(_QWORD *)(v3 + 32) = sub_1A5C41AD4();
  *(_QWORD *)(v3 + 40) = v4;
  v5 = (void *)sub_1A5C41BDC();
  swift_bridgeObjectRelease();
  sub_1A5C14AD8(MEMORY[0x1E0DEE9D8]);
  v6 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v7 = objc_msgSend(a1, sel_sign_algorithms_parameters_error_, v2, v5, v6, v11);

  v8 = v11[0];
  if (v7)
  {
    v9 = (void *)sub_1A5C419B4();

  }
  else
  {
    v9 = v8;
    sub_1A5C418E8();

    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1A5C2B374(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_1A5C4193C();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)sub_1A5C41894();
    if (!v4)
    {
LABEL_10:
      v5 = sub_1A5C418AC();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = sub_1A5BF0B68(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_1A5C418B8();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

ValueMetadata *_s34CoreCryptoCurve25519PrivateKeyImplVMa()
{
  return &_s34CoreCryptoCurve25519PrivateKeyImplVN;
}

ValueMetadata *_s33CoreCryptoCurve25519PublicKeyImplVMa()
{
  return &_s33CoreCryptoCurve25519PublicKeyImplVN;
}

void sub_1A5C2B478(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

size_t sub_1A5C2B4CC()
{
  unint64_t v0;
  size_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[6];

  v5 = v2;
  v6 = v0;
  v7 = BYTE2(v0);
  v8 = BYTE3(v0);
  v9 = BYTE4(v0);
  v10 = BYTE5(v0);
  if ((v0 & 0xFF000000000000) == 0x20000000000000)
  {
    v1 = sub_1A5BF1478((size_t)&v5, (unint64_t)v11);
    sub_1A5BEFF90(v2, v0);
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v3 = 0;
    *(_BYTE *)(v3 + 4) = 1;
    swift_willThrow();
    sub_1A5BEFF90(v2, v0);
  }
  return v1;
}

size_t sub_1A5C2B740()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;

  v0 = sub_1A5C41C00();
  *(_QWORD *)(v0 + 16) = 32;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  if (!ccrng())
LABEL_5:
    __break(1u);
  if (cccurve25519_make_pub_with_rng())
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = sub_1A5C41BF4();
  v2 = sub_1A5C2AB04(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1A5C2B844@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result;

  if (!ccrng())
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  if (!a1)
    goto LABEL_7;
  result = cccurve25519_with_rng();
  *a3 = result;
  return result;
}

uint64_t sub_1A5C2B8FC(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char v9;
  _BYTE v10[48];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  if (*a1 != a2)
  {
    sub_1A5BF6798();
    swift_allocError();
    v9 = 1;
LABEL_16:
    *v8 = v9;
    swift_willThrow();
    sub_1A5BF67DC((uint64_t)a1);
    return v2;
  }
  sub_1A5BFB08C((uint64_t)(a1 + 8), (uint64_t)v10);
  result = sub_1A5BFB08C((uint64_t)v10, (uint64_t)&v11);
  if ((v15 & 1) != 0)
  {
    v5 = v14 >> 1;
    if (__OFSUB__(v14 >> 1, v13))
    {
      __break(1u);
    }
    else
    {
      if ((uint64_t)((v14 >> 1) - v13) <= 0)
        goto LABEL_15;
      result = v11;
      if (v13 == v5)
      {
LABEL_12:
        sub_1A5C2C774(v11, v12, v13, v14);
        v2 = v7;
        sub_1A5BF67DC((uint64_t)a1);
        return v2;
      }
      if (v13 < v5)
      {
        if (v13 + 1 == v5)
          goto LABEL_12;
        if (v13 + 1 < v5)
        {
          v6 = *(char *)(v12 + v13 + 1);
          if (*(_BYTE *)(v12 + v13))
          {
            if (*(unsigned __int8 *)(v12 + v13) != 255 || (v6 & 0x80000000) == 0)
              goto LABEL_12;
            goto LABEL_15;
          }
          if ((v6 & 0x80000000) == 0)
          {
LABEL_15:
            sub_1A5BF6798();
            swift_allocError();
            v9 = 4;
            goto LABEL_16;
          }
          goto LABEL_12;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C2BA44(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t result;
  int64_t v4;
  int v5;
  char *v6;
  char v7;
  _BYTE v8[48];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  if (*a1 == a2)
  {
    sub_1A5BFB08C((uint64_t)(a1 + 8), (uint64_t)v8);
    result = sub_1A5BFB08C((uint64_t)v8, (uint64_t)&v9);
    if ((v13 & 1) == 0)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    v4 = v12 >> 1;
    if (__OFSUB__(v12 >> 1, v11))
    {
      __break(1u);
    }
    else
    {
      if ((uint64_t)((v12 >> 1) - v11) <= 0)
        goto LABEL_17;
      result = v9;
      if (v11 == v4)
        return result;
      if (v11 < v4)
      {
        v5 = *(unsigned __int8 *)(v10 + v11);
        if (v11 + 1 == v4)
        {
          if (!*(_BYTE *)(v10 + v11))
            return result;
LABEL_14:
          if ((v5 & 0x80) == 0)
            return result;
          goto LABEL_17;
        }
        if (v11 + 1 < v4)
        {
          if (!*(_BYTE *)(v10 + v11))
          {
            if (*(char *)(v10 + v11 + 1) < 0)
              return result;
            goto LABEL_17;
          }
          if (v5 != 255)
            goto LABEL_14;
LABEL_17:
          sub_1A5BF6798();
          swift_allocError();
          v7 = 4;
          goto LABEL_18;
        }
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_1A5BF6798();
  swift_allocError();
  v7 = 1;
LABEL_18:
  *v6 = v7;
  swift_willThrow();
  return sub_1A5BF67DC((uint64_t)a1);
}

void sub_1A5C2BB74(unsigned __int8 *a1, unsigned __int8 a2)
{
  unint64_t v3;
  int64_t v4;
  int v5;
  char *v6;
  char v7;
  _BYTE v8[48];
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char v13;

  if (*a1 != a2)
  {
    sub_1A5BF6798();
    swift_allocError();
    v7 = 1;
LABEL_18:
    *v6 = v7;
    swift_willThrow();
    sub_1A5BF67DC((uint64_t)a1);
    return;
  }
  sub_1A5BFB08C((uint64_t)(a1 + 8), (uint64_t)v8);
  sub_1A5BFB08C((uint64_t)v8, (uint64_t)&v9);
  if ((v13 & 1) != 0)
  {
    v3 = v11;
    v4 = v12 >> 1;
    if (__OFSUB__(v12 >> 1, v11))
    {
      __break(1u);
    }
    else
    {
      if ((uint64_t)((v12 >> 1) - v11) <= 0)
        goto LABEL_17;
      if (v11 == v4)
      {
LABEL_15:
        sub_1A5C2BCB4(v9, v10, v3, v12);
        return;
      }
      if (v11 < v4)
      {
        v5 = *(unsigned __int8 *)(v10 + v11);
        if (v11 + 1 == v4)
        {
          if (!*(_BYTE *)(v10 + v11))
          {
            v3 = v12 >> 1;
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        if (v11 + 1 < v4)
        {
          if (*(_BYTE *)(v10 + v11))
          {
            if (v5 != 255)
            {
LABEL_14:
              if ((v5 & 0x80) == 0)
                goto LABEL_15;
            }
          }
          else
          {
            v3 = v11 + 1;
            if (*(char *)(v10 + v11 + 1) < 0)
              goto LABEL_15;
          }
LABEL_17:
          sub_1A5BF6798();
          swift_allocError();
          v7 = 4;
          goto LABEL_18;
        }
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
}

void sub_1A5C2BCB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (v5 > 8)
    {
      sub_1A5BF6798();
      swift_allocError();
      *v6 = 3;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_24;
    v9 = sub_1A5C3A724(0, 8 * v5, 8);
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
    v11 = 0;
    v12 = 0;
    if (a3 <= v4)
      v13 = v4;
    else
      v13 = a3;
    v14 = v13 - a3;
    while (v14 > v10 - 1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v11 + 32);
      if (v16 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      {
        v15 = 0;
      }
      else
      {
        v17 = *(unsigned __int8 *)(a2 + a3 + v11);
        if ((v16 & 0x8000000000000000) != 0)
        {
          v19 = v17 >> -(char)v16;
          if (v16 <= 0xFFFFFFFFFFFFFFC0)
            v15 = 0;
          else
            v15 = v19;
        }
        else
        {
          v18 = v17 << v16;
          if (v16 >= 0x40)
            v15 = 0;
          else
            v15 = v18;
        }
      }
      ++v11;
      v12 |= v15;
      if (v10 == v11)
        goto LABEL_21;
    }
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void sub_1A5C2BE18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1A5C2BCB4(a1, a2, a3, a4);
}

uint64_t sub_1A5C2BE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[56];
  _BYTE v21[56];
  _OWORD v22[6];
  uint64_t v23;
  _OWORD v24[3];
  unsigned __int8 v25;
  _OWORD v26[3];
  unsigned __int8 v27;
  _OWORD v28[3];
  unsigned __int8 v29;
  _OWORD v30[3];
  unsigned __int8 v31;
  _BYTE v32[48];
  _QWORD v33[5];
  char v34;

  sub_1A5C20D4C((uint64_t)v20);
  sub_1A5BF683C((uint64_t)v20, (uint64_t)v28, &qword_1ECF977C0);
  if (v29 == 255)
    goto LABEL_8;
  v30[0] = v28[0];
  v30[1] = v28[1];
  v30[2] = v28[2];
  v31 = v29;
  result = sub_1A5C2B8FC((unsigned __int8 *)v30, 2u);
  if (v2)
    return result;
  if (result != 1
    || (sub_1A5C20D4C((uint64_t)v21), sub_1A5BF683C((uint64_t)v21, (uint64_t)v24, &qword_1ECF977C0), v25 == 255))
  {
LABEL_8:
    sub_1A5BF6798();
    swift_allocError();
    *v12 = 3;
    return swift_willThrow();
  }
  else
  {
    v26[0] = v24[0];
    v26[1] = v24[1];
    v26[2] = v24[2];
    v27 = v25;
    if (LOBYTE(v24[0]) == 4)
    {
      sub_1A5BFB08C((uint64_t)v26 + 8, (uint64_t)v32);
      result = sub_1A5BFB08C((uint64_t)v32, (uint64_t)v33);
      if ((v34 & 1) != 0)
      {
        v6 = v33[0];
        v7 = v33[1];
        v8 = v33[2];
        v9 = v33[3];
        v10 = (_QWORD *)sub_1A5C21BD8(a1, 0, 2);
        v11 = sub_1A5C21F1C(a1, 1uLL, 2);
        result = sub_1A5C2C8F8(v6, v7, v8, v9, v10, v11, v14, v15, (uint64_t *)v22, v16);
        v17 = v22[5];
        *(_OWORD *)(a2 + 64) = v22[4];
        *(_OWORD *)(a2 + 80) = v17;
        *(_QWORD *)(a2 + 96) = v23;
        v18 = v22[1];
        *(_OWORD *)a2 = v22[0];
        *(_OWORD *)(a2 + 16) = v18;
        v19 = v22[3];
        *(_OWORD *)(a2 + 32) = v22[2];
        *(_OWORD *)(a2 + 48) = v19;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v13 = 1;
      swift_willThrow();
      return sub_1A5BF68A8((uint64_t)v21);
    }
  }
  return result;
}

uint64_t sub_1A5C2C06C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE *v9;

  v5 = *a1;
  if (qword_1EE800170 != -1)
    swift_once();
  if (sub_1A5C054F4((_QWORD *)qword_1EE805A40, v5))
  {
    if (qword_1EE800118 != -1)
      swift_once();
    v6 = &qword_1EE805A58;
LABEL_19:
    *(_QWORD *)a3 = *v6;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v6 + 1);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v6 + 3);
    swift_unknownObjectRetain();
    return sub_1A5C41BF4();
  }
  if (qword_1EE800FE0 != -1)
    swift_once();
  if (sub_1A5C054F4((_QWORD *)qword_1EE805AE0, v5))
  {
    if (qword_1EE800FC8 != -1)
      swift_once();
    v6 = &qword_1EE805A90;
    goto LABEL_19;
  }
  if (qword_1EE800FE8 != -1)
    swift_once();
  if (sub_1A5C054F4((_QWORD *)qword_1EE805AE8, v5))
  {
    if (qword_1EE800FD0 != -1)
      swift_once();
    v6 = &qword_1EE805AB8;
    goto LABEL_19;
  }
  sub_1A5BF6798();
  v8 = swift_allocError();
  *v9 = 3;
  result = swift_willThrow();
  *a2 = v8;
  return result;
}

uint64_t sub_1A5C2C250(char **a1, uint64_t a2)
{
  uint64_t v2;
  char **v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BYTE *v27;
  uint64_t result;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  _OWORD *v33;
  char **v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD v37[3];
  _QWORD v38[4];
  _OWORD v39[2];
  _BYTE v40[32];
  uint64_t v41[5];
  _QWORD v42[5];
  _OWORD v43[2];
  _QWORD v44[3];
  uint64_t v45;

  v4 = a1;
  *(_QWORD *)&v39[0] = 1;
  v38[2] = v39;
  sub_1A5C27378(2, a1, (uint64_t (*)(char **))sub_1A5C2870C, (uint64_t)v38);
  v5 = *(_OWORD *)(a2 + 56);
  v37[1] = *(_OWORD *)(a2 + 40);
  v37[2] = v5;
  sub_1A5C27378(4, v4, (uint64_t (*)(char **))sub_1A5C19454, (uint64_t)v37);
  v6 = v2;
  sub_1A5BF683C(a2, (uint64_t)v41, &qword_1EE801938);
  sub_1A5BF683C((uint64_t)v41, (uint64_t)v42, &qword_1EE801938);
  v7 = (_QWORD *)v42[0];
  if (v42[0])
  {
    v34 = v4;
    v8 = v42[1];
    v45 = v42[2];
    v35 = v42[4];
    v36 = v42[3];
    v44[0] = v42[0];
    sub_1A5C2CCA4(v41);
    sub_1A5C1910C((uint64_t)v44);
    v9 = qword_1EE800118;
    swift_unknownObjectRetain();
    if (v9 != -1)
      swift_once();
    v10 = unk_1EE805A60;
    v12 = *((_QWORD *)&xmmword_1EE805A68 + 1);
    v11 = xmmword_1EE805A68;
    v13 = qword_1EE805A78;
    if (sub_1A5C054F4((_QWORD *)qword_1EE805A58, v7))
    {
      if (v10)
      {
        if (v8)
        {
          v14 = sub_1A5BFAB10(v11, v12, v13, v45, v36, v35);
          sub_1A5BF6814((uint64_t)v44);
          swift_unknownObjectRelease();
          if ((v14 & 1) != 0)
            goto LABEL_31;
LABEL_11:
          sub_1A5C1910C((uint64_t)v44);
          v15 = qword_1EE800FC8;
          swift_unknownObjectRetain();
          if (v15 != -1)
            swift_once();
          v16 = *(_QWORD *)algn_1EE805A98;
          v18 = *((_QWORD *)&xmmword_1EE805AA0 + 1);
          v17 = xmmword_1EE805AA0;
          v19 = qword_1EE805AB0;
          if (sub_1A5C054F4((_QWORD *)qword_1EE805A90, v7))
          {
            if (v16)
            {
              if (v8)
              {
                v20 = sub_1A5BFAB10(v17, v18, v19, v45, v36, v35);
                sub_1A5BF6814((uint64_t)v44);
                swift_unknownObjectRelease();
                if ((v20 & 1) != 0)
                  goto LABEL_35;
LABEL_20:
                sub_1A5C1910C((uint64_t)v44);
                v21 = qword_1EE800FD0;
                swift_unknownObjectRetain();
                if (v21 != -1)
                  swift_once();
                v22 = unk_1EE805AC0;
                v24 = *((_QWORD *)&xmmword_1EE805AC8 + 1);
                v23 = xmmword_1EE805AC8;
                v25 = qword_1EE805AD8;
                if (sub_1A5C054F4((_QWORD *)qword_1EE805AB8, v7))
                {
                  if (v22)
                  {
                    if (v8)
                    {
                      v26 = sub_1A5BFAB10(v23, v24, v25, v45, v36, v35);
                      sub_1A5BF6814((uint64_t)v44);
                      swift_unknownObjectRelease();
                      if ((v26 & 1) != 0)
                        goto LABEL_39;
LABEL_29:
                      sub_1A5BF6798();
                      swift_allocError();
                      *v27 = 3;
                      swift_willThrow();
                      sub_1A5BF6814((uint64_t)v44);
                      return swift_unknownObjectRelease();
                    }
                  }
                  else if (!v8)
                  {
                    sub_1A5BF6814((uint64_t)v44);
LABEL_39:
                    if (qword_1EE800FE8 != -1)
                      swift_once();
                    v29 = &qword_1EE805AE8;
                    goto LABEL_42;
                  }
                }
                sub_1A5BF6814((uint64_t)v44);
                swift_unknownObjectRelease();
                goto LABEL_29;
              }
            }
            else if (!v8)
            {
              sub_1A5BF6814((uint64_t)v44);
LABEL_35:
              if (qword_1EE800FE0 != -1)
                swift_once();
              v29 = &qword_1EE805AE0;
LABEL_42:
              v4 = v34;
              goto LABEL_43;
            }
          }
          sub_1A5BF6814((uint64_t)v44);
          swift_unknownObjectRelease();
          goto LABEL_20;
        }
      }
      else if (!v8)
      {
        sub_1A5BF6814((uint64_t)v44);
LABEL_31:
        v4 = v34;
        if (qword_1EE800170 != -1)
          swift_once();
        v29 = &qword_1EE805A40;
LABEL_43:
        v30 = *v29;
        v31 = sub_1A5C41BF4();
        *(_QWORD *)&v39[0] = v30;
        MEMORY[0x1E0C80A78](v31);
        v33 = v39;
        sub_1A5C27378(160, v4, sub_1A5C2CCD4, (uint64_t)v32);
        sub_1A5BF6814((uint64_t)v44);
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease();
        if (v6)
          return result;
        goto LABEL_44;
      }
    }
    sub_1A5BF6814((uint64_t)v44);
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
LABEL_44:
  sub_1A5BF683C(a2 + 72, (uint64_t)v40, &qword_1EE801940);
  result = sub_1A5BF683C((uint64_t)v40, (uint64_t)v43, &qword_1EE801940);
  if (*(_QWORD *)&v43[0])
  {
    v39[0] = v43[0];
    v39[1] = v43[1];
    MEMORY[0x1E0C80A78](result);
    v33 = v39;
    return sub_1A5C27378(161, v4, sub_1A5C2C730, (uint64_t)v32);
  }
  return result;
}

uint64_t sub_1A5C2C730(char **a1)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD v4[3];

  v2 = *(_OWORD **)(v1 + 16);
  v4[1] = *v2;
  v4[2] = v2[1];
  return sub_1A5C27378(3, a1, sub_1A5C286AC, (uint64_t)v4);
}

void sub_1A5C2C774(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;

  v8 = swift_unknownObjectRetain();
  sub_1A5C2BCB4(v8, a2, a3, a4);
  if (!v4 && a4 >> 1 != a3 && (uint64_t)(a4 >> 1) <= a3)
    __break(1u);
}

uint64_t sub_1A5C2C8F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v14;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD *v31;

  v14 = a5;
  if (a5)
  {
    v31 = a5;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1A5C2C06C(&v31, &v29, (uint64_t)v30);
    if (v10)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1A5C19428(0);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    v24 = a3;
    v25 = a4;
    v26 = a7;
    v27 = a8;
    swift_bridgeObjectRelease();
    v23 = v30[0];
    v22 = v30[1];
    v21 = v30[2];
    v20 = v30[3];
    v14 = (_QWORD *)v30[4];
  }
  else
  {
    v24 = a3;
    v25 = a4;
    v26 = a7;
    v27 = a8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  sub_1A5C193A8(v23);
  sub_1A5C193A8(v23);
  sub_1A5C19428(v23);
  sub_1A5C19428(v23);
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  *a9 = v23;
  a9[1] = v22;
  a9[2] = v21;
  a9[3] = v20;
  a9[4] = (uint64_t)v14;
  a9[5] = a1;
  a9[6] = a2;
  a9[7] = v24;
  a9[8] = v25;
  a9[9] = a6;
  a9[10] = v26;
  a9[11] = v27;
  a9[12] = a10;
  return result;
}

uint64_t sub_1A5C2CAD4@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  _BYTE v25[56];
  _BYTE v26[56];

  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v6 = 1;
    swift_willThrow();
LABEL_4:
    sub_1A5BF67DC((uint64_t)a1);
    return sub_1A5C19428(0);
  }
  v8 = *((_QWORD *)a1 + 5);
  v9 = *(_OWORD *)(a1 + 24);
  v23[0] = *(_OWORD *)(a1 + 8);
  v23[1] = v9;
  v24 = v8;
  swift_unknownObjectRetain_n();
  sub_1A5C2BE2C((uint64_t)v23, (uint64_t)v17);
  if (v3)
  {
    swift_unknownObjectRelease();
    sub_1A5BF67DC((uint64_t)a1);
    goto LABEL_4;
  }
  sub_1A5C20D4C((uint64_t)v25);
  sub_1A5BF68A8((uint64_t)v25);
  sub_1A5BF683C((uint64_t)v25, (uint64_t)v26, &qword_1ECF977C0);
  if (v26[48] != 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v10 = 3;
    swift_willThrow();
    sub_1A5BF67DC((uint64_t)a1);
    sub_1A5C19428(*(uint64_t *)&v17[0]);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_4;
  }
  swift_unknownObjectRelease();
  sub_1A5BF67DC((uint64_t)a1);
  result = sub_1A5BF67DC((uint64_t)a1);
  v11 = v18;
  v12 = v19;
  v13 = v17[1];
  v14 = v20;
  v15 = v21;
  v16 = v22;
  *(_OWORD *)a3 = v17[0];
  *(_OWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 32) = v11;
  *(_OWORD *)(a3 + 40) = v12;
  *(_OWORD *)(a3 + 56) = v14;
  *(_OWORD *)(a3 + 72) = v15;
  *(_OWORD *)(a3 + 88) = v16;
  return result;
}

uint64_t *sub_1A5C2CCA4(uint64_t *a1)
{
  sub_1A5C193A8(*a1);
  return a1;
}

uint64_t sub_1A5C2CCD4(char **a1)
{
  uint64_t v1;
  _QWORD v3[4];

  v3[2] = **(_QWORD **)(v1 + 16);
  return sub_1A5C27378(6, a1, (uint64_t (*)(char **))sub_1A5BF64EC, (uint64_t)v3);
}

uint64_t sub_1A5C2CD10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t result;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swift_stdlib_malloc_size((const void *)v1) - 32;
  result = swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = __OFSUB__(v7, v3);
  v9 = v7 - v3;
  if (v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v10 = _swift_stdlib_malloc_size((const void *)v1);
  result = (uint64_t)sub_1A5C2D6C0((char *)(v1 + 32), v1 + v10, v6, a1);
  v11 = *(_QWORD *)(v1 + 16);
  v8 = __OFADD__(v11, v3);
  v12 = v11 + v3;
  if (!v8)
  {
    *(_QWORD *)(v1 + 16) = v12;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

size_t sub_1A5C2CDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  size_t v10;
  size_t result;
  int64_t v12;
  size_t v13;
  BOOL v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = sub_1A5C10970(a1, a2, a3, a4);
  v10 = _swift_stdlib_malloc_size(v4) - 32;
  result = swift_beginAccess();
  v12 = v4[2];
  v13 = v10 - v12;
  if (__OFSUB__(v10, v12))
  {
    __break(1u);
    goto LABEL_8;
  }
  v14 = __OFSUB__(v13, v9);
  v15 = v13 - v9;
  if (v14)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A5C2D740(a1, a2, a3, a4, (uint64_t)v4 + v12 + 32);
  v16 = v4[2];
  v14 = __OFADD__(v16, v9);
  v17 = v16 + v9;
  if (!v14)
  {
    v4[2] = v17;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1A5C2CEC8(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  size_t v4;
  uint64_t *v5;
  size_t result;
  int64_t v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = _swift_stdlib_malloc_size(v2) - 32;
  v5 = v2 + 2;
  result = swift_beginAccess();
  v7 = v2[2];
  v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((_BYTE *)v2 + v7 + 32) = a1;
  v11 = *v5 + 1;
  if (!__OFADD__(*v5, 1))
  {
    result = swift_beginAccess();
    *v5 = v11;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

size_t sub_1A5C2CF90(const void *a1, size_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  size_t v6;
  _QWORD *v7;
  size_t result;
  int64_t v9;
  size_t v10;
  BOOL v11;
  size_t v12;

  v3 = v2;
  v6 = _swift_stdlib_malloc_size(v2) - 32;
  v7 = v2 + 2;
  result = swift_beginAccess();
  v9 = v3[2];
  v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_11;
  }
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v9)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a1)
    goto LABEL_8;
  if ((a2 & 0x8000000000000000) == 0)
  {
    result = (size_t)memmove((char *)v3 + v9 + 32, a1, a2);
LABEL_8:
    if (!__OFADD__(*v7, a2))
    {
      *v7 += a2;
      return result;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1A5C2D060(int64_t a1, int64_t a2, size_t a3)
{
  const void **v3;
  const void **v4;
  _QWORD *v8;
  uint64_t result;
  int64_t v10;
  BOOL v11;
  int64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  const void *v18;
  char *v19;
  uint64_t v20;

  v4 = v3;
  v8 = (char *)*v3 + 16;
  result = swift_beginAccess();
  v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v11 = __OFSUB__(*v8, v10);
  v12 = *v8 - v10;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v4);
    if (result - 32 >= v13)
    {
      if (a2 >= a1)
        return sub_1A5C2D3A4(a1, a2, a3);
      goto LABEL_26;
    }
  }
  if (v13 < 0)
    goto LABEL_22;
  if (HIDWORD(v13))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v13)
  {
    v14 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
    v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    v16 = v15 | HIWORD(v15);
    if (v16 == -1)
      v17 = 0xFFFFFFFFLL;
    else
      v17 = (v16 + 1);
  }
  else
  {
    v17 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v17;
  if (a1 < 0)
    goto LABEL_24;
  v18 = (const void *)result;
  v19 = (char *)*v4;
  result = swift_beginAccess();
  v20 = *((_QWORD *)v19 + 2);
  if (v20 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1A5BFEB14(v19, 0, a1);
  sub_1A5C2CEC8(a3);
  sub_1A5BFEB14((char *)*v4, a2, v20);
  *v4 = v18;
  return swift_release();
}

uint64_t sub_1A5C2D1FC(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  const void **v4;
  const void **v5;
  _QWORD *v10;
  uint64_t result;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  uint64_t v22;

  v5 = v4;
  v10 = (char *)*v4 + 16;
  result = swift_beginAccess();
  v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = __OFSUB__(*v10, v12);
  v14 = *v10 - v12;
  if (v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = v14 + a4;
  if (__OFADD__(v14, a4))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1)
        return sub_1A5C2D4A0(a1, a2, a3, a4);
      goto LABEL_26;
    }
  }
  if (v15 < 0)
    goto LABEL_22;
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((_DWORD)v15)
  {
    v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    v18 = v17 | HIWORD(v17);
    if (v18 == -1)
      v19 = 0xFFFFFFFFLL;
    else
      v19 = (v18 + 1);
  }
  else
  {
    v19 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v19;
  if (a1 < 0)
    goto LABEL_24;
  v20 = (const void *)result;
  v21 = (char *)*v5;
  result = swift_beginAccess();
  v22 = *((_QWORD *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  sub_1A5BFEB14(v21, 0, a1);
  sub_1A5C2CF90(a3, a4);
  sub_1A5BFEB14((char *)*v5, a2, v22);
  *v5 = v20;
  return swift_release();
}

size_t sub_1A5C2D3A4(int64_t a1, int64_t a2, size_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  size_t result;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = v3 + 2;
  result = swift_beginAccess();
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v10 = v3[2];
  v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = __OFSUB__(1, v9);
  v14 = 1 - v9;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1A5C002A4(a2, v10, v14);
  result = sub_1A5C2D5A8(a3, a1);
  v15 = v3[2];
  v16 = v15 + v14;
  if (!__OFADD__(v15, v14))
  {
    result = swift_beginAccess();
    *v7 = v16;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1A5C2D4A0(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  _QWORD *v4;
  _QWORD *v9;
  size_t result;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = v4 + 2;
  result = swift_beginAccess();
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v12 = v4[2];
  v13 = v12 - v11;
  if (__OFSUB__(v12, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v15 = __OFSUB__(a4, v11);
  v16 = a4 - v11;
  if (v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1A5C002A4(a2, v12, v16);
  result = (size_t)sub_1A5C2D618(a3, a4, a1);
  v17 = v4[2];
  v18 = v17 + v16;
  if (!__OFADD__(v17, v16))
  {
    result = swift_beginAccess();
    *v9 = v18;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

size_t sub_1A5C2D5A8(size_t result, int64_t a2)
{
  const void *v2;
  int64_t v4;
  char v5;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v5 = result;
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 >= a2)
  {
    result = _swift_stdlib_malloc_size(v2);
    *((_BYTE *)v2 + a2 + 32) = v5;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void *sub_1A5C2D618(void *result, size_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  const void *v8;

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = v3;
  v8 = result;
  result = (void *)_swift_stdlib_malloc_size(v7);
  if ((uint64_t)result - 32 < v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 < a3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  result = (void *)_swift_stdlib_malloc_size(v7);
  if (v8)
  {
    if ((a2 & 0x8000000000000000) == 0)
      return memmove(&v7[a3 + 32], v8, a2);
    goto LABEL_13;
  }
  return result;
}

char *sub_1A5C2D6C0(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;

  if (result)
  {
    if (a2 - (uint64_t)result >= a3)
    {
      v5 = &result[a3];
      swift_beginAccess();
      return (char *)memmove(v5, (const void *)(a4 + 32), *(_QWORD *)(a4 + 16));
    }
    __break(1u);
    goto LABEL_7;
  }
  if (a3 > 0)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t sub_1A5C2D740(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[8];

  v11[4] = result;
  v11[5] = a2;
  v11[6] = a3;
  v11[7] = a4;
  if (a5)
  {
    v11[0] = MEMORY[0x1E0C80A78](result);
    v11[1] = v5;
    v11[2] = v8;
    v11[3] = v6;
    if (v8)
    {
      v9 = v6 - v7;
      v10 = v7;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    return sub_1A5C2FA04(v10, v9, v11, (uint64_t (*)(uint64_t, uint64_t))sub_1A5C2FF88);
  }
  return result;
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C2DB00(a1, a2, MEMORY[0x1E0C82180], sub_1A5C2D820, a3);
}

uint64_t sub_1A5C2D820(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_1A5C2DBBC(a1, a2, v2[4], v2[5], v2[2], v2[3], MEMORY[0x1E0C82180]);
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  return sub_1A5C2DE80(MEMORY[0x1E0C82180]);
}

void Kyber768.PublicKey.encapsulate()(uint64_t a1@<X8>)
{
  sub_1A5C2DF78(MEMORY[0x1E0C82180], a1);
}

void sub_1A5C2D8E8(uint64_t a1@<X8>)
{
  Kyber768.PublicKey.encapsulate()(a1);
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_1A5C2E1A8(a1, a2, a3, MEMORY[0x1E0C82180], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C2FAB4, a4);
}

uint64_t Kyber768.PrivateKey.dataRepresentation.getter()
{
  return sub_1A5C2E4A0(MEMORY[0x1E0C82180]);
}

uint64_t static Kyber768.PrivateKey.generate()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C2E5C8(MEMORY[0x1E0C82180], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A5C01DC0, a1);
}

void Kyber768.PrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2)
{
  sub_1A5C2E6CC(a1, a2, MEMORY[0x1E0C82180]);
}

uint64_t Kyber768.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C2EB3C(MEMORY[0x1E0C82180], sub_1A5C2FAD8, a1);
}

uint64_t sub_1A5C2DA6C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C2ED10(MEMORY[0x1E0C82180], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A5C01DC0, a1);
}

void sub_1A5C2DAC4(uint64_t a1, uint64_t a2)
{
  Kyber768.PrivateKey.decapsulate(_:)(a1, a2);
}

uint64_t Kyber1024.PublicKey.init<A>(dataRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C2DB00(a1, a2, MEMORY[0x1E0C82178], sub_1A5C2FAF4, a3);
}

uint64_t sub_1A5C2DB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(_QWORD *, uint64_t *)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a3();
  if (result)
  {
    v11 = cckem_sizeof_pub_ctx();
    v13 = MEMORY[0x1E0C80A78](v11);
    v12 = sub_1A5BEBD48(v13, a4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    if (!v5)
      *a5 = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C2DBBC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (result)
    return sub_1A5C2DCCC(result, a3, a2, a4, a5, a6, &v8, a7);
  __break(1u);
  return result;
}

uint64_t sub_1A5C2DC08(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;

  result = a5();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v9 = cckem_pub_ctx_init();
  result = ((uint64_t (*)(uint64_t))a5)(v9);
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    v10 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v11 = v10;
    *(_BYTE *)(v11 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    *a3 = a4;
  }
  return result;
}

uint64_t sub_1A5C2DCCC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t (*a8)(void))
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;

  result = a8();
  if (result)
  {
    v12 = cckem_pub_ctx_init();
    MEMORY[0x1E0C80A78](v12);
    result = sub_1A5C418D0();
    if (v8)
      *a7 = v8;
    else
      *a3 = a4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C2DDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  int v6;
  uint64_t v7;

  result = a4();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    v6 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v7 = v6;
    *(_BYTE *)(v7 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t Kyber1024.PublicKey.dataRepresentation.getter()
{
  return sub_1A5C2DE80(MEMORY[0x1E0C82178]);
}

uint64_t sub_1A5C2DE80(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  if (!a1())
    __break(1u);
  v1 = cckem_pubkey_nbytes_info();
  v4[0] = sub_1A5BED678(v1);
  v4[1] = v2;
  sub_1A5BED714((uint64_t)v4);
  sub_1A5C2EDDC((uint64_t)v4);
  return v4[0];
}

void Kyber1024.PublicKey.encapsulate()(uint64_t a1@<X8>)
{
  sub_1A5C2DF78(MEMORY[0x1E0C82178], a1);
}

void sub_1A5C2DF78(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  if (!ccrng())
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (!a1())
    goto LABEL_19;
  v5 = cckem_shared_key_nbytes_info();
  if (qword_1ECF977F0 != -1)
    swift_once();
  v6 = off_1ECF977E8;
  *(_QWORD *)&v12 = off_1ECF977E8;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      swift_retain();
      do
      {
        swift_beginAccess();
        v7 = sub_1A5C2D060(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 16), 0);
        --v5;
      }
      while (v5);
      v6 = (void *)v12;
      if (((uint64_t (*)(uint64_t))a1)(v7))
        goto LABEL_10;
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_18;
  }
  v11 = swift_retain();
  if (!((uint64_t (*)(uint64_t))a1)(v11))
    goto LABEL_15;
LABEL_10:
  v8 = cckem_encapsulated_key_nbytes_info();
  *(_QWORD *)&v12 = sub_1A5BED678(v8);
  *((_QWORD *)&v12 + 1) = v9;
  sub_1A5BED714((uint64_t)&v12);
  v13 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = sub_1A5C0FFD4((uint64_t)v6);
    swift_release();
    v6 = (void *)v10;
  }
  swift_beginAccess();
  sub_1A5C2F0C0((uint64_t)&v13);
  if (v2)
  {
    swift_release();
    sub_1A5BEFF90(v13, *((unint64_t *)&v13 + 1));
    return;
  }
LABEL_16:
  *(_QWORD *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v13;
}

void sub_1A5C2E170(uint64_t a1@<X8>)
{
  Kyber1024.PublicKey.encapsulate()(a1);
}

uint64_t Kyber1024.PrivateKey.init<A>(bytes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_1A5C2E1A8(a1, a2, a3, MEMORY[0x1E0C82178], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C2FB20, a4);
}

uint64_t sub_1A5C2E1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(_QWORD *, uint64_t *)@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[5];
  unint64_t v16;

  result = a4();
  if (result)
  {
    v13 = cckem_sizeof_full_ctx();
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a1;
    v16 = MEMORY[0x1E0C80A78](v13);
    v14 = sub_1A5BEC704(v16, a5, (uint64_t)v15);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    if (!v6)
      *a6 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1A5C2E264(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (*result)
  {
    result = (_QWORD *)sub_1A5C418D0();
    if (!v4)
      *a2 = a4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C2E2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;

  if (!a4())
    goto LABEL_18;
  v7 = cckem_privkey_nbytes_info();
  if (!a4())
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = cckem_pubkey_nbytes_info();
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!a1)
  {
    if (v9)
      goto LABEL_10;
LABEL_20:
    result = a4();
    if (result)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 != a2 - a1)
  {
LABEL_10:
    sub_1A5BF5E74();
    swift_allocError();
    v14 = 1;
    *(_DWORD *)v13 = 1;
    goto LABEL_11;
  }
  result = a4();
  if (!result)
    goto LABEL_21;
  v11 = cckem_import_privkey();
  if (v11)
  {
    v12 = v11;
    sub_1A5BF5E74();
    swift_allocError();
    v14 = 0;
    *(_DWORD *)v13 = v12;
LABEL_11:
    *(_BYTE *)(v13 + 4) = v14;
    return swift_willThrow();
  }
  result = cckem_public_ctx();
  if (!result)
    goto LABEL_23;
  result = a4();
  if (!result)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    v15 = result;
    sub_1A5BF5E74();
    swift_allocError();
    v14 = 0;
    *(_DWORD *)v13 = v15;
    goto LABEL_11;
  }
  return result;
}

uint64_t Kyber1024.PrivateKey.dataRepresentation.getter()
{
  return sub_1A5C2E4A0(MEMORY[0x1E0C82178]);
}

uint64_t sub_1A5C2E4A0(uint64_t (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (!a1())
    goto LABEL_6;
  v2 = cckem_privkey_nbytes_info();
  if (!a1())
    goto LABEL_7;
  v3 = cckem_pubkey_nbytes_info();
  if (__OFADD__(v2, v3))
  {
    __break(1u);
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  v6[0] = sub_1A5BED678(v2 + v3);
  v6[1] = v4;
  sub_1A5BED714((uint64_t)v6);
  sub_1A5C2F3C8((uint64_t)v6);
  return v6[0];
}

uint64_t static Kyber1024.PrivateKey.generate()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C2E5C8(MEMORY[0x1E0C82178], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A5C01DDC, a1);
}

uint64_t sub_1A5C2E5C8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = ccrng();
  if (!v6)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  if (!a1())
    goto LABEL_5;
  v8 = cckem_sizeof_full_ctx();
  result = a2(v8, v7, v8);
  *a3 = result;
  return result;
}

void Kyber1024.PrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2)
{
  sub_1A5C2E6CC(a1, a2, MEMORY[0x1E0C82178]);
}

void sub_1A5C2E6CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  if (a3())
  {
    v4 = cckem_shared_key_nbytes_info();
    if (qword_1ECF977F0 != -1)
      swift_once();
    v5 = off_1ECF977E8;
    v6 = off_1ECF977E8;
    if (v4)
    {
      if (v4 < 0)
      {
        __break(1u);
        JUMPOUT(0x1A5C2EAB0);
      }
      swift_retain();
      do
      {
        swift_beginAccess();
        sub_1A5C2D060(v6[2], v6[2], 0);
        --v4;
      }
      while (v4);
      v5 = v6;
    }
    else
    {
      swift_retain();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1A5C0FFD4((uint64_t)v5);
      swift_release();
    }
    swift_beginAccess();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1A5C2EAC4);
}

uint64_t Kyber1024.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C2EB3C(MEMORY[0x1E0C82178], sub_1A5C2FB44, a1);
}

uint64_t sub_1A5C2EB3C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(_QWORD *, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  if (!a1())
    goto LABEL_12;
  v6 = cckem_sizeof_pub_ctx();
  if (v6 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v7 = v6;
  if (v6)
  {
    v8 = sub_1A5C41C00();
    *(_QWORD *)(v8 + 16) = v7;
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
  }
  if (!cckem_public_ctx())
    goto LABEL_13;
  if (cckem_export_pubkey())
    goto LABEL_11;
  *(_QWORD *)(v8 + 16) = v7;
  if (!a1())
    goto LABEL_14;
  v9 = cckem_sizeof_pub_ctx();
  v12 = MEMORY[0x1E0C80A78](v9);
  v10 = sub_1A5BEBD48(v12, a2);
  result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_1A5C2ECB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C2ED10(MEMORY[0x1E0C82178], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1A5C01DDC, a1);
}

uint64_t sub_1A5C2ED10@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = ccrng();
  if (!v6)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  if (!a1())
    goto LABEL_5;
  v8 = cckem_sizeof_full_ctx();
  result = a2(v8, v7, v8);
  *a3 = result;
  return result;
}

void sub_1A5C2EDC4(uint64_t a1, uint64_t a2)
{
  Kyber1024.PrivateKey.decapsulate(_:)(a1, a2);
}

void sub_1A5C2EDDC(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A5C2EE3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  v5 = BYTE4(a1);
  v6 = BYTE5(a1);
  v7 = BYTE6(a1);
  result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x1A5C2F088);
  }
  *v2 = v1;
  v2[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

void sub_1A5C2F0C0(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1A5C2F128()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v1;
  LOWORD(v8) = v0;
  BYTE2(v8) = BYTE2(v0);
  HIBYTE(v8) = BYTE3(v0);
  v9 = BYTE4(v0);
  v10 = BYTE5(v0);
  v11 = BYTE6(v0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x1A5C2F3ACLL);
  }
  result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    v5 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v6 = v5;
    *(_BYTE *)(v6 + 4) = 0;
    result = swift_willThrow();
  }
  *v2 = v7;
  v2[1] = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  return result;
}

void sub_1A5C2F3C8(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1A5C2F42C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = v0;
  BYTE2(v7) = BYTE2(v0);
  HIBYTE(v7) = BYTE3(v0);
  v8 = BYTE4(v0);
  v9 = BYTE5(v0);
  v10 = BYTE6(v0);
  if (cckem_export_privkey())
  {
    __break(1u);
    JUMPOUT(0x1A5C2F65CLL);
  }
  if (__OFSUB__(v4, *v3))
  {
    __break(1u);
    JUMPOUT(0x1A5C2F668);
  }
  if (!cckem_public_ctx())
  {
    __break(1u);
    JUMPOUT(0x1A5C2F688);
  }
  result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x1A5C2F674);
  }
  *v2 = v6;
  v2[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

uint64_t sub_1A5C2F6A4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;

  result = sub_1A5C41918();
  v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_1A5C41894();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A5C418B8();
  if (__OFSUB__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = sub_1A5C418AC();
  if (!a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    v7 = result;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1A5C2F7A4(int *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;

  sub_1A5C41918();
  v7 = *a1;
  if (a1[1] < (int)v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!sub_1A5C41894())
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (__OFSUB__(v7, sub_1A5C418B8()))
    goto LABEL_10;
  sub_1A5C418AC();
  if (cckem_export_privkey())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFSUB__(a4, *a3))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!cckem_public_ctx())
    goto LABEL_15;
  result = cckem_export_pubkey();
  if ((_DWORD)result)
    goto LABEL_13;
  return result;
}

uint64_t sub_1A5C2F8B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  result = sub_1A5C41894();
  v8 = result;
  if (result)
  {
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = sub_1A5C418AC();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = v8 + v12;
  if (v8)
    v14 = v13;
  else
    v14 = 0;
  a3(&v16, v8, v14);
  if (!v3)
    v15 = v16;
  return v15 & 1;
}

uint64_t sub_1A5C2F964(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_1A5C41894();
  v7 = result;
  if (result)
  {
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  v8 = __OFSUB__(a2, a1);
  v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = sub_1A5C418AC();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = v7 + v11;
  if (v7)
    v13 = v12;
  else
    v13 = 0;
  return a3(v7, v13);
}

uint64_t sub_1A5C2FA04(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = *a3;
  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v10 = sub_1A5C10970(0, *a3, v9, v8);
  result = sub_1A5C10970(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a1)
    v13 = a1 + v10;
  else
    v13 = 0;
  return a4(v13, v12);
}

_QWORD *sub_1A5C2FAB4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C2E264(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1A5C2FAD8(uint64_t *a1, _QWORD *a2)
{
  return sub_1A5C2FB60(a1, a2, MEMORY[0x1E0C82180]);
}

uint64_t sub_1A5C2FAF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;

  return sub_1A5C2DBBC(a1, a2, v2[4], v2[5], v2[2], v2[3], MEMORY[0x1E0C82178]);
}

_QWORD *sub_1A5C2FB20(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C2E264(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1A5C2FB44(uint64_t *a1, _QWORD *a2)
{
  return sub_1A5C2FB60(a1, a2, MEMORY[0x1E0C82178]);
}

uint64_t sub_1A5C2FB60(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;

  result = *a1;
  if (result)
    return sub_1A5C2DC08(result, **(_QWORD **)(v3 + 16), a2, *(_QWORD *)(v3 + 24), a3);
  __break(1u);
  return result;
}

_UNKNOWN **sub_1A5C2FB90()
{
  return &protocol witness table for Kyber768.PublicKey;
}

_UNKNOWN **sub_1A5C2FB9C()
{
  return &protocol witness table for Kyber1024.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768()
{
  return &type metadata for Kyber768;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey()
{
  return &type metadata for Kyber768.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey()
{
  return &type metadata for Kyber768.PrivateKey;
}

ValueMetadata *type metadata accessor for Kyber1024()
{
  return &type metadata for Kyber1024;
}

ValueMetadata *type metadata accessor for Kyber1024.PublicKey()
{
  return &type metadata for Kyber1024.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber1024.PrivateKey()
{
  return &type metadata for Kyber1024.PrivateKey;
}

size_t sub_1A5C2FC08()
{
  _QWORD *v0;
  size_t v1;
  size_t result;
  int64_t v3;

  v1 = _swift_stdlib_malloc_size(v0) - 32;
  result = swift_beginAccess();
  v3 = v0[2];
  if (__OFSUB__(v1, v3))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v1 - v3) & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = _swift_stdlib_malloc_size(v0);
  if ((uint64_t)(result - 32) >= v3)
  {
    v0[2] = v3;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

size_t sub_1A5C2FC88(int64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  size_t result;
  int64_t v7;
  int64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v2 + 2;
  result = swift_beginAccess();
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = v2[2];
  if (__OFSUB__(v8, v7))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v8 - v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = __OFSUB__(0, v7);
  v10 = a1 - a2;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = sub_1A5C002A4(a2, v8, v10);
  if (a1 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = _swift_stdlib_malloc_size(v2);
  v11 = v2[2];
  v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
  {
    result = swift_beginAccess();
    *v5 = v12;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1A5C2FD8C(int64_t a1, int64_t a2)
{
  const void **v2;
  const void **v3;
  _QWORD *v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const void *v14;
  char *v15;
  uint64_t v16;

  v3 = v2;
  v6 = (char *)*v2 + 16;
  result = swift_beginAccess();
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  v9 = *v6 - v8;
  if (__OFSUB__(*v6, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    result = _swift_stdlib_malloc_size(*v3);
    if (result - 32 >= v9)
    {
      if (a2 >= a1)
        return sub_1A5C2FC88(a1, a2);
      goto LABEL_24;
    }
  }
  if (v9 < 0)
    goto LABEL_20;
  if (HIDWORD(v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((_DWORD)v9)
  {
    v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v12 = v11 | HIWORD(v11);
    if (v12 == -1)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = (v12 + 1);
  }
  else
  {
    v13 = 1;
  }
  type metadata accessor for SecureBytes.Backing();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v13;
  if (a1 < 0)
    goto LABEL_22;
  v14 = (const void *)result;
  v15 = (char *)*v3;
  result = swift_beginAccess();
  v16 = *((_QWORD *)v15 + 2);
  if (v16 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  sub_1A5BFEB14(v15, 0, a1);
  sub_1A5C2FC08();
  sub_1A5BFEB14((char *)*v3, a2, v16);
  *v3 = v14;
  return swift_release();
}

uint64_t sub_1A5C2FF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C2E2D0(a1, a2, *(_QWORD *)(v2 + 16), MEMORY[0x1E0C82178]);
}

uint64_t sub_1A5C2FF28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C2DDA4(a1, a2, *(_QWORD *)(v2 + 16), MEMORY[0x1E0C82178]);
}

uint64_t sub_1A5C2FF48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C2E2D0(a1, a2, *(_QWORD *)(v2 + 16), MEMORY[0x1E0C82180]);
}

uint64_t sub_1A5C2FF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5C2DDA4(a1, a2, *(_QWORD *)(v2 + 16), MEMORY[0x1E0C82180]);
}

void *sub_1A5C2FF88(void *__src, size_t __len)
{
  uint64_t v2;

  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
      __break(1u);
    else
      return memmove(*(void **)(v2 + 40), __src, __len);
  }
  return __src;
}

uint64_t sub_1A5C2FFA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v8;
  _QWORD *v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  int v30;
  __int128 v31;
  _OWORD v32[2];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = ceil((double)a3 * 0.03125);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v8 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 < 256.0)
  {
    v5 = a3;
    v4 = a1;
    v6 = (int)v8;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  v9 = off_1ECF977E8;
  v39 = off_1ECF977E8;
  sub_1A5C0FFD4(v4);
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v27 = a4;
  v28 = v5;
  v10 = (char *)&v38 + 8;
  swift_retain_n();
  LOBYTE(v11) = 1;
  v30 = v6;
  while (1)
  {
    v12 = swift_retain();
    sub_1A5C326F4(v12, &v38);
    swift_beginAccess();
    v13 = (uint64_t)v9 + v9[2] + 32;
    swift_retain();
    sub_1A5C11CBC((uint64_t)(v9 + 4), v13);
    swift_release();
    if (a2 >> 60 != 15)
      __asm { BR              X8 }
    LOBYTE(v40[0]) = v11;
    v14 = v10;
    sub_1A5C11CBC((uint64_t)v40, (uint64_t)v40 + 1);
    v15 = v38;
    sub_1A5BF1308((uint64_t)v40);
    v37 = v15;
    v32[0] = v40[0];
    v32[1] = v40[1];
    swift_retain();
    sub_1A5C11CBC((uint64_t)v32, (uint64_t)&v33);
    swift_retain();
    sub_1A5BF1308((uint64_t)&v34);
    swift_release_n();
    v31 = v34;
    v17 = v35;
    v16 = v36;
    type metadata accessor for SecureBytes.Backing();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1A5C45200;
    _swift_stdlib_malloc_size((const void *)v18);
    *(_OWORD *)(v18 + 32) = v31;
    *(_QWORD *)(v18 + 48) = v17;
    *(_QWORD *)(v18 + 56) = v16;
    swift_beginAccess();
    *(_QWORD *)(v18 + 16) = 32;
    v19 = _swift_stdlib_malloc_size((const void *)v18);
    swift_release();
    if (v19 < 64)
    {
      __break(1u);
      JUMPOUT(0x1A5C30518);
    }
    v20 = swift_retain();
    sub_1A5C0FB68(v20);
    swift_release();
    swift_release();
    swift_release();
    if (v30 == v11)
      break;
    v11 = v11 + 1;
    v9 = (_QWORD *)v18;
    v10 = v14;
    if ((v11 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  if (v28 < 0)
    goto LABEL_26;
  v21 = (uint64_t)v39;
  swift_beginAccess();
  v22 = *(_QWORD *)(v21 + 16);
  v23 = sub_1A5C0FE28(0, v28, v22, v21);
  if ((v24 & 1) != 0)
    v25 = v22;
  else
    v25 = v23;
  if ((v25 | v22) < 0)
    goto LABEL_27;
  if (v22 < v25)
    goto LABEL_28;
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = v25;
  v35 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v27 = *(_QWORD *)&v32[0];
  return result;
}

uint64_t sub_1A5C30564@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v8;
  _QWORD *v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  int v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[3];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  _OWORD v42[3];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = ceil((double)a3 / 48.0);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v8 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 < 256.0)
  {
    v5 = a3;
    v4 = a1;
    v6 = (int)v8;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  v9 = off_1ECF977E8;
  v41 = off_1ECF977E8;
  sub_1A5C0FFD4(v4);
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v27 = a4;
  v28 = v5;
  v10 = (char *)&v40 + 8;
  swift_retain_n();
  LOBYTE(v11) = 1;
  v30 = v6;
  while (1)
  {
    v12 = swift_retain();
    sub_1A5C323C4(v12, MEMORY[0x1E0C823E8], &qword_1ECF97818, (void (*)(uint64_t, uint64_t))sub_1A5C11CB0, (char *)sub_1A5C32B84, &v40);
    swift_beginAccess();
    v13 = (uint64_t)v9 + v9[2] + 32;
    swift_retain();
    sub_1A5C11CB0((uint64_t)(v9 + 4), v13);
    swift_release();
    if (a2 >> 60 != 15)
      __asm { BR              X8 }
    LOBYTE(v42[0]) = v11;
    v14 = v10;
    sub_1A5C11CB0((uint64_t)v42, (uint64_t)v42 + 1);
    v15 = v40;
    sub_1A5C0B664((uint64_t)v42);
    v39 = v15;
    v33[0] = v42[0];
    v33[1] = v42[1];
    v33[2] = v42[2];
    swift_retain();
    sub_1A5C11CB0((uint64_t)v33, (uint64_t)&v34);
    swift_retain();
    sub_1A5C0B664((uint64_t)&v35);
    swift_release_n();
    v31 = v36;
    v32 = v35;
    v17 = v37;
    v16 = v38;
    type metadata accessor for SecureBytes.Backing();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1A5C451F0;
    _swift_stdlib_malloc_size((const void *)v18);
    *(_OWORD *)(v18 + 32) = v32;
    *(_OWORD *)(v18 + 48) = v31;
    *(_QWORD *)(v18 + 64) = v17;
    *(_QWORD *)(v18 + 72) = v16;
    swift_beginAccess();
    *(_QWORD *)(v18 + 16) = 48;
    v19 = _swift_stdlib_malloc_size((const void *)v18);
    swift_release();
    if (v19 < 80)
    {
      __break(1u);
      JUMPOUT(0x1A5C30B08);
    }
    v20 = swift_retain();
    sub_1A5C0FB68(v20);
    swift_release();
    swift_release();
    swift_release();
    if (v30 == v11)
      break;
    v11 = v11 + 1;
    v9 = (_QWORD *)v18;
    v10 = v14;
    if ((v11 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  if (v28 < 0)
    goto LABEL_26;
  v21 = (uint64_t)v41;
  swift_beginAccess();
  v22 = *(_QWORD *)(v21 + 16);
  v23 = sub_1A5C0FE28(0, v28, v22, v21);
  if ((v24 & 1) != 0)
    v25 = v22;
  else
    v25 = v23;
  if ((v25 | v22) < 0)
    goto LABEL_27;
  if (v22 < v25)
    goto LABEL_28;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = v25;
  *(_QWORD *)&v36 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v27 = *(_QWORD *)&v33[0];
  return result;
}

uint64_t sub_1A5C30B54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v8;
  _QWORD *v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[4];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  _OWORD v44[4];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = ceil((double)a3 * 0.015625);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v8 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 < 256.0)
  {
    v5 = a3;
    v4 = a1;
    v6 = (int)v8;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  v9 = off_1ECF977E8;
  v43 = off_1ECF977E8;
  sub_1A5C0FFD4(v4);
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v27 = a4;
  v28 = v5;
  v10 = (char *)&v42 + 8;
  swift_retain_n();
  LOBYTE(v11) = 1;
  v30 = v6;
  while (1)
  {
    v12 = swift_retain();
    sub_1A5C323C4(v12, MEMORY[0x1E0C823F8], &qword_1EE800340, (void (*)(uint64_t, uint64_t))sub_1A5C11CA4, (char *)sub_1A5C32A08, &v42);
    swift_beginAccess();
    v13 = (uint64_t)v9 + v9[2] + 32;
    swift_retain();
    sub_1A5C11CA4((uint64_t)(v9 + 4), v13);
    swift_release();
    if (a2 >> 60 != 15)
      __asm { BR              X8 }
    LOBYTE(v44[0]) = v11;
    v14 = v10;
    sub_1A5C11CA4((uint64_t)v44, (uint64_t)v44 + 1);
    v15 = v42;
    sub_1A5BF1AD0(v44);
    v41 = v15;
    v34[0] = v44[0];
    v34[1] = v44[1];
    v34[2] = v44[2];
    v34[3] = v44[3];
    swift_retain();
    sub_1A5C11CA4((uint64_t)v34, (uint64_t)&v35);
    swift_retain();
    sub_1A5BF1AD0(&v36);
    swift_release_n();
    v32 = v37;
    v33 = v36;
    v31 = v38;
    v17 = v39;
    v16 = v40;
    type metadata accessor for SecureBytes.Backing();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1A5C451F0;
    _swift_stdlib_malloc_size((const void *)v18);
    *(_OWORD *)(v18 + 32) = v33;
    *(_OWORD *)(v18 + 48) = v32;
    *(_OWORD *)(v18 + 64) = v31;
    *(_QWORD *)(v18 + 80) = v17;
    *(_QWORD *)(v18 + 88) = v16;
    swift_beginAccess();
    *(_QWORD *)(v18 + 16) = 64;
    v19 = _swift_stdlib_malloc_size((const void *)v18);
    swift_release();
    if (v19 < 96)
    {
      __break(1u);
      JUMPOUT(0x1A5C31110);
    }
    v20 = swift_retain();
    sub_1A5C0FB68(v20);
    swift_release();
    swift_release();
    swift_release();
    if (v30 == v11)
      break;
    v11 = v11 + 1;
    v9 = (_QWORD *)v18;
    v10 = v14;
    if ((v11 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  if (v28 < 0)
    goto LABEL_26;
  v21 = (uint64_t)v43;
  swift_beginAccess();
  v22 = *(_QWORD *)(v21 + 16);
  v23 = sub_1A5C0FE28(0, v28, v22, v21);
  if ((v24 & 1) != 0)
    v25 = v22;
  else
    v25 = v23;
  if ((v25 | v22) < 0)
    goto LABEL_27;
  if (v22 < v25)
    goto LABEL_28;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v25;
  *(_QWORD *)&v37 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v27 = *(_QWORD *)&v34[0];
  return result;
}

uint64_t sub_1A5C3115C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v10;
  _QWORD *v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  _OWORD v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v10 = ceil((double)a4 * 0.03125);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v10 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v10 < 256.0)
  {
    v7 = a4;
    v5 = a2;
    v6 = a1;
    v8 = (int)v10;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  v11 = off_1ECF977E8;
  v40 = off_1ECF977E8;
  sub_1A5BEE468(v6, v5);
  swift_retain();
  sub_1A5C100D4(v6, v5);
  sub_1A5BEFF90(v6, v5);
  if (!v8)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v29 = a5;
  v30 = v7;
  v12 = (char *)&v39 + 8;
  swift_retain();
  LOBYTE(v13) = 1;
  while (1)
  {
    v14 = swift_retain();
    sub_1A5C326F4(v14, &v39);
    swift_beginAccess();
    v15 = (uint64_t)v11 + v11[2] + 32;
    swift_retain();
    sub_1A5C11CBC((uint64_t)(v11 + 4), v15);
    swift_release();
    if (a3 >> 60 != 15)
      __asm { BR              X8 }
    LOBYTE(v41[0]) = v13;
    v16 = v12;
    sub_1A5C11CBC((uint64_t)v41, (uint64_t)v41 + 1);
    v17 = v39;
    sub_1A5BF1308((uint64_t)v41);
    v38 = v17;
    v33[0] = v41[0];
    v33[1] = v41[1];
    swift_retain();
    sub_1A5C11CBC((uint64_t)v33, (uint64_t)&v34);
    swift_retain();
    sub_1A5BF1308((uint64_t)&v35);
    swift_release_n();
    v32 = v35;
    v19 = v36;
    v18 = v37;
    type metadata accessor for SecureBytes.Backing();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1A5C45200;
    _swift_stdlib_malloc_size((const void *)v20);
    *(_OWORD *)(v20 + 32) = v32;
    *(_QWORD *)(v20 + 48) = v19;
    *(_QWORD *)(v20 + 56) = v18;
    swift_beginAccess();
    *(_QWORD *)(v20 + 16) = 32;
    v21 = _swift_stdlib_malloc_size((const void *)v20);
    swift_release();
    if (v21 < 64)
    {
      __break(1u);
      JUMPOUT(0x1A5C316F0);
    }
    v22 = swift_retain();
    sub_1A5C0FB68(v22);
    swift_release();
    swift_release();
    swift_release();
    if (v8 == v13)
      break;
    v13 = v13 + 1;
    v11 = (_QWORD *)v20;
    v12 = v16;
    if ((v13 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  if (v30 < 0)
    goto LABEL_26;
  v23 = (uint64_t)v40;
  swift_beginAccess();
  v24 = *(_QWORD *)(v23 + 16);
  v25 = sub_1A5C0FE28(0, v30, v24, v23);
  if ((v26 & 1) != 0)
    v27 = v24;
  else
    v27 = v25;
  if ((v27 | v24) < 0)
    goto LABEL_27;
  if (v24 < v27)
    goto LABEL_28;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = v27;
  v36 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v29 = *(_QWORD *)&v33[0];
  return result;
}

uint64_t sub_1A5C3173C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v10;
  _QWORD *v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  _OWORD v34[3];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  _OWORD v43[3];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v10 = ceil((double)a4 / 48.0);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v10 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v10 < 256.0)
  {
    v7 = a4;
    v5 = a2;
    v6 = a1;
    v8 = (int)v10;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  v11 = off_1ECF977E8;
  v42 = off_1ECF977E8;
  sub_1A5BEE468(v6, v5);
  swift_retain();
  sub_1A5C100D4(v6, v5);
  sub_1A5BEFF90(v6, v5);
  if (!v8)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v29 = a5;
  v30 = v7;
  v12 = (char *)&v41 + 8;
  swift_retain();
  LOBYTE(v13) = 1;
  while (1)
  {
    v14 = swift_retain();
    sub_1A5C323C4(v14, MEMORY[0x1E0C823E8], &qword_1ECF97818, (void (*)(uint64_t, uint64_t))sub_1A5C11CB0, (char *)sub_1A5C32B84, &v41);
    swift_beginAccess();
    v15 = (uint64_t)v11 + v11[2] + 32;
    swift_retain();
    sub_1A5C11CB0((uint64_t)(v11 + 4), v15);
    swift_release();
    if (a3 >> 60 != 15)
      __asm { BR              X8 }
    LOBYTE(v43[0]) = v13;
    v16 = v12;
    sub_1A5C11CB0((uint64_t)v43, (uint64_t)v43 + 1);
    v17 = v41;
    sub_1A5C0B664((uint64_t)v43);
    v40 = v17;
    v34[0] = v43[0];
    v34[1] = v43[1];
    v34[2] = v43[2];
    swift_retain();
    sub_1A5C11CB0((uint64_t)v34, (uint64_t)&v35);
    swift_retain();
    sub_1A5C0B664((uint64_t)&v36);
    swift_release_n();
    v32 = v37;
    v33 = v36;
    v19 = v38;
    v18 = v39;
    type metadata accessor for SecureBytes.Backing();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1A5C451F0;
    _swift_stdlib_malloc_size((const void *)v20);
    *(_OWORD *)(v20 + 32) = v33;
    *(_OWORD *)(v20 + 48) = v32;
    *(_QWORD *)(v20 + 64) = v19;
    *(_QWORD *)(v20 + 72) = v18;
    swift_beginAccess();
    *(_QWORD *)(v20 + 16) = 48;
    v21 = _swift_stdlib_malloc_size((const void *)v20);
    swift_release();
    if (v21 < 80)
    {
      __break(1u);
      JUMPOUT(0x1A5C31D04);
    }
    v22 = swift_retain();
    sub_1A5C0FB68(v22);
    swift_release();
    swift_release();
    swift_release();
    if (v8 == v13)
      break;
    v13 = v13 + 1;
    v11 = (_QWORD *)v20;
    v12 = v16;
    if ((v13 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  if (v30 < 0)
    goto LABEL_26;
  v23 = (uint64_t)v42;
  swift_beginAccess();
  v24 = *(_QWORD *)(v23 + 16);
  v25 = sub_1A5C0FE28(0, v30, v24, v23);
  if ((v26 & 1) != 0)
    v27 = v24;
  else
    v27 = v25;
  if ((v27 | v24) < 0)
    goto LABEL_27;
  if (v24 < v27)
    goto LABEL_28;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v27;
  *(_QWORD *)&v37 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v29 = *(_QWORD *)&v34[0];
  return result;
}

uint64_t sub_1A5C31D50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v10;
  _QWORD *v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  _OWORD v45[4];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v10 = ceil((double)a4 * 0.015625);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v10 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v10 < 256.0)
  {
    v7 = a4;
    v5 = a2;
    v6 = a1;
    v8 = (int)v10;
    if (qword_1ECF977F0 == -1)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  v11 = off_1ECF977E8;
  v44 = off_1ECF977E8;
  sub_1A5BEE468(v6, v5);
  swift_retain();
  sub_1A5C100D4(v6, v5);
  sub_1A5BEFF90(v6, v5);
  if (!v8)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v29 = a5;
  v30 = v7;
  v12 = (char *)&v43 + 8;
  swift_retain();
  LOBYTE(v13) = 1;
  while (1)
  {
    v14 = swift_retain();
    sub_1A5C323C4(v14, MEMORY[0x1E0C823F8], &qword_1EE800340, (void (*)(uint64_t, uint64_t))sub_1A5C11CA4, (char *)sub_1A5C32A08, &v43);
    swift_beginAccess();
    v15 = (uint64_t)v11 + v11[2] + 32;
    swift_retain();
    sub_1A5C11CA4((uint64_t)(v11 + 4), v15);
    swift_release();
    if (a3 >> 60 != 15)
      __asm { BR              X8 }
    LOBYTE(v45[0]) = v13;
    v16 = v12;
    sub_1A5C11CA4((uint64_t)v45, (uint64_t)v45 + 1);
    v17 = v43;
    sub_1A5BF1AD0(v45);
    v42 = v17;
    v35[0] = v45[0];
    v35[1] = v45[1];
    v35[2] = v45[2];
    v35[3] = v45[3];
    swift_retain();
    sub_1A5C11CA4((uint64_t)v35, (uint64_t)&v36);
    swift_retain();
    sub_1A5BF1AD0(&v37);
    swift_release_n();
    v33 = v38;
    v34 = v37;
    v32 = v39;
    v19 = v40;
    v18 = v41;
    type metadata accessor for SecureBytes.Backing();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1A5C451F0;
    _swift_stdlib_malloc_size((const void *)v20);
    *(_OWORD *)(v20 + 32) = v34;
    *(_OWORD *)(v20 + 48) = v33;
    *(_OWORD *)(v20 + 64) = v32;
    *(_QWORD *)(v20 + 80) = v19;
    *(_QWORD *)(v20 + 88) = v18;
    swift_beginAccess();
    *(_QWORD *)(v20 + 16) = 64;
    v21 = _swift_stdlib_malloc_size((const void *)v20);
    swift_release();
    if (v21 < 96)
    {
      __break(1u);
      JUMPOUT(0x1A5C32330);
    }
    v22 = swift_retain();
    sub_1A5C0FB68(v22);
    swift_release();
    swift_release();
    swift_release();
    if (v8 == v13)
      break;
    v13 = v13 + 1;
    v11 = (_QWORD *)v20;
    v12 = v16;
    if ((v13 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }
  if (v30 < 0)
    goto LABEL_26;
  v23 = (uint64_t)v44;
  swift_beginAccess();
  v24 = *(_QWORD *)(v23 + 16);
  v25 = sub_1A5C0FE28(0, v30, v24, v23);
  if ((v26 & 1) != 0)
    v27 = v24;
  else
    v27 = v25;
  if ((v27 | v24) < 0)
    goto LABEL_27;
  if (v24 < v27)
    goto LABEL_28;
  *(_QWORD *)&v37 = 0;
  *((_QWORD *)&v37 + 1) = v27;
  *(_QWORD *)&v38 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97810);
  sub_1A5C009A4();
  sub_1A5C41EF4();
  swift_release();
  swift_release();
  result = swift_release_n();
  *v29 = *(_QWORD *)&v35[0];
  return result;
}

uint64_t sub_1A5C3237C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1A5C323C4(a1, MEMORY[0x1E0C823F8], &qword_1EE800340, (void (*)(uint64_t, uint64_t))sub_1A5C11CA4, (char *)sub_1A5C32A08, a2);
}

uint64_t sub_1A5C323A0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1A5C323C4(a1, MEMORY[0x1E0C823E8], &qword_1ECF97818, (void (*)(uint64_t, uint64_t))sub_1A5C11CB0, (char *)sub_1A5C32B84, a2);
}

uint64_t sub_1A5C323C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, char *a5@<X4>, _OWORD *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[3];
  uint64_t v27;
  _QWORD v28[3];
  ValueMetadata *v29;
  unint64_t v30;

  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == 128)
  {
    v29 = &type metadata for SymmetricKey;
    v30 = sub_1A5BF4054();
    v28[0] = a1;
    goto LABEL_11;
  }
  if (v12 > 0x80)
  {
    v13 = sub_1A5C41C00();
    *(_QWORD *)(v13 + 16) = 128;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    v27 = v13;
    ((void (*)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *))a5)(v26, a1 + 32, a1 + 32 + *(_QWORD *)(a1 + 16), &v27);
    swift_release();
    sub_1A5BF9FC8(v26, (uint64_t)v28);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v14 = sub_1A5C41C00();
  *(_QWORD *)(v14 + 16) = 128;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 > 0x80)
  {
    __break(1u);
LABEL_15:
    a5 = sub_1A5BFC774((char *)1, 128, 1, a5);
    if (!v15)
      goto LABEL_10;
    goto LABEL_9;
  }
  a5 = (char *)v14;
  if (*(_QWORD *)(v14 + 24) <= 0xFFuLL)
    goto LABEL_15;
  if (v15)
LABEL_9:
    memcpy(a5 + 32, (const void *)(a1 + 32), v15);
LABEL_10:
  swift_release();
  v29 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v30 = sub_1A5C082C0();
  v28[0] = a5;
LABEL_11:
  result = a2();
  if (result)
  {
    v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v18 = swift_allocObject();
    getDigestSizeForDigestInfo();
    v19 = swift_slowAlloc();
    ccdigest_init();
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = v19;
    *((_QWORD *)&v26[0] + 1) = v18;
    __swift_project_boxed_opaque_existential_1(v28, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    sub_1A5C418D0();
    v20 = sub_1A5C41BF4();
    a4(v20 + 32, v20 + 32 + *(_QWORD *)(v20 + 16));
    swift_bridgeObjectRelease();
    v21 = swift_bridgeObjectRelease();
    result = ((uint64_t (*)(uint64_t))a2)(v21);
    if (result)
    {
      v22 = result;
      v23 = swift_allocObject();
      getDigestSizeForDigestInfo();
      v24 = swift_slowAlloc();
      ccdigest_init();
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = v24;
      *(_QWORD *)&v26[0] = v23;
      __swift_project_boxed_opaque_existential_1(v28, (uint64_t)v29);
      sub_1A5C418D0();
      v25 = sub_1A5C41BF4();
      a4(v25 + 32, v25 + 32 + *(_QWORD *)(v25 + 16));
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      result = swift_bridgeObjectRelease();
      *a6 = v26[0];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C326F4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18[3];
  char *v19;
  _QWORD v20[3];
  ValueMetadata *v21;
  unint64_t v22;

  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 == 64)
  {
    v21 = &type metadata for SymmetricKey;
    v22 = sub_1A5BF4054();
    v20[0] = a1;
    goto LABEL_11;
  }
  if (v5 > 0x40)
  {
    v6 = sub_1A5C41C00();
    *(_QWORD *)(v6 + 16) = 64;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    v19 = (char *)v6;
    sub_1A5C32CF0(a1 + 32, a1 + 32 + *(_QWORD *)(a1 + 16), &v19, (char **)v18);
    swift_release();
    sub_1A5BF9FC8(v18, (uint64_t)v20);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v7 = sub_1A5C41C00();
  *(_QWORD *)(v7 + 16) = 64;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 > 0x40)
  {
    __break(1u);
LABEL_15:
    v2 = sub_1A5BFC774((char *)1, 64, 1, v2);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v2 = (char *)v7;
  if (*(_QWORD *)(v7 + 24) <= 0x7FuLL)
    goto LABEL_15;
  if (v8)
LABEL_9:
    memcpy(v2 + 32, (const void *)(a1 + 32), v8);
LABEL_10:
  swift_release();
  v21 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  v22 = sub_1A5C082C0();
  v20[0] = v2;
LABEL_11:
  result = ccsha256_di();
  if (result)
  {
    v10 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A18);
    v11 = swift_allocObject();
    getDigestSizeForDigestInfo();
    v12 = swift_slowAlloc();
    ccdigest_init();
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = v12;
    *((_QWORD *)&v18[0] + 1) = v11;
    __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
    sub_1A5C418D0();
    v13 = sub_1A5C41BF4();
    sub_1A5C11CBC(v13 + 32, v13 + 32 + *(_QWORD *)(v13 + 16));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = ccsha256_di();
    if (result)
    {
      v14 = result;
      v15 = swift_allocObject();
      getDigestSizeForDigestInfo();
      v16 = swift_slowAlloc();
      ccdigest_init();
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = v16;
      *(_QWORD *)&v18[0] = v15;
      __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
      sub_1A5C418D0();
      v17 = sub_1A5C41BF4();
      sub_1A5C11CBC(v17 + 32, v17 + 32 + *(_QWORD *)(v17 + 16));
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      result = swift_bridgeObjectRelease();
      *a2 = v18[0];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C32A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  char *v19;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = ccsha512_di();
  if (!v7)
    __break(1u);
  v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800340);
  v9 = swift_allocObject();
  getDigestSizeForDigestInfo();
  v10 = swift_slowAlloc();
  ccdigest_init();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v10;
  sub_1A5C11CA4(a1, a2);
  sub_1A5BF1AD0(&v23);
  swift_release();
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v15 = v26;
  v14 = v27;
  v16 = v28;
  v21 = v29;
  v17 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v17 = sub_1A5BFC774(0, *((_QWORD *)v17 + 2), 0, v17);
  *a3 = v17;
  *((_OWORD *)v17 + 2) = v11;
  *((_QWORD *)v17 + 6) = v12;
  *((_QWORD *)v17 + 7) = v13;
  *((_QWORD *)v17 + 8) = v15;
  *((_QWORD *)v17 + 9) = v14;
  *((_QWORD *)v17 + 10) = v16;
  *((_QWORD *)v17 + 11) = v21;
  v19 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  a4[4] = (char *)sub_1A5C082C0();
  *a4 = v19;
  return sub_1A5C41BF4();
}

uint64_t sub_1A5C32B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char isUniquelyReferenced_nonNull_native;
  char *v20;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  v8 = ccsha384_di();
  if (!v8)
    __break(1u);
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97818);
  v10 = swift_allocObject();
  getDigestSizeForDigestInfo();
  v11 = swift_slowAlloc();
  ccdigest_init();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v11;
  sub_1A5C11CB0(a1, a2);
  sub_1A5C0B664((uint64_t)v22);
  swift_release();
  v12 = v22[0];
  v13 = v22[1];
  v14 = v22[2];
  v15 = v22[3];
  v17 = v22[4];
  v16 = v22[5];
  v18 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v18 = sub_1A5BFC774(0, *((_QWORD *)v18 + 2), 0, v18);
  *a3 = v18;
  *((_QWORD *)v18 + 4) = v12;
  *((_QWORD *)v18 + 5) = v13;
  *((_QWORD *)v18 + 6) = v14;
  *((_QWORD *)v18 + 7) = v15;
  *((_QWORD *)v18 + 8) = v17;
  *((_QWORD *)v18 + 9) = v16;
  v20 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  a4[4] = (char *)sub_1A5C082C0();
  *a4 = v20;
  return sub_1A5C41BF4();
}

uint64_t sub_1A5C32CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char isUniquelyReferenced_nonNull_native;
  char *v18;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  v8 = ccsha256_di();
  if (!v8)
    __break(1u);
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97A18);
  v10 = swift_allocObject();
  getDigestSizeForDigestInfo();
  v11 = swift_slowAlloc();
  ccdigest_init();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v11;
  sub_1A5C11CBC(a1, a2);
  sub_1A5BF1308((uint64_t)v20);
  swift_release();
  v12 = v20[0];
  v13 = v20[1];
  v14 = v20[2];
  v15 = v20[3];
  v16 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v16 = sub_1A5BFC774(0, *((_QWORD *)v16 + 2), 0, v16);
  *a3 = v16;
  *((_QWORD *)v16 + 4) = v12;
  *((_QWORD *)v16 + 5) = v13;
  *((_QWORD *)v16 + 6) = v14;
  *((_QWORD *)v16 + 7) = v15;
  v18 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A8);
  a4[4] = (char *)sub_1A5C082C0();
  *a4 = v18;
  return sub_1A5C41BF4();
}

void sub_1A5C32E4C(uint64_t a1, uint64_t a2)
{
  sub_1A5C32EFC(a1, a2);
}

void sub_1A5C32EA4(uint64_t a1, uint64_t a2)
{
  sub_1A5C32EFC(a1, a2);
}

void sub_1A5C32EFC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t (*sub_1A5C32F64())(_QWORD *, uint64_t *)
{
  uint64_t (*v0)(_QWORD *, uint64_t *);
  uint64_t (*v1)(void);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(_QWORD *)(v5 - 136) = v3;
  *(_WORD *)(v5 - 128) = v2;
  *(_BYTE *)(v5 - 126) = BYTE2(v2);
  *(_BYTE *)(v5 - 125) = BYTE3(v2);
  *(_BYTE *)(v5 - 124) = BYTE4(v2);
  *(_BYTE *)(v5 - 123) = BYTE5(v2);
  sub_1A5C33584((_BYTE *)(v5 - 136), (_BYTE *)(v5 - 136 + BYTE6(v2)), v1);
  if (v4)
  {
    sub_1A5BEFF90(v3, v2);
  }
  else
  {
    v6 = v1();
    if (!v6)
    {
      __break(1u);
      JUMPOUT(0x1A5C3324CLL);
    }
    v7 = v6;
    *(_QWORD *)(v5 - 112) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    *(_QWORD *)(v5 - 136) = v7;
    swift_dynamicCast();
    v8 = getccec_pub_ctx_size();
    v11 = MEMORY[0x1E0C80A78](v8);
    v0 = (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5BEBD48(v11, v0);
    if (*(_QWORD *)(v5 - 144))
    {
      sub_1A5BF5E74();
      swift_allocError();
      *(_DWORD *)v9 = 1;
      *(_BYTE *)(v9 + 4) = 1;
      swift_willThrow();
      sub_1A5BEFF90(*(_QWORD *)(v5 - 104), *(_QWORD *)(v5 - 96));
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A5BEFF90(*(_QWORD *)(v5 - 104), *(_QWORD *)(v5 - 96));
    }
  }
  return v0;
}

uint64_t sub_1A5C3325C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD *, uint64_t *))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1A5C33584((_BYTE *)(a1 + 32), (_BYTE *)(a1 + 32 + *(_QWORD *)(a1 + 16)), a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)a3;
  }
  result = ((uint64_t (*)(uint64_t))a2)(v6);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    v8 = getccec_pub_ctx_size();
    v9 = MEMORY[0x1E0C80A78](v8);
    a3 = (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5BEBD48(v9, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C333B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1A5C333F8(a1, a2, a3, a4, MEMORY[0x1E0C81C60], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3441C);
}

uint64_t sub_1A5C333D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1A5C333F8(a1, a2, a3, a4, MEMORY[0x1E0C81C68], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C343F8);
}

uint64_t sub_1A5C333F8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(_QWORD *, uint64_t *))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    v9 = sub_1A5C33584((_BYTE *)(a2 + a3), (_BYTE *)(a2 + (a4 >> 1)), a5);
    if (v6)
    {
      swift_unknownObjectRelease();
      return (uint64_t)a6;
    }
    result = ((uint64_t (*)(uint64_t))a5)(v9);
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
      swift_dynamicCast();
      v10 = getccec_pub_ctx_size();
      v11 = MEMORY[0x1E0C80A78](v10);
      a6 = (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5BEBD48(v11, a6);
      swift_unknownObjectRelease();
      return (uint64_t)a6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C33560(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1A5C333F8(a1, a2, a3, a4, MEMORY[0x1E0C81C70], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C343D4);
}

uint64_t sub_1A5C33584(_BYTE *a1, _BYTE *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = a3();
  if (!result)
    goto LABEL_15;
  v6 = result;
  v7 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v9, v6);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (result + 0x4000000000000000 < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  if (!a1 || a2 - a1 != ((2 * result) | 1))
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v8 = 1;
    goto LABEL_10;
  }
  if (a2 == a1)
    goto LABEL_14;
  if (*a1 == 4)
    return result;
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v8 = 5;
LABEL_10:
  *(_BYTE *)(v8 + 4) = 1;
  return swift_willThrow();
}

void sub_1A5C336D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C33744()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t result;

  if (!v3())
  {
    __break(1u);
    JUMPOUT(0x1A5C33A18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = ccec_import_pub();
  *v1 = (int)result;
  *v2 = v0;
  return result;
}

uint64_t sub_1A5C33A50(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result;

  result = a7();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    result = ccec_import_pub();
    *a3 = (int)result;
    *a4 = a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A5C33B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  if (__OFSUB__(a5 >> 1, a4))
  {
    __break(1u);
  }
  else if (a10())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    *a6 = (int)ccec_import_pub();
    *a7 = a8;
    return;
  }
  __break(1u);
}

uint64_t sub_1A5C33BEC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result;

  result = a7();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    result = swift_dynamicCast();
    if (a1)
    {
      result = ccec_import_pub();
      *a3 = (int)result;
      *a5 = a6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1A5C33CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a6())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1A5C33E70);
}

void sub_1A5C33E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a6())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1A5C3401CLL);
}

uint64_t P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1A5C341C8(a1, a2, a3, a4, MEMORY[0x1E0C81C60], sub_1A5C344D0, a5);
}

void P256.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;

  sub_1A5C33E84(*v5, a1, a2, a3, a4, MEMORY[0x1E0C81C60]);
  *a5 = v7;
}

uint64_t P256.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1A5C341C8(a1, a2, a3, a4, MEMORY[0x1E0C81C60], sub_1A5C344D0, a5);
}

uint64_t P384.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1A5C341C8(a1, a2, a3, a4, MEMORY[0x1E0C81C68], sub_1A5C344AC, a5);
}

void P384.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;

  sub_1A5C33E84(*v5, a1, a2, a3, a4, MEMORY[0x1E0C81C68]);
  *a5 = v7;
}

uint64_t P384.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1A5C341C8(a1, a2, a3, a4, MEMORY[0x1E0C81C68], sub_1A5C344AC, a5);
}

uint64_t P521.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1A5C341C8(a1, a2, a3, a4, MEMORY[0x1E0C81C70], sub_1A5C34488, a5);
}

void P521.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;

  sub_1A5C33E84(*v5, a1, a2, a3, a4, MEMORY[0x1E0C81C70]);
  *a5 = v7;
}

uint64_t P521.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1A5C341C8(a1, a2, a3, a4, MEMORY[0x1E0C81C70], sub_1A5C34488, a5);
}

uint64_t sub_1A5C341C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t (*a6)(_QWORD *, uint64_t *)@<X6>, uint64_t *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v11;
  uint64_t result;

  sub_1A5C33CB0(*v7, a1, a2, a3, a4, a5);
  result = sub_1A5C3325C(v11, a5, a6);
  *a7 = result;
  return result;
}

uint64_t sub_1A5C34260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1A5C41894();
  v9 = result;
  if (result)
  {
    result = sub_1A5C418B8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = sub_1A5C418AC();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  return a5(v9, v15);
}

void sub_1A5C342FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a1;
  if (v4)
    sub_1A5C336D4(v4, *a4, a4[1]);
  else
    __break(1u);
}

uint64_t sub_1A5C34340(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t (*a6)(void))
{
  uint64_t result;
  _BYTE v7[8];

  result = *a1;
  if (result)
    return sub_1A5C33A50(result, *a4, a5, a2, a3, (uint64_t)v7, a6);
  __break(1u);
  return result;
}

void sub_1A5C34388(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  _BYTE v7[8];

  v6 = *a1;
  if (v6)
    sub_1A5C33B10(v6, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5, a2, a3, (uint64_t)v7, a6);
  else
    __break(1u);
}

void sub_1A5C343D4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  sub_1A5C34388(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32), MEMORY[0x1E0C81C70]);
}

void sub_1A5C343F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  sub_1A5C34388(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32), MEMORY[0x1E0C81C68]);
}

void sub_1A5C3441C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  sub_1A5C34388(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32), MEMORY[0x1E0C81C60]);
}

void sub_1A5C34440(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A5C342FC(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

void sub_1A5C34464(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A5C342FC(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_1A5C34488(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C34340(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD **)(v2 + 32), MEMORY[0x1E0C81C70]);
}

uint64_t sub_1A5C344AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C34340(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD **)(v2 + 32), MEMORY[0x1E0C81C68]);
}

uint64_t sub_1A5C344D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C34340(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD **)(v2 + 32), MEMORY[0x1E0C81C60]);
}

uint64_t AES.GCM.Nonce.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C347C0(a1);
}

uint64_t ChaChaPoly.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A5C41C54() == 12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    v9 = sub_1A5C419FC();
    v11 = v10;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v9;
    a3[1] = v11;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  return result;
}

uint64_t AES.GCM.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1A5C41C54() >= 12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    v11 = sub_1A5C419FC();
    v13 = v12;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v11;
    a3[1] = v13;
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v9 = 1;
    *(_BYTE *)(v9 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  return result;
}

uint64_t ChaChaPoly.Nonce.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A5C347C0(a1);
}

uint64_t sub_1A5C347C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (!ccrng())
    __break(1u);
  result = ccrng_generate_bridge();
  *a1 = 0;
  a1[1] = 0xC000000000000;
  return result;
}

uint64_t ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)()
{
  return sub_1A5C41990();
}

void AES.GCM.Nonce.makeIterator()()
{
  sub_1A5C34980();
}

uint64_t sub_1A5C348D0()
{
  return ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A5C348E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C34BA8((uint64_t (*)(void))AES.GCM.Nonce.makeIterator(), a1);
}

uint64_t sub_1A5C348F0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = sub_1A5C26280(v1, v2);
  sub_1A5BEFF90(v1, v2);
  return v3;
}

uint64_t sub_1A5C34934(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1A5C252C8(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

void ChaChaPoly.Nonce.makeIterator()()
{
  sub_1A5C34980();
}

void sub_1A5C34980()
{
  __asm { BR              X10 }
}

size_t sub_1A5C349C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  return sub_1A5BF1478((size_t)&v3, (unint64_t)&v3 + BYTE6(v1));
}

uint64_t sub_1A5C34B9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C34BA8((uint64_t (*)(void))ChaChaPoly.Nonce.makeIterator(), a1);
}

uint64_t sub_1A5C34BA8@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = a1();
  result = sub_1A5BEFF90(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *a2 = v4;
  a2[1] = 0;
  return result;
}

uint64_t sub_1A5C34BE0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = sub_1A5C25DB4(v1, v2);
  sub_1A5BEFF90(v1, v2);
  return v3;
}

uint64_t sub_1A5C34C24(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1A5C24E8C(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

ValueMetadata *type metadata accessor for AES.GCM.Nonce()
{
  return &type metadata for AES.GCM.Nonce;
}

uint64_t AES.GCM.Nonce.withUnsafeBytes<A>(_:)()
{
  return ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t static SHA384Digest.byteCount.getter()
{
  return 48;
}

uint64_t static SHA512Digest.byteCount.getter()
{
  return 64;
}

uint64_t sub_1A5C34C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_1A5C34D14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v5 = *v0;
  v6[0] = MEMORY[0x1E0DEE9D8];
  sub_1A5C3F080((uint64_t)&v5, (char *)v6);
  v5 = v1;
  sub_1A5C3F080((uint64_t)&v5, (char *)v6);
  v5 = v2;
  sub_1A5C3F080((uint64_t)&v5, (char *)v6);
  v5 = v3;
  sub_1A5C3F080((uint64_t)&v5, (char *)v6);
  result = v6[0];
  if (*(_QWORD *)(v6[0] + 16) < 0x20uLL)
    __break(1u);
  return result;
}

uint64_t SHA256Digest.description.getter()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  unint64_t v16;

  v15 = 0x6420363532414853;
  v16 = 0xEF203A7473656769;
  v1 = v0[1];
  v14[0] = *v0;
  v14[1] = v1;
  result = sub_1A5C34D14();
  v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v8 = result;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  if (v7)
  {
    v12 = sub_1A5C41C00();
    *(_QWORD *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v13 = 0;
  *(_QWORD *)&v14[0] = v12;
  sub_1A5C41DC8();
  sub_1A5BFCCC4(v8, v9, v10, v11, (uint64_t *)v14, &v13);
  swift_unknownObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SHA256Digest.hash(into:)()
{
  return sub_1A5C41F0C();
}

uint64_t SHA256Digest.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C35060()
{
  return 32;
}

uint64_t sub_1A5C35068()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C350F4()
{
  return sub_1A5C41F0C();
}

uint64_t sub_1A5C35160()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

_QWORD *sub_1A5C351EC()
{
  uint64_t *v0;

  return sub_1A5C25DC0(*v0, v0[1], v0[2], v0[3]);
}

size_t sub_1A5C351F8(size_t *a1, _BYTE *a2, size_t a3)
{
  uint64_t *v3;

  return sub_1A5C24E98(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

BOOL sub_1A5C35204()
{
  return cc_cmp_safe() == 0;
}

uint64_t SHA384Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[3];
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = v3[1];
  v10[0] = *v3;
  v10[1] = v5;
  v10[2] = v3[2];
  v12 = a3;
  v13 = a1;
  v14 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECF97890);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECF979E0);
  return sub_1A5C34C7C((uint64_t)v10, (uint64_t)sub_1A5C36DC8, (uint64_t)v11, v6, v7, a3, MEMORY[0x1E0DEDB38], (uint64_t)&v9);
}

uint64_t sub_1A5C35340()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = *v0;
  v8[0] = MEMORY[0x1E0DEE9D8];
  sub_1A5C3F080((uint64_t)&v7, (char *)v8);
  v7 = v1;
  sub_1A5C3F080((uint64_t)&v7, (char *)v8);
  v7 = v2;
  sub_1A5C3F080((uint64_t)&v7, (char *)v8);
  v7 = v3;
  sub_1A5C3F080((uint64_t)&v7, (char *)v8);
  v7 = v4;
  sub_1A5C3F080((uint64_t)&v7, (char *)v8);
  v7 = v5;
  sub_1A5C3F080((uint64_t)&v7, (char *)v8);
  result = v8[0];
  if (*(_QWORD *)(v8[0] + 16) < 0x30uLL)
    __break(1u);
  return result;
}

uint64_t SHA384Digest.description.getter()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;
  unint64_t v16;

  v15 = 0x6420343833414853;
  v16 = 0xEF203A7473656769;
  v1 = v0[1];
  v14[0] = *v0;
  v14[1] = v1;
  v14[2] = v0[2];
  result = sub_1A5C35340();
  v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v8 = result;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  if (v7)
  {
    v12 = sub_1A5C41C00();
    *(_QWORD *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v13 = 0;
  *(_QWORD *)&v14[0] = v12;
  sub_1A5C41DC8();
  sub_1A5BFCCC4(v8, v9, v10, v11, (uint64_t *)v14, &v13);
  swift_unknownObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SHA384Digest.hash(into:)()
{
  return sub_1A5C41F0C();
}

uint64_t SHA384Digest.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C356D8()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C3576C()
{
  return sub_1A5C41F0C();
}

uint64_t sub_1A5C357E0()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C35870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA384Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_1A5C35888@<X0>(size_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  size_t result;
  _OWORD v5[3];
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  v5[2] = v1[2];
  result = sub_1A5BF1478((size_t)v5, (unint64_t)v6);
  *a1 = result;
  a1[1] = 0;
  return result;
}

_QWORD *sub_1A5C358FC()
{
  _OWORD *v0;
  __int128 v1;
  _OWORD v3[3];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  return sub_1A5C25F4C(v3);
}

size_t sub_1A5C3592C(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_1A5C24FF4(a1, a2, a3);
}

BOOL sub_1A5C35964()
{
  return cc_cmp_safe() == 0;
}

uint64_t SHA512Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[4];
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = v3[1];
  v11[0] = *v3;
  v11[1] = v5;
  v6 = v3[3];
  v11[2] = v3[2];
  v11[3] = v6;
  v13 = a3;
  v14 = a1;
  v15 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800160);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECF979E0);
  return sub_1A5C34C7C((uint64_t)v11, (uint64_t)sub_1A5C36E04, (uint64_t)v12, v7, v8, a3, MEMORY[0x1E0DEDB38], (uint64_t)&v10);
}

uint64_t sub_1A5C35AB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v9 = *v0;
  v10[0] = MEMORY[0x1E0DEE9D8];
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v1;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v2;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v3;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v4;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v5;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v6;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  v9 = v7;
  sub_1A5C3F080((uint64_t)&v9, (char *)v10);
  result = v10[0];
  if (*(_QWORD *)(v10[0] + 16) < 0x40uLL)
    __break(1u);
  return result;
}

uint64_t SHA512Digest.description.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  unint64_t v17;

  v16 = 0x6420323135414853;
  v17 = 0xEF203A7473656769;
  v1 = v0[1];
  v15[0] = *v0;
  v15[1] = v1;
  v2 = v0[3];
  v15[2] = v0[2];
  v15[3] = v2;
  result = sub_1A5C35AB0();
  v7 = (v6 >> 1) - v5;
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v7 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = 2 * v7;
  if (((2 * v7) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v9 = result;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  if (v8)
  {
    v13 = sub_1A5C41C00();
    *(_QWORD *)(v13 + 16) = v8;
    bzero((void *)(v13 + 32), v8);
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v14 = 0;
  *(_QWORD *)&v15[0] = v13;
  sub_1A5C41DC8();
  sub_1A5BFCCC4(v9, v10, v11, v12, (uint64_t *)v15, &v14);
  swift_unknownObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t SHA512Digest.hash(into:)()
{
  return sub_1A5C41F0C();
}

uint64_t SHA512Digest.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C35E88()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C35F28()
{
  return sub_1A5C41F0C();
}

uint64_t sub_1A5C35F9C()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C36038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA512Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

_QWORD *sub_1A5C36050()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v2 = v0[3];
  v4[2] = v0[2];
  v4[3] = v2;
  return sub_1A5C260E0(v4);
}

size_t sub_1A5C36080(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_1A5C25158(a1, a2, a3);
}

BOOL sub_1A5C360B8()
{
  return cc_cmp_safe() == 0;
}

uint64_t static Insecure.SHA1Digest.byteCount.getter()
{
  return 20;
}

uint64_t Insecure.SHA1Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)v3 + 2);
  v10 = *v3;
  v11 = v5;
  v13 = a3;
  v14 = a1;
  v15 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF976E8);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECF979E0);
  return sub_1A5C34C7C((uint64_t)&v10, (uint64_t)sub_1A5C36E40, (uint64_t)v12, v6, v7, a3, MEMORY[0x1E0DEDB38], (uint64_t)&v9);
}

uint64_t sub_1A5C3620C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v2 = v0[2];
  v4 = *v0;
  v5[0] = MEMORY[0x1E0DEE9D8];
  sub_1A5C3F080((uint64_t)&v4, (char *)v5);
  v4 = v1;
  sub_1A5C3F080((uint64_t)&v4, (char *)v5);
  v4 = v2;
  sub_1A5C3F080((uint64_t)&v4, (char *)v5);
  result = v5[0];
  if (*(_QWORD *)(v5[0] + 16) < 0x14uLL)
    __break(1u);
  return result;
}

uint64_t Insecure.SHA1Digest.description.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];

  v1 = *((_QWORD *)v0 + 2);
  strcpy((char *)v16, "SHA1 digest: ");
  HIWORD(v16[1]) = -4864;
  v14 = *v0;
  v15 = v1;
  result = sub_1A5C3620C();
  v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v8 = result;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  if (v7)
  {
    v12 = sub_1A5C41C00();
    *(_QWORD *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v13 = 0;
  *(_QWORD *)&v14 = v12;
  sub_1A5C41DC8();
  sub_1A5BFCCC4(v8, v9, v10, v11, (uint64_t *)&v14, &v13);
  swift_unknownObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t Insecure.SHA1Digest.hash(into:)()
{
  return sub_1A5C41F0C();
}

uint64_t Insecure.SHA1Digest.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C3654C()
{
  return 20;
}

uint64_t sub_1A5C36554()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C365E0()
{
  return sub_1A5C41F0C();
}

uint64_t sub_1A5C36654()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C366DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Insecure.SHA1Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_1A5C366F4@<X0>(size_t *a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  size_t result;
  __int128 v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)v1 + 2);
  v5 = *v1;
  v6[0] = v3;
  result = sub_1A5BF1478((size_t)&v5, (unint64_t)v6 + 4);
  *a1 = result;
  a1[1] = 0;
  return result;
}

_QWORD *sub_1A5C36768()
{
  uint64_t *v0;

  return sub_1A5C265A4(*v0, v0[1], v0[2]);
}

size_t sub_1A5C36774(size_t *a1, _BYTE *a2, size_t a3)
{
  uint64_t *v3;

  return sub_1A5C258BC(a1, a2, a3, *v3, v3[1], v3[2]);
}

BOOL sub_1A5C36780()
{
  return cc_cmp_safe() == 0;
}

uint64_t static Insecure.MD5Digest.byteCount.getter()
{
  return 16;
}

uint64_t Insecure.MD5Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = *v3;
  v11 = a3;
  v12 = a1;
  v13 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF976F0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECF979E0);
  return sub_1A5C34C7C((uint64_t)&v9, (uint64_t)sub_1A5C36E7C, (uint64_t)v10, v5, v6, a3, MEMORY[0x1E0DEDB38], (uint64_t)&v8);
}

uint64_t sub_1A5C368CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v1 = v0[1];
  v3 = *v0;
  v4[0] = MEMORY[0x1E0DEE9D8];
  sub_1A5C3F080((uint64_t)&v3, (char *)v4);
  v3 = v1;
  sub_1A5C3F080((uint64_t)&v3, (char *)v4);
  result = v4[0];
  if (*(_QWORD *)(v4[0] + 16) < 0x10uLL)
    __break(1u);
  return result;
}

uint64_t Insecure.MD5Digest.description.getter()
{
  __int128 *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];

  strcpy((char *)v14, "MD5 digest: ");
  BYTE5(v14[1]) = 0;
  HIWORD(v14[1]) = -5120;
  v13 = *v0;
  result = sub_1A5C368CC();
  v5 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((uint64_t)(v5 + 0x4000000000000000) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = 2 * v5;
  if (((2 * v5) & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v7 = result;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  if (v6)
  {
    v11 = sub_1A5C41C00();
    *(_QWORD *)(v11 + 16) = v6;
    bzero((void *)(v11 + 32), v6);
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = 0;
  *(_QWORD *)&v13 = v11;
  sub_1A5C41DC8();
  sub_1A5BFCCC4(v7, v8, v9, v10, (uint64_t *)&v13, &v12);
  swift_unknownObjectRelease();
  sub_1A5C41BF4();
  sub_1A5C41AE0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_1A5C41B04();
  swift_bridgeObjectRelease();
  return v14[0];
}

uint64_t Insecure.MD5Digest.hash(into:)()
{
  return sub_1A5C41F0C();
}

uint64_t Insecure.MD5Digest.hashValue.getter()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C36BD0()
{
  return 16;
}

uint64_t sub_1A5C36BD8()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C36C54()
{
  return sub_1A5C41F0C();
}

uint64_t sub_1A5C36CC0()
{
  sub_1A5C41F00();
  sub_1A5C41F0C();
  return sub_1A5C41F3C();
}

uint64_t sub_1A5C36D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Insecure.MD5Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

_QWORD *sub_1A5C36D50()
{
  uint64_t *v0;

  return sub_1A5C26730(*v0, v0[1]);
}

size_t sub_1A5C36D58(size_t *a1, _BYTE *a2, size_t a3)
{
  uint64_t *v3;

  return sub_1A5C25A18(a1, a2, a3, *v3, v3[1]);
}

BOOL sub_1A5C36D60()
{
  return cc_cmp_safe() == 0;
}

uint64_t sub_1A5C36DC8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1)
    v6 = a1 + 48;
  else
    v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_1A5C36E04(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1)
    v6 = a1 + 64;
  else
    v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_1A5C36E40(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1)
    v6 = a1 + 20;
  else
    v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_1A5C36E7C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  if (a1)
    v6 = a1 + 16;
  else
    v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4)
    *a3 = v4;
  return result;
}

unint64_t sub_1A5C36EB8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C11DF0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A5C36EDC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C37580(a1, a2, a3, (uint64_t (*)(void))sub_1A5C36F00, (uint64_t (*)(void))sub_1A5C36F44, (uint64_t (*)(void))sub_1A5C36F88, (uint64_t (*)(void))sub_1A5C36FCC);
}

unint64_t sub_1A5C36F00()
{
  unint64_t result;

  result = qword_1ECF97748;
  if (!qword_1ECF97748)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97748);
  }
  return result;
}

unint64_t sub_1A5C36F44()
{
  unint64_t result;

  result = qword_1ECF97768;
  if (!qword_1ECF97768)
  {
    result = MEMORY[0x1A85B3FE0]("YF3?dO", &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97768);
  }
  return result;
}

unint64_t sub_1A5C36F88()
{
  unint64_t result;

  result = qword_1ECF97750;
  if (!qword_1ECF97750)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97750);
  }
  return result;
}

unint64_t sub_1A5C36FCC()
{
  unint64_t result;

  result = qword_1ECF97760;
  if (!qword_1ECF97760)
  {
    result = MEMORY[0x1A85B3FE0]("AF3?<O", &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97760);
  }
  return result;
}

unint64_t sub_1A5C37014()
{
  unint64_t result;

  result = qword_1ECF97758;
  if (!qword_1ECF97758)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97758);
  }
  return result;
}

unint64_t sub_1A5C37058(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C11EA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A5C3707C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C37580(a1, a2, a3, (uint64_t (*)(void))sub_1A5C370A0, (uint64_t (*)(void))sub_1A5C370E4, (uint64_t (*)(void))sub_1A5C37128, (uint64_t (*)(void))sub_1A5C3716C);
}

unint64_t sub_1A5C370A0()
{
  unint64_t result;

  result = qword_1ECF97848;
  if (!qword_1ECF97848)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97848);
  }
  return result;
}

unint64_t sub_1A5C370E4()
{
  unint64_t result;

  result = qword_1ECF97868;
  if (!qword_1ECF97868)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97868);
  }
  return result;
}

unint64_t sub_1A5C37128()
{
  unint64_t result;

  result = qword_1ECF97850;
  if (!qword_1ECF97850)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97850);
  }
  return result;
}

unint64_t sub_1A5C3716C()
{
  unint64_t result;

  result = qword_1ECF97860;
  if (!qword_1ECF97860)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97860);
  }
  return result;
}

unint64_t sub_1A5C371B4()
{
  unint64_t result;

  result = qword_1ECF97858;
  if (!qword_1ECF97858)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_1ECF97858);
  }
  return result;
}

unint64_t sub_1A5C371F8(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C11F58();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A5C3721C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C37580(a1, a2, a3, (uint64_t (*)(void))sub_1A5C37240, (uint64_t (*)(void))sub_1A5C37284, (uint64_t (*)(void))sub_1A5C372C8, (uint64_t (*)(void))sub_1A5C3730C);
}

unint64_t sub_1A5C37240()
{
  unint64_t result;

  result = qword_1EE800138;
  if (!qword_1EE800138)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE800138);
  }
  return result;
}

unint64_t sub_1A5C37284()
{
  unint64_t result;

  result = qword_1EE800158;
  if (!qword_1EE800158)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE800158);
  }
  return result;
}

unint64_t sub_1A5C372C8()
{
  unint64_t result;

  result = qword_1EE800140;
  if (!qword_1EE800140)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE800140);
  }
  return result;
}

unint64_t sub_1A5C3730C()
{
  unint64_t result;

  result = qword_1EE800150;
  if (!qword_1EE800150)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE800150);
  }
  return result;
}

unint64_t sub_1A5C37354()
{
  unint64_t result;

  result = qword_1EE800148;
  if (!qword_1EE800148)
  {
    result = MEMORY[0x1A85B3FE0]("yC3?\\L", &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_1EE800148);
  }
  return result;
}

unint64_t sub_1A5C37398(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C1C624();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A5C373BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C37580(a1, a2, a3, (uint64_t (*)(void))sub_1A5C373E0, (uint64_t (*)(void))sub_1A5C37424, (uint64_t (*)(void))sub_1A5C37468, (uint64_t (*)(void))sub_1A5C374AC);
}

unint64_t sub_1A5C373E0()
{
  unint64_t result;

  result = qword_1EE801948;
  if (!qword_1EE801948)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.SHA1Digest, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801948);
  }
  return result;
}

unint64_t sub_1A5C37424()
{
  unint64_t result;

  result = qword_1EE801950;
  if (!qword_1EE801950)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.SHA1Digest, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801950);
  }
  return result;
}

unint64_t sub_1A5C37468()
{
  unint64_t result;

  result = qword_1EE801958;
  if (!qword_1EE801958)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.SHA1Digest, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801958);
  }
  return result;
}

unint64_t sub_1A5C374AC()
{
  unint64_t result;

  result = qword_1EE801960;
  if (!qword_1EE801960)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.SHA1Digest, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801960);
  }
  return result;
}

unint64_t sub_1A5C374F4()
{
  unint64_t result;

  result = qword_1EE801968;
  if (!qword_1EE801968)
  {
    result = MEMORY[0x1A85B3FE0]("!B3? K", &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801968);
  }
  return result;
}

unint64_t sub_1A5C37538(uint64_t a1)
{
  unint64_t result;

  result = sub_1A5C1C6B4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A5C3755C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C37580(a1, a2, a3, (uint64_t (*)(void))sub_1A5C375D0, (uint64_t (*)(void))sub_1A5C37614, (uint64_t (*)(void))sub_1A5C37658, (uint64_t (*)(void))sub_1A5C3769C);
}

uint64_t sub_1A5C37580(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_1A5C375D0()
{
  unint64_t result;

  result = qword_1EE801970;
  if (!qword_1EE801970)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5Digest, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801970);
  }
  return result;
}

unint64_t sub_1A5C37614()
{
  unint64_t result;

  result = qword_1EE801978;
  if (!qword_1EE801978)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5Digest, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801978);
  }
  return result;
}

unint64_t sub_1A5C37658()
{
  unint64_t result;

  result = qword_1EE801980;
  if (!qword_1EE801980)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5Digest, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801980);
  }
  return result;
}

unint64_t sub_1A5C3769C()
{
  unint64_t result;

  result = qword_1EE801988;
  if (!qword_1EE801988)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5Digest, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801988);
  }
  return result;
}

unint64_t sub_1A5C376E4()
{
  unint64_t result;

  result = qword_1EE801990;
  if (!qword_1EE801990)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for Insecure.MD5Digest, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_1EE801990);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SHA384Digest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SHA384Digest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SHA384Digest()
{
  return &type metadata for SHA384Digest;
}

uint64_t getEnumTagSinglePayload for SHA512Digest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SHA512Digest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

uint64_t _s10SHA1DigestVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s10SHA1DigestVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

uint64_t sub_1A5C37838(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_1A5C41E94();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1A5C41E94() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C378FC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return sub_1A5C41BF4();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return sub_1A5C41BF4();
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  sub_1A5C37944(a1, a2, a3, a4, a5);
}

void SecureEnclave.P256.Signing.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  sub_1A5C37944(a1, a2, a3, a4, a5);
}

void sub_1A5C37944(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;

  v10 = sub_1A5C37C64(&v19, a1, a2, a4, a3);
  if (v5)
  {

    sub_1A5BEFF90(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = (void *)v10;
    v14 = v11;
    v15 = v12;

    sub_1A5BEFF90(a1, a2);
    swift_bridgeObjectRelease();
    v16 = v19;
    v17 = v13;
    sub_1A5BEE468(v14, v15);
    sub_1A5BEFF90(v14, v15);
    v18 = v17;
    sub_1A5BEE468(v14, v15);

    sub_1A5BEFF90(v14, v15);
    *a5 = v16;
    a5[1] = v14;
    a5[2] = v15;
    a5[3] = v18;
  }
}

void sub_1A5C37A48()
{
  id v0;
  void *v1;
  id v2;

  sub_1A5C41AD4();
  v0 = objc_allocWithZone(MEMORY[0x1E0CA9AF8]);
  v1 = (void *)sub_1A5C41AC8();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithTokenID_, v1);

  qword_1EE805A80 = (uint64_t)v2;
}

uint64_t static SecureEnclave.isAvailable.getter()
{
  id v0;
  id v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA9B18]), sel_init);
  v1 = objc_msgSend(v0, sel_tokenIDs);
  v2 = (_QWORD *)sub_1A5C41BE8();

  v3 = sub_1A5C41AD4();
  v5 = sub_1A5C37838(v3, v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v5 & 1;
}

uint64_t sub_1A5C37B6C(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A5C37C64(a1, a2, a3, a4, a5);
}

void SecureEnclave.P256.Signing.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C37F70(a1, a2, a3, a4);
}

void SecureEnclave.P256.Signing.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C385B4(a1, a2, a3, a4);
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A5BEE468(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1A5C37C18(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A5C37C64(a1, a2, a3, a4, a5);
}

uint64_t sub_1A5C37C64(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5;
  void *v10;
  id v11;
  unint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t result;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v32[2];

  v32[1] = *(id *)MEMORY[0x1E0C80C00];
  if (qword_1EE800180 != -1)
    swift_once();
  v10 = (void *)qword_1EE805A80;
  v11 = (id)qword_1EE805A80;
  if (a5)
    v12 = a5;
  else
    v12 = sub_1A5C14C0C(MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  sub_1A5C38A20(v12);
  swift_bridgeObjectRelease();
  v32[0] = 0;
  v13 = objc_allocWithZone(MEMORY[0x1E0CA9B00]);
  v14 = a4;
  v15 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithToken_LAContext_parameters_error_, v10, v14, v15, v32);

  v17 = v32[0];
  if (v32[0])
  {
    v18 = v32[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v17;
  }
  v20 = (void *)sub_1A5C4199C();
  v32[0] = 0;
  v17 = objc_msgSend(v16, sel_objectForObjectID_error_, v20, v32);

  if (!v17)
  {
    v29 = v32[0];
    sub_1A5C418E8();

    swift_willThrow();
    goto LABEL_8;
  }
  v21 = v32[0];
  v22 = objc_msgSend(v17, sel_publicKey);
  if (!v22)
  {
    sub_1A5C3884C();
    swift_allocError();
    *(_QWORD *)v30 = 2;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();

    v16 = v17;
    goto LABEL_8;
  }
  v23 = v22;
  v24 = sub_1A5C419B4();
  v26 = v25;

  sub_1A5BEE468(v24, v26);
  sub_1A5C32E4C(v24, v26);
  if (!v5)
  {
    v28 = v27;
    sub_1A5BEFF90(v24, v26);

    *a1 = v28;
    sub_1A5BEE468(a2, a3);
    return (uint64_t)v17;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C37F70(a1, a2, a3, a4);
}

void sub_1A5C37F70(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  v9 = sub_1A5C37C64(&v18, a1, a2, a3, 0);
  if (v4)
  {

    sub_1A5BEFF90(a1, a2);
  }
  else
  {
    v12 = (void *)v9;
    v13 = v10;
    v14 = v11;

    sub_1A5BEFF90(a1, a2);
    v15 = v18;
    v16 = v12;
    sub_1A5BEE468(v13, v14);
    sub_1A5BEFF90(v13, v14);
    v17 = v16;
    sub_1A5BEE468(v13, v14);

    sub_1A5BEFF90(v13, v14);
    *a4 = v15;
    a4[1] = v13;
    a4[2] = v14;
    a4[3] = v17;
  }
}

uint64_t sub_1A5C38064(_QWORD *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  id v14;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  uint64_t inited;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v48[19];

  v48[17] = *(id *)MEMORY[0x1E0C80C00];
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA9B18]), sel_init);
  v8 = objc_msgSend(v7, sel_tokenIDs);
  v9 = (_QWORD *)sub_1A5C41BE8();

  v10 = sub_1A5C41AD4();
  v12 = (id)v11;
  v13 = sub_1A5C37838(v10, v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
  {
    sub_1A5C3884C();
    swift_allocError();
    *(_QWORD *)v20 = 0;
    *(_BYTE *)(v20 + 8) = 1;
    swift_willThrow();
    return (uint64_t)v12;
  }
  if (qword_1EE800180 != -1)
    swift_once();
  v14 = (id)qword_1EE805A80;
  v15 = sub_1A5C14C0C(MEMORY[0x1E0DEE9D8]);
  sub_1A5C38A20(v15);
  swift_bridgeObjectRelease();
  v48[0] = 0;
  v16 = objc_allocWithZone(MEMORY[0x1E0CA9B00]);
  v17 = a4;
  v18 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v16, sel_initWithToken_LAContext_parameters_error_, v14, v17, v18, v48);

  if (v48[0])
  {
    v19 = v48[0];
    swift_willThrow();

    return (uint64_t)v12;
  }
  v45 = v12;
  v43 = a1;
  v44 = (id)objc_opt_self();
  v22 = (void *)*MEMORY[0x1E0CD6890];
  type metadata accessor for CFString(0);
  v23 = 1000;
  sub_1A5C38890();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE8001A0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A5C44370;
    v48[0] = v22;
    v25 = v22;
    sub_1A5C41DF8();
    v26 = objc_msgSend(v44, sel_dataFromACL_, a3);
    v27 = sub_1A5C419B4();
    v29 = v28;

    *(_QWORD *)(inited + 96) = MEMORY[0x1E0CB0338];
    *(_QWORD *)(inited + 72) = v27;
    *(_QWORD *)(inited + 80) = v29;
    sub_1A5C14D24(inited);
    v30 = (void *)sub_1A5C41A2C();
    swift_bridgeObjectRelease();
    v48[0] = 0;
    v12 = objc_msgSend(v45, sel_createObjectWithAttributes_error_, v30, v48);

    if (!v12)
    {
      v12 = v48[0];
      sub_1A5C418E8();

      goto LABEL_19;
    }
    v31 = v48[0];
    v32 = objc_msgSend(v12, sel_publicKey);
    if (!v32)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }
    v33 = v32;
    v34 = sub_1A5C419B4();
    v36 = v35;

    if ((a2 & 1) == 0)
      break;
    v37 = (void *)sub_1A5C4199C();
    v38 = MEMORY[0x1A85B39C8]();
    if (!v38)
      goto LABEL_21;
    v39 = (void *)v38;
    v48[3] = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    v48[0] = v39;
    swift_dynamicCast();
    LODWORD(v39) = keyIsCompactRepresentable();

    if ((_DWORD)v39)
      break;
    sub_1A5BEFF90(v34, v36);

    if (!--v23)
    {
      sub_1A5C3884C();
      swift_allocError();
      *(_QWORD *)v40 = 3;
      *(_BYTE *)(v40 + 8) = 1;
LABEL_19:
      swift_willThrow();

      return (uint64_t)v12;
    }
  }
  v41 = objc_msgSend(v12, sel_objectID);
  sub_1A5C419B4();

  sub_1A5BEE468(v34, v36);
  sub_1A5C32E4C(v34, v36);
  if (!v4)
  {
    *v43 = v42;
    sub_1A5BEFF90(v34, v36);

    return (uint64_t)v12;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C385B4(a1, a2, a3, a4);
}

void sub_1A5C385B4(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  v8 = (void *)sub_1A5C38064(&v16, a1, (uint64_t)a2, a3);
  v10 = v9;
  v12 = v11;

  if (!v4)
  {
    v13 = v16;
    v14 = v8;
    sub_1A5BEE468(v10, v12);
    sub_1A5BEFF90(v10, v12);
    v15 = v14;
    sub_1A5BEE468(v10, v12);

    sub_1A5BEFF90(v10, v12);
    *a4 = v13;
    a4[1] = v10;
    a4[2] = v12;
    a4[3] = v15;
  }
}

ValueMetadata *type metadata accessor for SecureEnclave()
{
  return &type metadata for SecureEnclave;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256()
{
  return &type metadata for SecureEnclave.P256;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.Signing()
{
  return &type metadata for SecureEnclave.P256.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.P256.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement;
}

void _s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));

}

_QWORD *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_1A5C41BF4();
  sub_1A5BEE468(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = (void *)a2[3];
  a1[3] = v6;
  v7 = v6;
  return a1;
}

_QWORD *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  sub_1A5C41BF4();
  swift_bridgeObjectRelease();
  v4 = a2[1];
  v5 = a2[2];
  sub_1A5BEE468(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_1A5BEFF90(v6, v7);
  v8 = (void *)a2[3];
  v9 = (void *)a1[3];
  a1[3] = v8;
  v10 = v8;

  return a1;
}

_QWORD *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1A5BEFF90(v4, v5);
  v6 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey;
}

unint64_t sub_1A5C3884C()
{
  unint64_t result;

  result = qword_1EE801998;
  if (!qword_1EE801998)
  {
    result = MEMORY[0x1A85B3FE0](&unk_1A5C43494, &type metadata for CryptoTokenKitError);
    atomic_store(result, (unint64_t *)&qword_1EE801998);
  }
  return result;
}

unint64_t sub_1A5C38890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE800350;
  if (!qword_1EE800350)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1A85B3FE0](&unk_1A5C42A0C, v1);
    atomic_store(result, (unint64_t *)&qword_1EE800350);
  }
  return result;
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.publicKey.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return sub_1A5C41BF4();
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  sub_1A5C3891C(a1, a2, a3, a4, a5);
}

void SecureEnclave.P384.Signing.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  sub_1A5C3891C(a1, a2, a3, a4, a5);
}

void sub_1A5C3891C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;

  v10 = sub_1A5C38ED0(&v19, a1, a2, a4, a3);
  if (v5)
  {

    sub_1A5BEFF90(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = (void *)v10;
    v14 = v11;
    v15 = v12;

    sub_1A5BEFF90(a1, a2);
    swift_bridgeObjectRelease();
    v16 = v19;
    v17 = v13;
    sub_1A5BEE468(v14, v15);
    sub_1A5BEFF90(v14, v15);
    v18 = v17;
    sub_1A5BEE468(v14, v15);

    sub_1A5BEFF90(v14, v15);
    *a5 = v16;
    a5[1] = v14;
    a5[2] = v15;
    a5[3] = v18;
  }
}

uint64_t sub_1A5C38A20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE800198);
    v2 = sub_1A5C41E70();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  sub_1A5C41BF4();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = v17[1];
    *(_QWORD *)&v36[0] = *v17;
    *((_QWORD *)&v36[0] + 1) = v18;
    sub_1A5C41BF4();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    v32 = v28;
    v33 = v29;
    v34 = v30;
    sub_1A5C155D4(&v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    sub_1A5C155D4(v35, v36);
    sub_1A5C155D4(v36, &v32);
    result = sub_1A5C41DE0();
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)sub_1A5C155D4(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1A5C39988();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1A5C38DD8(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A5C38ED0(a1, a2, a3, a4, a5);
}

void SecureEnclave.P384.Signing.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C391DC(a1, a2, a3, a4);
}

void SecureEnclave.P384.Signing.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C39868(a1, a2, a3, a4);
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A5BEE468(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1A5C38E84(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A5C38ED0(a1, a2, a3, a4, a5);
}

uint64_t sub_1A5C38ED0(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5;
  void *v10;
  id v11;
  unint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t result;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v32[2];

  v32[1] = *(id *)MEMORY[0x1E0C80C00];
  if (qword_1EE800180 != -1)
    swift_once();
  v10 = (void *)qword_1EE805A80;
  v11 = (id)qword_1EE805A80;
  if (a5)
    v12 = a5;
  else
    v12 = sub_1A5C14C0C(MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  sub_1A5C38A20(v12);
  swift_bridgeObjectRelease();
  v32[0] = 0;
  v13 = objc_allocWithZone(MEMORY[0x1E0CA9B00]);
  v14 = a4;
  v15 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithToken_LAContext_parameters_error_, v10, v14, v15, v32);

  v17 = v32[0];
  if (v32[0])
  {
    v18 = v32[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v17;
  }
  v20 = (void *)sub_1A5C4199C();
  v32[0] = 0;
  v17 = objc_msgSend(v16, sel_objectForObjectID_error_, v20, v32);

  if (!v17)
  {
    v29 = v32[0];
    sub_1A5C418E8();

    swift_willThrow();
    goto LABEL_8;
  }
  v21 = v32[0];
  v22 = objc_msgSend(v17, sel_publicKey);
  if (!v22)
  {
    sub_1A5C3884C();
    swift_allocError();
    *(_QWORD *)v30 = 2;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();

    v16 = v17;
    goto LABEL_8;
  }
  v23 = v22;
  v24 = sub_1A5C419B4();
  v26 = v25;

  sub_1A5BEE468(v24, v26);
  sub_1A5C32EA4(v24, v26);
  if (!v5)
  {
    v28 = v27;
    sub_1A5BEFF90(v24, v26);

    *a1 = v28;
    sub_1A5BEE468(a2, a3);
    return (uint64_t)v17;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C391DC(a1, a2, a3, a4);
}

void sub_1A5C391DC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  v9 = sub_1A5C38ED0(&v18, a1, a2, a3, 0);
  if (v4)
  {

    sub_1A5BEFF90(a1, a2);
  }
  else
  {
    v12 = (void *)v9;
    v13 = v10;
    v14 = v11;

    sub_1A5BEFF90(a1, a2);
    v15 = v18;
    v16 = v12;
    sub_1A5BEE468(v13, v14);
    sub_1A5BEFF90(v13, v14);
    v17 = v16;
    sub_1A5BEE468(v13, v14);

    sub_1A5BEFF90(v13, v14);
    *a4 = v15;
    a4[1] = v13;
    a4[2] = v14;
    a4[3] = v17;
  }
}

uint64_t sub_1A5C392D0(_QWORD *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  id v14;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  uint64_t inited;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  id v46;
  id v47;
  id v50[28];

  v50[26] = *(id *)MEMORY[0x1E0C80C00];
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA9B18]), sel_init);
  v8 = objc_msgSend(v7, sel_tokenIDs);
  v9 = (_QWORD *)sub_1A5C41BE8();

  v10 = sub_1A5C41AD4();
  v12 = (id)v11;
  v13 = sub_1A5C37838(v10, v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
  {
    sub_1A5C3884C();
    swift_allocError();
    *(_QWORD *)v20 = 0;
    *(_BYTE *)(v20 + 8) = 1;
    swift_willThrow();
    return (uint64_t)v12;
  }
  if (qword_1EE800180 != -1)
    swift_once();
  v14 = (id)qword_1EE805A80;
  v15 = sub_1A5C14C0C(MEMORY[0x1E0DEE9D8]);
  sub_1A5C38A20(v15);
  swift_bridgeObjectRelease();
  v50[0] = 0;
  v16 = objc_allocWithZone(MEMORY[0x1E0CA9B00]);
  v17 = a4;
  v18 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v16, sel_initWithToken_LAContext_parameters_error_, v14, v17, v18, v50);

  if (v50[0])
  {
    v19 = v50[0];
    swift_willThrow();

    return (uint64_t)v12;
  }
  v47 = v12;
  v44 = a1;
  v46 = (id)objc_opt_self();
  v45 = (void *)*MEMORY[0x1E0CD6A20];
  v22 = (void *)*MEMORY[0x1E0CD6890];
  type metadata accessor for CFString(0);
  v23 = 1000;
  sub_1A5C38890();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE8001A0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A5C46250;
    v50[0] = v45;
    v25 = v45;
    sub_1A5C41DF8();
    *(_QWORD *)(inited + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(inited + 72) = 384;
    v50[0] = v22;
    v26 = v22;
    sub_1A5C41DF8();
    v27 = objc_msgSend(v46, sel_dataFromACL_, a3);
    v28 = sub_1A5C419B4();
    v30 = v29;

    *(_QWORD *)(inited + 168) = MEMORY[0x1E0CB0338];
    *(_QWORD *)(inited + 144) = v28;
    *(_QWORD *)(inited + 152) = v30;
    sub_1A5C14D24(inited);
    v31 = (void *)sub_1A5C41A2C();
    swift_bridgeObjectRelease();
    v50[0] = 0;
    v12 = objc_msgSend(v47, sel_createObjectWithAttributes_error_, v31, v50);

    if (!v12)
    {
      v12 = v50[0];
      sub_1A5C418E8();

      goto LABEL_19;
    }
    v32 = v50[0];
    v33 = objc_msgSend(v12, sel_publicKey);
    if (!v33)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }
    v34 = v33;
    v35 = sub_1A5C419B4();
    v37 = v36;

    if ((a2 & 1) == 0)
      break;
    v38 = (void *)sub_1A5C4199C();
    v39 = MEMORY[0x1A85B39D4]();
    if (!v39)
      goto LABEL_21;
    v40 = (void *)v39;
    v50[3] = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    v50[0] = v40;
    swift_dynamicCast();
    LODWORD(v40) = keyIsCompactRepresentable();

    if ((_DWORD)v40)
      break;
    sub_1A5BEFF90(v35, v37);

    if (!--v23)
    {
      sub_1A5C3884C();
      swift_allocError();
      *(_QWORD *)v41 = 3;
      *(_BYTE *)(v41 + 8) = 1;
LABEL_19:
      swift_willThrow();

      return (uint64_t)v12;
    }
  }
  v42 = objc_msgSend(v12, sel_objectID);
  sub_1A5C419B4();

  sub_1A5BEE468(v35, v37);
  sub_1A5C32EA4(v35, v37);
  if (!v4)
  {
    *v44 = v43;
    sub_1A5BEFF90(v35, v37);

    return (uint64_t)v12;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1A5C39868(a1, a2, a3, a4);
}

void sub_1A5C39868(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  v8 = (void *)sub_1A5C392D0(&v16, a1, (uint64_t)a2, a3);
  v10 = v9;
  v12 = v11;

  if (!v4)
  {
    v13 = v16;
    v14 = v8;
    sub_1A5BEE468(v10, v12);
    sub_1A5BEFF90(v10, v12);
    v15 = v14;
    sub_1A5BEE468(v10, v12);

    sub_1A5BEFF90(v10, v12);
    *a4 = v13;
    a4[1] = v10;
    a4[2] = v12;
    a4[3] = v15;
  }
}

ValueMetadata *type metadata accessor for SecureEnclave.P384()
{
  return &type metadata for SecureEnclave.P384;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.Signing()
{
  return &type metadata for SecureEnclave.P384.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.P384.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.KeyAgreement()
{
  return &type metadata for SecureEnclave.P384.KeyAgreement;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.P384.KeyAgreement.PrivateKey;
}

uint64_t sub_1A5C39988()
{
  return swift_release();
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.publicKey.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return sub_1A5C41BF4();
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  sub_1A5C399E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, unint64_t))sub_1A5C2B478, a5);
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(dataRepresentation:parameters:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  sub_1A5C399E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, unint64_t))sub_1A5C2A658, a5);
}

void sub_1A5C399E4(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t (*a5)(uint64_t, unint64_t)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;

  v11 = sub_1A5C39BE4(&v20, a1, a2, a4, a3, a5);
  if (v6)
  {

    sub_1A5BEFF90(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = (void *)v11;
    v15 = v12;
    v16 = v13;

    sub_1A5BEFF90(a1, a2);
    swift_bridgeObjectRelease();
    v17 = v20;
    v18 = v14;
    sub_1A5BEE468(v15, v16);
    sub_1A5BEFF90(v15, v16);
    v19 = v18;
    sub_1A5BEE468(v15, v16);

    sub_1A5BEFF90(v15, v16);
    *a6 = v17;
    a6[1] = v15;
    a6[2] = v16;
    a6[3] = (uint64_t)v19;
  }
}

uint64_t sub_1A5C39AEC(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A5C39BE4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, unint64_t))sub_1A5C2A658);
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  sub_1A5C39F00(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_1A5C2A658, a4);
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A5BEE468(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1A5C39B90(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_1A5C39BE4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, unint64_t))sub_1A5C2B478);
}

uint64_t sub_1A5C39BE4(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5, uint64_t (*a6)(uint64_t, unint64_t))
{
  uint64_t v6;
  id v11;
  id v12;
  unint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t result;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v33[2];

  v33[1] = *(id *)MEMORY[0x1E0C80C00];
  if (qword_1EE800180 != -1)
    swift_once();
  v11 = (id)qword_1EE805A80;
  v12 = (id)qword_1EE805A80;
  if (a5)
    v13 = a5;
  else
    v13 = sub_1A5C14C0C(MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  sub_1A5C38A20(v13);
  swift_bridgeObjectRelease();
  v33[0] = 0;
  v14 = objc_allocWithZone(MEMORY[0x1E0CA9B00]);
  v15 = a4;
  v16 = (void *)sub_1A5C41A2C();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_initWithToken_LAContext_parameters_error_, v11, v15, v16, v33);

  if (v33[0])
  {
    v18 = v33[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v11;
  }
  v20 = (void *)sub_1A5C4199C();
  v33[0] = 0;
  v11 = objc_msgSend(v17, sel_objectForObjectID_error_, v20, v33);

  if (!v11)
  {
    v29 = v33[0];
    sub_1A5C418E8();

    swift_willThrow();
    goto LABEL_8;
  }
  v21 = v33[0];
  v22 = objc_msgSend(v11, sel_publicKey);
  if (!v22)
  {
    sub_1A5C3884C();
    swift_allocError();
    *(_QWORD *)v30 = 2;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();

    v17 = v11;
    goto LABEL_8;
  }
  v23 = v22;
  v24 = sub_1A5C419B4();
  v26 = v25;

  sub_1A5BEE468(v24, v26);
  v27 = a6(v24, v26);
  if (!v6)
  {
    v28 = v27;
    sub_1A5BEFF90(v24, v26);

    *a1 = v28;
    sub_1A5BEE468(a2, a3);
    return (uint64_t)v11;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  sub_1A5C39F00(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_1A5C2B478, a4);
}

void sub_1A5C39F00(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, unint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;

  v10 = sub_1A5C39BE4(&v19, a1, a2, a3, 0, a4);
  if (v5)
  {

    sub_1A5BEFF90(a1, a2);
  }
  else
  {
    v13 = (void *)v10;
    v14 = v11;
    v15 = v12;

    sub_1A5BEFF90(a1, a2);
    v16 = v19;
    v17 = v13;
    sub_1A5BEE468(v14, v15);
    sub_1A5BEFF90(v14, v15);
    v18 = v17;
    sub_1A5BEE468(v14, v15);

    sub_1A5BEFF90(v14, v15);
    *a5 = v16;
    a5[1] = v14;
    a5[2] = v15;
    a5[3] = (uint64_t)v18;
  }
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519()
{
  return &type metadata for SecureEnclave.Curve25519;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.Signing()
{
  return &type metadata for SecureEnclave.Curve25519.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.Curve25519.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.KeyAgreement()
{
  return &type metadata for SecureEnclave.Curve25519.KeyAgreement;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.Curve25519.KeyAgreement.PrivateKey;
}

uint64_t sub_1A5C3A050@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3A158(a1, MEMORY[0x1E0C81C60], (uint64_t (*)(unint64_t, uint64_t, uint64_t, _QWORD *, unint64_t))sub_1A5C0188C, a2);
}

uint64_t sub_1A5C3A0A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3A158(a1, MEMORY[0x1E0C81C68], (uint64_t (*)(unint64_t, uint64_t, uint64_t, _QWORD *, unint64_t))sub_1A5C0188C, a2);
}

uint64_t sub_1A5C3A100@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3A158(a1, MEMORY[0x1E0C81C70], (uint64_t (*)(unint64_t, uint64_t, uint64_t, _QWORD *, unint64_t))sub_1A5C0188C, a2);
}

uint64_t sub_1A5C3A158@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(unint64_t, uint64_t, uint64_t, _QWORD *, unint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  _QWORD v16[6];

  v16[5] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *v4;
  v10 = a2();
  if (!v10)
LABEL_7:
    __break(1u);
  v11 = v10;
  v12 = (void *)objc_opt_self();
  v16[4] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  v16[1] = v11;
  swift_dynamicCast();
  v13 = (unint64_t)objc_msgSend(v12, sel_groupOrderByteCountForCP_, v16[0]);
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v14 = v13;
  swift_beginAccess();
  v16[0] = v14;
  result = a3(v14, v9 + 32, v8 + 32, v16, v14);
  if (!v5)
    *a4 = result;
  return result;
}

uint64_t sub_1A5C3A280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(_QWORD *, uint64_t *))
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[8];
  _QWORD v13[4];

  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  v13[3] = a4;
  result = a5();
  if (result)
  {
    v8 = result;
    v12[7] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    v12[4] = v8;
    swift_dynamicCast();
    v9 = getccec_full_ctx_size();
    MEMORY[0x1E0C80A78](v9);
    v12[2] = v13;
    v12[3] = v10;
    v11 = sub_1A5BEC704(v10, a6, (uint64_t)v12);
    swift_unknownObjectRelease();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C3A354(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  size_t v12;
  int v13;

  v4 = *a3;
  if (!*a3)
  {
    __break(1u);
    goto LABEL_15;
  }
  v6 = result;
  result = a4();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  result = swift_dynamicCast();
  if (!v6)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v7 = ccec_raw_import_priv_only();
  v13 = v7;
  if (v7)
  {
    v8 = v7;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v9 = v8;
    *(_BYTE *)(v9 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v10 = ccec_der_export_priv_size();
    if (v10)
    {
      v11 = (_QWORD *)sub_1A5BECAD4(v10);
    }
    else
    {
      if (qword_1ECF977F0 != -1)
        swift_once();
      v11 = off_1ECF977E8;
      swift_retain();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v12 = sub_1A5C0FFD4((uint64_t)v11);
      swift_release();
      v11 = (_QWORD *)v12;
    }
    swift_beginAccess();
    sub_1A5C3A500((uint64_t)(v11 + 4), (uint64_t)v11 + v11[2] + 32, &v13, v4, a4);
    return swift_release();
  }
}

uint64_t sub_1A5C3A500(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = ccec_der_export_priv();
  *a3 = v7;
  if (v7)
  {
    v8 = v7;
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v9 = v8;
    goto LABEL_7;
  }
  result = a5();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = ccec_der_import_priv();
  *a3 = result;
  if (!(_DWORD)result)
    return result;
  v10 = result;
  sub_1A5BF5E74();
  swift_allocError();
  *(_DWORD *)v9 = v10;
LABEL_7:
  *(_BYTE *)(v9 + 4) = 0;
  return swift_willThrow();
}

int64_t sub_1A5C3A63C(uint64_t a1, uint64_t (*a2)(void))
{
  const void *v3;
  int64_t result;
  void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (const void *)ccec_ctx_k((_QWORD **)(a1 + 32));
  result = a2();
  if (result)
  {
    v5 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    result = (int64_t)objc_msgSend(v5, sel_groupOrderByteCountForCP_, v9);
    if ((result & 0x8000000000000000) == 0)
    {
      v6 = sub_1A5C3A7E0(v3, result);
      v7 = sub_1A5C0FEEC(v6);
      swift_bridgeObjectRelease();
      v8 = sub_1A5C01410(v7);
      swift_release();
      return v8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C3A724(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1A5C268B8(a1, a2, a3);
  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5 < 2)
    return v4;
  v6 = 0;
  v7 = v5 >> 1;
  for (i = v5 + 3; ; --i)
  {
    if (v6 == i - 4)
      goto LABEL_5;
    v9 = *(_QWORD *)(v4 + 16);
    if (v6 >= v9)
      break;
    if (i - 4 >= v9)
      goto LABEL_12;
    v10 = *(_QWORD *)(v4 + 8 * v6 + 32);
    v11 = *(_QWORD *)(v4 + 8 * i);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A5C11874(v4);
      v4 = result;
    }
    *(_QWORD *)(v4 + 8 * v6 + 32) = v11;
    *(_QWORD *)(v4 + 8 * i) = v10;
LABEL_5:
    if (v7 == ++v6)
      return v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1A5C3A7E0(const void *a1, int64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t i;
  unint64_t v8;
  char v9;
  char v10;

  result = (uint64_t)sub_1A5C01168(a1, a2);
  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4 < 2)
    return v3;
  v5 = 0;
  v6 = v4 >> 1;
  for (i = v4 + 31; ; --i)
  {
    if (v5 == i - 32)
      goto LABEL_5;
    v8 = *(_QWORD *)(v3 + 16);
    if (v5 >= v8)
      break;
    if (i - 32 >= v8)
      goto LABEL_12;
    v9 = *(_BYTE *)(v3 + v5 + 32);
    v10 = *(_BYTE *)(v3 + i);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A5C11888(v3);
      v3 = result;
    }
    *(_BYTE *)(v3 + v5 + 32) = v10;
    *(_BYTE *)(v3 + i) = v9;
LABEL_5:
    if (v6 == ++v5)
      return v3;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1A5C3A89C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  int IsCompactRepresentable;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1A5C41BF4();
  v4 = ccec_export_pub_size();
  v5 = sub_1A5C41C00();
  *(_QWORD *)(v5 + 16) = v4;
  ccec_export_pub();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = sub_1A5BEBFDC(v5);
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = (void *)sub_1A5C4199C();
  v10 = sub_1A5BEFF90(v6, v8);
  result = a2(v10);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    IsCompactRepresentable = keyIsCompactRepresentable();

    if (IsCompactRepresentable)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1A5C11888(a1);
      v13 = ccec_compact_export_size();
      if (v13)
      {
        v14 = sub_1A5C41C00();
        *(_QWORD *)(v14 + 16) = v13;
      }
      else
      {
        v14 = MEMORY[0x1E0DEE9D8];
      }
      ccec_compact_export_pub();
      *(_QWORD *)(v14 + 16) = v13;
      v15 = sub_1A5BEBFDC(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A5C3AA3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a2())
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1A5C3AB24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  v2 = ccec_compressed_x962_export_pub_size();
  if (v2 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = v2;
  if (v2)
  {
    v4 = sub_1A5C41C00();
    *(_QWORD *)(v4 + 16) = v3;
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  if (ccec_compressed_x962_export_pub())
    goto LABEL_9;
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t P256.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3D180(a1, MEMORY[0x1E0C81C60], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C0172C, a2);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04950, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3D180(a1, MEMORY[0x1E0C81C68], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01748, a2);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04950, a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3D180(a1, MEMORY[0x1E0C81C70], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01764, a2);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04950, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04950, a4);
}

uint64_t P384.Signing.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04950, a4);
}

uint64_t P521.Signing.PublicKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04950, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, sub_1A5C04F14, a4);
}

uint64_t P256.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04BE0, a4);
}

uint64_t P256.Signing.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D764(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333B0, a3);
}

uint64_t P256.Signing.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D954(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333B0, a3);
}

uint64_t P256.Signing.PublicKey.derRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EE800118 != -1)
    swift_once();
  v0 = qword_1EE805A58;
  v1 = unk_1EE805A60;
  v13 = xmmword_1EE805A68;
  v2 = qword_1EE805A78;
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  ccec_export_pub();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v5, v7);
  v9 = v8;
  sub_1A5BEFF90(v5, v7);
  v10 = (2 * *(_QWORD *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  v16 = v13;
  v17 = v2;
  v18 = v9;
  v19 = v9 + 32;
  v20 = 0;
  v21 = v10;
  v14 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A5C2801C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_1A5BEBFDC((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P256.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_1A5C3B5AC(P256.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P256.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3D180(a1, MEMORY[0x1E0C81C60], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C0172C, a2);
}

uint64_t P256.Signing.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04E6C, a4);
}

uint64_t P256.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C3B6B4(a1, a2, a3);
}

uint64_t P256.Signing.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3B730(a1, a2, MEMORY[0x1E0C81C60], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E8B8, a3);
}

void P256.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A5C3BAB8(a1, a2, MEMORY[0x1E0C81C60], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E8B8, a3);
}

uint64_t P256.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  _OWORD v29[2];
  _BYTE v30[40];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v1 = *v0;
  if (qword_1EE800118 != -1)
    swift_once();
  v2 = qword_1EE805A58;
  v3 = unk_1EE805A60;
  v4 = xmmword_1EE805A68;
  v5 = qword_1EE805A78;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C3A63C(v1, MEMORY[0x1E0C81C60]);
  v8 = v7;
  swift_release();
  sub_1A5C29738(v6, v8);
  v10 = v9;
  v11 = sub_1A5BEFF90(v6, v8);
  v12 = MEMORY[0x1A85B39C8](v11);
  if (!v12)
    goto LABEL_10;
  v13 = v12;
  *((_QWORD *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v36 = v13;
  swift_retain();
  swift_dynamicCast();
  v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v15 = v14;
  if (v14)
  {
    v16 = sub_1A5C41C00();
    *(_QWORD *)(v16 + 16) = v15;
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(_QWORD *)(v16 + 16) = v15;
  swift_release();
  v17 = ccec_export_pub_size();
  v18 = sub_1A5C41C00();
  *(_QWORD *)(v18 + 16) = v17;
  ccec_export_pub();
  *(_QWORD *)(v18 + 16) = v17;
  v19 = sub_1A5BEBFDC(v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v19, v21);
  v23 = v22;
  sub_1A5BEFF90(v19, v21);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = (2 * *(_QWORD *)(v10 + 16)) | 1;
  *(_QWORD *)&v29[0] = v2;
  *((_QWORD *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(_QWORD *)v30 = v5;
  memset(&v30[8], 0, 32);
  v31 = 0;
  *(_QWORD *)&v32 = v10;
  *((_QWORD *)&v32 + 1) = v10 + 32;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = v25;
  *(_QWORD *)&v34 = v23;
  *((_QWORD *)&v34 + 1) = v23 + 32;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = (2 * v24) | 1;
  v38 = *(_OWORD *)v30;
  v39 = *(_OWORD *)&v30[16];
  v36 = v29[0];
  v37 = v4;
  v43 = v34;
  v44 = v35;
  v41 = v32;
  v42 = v33;
  v40 = 0uLL;
  v28 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C3E688((uint64_t)v29);
  sub_1A5C283B0(48, &v28, (char *)&v36);
  sub_1A5C19470((uint64_t)v29);
  v26 = sub_1A5BEBFDC((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_1A5C19470((uint64_t)v29);
  return v26;
}

uint64_t P256.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_1A5C3C030(P256.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, sub_1A5BEBC10, a4);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, sub_1A5C04F14, a4);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04BE0, a4);
}

uint64_t P256.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D764(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333B0, a3);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D954(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333B0, a3);
}

uint64_t P256.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3A89C(*v0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C60]);
}

uint64_t P256.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3AA3C(*v0, MEMORY[0x1E0C81C60]);
}

uint64_t P256.KeyAgreement.PublicKey.derRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EE800118 != -1)
    swift_once();
  v0 = qword_1EE805A58;
  v1 = unk_1EE805A60;
  v13 = xmmword_1EE805A68;
  v2 = qword_1EE805A78;
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  ccec_export_pub();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v5, v7);
  v9 = v8;
  sub_1A5BEFF90(v5, v7);
  v10 = (2 * *(_QWORD *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  v16 = v13;
  v17 = v2;
  v18 = v9;
  v19 = v9 + 32;
  v20 = 0;
  v21 = v10;
  v14 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A5C2801C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_1A5BEBFDC((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P256.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_1A5C3B5AC(P256.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t sub_1A5C3B5AC(uint64_t (*a1)(void))
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = a1();
  v3 = v2;
  v4 = sub_1A5C021B8(0x4B2043494C425550uLL);
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(v1, v3);
  return v4;
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04E6C, a4);
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5BEBBCC, (uint64_t)&type metadata for P256, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BEC630, a4);
}

uint64_t P256.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C3B6B4(a1, a2, a3);
}

uint64_t sub_1A5C3B6B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_1A5C3E448(a1, a2);
  v8 = v7;
  result = sub_1A5BEFF90(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t P256.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3B730(a1, a2, MEMORY[0x1E0C81C60], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E8B8, a3);
}

uint64_t sub_1A5C3B730@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(_QWORD *, uint64_t *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32[56];
  uint64_t v33[13];
  unsigned __int8 v34[56];
  _OWORD v35[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  result = sub_1A5C02DB4(a1, a2);
  if (!v5)
  {
    v13 = result;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    if (result == 0x4156495250204345 && v10 == 0xEE0059454B204554 || (sub_1A5C41E94() & 1) != 0)
    {
      sub_1A5BEE468(v15, v16);
      sub_1A5C29738(v15, v16);
      v18 = v17;
      sub_1A5BEFF90(v15, v16);
      sub_1A5C274FC(v18, v18 + 32, 0, (2 * *(_QWORD *)(v18 + 16)) | 1, (uint64_t)v32);
      swift_release();
      sub_1A5C2CAD4(v32, 0x30u, (uint64_t)v33);
      v19 = v33[6];
      v20 = v33[7];
      v21 = v33[8];
      v22 = swift_unknownObjectRetain();
      v30 = sub_1A5C3A280(v22, v19, v20, v21, a3, a4);
      swift_bridgeObjectRelease();
      sub_1A5BEFF90(v15, v16);
      result = (uint64_t)sub_1A5C193D8(v33);
      *a5 = v30;
    }
    else if (v13 == 0x2045544156495250 && v14 == 0xEB0000000059454BLL || (sub_1A5C41E94() & 1) != 0)
    {
      sub_1A5BEE468(v15, v16);
      sub_1A5C29738(v15, v16);
      v24 = v23;
      sub_1A5BEFF90(v15, v16);
      sub_1A5C274FC(v24, v24 + 32, 0, (2 * *(_QWORD *)(v24 + 16)) | 1, (uint64_t)v34);
      swift_release();
      sub_1A5C1915C(v34, 0x30u, v35);
      v25 = v36;
      v26 = v37;
      v27 = v38;
      v28 = swift_unknownObjectRetain();
      v31 = sub_1A5C3A280(v28, v25, v26, v27, a3, a4);
      swift_bridgeObjectRelease();
      sub_1A5BEFF90(v15, v16);
      result = sub_1A5C19470((uint64_t)v35);
      *a5 = v31;
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v29 = 7;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_1A5BEFF90(v15, v16);
    }
  }
  return result;
}

void P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A5C3BAB8(a1, a2, MEMORY[0x1E0C81C60], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E8B8, a3);
}

void sub_1A5C3BAB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(_QWORD *, uint64_t *)@<X4>, uint64_t *a5@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t (*v27)(void);
  unsigned __int8 v28[56];
  _OWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33[56];
  uint64_t v34[14];
  uint64_t (*v35)(_QWORD *, uint64_t *);

  v35 = a4;
  v27 = a3;
  v6 = v5;
  v10 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v11);
  v13 = sub_1A5C41C0C();
  v14 = (2 * *(_QWORD *)(v13 + 16)) | 1;
  sub_1A5C274FC(v13, v13 + 32, 0, v14, (uint64_t)v28);
  v26 = a5;
  if (v5)
  {
    sub_1A5C274FC(v13, v13 + 32, 0, v14, (uint64_t)v33);
    swift_bridgeObjectRelease();
    sub_1A5C2CAD4(v33, 0x30u, (uint64_t)v34);
    v18 = v34[6];
    v19 = v34[7];
    v20 = v34[8];
    v21 = swift_unknownObjectRetain();
    v22 = sub_1A5C3A280(v21, v18, v19, v20, v27, v35);

    sub_1A5C193D8(v34);
    v23 = v22;
  }
  else
  {
    sub_1A5C1915C(v28, 0x30u, v29);
    v15 = v30;
    v16 = v31;
    v25 = v32;
    v17 = swift_unknownObjectRetain();
    v23 = sub_1A5C3A280(v17, v15, v16, v25, v27, v35);
    swift_bridgeObjectRelease();
    sub_1A5C19470((uint64_t)v29);
  }
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
  *v26 = v23;
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BEBA08(MEMORY[0x1E0C81C60], a1);
}

int64_t P256.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3A63C(*v0, MEMORY[0x1E0C81C60]);
}

uint64_t P256.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  _OWORD v29[2];
  _BYTE v30[40];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v1 = *v0;
  if (qword_1EE800118 != -1)
    swift_once();
  v2 = qword_1EE805A58;
  v3 = unk_1EE805A60;
  v4 = xmmword_1EE805A68;
  v5 = qword_1EE805A78;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C3A63C(v1, MEMORY[0x1E0C81C60]);
  v8 = v7;
  swift_release();
  sub_1A5C29738(v6, v8);
  v10 = v9;
  v11 = sub_1A5BEFF90(v6, v8);
  v12 = MEMORY[0x1A85B39C8](v11);
  if (!v12)
    goto LABEL_10;
  v13 = v12;
  *((_QWORD *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v36 = v13;
  swift_retain();
  swift_dynamicCast();
  v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v15 = v14;
  if (v14)
  {
    v16 = sub_1A5C41C00();
    *(_QWORD *)(v16 + 16) = v15;
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(_QWORD *)(v16 + 16) = v15;
  swift_release();
  v17 = ccec_export_pub_size();
  v18 = sub_1A5C41C00();
  *(_QWORD *)(v18 + 16) = v17;
  ccec_export_pub();
  *(_QWORD *)(v18 + 16) = v17;
  v19 = sub_1A5BEBFDC(v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v19, v21);
  v23 = v22;
  sub_1A5BEFF90(v19, v21);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = (2 * *(_QWORD *)(v10 + 16)) | 1;
  *(_QWORD *)&v29[0] = v2;
  *((_QWORD *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(_QWORD *)v30 = v5;
  memset(&v30[8], 0, 32);
  v31 = 0;
  *(_QWORD *)&v32 = v10;
  *((_QWORD *)&v32 + 1) = v10 + 32;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = v25;
  *(_QWORD *)&v34 = v23;
  *((_QWORD *)&v34 + 1) = v23 + 32;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = (2 * v24) | 1;
  v38 = *(_OWORD *)v30;
  v39 = *(_OWORD *)&v30[16];
  v36 = v29[0];
  v37 = v4;
  v43 = v34;
  v44 = v35;
  v41 = v32;
  v42 = v33;
  v40 = 0uLL;
  v28 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C3E688((uint64_t)v29);
  sub_1A5C283B0(48, &v28, (char *)&v36);
  sub_1A5C19470((uint64_t)v29);
  v26 = sub_1A5BEBFDC((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_1A5C19470((uint64_t)v29);
  return v26;
}

uint64_t P256.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_1A5C3C030(P256.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t sub_1A5C3C030(uint64_t (*a1)(void))
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = a1();
  v3 = v2;
  v4 = sub_1A5C021B8(0x2045544156495250uLL);
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(v1, v3);
  return v4;
}

uint64_t P384.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, sub_1A5BEBC10, a4);
}

uint64_t P384.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, sub_1A5C04F14, a4);
}

uint64_t P384.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04BE0, a4);
}

uint64_t P384.Signing.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D764(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333D4, a3);
}

uint64_t P384.Signing.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D954(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333D4, a3);
}

uint64_t P384.Signing.PublicKey.derRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EE800FC8 != -1)
    swift_once();
  v0 = qword_1EE805A90;
  v1 = *(_QWORD *)algn_1EE805A98;
  v13 = xmmword_1EE805AA0;
  v2 = qword_1EE805AB0;
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  ccec_export_pub();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v5, v7);
  v9 = v8;
  sub_1A5BEFF90(v5, v7);
  v10 = (2 * *(_QWORD *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  v16 = v13;
  v17 = v2;
  v18 = v9;
  v19 = v9 + 32;
  v20 = 0;
  v21 = v10;
  v14 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A5C2801C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_1A5BEBFDC((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P384.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_1A5C3B5AC(P384.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P384.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3D180(a1, MEMORY[0x1E0C81C68], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01748, a2);
}

uint64_t P384.Signing.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04E6C, a4);
}

uint64_t P384.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BEC630, a4);
}

uint64_t P384.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C3B6B4(a1, a2, a3);
}

uint64_t P384.Signing.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3B730(a1, a2, MEMORY[0x1E0C81C68], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E898, a3);
}

void P384.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A5C3BAB8(a1, a2, MEMORY[0x1E0C81C68], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E898, a3);
}

uint64_t P384.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BEBA08(MEMORY[0x1E0C81C68], a1);
}

uint64_t P384.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  _OWORD v29[2];
  _BYTE v30[40];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v1 = *v0;
  if (qword_1EE800FC8 != -1)
    swift_once();
  v2 = qword_1EE805A90;
  v3 = *(_QWORD *)algn_1EE805A98;
  v4 = xmmword_1EE805AA0;
  v5 = qword_1EE805AB0;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C3A63C(v1, MEMORY[0x1E0C81C68]);
  v8 = v7;
  swift_release();
  sub_1A5C29738(v6, v8);
  v10 = v9;
  v11 = sub_1A5BEFF90(v6, v8);
  v12 = MEMORY[0x1A85B39D4](v11);
  if (!v12)
    goto LABEL_10;
  v13 = v12;
  *((_QWORD *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v36 = v13;
  swift_retain();
  swift_dynamicCast();
  v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v15 = v14;
  if (v14)
  {
    v16 = sub_1A5C41C00();
    *(_QWORD *)(v16 + 16) = v15;
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(_QWORD *)(v16 + 16) = v15;
  swift_release();
  v17 = ccec_export_pub_size();
  v18 = sub_1A5C41C00();
  *(_QWORD *)(v18 + 16) = v17;
  ccec_export_pub();
  *(_QWORD *)(v18 + 16) = v17;
  v19 = sub_1A5BEBFDC(v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v19, v21);
  v23 = v22;
  sub_1A5BEFF90(v19, v21);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = (2 * *(_QWORD *)(v10 + 16)) | 1;
  *(_QWORD *)&v29[0] = v2;
  *((_QWORD *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(_QWORD *)v30 = v5;
  memset(&v30[8], 0, 32);
  v31 = 0;
  *(_QWORD *)&v32 = v10;
  *((_QWORD *)&v32 + 1) = v10 + 32;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = v25;
  *(_QWORD *)&v34 = v23;
  *((_QWORD *)&v34 + 1) = v23 + 32;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = (2 * v24) | 1;
  v38 = *(_OWORD *)v30;
  v39 = *(_OWORD *)&v30[16];
  v36 = v29[0];
  v37 = v4;
  v43 = v34;
  v44 = v35;
  v41 = v32;
  v42 = v33;
  v40 = 0uLL;
  v28 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C3E688((uint64_t)v29);
  sub_1A5C283B0(48, &v28, (char *)&v36);
  sub_1A5C19470((uint64_t)v29);
  v26 = sub_1A5BEBFDC((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_1A5C19470((uint64_t)v29);
  return v26;
}

uint64_t P384.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_1A5C3C030(P384.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, sub_1A5BEBC10, a4);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, sub_1A5C04F14, a4);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04BE0, a4);
}

uint64_t P384.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D764(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333D4, a3);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D954(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C333D4, a3);
}

uint64_t P384.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3A89C(*v0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C68]);
}

uint64_t P384.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3AA3C(*v0, MEMORY[0x1E0C81C68]);
}

uint64_t P384.KeyAgreement.PublicKey.derRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EE800FC8 != -1)
    swift_once();
  v0 = qword_1EE805A90;
  v1 = *(_QWORD *)algn_1EE805A98;
  v13 = xmmword_1EE805AA0;
  v2 = qword_1EE805AB0;
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  ccec_export_pub();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v5, v7);
  v9 = v8;
  sub_1A5BEFF90(v5, v7);
  v10 = (2 * *(_QWORD *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  v16 = v13;
  v17 = v2;
  v18 = v9;
  v19 = v9 + 32;
  v20 = 0;
  v21 = v10;
  v14 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A5C2801C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_1A5BEBFDC((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P384.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_1A5C3B5AC(P384.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t P384.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04E6C, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E3C0, (uint64_t)&type metadata for P384, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BEC630, a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C3B6B4(a1, a2, a3);
}

uint64_t P384.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3B730(a1, a2, MEMORY[0x1E0C81C68], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E898, a3);
}

void P384.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A5C3BAB8(a1, a2, MEMORY[0x1E0C81C68], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E898, a3);
}

uint64_t P384.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BEBA08(MEMORY[0x1E0C81C68], a1);
}

int64_t P384.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3A63C(*v0, MEMORY[0x1E0C81C68]);
}

uint64_t P384.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  _OWORD v29[2];
  _BYTE v30[40];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v1 = *v0;
  if (qword_1EE800FC8 != -1)
    swift_once();
  v2 = qword_1EE805A90;
  v3 = *(_QWORD *)algn_1EE805A98;
  v4 = xmmword_1EE805AA0;
  v5 = qword_1EE805AB0;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C3A63C(v1, MEMORY[0x1E0C81C68]);
  v8 = v7;
  swift_release();
  sub_1A5C29738(v6, v8);
  v10 = v9;
  v11 = sub_1A5BEFF90(v6, v8);
  v12 = MEMORY[0x1A85B39D4](v11);
  if (!v12)
    goto LABEL_10;
  v13 = v12;
  *((_QWORD *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v36 = v13;
  swift_retain();
  swift_dynamicCast();
  v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v15 = v14;
  if (v14)
  {
    v16 = sub_1A5C41C00();
    *(_QWORD *)(v16 + 16) = v15;
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(_QWORD *)(v16 + 16) = v15;
  swift_release();
  v17 = ccec_export_pub_size();
  v18 = sub_1A5C41C00();
  *(_QWORD *)(v18 + 16) = v17;
  ccec_export_pub();
  *(_QWORD *)(v18 + 16) = v17;
  v19 = sub_1A5BEBFDC(v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v19, v21);
  v23 = v22;
  sub_1A5BEFF90(v19, v21);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = (2 * *(_QWORD *)(v10 + 16)) | 1;
  *(_QWORD *)&v29[0] = v2;
  *((_QWORD *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(_QWORD *)v30 = v5;
  memset(&v30[8], 0, 32);
  v31 = 0;
  *(_QWORD *)&v32 = v10;
  *((_QWORD *)&v32 + 1) = v10 + 32;
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = v25;
  *(_QWORD *)&v34 = v23;
  *((_QWORD *)&v34 + 1) = v23 + 32;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = (2 * v24) | 1;
  v38 = *(_OWORD *)v30;
  v39 = *(_OWORD *)&v30[16];
  v36 = v29[0];
  v37 = v4;
  v43 = v34;
  v44 = v35;
  v41 = v32;
  v42 = v33;
  v40 = 0uLL;
  v28 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C3E688((uint64_t)v29);
  sub_1A5C283B0(48, &v28, (char *)&v36);
  sub_1A5C19470((uint64_t)v29);
  v26 = sub_1A5BEBFDC((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_1A5C19470((uint64_t)v29);
  return v26;
}

uint64_t P384.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_1A5C3C030(P384.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t P521.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, sub_1A5BEBC10, a4);
}

uint64_t P521.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, sub_1A5C04F14, a4);
}

uint64_t P521.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04BE0, a4);
}

uint64_t P521.Signing.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D764(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C33560, a3);
}

uint64_t P521.Signing.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D954(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C33560, a3);
}

uint64_t _s9CryptoKit4P256O12KeyAgreementO06PublicD0V18x963Representation10Foundation4DataVvg_0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = ccec_export_pub_size();
  v1 = sub_1A5C41C00();
  *(_QWORD *)(v1 + 16) = v0;
  ccec_export_pub();
  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_1A5BEBFDC(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t P521.Signing.PublicKey.derRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EE800FD0 != -1)
    swift_once();
  v0 = qword_1EE805AB8;
  v1 = unk_1EE805AC0;
  v13 = xmmword_1EE805AC8;
  v2 = qword_1EE805AD8;
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  ccec_export_pub();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v5, v7);
  v9 = v8;
  sub_1A5BEFF90(v5, v7);
  v10 = (2 * *(_QWORD *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  v16 = v13;
  v17 = v2;
  v18 = v9;
  v19 = v9 + 32;
  v20 = 0;
  v21 = v10;
  v14 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A5C2801C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_1A5BEBFDC((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P521.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_1A5C3B5AC(P521.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P521.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_1A5C3D180(a1, MEMORY[0x1E0C81C70], (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1A5C01764, a2);
}

uint64_t sub_1A5C3D180@<X0>(char a1@<W0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t, _QWORD, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;

  result = a2();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
    swift_dynamicCast();
    v8 = getccec_full_ctx_size();
    result = a3(v8, a1 & 1, v8);
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t P521.Signing.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04E6C, a4);
}

uint64_t P521.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BEC630, a4);
}

uint64_t P521.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C3B6B4(a1, a2, a3);
}

uint64_t P521.Signing.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3B730(a1, a2, MEMORY[0x1E0C81C70], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E858, a3);
}

void P521.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A5C3BAB8(a1, a2, MEMORY[0x1E0C81C70], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E858, a3);
}

uint64_t P521.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BEBA08(MEMORY[0x1E0C81C70], a1);
}

uint64_t P521.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char *v27;
  _OWORD v28[2];
  _BYTE v29[40];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v1 = *v0;
  if (qword_1EE800FD0 != -1)
    swift_once();
  v2 = qword_1EE805AB8;
  v3 = unk_1EE805AC0;
  v4 = xmmword_1EE805AC8;
  v5 = qword_1EE805AD8;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C3A63C(v1, MEMORY[0x1E0C81C70]);
  v8 = v7;
  swift_release();
  sub_1A5C29738(v6, v8);
  v10 = v9;
  sub_1A5BEFF90(v6, v8);
  v11 = ccec_cp_521();
  if (!v11)
    goto LABEL_10;
  v12 = v11;
  *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v35 = v12;
  swift_retain();
  swift_dynamicCast();
  v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v14 = v13;
  if (v13)
  {
    v15 = sub_1A5C41C00();
    *(_QWORD *)(v15 + 16) = v14;
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(_QWORD *)(v15 + 16) = v14;
  swift_release();
  v16 = ccec_export_pub_size();
  v17 = sub_1A5C41C00();
  *(_QWORD *)(v17 + 16) = v16;
  ccec_export_pub();
  *(_QWORD *)(v17 + 16) = v16;
  v18 = sub_1A5BEBFDC(v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v18, v20);
  v22 = v21;
  sub_1A5BEFF90(v18, v20);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = (2 * *(_QWORD *)(v10 + 16)) | 1;
  *(_QWORD *)&v28[0] = v2;
  *((_QWORD *)&v28[0] + 1) = v3;
  v28[1] = v4;
  *(_QWORD *)v29 = v5;
  memset(&v29[8], 0, 32);
  v30 = 0;
  *(_QWORD *)&v31 = v10;
  *((_QWORD *)&v31 + 1) = v10 + 32;
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = v24;
  *(_QWORD *)&v33 = v22;
  *((_QWORD *)&v33 + 1) = v22 + 32;
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = (2 * v23) | 1;
  v37 = *(_OWORD *)v29;
  v38 = *(_OWORD *)&v29[16];
  v35 = v28[0];
  v36 = v4;
  v42 = v33;
  v43 = v34;
  v40 = v31;
  v41 = v32;
  v39 = 0uLL;
  v27 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C3E688((uint64_t)v28);
  sub_1A5C283B0(48, &v27, (char *)&v35);
  sub_1A5C19470((uint64_t)v28);
  v25 = sub_1A5BEBFDC((uint64_t)v27);
  swift_bridgeObjectRelease();
  sub_1A5C19470((uint64_t)v28);
  return v25;
}

uint64_t P521.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_1A5C3C030(P521.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, sub_1A5BEBC10, a4);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, sub_1A5C04F14, a4);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5C3D664(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04BE0, a4);
}

uint64_t sub_1A5C3D664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;

  v22 = a7;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78]();
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a2);
  v18 = a4(v17);
  v19 = a6(v16, a5, a2, v18, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a2);
  if (!v7)
    *v22 = v19;
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D764(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C33560, a3);
}

uint64_t sub_1A5C3D764@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, char *, char *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned __int8 v20[56];
  char *v21[9];

  result = sub_1A5C02DB4(a1, a2);
  if (!v4)
  {
    v11 = v9;
    v12 = v10;
    if (result == 0x4B2043494C425550 && v8 == 0xEA00000000005945 || (sub_1A5C41E94() & 1) != 0)
    {
      sub_1A5BEE468(v11, v12);
      sub_1A5C29738(v11, v12);
      sub_1A5C274FC(v13, v13 + 32, 0, (2 * *(_QWORD *)(v13 + 16)) | 1, (uint64_t)v20);
      swift_release();
      sub_1A5BF6504(v20, 0x30u, v21);
      v14 = v21[6];
      v15 = v21[7];
      v16 = v21[8];
      v17 = swift_unknownObjectRetain();
      v19 = a3(v17, v14, v15, v16);
      sub_1A5C3E618((uint64_t)v21);
      sub_1A5BEFF90(v11, v12);
      swift_bridgeObjectRelease();
      result = sub_1A5BEFF90(v11, v12);
      *a4 = v19;
    }
    else
    {
      sub_1A5BF6798();
      swift_allocError();
      *v18 = 7;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_1A5BEFF90(v11, v12);
    }
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3D954(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_1A5C33560, a3);
}

uint64_t sub_1A5C3D954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, char *, char *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unsigned __int8 v18[56];
  char *v19[9];

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 16))(&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, a2);
  v11 = sub_1A5C41C0C();
  sub_1A5C274FC(v11, v11 + 32, 0, (2 * *(_QWORD *)(v11 + 16)) | 1, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  sub_1A5BF6504(v18, 0x30u, v19);
  v12 = v19[6];
  v13 = v19[7];
  v14 = v19[8];
  v15 = swift_unknownObjectRetain();
  v16 = a3(v15, v12, v13, v14);
  sub_1A5C3E618((uint64_t)v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a4 = v16;
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3A89C(*v0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C70]);
}

uint64_t P521.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3AA3C(*v0, MEMORY[0x1E0C81C70]);
}

uint64_t P521.KeyAgreement.PublicKey.derRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char *v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1EE800FD0 != -1)
    swift_once();
  v0 = qword_1EE805AB8;
  v1 = unk_1EE805AC0;
  v13 = xmmword_1EE805AC8;
  v2 = qword_1EE805AD8;
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C41BF4();
  v3 = ccec_export_pub_size();
  v4 = sub_1A5C41C00();
  *(_QWORD *)(v4 + 16) = v3;
  ccec_export_pub();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_1A5BEBFDC(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v5, v7);
  v9 = v8;
  sub_1A5BEFF90(v5, v7);
  v10 = (2 * *(_QWORD *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  v16 = v13;
  v17 = v2;
  v18 = v9;
  v19 = v9 + 32;
  v20 = 0;
  v21 = v10;
  v14 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C41BF4();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A5C2801C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v11 = sub_1A5BEBFDC((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P521.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_1A5C3B5AC(P521.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t P521.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5C04E6C, a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1A5BEBB0C(a1, a2, a3, (uint64_t (*)(void))sub_1A5C3E404, (uint64_t)&type metadata for P521, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A5BEC630, a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1A5C3B6B4(a1, a2, a3);
}

uint64_t P521.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5C3B730(a1, a2, MEMORY[0x1E0C81C70], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E858, a3);
}

void P521.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1A5C3BAB8(a1, a2, MEMORY[0x1E0C81C70], (uint64_t (*)(_QWORD *, uint64_t *))sub_1A5C3E858, a3);
}

uint64_t P521.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5BEBA08(MEMORY[0x1E0C81C70], a1);
}

int64_t P521.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t *v0;

  return sub_1A5C3A63C(*v0, MEMORY[0x1E0C81C70]);
}

uint64_t _s9CryptoKit4P256O7SigningO10PrivateKeyV18x963Representation10Foundation4DataVvg_0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = ccec_x963_export_size();
  v1 = sub_1A5C41C00();
  *(_QWORD *)(v1 + 16) = v0;
  ccec_x963_export();
  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_1A5BEBFDC(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t P521.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char *v27;
  _OWORD v28[2];
  _BYTE v29[40];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v1 = *v0;
  if (qword_1EE800FD0 != -1)
    swift_once();
  v2 = qword_1EE805AB8;
  v3 = unk_1EE805AC0;
  v4 = xmmword_1EE805AC8;
  v5 = qword_1EE805AD8;
  swift_unknownObjectRetain();
  swift_retain();
  sub_1A5C41BF4();
  v6 = sub_1A5C3A63C(v1, MEMORY[0x1E0C81C70]);
  v8 = v7;
  swift_release();
  sub_1A5C29738(v6, v8);
  v10 = v9;
  sub_1A5BEFF90(v6, v8);
  v11 = ccec_cp_521();
  if (!v11)
    goto LABEL_10;
  v12 = v11;
  *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  *(_QWORD *)&v35 = v12;
  swift_retain();
  swift_dynamicCast();
  v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v14 = v13;
  if (v13)
  {
    v15 = sub_1A5C41C00();
    *(_QWORD *)(v15 + 16) = v14;
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(_QWORD *)(v15 + 16) = v14;
  swift_release();
  v16 = ccec_export_pub_size();
  v17 = sub_1A5C41C00();
  *(_QWORD *)(v17 + 16) = v16;
  ccec_export_pub();
  *(_QWORD *)(v17 + 16) = v16;
  v18 = sub_1A5BEBFDC(v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A5C29738(v18, v20);
  v22 = v21;
  sub_1A5BEFF90(v18, v20);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = (2 * *(_QWORD *)(v10 + 16)) | 1;
  *(_QWORD *)&v28[0] = v2;
  *((_QWORD *)&v28[0] + 1) = v3;
  v28[1] = v4;
  *(_QWORD *)v29 = v5;
  memset(&v29[8], 0, 32);
  v30 = 0;
  *(_QWORD *)&v31 = v10;
  *((_QWORD *)&v31 + 1) = v10 + 32;
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = v24;
  *(_QWORD *)&v33 = v22;
  *((_QWORD *)&v33 + 1) = v22 + 32;
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = (2 * v23) | 1;
  v37 = *(_OWORD *)v29;
  v38 = *(_OWORD *)&v29[16];
  v35 = v28[0];
  v36 = v4;
  v42 = v33;
  v43 = v34;
  v40 = v31;
  v41 = v32;
  v39 = 0uLL;
  v27 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1A5C3E688((uint64_t)v28);
  sub_1A5C283B0(48, &v27, (char *)&v35);
  sub_1A5C19470((uint64_t)v28);
  v25 = sub_1A5BEBFDC((uint64_t)v27);
  swift_bridgeObjectRelease();
  sub_1A5C19470((uint64_t)v28);
  return v25;
}

uint64_t P521.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_1A5C3C030(P521.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_1A5C3E1F8(a1, (uint64_t (*)(_QWORD *))sub_1A5C3A050);
}

uint64_t sub_1A5C3E170@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C3E23C(MEMORY[0x1E0C81C60], a1);
}

uint64_t sub_1A5C3E17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C3E330(a1, a2, a3, (uint64_t (*)(_QWORD *))sub_1A5C3A050);
}

uint64_t P384.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_1A5C3E1F8(a1, (uint64_t (*)(_QWORD *))sub_1A5C3A0A8);
}

uint64_t sub_1A5C3E1B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C3E23C(MEMORY[0x1E0C81C68], a1);
}

uint64_t sub_1A5C3E1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C3E330(a1, a2, a3, (uint64_t (*)(_QWORD *))sub_1A5C3A0A8);
}

uint64_t P521.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_1A5C3E1F8(a1, (uint64_t (*)(_QWORD *))sub_1A5C3A100);
}

uint64_t sub_1A5C3E1F8(uint64_t a1, uint64_t (*a2)(_QWORD *))
{
  _QWORD *v2;
  _QWORD v4[3];

  v4[2] = *v2;
  return a2(v4);
}

uint64_t sub_1A5C3E230@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A5C3E23C(MEMORY[0x1E0C81C70], a1);
}

uint64_t sub_1A5C3E23C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  size_t v6;
  uint64_t v7;

  v4 = *v2;
  result = a1();
  if (!result)
    goto LABEL_8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v6 = result;
  swift_retain();
  if (v6)
  {
    v7 = sub_1A5C41C00();
    *(_QWORD *)(v7 + 16) = v6;
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  memcpy((void *)(v7 + 32), (const void *)(v4 + 32), v6);
  *(_QWORD *)(v7 + 16) = v6;
  result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t sub_1A5C3E314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A5C3E330(a1, a2, a3, (uint64_t (*)(_QWORD *))sub_1A5C3A100);
}

uint64_t sub_1A5C3E330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *))
{
  _QWORD *v4;
  _QWORD v6[3];

  v6[2] = *v4;
  return a4(v6);
}

uint64_t *sub_1A5C3E368(uint64_t *result, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v6 = a3[2];
  v7 = a3[3] >> 1;
  v8 = __OFSUB__(v7, v6);
  v9 = v7 - v6;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t *)sub_1A5C3A354(a3[1] + v6, a3[1] + v6 + v9, result, a5);
    if (!v5)
      *a2 = a4;
  }
  return result;
}

unint64_t sub_1A5C3E3C0()
{
  unint64_t result;

  result = qword_1ECF97790;
  if (!qword_1ECF97790)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for P384, &type metadata for P384);
    atomic_store(result, (unint64_t *)&qword_1ECF97790);
  }
  return result;
}

unint64_t sub_1A5C3E404()
{
  unint64_t result;

  result = qword_1EE8019A0;
  if (!qword_1EE8019A0)
  {
    result = MEMORY[0x1A85B3FE0](&protocol conformance descriptor for P521, &type metadata for P521);
    atomic_store(result, (unint64_t *)&qword_1EE8019A0);
  }
  return result;
}

void sub_1A5C3E448(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A5C3E490(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;

  if (!a4())
  {
    __break(1u);
    JUMPOUT(0x1A5C3E608);
  }
  v8 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  swift_dynamicCast();
  v9 = (unint64_t)objc_msgSend(v8, sel_groupOrderByteCountForCP_, v15);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(v9, 8))
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x1A5C3E5FCLL);
  }
  if (BYTE6(v5) == v9 + 8)
  {
    swift_dynamicCast();
    v10 = getccec_full_ctx_size();
    if ((a3 & 1) != 0)
      v11 = 9;
    else
      v11 = 1;
    return a5(v10, v6, v5, v11, v10);
  }
  else
  {
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1A5C3E618(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

unint64_t ccec_x963_export_size()
{
  return 3 * ((unint64_t)(cczp_bitlen() + 7) >> 3) + 1;
}

uint64_t sub_1A5C3E688(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_unknownObjectRetain();
  sub_1A5C41BF4();
  sub_1A5C193A8(v2);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_UNKNOWN **sub_1A5C3E710()
{
  return &off_1E4F77CA8;
}

_UNKNOWN **sub_1A5C3E71C()
{
  return &off_1E4F77B00;
}

_UNKNOWN **sub_1A5C3E728()
{
  return &off_1E4F77F20;
}

_UNKNOWN **sub_1A5C3E734()
{
  return &off_1E4F77D78;
}

_UNKNOWN **sub_1A5C3E740()
{
  return &off_1E4F78198;
}

_UNKNOWN **sub_1A5C3E74C()
{
  return &off_1E4F77FF0;
}

ValueMetadata *type metadata accessor for P256.Signing()
{
  return &type metadata for P256.Signing;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement()
{
  return &type metadata for P256.KeyAgreement;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return &type metadata for P256.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return &type metadata for P256.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for P384.Signing()
{
  return &type metadata for P384.Signing;
}

ValueMetadata *type metadata accessor for P384.Signing.PublicKey()
{
  return &type metadata for P384.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P384.Signing.PrivateKey()
{
  return &type metadata for P384.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement()
{
  return &type metadata for P384.KeyAgreement;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement.PublicKey()
{
  return &type metadata for P384.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement.PrivateKey()
{
  return &type metadata for P384.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for P521.Signing()
{
  return &type metadata for P521.Signing;
}

ValueMetadata *type metadata accessor for P521.Signing.PublicKey()
{
  return &type metadata for P521.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P521.Signing.PrivateKey()
{
  return &type metadata for P521.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement()
{
  return &type metadata for P521.KeyAgreement;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement.PublicKey()
{
  return &type metadata for P521.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement.PrivateKey()
{
  return &type metadata for P521.KeyAgreement.PrivateKey;
}

uint64_t *sub_1A5C3E858(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C3E368(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), MEMORY[0x1E0C81C70]);
}

unint64_t ccec_compact_export_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t *sub_1A5C3E898(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C3E368(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), MEMORY[0x1E0C81C68]);
}

uint64_t *sub_1A5C3E8B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1A5C3E368(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), MEMORY[0x1E0C81C60]);
}

uint64_t sub_1A5C3E90C()
{
  return sub_1A5C3EE34();
}

uint64_t sub_1A5C3E930()
{
  return sub_1A5C3E9D8();
}

void sub_1A5C3E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1A5C3EA2C(a1, a2, a3, a4, a5, a6, sub_1A5C40320);
}

uint64_t sub_1A5C3E98C()
{
  return sub_1A5C3EE34();
}

uint64_t sub_1A5C3E9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5BED368(a1, a2, a3, a4, MEMORY[0x1E0C81C68], sub_1A5C40324);
}

uint64_t sub_1A5C3E9D8()
{
  _QWORD *v0;
  unsigned __int8 v2;

  sub_1A5C3EEFC(*v0 + 32, &v2);
  return v2;
}

void sub_1A5C3EA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  __asm { BR              X10 }
}

uint64_t sub_1A5C3EAAC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v2;
  v9 = v3;
  v10 = BYTE2(v3);
  v11 = BYTE3(v3);
  v12 = BYTE4(v3);
  v13 = BYTE5(v3);
  sub_1A5BEE468(v2, v3);
  sub_1A5BEE468(v1, v0);
  sub_1A5BF0D10((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v3), v2, v3, v1, v0);
  if (v4)
  {
    sub_1A5BEFF90(v2, v3);
    sub_1A5BEFF90(v1, v0);
    __break(1u);
    JUMPOUT(0x1A5C3ED9CLL);
  }
  sub_1A5BEFF90(v2, v3);
  sub_1A5BEFF90(v1, v0);
  sub_1A5BEFF90(v2, v3);
  result = sub_1A5BEFF90(v1, v0);
  *v5 = v7;
  return result;
}

uint64_t sub_1A5C3EE10()
{
  return sub_1A5C3EE34();
}

uint64_t sub_1A5C3EE34()
{
  swift_beginAccess();
  return sub_1A5C418D0();
}

uint64_t sub_1A5C3EED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5BED368(a1, a2, a3, a4, MEMORY[0x1E0C81C70], sub_1A5C40340);
}

uint64_t sub_1A5C3EEFC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  if (!a1)
    __break(1u);
  MEMORY[0x1E0C80A78](a1);
  result = sub_1A5C418D0();
  *a2 = 0;
  return result;
}

void sub_1A5C3EFD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1A5C3EA2C(a1, a2, v2[2], v2[3], v2[4], v2[5], sub_1A5C40320);
}

uint64_t sub_1A5C3EFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BED368(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), MEMORY[0x1E0C81C70], sub_1A5C40340);
}

uint64_t sub_1A5C3F028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BED368(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), MEMORY[0x1E0C81C68], sub_1A5C40324);
}

uint64_t sub_1A5C3F054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A5BED368(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), MEMORY[0x1E0C81C60], sub_1A5BED4F0);
}

uint64_t sub_1A5C3F080(uint64_t result, char *a2)
{
  uint64_t *v2;
  char *v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  char *v18;
  char v19;
  char v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;

  v5 = (int64_t)&a2[-result];
  if (result)
    v6 = (int64_t)&a2[-result];
  else
    v6 = 0;
  v7 = *v2;
  v8 = *(_QWORD *)(*v2 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v3 = a2;
  v4 = (char *)result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v10 = *(_QWORD *)(v7 + 24) >> 1, v10 < v9))
  {
    if (v8 <= v9)
      v11 = v8 + v6;
    else
      v11 = v8;
    result = (uint64_t)sub_1A5BFC774((char *)result, v11, 1, (char *)v7);
    v7 = result;
    v10 = *(_QWORD *)(result + 24) >> 1;
  }
  v12 = *(_QWORD *)(v7 + 16);
  v13 = v10 - v12;
  v14 = 0;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13)
      v14 = v10 - v12;
    else
      v14 = v5;
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }
    result = (uint64_t)memmove((void *)(v7 + v12 + 32), v4, v14);
    v4 += v14;
  }
  if (v14 < v6)
    goto LABEL_27;
  if (v14)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v16 = __OFADD__(v15, v14);
    v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }
    *(_QWORD *)(v7 + 16) = v17;
  }
  if (v14 != v13)
    goto LABEL_25;
LABEL_28:
  v17 = *(_QWORD *)(v7 + 16);
  if (!v4)
  {
LABEL_33:
    if (!v3)
      goto LABEL_25;
    v4 = 0;
    goto LABEL_35;
  }
  if (!v3 || v4 != v3)
  {
LABEL_35:
    v20 = *v4;
    v18 = v4 + 1;
    v19 = v20;
    while (1)
    {
      while (1)
      {
        v21 = *(_QWORD *)(v7 + 24);
        v22 = v21 >> 1;
        v23 = v17 + 1;
        if ((uint64_t)(v21 >> 1) >= v17 + 1)
          break;
        v26 = (char *)v7;
        v27 = v17;
        result = (uint64_t)sub_1A5BFC774((char *)(v21 > 1), v17 + 1, 1, v26);
        v17 = v27;
        v7 = result;
        v22 = *(_QWORD *)(result + 24) >> 1;
        if (v17 < v22)
          goto LABEL_39;
LABEL_36:
        *(_QWORD *)(v7 + 16) = v17;
      }
      if (v17 >= v22)
        goto LABEL_36;
LABEL_39:
      *(_BYTE *)(v7 + v17 + 32) = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        *(_QWORD *)(v7 + 16) = v23;
        break;
      }
      v24 = 0;
      while (1)
      {
        v25 = (uint64_t)&v18[v24 + 1];
        v19 = v18[v24];
        if (~v17 + v22 == v24)
          break;
        *(_BYTE *)(v7 + v17 + 33 + v24++) = v19;
        if (v3 && (char *)v25 == v3)
        {
          v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }
      v18 += v24 + 1;
      v17 = v22;
      *(_QWORD *)(v7 + 16) = v22;
    }
  }
LABEL_25:
  *v2 = v7;
  return result;
}

uint64_t sub_1A5C3F284(uint64_t result, unint64_t a2, unint64_t a3)
{
  char *v3;
  char **v4;
  _BYTE *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t (*v22)();
  char *v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  unint64_t v35;
  uint64_t (*v36)();
  char *v37;
  char *v38;
  unint64_t v39;
  int64_t v40;
  _BYTE *v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v5 = (_BYTE *)((71 - __clz(a3)) >> 3);
  if ((unint64_t)v5 < result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a2;
  if ((unint64_t)v5 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v7 = result;
  v8 = result - a2;
  v3 = *v4;
  v9 = *((_QWORD *)*v4 + 2);
  v10 = v9 + result - a2;
  if (__OFADD__(v9, result - a2))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = a3;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v13 = *((_QWORD *)v3 + 3) >> 1, v13 < v10))
  {
    if (v9 <= v10)
      v14 = v10;
    else
      v14 = v9;
    v3 = sub_1A5BFC774(isUniquelyReferenced_nonNull_native, v14, 1, v3);
    v13 = *((_QWORD *)v3 + 3) >> 1;
  }
  v15 = *((_QWORD *)v3 + 2);
  v16 = v13 - v15;
  result = (uint64_t)sub_1A5C4129C(&v46, &v3[v15 + 32], v13 - v15, v7, v6, v11);
  if (result < v8)
    goto LABEL_19;
  if (result >= 1)
  {
    v17 = *((_QWORD *)v3 + 2);
    v18 = __OFADD__(v17, result);
    v5 = (_BYTE *)(v17 + result);
    if (v18)
    {
      __break(1u);
LABEL_41:
      v31 = v11 - v6 + 1;
      goto LABEL_42;
    }
    *((_QWORD *)v3 + 2) = v5;
  }
  if (result != v16)
  {
LABEL_15:
    *v4 = v3;
    return result;
  }
LABEL_20:
  v19 = v49;
  if (__OFSUB__(v49, v47))
    goto LABEL_45;
  if (v49 == v47)
    goto LABEL_15;
  v20 = *((_QWORD *)v3 + 2);
  v21 = v48;
  v43 = v46;
  v44 = v47;
  v22 = sub_1A5C41178(v45, v49, v46, v47, v48, v5);
  v24 = *v23;
  result = ((uint64_t (*)(_BYTE *, _QWORD))v22)(v45, 0);
  v25 = v19 - 1;
  if (v19 < 1)
    goto LABEL_47;
  v26 = v21;
  v42 = (71 - __clz(v21)) >> 3;
  if (v42 < v19)
    goto LABEL_47;
  v27 = v44;
  v28 = -v44;
LABEL_26:
  while (1)
  {
    v29 = *((_QWORD *)v3 + 3);
    v30 = v29 >> 1;
    v31 = v20 + 1;
    if ((uint64_t)(v29 >> 1) < v20 + 1)
      break;
    v32 = (_BYTE *)(v20 - v30);
    if (v20 < v30)
      goto LABEL_28;
LABEL_25:
    *((_QWORD *)v3 + 2) = v20;
  }
  v38 = v3;
  v39 = v26;
  result = (uint64_t)sub_1A5BFC774((char *)(v29 > 1), v20 + 1, 1, v38);
  v26 = v39;
  v27 = v44;
  v3 = (char *)result;
  v30 = *(_QWORD *)(result + 24) >> 1;
  v32 = (_BYTE *)(v20 - v30);
  if (v20 >= v30)
    goto LABEL_25;
LABEL_28:
  v3[v20 + 32] = v24;
  if (__OFSUB__(v25, v27))
    goto LABEL_46;
  v40 = v30;
  if (v25 == v27)
  {
LABEL_42:
    *((_QWORD *)v3 + 2) = v31;
    goto LABEL_15;
  }
  v11 = v20;
  v6 = 0;
  v41 = (_BYTE *)(v28 + v25);
  v33 = v32 + 1;
  v34 = v3 + 33;
  while (1)
  {
    v35 = v26;
    v36 = sub_1A5C41178(v45, v25 + v6, v43, v27, v26, v32);
    v24 = *v37;
    result = ((uint64_t (*)(_BYTE *, _QWORD))v36)(v45, 0);
    if (v25 > v42 || v25 + v6 < 1)
      break;
    v26 = v35;
    if (v33 == (_BYTE *)v6)
    {
      v25 = v25 + v6 - 1;
      v28 = -v44;
      v20 = v40;
      v27 = v44;
      *((_QWORD *)v3 + 2) = v40;
      goto LABEL_26;
    }
    v34[v11] = v24;
    v27 = v44;
    if (__OFSUB__(v25 + v6 - 1, v44))
      goto LABEL_44;
    --v6;
    ++v34;
    v32 = v41;
    if (!&v41[v6])
      goto LABEL_41;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1A5C3F570(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4, char **a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;

  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a5;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) <= a3)
    {
      __break(1u);
    }
    else
    {
      v6 = a4;
      v7 = a2;
      if ((*(char *)(a2 + a3) & 0x80000000) == 0)
      {
        v13 = sub_1A5C3F830(a1, a2, a3, a4);
        sub_1A5C4157C(v13, v14, v15, v16);
        return swift_unknownObjectRelease();
      }
      v8 = *a5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_11:
        v18 = *((_QWORD *)v8 + 2);
        v19 = *((_QWORD *)v8 + 3);
        v20 = v18 + 1;
        if (v18 >= v19 >> 1)
        {
          v25 = v18 + 1;
          v22 = v8;
          v23 = *((_QWORD *)v8 + 2);
          v24 = sub_1A5BFC774((char *)(v19 > 1), v18 + 1, 1, v22);
          v18 = v23;
          v20 = v25;
          v8 = v24;
        }
        *((_QWORD *)v8 + 2) = v20;
        v8[v18 + 32] = 0;
        *v5 = v8;
        v21 = swift_unknownObjectRetain();
        sub_1A5C4157C(v21, v7, a3, v6);
        return swift_unknownObjectRelease();
      }
    }
    v8 = sub_1A5BFC774(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    *v5 = v8;
    goto LABEL_11;
  }
  v6 = (unint64_t)*a5;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v6;
  if ((result & 1) == 0)
  {
LABEL_16:
    result = (uint64_t)sub_1A5BFC774(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
    v6 = result;
    *v5 = result;
  }
  v11 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_1A5BFC774((char *)(v10 > 1), v11 + 1, 1, (char *)v6);
    v6 = result;
  }
  *(_QWORD *)(v6 + 16) = v11 + 1;
  *(_BYTE *)(v6 + v11 + 32) = 0;
  *v5 = v6;
  return result;
}

unint64_t sub_1A5C3F72C(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  char v14;
  unint64_t v15;

  if (!a1)
    return 0;
  v2 = 71 - __clz(a1);
  v3 = v2 >> 3;
  result = sub_1A5C41214(v2 >> 3, v2 >> 3, 0, a1, v2);
  if (result != 255 && result != 0)
    return v3;
  if (v3 >= 1)
    v6 = 1;
  else
    v6 = v3;
  v7 = 8 * v3;
  v8 = 16 - 8 * v3;
  v9 = v3;
  while (1)
  {
    if (v9 < 2)
      return v6;
    v15 = v9;
    v10 = v7 - 8;
    if (v7 - 8 < 0)
      v11 = a1 << ((v8 - 8) & 0x38);
    else
      v11 = a1 >> (v10 & 0x38);
    if (result != v11)
      return v15;
    v9 = v15 - 1;
    if (v15 - 1 > v3)
      break;
    v12 = v7 < 16;
    v13 = a1 >> ((v7 + 48) & 0x38);
    if (v12)
      v13 = a1 << (v8 & 0x38);
    v14 = result ^ v13;
    v8 += 8;
    v7 = v10;
    if (v14 < 0)
      return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A5C3F830(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4)
{
  int64_t v4;
  unint64_t v5;
  int v6;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  if ((uint64_t)(a4 >> 1) < a3)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v5 = a4;
  if (a4 >> 1 == a3)
    return swift_unknownObjectRetain();
  if (v4 <= a3)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v6 = *(unsigned __int8 *)(a2 + a3);
  if (v6 != 255 && v6 != 0)
    return swift_unknownObjectRetain();
  if (!__OFSUB__(v4, a3))
  {
    if (v4 - a3 >= 2)
    {
      while (1)
      {
        v8 = v5 >> 1;
        if (a3 >= (uint64_t)(v5 >> 1))
          break;
        if (*(unsigned __int8 *)(a2 + a3) != v6)
          return swift_unknownObjectRetain();
        if (__OFSUB__(v4, a3))
          goto LABEL_34;
        v9 = a4 >> 1;
        if (v4 != a3)
        {
          if (v4 <= a3)
            goto LABEL_35;
          v9 = a3 + 1;
        }
        if (v8 < v9)
          goto LABEL_36;
        if (v9 < a3)
          goto LABEL_37;
        if (v8 < (unint64_t)v4)
          goto LABEL_38;
        if (v4 < a3)
          goto LABEL_39;
        if (v9 == v4)
          goto LABEL_40;
        if (v9 >= v4)
          goto LABEL_41;
        if (((*(unsigned __int8 *)(a2 + v9) ^ v6) & 0x80) != 0)
          return swift_unknownObjectRetain();
        v10 = a4 >> 1;
        if (v4 != a3)
        {
          v10 = a3 + 1;
          if (__OFADD__(a3, 1))
            goto LABEL_47;
          if (v4 < v10)
            goto LABEL_42;
        }
        if (v8 < v10)
          goto LABEL_43;
        if (v10 < a3)
          goto LABEL_44;
        if (__OFSUB__(v4, v10))
          goto LABEL_45;
        v5 = v5 & 1 | a4 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 != v4)
        {
          a3 = v10;
          if (v4 - v10 >= 2)
            continue;
        }
        return swift_unknownObjectRetain();
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    return swift_unknownObjectRetain();
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t P256.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  return sub_1A5C3F9E4(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C60], a3);
}

uint64_t P384.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  return sub_1A5C3F9E4(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C68], a3);
}

uint64_t sub_1A5C3F9E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X3>, __int128 *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 v49[8];
  uint64_t v50;
  _BYTE v51[24];
  uint64_t v52;

  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v10);
  v12 = sub_1A5C41C0C();
  sub_1A5C274FC(v12, v12 + 32, 0, (2 * *(_QWORD *)(v12 + 16)) | 1, (uint64_t)v49);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1A5BFB08C((uint64_t)&v50, (uint64_t)v51);
  sub_1A5C0B808((uint64_t)v51);
  v14 = sub_1A5C3FFE4(v49, 0x30u, (uint64_t *)&v43);
  v40 = v43;
  v15 = v44;
  v41 = v45;
  v39 = v46;
  v38 = v47;
  v37 = v48;
  result = a3(v14);
  if (!result)
    goto LABEL_34;
  v16 = result;
  v17 = (void *)objc_opt_self();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF979A0);
  v45 = v18;
  *(_QWORD *)&v43 = v16;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, (_QWORD)v42);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v36 = v15;
  v19 = __OFSUB__(v41 >> 1, v15);
  v20 = (v41 >> 1) - v15;
  if (v19)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result < v20)
  {
LABEL_9:
    sub_1A5BF5E74();
    swift_allocError();
    *(_DWORD *)v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1A5C19568((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  if (__OFSUB__(v37 >> 1, v38))
    goto LABEL_23;
  if (result < (uint64_t)((v37 >> 1) - v38))
    goto LABEL_9;
  v34 = (v37 >> 1) - v38;
  v42 = xmmword_1A5C42A80;
  v45 = v18;
  *(_QWORD *)&v43 = v16;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
    goto LABEL_24;
  v35 = v17;
  if (result + 0x4000000000000000 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1A5C41960();
  v45 = v18;
  *(_QWORD *)&v43 = v16;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v35, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v19 = __OFSUB__(result, v20);
  result -= v20;
  if (v19)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = v36;
  if (result < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1A5BEEEB4();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECF97708);
  v45 = v23;
  v33 = sub_1A5C0B840();
  *(_QWORD *)&v46 = v33;
  v24 = swift_allocObject();
  *(_QWORD *)&v43 = v24;
  *(_OWORD *)(v24 + 16) = v40;
  v25 = v41;
  *(_QWORD *)(v24 + 32) = v22;
  *(_QWORD *)(v24 + 40) = v25;
  v36 = v23;
  result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v43, v23);
  v26 = *(_QWORD *)(result + 16);
  v27 = *(_QWORD *)(result + 24) >> 1;
  v19 = __OFSUB__(v27, v26);
  v28 = v27 - v26;
  if (v19)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v41 = *(_QWORD *)(result + 8) + v26 + v28;
  v29 = v40;
  swift_unknownObjectRetain_n();
  sub_1A5C4196C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  v41 = v29;
  swift_unknownObjectRelease();
  v45 = v18;
  *(_QWORD *)&v43 = v16;
  swift_dynamicCast();
  result = (uint64_t)objc_msgSend(v35, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v19 = __OFSUB__(result, v34);
  result -= v34;
  if (v19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1A5BEEEB4();
    v30 = v36;
    v45 = v36;
    *(_QWORD *)&v46 = v33;
    v31 = swift_allocObject();
    *(_QWORD *)&v43 = v31;
    *(_OWORD *)(v31 + 16) = v39;
    v32 = v37;
    *(_QWORD *)(v31 + 32) = v38;
    *(_QWORD *)(v31 + 40) = v32;
    result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v43, v30);
    if (!__OFSUB__(*(_QWORD *)(result + 24) >> 1, *(_QWORD *)(result + 16)))
    {
      swift_unknownObjectRetain_n();
      sub_1A5C4196C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1A5C19568((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
      result = swift_unknownObjectRelease();
      *a4 = v42;
      return result;
    }
    goto LABEL_33;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1A5C3FFE4@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[56];
  _BYTE v28[56];
  _BYTE v29[56];
  _BYTE v30[56];
  _OWORD v31[3];
  unsigned __int8 v32;
  _OWORD v33[3];
  unsigned __int8 v34;
  _OWORD v35[3];
  unsigned __int8 v36;
  _OWORD v37[3];
  unsigned __int8 v38;
  _BYTE v39[48];
  __int128 v40;
  char v41;
  uint64_t v42;

  if (*a1 != a2
    || (sub_1A5BFB08C((uint64_t)(a1 + 8), (uint64_t)v39), sub_1A5BFB08C((uint64_t)v39, (uint64_t)&v40), (v41 & 1) != 0))
  {
    sub_1A5BF6798();
    swift_allocError();
    *v6 = 1;
    swift_willThrow();
    v7 = (uint64_t)a1;
    return sub_1A5C19568(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  sub_1A5C20D4C((uint64_t)v27);
  sub_1A5C29E84((uint64_t)v27, (uint64_t)v35);
  if (v36 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v22 = 3;
    sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    swift_willThrow();
    goto LABEL_11;
  }
  v37[0] = v35[0];
  v37[1] = v35[1];
  v37[2] = v35[2];
  v38 = v36;
  sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  v8 = sub_1A5C2BA44((unsigned __int8 *)v37, 2u);
  if (v3)
  {
LABEL_11:
    swift_unknownObjectRelease();
    sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    goto LABEL_12;
  }
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = v11;
  sub_1A5C20D4C((uint64_t)v28);
  sub_1A5C29E84((uint64_t)v28, (uint64_t)v31);
  if (v32 == 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v23 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  v33[0] = v31[0];
  v33[1] = v31[1];
  v33[2] = v31[2];
  v34 = v32;
  v16 = sub_1A5C2BA44((unsigned __int8 *)v33, 2u);
  v18 = v17;
  v25 = v20;
  v26 = v19;
  v42 = v16;
  sub_1A5C20D4C((uint64_t)v29);
  sub_1A5BF68A8((uint64_t)v29);
  sub_1A5C29E84((uint64_t)v29, (uint64_t)v30);
  if (v30[48] != 255)
  {
    sub_1A5BF6798();
    swift_allocError();
    *v21 = 3;
    swift_willThrow();
    sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
LABEL_12:
    v7 = (uint64_t)a1;
    return sub_1A5C19568(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  }
  swift_unknownObjectRelease();
  sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  result = sub_1A5C19568((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v15;
  a3[4] = v42;
  a3[5] = v18;
  a3[6] = v26;
  a3[7] = v25;
  return result;
}

void sub_1A5C40324(uint64_t a1, uint64_t a2)
{
  sub_1A5BED50C(a1, a2);
}

void sub_1A5C40340(uint64_t a1, uint64_t a2)
{
  sub_1A5BED50C(a1, a2);
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A5BEFF90(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*P256.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return sub_1A5C41990();
}

void P256.Signing.ECDSASignature.derRepresentation.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_1A5C40424()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = sub_1A5C41978();
  v3 = v2;
  sub_1A5C29738(v1, v2);
  v4 = sub_1A5BEFF90(v1, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1A5C404CC + dword_1A5C40684[v0]))(v4);
}

uint64_t sub_1A5C404DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[16];

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1A5C4064CLL);
  }
  v7 = sub_1A5C41978();
  v9 = v8;
  sub_1A5BEFF90(v0, v2);
  sub_1A5C29738(v7, v9);
  v11 = v10;
  sub_1A5BEFF90(v7, v9);
  v12 = (2 * *(_QWORD *)(v11 + 16)) | 1;
  swift_retain();
  swift_retain();
  v13 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v6 - 96) = v12;
  *(_QWORD *)(v6 - 88) = v13;
  *(_QWORD *)(v6 - 152) = v3;
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = 0;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v11;
  *(_QWORD *)(v6 - 112) = v11 + 32;
  *(_QWORD *)(v6 - 104) = 0;
  MEMORY[0x1E0C80A78](v13);
  v16[2] = v6 - 152;
  sub_1A5C24760(48, sub_1A5C41694, (uint64_t)v16);
  v14 = sub_1A5BEBFDC(*(_QWORD *)(v6 - 88));
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(v0, v2);
  swift_release_n();
  swift_release_n();
  return v14;
}

uint64_t sub_1A5C40694()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A5C3E90C();
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C41020(a1, a2, a3, a4, (uint64_t (*)(__int128 *))sub_1A5C3E930);
}

uint64_t (*P384.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P384.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5BEB73C(a1, a2, MEMORY[0x1E0C81C68], a3);
}

void P384.Signing.ECDSASignature.derRepresentation.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_1A5C40750()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = sub_1A5C41978();
  v3 = v2;
  sub_1A5C29738(v1, v2);
  v4 = sub_1A5BEFF90(v1, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1A5C407F8 + *((int *)qword_1A5C409B0 + v0)))(v4);
}

uint64_t sub_1A5C40808()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[16];

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1A5C40978);
  }
  v7 = sub_1A5C41978();
  v9 = v8;
  sub_1A5BEFF90(v0, v2);
  sub_1A5C29738(v7, v9);
  v11 = v10;
  sub_1A5BEFF90(v7, v9);
  v12 = (2 * *(_QWORD *)(v11 + 16)) | 1;
  swift_retain();
  swift_retain();
  v13 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v6 - 96) = v12;
  *(_QWORD *)(v6 - 88) = v13;
  *(_QWORD *)(v6 - 152) = v3;
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = 0;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v11;
  *(_QWORD *)(v6 - 112) = v11 + 32;
  *(_QWORD *)(v6 - 104) = 0;
  MEMORY[0x1E0C80A78](v13);
  v16[2] = v6 - 152;
  sub_1A5C24760(48, sub_1A5C417E4, (uint64_t)v16);
  v14 = sub_1A5BEBFDC(*(_QWORD *)(v6 - 88));
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(v0, v2);
  swift_release_n();
  swift_release_n();
  return v14;
}

uint64_t P384.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A5C3E98C();
}

uint64_t P384.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = *v3;
  v8 = sub_1A5C04708();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA384, a2, v8, a3);
  swift_beginAccess();
  v9 = v7 + 32 + *(_QWORD *)(v7 + 16);
  v11[0] = v14[0];
  v11[1] = v14[1];
  v12 = v15;
  v13 = v16;
  return sub_1A5C3E9B0((uint64_t)v11, (uint64_t)v14, v7 + 32, v9);
}

uint64_t P384.Signing.PublicKey.isValidSignature<A>(_:for:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C41020(a1, a2, a3, a4, (uint64_t (*)(__int128 *))sub_1A5C3E930);
}

uint64_t P384.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  v10 = *v4;
  v11 = sub_1A5C04708();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA384, a3, v11, a4);
  v16 = 0;
  v14[0] = v17;
  v14[1] = v18;
  v14[2] = v19;
  sub_1A5C3E93C((uint64_t)v14, (uint64_t)&v15, v8, v9, v10 + 32, (uint64_t)&v16);
  return (v13 == 0) & v16;
}

uint64_t (*P521.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P521.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A5BEB73C(a1, a2, MEMORY[0x1E0C81C70], a3);
}

uint64_t P521.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  return sub_1A5C3F9E4(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0C81C70], a3);
}

void P521.Signing.ECDSASignature.derRepresentation.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_1A5C40C70()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = sub_1A5C41978();
  v3 = v2;
  sub_1A5C29738(v1, v2);
  v4 = sub_1A5BEFF90(v1, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1A5C40D18 + *((int *)qword_1A5C40ED0 + v0)))(v4);
}

uint64_t sub_1A5C40D28()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[16];

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x1A5C40E98);
  }
  v7 = sub_1A5C41978();
  v9 = v8;
  sub_1A5BEFF90(v0, v2);
  sub_1A5C29738(v7, v9);
  v11 = v10;
  sub_1A5BEFF90(v7, v9);
  v12 = (2 * *(_QWORD *)(v11 + 16)) | 1;
  swift_retain();
  swift_retain();
  v13 = sub_1A5BFC774(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v6 - 96) = v12;
  *(_QWORD *)(v6 - 88) = v13;
  *(_QWORD *)(v6 - 152) = v3;
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = 0;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v11;
  *(_QWORD *)(v6 - 112) = v11 + 32;
  *(_QWORD *)(v6 - 104) = 0;
  MEMORY[0x1E0C80A78](v13);
  v16[2] = v6 - 152;
  sub_1A5C24760(48, sub_1A5C417E4, (uint64_t)v16);
  v14 = sub_1A5BEBFDC(*(_QWORD *)(v6 - 88));
  swift_bridgeObjectRelease();
  sub_1A5BEFF90(v0, v2);
  swift_release_n();
  swift_release_n();
  return v14;
}

uint64_t P521.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_1A5C3EE10();
}

uint64_t P521.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = *v3;
  v8 = sub_1A5C04750();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA512, a2, v8, a3);
  swift_beginAccess();
  v9 = v7 + 32 + *(_QWORD *)(v7 + 16);
  v11[0] = v14[0];
  v11[1] = v14[1];
  v11[2] = v14[2];
  v12 = v15;
  v13 = v16;
  return sub_1A5C3EED4((uint64_t)v11, (uint64_t)v14, v7 + 32, v9);
}

uint64_t P521.Signing.PublicKey.isValidSignature<A>(_:for:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A5C41020(a1, a2, a3, a4, (uint64_t (*)(__int128 *))sub_1A5C3E930);
}

uint64_t sub_1A5C41020(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__int128 *))
{
  uint64_t *v5;
  __int128 v7;
  uint64_t v8;

  v8 = *v5;
  v7 = *a1;
  return a5(&v7) & 1;
}

uint64_t P521.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  v10 = *v4;
  v11 = sub_1A5C04750();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA512, a3, v11, a4);
  v16 = 0;
  v14[0] = v17;
  v14[1] = v18;
  v14[2] = v19;
  v14[3] = v20;
  sub_1A5C3E93C((uint64_t)v14, (uint64_t)&v15, v8, v9, v10 + 32, (uint64_t)&v16);
  return (v13 == 0) & v16;
}

uint64_t sub_1A5C41150()
{
  return sub_1A5C4196C();
}

uint64_t (*sub_1A5C41178@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _BYTE *a6@<X8>))()
{
  int64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v10;

  if (a3 < a2 || a4 >= a2)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = (unint64_t)(a2 - 0x1000000000000001) >> 61;
  if (v6 != 7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  a6 = a1;
  v7 = 8 * a2;
  v6 = 8 * a2 - 8;
  if (v6 < -64)
  {
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }
  if (v6 > 64)
  {
LABEL_7:
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v6 < 0x40)
    {
      v8 = a5 >> (v6 & 0x38);
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_14:
  v10 = a5 << ((8 - v7) & 0x38);
  if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0)
    LOBYTE(v8) = 0;
  else
    LOBYTE(v8) = v10;
LABEL_11:
  *a6 = v8;
  return nullsub_1;
}

unint64_t sub_1A5C41214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int64_t a5@<X8>)
{
  char v5;
  uint64_t v7;

  if (a2 < a1 || a3 >= a1)
  {
    __break(1u);
    goto LABEL_12;
  }
  a5 = (unint64_t)(a1 - 0x1000000000000001) >> 61;
  if (a5 != 7)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    v7 = a4 << ((8 - v5) & 0x38);
    if ((unint64_t)a5 <= 0xFFFFFFFFFFFFFFC0)
      return 0;
    else
      return v7;
  }
  v5 = 8 * a1;
  a5 = 8 * a1 - 8;
  if (a5 < -64)
    return 0;
  if (a5 > 64)
    return 0;
  if (a5 < 0)
    goto LABEL_13;
  if ((unint64_t)a5 >= 0x40)
    return 0;
  return a4 >> (a5 & 0x38);
}

int64_t *sub_1A5C4129C(int64_t *result, _BYTE *a2, int64_t a3, int64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;

  if (a2)
  {
    if (!a3)
      goto LABEL_7;
    if (a3 < 0)
      goto LABEL_36;
    if (__OFSUB__(a4, a5))
    {
LABEL_37:
      __break(1u);
      return result;
    }
    if (a4 != a5)
    {
      if (a4 <= a5)
        goto LABEL_33;
      v7 = 0;
      v8 = (71 - __clz(a6)) >> 3;
      v9 = 8 - 8 * a4;
      v10 = 8 * a4 - 8;
      while (1)
      {
        if ((unint64_t)(a4 - 0x1000000000000001 + v7) >> 61 != 7)
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        if (v10 < -64)
        {
LABEL_13:
          LOBYTE(v11) = 0;
          if (v8 < a4)
            goto LABEL_34;
          goto LABEL_22;
        }
        if (v10 > 64)
          break;
        if (v10 < 0)
        {
          if ((unint64_t)v10 <= 0xFFFFFFFFFFFFFFC0)
            goto LABEL_13;
          v11 = a6 << (v9 & 0x38);
        }
        else
        {
          if ((unint64_t)v10 >= 0x40)
            break;
          v11 = a6 >> (v10 & 0x38);
        }
        if (v8 < a4)
          goto LABEL_34;
LABEL_22:
        if (a4 + v7 < 1)
          goto LABEL_34;
        *a2 = v11;
        if (!(a3 - 1 + v7))
        {
          v6 = a4 + v7 - 1;
          goto LABEL_8;
        }
        if (__OFSUB__(a4 + v7 - 1, a5))
          goto LABEL_35;
        if (!(a4 - a5 - 1 + v7))
        {
          v6 = a5;
          a3 = a4 - a5;
          goto LABEL_8;
        }
        ++a2;
        --v7;
        v9 += 8;
        v10 -= 8;
        if (a4 + v7 <= a5)
          goto LABEL_33;
      }
      LOBYTE(v11) = 0;
      if (v8 < a4)
        goto LABEL_34;
      goto LABEL_22;
    }
  }
  a3 = 0;
LABEL_7:
  v6 = a4;
LABEL_8:
  *result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = v6;
  return (int64_t *)a3;
}

uint64_t sub_1A5C413FC(char **a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[4];
  _BYTE v9[16];
  __int128 *v10;
  __int128 v11;
  __int128 v12;

  v4 = *((_QWORD *)a2 + 6);
  v5 = *((_QWORD *)a2 + 7);
  v6 = a2[1];
  v11 = *a2;
  v12 = v6;
  v10 = &v11;
  sub_1A5C27378(2, a1, sub_1A5C417A4, (uint64_t)v9);
  v11 = a2[2];
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v5;
  v8[2] = &v11;
  return sub_1A5C27378(2, a1, sub_1A5C417A4, (uint64_t)v8);
}

void sub_1A5C41488(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v7 + 3) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      isUniquelyReferenced_nonNull_native = sub_1A5BFC8A4(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  v14 = *((_QWORD *)v7 + 2);
  if ((*((_QWORD *)v7 + 3) >> 1) - v14 < v6)
    goto LABEL_19;
  memcpy(&v7[8 * v14 + 32], (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    *v4 = v7;
    return;
  }
  v15 = *((_QWORD *)v7 + 2);
  v16 = __OFADD__(v15, v6);
  v17 = v15 + v6;
  if (!v16)
  {
    *((_QWORD *)v7 + 2) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

void sub_1A5C4157C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  int64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v7 + 3) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      isUniquelyReferenced_nonNull_native = sub_1A5BFC774(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  v14 = *((_QWORD *)v7 + 2);
  if ((*((_QWORD *)v7 + 3) >> 1) - v14 < v6)
    goto LABEL_19;
  memcpy(&v7[v14 + 32], (const void *)(a2 + a3), v6);
  if (v6 <= 0)
  {
LABEL_16:
    *v4 = v7;
    return;
  }
  v15 = *((_QWORD *)v7 + 2);
  v16 = __OFADD__(v15, v6);
  v17 = v15 + v6;
  if (!v16)
  {
    *((_QWORD *)v7 + 2) = v17;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1A5C41670()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A5C41694(char **a1)
{
  uint64_t v1;

  return sub_1A5C413FC(a1, *(__int128 **)(v1 + 16));
}

_UNKNOWN **sub_1A5C416AC()
{
  return &off_1E4F77C00;
}

_UNKNOWN **sub_1A5C416B8()
{
  return &off_1EE800668;
}

_UNKNOWN **sub_1A5C416C4()
{
  return &off_1EE8006C0;
}

_UNKNOWN **sub_1A5C416D0()
{
  return &off_1EE8006D8;
}

_UNKNOWN **sub_1A5C416DC()
{
  return &off_1EE8006F0;
}

_UNKNOWN **sub_1A5C416E8()
{
  return &off_1E4F77CA8;
}

_UNKNOWN **sub_1A5C416F4()
{
  return &off_1E4F77E78;
}

_UNKNOWN **sub_1A5C41700()
{
  return &off_1EE800818;
}

_UNKNOWN **sub_1A5C4170C()
{
  return &off_1EE800870;
}

_UNKNOWN **sub_1A5C41718()
{
  return &off_1EE800888;
}

_UNKNOWN **sub_1A5C41724()
{
  return &off_1EE8008A0;
}

_UNKNOWN **sub_1A5C41730()
{
  return &off_1E4F77F20;
}

_UNKNOWN **sub_1A5C4173C()
{
  return &off_1E4F780F0;
}

_UNKNOWN **sub_1A5C41748()
{
  return &off_1EE8009C8;
}

_UNKNOWN **sub_1A5C41754()
{
  return &off_1EE800A20;
}

_UNKNOWN **sub_1A5C41760()
{
  return &off_1EE800A38;
}

_UNKNOWN **sub_1A5C4176C()
{
  return &off_1EE800A50;
}

_UNKNOWN **sub_1A5C41778()
{
  return &off_1E4F78198;
}

ValueMetadata *type metadata accessor for P384.Signing.ECDSASignature()
{
  return &type metadata for P384.Signing.ECDSASignature;
}

ValueMetadata *type metadata accessor for P521.Signing.ECDSASignature()
{
  return &type metadata for P521.Signing.ECDSASignature;
}

uint64_t sub_1A5C417A4(char **a1)
{
  return sub_1A5C417B8(a1);
}

uint64_t sub_1A5C417B8(char **a1)
{
  uint64_t v1;

  return sub_1A5C3F570(**(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24), a1);
}

uint64_t sub_1A5C417E4(char **a1)
{
  return sub_1A5C41694(a1);
}

uint64_t P384.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t P521.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t sub_1A5C41828()
{
  return MEMORY[0x1E0CAE4F8]();
}

uint64_t sub_1A5C41834()
{
  return MEMORY[0x1E0CAE508]();
}

uint64_t sub_1A5C41840()
{
  return MEMORY[0x1E0CAE510]();
}

uint64_t sub_1A5C4184C()
{
  return MEMORY[0x1E0CAE518]();
}

uint64_t sub_1A5C41858()
{
  return MEMORY[0x1E0CAE520]();
}

uint64_t sub_1A5C41864()
{
  return MEMORY[0x1E0CAE528]();
}

uint64_t sub_1A5C41870()
{
  return MEMORY[0x1E0CAE538]();
}

uint64_t sub_1A5C4187C()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1A5C41888()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1A5C41894()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1A5C418A0()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t sub_1A5C418AC()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1A5C418B8()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1A5C418C4()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1A5C418D0()
{
  return MEMORY[0x1E0CAEE50]();
}

uint64_t sub_1A5C418DC()
{
  return MEMORY[0x1E0CAF5B8]();
}

uint64_t sub_1A5C418E8()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1A5C418F4()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1A5C41900()
{
  return MEMORY[0x1E0CB00B0]();
}

uint64_t sub_1A5C4190C()
{
  return MEMORY[0x1E0CB00E8]();
}

uint64_t sub_1A5C41918()
{
  return MEMORY[0x1E0CB00F0]();
}

uint64_t sub_1A5C41924()
{
  return MEMORY[0x1E0CB0128]();
}

uint64_t sub_1A5C41930()
{
  return MEMORY[0x1E0CB0138]();
}

uint64_t sub_1A5C4193C()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1A5C41948()
{
  return MEMORY[0x1E0CB0158]();
}

uint64_t sub_1A5C41954()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t sub_1A5C41960()
{
  return MEMORY[0x1E0CB0170]();
}

uint64_t sub_1A5C4196C()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t sub_1A5C41978()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_1A5C41984()
{
  return MEMORY[0x1E0CB01C0]();
}

uint64_t sub_1A5C41990()
{
  return MEMORY[0x1E0CB01D0]();
}

uint64_t sub_1A5C4199C()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1A5C419A8()
{
  return MEMORY[0x1E0CB01F8]();
}

uint64_t sub_1A5C419B4()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1A5C419C0()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t sub_1A5C419CC()
{
  return MEMORY[0x1E0CB0288]();
}

uint64_t sub_1A5C419D8()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t sub_1A5C419E4()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1A5C419F0()
{
  return MEMORY[0x1E0CB02D8]();
}

uint64_t sub_1A5C419FC()
{
  return MEMORY[0x1E0CB03A0]();
}

uint64_t sub_1A5C41A08()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1A5C41A14()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1A5C41A20()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1A5C41A2C()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1A5C41A38()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1A5C41A44()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1A5C41A50()
{
  return MEMORY[0x1E0DEA378]();
}

uint64_t sub_1A5C41A5C()
{
  return MEMORY[0x1E0DEA388]();
}

uint64_t sub_1A5C41A68()
{
  return MEMORY[0x1E0DEA3B8]();
}

uint64_t sub_1A5C41A74()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1A5C41A80()
{
  return MEMORY[0x1E0DEA3C8]();
}

uint64_t sub_1A5C41A8C()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1A5C41A98()
{
  return MEMORY[0x1E0DEA400]();
}

uint64_t sub_1A5C41AA4()
{
  return MEMORY[0x1E0DEA428]();
}

uint64_t sub_1A5C41AB0()
{
  return MEMORY[0x1E0DEA430]();
}

uint64_t sub_1A5C41ABC()
{
  return MEMORY[0x1E0DEA480]();
}

uint64_t sub_1A5C41AC8()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1A5C41AD4()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1A5C41AE0()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t sub_1A5C41AEC()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1A5C41AF8()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1A5C41B04()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1A5C41B10()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1A5C41B1C()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1A5C41B28()
{
  return MEMORY[0x1E0DEA868]();
}

uint64_t sub_1A5C41B34()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1A5C41B40()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1A5C41B4C()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1A5C41B58()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1A5C41B64()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1A5C41B70()
{
  return MEMORY[0x1E0DEAA18]();
}

uint64_t sub_1A5C41B7C()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1A5C41B88()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1A5C41B94()
{
  return MEMORY[0x1E0DEAA80]();
}

uint64_t sub_1A5C41BA0()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t sub_1A5C41BAC()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1A5C41BB8()
{
  return MEMORY[0x1E0DEAB40]();
}

uint64_t sub_1A5C41BC4()
{
  return MEMORY[0x1E0DEABB0]();
}

uint64_t sub_1A5C41BD0()
{
  return MEMORY[0x1E0CB1AB8]();
}

uint64_t sub_1A5C41BDC()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1A5C41BE8()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1A5C41BF4()
{
  return MEMORY[0x1E0CB1AF8]();
}

uint64_t sub_1A5C41C00()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1A5C41C0C()
{
  return MEMORY[0x1E0DEAF00]();
}

uint64_t sub_1A5C41C18()
{
  return MEMORY[0x1E0DEB4F8]();
}

uint64_t sub_1A5C41C24()
{
  return MEMORY[0x1E0DEB510]();
}

uint64_t sub_1A5C41C30()
{
  return MEMORY[0x1E0DEB518]();
}

uint64_t sub_1A5C41C3C()
{
  return MEMORY[0x1E0DEB520]();
}

uint64_t sub_1A5C41C48()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1A5C41C54()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1A5C41C60()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1A5C41C6C()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t sub_1A5C41C78()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1A5C41C84()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1A5C41C90()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t sub_1A5C41C9C()
{
  return MEMORY[0x1E0DEB780]();
}

uint64_t sub_1A5C41CA8()
{
  return MEMORY[0x1E0DEB7A0]();
}

uint64_t sub_1A5C41CB4()
{
  return MEMORY[0x1E0DEB7D8]();
}

uint64_t sub_1A5C41CC0()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_1A5C41CCC()
{
  return MEMORY[0x1E0CB20D0]();
}

uint64_t sub_1A5C41CD8()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1A5C41CE4()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1A5C41CF0()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1A5C41CFC()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t sub_1A5C41D08()
{
  return MEMORY[0x1E0DEBAA0]();
}

uint64_t sub_1A5C41D14()
{
  return MEMORY[0x1E0DEBAD0]();
}

uint64_t sub_1A5C41D20()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t sub_1A5C41D2C()
{
  return MEMORY[0x1E0DEBB50]();
}

uint64_t sub_1A5C41D38()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t sub_1A5C41D44()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1A5C41D50()
{
  return MEMORY[0x1E0DEBC60]();
}

uint64_t sub_1A5C41D5C()
{
  return MEMORY[0x1E0DEBCC8]();
}

uint64_t sub_1A5C41D68()
{
  return MEMORY[0x1E0DEBCD0]();
}

uint64_t sub_1A5C41D74()
{
  return MEMORY[0x1E0DEBD70]();
}

uint64_t sub_1A5C41D80()
{
  return MEMORY[0x1E0DEBD78]();
}

uint64_t sub_1A5C41D8C()
{
  return MEMORY[0x1E0DEBDC0]();
}

uint64_t sub_1A5C41D98()
{
  return MEMORY[0x1E0DEBDF8]();
}

uint64_t sub_1A5C41DA4()
{
  return MEMORY[0x1E0DEBE00]();
}

uint64_t sub_1A5C41DB0()
{
  return MEMORY[0x1E0DEBE10]();
}

uint64_t sub_1A5C41DBC()
{
  return MEMORY[0x1E0DEBE48]();
}

uint64_t sub_1A5C41DC8()
{
  return MEMORY[0x1E0CB25B8]();
}

uint64_t sub_1A5C41DD4()
{
  return MEMORY[0x1E0DEBEC0]();
}

uint64_t sub_1A5C41DE0()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1A5C41DEC()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_1A5C41DF8()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_1A5C41E04()
{
  return MEMORY[0x1E0DEC2A0]();
}

uint64_t sub_1A5C41E10()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1A5C41E1C()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1A5C41E28()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1A5C41E34()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t sub_1A5C41E40()
{
  return MEMORY[0x1E0DEC8F8]();
}

uint64_t sub_1A5C41E4C()
{
  return MEMORY[0x1E0DECA08]();
}

uint64_t sub_1A5C41E58()
{
  return MEMORY[0x1E0DECBA8]();
}

uint64_t sub_1A5C41E64()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1A5C41E70()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1A5C41E7C()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1A5C41E88()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t sub_1A5C41E94()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1A5C41EA0()
{
  return MEMORY[0x1E0DED980]();
}

uint64_t sub_1A5C41EAC()
{
  return MEMORY[0x1E0DED9C0]();
}

uint64_t sub_1A5C41EB8()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t sub_1A5C41EC4()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1A5C41ED0()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1A5C41EDC()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1A5C41EE8()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1A5C41EF4()
{
  return MEMORY[0x1E0CB26A0]();
}

uint64_t sub_1A5C41F00()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1A5C41F0C()
{
  return MEMORY[0x1E0DEDF00]();
}

uint64_t sub_1A5C41F18()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1A5C41F24()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1A5C41F30()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1A5C41F3C()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1A5C41F48()
{
  return MEMORY[0x1E0DEE978]();
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x1E0CD62F0](key);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1E0C81870]();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return MEMORY[0x1E0C81880]();
}

uint64_t ccaes_ccm_decrypt_mode()
{
  return MEMORY[0x1E0C81888]();
}

uint64_t ccaes_ccm_encrypt_mode()
{
  return MEMORY[0x1E0C81890]();
}

uint64_t ccaes_ecb_decrypt_mode()
{
  return MEMORY[0x1E0C818A0]();
}

uint64_t ccaes_ecb_encrypt_mode()
{
  return MEMORY[0x1E0C818A8]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1E0C818B0]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1E0C818B8]();
}

uint64_t ccccm_one_shot()
{
  return MEMORY[0x1E0C81928]();
}

uint64_t ccchacha20poly1305_aad()
{
  return MEMORY[0x1E0C81938]();
}

uint64_t ccchacha20poly1305_finalize()
{
  return MEMORY[0x1E0C81950]();
}

uint64_t ccchacha20poly1305_info()
{
  return MEMORY[0x1E0C81958]();
}

uint64_t ccchacha20poly1305_init()
{
  return MEMORY[0x1E0C81960]();
}

uint64_t ccchacha20poly1305_setnonce()
{
  return MEMORY[0x1E0C81970]();
}

uint64_t ccchacha20poly1305_verify()
{
  return MEMORY[0x1E0C81978]();
}

uint64_t cccmac_final_generate()
{
  return MEMORY[0x1E0C81980]();
}

uint64_t cccmac_init()
{
  return MEMORY[0x1E0C81988]();
}

uint64_t cccmac_update()
{
  return MEMORY[0x1E0C81990]();
}

uint64_t cccurve25519_make_priv()
{
  return MEMORY[0x1E0C819A8]();
}

uint64_t cccurve25519_make_pub_with_rng()
{
  return MEMORY[0x1E0C819B8]();
}

uint64_t cccurve25519_with_rng()
{
  return MEMORY[0x1E0C819C0]();
}

uint64_t cccurve448()
{
  return MEMORY[0x1E0C819C8]();
}

uint64_t cccurve448_make_priv()
{
  return MEMORY[0x1E0C819D8]();
}

uint64_t cccurve448_make_pub()
{
  return MEMORY[0x1E0C819E0]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x1E0C81BD8]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x1E0C81BE0]();
}

uint64_t ccec_compact_export_pub()
{
  return MEMORY[0x1E0C81BF8]();
}

uint64_t ccec_compact_generate_key()
{
  return MEMORY[0x1E0C81C00]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1E0C81C30]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1E0C81C38]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1E0C81C60]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1E0C81C68]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1E0C81C70]();
}

uint64_t ccec_der_export_priv()
{
  return MEMORY[0x1E0C81C90]();
}

uint64_t ccec_der_export_priv_size()
{
  return MEMORY[0x1E0C81C98]();
}

uint64_t ccec_der_import_priv()
{
  return MEMORY[0x1E0C81CA8]();
}

uint64_t ccec_diversify_min_entropy_len()
{
  return MEMORY[0x1E0C81CB8]();
}

uint64_t ccec_diversify_priv_twin()
{
  return MEMORY[0x1E0C81CC0]();
}

uint64_t ccec_diversify_pub_twin()
{
  return MEMORY[0x1E0C81CD0]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x1E0C81CD8]();
}

uint64_t ccec_generate_key_deterministic()
{
  return MEMORY[0x1E0C81CF8]();
}

uint64_t ccec_generate_key_fips()
{
  return MEMORY[0x1E0C81D00]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x1E0C81D20]();
}

uint64_t ccec_raw_import_priv_only()
{
  return MEMORY[0x1E0C81D48]();
}

uint64_t ccec_sign_composite()
{
  return MEMORY[0x1E0C81DB0]();
}

uint64_t ccec_verify_composite()
{
  return MEMORY[0x1E0C81DD0]();
}

uint64_t ccec_x963_export()
{
  return MEMORY[0x1E0C81DE0]();
}

uint64_t ccec_x963_import_priv()
{
  return MEMORY[0x1E0C81DE8]();
}

uint64_t ccecb_init()
{
  return MEMORY[0x1E0C81E10]();
}

uint64_t ccecb_one_shot()
{
  return MEMORY[0x1E0C81E18]();
}

uint64_t ccecdh_compute_shared_secret()
{
  return MEMORY[0x1E0C81E20]();
}

uint64_t cced25519_make_key_pair()
{
  return MEMORY[0x1E0C81E70]();
}

uint64_t cced25519_make_pub()
{
  return MEMORY[0x1E0C81E78]();
}

uint64_t cced25519_sign()
{
  return MEMORY[0x1E0C81E88]();
}

uint64_t cced25519_verify()
{
  return MEMORY[0x1E0C81E98]();
}

uint64_t cced448_make_key_pair()
{
  return MEMORY[0x1E0C81EA0]();
}

uint64_t cced448_make_pub()
{
  return MEMORY[0x1E0C81EA8]();
}

uint64_t cced448_sign()
{
  return MEMORY[0x1E0C81EB0]();
}

uint64_t cced448_verify()
{
  return MEMORY[0x1E0C81EB8]();
}

uint64_t ccgcm_aad()
{
  return MEMORY[0x1E0C81EC0]();
}

uint64_t ccgcm_finalize()
{
  return MEMORY[0x1E0C81ED0]();
}

uint64_t ccgcm_init()
{
  return MEMORY[0x1E0C81EE8]();
}

uint64_t ccgcm_set_iv()
{
  return MEMORY[0x1E0C81F08]();
}

uint64_t ccgcm_update()
{
  return MEMORY[0x1E0C81F10]();
}

uint64_t cckem_decapsulate()
{
  return MEMORY[0x1E0C82128]();
}

uint64_t cckem_encapsulate()
{
  return MEMORY[0x1E0C82130]();
}

uint64_t cckem_encapsulated_key_nbytes_info()
{
  return MEMORY[0x1E0C82140]();
}

uint64_t cckem_export_privkey()
{
  return MEMORY[0x1E0C82148]();
}

uint64_t cckem_export_pubkey()
{
  return MEMORY[0x1E0C82150]();
}

uint64_t cckem_full_ctx_init()
{
  return MEMORY[0x1E0C82158]();
}

uint64_t cckem_generate_key()
{
  return MEMORY[0x1E0C82160]();
}

uint64_t cckem_import_privkey()
{
  return MEMORY[0x1E0C82168]();
}

uint64_t cckem_import_pubkey()
{
  return MEMORY[0x1E0C82170]();
}

uint64_t cckem_privkey_nbytes_info()
{
  return MEMORY[0x1E0C82190]();
}

uint64_t cckem_pub_ctx_init()
{
  return MEMORY[0x1E0C82198]();
}

uint64_t cckem_pubkey_nbytes_info()
{
  return MEMORY[0x1E0C821A8]();
}

uint64_t cckem_public_ctx()
{
  return MEMORY[0x1E0C821B0]();
}

uint64_t cckem_shared_key_nbytes_info()
{
  return MEMORY[0x1E0C821C0]();
}

uint64_t cckem_sizeof_full_ctx()
{
  return MEMORY[0x1E0C821C8]();
}

uint64_t cckem_sizeof_pub_ctx()
{
  return MEMORY[0x1E0C821D0]();
}

uint64_t ccrng()
{
  return MEMORY[0x1E0C822A8]();
}

uint64_t ccrng_generate_bridge()
{
  return MEMORY[0x1E0D1BDA0]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1E0C823E0]();
}

uint64_t ccsha384_di()
{
  return MEMORY[0x1E0C823E8]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x1E0C823F8]();
}

uint64_t ccwrap_auth_decrypt()
{
  return MEMORY[0x1E0C825A0]();
}

uint64_t ccwrap_auth_encrypt()
{
  return MEMORY[0x1E0C825A8]();
}

uint64_t ccwrap_unwrapped_size()
{
  return MEMORY[0x1E0C825B0]();
}

uint64_t ccwrap_wrapped_size()
{
  return MEMORY[0x1E0C825B8]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1E0C825C8]();
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t getCMACContextSize()
{
  return MEMORY[0x1E0D1BDB0]();
}

uint64_t getContextSizeForECBMode()
{
  return MEMORY[0x1E0D1BDB8]();
}

uint64_t getDigestSizeForDigestInfo()
{
  return MEMORY[0x1E0D1BDC0]();
}

uint64_t getGCMCtxSize()
{
  return MEMORY[0x1E0D1BDC8]();
}

uint64_t getccec_full_ctx_size()
{
  return MEMORY[0x1E0D1BDD0]();
}

uint64_t getccec_pub_ctx_size()
{
  return MEMORY[0x1E0D1BDD8]();
}

uint64_t init_ccec_ctx_full()
{
  return MEMORY[0x1E0D1BDE0]();
}

uint64_t init_ccec_ctx_pub()
{
  return MEMORY[0x1E0D1BDE8]();
}

uint64_t keyIsCompactRepresentable()
{
  return MEMORY[0x1E0D1BDF0]();
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

