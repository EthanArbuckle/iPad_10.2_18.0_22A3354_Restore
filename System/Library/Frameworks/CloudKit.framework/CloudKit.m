double sub_18A5C7AC4(uint64_t a1, void *a2, double a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;

  if (!a1)
    return 0.0;
  sub_18A5C7F78(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v8 = (void *)v4;
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      objc_msgSend_null(MEMORY[0x1E0C99E38], v9, v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v12;
      if (!v12)
        goto LABEL_9;
    }
LABEL_7:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend_doubleValue(v8, v13, v14, v15);
      a3 = v16;
    }
    goto LABEL_9;
  }
  objc_msgSend_null(MEMORY[0x1E0C99E38], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    goto LABEL_7;
LABEL_9:

  return a3;
}

void *sub_18A5C7B80(void *result)
{
  void *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t isEqualToString;

  if (result)
  {
    sub_18A5C7DE4(result, CFSTR("BuildOverride"), 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    CKBuildVersion();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v1, v3, (uint64_t)v2, v4);

    return (void *)isEqualToString;
  }
  return result;
}

id sub_18A5C7BE4(void *a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v1 = qword_1ECD96B50;
  v4 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECD96B50, &unk_1E1F58438);
  objc_msgSend_objectForKeyedSubscript_((void *)qword_1ECD96B48, v2, (uint64_t)v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_18A5C7D04(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD96A30);
  _Unwind_Resume(a1);
}

id sub_18A5C7D1C(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  v5 = a3;
  if (a1)
  {
    sub_18A5C7DE4(a1, a2, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v6, v7, (uint64_t)CFSTR("(Automatic)"), v8))
    {
      v12 = v5;

      v6 = v12;
    }
    if (!objc_msgSend_length(v6, v9, v10, v11)
      || (objc_msgSend_URLWithString_(MEMORY[0x1E0C99E98], v13, (uint64_t)v6, v15),
          (a1 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      if (objc_msgSend_length(v5, v13, v14, v15))
      {
        objc_msgSend_URLWithString_(MEMORY[0x1E0C99E98], v16, (uint64_t)v5, v17);
        a1 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        a1 = 0;
      }
    }

  }
  return a1;
}

id sub_18A5C7DE4(id a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isKindOfClass;
  void *v16;

  v5 = a3;
  if (a1)
  {
    sub_18A5C7F78((uint64_t)a1, a2);
    v6 = objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v10 = (void *)v6;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend_length(v10, v11, v12, v13))
      {
        objc_msgSend_null(MEMORY[0x1E0C99E38], v11, v12, v13);
        v14 = objc_claimAutoreleasedReturnValue();

        v10 = (void *)v14;
        if (!v14)
          goto LABEL_9;
      }
    }
    else
    {
      objc_msgSend_null(MEMORY[0x1E0C99E38], v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v10)
        goto LABEL_9;
    }
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v16 = v10;
    if ((isKindOfClass & 1) == 0)
    {
LABEL_10:
      a1 = v16;

      goto LABEL_11;
    }
LABEL_9:
    v16 = v5;
    goto LABEL_10;
  }
LABEL_11:

  return a1;
}

uint64_t sub_18A5C7EC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    return 0;
  sub_18A5C7F78(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v8 = (void *)v4;
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      objc_msgSend_null(MEMORY[0x1E0C99E38], v9, v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v12;
      if (!v12)
        goto LABEL_9;
    }
LABEL_7:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      a3 = objc_msgSend_BOOLValue(v8, v13, v14, v15);
    goto LABEL_9;
  }
  objc_msgSend_null(MEMORY[0x1E0C99E38], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    goto LABEL_7;
LABEL_9:

  return a3;
}

id sub_18A5C7F78(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;

  v6 = a2;
  if (a1)
  {
    objc_msgSend_CKUserDefaults(CKUserDefaults, v3, v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dictionaryForKey_(v7, v8, (uint64_t)CFSTR("BehaviorOptions"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)v6, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id sub_18A5C80BC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  CKException *v27;
  uint64_t v28;
  objc_class *v29;
  void *v30;
  const char *v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend_expressionType(a1, a2, a3, a4);
  if (v5 <= 2)
  {
    if (!v5)
    {
      objc_msgSend_constantValue(a1, v6, v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (v5 == 2)
    {
      objc_msgSend_variable(a1, v6, v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
LABEL_18:
      v25 = (void *)v9;
      return v25;
    }
LABEL_20:
    v27 = [CKException alloc];
    v28 = *MEMORY[0x1E0C99778];
    v29 = (objc_class *)objc_opt_class();
    NSStringFromClass(v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = (id)objc_msgSend_initWithName_format_(v27, v31, v28, (uint64_t)CFSTR("Unexpected expression: %@"), v30);

    objc_exception_throw(v32);
  }
  if (v5 == 3)
  {
    objc_msgSend_keyPath(a1, v6, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    goto LABEL_18;
  }
  if (v5 != 14)
    goto LABEL_20;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  objc_msgSend_collection(a1, v6, v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v33, (uint64_t)v37, 16);
  if (v12)
  {
    v16 = v12;
    v17 = *(_QWORD *)v34;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v34 != v17)
          objc_enumerationMutation(v10);
        if (objc_msgSend_expressionType(*(void **)(*((_QWORD *)&v33 + 1) + 8 * v18), v13, v14, v15))
          goto LABEL_20;
        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v33, (uint64_t)v37, 16);
    }
    while (v16);
  }

  objc_msgSend_collection(a1, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueForKeyPath_(v22, v23, (uint64_t)CFSTR("constantValue"), v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  return v25;
}

void sub_18A5C8390(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  sub_18A5C83F0(*(void **)(a1 + 32), *(_QWORD *)(a1 + 56), a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  sub_18A5C83F0(*(void **)(a1 + 32), 0, v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

id sub_18A5C83F0(void *a1, uint64_t a2, id a3, uint64_t a4)
{
  void *v4;

  if (!a1)
    return 0;
  if (a2 == 1)
  {
    objc_msgSend_orgAdminUserID(a1, (const char *)1, (uint64_t)a3, a4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (!a2)
  {
    objc_msgSend_containerScopedUserID(a1, 0, (uint64_t)a3, a4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_6:
    a3 = v4;
  }
  return a3;
}

void sub_18A5C8490(void **a1)
{
  sub_18A5C84C8(a1[4], a1[5], 0);
  sub_18A5C84C8(a1[4], a1[6], 1);
}

void sub_18A5C84C8(void *a1, void *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  char *v7;

  v5 = a2;
  if (a1)
  {
    if (a3 == 1)
    {
      v7 = v5;
      objc_msgSend_setOrgAdminUserID_(a1, v5, (uint64_t)v5, v6);
      goto LABEL_6;
    }
    if (!a3)
    {
      v7 = v5;
      objc_msgSend_setContainerScopedUserID_(a1, v5, (uint64_t)v5, v6);
LABEL_6:
      v5 = v7;
    }
  }

}

uint64_t sub_18A5C8DE8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](a1, sel_CKDescriptionRedact_avoidShortDescription_, 0, 0);
}

id sub_18A5C909C(void *a1)
{
  void *v2;
  void *v3;
  const char *v4;
  id v5;
  id v6;
  NSObject *v7;
  CKException *v9;
  const char *v10;
  id v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB3B30];
  CKAcceptablePredicateValueClasses();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__testEncodeAndDecodeObject_allowedClasses_(v2, v4, (uint64_t)a1, (uint64_t)v3);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = (id)*MEMORY[0x1E0C99778];
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412802;
      v13 = a1;
      v14 = 2112;
      v15 = v6;
      v16 = 2112;
      v17 = CFSTR("NSXPCCoder unexpectedly returned nil while encoding/decoding predicate");
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Predicate <%@> cannot be deep copied due to %@ (%@)", (uint8_t *)&v12, 0x20u);
    }
    if (CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9())
    {
      v9 = [CKException alloc];
      v11 = (id)objc_msgSend_initWithName_format_(v9, v10, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Predicate format incompatible with CloudKit"));
      objc_exception_throw(v11);
    }
    v5 = a1;

  }
  return v5;
}

uint64_t sub_18A5C937C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](a1, sel_CKDescriptionRedact_avoidShortDescription_, 1, 0);
}

uint64_t sub_18A5C9400(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v1;
  return result;
}

void sub_18A5C9744(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_18A5C9770(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("\\/:%"), a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invertedSet(v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(a1, v10, (uint64_t)v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_18A5C9DAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5C9E48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5CA294(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 10))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      objc_msgSend_shortDescription(v4, v6, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(unsigned __int8 *)(a1 + 40);
      v11 = 138543618;
      v12 = v9;
      v13 = 1024;
      v14 = v10;
      _os_log_debug_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@ setting didPerformInitialUserRecordIDFetch %d", (uint8_t *)&v11, 0x12u);

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) = *(_BYTE *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      ++*(_QWORD *)(v3 + 96);
  }
}

void sub_18A5CA3D8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

id sub_18A5CA6A4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;

  if (objc_msgSend_length(a1, a2, a3, a4))
    v5 = a1;
  else
    v5 = 0;
  return v5;
}

uint64_t sub_18A5CA6CC(void *a1, uint64_t a2, unint64_t a3)
{
  double v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __exp10((double)a3);
  v5 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_doubleValue(a1, v6, v7, v8);
  return objc_msgSend_numberWithDouble_(v5, v10, v11, v12, round(v4 * v9) / v4);
}

void sub_18A5CA978(_BYTE *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  if (a1)
  {
    objc_msgSend_callbackQueue(a1, v3, v4, v5);
    v7 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v7);

    if (__sTestOverridesAvailable
      && (objc_msgSend_unitTestOverrides(a1, v8, v9, v10),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_objectForKeyedSubscript_(v11, v12, (uint64_t)CFSTR("SkipCheckingExecuting"), v13),
          v14 = (void *)objc_claimAutoreleasedReturnValue(),
          v18 = objc_msgSend_BOOLValue(v14, v15, v16, v17),
          v14,
          v11,
          (v18 & 1) != 0)
      || (objc_msgSend_isExecuting(a1, v8, v9, v10) & 1) != 0)
    {
      if (!v6)
      {
        if (objc_msgSend_isCancelled(a1, v8, v9, v10))
        {
          sub_18A76792C(a1);
          v6 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v6 = 0;
        }
      }
      objc_msgSend_error(a1, v8, v9, v10);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v26)
        objc_msgSend_setError_(a1, v27, (uint64_t)v6, v29);
      if ((objc_msgSend_isFinished(a1, v27, v28, v29) & 1) == 0)
      {
        a1[281] = 1;
        objc_msgSend_error(a1, v30, v31, v32);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend__finishOnCallbackQueueWithError_(a1, v38, (uint64_t)v37, v39);

        a1[281] = 0;
        goto LABEL_22;
      }
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v33 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        v20 = v33;
        objc_msgSend_operationID(a1, v34, v35, v36);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v24;
        v25 = "Ignoring _finishInternalOnCallbackQueue invocation on already-finished operation %{public}@";
        goto LABEL_20;
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v19 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        v20 = v19;
        objc_msgSend_operationID(a1, v21, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v24;
        v25 = "The operation %{public}@ didn't start or is already finished";
LABEL_20:
        _os_log_debug_impl(&dword_18A5C5000, v20, OS_LOG_TYPE_DEBUG, v25, (uint8_t *)&v40, 0xCu);

      }
    }
  }
LABEL_22:

}

void sub_18A5CACBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5CAD4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  Class v15;
  void *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  id v25;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDFA8A30, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96F68;
  qword_1ECD96F68 = v4;

  v6 = (void *)qword_1ECD96F68;
  objc_msgSend_CKXPCDaemonToClientLogicalDeviceScopedInterface(CKLogicalDeviceScopedDaemonProxy, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v6, v11, (uint64_t)v10, (uint64_t)sel_getLogicalDeviceScopedClientProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 1);

  if (__sTestOverridesAvailable)
  {
    v15 = NSClassFromString(CFSTR("CKTestDeviceReference"));
    v16 = (void *)qword_1ECD96F68;
    v17 = (void *)MEMORY[0x1E0C99E60];
    v18 = objc_opt_class();
    objc_msgSend_setWithObjects_(v17, v19, (uint64_t)v15, v20, v18, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v16, v22, (uint64_t)v21, (uint64_t)sel_getLogicalDeviceScopedClientProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 0);

  }
  v23 = (void *)qword_1ECD96F68;
  objc_msgSend_CKXPCDaemonToClientProcessScopedInterface(CKProcessScopedDaemonProxy, v12, v13, v14);
  v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v23, v24, (uint64_t)v25, (uint64_t)sel_getProcessScopedClientProxyCreatorWithCompletionHandler_, 0, 1);

}

void sub_18A5CAE84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  const char *v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  void *v28;
  const char *v29;
  Class v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  id v36;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDFB4708, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96F58;
  qword_1ECD96F58 = v4;

  v6 = (void *)qword_1ECD96F58;
  sub_18A60757C();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v6, v8, (uint64_t)v7, (uint64_t)sel_getContainerScopedDaemonProxyCreatorForSetupInfo_containerScopedClientProxy_completionHandler_, 1, 0);

  v9 = (void *)qword_1ECD96F58;
  sub_18A6075C0();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v9, v11, (uint64_t)v10, (uint64_t)sel_getContainerScopedDaemonProxyCreatorForSetupInfo_containerScopedClientProxy_completionHandler_, 0, 1);

  v12 = (void *)qword_1ECD96F58;
  objc_msgSend_CKXPCClientToDaemonLogicalDeviceScopedInterface(CKLogicalDeviceScopedDaemonProxy, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v12, v17, (uint64_t)v16, (uint64_t)sel_getLogicalDeviceScopedDaemonProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 1);

  if (__sTestOverridesAvailable)
  {
    v21 = NSClassFromString(CFSTR("CKTestDeviceReference"));
    v22 = (void *)qword_1ECD96F58;
    objc_msgSend_setWithObject_(MEMORY[0x1E0C99E60], v23, (uint64_t)v21, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v22, v26, (uint64_t)v25, (uint64_t)sel_getLogicalDeviceScopedDaemonProxyCreatorForTestDeviceReferenceProtocol_completionHandler_, 0, 0);

  }
  v27 = (void *)qword_1ECD96F58;
  objc_msgSend_CKXPCClientToDaemonProcessScopedInterface(CKProcessScopedDaemonProxy, v18, v19, v20);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v27, v29, (uint64_t)v28, (uint64_t)sel_getProcessScopedDaemonProxyCreatorWithCompletionHandler_, 0, 1);

  if (__sTestOverridesAvailable)
  {
    v30 = NSClassFromString(CFSTR("CKTestServerManager"));
    v31 = (void *)qword_1ECD96F58;
    objc_msgSend_CKXPCClientToDaemonTestServerManagerInterface(v30, v32, v33, v34);
    v36 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(v31, v35, (uint64_t)v36, (uint64_t)sel_getDaemonTestServerManagerProxyCreatorWithCompletionHandler_, 0, 1);

  }
}

id sub_18A5CB2D0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v16;
  uint64_t v17;
  void *v18;
  __CFString *v19;

  if (!objc_msgSend_length(a1, a2, a3, a4))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8, v9);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((a3 - 1) >= 8)
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("(unknown: %i)"), v17, a3);
      v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v19 = off_1E1F62460[(int)a3 - 1];
    }
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v16, (uint64_t)a2, (uint64_t)a1, CFSTR("CKUtils.m"), 2682, CFSTR("You can't pass an empty string for an identifier of type %@"), v19);

  }
  v10 = (void *)objc_opt_new();
  objc_msgSend_setName_(v10, v11, (uint64_t)a1, v12);
  if ((int)a3 >= 1)
    objc_msgSend_setType_(v10, v13, a3, v14);
  return v10;
}

void sub_18A5CC44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_18A5CD0A0(void *result, void *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    sub_18A5E9210(result, a2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend_BOOLValue(v2, v3, v4, v5);

    return (void *)v6;
  }
  return result;
}

void sub_18A5CD2A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A5CD2C4(void *a1)
{
  if (a1)
  {
    sub_18A5E9210(a1, CFSTR("application-identifier"));
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

BOOL sub_18A5CD440(void *a1)
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  sub_18A5E9210(a1, CFSTR("aps-connection-initiate"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

void sub_18A5CEF4C(uint64_t a1, objc_class *a2, void *a3, void *a4, int a5)
{
  id v8;
  id v9;
  objc_class *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = (objc_class *)objc_opt_self();
  if (qword_1ECD97090 != -1)
    dispatch_once(&qword_1ECD97090, &unk_1E1F62150);
  if (byte_1ECD96F97 && v10 != a2)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v11 = v8;
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v38, (uint64_t)v47, 16);
    if (v13)
    {
      v15 = v13;
      v16 = *(_QWORD *)v39;
LABEL_7:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v39 != v16)
          objc_enumerationMutation(v11);
        if (v10 == *(objc_class **)(*((_QWORD *)&v38 + 1) + 8 * v17))
          goto LABEL_24;
        if (v15 == ++v17)
        {
          v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v38, (uint64_t)v47, 16);
          if (v15)
            goto LABEL_7;
          break;
        }
      }
    }

    NSStringFromClass(v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v18 = v9;
    v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v34, (uint64_t)v46, 16);
    if (v20)
    {
      v23 = v20;
      v24 = *(_QWORD *)v35;
LABEL_15:
      v25 = 0;
      while (1)
      {
        if (*(_QWORD *)v35 != v24)
          objc_enumerationMutation(v18);
        if ((objc_msgSend_isEqualToString_(*(void **)(*((_QWORD *)&v34 + 1) + 8 * v25), v21, (uint64_t)v11, v22) & 1) != 0)
          break;
        if (v23 == ++v25)
        {
          v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v21, (uint64_t)&v34, (uint64_t)v46, 16);
          if (v23)
            goto LABEL_15;
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:

      if (!a5)
      {
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v31 = (void *)ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          v32 = v31;
          NSStringFromClass(a2);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v43 = v33;
          v44 = 2114;
          v45 = v11;
          _os_log_error_impl(&dword_18A5C5000, v32, OS_LOG_TYPE_ERROR, "BUG IN CLIENT OF CLOUDKIT: %{public}@ should not be subclassed (%{public}@). If it is, Sendable may no longer apply. This will become an error in a near future release.", buf, 0x16u);

        }
        goto LABEL_24;
      }
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v26, v27, v28);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      NSStringFromClass(a2);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v30, (uint64_t)sel_CKVerifySubclassWithBaseClass_allowedSubclasses_allowedExternalSubclasses_assert_, (uint64_t)v10, CFSTR("CKUtils.m"), 2639, CFSTR("BUG IN CLIENT OF CLOUDKIT: %@ should not be subclassed (%@). If it is, Sendable may no longer apply."), v29, v11, (_QWORD)v34);

    }
LABEL_24:

  }
}

void sub_18A5CF26C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[5];
  _QWORD v23[5];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[37];
  _QWORD v27[38];

  v27[37] = *MEMORY[0x1E0C80C00];
  v26[0] = CFSTR("com.apple.ActivitySharing");
  v26[1] = CFSTR("com.apple.bluetooth");
  v27[0] = &unk_1E1FC4658;
  v27[1] = &unk_1E1FC4670;
  v26[2] = CFSTR("com.apple.clouddocs");
  v26[3] = CFSTR("com.apple.test.p01.B.Xaeaeg.com.apple.clouddocs");
  v26[4] = CFSTR("com.apple.photos.cloud");
  v26[5] = CFSTR("com.apple.test.p01.B.Xaeaeg.com.apple.photos.cloud");
  v27[4] = &unk_1E1FC46A0;
  v27[5] = &unk_1E1FC46A0;
  v26[6] = CFSTR("com.apple.coremotion.coldstorage");
  v26[7] = CFSTR("com.apple.health.sync.secure");
  v26[8] = CFSTR("com.apple.willow.config");
  v26[9] = CFSTR("com.apple.iad-cloudkit");
  v27[8] = &unk_1E1FC46D0;
  v27[9] = &unk_1E1FC46E8;
  v26[10] = CFSTR("com.apple.pages.sync");
  v26[11] = CFSTR("com.apple.numbers.sync");
  v27[10] = &unk_1E1FC4700;
  v27[11] = &unk_1E1FC4718;
  v26[12] = CFSTR("com.apple.keynote.sync");
  v26[13] = CFSTR("com.apple.journal");
  v26[14] = CFSTR("com.apple.textinput.KeyboardServices");
  v26[15] = CFSTR("com.apple.security.keychain");
  v27[14] = &unk_1E1FC4760;
  v27[15] = &unk_1E1FC4778;
  v26[16] = CFSTR("com.apple.KeyValueService");
  v26[17] = CFSTR("com.apple.largeattachment");
  v27[16] = &unk_1E1FC4790;
  v27[17] = &unk_1E1FC47A8;
  v27[12] = &unk_1E1FC4730;
  v27[13] = &unk_1E1FC4748;
  v26[18] = CFSTR("com.apple.messages.cloud");
  v26[19] = CFSTR("com.apple.Avatars");
  v27[18] = &unk_1E1FC47C0;
  v27[19] = &unk_1E1FC47D8;
  v26[20] = CFSTR("com.apple.moments");
  v26[21] = CFSTR("com.apple.callhistory.cloud-storage2");
  v27[20] = &unk_1E1FC4748;
  v27[21] = &unk_1E1FC47F0;
  v26[22] = CFSTR("com.apple.FTMessageStoreService");
  v26[23] = CFSTR("com.apple.ProactivePredictionsBackup");
  v27[22] = &unk_1E1FC4808;
  v27[23] = &unk_1E1FC4820;
  v26[24] = CFSTR("com.apple.reminders");
  v26[25] = CFSTR("com.apple.SafariShared.WBSCloudBookmarksStore");
  v27[24] = &unk_1E1FC4838;
  v27[25] = &unk_1E1FC4850;
  v27[2] = &unk_1E1FC4688;
  v27[3] = &unk_1E1FC4688;
  v26[26] = CFSTR("com.apple.SafariShared.WBSCloudHistoryStore");
  v26[27] = CFSTR("com.apple.SafariShared.CloudTabs");
  v27[26] = &unk_1E1FC4868;
  v27[27] = &unk_1E1FC4880;
  v26[28] = CFSTR("com.apple.test.p01.B.Xaeaeg.com.apple.SafariShared.CloudTabs");
  v26[29] = CFSTR("com.apple.test.p01.B.Xaeaeg.com.apple.freeform");
  v27[28] = &unk_1E1FC4880;
  v27[29] = &unk_1E1FC4898;
  v26[30] = CFSTR("com.apple.freeform");
  v26[31] = CFSTR("com.apple.sharingd");
  v27[30] = &unk_1E1FC4898;
  v27[31] = &unk_1E1FC48B0;
  v27[6] = &unk_1E1FC46B8;
  v27[7] = &unk_1E1FC46B8;
  v26[32] = CFSTR("com.apple.socialgaming.sessions");
  v26[33] = CFSTR("com.apple.accessibility.TTYCallHistory");
  v27[32] = &unk_1E1FC48C8;
  v27[33] = &unk_1E1FC48E0;
  v26[34] = CFSTR("com.apple.vo2max");
  v26[35] = CFSTR("com.apple.test.p01.B.Xaeaeg.com.apple.icloud.events");
  v27[34] = &unk_1E1FC46B8;
  v27[35] = &unk_1E1FC48F8;
  v26[36] = CFSTR("com.apple.icloud.events");
  v27[36] = &unk_1E1FC48F8;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v27, (uint64_t)v26, 37);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECD96B98;
  qword_1ECD96B98 = v2;

  v24[0] = CFSTR("com.apple.backup");
  v24[1] = CFSTR("com.apple.notes");
  v25[0] = &unk_1E1FC4910;
  v25[1] = &unk_1E1FC4928;
  v24[2] = CFSTR("com.apple.news");
  v24[3] = CFSTR("com.apple.siri");
  v25[2] = &unk_1E1FC4940;
  v25[3] = &unk_1E1FC4958;
  v24[4] = CFSTR("com.apple.pay");
  v24[5] = CFSTR("com.apple.homekit");
  v25[4] = &unk_1E1FC4970;
  v25[5] = &unk_1E1FC46D0;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v25, (uint64_t)v24, 6);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1ECD96BA0;
  qword_1ECD96BA0 = v5;

  v22[0] = CFSTR("com.apple.clouddocs");
  v22[1] = CFSTR("com.apple.test.reminders");
  v23[0] = &unk_1E1FC4688;
  v23[1] = &unk_1E1FC4838;
  v22[2] = CFSTR("com.apple.siri.profile");
  v22[3] = CFSTR("com.apple.test.zone_sharing.dugong.zoneish_pcs");
  v23[2] = &unk_1E1FC4988;
  v23[3] = &unk_1E1FC49A0;
  v22[4] = CFSTR("com.apple.test.zone_sharing.dugong.record_pcs");
  v23[4] = &unk_1E1FC49A0;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)v23, (uint64_t)v22, 5);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)qword_1ECD96BA8;
  qword_1ECD96BA8 = v8;

  objc_msgSend_setWithObject_(MEMORY[0x1E0C99E60], v10, (uint64_t)CFSTR("com.apple.ckcode.ckclient.unittests"), v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_1ECD96BB0;
  qword_1ECD96BB0 = v12;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], v14, (uint64_t)CFSTR("com.apple.test."), v15, CFSTR("com.apple.cloudkit.unittest."), 0);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)qword_1ECD96BB8;
  qword_1ECD96BB8 = v16;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], v18, (uint64_t)CFSTR("com.apple."), v19, CFSTR("iCloud.com.apple."), 0);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)qword_1ECD96BC0;
  qword_1ECD96BC0 = v20;

}

void sub_18A5CF9B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  id v16;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDF80370, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96AD8;
  qword_1ECD96AD8 = v4;

  v6 = (void *)qword_1ECD96AD8;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v6, v13, (uint64_t)v12, (uint64_t)sel_consumeSandboxExtensions_reply_, 0, 0);

  v14 = (void *)qword_1ECD96AD8;
  CKErrorUserInfoClasses();
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v14, v15, (uint64_t)v16, (uint64_t)sel_handleSharingUIUpdatedShare_recordID_isDeleted_error_reply_, 3, 0);

}

id CKErrorUserInfoClasses()
{
  if (qword_1ECD97008 != -1)
    dispatch_once(&qword_1ECD97008, &unk_1E1F61F90);
  return (id)qword_1ECD97000;
}

void sub_18A5CFB5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDFB4528, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96AE8;
  qword_1ECD96AE8 = v4;

  v6 = (void *)qword_1ECD96AE8;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v6, v13, (uint64_t)v12, (uint64_t)sel_statusGroupsForApplicationPermission_completionHandler_, 0, 1);

  v14 = (void *)qword_1ECD96AE8;
  v15 = (void *)MEMORY[0x1E0C99E60];
  v16 = objc_opt_class();
  v17 = objc_opt_class();
  objc_msgSend_setWithObjects_(v15, v18, v16, v19, v17, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v14, v21, (uint64_t)v20, (uint64_t)sel_getRecordPCSDiagnosticsForZonesWithCompletionHandler_, 0, 1);

  v81 = (void *)MEMORY[0x1E0C99E60];
  v82 = (void *)qword_1ECD96AE8;
  v80 = objc_opt_class();
  v79 = objc_opt_class();
  v78 = objc_opt_class();
  v77 = objc_opt_class();
  v76 = objc_opt_class();
  v75 = objc_opt_class();
  v74 = objc_opt_class();
  v73 = objc_opt_class();
  v72 = objc_opt_class();
  v71 = objc_opt_class();
  v70 = objc_opt_class();
  v69 = objc_opt_class();
  v68 = objc_opt_class();
  v67 = objc_opt_class();
  v22 = objc_opt_class();
  v23 = objc_opt_class();
  v24 = objc_opt_class();
  v25 = objc_opt_class();
  v26 = objc_opt_class();
  v27 = objc_opt_class();
  v28 = objc_opt_class();
  v29 = objc_opt_class();
  v30 = objc_opt_class();
  v31 = objc_opt_class();
  v32 = objc_opt_class();
  objc_msgSend_setWithObjects_(v81, v33, v80, v34, v79, v78, v77, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v22, v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v82, v36, (uint64_t)v35, (uint64_t)sel_fetchLongLivedOperationsWithIDs_completionHandler_, 0, 1);

  objc_msgSend_setXPCType_forSelector_argumentIndex_ofReply_((void *)qword_1ECD96AE8, v37, MEMORY[0x1E0C812F8], (uint64_t)sel_networkTransferEndpointWithCompletionHandler_, 0, 1);
  v38 = (void *)qword_1ECD96AE8;
  v39 = (void *)MEMORY[0x1E0C99E60];
  v40 = objc_opt_class();
  v41 = objc_opt_class();
  v42 = objc_opt_class();
  v43 = objc_opt_class();
  v44 = objc_opt_class();
  v45 = objc_opt_class();
  objc_msgSend_setWithObjects_(v39, v46, v40, v47, v41, v42, v43, v44, v45, 0);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v38, v49, (uint64_t)v48, (uint64_t)sel_setFakeResponseOperationResult_forNextRequestOfClassName_forItemID_withLifetime_completionHandler_, 2, 0);

  v50 = (void *)qword_1ECD96AE8;
  v51 = (void *)MEMORY[0x1E0C99E60];
  v52 = objc_opt_class();
  v53 = objc_opt_class();
  v54 = objc_opt_class();
  v55 = objc_opt_class();
  objc_msgSend_setWithObjects_(v51, v56, v52, v57, v53, v54, v55, 0);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v50, v59, (uint64_t)v58, (uint64_t)sel_setFakeError_forNextRequestOfClassName_completionHandler_, 0, 0);

  v60 = (void *)qword_1ECD96AE8;
  v61 = (void *)MEMORY[0x1E0C99E60];
  v62 = objc_opt_class();
  v63 = objc_opt_class();
  objc_msgSend_setWithObjects_(v61, v64, v62, v65, v63, 0);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v60, v66, (uint64_t)v83, (uint64_t)sel_clearPILSCacheForLookupInfos_, 0, 0);

}

id sub_18A5D0628(void *a1, int a2, void *a3)
{
  void (**v5)(id, void *);
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  void *v13;
  uint8_t v15[16];

  v5 = a3;
  if (a1)
  {
    sub_18A5D0830(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v6;
    if (v6)
    {
      if (a2)
        objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v6, v7, (uint64_t)v5, v8);
      else
        objc_msgSend_remoteObjectProxyWithErrorHandler_(v6, v7, (uint64_t)v5, v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v10 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_error_impl(&dword_18A5C5000, v10, OS_LOG_TYPE_ERROR, "Couldn't get connection to daemon", v15, 2u);
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Couldn't get connection to daemon"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
        v5[2](v5, v12);

      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_18A5D0774(id *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8[2];

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_18A5E1878;
  v6[3] = &unk_1E1F60E00;
  objc_copyWeak(v8, a1 + 5);
  v8[1] = a1[6];
  v7 = a1[4];
  objc_msgSend_importantUserIDsWithCompletionHandler_(v3, v4, (uint64_t)v6, v5);

  objc_destroyWeak(v8);
}

void sub_18A5D081C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_18A5D0830(void *a1)
{
  id *v1;
  id v2;
  void *v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  void *v53;
  id *v54;
  _QWORD *v55;
  id v56;
  _QWORD v57[5];
  id v58;
  _QWORD v59[4];
  id location;
  uint8_t buf[4];
  void *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    v2 = v1[2];
    v3 = v2;
    if (((_BYTE)v1[1] & 1) != 0 && v2)
    {
      v4 = v2;
    }
    else
    {
      if (qword_1ECD96F88 != -1)
        dispatch_once(&qword_1ECD96F88, &unk_1E1F58EF8);
      objc_opt_self();
      v5 = CFSTR("com.apple.cloudd");
      if (__sTestOverridesAvailable)
      {
        v6 = CFSTR("com.apple.cloudkit.partlycloudd");

        v5 = v6;
      }
      else
      {
        objc_opt_self();
      }
      if (_sCKUseSystemInstalledBinariesPredicate != -1)
        dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1E1F58B98);
      if (!_sCKUseSystemInstalledBinaries)
      {
        objc_msgSend_stringByAppendingString_(v5, v7, (uint64_t)CFSTR(".debug"), v8);
        v49 = objc_claimAutoreleasedReturnValue();

        v5 = (__CFString *)v49;
      }
      v9 = objc_alloc(MEMORY[0x1E0CB3B38]);
      v4 = (void *)objc_msgSend_initWithMachServiceName_options_(v9, v10, (uint64_t)v5, 0);

      objc_initWeak(&location, v1);
      v59[0] = 0;
      v59[1] = v59;
      v59[2] = 0x2020000000;
      v59[3] = v4;
      v11 = MEMORY[0x1E0C809B0];
      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 3221225472;
      v57[2] = sub_18A8157A8;
      v57[3] = &unk_1E1F66810;
      objc_copyWeak(&v58, &location);
      v57[4] = v59;
      objc_msgSend_setInterruptionHandler_(v4, v12, (uint64_t)v57, v13);
      v50 = v11;
      v51 = 3221225472;
      v52 = sub_18A5F34BC;
      v53 = &unk_1E1F66838;
      objc_copyWeak(&v56, &location);
      v54 = v1;
      v55 = v59;
      objc_msgSend_setInvalidationHandler_(v4, v14, (uint64_t)&v50, v15);
      objc_msgSend_CKXPCClientToDaemonMuxerInterface(CKXPCConnection, v16, v17, v18, v50, v51, v52, v53);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setRemoteObjectInterface_(v4, v20, (uint64_t)v19, v21);

      objc_msgSend_CKXPCDaemonToClientMuxerInterface(CKXPCConnection, v22, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setExportedInterface_(v4, v26, (uint64_t)v25, v27);

      objc_msgSend_setExportedObject_(v4, v28, (uint64_t)v1, v29);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v30 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v62 = v4;
        _os_log_impl(&dword_18A5C5000, v30, OS_LOG_TYPE_INFO, "Created a new connection: %@", buf, 0xCu);
      }
      objc_msgSend_invalidate(v1[2], v31, v32, v33);
      objc_storeStrong(v1 + 2, v4);
      *((_BYTE *)v1 + 8) = v4 != 0;
      objc_msgSend_resume(v4, v34, v35, v36);
      objc_msgSend_sharedManager(CKProcessScopedStateManager, v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      sub_18A5FA640((uint64_t)v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_remoteObjectProxy(v4, v42, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_noteClientProcessScopedMetadata_(v45, v46, (uint64_t)v41, v47);

      objc_destroyWeak(&v56);
      objc_destroyWeak(&v58);
      _Block_object_dispose(v59, 8);
      objc_destroyWeak(&location);
    }
    objc_sync_exit(v1);

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_18A5D0C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  id *v23;
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak((id *)(v25 - 120));
  objc_sync_exit(v22);
  _Unwind_Resume(a1);
}

void sub_18A5D0FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A5D1164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5D1840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A5D185C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  void *v11;
  NSObject *v12;
  objc_class *v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  const char *v48;
  const char *string;
  uint64_t v50;
  void *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  char shouldBeDataBudgeted;
  uint64_t v57;
  NSObject *v58;
  objc_class *v59;
  id v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  objc_class *v66;
  id v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  int64_t int64;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  NSObject *v78;
  objc_class *v79;
  id v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  const char *v99;
  void *v100;
  id v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  NSObject *v109;
  objc_class *v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  _QWORD aBlock[4];
  id v143;
  id location;
  uint8_t buf[4];
  id v146;
  __int16 v147;
  void *v148;
  __int16 v149;
  id v150;
  __int16 v151;
  void *v152;
  __int16 v153;
  void *v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_transitionToExecuting(*(void **)(a1 + 32), a2, a3, a4) & 1) == 0)
  {
    v8 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend_operationID(*(void **)(a1 + 32), v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_raise_format_(v8, v10, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("You can't restart an executing or finished CKOperation: %@"), v9);

  }
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), v5, v6, v7))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v11 = (void *)ck_log_facility_op;
    if (os_log_type_enabled((os_log_t)ck_log_facility_op, OS_LOG_TYPE_DEFAULT))
    {
      v12 = v11;
      v13 = (objc_class *)objc_opt_class();
      NSStringFromClass(v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(void **)(a1 + 32);
      objc_msgSend_ckShortDescription(v15, v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v146 = v14;
      v147 = 2048;
      v148 = v15;
      v149 = 2114;
      v150 = v19;
      _os_log_impl(&dword_18A5C5000, v12, OS_LOG_TYPE_DEFAULT, "Not starting already cancelled operation <%{public}@: %p; %{public}@>",
        buf,
        0x20u);

    }
    v20 = *(void **)(a1 + 32);
    sub_18A76792C(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_finishWithError_(v20, v22, (uint64_t)v21, v23);

  }
  else
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_18A767D64;
    aBlock[3] = &unk_1E1F64318;
    objc_copyWeak(&v143, &location);
    v140 = _Block_copy(aBlock);
    objc_msgSend_resolvedConfiguration(*(void **)(a1 + 32), v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ckXPCActivity(v27, v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (v31)
    {
      objc_msgSend_operationMetric(*(void **)(a1 + 32), v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_criteria(v31, v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_validateXPCActivityCriteria_(*(void **)(a1 + 32), v40, (uint64_t)v39, v41);
      if (xpc_dictionary_get_BOOL(v39, (const char *)*MEMORY[0x1E0C808E0]))
        objc_msgSend_setObject_forKeyedSubscript_(v35, v42, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("xpcActivity_criteria_requireSignificantUserInactivity"));
      if (!xpc_dictionary_get_BOOL(v39, (const char *)*MEMORY[0x1E0C808D0]))
        objc_msgSend_setObject_forKeyedSubscript_(v35, v43, MEMORY[0x1E0C9AAA0], (uint64_t)CFSTR("xpcActivity_criteria_requireNetworkConnectivity"));
      objc_msgSend_identifier(v31, v43, v44, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v35, v47, (uint64_t)v46, (uint64_t)CFSTR("xpcActivity_identifier"));
      sub_18A7684AC(*(_QWORD *)(a1 + 32), v46);
      string = xpc_dictionary_get_string(v39, (const char *)*MEMORY[0x1E0C80878]);
      if (string)
      {
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v48, (uint64_t)string, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v35, v52, (uint64_t)v51, (uint64_t)CFSTR("xpcActivity_priority"));
      }
      else
      {
        v51 = 0;
        objc_msgSend_setObject_forKeyedSubscript_(v35, v48, 0, (uint64_t)CFSTR("xpcActivity_priority"));
      }
      shouldBeDataBudgeted = objc_msgSend_shouldBeDataBudgeted(v31, v53, v54, v55);
      v57 = *(_QWORD *)(a1 + 32);
      if (v57)
      {
        *(_QWORD *)(v57 + 400) = 1;
        v57 = *(_QWORD *)(a1 + 32);
      }
      if ((shouldBeDataBudgeted & 1) != 0)
      {
        if (v57)
          *(_QWORD *)(v57 + 384) = 1;
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v58 = (id)ck_log_facility_ck;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
        {
          v59 = (objc_class *)objc_opt_class();
          NSStringFromClass(v59);
          v60 = (id)objc_claimAutoreleasedReturnValue();
          v61 = *(void **)(a1 + 32);
          objc_msgSend_ckShortDescription(v61, v62, v63, v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v146 = v60;
          v147 = 2048;
          v148 = v61;
          v149 = 2114;
          v150 = v65;
          v151 = 2112;
          v152 = v46;
          _os_log_impl(&dword_18A5C5000, v58, OS_LOG_TYPE_INFO, "Setting duetPreClearedMode KOperationDuetPreClearedModeWithBudgeting for operation <%{public}@: %p; %{public"
            "}@> for xpc_activity %@",
            buf,
            0x2Au);

        }
      }
      else
      {
        if (v57)
          *(_QWORD *)(v57 + 384) = 2;
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v58 = (id)ck_log_facility_ck;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
        {
          v66 = (objc_class *)objc_opt_class();
          NSStringFromClass(v66);
          v67 = (id)objc_claimAutoreleasedReturnValue();
          v68 = *(void **)(a1 + 32);
          objc_msgSend_ckShortDescription(v68, v69, v70, v71);
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v146 = v67;
          v147 = 2048;
          v148 = v68;
          v149 = 2114;
          v150 = v72;
          v151 = 2112;
          v152 = v46;
          _os_log_impl(&dword_18A5C5000, v58, OS_LOG_TYPE_INFO, "Setting duetPreClearedMode CKOperationDuetPreClearedModeWithoutBudgeting for operation <%{public}@: %p; %{pu"
            "blic}@> for xpc_activity %@",
            buf,
            0x2Au);

        }
      }

      int64 = xpc_dictionary_get_int64(v39, (const char *)*MEMORY[0x1E0C807A8]);
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v74, int64, v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v35, v77, (uint64_t)v76, (uint64_t)CFSTR("xpcActivity_interval"));

      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v78 = (id)ck_log_facility_ck;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        v79 = (objc_class *)objc_opt_class();
        NSStringFromClass(v79);
        v80 = (id)objc_claimAutoreleasedReturnValue();
        v81 = *(void **)(a1 + 32);
        objc_msgSend_ckShortDescription(v81, v82, v83, v84);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v146 = v80;
        v147 = 2048;
        v148 = v81;
        v149 = 2114;
        v150 = v85;
        v151 = 2112;
        v152 = v46;
        _os_log_impl(&dword_18A5C5000, v78, OS_LOG_TYPE_INFO, "Adding eligibility handler to operation <%{public}@: %p; %{public}@> for xpc_activity %@",
          buf,
          0x2Au);

      }
      v88 = objc_msgSend_addEligibilityChangedHandler_(v31, v86, (uint64_t)v140, v87);
      v89 = *(_QWORD *)(a1 + 32);
      if (v89)
        *(_QWORD *)(v89 + 376) = v88;

    }
    objc_msgSend_setupBGSystemTaskExpirationHandler(*(void **)(a1 + 32), v32, v33, v34);
    objc_msgSend_deviceContext(*(void **)(a1 + 32), v90, v91, v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_throttleManager(v93, v94, v95, v96);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    v98 = *(_QWORD *)(a1 + 32);
    v141 = 0;
    objc_msgSend_enforcedThrottleForCriteria_willSendRequest_outThrottleError_(v97, v99, v98, 1, &v141);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = v141;

    if (v100)
    {
      v105 = *(void **)(a1 + 32);
      objc_msgSend_CKClientSuitableError(v101, v102, v103, v104);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_finishWithError_(v105, v107, (uint64_t)v106, v108);

    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v109 = (id)ck_log_facility_ck;
      if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
      {
        v110 = (objc_class *)objc_opt_class();
        NSStringFromClass(v110);
        v139 = (id)objc_claimAutoreleasedReturnValue();
        v111 = *(void **)(a1 + 32);
        objc_msgSend_ckShortDescription(v111, v112, v113, v114);
        v115 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend_configuration(*(void **)(a1 + 32), v116, v117, v118);
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_container(v138, v119, v120, v121);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_configuration(*(void **)(a1 + 32), v123, v124, v125);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_container(v126, v127, v128, v129);
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_implementation(v130, v131, v132, v133);
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v146 = v139;
        v147 = 2048;
        v148 = v111;
        v149 = 2114;
        v150 = v115;
        v151 = 2048;
        v152 = v122;
        v153 = 2048;
        v154 = v134;
        _os_log_impl(&dword_18A5C5000, v109, OS_LOG_TYPE_INFO, "Invoking main for operation <%{public}@: %p; %{public}@> on CKContainer/CKContainerImplementation %p / %p",
          buf,
          0x34u);

      }
      objc_msgSend_main(*(void **)(a1 + 32), v135, v136, v137);
    }

    objc_destroyWeak(&v143);
    objc_destroyWeak(&location);
  }
}

void sub_18A5D2124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_18A5D3640(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5D3C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5D3C68(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v7 = v3;
  if (a1 && objc_msgSend_count(v3, v4, v5, v6))
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v8 = v7;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v27, (uint64_t)v35, 16);
    if (v10)
    {
      v14 = v10;
      v15 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v28 != v15)
            objc_enumerationMutation(v8);
          objc_msgSend_longLongValue(*(void **)(*((_QWORD *)&v27 + 1) + 8 * i), v11, v12, v13, (_QWORD)v27);
          sandbox_extension_release();
        }
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v27, (uint64_t)v35, 16);
      }
      while (v14);
    }

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v17 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v18 = v17;
      v22 = objc_msgSend_count(v8, v19, v20, v21);
      objc_msgSend_containerID(a1, v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v32 = v22;
      v33 = 2112;
      v34 = v26;
      _os_log_debug_impl(&dword_18A5C5000, v18, OS_LOG_TYPE_DEBUG, "Released %lu sandbox extensions for container %@", buf, 0x16u);

    }
  }

}

void sub_18A5D4560(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18A5D4598(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void sub_18A5D5644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5D5664(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;

  v5 = a3;
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_18A5D60F0;
  v14[3] = &unk_1E1F62C10;
  v11 = a1[8];
  v10 = a1[9];
  v15 = v5;
  v16 = v10;
  v12 = v5;
  objc_msgSend_select_from_where_bindings_orderBy_limit_block_(a2, v13, v6, v7, v8, v9, v11, 0, v14);

}

void sub_18A5D5918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A5D5FBC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;

  v3 = a2;
  v4 = v3;
  v5 = *(void **)(a1 + 32);
  if (v5)
    sub_18A5D6374((uint64_t)v3, v5);
  if (sub_18A5D6074((uint64_t)v4))
  {
    while (1)
    {
      v6 = (void *)MEMORY[0x18D76DE4C]();
      sub_18A5DF96C((uint64_t)v4, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
      {
        v12 = 0;
        (*(void (**)(uint64_t, void *, char *))(v11 + 16))(v11, v10, &v12);
        if (v12)
          break;
      }

      objc_autoreleasePoolPop(v6);
      if (!sub_18A5D6074((uint64_t)v4))
        goto LABEL_9;
    }

    objc_autoreleasePoolPop(v6);
  }
LABEL_9:

}

BOOL sub_18A5D6074(uint64_t a1)
{
  sqlite3_stmt *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _BOOL8 v6;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  v2 = *(sqlite3_stmt **)(a1 + 32);
  if (!v2)
    return 0;
  v3 = sqlite3_step(v2);
  v6 = v3 == 100;
  if ((v3 & 0xFE) != 0x64)
    objc_msgSend_invalidate_((void *)a1, v4, (uint64_t)CFSTR("Failed to step (%d): \"%@\""), v5, v3, *(_QWORD *)(a1 + 24));
  return v6;
}

void sub_18A5D60F0(uint64_t a1, void *a2, _BYTE *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
  {
    *a3 = 1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;

  }
  else
  {
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v5, (uint64_t)v9, v6);
  }

}

id *sub_18A5D6168(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id *v9;
  objc_super v11;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)CKSQLiteStatement;
    v9 = (id *)objc_msgSendSuper2(&v11, sel_init);
    a1 = v9;
    if (v9)
    {
      objc_storeWeak(v9 + 2, v7);
      objc_storeStrong(a1 + 3, a3);
      a1[4] = a4;
      *((_BYTE *)a1 + 8) = 1;
    }
  }

  return a1;
}

void sub_18A5D620C(uint64_t a1)
{
  sqlite3_stmt *v2;
  int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(sqlite3_stmt **)(a1 + 32);
    if (v2)
    {
      v3 = sqlite3_finalize(v2);
      if (v3)
      {
        v4 = v3;
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v5 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
        {
          v6 = *(_QWORD *)(a1 + 24);
          v7[0] = 67109378;
          v7[1] = v4;
          v8 = 2112;
          v9 = v6;
          _os_log_fault_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_FAULT, "Error %d finalizing prepared statement: \"%@\"", (uint8_t *)v7, 0x12u);
        }
      }
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
}

void sub_18A5D6374(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    v16 = v3;
    v7 = objc_msgSend_count(v3, (const char *)v3, v4, v5);
    v6 = v16;
    if (v7)
    {
      for (i = 0; i < v15; ++i)
      {
        objc_msgSend_objectAtIndexedSubscript_(v6, (const char *)v6, i, v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ck_bindInStatement_atIndex_(v10, v11, a1, i);

        v15 = objc_msgSend_count(v16, v12, v13, v14);
        v6 = v16;
      }
    }
  }

}

_QWORD *sub_18A5D6504(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v5 = a2;
  if (a1)
  {
    v6 = (void *)a1[6];
    if (!v6)
    {
      v7 = objc_opt_new();
      v8 = (void *)a1[6];
      a1[6] = v7;

      v6 = (void *)a1[6];
    }
    objc_msgSend_addObject_(v6, v3, (uint64_t)v5, v4);
    a1 = v5;
  }

  return a1;
}

uint64_t sub_18A5D6568(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_bindText_atIndex_(a3, a2, a1, a4);
}

void sub_18A5D6890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5DA320(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int isLongLived;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  CKException *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  id v55;
  NSObject *v56;
  NSObject *v57;
  objc_class *v58;
  id v59;
  const char *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  const char *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  NSObject *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  os_activity_scope_state_s state;
  _BYTE buf[24];
  void *v97;
  _QWORD v98[4];

  v98[3] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x18D76DE4C]();
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    if ((objc_msgSend_isOutstandingOperation(v6, v2, v3, v4) & 1) != 0
      || (objc_msgSend_configuration(v6, v7, v8, v9),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          isLongLived = objc_msgSend_isLongLived(v10, v11, v12, v13),
          v10,
          isLongLived))
    {
      objc_msgSend_deviceContext(v6, v7, v8, v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_deviceScopedStateManager(v15, v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_operationID(v6, v20, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_registerLongLivedOperationWithIDAsOutstanding_(v19, v24, (uint64_t)v23, v25);

    }
    objc_msgSend_configuration(v6, v7, v8, v9);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_container(v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_options(v30, v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_enforceNamedOperationGroups(v34, v35, v36, v37) & 1) != 0)
    {
      objc_msgSend_group(v6, v38, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v41, v42, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v45)
      {
        v49 = [CKException alloc];
        objc_msgSend_group(v6, v50, v51, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = (id)objc_msgSend_initWithCode_format_(v49, v54, 12, (uint64_t)CFSTR("CKOperation enqueued without a named operation group.  Op %@  Group %@"), v6, v53);

        objc_exception_throw(v55);
      }
    }
    else
    {

    }
    objc_msgSend__adoptPersonaIfNecessary(v6, v46, v47, v48);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    sub_18A5E3B10(v6);
    v56 = objc_claimAutoreleasedReturnValue();
    os_activity_scope_enter(v56, &state);

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v57 = (id)ck_log_facility_op;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      v58 = (objc_class *)objc_opt_class();
      NSStringFromClass(v58);
      v59 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v6, v60, 1, 0, 0);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKPropertiesStyleString(v61, v62, v63, v64);
      v65 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v6, v66, 0, 1, 0);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKPropertiesStyleString(v67, v68, v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      *(_QWORD *)&buf[4] = v59;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2114;
      v97 = v65;
      LOWORD(v98[0]) = 2112;
      *(_QWORD *)((char *)v98 + 2) = v71;
      _os_log_impl(&dword_18A5C5000, v57, OS_LOG_TYPE_DEFAULT, "Starting operation <%{public}@: %p; %{public}@, %@>",
        buf,
        0x2Au);

    }
    objc_msgSend_callbackQueue(v6, v72, v73, v74);
    v75 = objc_claimAutoreleasedReturnValue();
    dispatch_activate(v75);

    objc_msgSend_setQueueHasStarted_(v6, v76, 1, v77);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v78 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_operationID(v6, v79, v80, v81);
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      v90 = objc_msgSend_qualityOfService(v6, v87, v88, v89);
      CKStringForQOS(v90, v91, v92, v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v86;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v94;
      _os_log_debug_impl(&dword_18A5C5000, v78, OS_LOG_TYPE_DEBUG, "Operation %{public}@ will use QoS %{public}@", buf, 0x16u);

    }
    objc_msgSend_callbackQueue(v6, v82, v83, v84);
    v85 = objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_18A5D185C;
    v97 = &unk_1E1F5FAA8;
    v98[0] = v6;
    dispatch_async(v85, buf);

    os_activity_scope_leave(&state);
  }
  objc_autoreleasePoolPop(v5);
}

void sub_18A5DA760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A5DAB04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CKXPCSuitableError(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  id v52;
  void *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  void *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t j;
  void *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  const char *v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t k;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  void *v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  void *v134;
  void *v135;
  id v136;
  void *v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[128];
  _BYTE v152[128];
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_userInfo(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_count(v5, v6, v7, v8);

  if (v9 && (objc_msgSend_CKHasCKErrorInUnderlyingErrors(v1, v10, v11, v12) & 1) != 0)
  {
    if (qword_1ECD96F18 != -1)
      dispatch_once(&qword_1ECD96F18, &unk_1E1F66530);
    v13 = (void *)objc_opt_new();
    v147 = 0u;
    v148 = 0u;
    v149 = 0u;
    v150 = 0u;
    objc_msgSend_userInfo(v1, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allKeys(v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v147, (uint64_t)v153, 16);
    if (v23)
    {
      v26 = v23;
      v27 = *(_QWORD *)v148;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v148 != v27)
            objc_enumerationMutation(v21);
          v29 = *(_QWORD *)(*((_QWORD *)&v147 + 1) + 8 * i);
          if ((objc_msgSend_containsObject_((void *)qword_1ECD96F20, v24, v29, v25) & 1) == 0)
          {
            objc_msgSend_userInfo(v1, v24, v30, v25);
            v31 = v1;
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v32, v33, v29, v34);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_forKeyedSubscript_(v13, v36, (uint64_t)v35, v29);

            v1 = v31;
          }
        }
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v24, (uint64_t)&v147, (uint64_t)v153, 16);
      }
      while (v26);
    }

    objc_msgSend_userInfo(v1, v37, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v40, v41, (uint64_t)CFSTR("NotFoundItemID"), v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    if (v43)
    {
      if (objc_msgSend_conformsToProtocol_(v43, v44, (uint64_t)&unk_1EDF78920, v46))
      {
        objc_msgSend_CKXPCSuitableString(v43, v47, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v13, v51, (uint64_t)v50, (uint64_t)CFSTR("NotFoundItemID"));

      }
      else
      {
        objc_msgSend_setObject_forKeyedSubscript_(v13, v47, (uint64_t)v43, (uint64_t)CFSTR("NotFoundItemID"));
      }
    }
    objc_msgSend_userInfo(v1, v44, v45, v46);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = *MEMORY[0x1E0CB3388];
    objc_msgSend_objectForKeyedSubscript_(v53, v55, *MEMORY[0x1E0CB3388], v56);
    v57 = objc_claimAutoreleasedReturnValue();

    if (v57)
    {
      CKXPCSuitableError(v57);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v13, v62, (uint64_t)v61, v54);

    }
    v137 = (void *)v57;
    objc_msgSend_userInfo(v1, v58, v59, v60);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = *MEMORY[0x1E0CB2F70];
    objc_msgSend_objectForKeyedSubscript_(v63, v65, *MEMORY[0x1E0CB2F70], v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();

    v138 = v67;
    if (v67)
    {
      objc_msgSend_array(MEMORY[0x1E0C99DE8], v68, v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v143 = 0u;
      v144 = 0u;
      v145 = 0u;
      v146 = 0u;
      v72 = v67;
      v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v72, v73, (uint64_t)&v143, (uint64_t)v152, 16);
      if (v74)
      {
        v75 = v74;
        v76 = *(_QWORD *)v144;
        do
        {
          for (j = 0; j != v75; ++j)
          {
            if (*(_QWORD *)v144 != v76)
              objc_enumerationMutation(v72);
            CKXPCSuitableError(*(_QWORD *)(*((_QWORD *)&v143 + 1) + 8 * j));
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v71, v79, (uint64_t)v78, v80);

          }
          v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v72, v81, (uint64_t)&v143, (uint64_t)v152, 16);
        }
        while (v75);
      }

      objc_msgSend_setObject_forKeyedSubscript_(v13, v82, (uint64_t)v71, v64);
      v67 = v138;
    }
    objc_msgSend_userInfo(v1, v68, v69, v70);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v83, v84, (uint64_t)CFSTR("CKFunctionError"), v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();

    if (v86)
    {
      CKXPCSuitableError(v86);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v13, v91, (uint64_t)v90, (uint64_t)CFSTR("CKFunctionError"));

    }
    objc_msgSend_userInfo(v1, v87, v88, v89);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v92, v93, (uint64_t)CFSTR("CKPartialErrors"), v94);
    v95 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_count(v95, v96, v97, v98))
    {
      v134 = v86;
      v135 = v43;
      v136 = v1;
      v102 = (void *)objc_opt_new();
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0u;
      objc_msgSend_allKeys(v95, v103, v104, v105);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      v108 = objc_msgSend_countByEnumeratingWithState_objects_count_(v106, v107, (uint64_t)&v139, (uint64_t)v151, 16);
      if (v108)
      {
        v111 = v108;
        v112 = *(_QWORD *)v140;
        do
        {
          for (k = 0; k != v111; ++k)
          {
            if (*(_QWORD *)v140 != v112)
              objc_enumerationMutation(v106);
            v114 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * k);
            if (objc_msgSend_conformsToProtocol_(v114, v109, (uint64_t)&unk_1EDF78920, v110))
            {
              objc_msgSend_CKXPCSuitableString(v114, v115, v116, v117);
              v118 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectForKeyedSubscript_(v95, v119, (uint64_t)v114, v120);
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              CKXPCSuitableError(v121);
              v122 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKeyedSubscript_(v102, v123, (uint64_t)v122, (uint64_t)v118);

            }
            else
            {
              objc_msgSend_objectForKeyedSubscript_(v95, v115, (uint64_t)v114, v117);
              v118 = (void *)objc_claimAutoreleasedReturnValue();
              CKXPCSuitableError(v118);
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKeyedSubscript_(v102, v124, (uint64_t)v121, (uint64_t)v114);
            }

          }
          v111 = objc_msgSend_countByEnumeratingWithState_objects_count_(v106, v109, (uint64_t)&v139, (uint64_t)v151, 16);
        }
        while (v111);
      }

      objc_msgSend_setObject_forKeyedSubscript_(v13, v125, (uint64_t)v102, (uint64_t)CFSTR("CKPartialErrors"));
      v43 = v135;
      v1 = v136;
      v67 = v138;
      v86 = v134;
    }
    v126 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend_domain(v1, v99, v100, v101);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    v131 = objc_msgSend_code(v1, v128, v129, v130);
    objc_msgSend_errorWithDomain_code_userInfo_(v126, v132, (uint64_t)v127, v131, v13);
    v52 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v52 = v1;
  }

  return v52;
}

uint64_t sub_18A5DB39C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_CKIsCKError(a1, a2, a3, a4) & 1) != 0)
    return 1;
  objc_msgSend_userInfo(a1, v5, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v9, v10, *MEMORY[0x1E0CB3388], v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend_CKHasCKErrorInUnderlyingErrors(v12, v13, v14, v15) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    objc_msgSend_userInfo(a1, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v19, v20, *MEMORY[0x1E0CB2F70], v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v23 = v22;
    v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v64, (uint64_t)v69, 16);
    if (v25)
    {
      v29 = v25;
      v30 = *(_QWORD *)v65;
      while (2)
      {
        for (i = 0; i != v29; ++i)
        {
          if (*(_QWORD *)v65 != v30)
            objc_enumerationMutation(v23);
          if ((objc_msgSend_CKHasCKErrorInUnderlyingErrors(*(void **)(*((_QWORD *)&v64 + 1) + 8 * i), v26, v27, v28) & 1) != 0)
          {
            v8 = 1;
            v38 = v23;
            goto LABEL_27;
          }
        }
        v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v26, (uint64_t)&v64, (uint64_t)v69, 16);
        if (v29)
          continue;
        break;
      }
    }

    objc_msgSend_userInfo(a1, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v35, v36, (uint64_t)CFSTR("CKFunctionError"), v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend_CKHasCKErrorInUnderlyingErrors(v38, v39, v40, v41) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      objc_msgSend_userInfo(a1, v42, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v45, v46, (uint64_t)CFSTR("CKPartialErrors"), v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      objc_msgSend_allValues(v48, v49, v50, v51, 0);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v60, (uint64_t)v68, 16);
      if (v8)
      {
        v57 = *(_QWORD *)v61;
        while (2)
        {
          for (j = 0; j != v8; ++j)
          {
            if (*(_QWORD *)v61 != v57)
              objc_enumerationMutation(v52);
            if ((objc_msgSend_CKHasCKErrorInUnderlyingErrors(*(void **)(*((_QWORD *)&v60 + 1) + 8 * j), v54, v55, v56) & 1) != 0)
            {
              v8 = 1;
              goto LABEL_26;
            }
          }
          v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v54, (uint64_t)&v60, (uint64_t)v68, 16);
          if (v8)
            continue;
          break;
        }
      }
LABEL_26:

    }
LABEL_27:

  }
  return v8;
}

uint64_t sub_18A5DB634(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isEqualToString;
  void *v12;
  const char *v13;
  uint64_t v14;

  objc_msgSend_domain(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v5, v6, (uint64_t)CFSTR("CKErrorDomain"), v7) & 1) != 0)
  {
    isEqualToString = 1;
  }
  else
  {
    objc_msgSend_domain(a1, v8, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v12, v13, (uint64_t)CFSTR("CKInternalErrorDomain"), v14);

  }
  return isEqualToString;
}

void sub_18A5DBA38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DBFE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DC06C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DC110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DC1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5DC254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5DC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5DC4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5DC6C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DD708(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DDA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5DDCA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DEC44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5DF1BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18A5DF210(void *a1, void *a2, objc_property *a3)
{
  id *v5;
  uint64_t v6;
  void *v7;
  const char *Name;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  objc_property_attribute_t *v34;
  const char *v35;
  uint64_t v36;
  objc_property_attribute_t *v37;
  unint64_t v38;
  uint64_t *p_value;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  SEL v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  id v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  char hasPrefix;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v93;
  const char *v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  unsigned int outCount;
  objc_super v106;

  if (!a1)
    return 0;
  v106.receiver = a1;
  v106.super_class = (Class)CKObjCProperty;
  v5 = (id *)objc_msgSendSuper2(&v106, sel_init);
  v6 = (uint64_t)v5;
  if (v5)
  {
    objc_storeStrong(v5 + 1, a2);
    v7 = (void *)MEMORY[0x1E0CB3940];
    Name = property_getName(a3);
    objc_msgSend_stringWithUTF8String_(v7, v9, (uint64_t)Name, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(void **)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v11;

    if (!objc_msgSend_length(*(void **)(v6 + 24), v13, v14, v15))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v16, v17, v18);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v93, v94, (uint64_t)sel_initWithClass_property_, v6, CFSTR("CKObjCProperty.m"), 19, CFSTR("How'd you get a no-length property name in there?"));

    }
    v19 = *(id *)(v6 + 24);
    v20 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_substringToIndex_(*(void **)(v6 + 24), v21, 1, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_uppercaseString(v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringFromIndex_(*(void **)(v6 + 24), v28, 1, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v20, v31, (uint64_t)CFSTR("set%@%@:"), v32, v27, v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    outCount = 0;
    v34 = property_copyAttributeList(a3, &outCount);
    v37 = v34;
    if (outCount)
    {
      v38 = 0;
      p_value = (uint64_t *)&v34->value;
      do
      {
        v40 = *p_value;
        v41 = *(char *)*(p_value - 1);
        if (v41 <= 77)
        {
          if (v41 == 38)
          {
            v42 = *(_QWORD *)(v6 + 32) | 4;
          }
          else
          {
            if (v41 != 67)
            {
              if (v41 == 71)
              {
                *(_QWORD *)(v6 + 32) |= 0x10uLL;
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v35, v40, v36);
                v43 = objc_claimAutoreleasedReturnValue();

                v19 = (id)v43;
              }
              goto LABEL_22;
            }
            v42 = *(_QWORD *)(v6 + 32) | 2;
          }
LABEL_21:
          *(_QWORD *)(v6 + 32) = v42;
        }
        else
        {
          switch(*(_BYTE *)*(p_value - 1))
          {
            case 'N':
              v42 = *(_QWORD *)(v6 + 32) | 8;
              goto LABEL_21;
            case 'R':
              v42 = *(_QWORD *)(v6 + 32) | 1;
              goto LABEL_21;
            case 'S':
              *(_QWORD *)(v6 + 32) |= 0x20uLL;
              objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v35, v40, v36);
              v46 = objc_claimAutoreleasedReturnValue();

              v33 = (void *)v46;
              break;
            case 'T':
              objc_msgSend_typeForEncoding_(CKObjCType, v35, v40, v36);
              v44 = objc_claimAutoreleasedReturnValue();
              v45 = *(void **)(v6 + 16);
              *(_QWORD *)(v6 + 16) = v44;
              goto LABEL_18;
            case 'V':
              objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v35, v40, v36);
              v47 = objc_claimAutoreleasedReturnValue();
              v45 = *(void **)(v6 + 56);
              *(_QWORD *)(v6 + 56) = v47;
LABEL_18:

              break;
            default:
              break;
          }
        }
LABEL_22:
        ++v38;
        p_value += 2;
      }
      while (v38 < outCount);
    }
    free(v37);
    v48 = NSSelectorFromString((NSString *)v19);
    *(_QWORD *)(v6 + 40) = v48;
    objc_msgSend_instanceMethodSignatureForSelector_(*(void **)(v6 + 8), v49, (uint64_t)v48, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_alloc(MEMORY[0x1E0CB3940]);
    v56 = objc_msgSend_methodReturnType(v51, v53, v54, v55);
    v58 = (void *)objc_msgSend_initWithCString_encoding_(v52, v57, v56, 4);
    objc_msgSend_encoding(*(void **)(v6 + 16), v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend_caseInsensitiveCompare_(v62, v63, (uint64_t)CFSTR("q"), v64);

    if (v65 | objc_msgSend_caseInsensitiveCompare_(v58, v66, (uint64_t)CFSTR("q"), v67))
    {
      objc_msgSend_encoding(*(void **)(v6 + 16), v68, v69, v70);
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      hasPrefix = objc_msgSend_hasPrefix_(v71, v72, (uint64_t)v58, v73);

      if ((hasPrefix & 1) == 0)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v68, v69, v70);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = objc_msgSend_methodReturnType(v51, v76, v77, v78);
        objc_msgSend_encoding(*(void **)(v6 + 16), v80, v81, v82);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v75, v84, (uint64_t)sel_initWithClass_property_, v6, CFSTR("CKObjCProperty.m"), 79, CFSTR("Getter method signature return type doesn't match property type encoding (%s != %@)"), v79, v83);

      }
    }
    v85 = objc_msgSend_methodReturnLength(v51, v68, v69, v70);
    if (v85 != objc_msgSend_size(*(void **)(v6 + 16), v86, v87, v88))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v89, v90, v91);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      v99 = objc_msgSend_methodReturnLength(v51, v96, v97, v98);
      v103 = objc_msgSend_size(*(void **)(v6 + 16), v100, v101, v102);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v95, v104, (uint64_t)sel_initWithClass_property_, v6, CFSTR("CKObjCProperty.m"), 81, CFSTR("Getter method signature return length doesn't match property type size (%d != %d)"), v99, v103);

    }
    *(_QWORD *)(v6 + 48) = NSSelectorFromString((NSString *)v33);

  }
  return v6;
}

id sub_18A5DF660(_QWORD *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD v29[2];

  v2 = (uint64_t)a1;
  v29[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = (void *)a1[2];
    v4 = a2;
    v8 = (char *)v29 - ((objc_msgSend_size(v3, v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = (void *)MEMORY[0x1E0C99DB8];
    objc_msgSend_instanceMethodSignatureForSelector_(*(void **)(v2 + 8), v10, *(_QWORD *)(v2 + 40), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_invocationWithMethodSignature_(v9, v13, (uint64_t)v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setTarget_(v15, v16, (uint64_t)v4, v17);
    objc_msgSend_setSelector_(v15, v18, *(_QWORD *)(v2 + 40), v19);
    objc_msgSend_invoke(v15, v20, v21, v22);
    objc_msgSend_getReturnValue_(v15, v23, (uint64_t)v8, v24);
    sub_18A5DF798(*(_QWORD **)(v2 + 16), v8, v25, v26, v27);
    v2 = objc_claimAutoreleasedReturnValue();

  }
  return (id)v2;
}

_QWORD *sub_18A5DF798(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  _QWORD *result;

  if (!a1)
    return a1;
  switch(a1[1])
  {
    case 0:
      objc_msgSend_numberWithChar_(MEMORY[0x1E0CB37E8], a2, *a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 1:
      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], a2, *(__int16 *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 2:
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, *(unsigned int *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 3:
      objc_msgSend_numberWithLong_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 4:
      objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 5:
      objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 6:
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int16 *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 7:
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, *(unsigned int *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 8:
      objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 9:
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 0xALL:
      LODWORD(a5) = *(_DWORD *)a2;
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 0xBLL:
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, *(double *)a2);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 0xCLL:
      objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)a2, a4);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      return a1;
    case 0xFLL:
      a1 = *(id *)a2;
      return a1;
    default:
      v5 = (void *)MEMORY[0x1E0C99DA0];
      v6 = *MEMORY[0x1E0C99768];
      objc_msgSend_name(a1, a2, a3, a4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_raise_format_(v5, v8, v6, (uint64_t)CFSTR("Unsupported boxing type: %@"), v7);

      result = 0;
      break;
  }
  return result;
}

id sub_18A5DF96C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sqlite3_stmt *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  sqlite3_stmt *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  sqlite3_stmt *v28;
  sqlite3_int64 v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  sqlite3_stmt *v33;
  double v34;
  uint64_t v35;
  const char *v36;
  sqlite3_stmt *v37;
  int v38;
  const char *v39;
  void *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  void *v44;
  const char *v45;
  void *v46;
  const char *v47;
  void *v49;
  void *v50;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v46, v47, (uint64_t)sel_columnCount, a1, CFSTR("CKSQLiteStatement.m"), 281, CFSTR("Statement is reset: \"%@\""), *(_QWORD *)(a1 + 24));

    }
    v5 = *(sqlite3_stmt **)(a1 + 32);
    if (v5)
    {
      v6 = sqlite3_column_count(v5);
      objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], v7, v6, v8);
    }
    else
    {
      v6 = 0;
      objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], a2, 0, a4);
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v13 = 0;
      v14 = *MEMORY[0x1E0C99750];
      do
      {
        if (*(_BYTE *)(a1 + 8))
        {
          objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10, v11);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v40, v41, (uint64_t)sel_columnNameAtIndex_, a1, CFSTR("CKSQLiteStatement.m"), 287, CFSTR("Statement is reset: \"%@\""), *(_QWORD *)(a1 + 24));

        }
        v15 = *(sqlite3_stmt **)(a1 + 32);
        if (v15)
        {
          v16 = (void *)MEMORY[0x1E0CB3940];
          v17 = sqlite3_column_name(v15, (int)v13);
          objc_msgSend_stringWithUTF8String_(v16, v18, (uint64_t)v17, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = *(sqlite3_stmt **)(a1 + 32);
          if (v21)
          {
            v22 = sqlite3_column_type(v21, (int)v13);
            v26 = 0;
            switch((int)v22)
            {
              case 1:
                v27 = (void *)MEMORY[0x1E0CB37E8];
                if (*(_BYTE *)(a1 + 8))
                {
                  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v23, v24, v25);
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v49, v42, (uint64_t)sel_int64AtIndex_, a1, CFSTR("CKSQLiteStatement.m"), 299, CFSTR("Statement is reset: \"%@\""), *(_QWORD *)(a1 + 24));

                }
                v28 = *(sqlite3_stmt **)(a1 + 32);
                if (v28)
                {
                  v29 = sqlite3_column_int64(v28, (int)v13);
                  objc_msgSend_numberWithLongLong_(v27, v30, v29, v31);
                }
                else
                {
                  objc_msgSend_numberWithLongLong_(v27, v23, 0, v25);
                }
                v35 = objc_claimAutoreleasedReturnValue();
                goto LABEL_35;
              case 2:
                v32 = (void *)MEMORY[0x1E0CB37E8];
                if (*(_BYTE *)(a1 + 8))
                {
                  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v23, v24, v25);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v50, v43, (uint64_t)sel_doubleAtIndex_, a1, CFSTR("CKSQLiteStatement.m"), 305, CFSTR("Statement is reset: \"%@\""), *(_QWORD *)(a1 + 24));

                }
                v33 = *(sqlite3_stmt **)(a1 + 32);
                if (v33)
                  v34 = sqlite3_column_double(v33, (int)v13);
                else
                  v34 = 0.0;
                objc_msgSend_numberWithDouble_(v32, v23, v24, v25, v34);
                v35 = objc_claimAutoreleasedReturnValue();
                goto LABEL_35;
              case 3:
                sub_18A5DFDD4((sqlite3_stmt *)a1, v13, v24, v25);
                v35 = objc_claimAutoreleasedReturnValue();
                goto LABEL_35;
              case 4:
                if (*(_BYTE *)(a1 + 8))
                {
                  objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v23, v24, v25);
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v44, v45, (uint64_t)sel_blobAtIndex_, a1, CFSTR("CKSQLiteStatement.m"), 311, CFSTR("Statement is reset: \"%@\""), *(_QWORD *)(a1 + 24));

                }
                v37 = *(sqlite3_stmt **)(a1 + 32);
                if (v37)
                {
                  v26 = (void *)sqlite3_column_blob(v37, (int)v13);
                  if (v26)
                  {
                    v38 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 32), (int)v13);
                    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v39, (uint64_t)v26, v38);
                    v35 = objc_claimAutoreleasedReturnValue();
LABEL_35:
                    v26 = (void *)v35;
                  }
                  if (v26)
                    objc_msgSend_setObject_forKeyedSubscript_(v12, v36, (uint64_t)v26, (uint64_t)v20);
                }
                else
                {
                  v26 = 0;
                }
                break;
              case 5:
                break;
              default:
                objc_msgSend_raise_format_(MEMORY[0x1E0C99DA0], v23, v14, (uint64_t)CFSTR("Unexpected column type: %d"), v22);
                goto LABEL_20;
            }
          }
          else
          {
LABEL_20:
            v26 = 0;
          }
        }
        else
        {
          v26 = 0;
          v20 = 0;
        }

        ++v13;
      }
      while ((const char *)v6 != v13);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

id sub_18A5DFD34(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[4];
  id v19;

  v5 = (void *)MEMORY[0x1E0C99E08];
  v6 = objc_msgSend_count(a1, a2, a3, a4);
  objc_msgSend_dictionaryWithCapacity_(v5, v7, v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_18A5E65CC;
  v18[3] = &unk_1E1F622B8;
  v19 = v9;
  v10 = v9;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v11, (uint64_t)v18, v12);
  v16 = (void *)objc_msgSend_copy(v10, v13, v14, v15);

  return v16;
}

sqlite3_stmt *sub_18A5DFDD4(sqlite3_stmt *a1, const char *iCol, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v9;
  const char *v10;

  if (a1)
  {
    v4 = (int)iCol;
    v5 = (uint64_t)a1;
    if (*((_BYTE *)a1 + 8))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], iCol, a3, a4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, (uint64_t)sel_textAtIndex_, v5, CFSTR("CKSQLiteStatement.m"), 325, CFSTR("Statement is reset: \"%@\""), *(_QWORD *)(v5 + 24));

    }
    a1 = *(sqlite3_stmt **)(v5 + 32);
    if (a1)
    {
      a1 = (sqlite3_stmt *)sqlite3_column_text(a1, v4);
      if (a1)
      {
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)a1, v7);
        a1 = (sqlite3_stmt *)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  return a1;
}

void sub_18A5E031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A5E0330(void *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13[2];
  _QWORD v14[4];
  id v15;
  id location;
  _QWORD block[8];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a1)
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = sub_18A6D6E80;
    v28 = sub_18A6D6E90;
    v29 = 0;
    v18 = 0;
    v19 = &v18;
    v20 = 0x3032000000;
    v21 = sub_18A6D6E80;
    v22 = sub_18A6D6E90;
    v23 = 0;
    v6 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18A5C8390;
    block[3] = &unk_1E1F60DB0;
    block[4] = a1;
    block[5] = &v24;
    block[6] = &v18;
    block[7] = a2;
    dispatch_sync((dispatch_queue_t)qword_1ECD96A88, block);
    if (!v19[5])
    {
      objc_initWeak(&location, a1);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v8 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v31 = a1;
        _os_log_debug_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_DEBUG, "Will fetch user record ID for container: %@", buf, 0xCu);
      }
      v14[0] = v6;
      v14[1] = 3221225472;
      v14[2] = sub_18A6DA814;
      v14[3] = &unk_1E1F60910;
      v9 = v5;
      v15 = v9;
      v11[0] = v6;
      v11[1] = 3221225472;
      v11[2] = sub_18A5D0774;
      v11[3] = &unk_1E1F60E28;
      objc_copyWeak(v13, &location);
      v13[1] = a2;
      v12 = v9;
      sub_18A5ECA88(a1, 0, (void *)1, 0, v14, v11);

      objc_destroyWeak(v13);
      objc_destroyWeak(&location);
      goto LABEL_13;
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v10 = (void *)v25[5];
      *(_DWORD *)buf = 138412290;
      v31 = v10;
      _os_log_debug_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_DEBUG, "Have cached user IDs, returning %@", buf, 0xCu);
      if (!v5)
        goto LABEL_13;
    }
    else if (!v5)
    {
LABEL_13:
      _Block_object_dispose(&v18, 8);

      _Block_object_dispose(&v24, 8);
      goto LABEL_14;
    }
    (*((void (**)(id, uint64_t, _QWORD))v5 + 2))(v5, v25[5], 0);
    goto LABEL_13;
  }
LABEL_14:

}

void sub_18A5E0650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  id *v31;
  uint64_t v32;

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18A5E0A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a26, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A5E0AB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_signpost_id_t v39;
  const char *v40;
  NSObject *v41;
  os_signpost_id_t v42;
  uint32_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_signpost_id_t v48;
  int v49;
  id v50;
  __int16 v51;
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_lock(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v7, v8, v9);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (!*(_BYTE *)(v13 + 40))
  {
    *(_BYTE *)(v13 + 40) = 1;
    objc_msgSend_unlock(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v10, v11, v12);
    if (*(_QWORD *)(a1 + 48))
    {
      objc_msgSend_fakeDeviceToDeviceEncryptionAvailability(*(void **)(a1 + 32), v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v21;
      if (v21)
      {
        v26 = objc_msgSend_integerValue(v21, v22, v23, v24);
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v27 = (void *)ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        {
          v30 = v27;
          CKStringFromDeviceToDeviceEncryptionStatus(v26);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = 138543362;
          v50 = v31;
          _os_log_impl(&dword_18A5C5000, v30, OS_LOG_TYPE_INFO, "Overriding device-to-device encryption availability with a fake one: %{public}@", (uint8_t *)&v49, 0xCu);

        }
        v32 = objc_msgSend_copyWithFakeDeviceToDeviceEncryptionAvailability_(v5, v28, v26, v29);

        v5 = (id)v32;
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
    v33 = *(void **)(a1 + 40);
    if (v6)
    {
      if (!v33)
        goto LABEL_26;
      objc_msgSend_log(v33, v18, v19, v20);
      v34 = objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_identifier(*(void **)(a1 + 40), v35, v36, v37);
      if ((unint64_t)(v38 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = v38;
        if (os_signpost_enabled(v34))
        {
          v49 = 138412290;
          v50 = v6;
          v40 = "Error: %@";
          v41 = v34;
          v42 = v39;
          v43 = 12;
LABEL_24:
          _os_signpost_emit_with_name_impl(&dword_18A5C5000, v41, OS_SIGNPOST_INTERVAL_END, v42, "accountStatus", v40, (uint8_t *)&v49, v43);
        }
      }
    }
    else
    {
      if (!v33)
        goto LABEL_26;
      objc_msgSend_log(v33, v18, v19, v20);
      v34 = objc_claimAutoreleasedReturnValue();
      v47 = objc_msgSend_identifier(*(void **)(a1 + 40), v44, v45, v46);
      if ((unint64_t)(v47 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v48 = v47;
        if (os_signpost_enabled(v34))
        {
          LOWORD(v49) = 0;
          v40 = "";
          v41 = v34;
          v42 = v48;
          v43 = 2;
          goto LABEL_24;
        }
      }
    }

    goto LABEL_26;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v14 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v49 = 138412546;
    v50 = v5;
    v51 = 2112;
    v52 = v6;
    _os_log_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_INFO, "Warn: Completion handler has already been invoked, ignoring this callback. accountInfo: %@, error: %@", (uint8_t *)&v49, 0x16u);
  }
  objc_msgSend_unlock(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v15, v16, v17);
LABEL_26:

}

void sub_18A5E0DEC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int IsDisabled;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_signpost_id_t v34;
  NSObject *v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_signpost_id_t v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  id v52;
  __int128 v53;
  _QWORD v54[4];
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  char v59;
  _QWORD v60[5];
  id v61;
  _QWORD aBlock[5];
  id v63;
  __int128 v64;
  uint64_t v65;
  uint8_t buf[4];
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_18A5E0AB0;
  aBlock[3] = &unk_1E1F61008;
  v65 = *(_QWORD *)(a1 + 64);
  v53 = *(_OWORD *)(a1 + 48);
  v3 = (id)v53;
  v64 = v53;
  v4 = *(void **)(a1 + 40);
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v63 = v4;
  v5 = _Block_copy(aBlock);
  objc_msgSend_setupInfo(*(void **)(a1 + 32), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_hashString(v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_options(*(void **)(a1 + 32), v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  IsDisabled = objc_msgSend_accountInfoCacheIsDisabled(v17, v18, v19, v20);

  if (IsDisabled)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v22 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18A5C5000, v22, OS_LOG_TYPE_INFO, "Account info cache disabled.", buf, 2u);
    }
    goto LABEL_17;
  }
  sub_18A5E1464((uint64_t)CKAccountInfo, v13);
  v26 = objc_claimAutoreleasedReturnValue();
  if (!v26)
  {
LABEL_17:
    objc_msgSend_accountInfoFetchQueue(*(void **)(a1 + 32), v23, v24, v25, v53);
    v36 = objc_claimAutoreleasedReturnValue();
    dispatch_suspend(v36);

    v40 = *(void **)(a1 + 40);
    if (v40)
    {
      objc_msgSend_log(v40, v37, v38, v39);
      v41 = objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend_identifier(*(void **)(a1 + 40), v42, v43, v44);
      if ((unint64_t)(v45 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v46 = v45;
        if (os_signpost_enabled(v41))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_18A5C5000, v41, OS_SIGNPOST_EVENT, v46, "accountStatus", "Fetching account info", buf, 2u);
        }
      }

    }
    v47 = *(void **)(a1 + 32);
    v60[0] = v2;
    v60[1] = 3221225472;
    v60[2] = sub_18A6DCDCC;
    v60[3] = &unk_1E1F60E78;
    v48 = v5;
    v49 = *(void **)(a1 + 40);
    v60[4] = *(_QWORD *)(a1 + 32);
    v61 = v48;
    v54[0] = v2;
    v54[1] = 3221225472;
    v54[2] = sub_18A6DCEF4;
    v54[3] = &unk_1E1F61058;
    v50 = v49;
    v51 = *(_QWORD *)(a1 + 32);
    v55 = v50;
    v56 = v51;
    v59 = IsDisabled;
    v57 = v13;
    v52 = v48;
    v58 = v52;
    if (v47)
    {
      sub_18A5ECA88(v47, 0, (void *)1, 0, v60, v54);
      v52 = v58;
    }

    v27 = v61;
    goto LABEL_25;
  }
  v27 = (void *)v26;
  v28 = *(void **)(a1 + 40);
  if (v28)
  {
    objc_msgSend_log(v28, v23, v24, v25);
    v29 = objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend_identifier(*(void **)(a1 + 40), v30, v31, v32);
    if ((unint64_t)(v33 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v34 = v33;
      if (os_signpost_enabled(v29))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_18A5C5000, v29, OS_SIGNPOST_EVENT, v34, "accountStatus", "Returning cached account info", buf, 2u);
      }
    }

  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v35 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v67 = v27;
    _os_log_debug_impl(&dword_18A5C5000, v35, OS_LOG_TYPE_DEBUG, "Found cached account info: %@", buf, 0xCu);
  }
  (*((void (**)(void *, void *, _QWORD))v5 + 2))(v5, v27, 0);
LABEL_25:

}

void sub_18A5E136C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18A5E1464(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  uid_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  uint64_t valid;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v35;
  id v36;
  _QWORD v37[5];
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = (void *)objc_opt_self();
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = sub_18A6AD468;
  v37[3] = &unk_1E1F5F680;
  v37[4] = v3;
  CKOncePerBoot(CFSTR("CKAccountInfoCacheReset"), v37);
  objc_opt_self();
  objc_opt_class();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v4);
  v5 = geteuid();
  if (v5)
    v9 = v5 == 501;
  else
    v9 = 1;
  v10 = (void *)qword_1ECD96A68;
  if (v9 && !qword_1ECD96A68)
  {
    objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v6, v7, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v11, v12, (uint64_t)CFSTR("CloudKitAccountInfoCache"), v13);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)qword_1ECD96A68;
    qword_1ECD96A68 = v14;

    v10 = (void *)qword_1ECD96A68;
  }
  v16 = v10;
  objc_sync_exit(v4);

  objc_msgSend_objectForKey_(v16, v17, (uint64_t)v2, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    v36 = 0;
    objc_msgSend_unarchivedObjectOfClass_fromData_error_(MEMORY[0x1E0CB3710], v20, (uint64_t)v3, (uint64_t)v19, &v36);
    v22 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v26 = v36;
    if (v26)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v27 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v39 = (uint64_t)v26;
        _os_log_error_impl(&dword_18A5C5000, v27, OS_LOG_TYPE_ERROR, "Failed to unarchive account info cache: %@", buf, 0xCu);
      }
    }
    else
    {
      valid = objc_msgSend_validAccountInfoValidationCounterValue(v3, v23, v24, v25);
      v29 = valid;
      if (v22)
        v30 = v22[2];
      else
        v30 = 0;
      if (valid == v30)
        goto LABEL_25;
      if (!valid && qword_1ECD96A70 != -1)
        dispatch_once(&qword_1ECD96A70, &unk_1E1F58298);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v31 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        if (v22)
          v35 = v22[2];
        else
          v35 = 0;
        *(_DWORD *)buf = 134218240;
        v39 = v29;
        v40 = 2048;
        v41 = v35;
        _os_log_debug_impl(&dword_18A5C5000, v31, OS_LOG_TYPE_DEBUG, "The cached account info is obsolete, not using it. currentValidationCounter: %zu, cached: %zu", buf, 0x16u);
      }
    }

    v22 = 0;
LABEL_25:

    objc_msgSend_setIsFromCache_(v22, v32, 1, v33);
    goto LABEL_26;
  }
  v22 = 0;
  objc_msgSend_setIsFromCache_(0, v20, 1, v21);
LABEL_26:

  return v22;
}

void sub_18A5E1794(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5E1878(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id WeakRetained;
  CKRecordID *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  CKRecordID *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  id v21;
  void *v22;
  const char *v23;
  unint64_t v24;
  void *v25;
  const char *v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD block[5];
  id v35;
  id v36;
  uint8_t buf[4];
  uint64_t v38;
  _QWORD v39[3];
  _QWORD v40[4];

  v40[3] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7)
  {
    v11 = [CKRecordID alloc];
    v14 = (void *)objc_msgSend_initWithRecordName_(v11, v12, (uint64_t)v7, v13);
    if (v8)
    {
LABEL_3:
      v15 = [CKRecordID alloc];
      v18 = (void *)objc_msgSend_initWithRecordName_(v15, v16, (uint64_t)v8, v17);
      goto LABEL_6;
    }
  }
  else
  {
    v14 = 0;
    if (v8)
      goto LABEL_3;
  }
  v18 = 0;
LABEL_6:
  v19 = qword_1ECD96A88;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18A5C8490;
  block[3] = &unk_1E1F60DD8;
  block[4] = WeakRetained;
  v20 = v14;
  v35 = v20;
  v21 = v18;
  v36 = v21;
  dispatch_sync(v19, block);
  if (*(_QWORD *)(a1 + 48))
    v22 = v21;
  else
    v22 = v20;
  v24 = v22;
  if (!(v9 | v24))
  {
    v39[0] = *MEMORY[0x1E0CB2D50];
    v39[1] = CFSTR("CKErrorDescription");
    v40[0] = CFSTR("Failed to obtain the necessary user record ID");
    v40[1] = CFSTR("Failed to obtain the necessary user record ID");
    v39[2] = CFSTR("CKRetryAfter");
    v40[2] = &unk_1E1FC44D8;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v23, (uint64_t)v40, (uint64_t)v39, 3);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(CKPrettyError, v26, (uint64_t)CFSTR("CKErrorDomain"), 6, v25);
    v9 = objc_claimAutoreleasedReturnValue();

  }
  if (v9)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v27 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v9;
      _os_log_error_impl(&dword_18A5C5000, v27, OS_LOG_TYPE_ERROR, "Error fetching user record ID: %@", buf, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v28 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v24;
      _os_log_debug_impl(&dword_18A5C5000, v28, OS_LOG_TYPE_DEBUG, "Fetched user record ID: %@", buf, 0xCu);
    }
  }
  if (CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9())
  {
    objc_msgSend_CKClientSuitableError((void *)v9, v29, v30, v31);
    v32 = objc_claimAutoreleasedReturnValue();

    v9 = v32;
  }
  v33 = *(_QWORD *)(a1 + 32);
  if (v33)
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 16))(v33, v24, v9);

}

void sub_18A5E1BB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  id v24;

  v24 = a2;
  v5 = a3;
  v9 = v5;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend_userInfo(v5, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)CFSTR("RequestUUID"), v12);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    objc_msgSend_userInfo(v9, v6, v7, v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v16, v17, (uint64_t)CFSTR("ContainerID"), v18);
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

  }
  objc_msgSend_CKClientSuitableError(v9, v6, v7, v8);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v23, (uint64_t)v22, (uint64_t)v24);

}

void sub_18A5E1D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5E1FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5E2308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A5E2680(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;

  v5 = (void *)MEMORY[0x18D76DE4C]();
  objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(a1, v6, 1, 1, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v7, v8, v9, v10))
    objc_msgSend_CKPropertiesStyleString(v7, v11, v12, v13);
  else
    objc_msgSend_CKPropertiesDescription(a1, v11, v12, v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    v18 = (void *)MEMORY[0x1E0CB3940];
    v19 = (objc_class *)objc_opt_class();
    NSStringFromClass(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v18, v21, (uint64_t)CFSTR("<%@: %p; %@>"), v22, v20, a1, v17);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend_description(a1, v14, v15, v16);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_autoreleasePoolPop(v5);
  return v23;
}

uint64_t sub_18A5E2770()
{
  return MEMORY[0x1E0C9AA70];
}

id sub_18A5E2B94(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[4];
  id v18;

  v5 = (void *)MEMORY[0x1E0C99DE8];
  v6 = objc_msgSend_count(a1, a2, a3, a4);
  objc_msgSend_arrayWithCapacity_(v5, v7, v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_18A5EAC10;
  v17[3] = &unk_1E1F62268;
  v18 = v9;
  v10 = v9;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v11, (uint64_t)v17, v12);
  objc_msgSend_componentsJoinedByString_(v10, v13, (uint64_t)CFSTR(", "), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_18A5E2FA4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = a1;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v13, (uint64_t)v17, 16);
  if (v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v5);
        objc_msgSend_CKAssignToContainerWithID_(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v12++), v8, (uint64_t)v4, v9, (_QWORD)v13);
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v13, (uint64_t)v17, 16);
    }
    while (v10);
  }

}

void sub_18A5E3810(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18A5E3828(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_18A74B16C;
  v10[3] = &unk_1E1F63CE8;
  v11 = v4;
  v5 = v4;
  v8 = objc_msgSend_indexOfObjectPassingTest_(a1, v6, (uint64_t)v10, v7) != 0x7FFFFFFFFFFFFFFFLL;

  return v8;
}

void sub_18A5E38F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5E3AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A5E3B10(id a1)
{
  id *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  if (a1)
  {
    v1 = (id *)a1;
    objc_sync_enter(v1);
    if (!v1[32])
    {
      objc_msgSend_activityCreate(v1, v2, v3, v4);
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = v1[32];
      v1[32] = (id)v5;

    }
    objc_sync_exit(v1);

    a1 = v1[32];
  }
  return a1;
}

void sub_18A5E3B7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5E425C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A5E4270(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  CC_LONG v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  LODWORD(v21) = 0;
  objc_msgSend_dataUsingEncoding_(a1, a2, 4, a4, 0, 0, v21, v22);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (const void *)objc_msgSend_bytes(v4, v5, v6, v7);
  v12 = objc_msgSend_length(v4, v9, v10, v11);
  CC_SHA1(v8, v12, (unsigned __int8 *)&v20);
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v13, (uint64_t)&v20, 20, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKLowercaseHexStringWithoutSpaces(v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id sub_18A5E4334(void *a1, const char *a2)
{
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  CC_LONG v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(v18, 0, sizeof(v18));
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], a2, (uint64_t)v18, 32, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = a1;
  v8 = (const void *)objc_msgSend_bytes(v4, v5, v6, v7);
  v12 = objc_msgSend_length(v4, v9, v10, v11);
  CC_SHA256(v8, v12, (unsigned __int8 *)v18);
  objc_msgSend_CKLowercaseHexStringWithoutSpaces(v3, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id sub_18A5E43F8(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  id v11;
  const char *v12;
  uint64_t v14;

  v14 = 0;
  v1 = objc_retainAutorelease(a1);
  v5 = objc_msgSend_bytes(v1, v2, v3, v4);
  v9 = objc_msgSend_length(v1, v6, v7, v8);
  v10 = CKHexCharFromBytes(v5, v9, &v14, 1);
  v11 = objc_alloc(MEMORY[0x1E0CB3940]);
  return (id)objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v11, v12, (uint64_t)v10, v14, 1, 1);
}

void sub_18A5E4A6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5E4ECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18A5E51B0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

void sub_18A5E51C4(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_postNotice(WeakRetained, v1, v2, v3);

}

id sub_18A5E56A4(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    a1 = (void *)objc_opt_new();
    objc_msgSend_appendString_(a1, v4, (uint64_t)CFSTR("{ "), v5);
    objc_msgSend_keyEnumerator(v3, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v23, (uint64_t)v27, 16);
    if (v11)
    {
      v14 = v11;
      v15 = *(_QWORD *)v24;
      v16 = 1;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v24 != v15)
            objc_enumerationMutation(v9);
          v18 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v17);
          if ((v16 & 1) == 0)
            objc_msgSend_appendString_(a1, v12, (uint64_t)CFSTR(", "), v13);
          objc_msgSend_objectForKeyedSubscript_(v3, v12, v18, v13);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appendFormat_(a1, v20, (uint64_t)CFSTR("%@:%@"), v21, v18, v19);

          v16 = 0;
          ++v17;
        }
        while (v14 != v17);
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v23, (uint64_t)v27, 16);
        v16 = 0;
      }
      while (v14);
    }
    objc_msgSend_appendString_(a1, v12, (uint64_t)CFSTR(" }"), v13);

  }
  return a1;
}

id sub_18A5E5880(id result, uint64_t a2)
{
  objc_super v2;

  if (result)
  {
    v2.receiver = result;
    v2.super_class = (Class)CKContainerCallbackProxy;
    return objc_msgSendSuper2(&v2, sel_initWithWeakObject_callbackProtocol_, a2, &unk_1EDF80370);
  }
  return result;
}

void sub_18A5E65CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  void *v32;
  objc_class *v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  const char *v40;
  uint64_t v41;
  CKException *v42;
  const char *v43;
  id v44;
  id v45;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend_conformsToProtocol_(v6, v7, (uint64_t)&unk_1EDFA0B08, v8))
  {
    objc_msgSend_CKDeepCopy(v6, v9, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend_conformsToProtocol_(v6, v9, (uint64_t)&unk_1EDF7DED8, v11))
    {
      v31 = (void *)MEMORY[0x1E0CB3940];
      goto LABEL_15;
    }
    if (!objc_msgSend_conformsToProtocol_(v6, v13, (uint64_t)&unk_1EDF77860, v14))
    {
      v32 = (void *)MEMORY[0x1E0CB3940];
LABEL_17:
      v39 = (objc_class *)objc_opt_class();
      NSStringFromClass(v39);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v32, v40, (uint64_t)CFSTR("Object with class %@ cannot be copied"), v41, v34);
      v38 = objc_claimAutoreleasedReturnValue();
LABEL_18:

      v42 = [CKException alloc];
      v44 = (id)objc_msgSend_initWithName_format_(v42, v43, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("%@"), v38);
      objc_exception_throw(v44);
    }
    v12 = objc_msgSend_copyWithZone_(v6, v15, 0, v16);
  }
  v17 = (void *)v12;

  v18 = *(void **)(a1 + 32);
  v45 = v5;
  if (!objc_msgSend_conformsToProtocol_(v45, v19, (uint64_t)&unk_1EDFA0B08, v20))
  {
    if (!objc_msgSend_conformsToProtocol_(v45, v21, (uint64_t)&unk_1EDF7DED8, v23))
    {
      if (objc_msgSend_conformsToProtocol_(v45, v25, (uint64_t)&unk_1EDF77860, v26))
      {
        v24 = objc_msgSend_copyWithZone_(v45, v27, 0, v28);
        goto LABEL_11;
      }
      v32 = (void *)MEMORY[0x1E0CB3940];
      goto LABEL_17;
    }
    v31 = (void *)MEMORY[0x1E0CB3940];
LABEL_15:
    v33 = (objc_class *)objc_opt_class();
    NSStringFromClass(v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromProtocol((Protocol *)&unk_1EDFA0B08);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v31, v36, (uint64_t)CFSTR("Collection with class %@ does not support %@"), v37, v34, v35);
    v38 = objc_claimAutoreleasedReturnValue();

    goto LABEL_18;
  }
  objc_msgSend_CKDeepCopy(v45, v21, v22, v23);
  v24 = objc_claimAutoreleasedReturnValue();
LABEL_11:
  v29 = (void *)v24;

  objc_msgSend_setObject_forKeyedSubscript_(v18, v30, (uint64_t)v17, (uint64_t)v29);
}

void sub_18A5E683C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5E7268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5E7338(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const mach_header *CKHeaderForLibraryName(void *a1)
{
  id v1;
  uint32_t v2;
  uint32_t v3;
  uint32_t i;
  const mach_header *image_header;
  const mach_header *v6;
  uint32_t ncmds;
  uint32_t v8;
  int32_t *p_cputype;
  char *v10;
  char *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  v1 = a1;
  v2 = _dyld_image_count();
  if (v2)
  {
    v3 = v2;
    for (i = 0; i != v3; ++i)
    {
      image_header = _dyld_get_image_header(i);
      if (image_header)
      {
        v6 = image_header;
        if (image_header->filetype == 6)
        {
          ncmds = image_header->ncmds;
          if (ncmds)
          {
            v8 = 0;
            p_cputype = &image_header[1].cputype;
            do
            {
              if (*p_cputype == 13)
              {
                v10 = (char *)p_cputype + p_cputype[2];
                v11 = strrchr(v10, 47);
                if (v11)
                  v10 = v11 + 1;
                v12 = objc_retainAutorelease(v1);
                v16 = (const char *)objc_msgSend_UTF8String(v12, v13, v14, v15);
                if (!strcmp(v10, v16))
                  goto LABEL_15;
                ncmds = v6->ncmds;
              }
              p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
              ++v8;
            }
            while (v8 < ncmds);
          }
        }
      }
    }
  }
  v6 = 0;
LABEL_15:

  return v6;
}

id sub_18A5E7B80(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  int isEqualToString;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  id v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  CKPrettyError *v82;
  const char *v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  int v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  const char *v111;
  CKPrettyError *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  CKPrettyError *v116;
  const char *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  char isEqual;
  NSObject *v122;
  const char *v123;
  void *v124;
  CKPrettyError *v125;
  const char *v126;
  uint64_t v127;
  _QWORD v129[4];
  id v130;
  __int128 *p_buf;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t);
  void (*v137)(uint64_t);
  id v138;
  uint64_t v139;
  id v140;
  _QWORD v141[4];
  _QWORD v142[4];
  __int128 buf;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t);
  void (*v146)(uint64_t);
  id v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_domain(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v5, v6, (uint64_t)CFSTR("CKInternalErrorDomain"), v7);

  if (isEqualToString)
  {
    objc_msgSend_userInfo(v1, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend_mutableCopy(v12, v13, v14, v15);

    objc_msgSend_CKClientSuitableUnderlyingError(v1, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *MEMORY[0x1E0CB3388];
    objc_msgSend_setObject_forKeyedSubscript_(v16, v22, (uint64_t)v20, *MEMORY[0x1E0CB3388]);
    objc_msgSend_userInfo(v20, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = *MEMORY[0x1E0CB2D50];
    objc_msgSend_objectForKeyedSubscript_(v26, v28, *MEMORY[0x1E0CB2D50], v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v16, v31, (uint64_t)v30, v27);

    objc_msgSend_userInfo(v20, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v35, v36, (uint64_t)CFSTR("CKErrorDescription"), v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v16, v39, (uint64_t)v38, (uint64_t)CFSTR("CKErrorDescription"));

    v40 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_domain(v20, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_code(v20, v45, v46, v47);
    objc_msgSend_stringWithFormat_(v40, v49, (uint64_t)CFSTR("%@: %ld"), v50, v44, v48);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v16, v52, (uint64_t)v51, *MEMORY[0x1E0C9AFA8]);

    objc_msgSend_CKClientSuitableErrorSpecificUserInfo(v20, v53, v54, v55);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59)
      objc_msgSend_addEntriesFromDictionary_(v16, v56, (uint64_t)v59, v58);
    objc_msgSend_userInfo(v1, v56, v57, v58);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v60, v61, (uint64_t)CFSTR("CKPartialErrors"), v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();

    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v144 = 0x3032000000;
    v145 = sub_18A8001B8;
    v146 = sub_18A8001C8;
    v147 = 0;
    v133 = 0;
    v134 = &v133;
    v135 = 0x3032000000;
    v136 = sub_18A8001B8;
    v137 = sub_18A8001C8;
    v138 = 0;
    if (v63)
    {
      v66 = (void *)objc_opt_new();
      v129[0] = MEMORY[0x1E0C809B0];
      v129[1] = 3221225472;
      v129[2] = sub_18A5E1BB4;
      v129[3] = &unk_1E1F664A0;
      p_buf = &buf;
      v132 = &v133;
      v67 = v66;
      v130 = v67;
      objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v63, v68, (uint64_t)v129, v69);
      objc_msgSend_setObject_forKeyedSubscript_(v16, v70, (uint64_t)v67, (uint64_t)CFSTR("CKPartialErrors"));

      v71 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
      if (v71)
        objc_msgSend_setObject_forKeyedSubscript_(v16, v64, v71, (uint64_t)CFSTR("RequestUUID"));
    }
    v72 = v134[5];
    if (v72)
      objc_msgSend_setObject_forKeyedSubscript_(v16, v64, v72, (uint64_t)CFSTR("ContainerID"));
    objc_msgSend_objectForKeyedSubscript_(v16, v64, v21, v65);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = objc_msgSend_code(v73, v74, v75, v76);
    v81 = CKErrorCodeForUnderlyingErrorCode(v77, v78, v79, v80);

    v82 = [CKPrettyError alloc];
    v84 = (void *)objc_msgSend_initWithDomain_code_userInfo_(v82, v83, (uint64_t)CFSTR("CKErrorDomain"), v81, v16);

    _Block_object_dispose(&v133, 8);
    _Block_object_dispose(&buf, 8);

  }
  else
  {
    objc_msgSend_domain(v1, v9, v10, v11);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend_isEqualToString_(v88, v89, *MEMORY[0x1E0CB32E8], v90);

    if (v91)
    {
      v95 = objc_msgSend_code(v1, v92, v93, v94);
      v96 = CKErrorCodeForNSURLErrorCode(v95);
      v97 = (void *)objc_opt_new();
      v98 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend_domain(v1, v99, v100, v101);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      v106 = objc_msgSend_code(v1, v103, v104, v105);
      objc_msgSend_stringWithFormat_(v98, v107, (uint64_t)CFSTR("%@: %ld"), v108, v102, v106);
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v97, v110, (uint64_t)v109, *MEMORY[0x1E0C9AFA8]);

      objc_msgSend_setObject_forKeyedSubscript_(v97, v111, (uint64_t)v1, *MEMORY[0x1E0CB3388]);
      v112 = [CKPrettyError alloc];
      v84 = (void *)objc_msgSend_initWithDomain_code_userInfo_(v112, v113, (uint64_t)CFSTR("CKErrorDomain"), v96, v97);

    }
    else
    {
      v84 = v1;
      if (objc_msgSend_CKIsXPCConnectionError(v1, v92, v93, v94))
      {
        v114 = *MEMORY[0x1E0CB2D50];
        v141[0] = *MEMORY[0x1E0CB3388];
        v141[1] = v114;
        v142[0] = v1;
        v142[1] = CFSTR("Error connecting to CloudKit daemon. This could happen for many reasons, for example a daemon exit, a device reboot, a race with the connection inactivity monitor, invalid entitlements, and more. Check the logs around this time to investigate the cause of this error.");
        v141[2] = CFSTR("CKErrorDescription");
        v141[3] = CFSTR("CKRetryAfter");
        v142[2] = CFSTR("Error connecting to CloudKit daemon. This could happen for many reasons, for example a daemon exit, a device reboot, a race with the connection inactivity monitor, invalid entitlements, and more. Check the logs around this time to investigate the cause of this error.");
        v142[3] = &unk_1E1FC4C58;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v85, (uint64_t)v142, (uint64_t)v141, 4);
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        v116 = [CKPrettyError alloc];
        v84 = (void *)objc_msgSend_initWithDomain_code_userInfo_(v116, v117, (uint64_t)CFSTR("CKErrorDomain"), 6, v115);

      }
    }
  }
  objc_msgSend_domain(v84, v85, v86, v87);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  isEqual = objc_msgSend_isEqual_(v118, v119, (uint64_t)CFSTR("CKErrorDomain"), v120);

  if ((isEqual & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v122 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v1;
      _os_log_fault_impl(&dword_18A5C5000, v122, OS_LOG_TYPE_FAULT, "Could not convert error to a proper CloudKit error. Defaulting to internal error for %@", (uint8_t *)&buf, 0xCu);
    }
    v139 = *MEMORY[0x1E0CB3388];
    v140 = v1;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v123, (uint64_t)&v140, (uint64_t)&v139, 1);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v125 = [CKPrettyError alloc];
    v127 = objc_msgSend_initWithDomain_code_userInfo_(v125, v126, (uint64_t)CFSTR("CKErrorDomain"), 1, v124);

    v84 = (void *)v127;
  }
  return v84;
}

void sub_18A5E81B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A5E87B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, (uint64_t)CFSTR("%@=%@, "), a4, a2, a3);
}

id sub_18A5E9210(id a1, void *a2)
{
  id v2;
  id v3;
  SEL v4;
  id Property;
  const char *v6;
  uint64_t v7;

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    Property = objc_getProperty(v2, v4, 24, 1);
    objc_msgSend_objectForKeyedSubscript_(Property, v6, (uint64_t)v3, v7);
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void sub_18A5E9464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5E94F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A5E9588()
{
  if (qword_1ECD96C38 != -1)
    dispatch_once(&qword_1ECD96C38, &unk_1E1F63C68);
  return (id)qword_1ECD96C30;
}

id sub_18A5E95C8(void *a1, uint64_t a2, void *a3)
{
  void (**v4)(id, _QWORD);
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99DE8];
  v9 = objc_msgSend_count(a1, v6, v7, v8);
  objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v13 = a1;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v24, (uint64_t)v28, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v25;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v25 != v17)
          objc_enumerationMutation(v13);
        v4[2](v4, *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v18));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v12, v20, (uint64_t)v19, v21, (_QWORD)v24);

        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v22, (uint64_t)&v24, (uint64_t)v28, 16);
    }
    while (v16);
  }

  return v12;
}

id sub_18A5E970C(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v1 = a1;
  if (!CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9()
    || !objc_msgSend_conformsToProtocol_(v1, v2, (uint64_t)&unk_1EDF77860, v3))
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v13 = (id)objc_msgSend_copyWithZone_(v1, v11, 0, v12);
      goto LABEL_7;
    }
LABEL_6:
    v13 = v1;
LABEL_7:
    v10 = v13;
    goto LABEL_8;
  }
  objc_msgSend_CKMap_(v1, v4, (uint64_t)&unk_1E1F63C48, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend_copy(v6, v7, v8, v9);

LABEL_8:
  return v10;
}

void sub_18A5E97D0(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  CKMergeableValueID *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t isEncrypted;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  const char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = v5;
      objc_msgSend_recordID(v7, v8, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
LABEL_20:

        goto LABEL_21;
      }
      objc_msgSend_recordID(a1, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setRecordID_(v7, v16, (uint64_t)v15, v17);
LABEL_5:

      goto LABEL_20;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = v5;
      objc_msgSend_valueID(v7, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
        goto LABEL_20;
      v22 = [CKMergeableValueID alloc];
      objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_UUIDString(v26, v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(a1, v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      isEncrypted = objc_msgSend_isEncrypted(a1, v35, v36, v37);
      v15 = (void *)objc_msgSend_initWithName_recordID_key_encrypted_(v22, v39, (uint64_t)v30, (uint64_t)v34, v6, isEncrypted);

      objc_msgSend_setValueID_(v7, v40, (uint64_t)v15, v41);
      objc_msgSend_setIsValueIDKnownToServer_(v7, v42, 0, v43);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v44 = ck_log_facility_distributed_sync;
      if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v57 = v15;
        _os_log_impl(&dword_18A5C5000, v44, OS_LOG_TYPE_INFO, "Assigning new mergeable value ID %@", buf, 0xCu);
      }
      goto LABEL_5;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v7 = v5;
      v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v45, (uint64_t)&v51, (uint64_t)v55, 16);
      if (v46)
      {
        v47 = v46;
        v48 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v47; ++i)
          {
            if (*(_QWORD *)v52 != v48)
              objc_enumerationMutation(v7);
            sub_18A5E97D0(a1, *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i), v6);
          }
          v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v50, (uint64_t)&v51, (uint64_t)v55, 16);
        }
        while (v47);
      }
      goto LABEL_20;
    }
  }
LABEL_21:

}

uint64_t _CKCheckArgument(uint64_t a1, void *a2, int a3, char a4, int a5, _QWORD *a6)
{
  const char *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;

  v12 = a2;
  if (!v12)
  {
    if (a6)
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("%s can not be nil"), a1);
      goto LABEL_9;
    }
LABEL_21:
    v19 = 0;
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_14:
    v19 = 1;
    goto LABEL_22;
  }
  v16 = objc_msgSend_length(v12, v13, v14, v15);
  if ((a5 ^ 1 | a3) == 1 && !v16)
  {
    if (a6)
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v17, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("%s can not be empty"), a1);
LABEL_9:
      v19 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if ((a3 & 1) != 0)
  {
    if (v16 < 0x100)
    {
      if ((objc_msgSend_hasPrefix_(v12, v17, (uint64_t)CFSTR("cloudkit."), v18) & 1) == 0)
      {
        v20 = objc_retainAutorelease(v12);
        v24 = (unsigned __int8 *)objc_msgSend_UTF8String(v20, v21, v22, v23);
        v27 = objc_msgSend_lengthOfBytesUsingEncoding_(v20, v25, 4, v26);
        if (!sub_18A6FD430(v24, v27))
        {
          if (a6)
          {
            objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v28, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("%s (%@) contains invalid characters"), a1, v20);
            goto LABEL_9;
          }
          goto LABEL_21;
        }
      }
      goto LABEL_14;
    }
LABEL_17:
    if (a6)
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v17, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("%s (%@) is too long"), a1, v12);
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  v19 = 1;
  if (v16 >= 0x100 && (a4 & 1) != 0)
    goto LABEL_17;
LABEL_22:

  return v19;
}

uint64_t CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9()
{
  if (qword_1ECD97090 != -1)
    dispatch_once(&qword_1ECD97090, &unk_1E1F62150);
  return byte_1ECD96F97;
}

id sub_18A5E9CA0(uint64_t a1, void *a2)
{
  return sub_18A5E970C(a2);
}

uint64_t CKObjectsAreBothNilOrEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t isEqual;

  v3 = a1;
  v4 = a2;
  v7 = v4;
  if (v3 == v4)
  {
    isEqual = 1;
  }
  else
  {
    isEqual = 0;
    if (v3 && v4)
      isEqual = objc_msgSend_isEqual_(v3, v5, (uint64_t)v4, v6);
  }

  return isEqual;
}

__CFString *stringForCKErrorCode(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __CFString *result;
  uint64_t v6;

  if (a1 > 109)
  {
    if (a1 > 139)
    {
      if (a1 > 159)
      {
        if (a1 == 160)
          return CFSTR("Incompatible OS Version");
        if (a1 == 161)
          return CFSTR("Signature Validation Failed");
      }
      else
      {
        if (a1 == 140)
          return CFSTR("Insufficient Disk Space");
        if (a1 == 150)
          return CFSTR("Mergeable Value ID Mismatch");
      }
LABEL_62:
      if (a1 < 1000)
      {
        return CFSTR("Unknown Error");
      }
      else
      {
        v6 = CKErrorCodeForUnderlyingErrorCode(a1, a2, a3, a4);
        stringForCKErrorCode(v6);
        a1 = objc_claimAutoreleasedReturnValue();
        return (__CFString *)(id)a1;
      }
    }
    else
    {
      switch(a1)
      {
        case 110:
          result = CFSTR("Device-To-Device Encryption Unavailable");
          break;
        case 111:
          result = CFSTR("Keychain Sync Incomplete");
          break;
        case 112:
          result = CFSTR("Identity Lost");
          break;
        case 113:
        case 114:
          result = CFSTR("Walrus Enabled");
          break;
        case 115:
          result = CFSTR("Needs To Verify Terms");
          break;
        case 124:
          result = CFSTR("Server Streaming Asset Changed");
          break;
        case 130:
          result = CFSTR("XPC Activity Not Continue");
          break;
        case 131:
          result = CFSTR("XPC Activity Should Defer");
          break;
        case 132:
          result = CFSTR("Scheduler Activity Deferred");
          break;
        default:
          goto LABEL_62;
      }
    }
  }
  else
  {
    v4 = a1 - 1;
    a1 = (uint64_t)CFSTR("Internal Error");
    switch(v4)
    {
      case 0:
        return (__CFString *)(id)a1;
      case 1:
        a1 = (uint64_t)CFSTR("Partial Failure");
        return (__CFString *)(id)a1;
      case 2:
        result = CFSTR("Network Unavailable");
        break;
      case 3:
        result = CFSTR("Network Failure");
        break;
      case 4:
        result = CFSTR("Bad Container");
        break;
      case 5:
        result = CFSTR("Service Unavailable");
        break;
      case 6:
        result = CFSTR("Request Rate Limited");
        break;
      case 7:
        result = CFSTR("Missing Entitlement");
        break;
      case 8:
        result = CFSTR("Not Authenticated");
        break;
      case 9:
        result = CFSTR("Permission Failure");
        break;
      case 10:
        result = CFSTR("Unknown Item");
        break;
      case 11:
        result = CFSTR("Invalid Arguments");
        break;
      case 12:
        result = CFSTR("Results Truncated");
        break;
      case 13:
        result = CFSTR("Server Record Changed");
        break;
      case 14:
        result = CFSTR("Server Rejected Request");
        break;
      case 15:
        result = CFSTR("Asset File Not Found");
        break;
      case 16:
        result = CFSTR("Asset File Modified");
        break;
      case 17:
        result = CFSTR("Incompatible Version");
        break;
      case 18:
        result = CFSTR("Constraint Violation");
        break;
      case 19:
        result = CFSTR("Operation Cancelled");
        break;
      case 20:
        result = CFSTR("Change Token Expired");
        break;
      case 21:
        result = CFSTR("Batch Request Failed");
        break;
      case 22:
        result = CFSTR("Zone Busy");
        break;
      case 23:
        result = CFSTR("Invalid Database For Operation");
        break;
      case 24:
        result = CFSTR("Quota Exceeded");
        break;
      case 25:
        result = CFSTR("Zone Not Found");
        break;
      case 26:
        result = CFSTR("Limit Exceeded");
        break;
      case 27:
        result = CFSTR("User Deleted Zone");
        break;
      case 28:
        result = CFSTR("Too Many Participants");
        break;
      case 29:
        result = CFSTR("Already Shared");
        break;
      case 30:
        result = CFSTR("Reference Violation");
        break;
      case 31:
        result = CFSTR("Managed Account Restricted");
        break;
      case 32:
        result = CFSTR("Participant May Need Verification");
        break;
      case 33:
        result = CFSTR("Server Response Lost");
        break;
      case 34:
        result = CFSTR("Asset File Not Available");
        break;
      case 35:
        result = CFSTR("Account Temporarily Unavailable");
        break;
      default:
        if (CFSTR("Internal Error") != (__CFString *)100)
          goto LABEL_62;
        result = CFSTR("Record Archived");
        break;
    }
  }
  return result;
}

id CKValidateKeyName(void *a1)
{
  id v2;

  v2 = 0;
  _CKCheckArgument((uint64_t)"recordKey", a1, 1, 1, 0, &v2);
  return v2;
}

void ck_call_or_dispatch_sync_if_not_key(void *a1, const void *a2, void *a3)
{
  NSObject *v5;
  void (**v6)(_QWORD);
  NSObject *v7;
  uint8_t v8[16];

  v5 = a1;
  v6 = a3;
  if (v5)
  {
    if (dispatch_get_specific(a2))
      v6[2](v6);
    else
      dispatch_sync(v5, v6);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Attempted to call ck_call_or_dispatch_sync_if_not_key with a nil queue", v8, 2u);
    }
  }

}

uint64_t CKIsRunningInSyncBubble()
{
  if (qword_1ECD97060 != -1)
    dispatch_once(&qword_1ECD97060, &unk_1E1F62050);
  return byte_1ECD96F91;
}

_BYTE *CKHexCharFromBytes(uint64_t a1, unint64_t a2, _QWORD *a3, char a4)
{
  unint64_t v4;
  const char *v5;
  NSObject *v6;
  _BYTE *result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t i;
  char *v16;
  char v17;
  _BYTE *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;

  v4 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if ((a4 & 2) != 0)
    v5 = "0123456789ABCDEF";
  else
    v5 = "0123456789abcdef";
  if (a2 >= 0x5555555555555556)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v19 = 134217984;
      v20 = v4;
      _os_log_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_INFO, "Warn: Hex string length is too long: %lu", (uint8_t *)&v19, 0xCu);
    }
    return 0;
  }
  v11 = (a2 - 1) >> 2;
  if ((a4 & 1) != 0)
    v11 = 0;
  result = malloc_type_calloc(v11 + 2 * a2 + 1, 1uLL, 0xBB2463D2uLL);
  if (v4 < 5)
  {
    v12 = 0;
    v14 = result;
    if (!v4)
      goto LABEL_25;
  }
  else
  {
    v12 = 0;
    v13 = a1;
    v14 = result;
    do
    {
      for (i = 0; i != 4; ++i)
      {
        *v14 = v5[(unint64_t)*(unsigned __int8 *)(v13 + i) >> 4];
        v14[1] = v5[*(_BYTE *)(v13 + i) & 0xF];
        v14 += 2;
      }
      if ((a4 & 1) == 0)
        *v14++ = 32;
      v12 += 4;
      v4 -= 4;
      v13 += 4;
    }
    while (v4 > 4);
    if (!v4)
      goto LABEL_25;
  }
  v16 = (char *)(a1 + v12);
  do
  {
    *v14 = v5[(unint64_t)*v16 >> 4];
    v17 = *v16++;
    v18 = v14 + 2;
    v14[1] = v5[v17 & 0xF];
    v14 += 2;
    --v4;
  }
  while (v4);
  v14 = v18;
LABEL_25:
  *v14 = 0;
  if (a3)
    *a3 = v14 - result;
  return result;
}

id CKProcessIndexedArrayKey(void *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v84;

  v7 = a1;
  if (objc_msgSend_length(v7, v8, v9, v10)
    && (v14 = objc_msgSend_length(v7, v11, v12, v13),
        objc_msgSend_characterAtIndex_(v7, v15, v14 - 1, v16) == 93))
  {
    if (qword_1ECD96BF8 != -1)
      dispatch_once(&qword_1ECD96BF8, &unk_1E1F585F8);
    v20 = (void *)qword_1ECD96BF0;
    if (qword_1ECD96BF0)
    {
      v21 = objc_msgSend_length(v7, v17, v18, v19);
      objc_msgSend_matchesInString_options_range_(v20, v22, (uint64_t)v7, 0, 0, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_firstObject(v23, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend_numberOfRanges(v27, v28, v29, v30);

      if (!v31)
      {
        v81 = 0;
LABEL_19:

        goto LABEL_20;
      }
      objc_msgSend_firstObject(v23, v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_rangeAtIndex_(v35, v36, 3, v37);
      objc_msgSend_substringWithRange_(v7, v39, v38, (uint64_t)v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend_isEqualToString_(v40, v41, (uint64_t)CFSTR("..<"), v42) & 1) != 0)
      {

        objc_msgSend_firstObject(v23, v44, v45, v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = objc_msgSend_rangeAtIndex_(v47, v48, 1, v49);
        objc_msgSend_substringWithRange_(v7, v51, v50, (uint64_t)v51);
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        CKValidateKeyName(v40);
        v52 = objc_claimAutoreleasedReturnValue();
        if (!v52)
        {
          objc_msgSend_firstObject(v23, v53, v54, v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = objc_msgSend_rangeAtIndex_(v56, v57, 2, v58);
          objc_msgSend_substringWithRange_(v7, v60, v59, (uint64_t)v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_firstObject(v23, v62, v63, v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = objc_msgSend_rangeAtIndex_(v65, v66, 4, v67);
          objc_msgSend_substringWithRange_(v7, v69, v68, (uint64_t)v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();

          v74 = objc_msgSend_integerValue(v61, v71, v72, v73);
          v78 = objc_msgSend_integerValue(v70, v75, v76, v77);
          if (v74 > v78 || (v80 = v78, v74 < 0) && v78 >= 1)
          {
            objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v79, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("indexed list key (%@) contains invalid bounds"), v7);
            v81 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {

            if (v80 > -1 && v74 < 0)
              v84 = ~v74;
            else
              v84 = -v74;
            if (a2)
              *a2 = objc_retainAutorelease(v40);
            if (a3)
              *a3 = v74;
            v81 = 0;
            if (a4)
              *a4 = v84 + v80;
          }
          goto LABEL_18;
        }
      }
      else
      {
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v43, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("indexed list key (%@) contains an invalid operator (%@)"), v7, v40);
        v52 = objc_claimAutoreleasedReturnValue();
      }
      v81 = (void *)v52;
LABEL_18:

      goto LABEL_19;
    }
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v17, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("Couldn't initialize indexed list key regular expression"));
    v81 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v81 = 0;
  }
LABEL_20:

  return v81;
}

id sub_18A5EA800(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v7 = (void *)objc_opt_class();
  if (objc_msgSend_conformsToProtocol_(v7, v8, (uint64_t)&unk_1EDF789C0, v9))
  {
    v12 = (void *)MEMORY[0x18D76DE4C]();
    objc_msgSend_CKObjectDescriptionRedact_avoidShortDescription_(a1, v13, a3, a4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_description(v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_autoreleasePoolPop(v12);
  }
  else
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("<%@: %p>"), v11, a1, a1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v18;
}

void sub_18A5EABFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5EAC10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  char isKindOfClass;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  id v20;

  v20 = a3;
  v5 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v10 = *(void **)(a1 + 32);
  v11 = (void *)MEMORY[0x1E0CB3940];
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend_CKPropertiesStyleString(v20, v7, v8, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v11, v13, (uint64_t)CFSTR("%@={ %@ }"), v14, v5, v12);
  }
  else
  {
    objc_msgSend_description(v20, v7, v8, v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v11, v15, (uint64_t)CFSTR("%@=%@"), v16, v5, v12);
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_addObject_(v10, v18, (uint64_t)v17, v19);
}

id sub_18A5EACE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CKObjectDescription *v7;
  const char *v8;

  v7 = [CKObjectDescription alloc];
  return (id)objc_msgSend_initWithObject_redact_avoidShortDescription_(v7, v8, a1, a3, a4);
}

id CKShortRandomID()
{
  uint64_t v0;
  _BYTE *v1;
  unint64_t v2;
  id v3;
  const char *v4;
  uint64_t v6;
  _BYTE __buf[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  arc4random_buf(__buf, 8uLL);
  v0 = 0;
  v1 = (char *)&v6 + 1;
  do
  {
    v2 = __buf[v0];
    *(v1 - 1) = a0123456789abcd[v2 & 0xF];
    *v1 = a0123456789abcd[v2 >> 4];
    v1 += 2;
    ++v0;
  }
  while (v0 != 8);
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  return (id)objc_msgSend_initWithBytes_length_encoding_(v3, v4, (uint64_t)&v6, 16, 1);
}

uint64_t CKValueCanBeSetOnRecord(void *a1)
{
  id v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  const char *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  CKAcceptableValueClasses();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v9, (uint64_t)v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v4 = 1;
          goto LABEL_11;
        }
      }
      v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v7, (uint64_t)&v9, (uint64_t)v13, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_11:

  return v4;
}

id CKAcceptableValueClasses()
{
  if (qword_1ECD96FD8 != -1)
    dispatch_once(&qword_1ECD96FD8, &unk_1E1F59318);
  return (id)qword_1ECD96FD0;
}

uint64_t sub_18A5EB0C8()
{
  return 1;
}

NSString *sub_18A5EB0D0()
{
  objc_class *v0;

  v0 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v0);
}

void CKOncePerBoot(void *a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD);
  const char *v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  const char *v43;
  NSObject *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  void *v62;
  int v63;
  id v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  pthread_mutex_lock(&stru_1ECD96950);
  if ((byte_1ECD96F9B & 1) == 0)
  {
    byte_1ECD96F9B = 1;
    v7 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v8 = (void *)qword_1ECD96FA0;
    qword_1ECD96FA0 = (uint64_t)v7;

    objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_integerForKey_(v12, v13, (uint64_t)CFSTR("CKStartupTime"), v14);
    v16 = CKBootTime();
    if (v15 == v16)
    {
      objc_msgSend_objectForKey_(v12, v17, (uint64_t)CFSTR("CKPerBootTasks"), v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObjectsFromArray_((void *)qword_1ECD96FA0, v20, (uint64_t)v19, v21);

      qword_1ECD970E8 = 0;
    }
    else
    {
      v22 = v16;
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v23 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        LOWORD(v63) = 0;
        _os_log_impl(&dword_18A5C5000, v23, OS_LOG_TYPE_INFO, "Detected reboot. Resetting once-per-boot tasks.", (uint8_t *)&v63, 2u);
      }

      qword_1ECD970E8 = v22;
      if (v22)
      {
        v24 = 1;
        goto LABEL_11;
      }
    }
  }
  v24 = 0;
LABEL_11:
  if ((objc_msgSend_containsObject_((void *)qword_1ECD96FA0, v5, (uint64_t)v3, v6) & 1) != 0)
  {
    pthread_mutex_unlock(&stru_1ECD96950);
    if (!v24)
      goto LABEL_41;
    goto LABEL_36;
  }
  objc_msgSend_objectForKey_((void *)qword_1ECD96FA8, v25, (uint64_t)v3, v26);
  v30 = objc_claimAutoreleasedReturnValue();
  if (!v30)
  {
    v39 = (void *)qword_1ECD96FA8;
    if (!qword_1ECD96FA8)
    {
      v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v41 = (void *)qword_1ECD96FA8;
      qword_1ECD96FA8 = (uint64_t)v40;

      v39 = (void *)qword_1ECD96FA8;
    }
    objc_msgSend_currentThread(MEMORY[0x1E0CB3978], v31, v32, v33);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v39, v43, (uint64_t)v42, (uint64_t)v3);

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v44 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v63 = 138543362;
      v64 = v3;
      _os_log_impl(&dword_18A5C5000, v44, OS_LOG_TYPE_INFO, "Starting once-per-boot task: %{public}@", (uint8_t *)&v63, 0xCu);
    }
    pthread_mutex_unlock(&stru_1ECD96950);
    if (v4)
      v4[2](v4);
    pthread_mutex_lock(&stru_1ECD96950);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v45 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v63 = 138543362;
      v64 = v3;
      _os_log_impl(&dword_18A5C5000, v45, OS_LOG_TYPE_INFO, "Completed once-per-boot task: %{public}@", (uint8_t *)&v63, 0xCu);
    }
    objc_msgSend_addObject_((void *)qword_1ECD96FA0, v46, (uint64_t)v3, v47);
    pthread_mutex_lock(&stru_1ECD96990);
    objc_msgSend_allObjects((void *)qword_1ECD96FA0, v48, v49, v50);
    v51 = objc_claimAutoreleasedReturnValue();
    v52 = (void *)qword_1ECD96FB0;
    qword_1ECD96FB0 = v51;

    pthread_mutex_unlock(&stru_1ECD96990);
    v58 = objc_msgSend_count((void *)qword_1ECD96FA8, v53, v54, v55);
    v59 = (void *)qword_1ECD96FA8;
    if (v58 == 1)
    {
      qword_1ECD96FA8 = 0;

    }
    else
    {
      objc_msgSend_removeObjectForKey_((void *)qword_1ECD96FA8, v56, (uint64_t)v3, v57);
    }
    pthread_cond_broadcast(&stru_1ECD96920);
    pthread_mutex_unlock(&stru_1ECD96950);
    goto LABEL_36;
  }
  v34 = (void *)v30;
  objc_msgSend_currentThread(MEMORY[0x1E0CB3978], v31, v32, v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v34 == v35)
    objc_msgSend_raise_format_(MEMORY[0x1E0C99DA0], v36, *MEMORY[0x1E0C99768], (uint64_t)CFSTR("Recursive once per boot initialization is not allowed"));
  do
    pthread_cond_wait(&stru_1ECD96920, &stru_1ECD96950);
  while (!objc_msgSend_containsObject_((void *)qword_1ECD96FA0, v37, (uint64_t)v3, v38));

  pthread_mutex_unlock(&stru_1ECD96950);
  if ((v24 & 1) != 0)
  {
LABEL_36:
    objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v27, v28, v29);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    pthread_mutex_lock(&stru_1ECD96990);
    if (qword_1ECD970E8)
    {
      objc_msgSend_setInteger_forKey_(v60, v61, qword_1ECD970E8, (uint64_t)CFSTR("CKStartupTime"));
      qword_1ECD970E8 = 0;
    }
    if (qword_1ECD96FB0)
    {
      objc_msgSend_setObject_forKey_(v60, v61, qword_1ECD96FB0, (uint64_t)CFSTR("CKPerBootTasks"));
      v62 = (void *)qword_1ECD96FB0;
      qword_1ECD96FB0 = 0;

    }
    pthread_mutex_unlock(&stru_1ECD96990);

  }
LABEL_41:

}

uint64_t CKMainBundleIsAppleExecutable()
{
  if (qword_1ECD970A8 != -1)
    dispatch_once(&qword_1ECD970A8, &unk_1E1F621B0);
  return byte_1ECD96F99;
}

uint64_t CKErrorCodeForUnderlyingErrorCode(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  result = 1;
  if (a1 > 2999)
  {
    if (a1 > 5999)
    {
      if (a1 > 8999)
      {
        switch(a1)
        {
          case 10000:
          case 10001:
          case 10002:
            return result;
          case 10003:
LABEL_30:
            result = 20;
            break;
          case 10004:
LABEL_16:
            result = 16;
            break;
          case 10005:
LABEL_17:
            result = 12;
            break;
          default:
            if ((unint64_t)(a1 - 9000) >= 2)
            {
LABEL_32:
              objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
              v6 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)"CKErrorCode CKErrorCodeForUnderlyingErrorCode(CKUnderlyingErrorCode)", v8);
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v10, (uint64_t)v9, (uint64_t)CFSTR("CKError.m"), 1210, CFSTR("No mapping exists for internal error code %ld"), a1);

              result = 1;
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 8000:
          case 8002:
          case 8006:
          case 8010:
            goto LABEL_21;
          case 8001:
          case 8003:
            goto LABEL_17;
          case 8004:
            return 11;
          case 8005:
          case 8007:
          case 8008:
          case 8009:
          case 8012:
            return result;
          case 8011:
            return 9;
          case 8013:
          case 8014:
            return 33;
          default:
            if ((unint64_t)(a1 - 7000) < 5)
              return result;
            if (a1 != 6000)
              goto LABEL_32;
LABEL_21:
            result = 15;
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 5000:
        case 5001:
        case 5002:
        case 5003:
        case 5004:
        case 5005:
        case 5007:
        case 5010:
        case 5016:
        case 5017:
        case 5018:
        case 5019:
        case 5020:
          return result;
        case 5006:
          result = 110;
          break;
        case 5008:
        case 5009:
          result = 111;
          break;
        case 5011:
          result = 112;
          break;
        case 5012:
LABEL_22:
          result = 7;
          break;
        case 5013:
          result = 114;
          break;
        case 5014:
LABEL_9:
          result = 36;
          break;
        case 5015:
          goto LABEL_17;
        case 5021:
          result = 160;
          break;
        case 5022:
          result = 161;
          break;
        default:
          switch(a1)
          {
            case 3000:
            case 3001:
            case 3004:
            case 3007:
            case 3008:
            case 3015:
              return result;
            case 3002:
            case 3009:
              goto LABEL_16;
            case 3003:
              result = 17;
              break;
            case 3005:
            case 3014:
              goto LABEL_17;
            case 3006:
LABEL_37:
              result = 4;
              break;
            case 3010:
              result = 35;
              break;
            case 3011:
            case 3012:
              return 11;
            case 3013:
              result = 140;
              break;
            default:
              if ((unint64_t)(a1 - 4000) >= 3)
                goto LABEL_32;
              break;
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 1999)
    {
      switch(a1)
      {
        case 1000:
        case 1001:
        case 1003:
        case 1005:
        case 1015:
        case 1023:
        case 1024:
        case 1027:
        case 1050:
        case 1051:
          return result;
        case 1002:
        case 1018:
        case 1029:
          return 9;
        case 1004:
          return 115;
        case 1006:
        case 1007:
        case 1009:
        case 1017:
        case 1021:
          goto LABEL_17;
        case 1008:
          return 6;
        case 1010:
        case 1028:
          goto LABEL_9;
        case 1011:
          return 2;
        case 1012:
          return 3;
        case 1013:
          goto LABEL_37;
        case 1014:
          return 5;
        case 1016:
          return 21;
        case 1019:
          return 24;
        case 1020:
          return 27;
        case 1022:
          return 14;
        case 1025:
          return 130;
        case 1026:
          return 131;
        case 1030:
        case 1031:
        case 1032:
        case 1033:
        case 1034:
        case 1035:
        case 1036:
        case 1037:
        case 1038:
        case 1039:
        case 1040:
        case 1041:
        case 1042:
        case 1043:
        case 1044:
        case 1045:
        case 1046:
        case 1047:
        case 1048:
        case 1049:
          goto LABEL_32;
        default:
          if (!a1)
            return result;
          if (a1 == 1)
            goto LABEL_30;
          goto LABEL_32;
      }
    }
    switch(a1)
    {
      case 2000:
      case 2001:
      case 2010:
      case 2021:
      case 2027:
      case 2028:
      case 2032:
      case 2033:
      case 2034:
      case 2039:
      case 2041:
      case 2043:
      case 2044:
        goto LABEL_21;
      case 2002:
      case 2009:
      case 2022:
      case 2030:
      case 2031:
        return 6;
      case 2003:
        return 11;
      case 2004:
      case 2017:
      case 2037:
        return 14;
      case 2005:
      case 2013:
      case 2014:
      case 2053:
      case 2054:
        return result;
      case 2006:
      case 2015:
      case 2016:
      case 2018:
      case 2019:
      case 2020:
      case 2049:
        goto LABEL_17;
      case 2007:
      case 2051:
      case 2057:
        result = 10;
        break;
      case 2008:
      case 2061:
      case 2062:
      case 2063:
        goto LABEL_22;
      case 2011:
      case 2012:
      case 2047:
      case 2060:
        return 9;
      case 2023:
      case 2052:
        return 27;
      case 2024:
      case 2055:
        result = 22;
        break;
      case 2025:
        result = 31;
        break;
      case 2026:
        return 21;
      case 2029:
        result = 23;
        break;
      case 2035:
      case 2038:
        result = 25;
        break;
      case 2036:
      case 2056:
        result = 26;
        break;
      case 2040:
        result = 34;
        break;
      case 2042:
        result = 28;
        break;
      case 2045:
        result = 29;
        break;
      case 2046:
        result = 30;
        break;
      case 2048:
        result = 32;
        break;
      case 2050:
        result = 100;
        break;
      default:
        goto LABEL_32;
    }
  }
  return result;
}

void sub_18A5EB9E0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  const char *v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  id v13;

  if (a4)
  {
    v13 = a3;
    objc_msgSend_setObject_forKey_(a1, v6, a4, (uint64_t)v13);
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C99E38];
    v8 = a3;
    objc_msgSend_null(v7, v9, v10, v11);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(a1, v12, (uint64_t)v13, (uint64_t)v8);

  }
}

id CKGetGlobalQueue(uint64_t a1)
{
  id *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (qword_1ECD97030 != -1)
    dispatch_once(&qword_1ECD97030, &unk_1E1F62030);
  v2 = (id *)&qword_1ECD97048;
  v3 = &qword_1ECD97038;
  v4 = &qword_1ECD97040;
  v5 = &qword_1ECD97050;
  if (a1 <= 16)
    v5 = &qword_1ECD97058;
  if (a1 <= 24)
    v4 = v5;
  if (a1 <= 32)
    v3 = v4;
  if (a1 != -1)
    v2 = (id *)v3;
  return *v2;
}

uint64_t CKCurrentProcessLinkCheck92e3e8f8ec1a906754afb22d87eb36301b4f6760()
{
  if (qword_1ECD97078 != -1)
    dispatch_once(&qword_1ECD97078, &unk_1E1F620F0);
  return byte_1ECD96F94;
}

uint64_t sub_18A5EBC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDescriptionWithExpansion_, 0, a4);
}

__CFString *CKStringForQOS(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __CFString *v4;

  if (a1 <= 16)
  {
    if (a1 == -1)
      return CFSTR("Default");
    if (a1 == 9)
      return CFSTR("Background");
    goto LABEL_14;
  }
  if (a1 == 17)
    return CFSTR("Utility");
  if (a1 == 33)
    return CFSTR("UserInteractive");
  if (a1 != 25)
  {
LABEL_14:
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Unknown (%ld)"), a4, a1);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    return v4;
  }
  v4 = CFSTR("UserInitiated");
  return v4;
}

uint64_t CKValueIsAcceptablePredicateClass(void *a1)
{
  id v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  const char *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  CKAcceptablePredicateValueClasses();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v9, (uint64_t)v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v4 = 1;
          goto LABEL_11;
        }
      }
      v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v7, (uint64_t)&v9, (uint64_t)v13, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_11:

  return v4;
}

id CKAcceptablePredicateValueClasses()
{
  if (qword_1ECD96FF8 != -1)
    dispatch_once(&qword_1ECD96FF8, &unk_1E1F61F70);
  return (id)qword_1ECD96FF0;
}

BOOL sub_18A5EC658(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  int isEqualToString;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend_domain(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v5, v6, *MEMORY[0x1E0CB28A8], v7);

  return isEqualToString && ((objc_msgSend_code(a1, v9, v10, v11) - 4097) & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

const __CFString *CKStringFromAccountStatus(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("Unknown status");
  else
    return off_1E1F61450[a1];
}

const __CFString *CKTernaryDescription(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Not Set");
  if (a1 == 1)
    v1 = CFSTR("Yes");
  if (a1)
    return v1;
  else
    return CFSTR("No");
}

__CFString *CKStringFromDeviceToDeviceEncryptionStatus(uint64_t a1)
{
  char v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  __CFString *v10;

  if (a1)
  {
    v1 = a1;
    v2 = (void *)objc_opt_new();
    v5 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend_addObject_(v2, v3, (uint64_t)CFSTR("account"), v4);
    if ((v1 & 2) != 0)
      objc_msgSend_addObject_(v5, v3, (uint64_t)CFSTR("device"), v4);
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_componentsJoinedByString_(v5, v3, (uint64_t)CFSTR("|"), v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v6, v8, (uint64_t)CFSTR("(%@)"), v9, v7);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = CFSTR("(none)");
  }
  return v10;
}

id CKAppIdentifierFromTeamAppTuple(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;

  v3 = a1;
  v6 = a2;
  if (qword_1ECD97028 != -1)
    dispatch_once(&qword_1ECD97028, &unk_1E1F62010);
  if (!objc_msgSend_hasPrefix_(v3, v4, (uint64_t)CFSTR("com.apple."), v5))
  {
    v11 = (void *)qword_1ECD97020;
    v12 = objc_msgSend_length(v3, v7, v8, v9);
    objc_msgSend_matchesInString_options_range_(v11, v13, (uint64_t)v3, 4, 0, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v14, v15, v16, v17) == 1)
    {
      objc_msgSend_objectAtIndex_(v14, v18, 0, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_numberOfRanges(v20, v21, v22, v23) == 2)
      {
        v26 = objc_msgSend_rangeAtIndex_(v20, v24, 1, v25);
        objc_msgSend_substringWithRange_(v3, v27, v26, (uint64_t)v27);
        v10 = (id)objc_claimAutoreleasedReturnValue();

LABEL_10:
        goto LABEL_11;
      }

    }
    CKWarnForInvalidApplicationIdentifier(v3, v6);
    v10 = 0;
    goto LABEL_10;
  }
  v10 = v3;
LABEL_11:

  return v10;
}

const __CFString *CKDatabaseScopeString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("INVALID_SCOPE");
  else
    return off_1E1F64FF8[a1];
}

id CKBuildVersion()
{
  return sub_18A5C7BE4(CFSTR("BuildVersion"));
}

void sub_18A5ECA88(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int isMemberOfClass;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id *v81;
  id *v82;
  id v83;
  id v84;
  _QWORD v85[2];
  void (*v86)(uint64_t, void *, void *);
  void *v87;
  id v88;
  id v89;
  char v90;
  _QWORD aBlock[4];
  id v92;
  id v93;
  id v94;
  id v95[2];
  char v96;
  id location;
  _QWORD v98[4];
  id v99;
  _BYTE buf[24];
  void *v101;
  id *v102;
  _QWORD *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v83 = a4;
  v84 = a5;
  v11 = a6;
  if (a1)
  {
    objc_initWeak(&location, a1);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_18A6D4E7C;
    aBlock[3] = &unk_1E1F60828;
    v81 = v95;
    objc_copyWeak(v95, &location);
    v95[1] = a3;
    v92 = v83;
    v96 = a2;
    v93 = v84;
    v12 = v11;
    v94 = v12;
    v13 = _Block_copy(aBlock);
    v85[0] = MEMORY[0x1E0C809B0];
    v85[1] = 3221225472;
    v86 = sub_18A6D5190;
    v87 = &unk_1E1F60850;
    v90 = a2;
    v88 = v12;
    v14 = v13;
    v89 = v14;
    v15 = v85;
    v16 = objc_opt_class();
    isMemberOfClass = objc_msgSend_isMemberOfClass_(a1, v17, v16, v18);
    if (__sTestOverridesAvailable)
      v23 = isMemberOfClass;
    else
      v23 = 0;
    if (v23 == 1 && byte_1EDF75458)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v20, v21, v22, v95);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v24, v25, (uint64_t)sel__getContainerScopedDaemonProxyCreatorSynchronous_completionHandler_, (uint64_t)a1, CFSTR("CKContainer.m"), 731, CFSTR("In a testing process, some silly code decided to xpc from a non-test CKContainer"));

    }
    objc_msgSend_personaIdentifier(a1, v20, v21, v22, v81);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_currentPersona(v30, v31, v32, v33);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26)
    {
      objc_msgSend_personaIdentifier(a1, v34, v35, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_generateAndRestorePersonaContextWithPersonaUniqueString_(v37, v39, (uint64_t)v38, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v42 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        v43 = v42;
        objc_msgSend_personaIdentifier(a1, v44, v45, v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v47;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = a1;
        *(_WORD *)&buf[22] = 2114;
        v101 = v41;
        _os_log_impl(&dword_18A5C5000, v43, OS_LOG_TYPE_INFO, "Adopting persona identifier %@ associated with the container %{public}@. Error: %{public}@", buf, 0x20u);

      }
    }
    else
    {

      if (objc_msgSend_isDataSeparatedPersona(v37, v48, v49, v50))
      {
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v51 = (void *)ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          v76 = v51;
          objc_msgSend_userPersonaUniqueString(v37, v77, v78, v79);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v80;
          _os_log_error_impl(&dword_18A5C5000, v76, OS_LOG_TYPE_ERROR, "No effective persona associated with the container %{public}@ but adopter is currently on one: %@.", buf, 0x16u);

        }
      }
      v41 = v37;
    }

    v52 = a1;
    objc_sync_enter(v52);
    if (!v52[27])
    {
      objc_initWeak((id *)buf, v52);
      objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v53, v54, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v98[0] = MEMORY[0x1E0C809B0];
      v98[1] = 3221225472;
      v98[2] = sub_18A6D522C;
      v98[3] = &unk_1E1F60878;
      objc_copyWeak(&v99, (id *)buf);
      objc_msgSend_addObserverForName_object_queue_usingBlock_(v56, v57, (uint64_t)CFSTR("CKXPCConnectionInterrupted"), 0, 0, v98);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_storeStrong(v52 + 27, v58);

      objc_destroyWeak(&v99);
      objc_destroyWeak((id *)buf);
    }
    objc_sync_exit(v52);

    objc_msgSend_lock(v52[30], v59, v60, v61);
    if ((*((_BYTE *)v52 + 57) & 1) != 0)
      v65 = v52[26];
    else
      v65 = 0;
    objc_msgSend_unlock(v52[30], v62, v63, v64);
    if (v65)
    {
      v86((uint64_t)v15, v65, 0);
    }
    else
    {
      v66 = sub_18A5E5880([CKContainerCallbackProxy alloc], (uint64_t)v52);
      objc_msgSend_connection(v52, v67, v68, v69);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setupInfo(v52, v71, v72, v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_18A6D5314;
      v101 = &unk_1E1F608A0;
      v102 = v52;
      v103 = v15;
      objc_msgSend_getContainerScopedDaemonProxyCreatorForContainerSetupInfo_exportedProxy_synchronous_completionHandler_(v70, v75, (uint64_t)v74, (uint64_t)v66, a2, buf);

    }
    objc_destroyWeak(v82);
    objc_destroyWeak(&location);
  }

}

void sub_18A5ED05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  id *v30;
  uint64_t v31;

  objc_destroyWeak(v30);
  objc_destroyWeak((id *)(v31 - 176));
  objc_sync_exit(v29);
  objc_destroyWeak(location);
  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

id sub_18A5ED0B4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  id v42;

  objc_msgSend_userInfo(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x1E0CB3388];
  objc_msgSend_objectForKeyedSubscript_(v5, v7, *MEMORY[0x1E0CB3388], v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    goto LABEL_10;
  v13 = 0;
  do
  {
    objc_msgSend_domain(v9, v10, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v14, v15, (uint64_t)CFSTR("CKInternalErrorDomain"), v16))
    {
      CKTopLevelUnderlyingErrorCodes();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)MEMORY[0x1E0CB37E8];
      v22 = objc_msgSend_code(v9, v19, v20, v21);
      objc_msgSend_numberWithInteger_(v18, v23, v22, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend_containsObject_(v17, v26, (uint64_t)v25, v27);

      if (!v28)
        goto LABEL_7;
      v14 = v13;
      v13 = v9;
    }

LABEL_7:
    objc_msgSend_userInfo(v9, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v32, v33, v6, v34);
    v35 = objc_claimAutoreleasedReturnValue();

    v9 = (void *)v35;
  }
  while (v35);
  if (!v13)
  {
LABEL_10:
    v42 = a1;
    return v42;
  }
  v36 = objc_msgSend_code(v13, v10, v11, v12);
  objc_msgSend_userInfo(v13, v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_error_path_URL_description_(CKPrettyError, v41, (uint64_t)CFSTR("CKInternalErrorDomain"), v36, v40, a1, 0, 0, 0);
  v42 = (id)objc_claimAutoreleasedReturnValue();

  return v42;
}

id sub_18A5ED250(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  int isEqualToString;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_domain(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v5, v6, (uint64_t)CFSTR("CKInternalErrorDomain"), v7);

  if (isEqualToString && objc_msgSend_code(a1, v9, v10, v11) == 2056)
  {
    v15 = CFSTR("CKUserDidResetEncryptedData");
    v16[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v12, (uint64_t)v16, (uint64_t)&v15, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }
  return v13;
}

uint64_t CKSDKVersion()
{
  if (qword_1ECD970A0 != -1)
    dispatch_once(&qword_1ECD970A0, &unk_1E1F62190);
  return dword_1ECD96F9C;
}

id CKProductVersion()
{
  return sub_18A5C7BE4(CFSTR("ProductVersion"));
}

BOOL CKOperationExecutionStateTransitionToExecuting(void *a1, int *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend_willChangeValueForKey_(v3, v4, (uint64_t)CFSTR("isExecuting"), v5);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD97100);
  v6 = *a2;
  if (*a2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD97100);
    objc_msgSend_didChangeValueForKey_(v3, v7, (uint64_t)CFSTR("isExecuting"), v8);
  }
  else
  {
    *a2 = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD97100);
    objc_msgSend_didChangeValueForKey_(v3, v9, (uint64_t)CFSTR("isExecuting"), v10);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v11 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v13 = 138543362;
      v14 = v3;
      _os_log_debug_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_DEBUG, "Operation was marked as executing: %{public}@", (uint8_t *)&v13, 0xCu);
    }
  }

  return v6 == 0;
}

BOOL CKOperationExecutionStateTransitionToFinished(void *a1, int *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend_willChangeValueForKey_(v3, v4, (uint64_t)CFSTR("isExecuting"), v5);
  objc_msgSend_willChangeValueForKey_(v3, v6, (uint64_t)CFSTR("isFinished"), v7);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD97100);
  v8 = *a2;
  if (*a2 == 2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD97100);
    objc_msgSend_didChangeValueForKey_(v3, v14, (uint64_t)CFSTR("isExecuting"), v15);
    objc_msgSend_didChangeValueForKey_(v3, v16, (uint64_t)CFSTR("isFinished"), v17);
  }
  else
  {
    *a2 = 2;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD97100);
    objc_msgSend_didChangeValueForKey_(v3, v9, (uint64_t)CFSTR("isExecuting"), v10);
    objc_msgSend_didChangeValueForKey_(v3, v11, (uint64_t)CFSTR("isFinished"), v12);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v13 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v19 = 138543362;
      v20 = v3;
      _os_log_debug_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_DEBUG, "Operation was marked as finished: %{public}@", (uint8_t *)&v19, 0xCu);
    }
  }

  return v8 != 2;
}

pthread_mutex_t *_CKSQLDBSerializerUnlock(pthread_mutex_t **a1)
{
  pthread_mutex_t *result;

  result = *a1;
  if (result)
  {
    result[1].__sig = 0;
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  }
  return result;
}

pthread_mutex_t *_CKSQLDBSerializerLock(uint64_t a1)
{
  pthread_mutex_t *v1;
  _opaque_pthread_t *v2;

  v1 = (pthread_mutex_t *)a1;
  v2 = *(_opaque_pthread_t **)(a1 + 64);
  if (v2 == pthread_self())
    return 0;
  pthread_mutex_lock(v1);
  v1[1].__sig = (uint64_t)pthread_self();
  return v1;
}

void CKValidateRecordArrayValue(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  Protocol *v8;
  objc_class *i;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  CKException *v17;
  objc_class *v18;
  void *v19;
  void *v20;
  const char *v21;
  id v22;
  CKException *v23;
  objc_class *v24;
  const char *v25;
  void *v26;
  CKException *v27;
  const char *v28;
  void *v29;
  CKException *v30;
  const char *v31;
  CKException *v32;
  objc_class *v33;
  const char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    objc_msgSend_objectAtIndexedSubscript_(v1, v5, 0, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_getProtocol("CKRecordValue");
    v8 = (Protocol *)objc_claimAutoreleasedReturnValue();
    for (i = (objc_class *)objc_opt_class(); ; i = class_getSuperclass(i))
    {
      if (i == (objc_class *)objc_opt_class())
        goto LABEL_22;
      if (class_conformsToProtocol(i, v8))
        break;
    }
    if (i)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v27 = [CKException alloc];
        v29 = (void *)objc_msgSend_initWithCode_format_(v27, v28, 1006, (uint64_t)CFSTR("CKEncryptedData is not allowed as CKRecord value: %@. Use -[CKRecord encryptedValues] for storing encrypted values on records"), v1);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v10 = v1;
            v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v35, (uint64_t)v39, 16);
            if (!v12)
              goto LABEL_18;
            v13 = v12;
            v14 = *(_QWORD *)v36;
            while (1)
            {
              v15 = 0;
              do
              {
                if (*(_QWORD *)v36 != v14)
                  objc_enumerationMutation(v10);
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  v17 = [CKException alloc];
                  v18 = (objc_class *)objc_opt_class();
                  NSStringFromClass(v18);
                  v19 = (void *)objc_claimAutoreleasedReturnValue();
                  NSStringFromClass(i);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = (id)objc_msgSend_initWithCode_format_(v17, v21, 1006, (uint64_t)CFSTR("Array members can't be mixed class: %@ (%@ != %@)"), v10, v19, v20);

                  goto LABEL_21;
                }
                ++v15;
              }
              while (v13 != v15);
              v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v16, (uint64_t)&v35, (uint64_t)v39, 16);
              if (!v13)
              {
LABEL_18:

                goto LABEL_19;
              }
            }
          }
          v32 = [CKException alloc];
          v33 = (objc_class *)objc_opt_class();
          NSStringFromClass(v33);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (void *)objc_msgSend_initWithCode_format_(v32, v34, 1006, (uint64_t)CFSTR("%@ is not allowed in an array"), v19);
LABEL_23:
          v22 = v26;
LABEL_21:

          objc_exception_throw(v22);
        }
        v30 = [CKException alloc];
        v29 = (void *)objc_msgSend_initWithCode_format_(v30, v31, 1006, (uint64_t)CFSTR("Nested arrays are not allowed as CKRecord value: %@"), v1);
      }
      objc_exception_throw(v29);
    }
LABEL_22:
    v23 = [CKException alloc];
    v24 = (objc_class *)objc_opt_class();
    NSStringFromClass(v24);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend_initWithCode_format_(v23, v25, 1006, (uint64_t)CFSTR("Array members must conform to CKRecordValue: %@ (%@)"), v1, v19);
    goto LABEL_23;
  }
LABEL_19:

}

id sub_18A5ED9BC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v36;
  objc_class *v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  objc_class *v44;
  const char *v45;
  uint64_t v46;
  CKException *v47;
  const char *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0C99DE8];
  v6 = objc_msgSend_count(a1, a2, a3, a4);
  objc_msgSend_arrayWithCapacity_(v5, v7, v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v10 = a1;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v50, (uint64_t)v54, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v51;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v51 != v14)
          objc_enumerationMutation(v10);
        v16 = *(id *)(*((_QWORD *)&v50 + 1) + 8 * v15);
        if (objc_msgSend_conformsToProtocol_(v16, v17, (uint64_t)&unk_1EDFA0B08, v18))
        {
          objc_msgSend_CKDeepCopy(v16, v19, v20, v21);
          v22 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (objc_msgSend_conformsToProtocol_(v16, v19, (uint64_t)&unk_1EDF7DED8, v21))
          {
            v36 = (void *)MEMORY[0x1E0CB3940];
            v37 = (objc_class *)objc_opt_class();
            NSStringFromClass(v37);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            NSStringFromProtocol((Protocol *)&unk_1EDFA0B08);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_stringWithFormat_(v36, v40, (uint64_t)CFSTR("Collection with class %@ does not support %@"), v41, v38, v39, (_QWORD)v50);
            v42 = objc_claimAutoreleasedReturnValue();

            goto LABEL_16;
          }
          if (!objc_msgSend_conformsToProtocol_(v16, v23, (uint64_t)&unk_1EDF77860, v24))
          {
            v43 = (void *)MEMORY[0x1E0CB3940];
            v44 = (objc_class *)objc_opt_class();
            NSStringFromClass(v44);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_stringWithFormat_(v43, v45, (uint64_t)CFSTR("Object with class %@ cannot be copied"), v46, v38);
            v42 = objc_claimAutoreleasedReturnValue();
LABEL_16:

            v47 = [CKException alloc];
            v49 = (id)objc_msgSend_initWithName_format_(v47, v48, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("%@"), v42);
            objc_exception_throw(v49);
          }
          v22 = objc_msgSend_copyWithZone_(v16, v25, 0, v26);
        }
        v27 = (void *)v22;

        objc_msgSend_addObject_(v9, v28, (uint64_t)v27, v29);
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v30, (uint64_t)&v50, (uint64_t)v54, 16);
    }
    while (v13);
  }

  v34 = (void *)objc_msgSend_copy(v9, v31, v32, v33);
  return v34;
}

uint64_t sub_18A5EDC14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18A5EDC1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

const __CFString *CKStringForDiscretionaryNetworkBehavior(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E1F62400[a1];
}

BOOL _CKUseSystemInstalledBinaries()
{
  char *v0;
  _BOOL8 v1;
  __CFString *v2;
  __CFString *v3;
  NSObject *v4;
  __CFString *v5;
  _QWORD block[4];
  __CFString *v8;

  v0 = getenv("CK_DEBUG_BINARIES");
  v1 = v0 == 0;
  v2 = CFSTR("CK_DEBUG_BINARIES is set");
  if (!v0)
    v2 = 0;
  v3 = v2;
  CKGetGlobalQueue(-1);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18A5F1088;
  block[3] = &unk_1E1F5FAA8;
  v8 = v3;
  v5 = v3;
  dispatch_async(v4, block);

  return v1;
}

id CKProductName()
{
  return sub_18A5C7BE4(CFSTR("ProductName"));
}

uint64_t CKBootTime()
{
  uint64_t result;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8[8];
  _QWORD v9[2];
  size_t v10;
  int v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = qword_1ECD96A60;
  if (!qword_1ECD96A60)
  {
    v9[0] = 0;
    v9[1] = 0;
    *(_QWORD *)v11 = 0x1500000001;
    v10 = 16;
    if (sysctl(v11, 2u, v9, &v10, 0, 0))
    {
      if (ck_log_initialization_predicate != -1)
        goto LABEL_9;
      while (1)
      {
        v1 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v8 = 0;
          _os_log_error_impl(&dword_18A5C5000, v1, OS_LOG_TYPE_ERROR, "Failed to fetch system boot time", v8, 2u);
        }
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v2, (uint64_t)CFSTR("Failed to fetch system boot time"), v3);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_UTF8String(v4, v5, v6, v7);
        _os_crash();
        __break(1u);
LABEL_9:
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
    }
    result = v9[0];
    qword_1ECD96A60 = v9[0];
  }
  return result;
}

__CFString *CKErrorChainStringFromError(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  __CFString *v8;

  CKErrorChainFromError(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  if (v1)
  {
    objc_msgSend_CKMap_(v1, v2, (uint64_t)&unk_1E1F58AF8, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_componentsJoinedByString_(v5, v6, (uint64_t)CFSTR("_"), v7);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = &stru_1E1F66ED0;
  }

  return v8;
}

id CKErrorChainFromError(void *a1)
{
  id v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v67;
  objc_class *v68;
  void *v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  id v75;
  uint8_t v76[128];
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  id v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
LABEL_10:
    v16 = 0;
    goto LABEL_34;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v15 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      v67 = v15;
      v68 = (objc_class *)objc_opt_class();
      NSStringFromClass(v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v78 = v69;
      v79 = 2112;
      v80 = v1;
      _os_log_fault_impl(&dword_18A5C5000, v67, OS_LOG_TYPE_FAULT, "Trying to get an error chain from a non-NSError (%{public}@): %@", buf, 0x16u);

    }
    goto LABEL_10;
  }
  v2 = v1;
  objc_msgSend_domain(v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v6, v7, (uint64_t)CFSTR("CKErrorDomain"), v8)
    && objc_msgSend_code(v2, v9, v10, v11) == 2)
  {

  }
  else
  {
    objc_msgSend_domain(v2, v9, v10, v11);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(v17, v18, (uint64_t)CFSTR("CKInternalErrorDomain"), v19) & 1) == 0)
    {

      goto LABEL_30;
    }
    v23 = objc_msgSend_code(v2, v20, v21, v22);

    if (v23 != 1011)
    {
LABEL_30:
      v75 = v2;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v12, (uint64_t)&v75, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_userInfo(v2, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v58, v59, *MEMORY[0x1E0CB3388], v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      CKErrorChainFromError(v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();

      if (v62)
      {
        objc_msgSend_arrayByAddingObjectsFromArray_(v16, v63, (uint64_t)v62, v64);
        v65 = objc_claimAutoreleasedReturnValue();

        v16 = (void *)v65;
      }

      goto LABEL_33;
    }
  }
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v70 = v2;
  objc_msgSend_userInfo(v2, v12, v13, v14);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v24, v25, (uint64_t)CFSTR("CKPartialErrors"), v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v71, (uint64_t)v76, 16);
  if (!v33)
  {
LABEL_25:

    v2 = v70;
    goto LABEL_30;
  }
  v37 = v33;
  v38 = *(_QWORD *)v72;
LABEL_15:
  v39 = 0;
  while (1)
  {
    if (*(_QWORD *)v72 != v38)
      objc_enumerationMutation(v31);
    v40 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * v39);
    objc_msgSend_domain(v40, v34, v35, v36);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v41, v42, (uint64_t)CFSTR("CKErrorDomain"), v43)
      && objc_msgSend_code(v40, v44, v45, v46) == 22)
    {

      goto LABEL_23;
    }
    objc_msgSend_domain(v40, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(v47, v48, (uint64_t)CFSTR("CKInternalErrorDomain"), v49) & 1) == 0)
      break;
    v53 = objc_msgSend_code(v40, v50, v51, v52);

    if (v53 != 2024)
      goto LABEL_28;
LABEL_23:
    if (v37 == ++v39)
    {
      v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v71, (uint64_t)v76, 16);
      if (v37)
        goto LABEL_15;
      goto LABEL_25;
    }
  }

LABEL_28:
  v54 = v40;
  v2 = v70;

  if (v54 == v70)
    goto LABEL_30;
  CKErrorChainFromError(v54);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v54;
LABEL_33:

LABEL_34:
  return v16;
}

uint64_t CKCurrentProcessIsDaemon()
{
  if (qword_1ECD96FC8 != -1)
    dispatch_once(&qword_1ECD96FC8, &unk_1E1F58F98);
  return byte_1ECD96F90;
}

uint64_t CKCurrentThreadQualityOfService()
{
  qos_class_t v0;

  v0 = qos_class_self();
  if ((int)v0 <= 16)
  {
    if (v0 == QOS_CLASS_BACKGROUND)
      return 9;
    return -1;
  }
  if (v0 == QOS_CLASS_USER_INTERACTIVE)
    return 33;
  if (v0 != QOS_CLASS_USER_INITIATED)
  {
    if (v0 == QOS_CLASS_UTILITY)
      return 17;
    return -1;
  }
  return 25;
}

void CKSyncEngineRecordZoneChangeBatch.init(__pendingChanges:recordProvider:)(unint64_t a1, uint64_t (*a2)(id))
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(id);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v3 = v2;
  if (a1 >> 62)
  {
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
LABEL_13:
    sub_18A5F3FE4();
    v8 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_13;
LABEL_3:
  v23 = MEMORY[0x1E0DEE9D8];
  sub_18A610060();
  if (v6 < 0)
  {
    __break(1u);
    return;
  }
  v18 = a2;
  v19 = v2;
  v7 = 0;
  v8 = v23;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v9 = (id)MEMORY[0x18D76CEB0](v7, a1);
    else
      v9 = *(id *)(a1 + 8 * v7 + 32);
    v10 = v9;
    CKSyncEnginePendingRecordZoneChange.changeStruct()((uint64_t)v9, (uint64_t)&v20);

    v11 = v20;
    v12 = v21;
    v23 = v8;
    v13 = *(_QWORD *)(v8 + 16);
    if (v13 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_18A610060();
      v8 = v23;
    }
    ++v7;
    *(_QWORD *)(v8 + 16) = v13 + 1;
    v14 = v8 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v11;
    *(_BYTE *)(v14 + 40) = v12;
  }
  while (v6 != v7);
  sub_18A5F3FE4();
  v3 = v19;
  a2 = v18;
LABEL_14:
  swift_retain();
  sub_18A641C2C(v8, a2, (uint64_t)&v20);
  v15 = v20;
  if (v20)
  {
    v16 = v21;
    v17 = v22;
    sub_18A5F3898();
    sub_18A5F3D48();
    sub_18A643124(v15, v16, v17 & 1, v3);
    sub_18A5F37A4();
    sub_18A5F460C();
    swift_release();
    sub_18A5F51F4(v15);
  }
  else
  {
    swift_release();
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
}

void CKCheckedUnsafeObjectTransfer.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v9 - v5;
  v7 = (uint64_t)v0 + *(_QWORD *)(v1 + 88);
  sub_18A5F40A4();
  sub_18A61A7C8((uint64_t)v6, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  LODWORD(v2) = sub_18A5F105C((uint64_t)v6, 1, v2);
  v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, v3);
  if ((_DWORD)v2 == 1)
  {
    v8((char *)v7, v3);
    sub_18A5F3814();
  }
  else
  {
    __break(1u);
  }
}

__CFString *CKCreateGUID()
{
  const __CFUUID *v0;
  __CFString *v1;

  v0 = CFUUIDCreate(0);
  v1 = (__CFString *)CFUUIDCreateString(0, v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

id CKProductType()
{
  return sub_18A5C7BE4(CFSTR("ProductType"));
}

BOOL CKOperationExecutionStateIsExecuting(_DWORD *a1)
{
  _BOOL8 v2;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD97100);
  v2 = *a1 == 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD97100);
  return v2;
}

BOOL CKOperationExecutionStateIsFinished(_DWORD *a1)
{
  _BOOL8 v2;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD97100);
  v2 = *a1 == 2;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD97100);
  return v2;
}

uint64_t CKTernaryFromBOOL(uint64_t result)
{
  return result;
}

BOOL CKPIDIsStillAlive(int a1)
{
  BOOL v1;
  _BYTE buffer[1024];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  buffer[0] = 0;
  if (proc_pidinfo(a1, 11, 1uLL, buffer, 1024))
    v1 = 1;
  else
    v1 = buffer[0] == 0;
  return !v1;
}

const __CFString *CKContainerEnvironmentString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("UNKNOWN ENVIRONMENT");
  if (a1 == 2)
    v1 = CFSTR("Sandbox");
  if (a1 == 1)
    return CFSTR("Production");
  else
    return v1;
}

uint64_t CKQualityOfServiceOrdering(uint64_t a1)
{
  if (a1 <= 16)
  {
    if (a1 == -1)
      return 2;
    if (a1 == 9)
      return 0;
  }
  else
  {
    switch(a1)
    {
      case 33:
        return 4;
      case 25:
        return 3;
      case 17:
        return 1;
    }
  }
  return 0xFFFFFFFFLL;
}

id CKDeviceUDID()
{
  return sub_18A5C7BE4(CFSTR("UniqueDeviceID"));
}

void sub_18A5EF6C0(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  CKException *v14;
  const char *v15;
  id v16;
  id v17;

  v17 = a2;
  v8 = a3;
  if (a1)
  {
    objc_msgSend_data(v17, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend_length(v9, v10, v11, v12);

    if (v13 >= 0x6400001)
    {
      v14 = [CKException alloc];
      v16 = (id)objc_msgSend_initWithName_format_(v14, v15, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Plaintext is too large in size for key %@"), v8);
      objc_exception_throw(v16);
    }
  }

}

uint64_t CKDPRecordFieldValueEncryptedValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  CKDPDate *v30;
  uint64_t v31;
  void *v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    v18 = v10 & 7;
    if (v17 || v18 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 3u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 128) |= 2u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_74;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v22 = 0;
            goto LABEL_76;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_76:
        *(_QWORD *)(a1 + 64) = v22;
        goto LABEL_70;
      case 4u:
        *(_BYTE *)(a1 + 128) |= 1u;
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        *(_QWORD *)(a1 + 56) = v29;
        goto LABEL_70;
      case 5u:
        v30 = objc_alloc_init(CKDPDate);
        objc_storeStrong((id *)(a1 + 80), v30);
        goto LABEL_60;
      case 6u:
        PBReaderReadString();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = *(void **)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v31;

        goto LABEL_70;
      case 7u:
        v30 = objc_alloc_init(CKDPLocationCoordinate);
        objc_storeStrong((id *)(a1 + 96), v30);
        goto LABEL_66;
      case 8u:
        v30 = objc_alloc_init(CKDPRecordReference);
        objc_storeStrong((id *)(a1 + 104), v30);
        if (!PBReaderPlaceMark() || (CKDPRecordReferenceReadFrom((uint64_t)v30, a2) & 1) == 0)
          goto LABEL_95;
        goto LABEL_68;
      case 0xAu:
        if (v18 != 2)
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          while (1)
          {
            v54 = *v3;
            v55 = *(_QWORD *)(a2 + v54);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(a2 + *v4))
              break;
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
            *(_QWORD *)(a2 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v15 = v52++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_88;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_88:
          PBRepeatedInt64Add();
          goto LABEL_70;
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          while (1)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            v39 = v38 + 1;
            if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
              break;
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_49;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
          PBRepeatedInt64Add();
        }
        goto LABEL_72;
      case 0xBu:
        if (v18 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v41 = (unint64_t *)(a2 + *v3);
            v42 = *v41;
            v43 = *(_QWORD *)(a2 + *v4);
            if (*v41 >= v43)
              break;
            v44 = *v5;
            if (*(_BYTE *)(a2 + v44))
              break;
            if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > v43)
              *(_BYTE *)(a2 + v44) = 1;
            else
              *v41 = v42 + 8;
            PBRepeatedDoubleAdd();
          }
LABEL_72:
          PBReaderRecallMark();
        }
        else
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(_QWORD *)(a2 + *v4))
            *(_QWORD *)(a2 + v58) = v59 + 8;
          else
            *(_BYTE *)(a2 + v16) = 1;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_70;
      case 0xCu:
        v30 = objc_alloc_init(CKDPDate);
        objc_msgSend_addDateListValue_((void *)a1, v45, (uint64_t)v30, v46);
LABEL_60:
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom((uint64_t)v30, a2) & 1) == 0)
          goto LABEL_95;
        goto LABEL_68;
      case 0xDu:
        PBReaderReadString();
        v30 = (CKDPDate *)objc_claimAutoreleasedReturnValue();
        if (v30)
          objc_msgSend_addStringListValue_((void *)a1, v47, (uint64_t)v30, v48);
        goto LABEL_69;
      case 0xEu:
        v30 = objc_alloc_init(CKDPLocationCoordinate);
        objc_msgSend_addLocationListValue_((void *)a1, v49, (uint64_t)v30, v50);
LABEL_66:
        if (PBReaderPlaceMark() && (CKDPLocationCoordinateReadFrom((uint64_t)v30, a2) & 1) != 0)
        {
LABEL_68:
          PBReaderRecallMark();
LABEL_69:

LABEL_70:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_95:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_70;
    }
  }
}

uint64_t CKDPDateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKQoSClassFromNSQualityOfService(uint64_t result)
{
  if (result <= 16)
  {
    if (result == 9)
      return result;
    return 0;
  }
  if (result != 33 && result != 25 && result != 17)
    return 0;
  return result;
}

unint64_t CKBoolFromCKTernary(unint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;

  if (result > 1)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, (uint64_t)"BOOL CKBoolFromCKTernary(CKTernary)", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v8, (uint64_t)v7, (uint64_t)CFSTR("CKUtils.m"), 120, CFSTR("Can't go from NotSet -> BOOL"));

    return 0;
  }
  return result;
}

void sub_18A5F0450()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  int isEqualToString;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  char v22;
  id v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  NSObject *v31;
  id v32;
  id v33;
  uint8_t buf[4];
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  NSHomeDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v0, v1, (uint64_t)CFSTR("/var/empty"), v2);

  if (isEqualToString)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_DEBUG, "Not attempting to create Caches directory for /var/empty process", buf, 2u);
    }
  }
  else
  {
    objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = 0;
    objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(v8, v9, 13, 1, 0, 0, &v33);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v33;

    objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v10, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_fileExistsAtPath_(v15, v20, (uint64_t)v19, v21);

    if ((v22 & 1) != 0)
    {
      v23 = v11;
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v24 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18A5C5000, v24, OS_LOG_TYPE_INFO, "Warn: Caches directory does not exist, creating one", buf, 2u);
      }
      objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = v11;
      objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(v28, v29, 13, 1, 0, 1, &v32);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v32;

      if (!v30)
      {
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v31 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v35 = v23;
          _os_log_error_impl(&dword_18A5C5000, v31, OS_LOG_TYPE_ERROR, "Couldn't create caches directory, %@", buf, 0xCu);
        }
      }

    }
  }
}

id CKGetRealPath(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __CFString *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const __CFString *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  void *v29;
  size_t v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  NSObject *v39;
  int v40;
  int v41;
  void *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v5 = v1;
  if (v1)
  {
    v6 = &stru_1E1F66ED0;
    v7 = v1;
    while (1)
    {
      if (!objc_msgSend_length(v7, v2, v3, v4))
      {
        v22 = v6;
        goto LABEL_10;
      }
      v11 = (const char *)objc_msgSend_fileSystemRepresentation(v7, v8, v9, v10);
      v12 = realpath_DARWIN_EXTSN(v11, 0);
      if (v12)
      {
        v28 = v12;
        objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v13, v14, v15);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = strlen(v28);
        objc_msgSend_stringWithFileSystemRepresentation_length_(v29, v31, (uint64_t)v28, v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_stringByAppendingPathComponent_(v32, v33, (uint64_t)v6, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();

        free(v28);
        v36 = v35;
        v7 = v36;
        goto LABEL_17;
      }
      if (*__error() != 2)
        break;
      objc_msgSend_lastPathComponent(v7, v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByAppendingPathComponent_(v19, v20, (uint64_t)v6, v21);
      v22 = (const __CFString *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_stringByDeletingLastPathComponent(v7, v23, v24, v25);
      v26 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v26;
      v6 = (__CFString *)v22;
      if (!v26)
        goto LABEL_10;
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v37 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v39 = v37;
      v40 = *__error();
      v41 = 138543618;
      v42 = v7;
      v43 = 1024;
      v44 = v40;
      _os_log_error_impl(&dword_18A5C5000, v39, OS_LOG_TYPE_ERROR, "realpath failed at %{public}@: %{errno}d", (uint8_t *)&v41, 0x12u);

    }
    v36 = v5;
LABEL_17:
    v27 = v36;
  }
  else
  {
    v7 = 0;
    v22 = &stru_1E1F66ED0;
LABEL_10:
    v27 = v5;
    v6 = (__CFString *)v22;
  }

  return v27;
}

uint64_t CKCreateDirectoryAtPathWithAttributes(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  char v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  char isEqualToString;
  const char *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  id v57;
  id v58;
  uint64_t v59;
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v6, v11, CKDirectoryEmptyAfterReboot, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend_attributesOfItemAtPath_error_(v10, v14, (uint64_t)v5, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v15, v16, *MEMORY[0x1E0CB2A38], v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v19 = (void *)MEMORY[0x1E0C99D68];
      v20 = CKBootTime();
      objc_msgSend_dateWithTimeIntervalSince1970_(v19, v21, v22, v23, (double)v20);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_earlierDate_(v18, v25, (uint64_t)v24, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27 == v18)
        objc_msgSend_removeItemAtPath_error_(v10, v28, (uint64_t)v5, 0);
    }

  }
  v58 = 0;
  v29 = objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v10, v14, (uint64_t)v5, 1, v6, &v58);
  v30 = v58;
  v34 = v30;
  if ((v29 & 1) != 0)
    goto LABEL_9;
  objc_msgSend_domain(v30, v31, v32, v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_isEqualToString_(v35, v36, *MEMORY[0x1E0CB28A8], v37))
  {

LABEL_13:
    if (a3)
    {
      v34 = objc_retainAutorelease(v34);
      v55 = 0;
      *a3 = v34;
    }
    else
    {
      v55 = 0;
    }
    goto LABEL_16;
  }
  v41 = objc_msgSend_code(v34, v38, v39, v40);

  if (v41 != 516)
    goto LABEL_13;
LABEL_9:
  v57 = v34;
  objc_msgSend_attributesOfItemAtPath_error_(v10, v31, (uint64_t)v5, (uint64_t)&v57);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = v57;

  v44 = *MEMORY[0x1E0CB2AD8];
  objc_msgSend_objectForKeyedSubscript_(v42, v45, *MEMORY[0x1E0CB2AD8], v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = *MEMORY[0x1E0CB2AC0];
  isEqualToString = objc_msgSend_isEqualToString_(v47, v49, *MEMORY[0x1E0CB2AC0], v50);

  if ((isEqualToString & 1) == 0)
  {
    v59 = v44;
    v60[0] = v48;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v52, (uint64_t)v60, (uint64_t)&v59, 1);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAttributes_ofItemAtPath_error_(v10, v54, (uint64_t)v53, (uint64_t)v5, 0);

  }
  v55 = 1;
  v34 = v43;
LABEL_16:

  return v55;
}

uint64_t CKCreateDirectoryAtPath(void *a1, _QWORD *a2)
{
  return CKCreateDirectoryAtPathWithAttributes(a1, 0, a2);
}

void CKRecord.subscript.getter()
{
  uint64_t v0;
  id v1;

  v0 = MEMORY[0x18D76C7CC]();
  v1 = sub_18A5F38A0(v0, sel_objectForKey_);
  sub_18A5F3890();
  sub_18A5F379C();
}

const __CFString *CKStringForDuetPreClearedMode(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E1F62448[a1];
}

const __CFString *CKStringFromWalrusStatus(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E1F5F6A0[a1];
}

uint64_t CKLog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1ECD96788, (uint64_t)qword_1ECD96770, a1);
}

uint64_t CKCheckedUnsafeObjectTransfer.__deallocating_deinit()
{
  return sub_18A5F5164(CKCheckedUnsafeObjectTransfer.deinit);
}

void ck_log_facilities_setup_logging_facilities()
{
  BOOL v0;
  const char *v1;
  os_log_t v2;
  void *v3;
  os_log_t v4;
  void *v5;
  os_log_t v6;
  void *v7;
  os_log_t v8;
  void *v9;
  os_log_t v10;
  void *v11;
  os_log_t v12;
  void *v13;
  os_log_t v14;
  void *v15;
  os_log_t v16;
  void *v17;
  os_log_t v18;
  void *v19;
  os_log_t v20;
  void *v21;
  os_log_t v22;
  void *v23;
  os_log_t v24;
  void *v25;
  os_log_t v26;
  void *v27;
  os_log_t v28;
  void *v29;
  os_log_t v30;
  void *v31;
  os_log_t v32;
  void *v33;
  os_log_t v34;
  void *v35;
  os_log_t v36;
  void *v37;

  if (_sCKUseSystemInstalledBinariesPredicate != -1)
    dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1E1F605D0);
  if (__sTestOverridesAvailable)
    v0 = 1;
  else
    v0 = _sCKUseSystemInstalledBinaries == 0;
  if (v0)
    v1 = "com.apple.cloudkit.test";
  else
    v1 = "com.apple.cloudkit";
  if ((const char *)qword_1ECD97130 != v1)
  {
    qword_1ECD97130 = (uint64_t)v1;
    v2 = os_log_create(v1, "CK");
    v3 = (void *)ck_log_facility_ck;
    ck_log_facility_ck = (uint64_t)v2;

    v4 = os_log_create(v1, "PCS");
    v5 = (void *)ck_log_facility_pcs;
    ck_log_facility_pcs = (uint64_t)v4;

    v6 = os_log_create(v1, "SQL");
    v7 = (void *)ck_log_facility_sql;
    ck_log_facility_sql = (uint64_t)v6;

    v8 = os_log_create(v1, "STAT");
    v9 = (void *)ck_log_facility_status;
    ck_log_facility_status = (uint64_t)v8;

    v10 = os_log_create(v1, "Request");
    v11 = (void *)ck_log_facility_request;
    ck_log_facility_request = (uint64_t)v10;

    v12 = os_log_create(v1, "MMCS");
    v13 = (void *)ck_log_facility_mmcs;
    ck_log_facility_mmcs = (uint64_t)v12;

    v14 = os_log_create(v1, "Asset");
    v15 = (void *)ck_log_facility_asset;
    ck_log_facility_asset = (uint64_t)v14;

    v16 = os_log_create(v1, "OP");
    v17 = (void *)ck_log_facility_op;
    ck_log_facility_op = (uint64_t)v16;

    v18 = os_log_create(v1, "TrafficBinary");
    v19 = (void *)ck_log_facility_traffic_binary;
    ck_log_facility_traffic_binary = (uint64_t)v18;

    v20 = os_log_create(v1, "LogStats");
    v21 = (void *)ck_log_facility_logstats;
    ck_log_facility_logstats = (uint64_t)v20;

    v22 = os_log_create(v1, "Scheduler");
    v23 = (void *)ck_log_facility_scheduler;
    ck_log_facility_scheduler = (uint64_t)v22;

    v24 = os_log_create(v1, "NotificationListener");
    v25 = (void *)ck_log_facility_notification_listener;
    ck_log_facility_notification_listener = (uint64_t)v24;

    v26 = os_log_create(v1, "Engine");
    v27 = (void *)ck_log_facility_engine;
    ck_log_facility_engine = (uint64_t)v26;

    v28 = os_log_create(v1, "DataRepair");
    v29 = (void *)ck_log_facility_data_repair;
    ck_log_facility_data_repair = (uint64_t)v28;

    v30 = os_log_create(v1, "DistributedSync");
    v31 = (void *)ck_log_facility_distributed_sync;
    ck_log_facility_distributed_sync = (uint64_t)v30;

    v32 = os_log_create(v1, "DiscretionaryDaemon");
    v33 = (void *)ck_log_facility_ckdd;
    ck_log_facility_ckdd = (uint64_t)v32;

    v34 = os_log_create(v1, "MockServer");
    v35 = (void *)ck_log_facility_mock;
    ck_log_facility_mock = (uint64_t)v34;

    v36 = os_log_create(v1, "TrafficCompressed");
    v37 = (void *)ck_log_facility_traffic_compressed;
    ck_log_facility_traffic_compressed = (uint64_t)v36;

  }
}

uint64_t sub_18A5F1010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_18A5F101C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D76E7AC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_18A5F105C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

BOOL sub_18A5F1068()
{
  _BOOL8 result;

  result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

void sub_18A5F1088(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEFAULT, "Not using system installed binaries: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v5) = 0;
      _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Using system installed binaries", (uint8_t *)&v5, 2u);
    }
  }
}

void sub_18A5F11C8()
{
  id v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  CKException *v23;
  const char *v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _QWORD v31[2];
  _QWORD v32[6];

  v32[5] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0C99E08]);
  v3 = objc_msgSend_initWithCapacity_(v0, v1, 0, v2);
  v4 = (void *)qword_1ECD96B48;
  qword_1ECD96B48 = v3;

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v32[0] = CFSTR("BuildVersion");
  v32[1] = CFSTR("ProductName");
  v32[2] = CFSTR("ProductType");
  v32[3] = CFSTR("ProductVersion");
  v32[4] = CFSTR("DeviceClass");
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v5, (uint64_t)v32, 5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  if (!byte_1EDF6A0E0 || byte_1EDF75458)
  {
    v31[0] = CFSTR("UniqueDeviceID");
    v31[1] = CFSTR("SerialNumber");
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v7, (uint64_t)v31, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayByAddingObjectsFromArray_(v8, v11, (uint64_t)v10, v12);
    v9 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = v6;
  }

  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v13, (uint64_t)&v26, (uint64_t)v30, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v27;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v27 != v16)
          objc_enumerationMutation(v9);
        v18 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v17);
        v19 = MGCopyAnswer();
        if (!v19)
        {
          v23 = [CKException alloc];
          v25 = (id)objc_msgSend_initWithCode_format_(v23, v24, 1000, (uint64_t)CFSTR("Error getting %@ from MobileGestalt"), v18);
          objc_exception_throw(v25);
        }
        v21 = (void *)v19;
        objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1ECD96B48, v20, v19, v18);

        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v22, (uint64_t)&v26, (uint64_t)v30, 16);
    }
    while (v15);
  }

}

uint64_t sub_18A5F13DC()
{
  uint64_t result;

  result = dyld_get_program_sdk_version();
  dword_1ECD96F9C = result;
  return result;
}

void sub_18A5F13F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E1FC4250, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96C30;
  qword_1ECD96C30 = v4;

}

void sub_18A5F142C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4);
  v28 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleIdentifier(v28, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v7, v8, (uint64_t)CFSTR("com.apple."), v9))
  {
    byte_1ECD96F99 = 1;
  }
  else
  {
    objc_msgSend_sharedManager(CKProcessScopedStateManager, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_untrustedEntitlements(v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_hasSPIEntitlement(v17, v18, v19, v20) & 1) != 0)
    {
      byte_1ECD96F99 = 1;
    }
    else
    {
      objc_msgSend_bundleRecordForCurrentProcess(MEMORY[0x1E0CA5898], v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      byte_1ECD96F99 = objc_msgSend_developerType(v24, v25, v26, v27) == 1;

    }
  }

}

void sub_18A5F1508(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  BOOL v16;
  id v17;

  if (byte_1EDF6A0E0)
  {
    objc_msgSend_sharedManager(MEMORY[0x1E0DC5EE8], a2, a3, a4);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isSharedIPad(v17, v4, v5, v6) & 1) != 0)
    {
      objc_msgSend_currentUser(v17, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend_uid(v10, v11, v12, v13);
      byte_1ECD96F91 = v14 != geteuid();

    }
    else
    {
      byte_1ECD96F91 = 0;
    }

  }
  else
  {
    v15 = getenv("CK_IN_SYNC_BUBBLE");
    if (v15)
      v16 = atoi(v15) == 1;
    else
      v16 = 0;
    byte_1ECD96F91 = v16;
  }
}

void sub_18A5F15CC()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_queue_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  dispatch_queue_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  dispatch_queue_t v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E0C80D50], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_initially_inactive(v0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("com.apple.cloudkit.global.user_interactive", attr);
  v2 = (void *)qword_1ECD97038;
  qword_1ECD97038 = (uint64_t)v1;

  v3 = qword_1ECD97038;
  dispatch_get_global_queue(33, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v3, v4);

  v5 = dispatch_queue_create("com.apple.cloudkit.global.user_initiated", attr);
  v6 = (void *)qword_1ECD97040;
  qword_1ECD97040 = (uint64_t)v5;

  v7 = qword_1ECD97040;
  dispatch_get_global_queue(25, 0);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v7, v8);

  v9 = dispatch_queue_create("com.apple.cloudkit.default", attr);
  v10 = (void *)qword_1ECD97048;
  qword_1ECD97048 = (uint64_t)v9;

  v11 = qword_1ECD97048;
  dispatch_get_global_queue(21, 0);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v11, v12);

  v13 = dispatch_queue_create("com.apple.cloudkit.global.utility", attr);
  v14 = (void *)qword_1ECD97050;
  qword_1ECD97050 = (uint64_t)v13;

  v15 = qword_1ECD97050;
  dispatch_get_global_queue(17, 0);
  v16 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v15, v16);

  v17 = dispatch_queue_create("com.apple.cloudkit.global.background", attr);
  v18 = (void *)qword_1ECD97058;
  qword_1ECD97058 = (uint64_t)v17;

  v19 = qword_1ECD97058;
  dispatch_get_global_queue(9, 0);
  v20 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v19, v20);

  dispatch_activate((dispatch_object_t)qword_1ECD97038);
  dispatch_activate((dispatch_object_t)qword_1ECD97040);
  dispatch_activate((dispatch_object_t)qword_1ECD97048);
  dispatch_activate((dispatch_object_t)qword_1ECD97050);
  dispatch_activate((dispatch_object_t)qword_1ECD97058);

}

void sub_18A5F17A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v19 = (void *)MEMORY[0x1E0C99E60];
  v18 = objc_opt_class();
  v17 = objc_opt_class();
  v16 = objc_opt_class();
  v15 = objc_opt_class();
  v0 = objc_opt_class();
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend_setWithObjects_(v19, v11, v18, v12, v17, v16, v15, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, 0);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)qword_1ECD97000;
  qword_1ECD97000 = v13;

}

uint64_t sub_18A5F1924()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F97 = result;
  return result;
}

uint64_t sub_18A5F1948()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F94 = result;
  return result;
}

void sub_18A5F196C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  objc_msgSend_currentProcess(MEMORY[0x1E0D87D68], a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  byte_1ECD96F90 = objc_msgSend_isDaemon(v7, v4, v5, v6);

}

void sub_18A5F19A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v29 = (void *)MEMORY[0x1E0C99E60];
  v28 = objc_opt_class();
  v27 = objc_opt_class();
  v26 = objc_opt_class();
  v25 = objc_opt_class();
  v24 = objc_opt_class();
  v23 = objc_opt_class();
  v22 = objc_opt_class();
  v21 = objc_opt_class();
  v20 = objc_opt_class();
  v19 = objc_opt_class();
  v18 = objc_opt_class();
  v17 = objc_opt_class();
  v16 = objc_opt_class();
  v15 = objc_opt_class();
  v0 = objc_opt_class();
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend_setWithObjects_(v29, v11, v28, v12, v27, v26, v25, v24, v23, v22, v21, v20, v19, v18, v17, v16, v15, v0, v1,
    v2,
    v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
    0);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)qword_1ECD96FD0;
  qword_1ECD96FD0 = v13;

}

void sub_18A5F1C18()
{
  void *v0;
  const char *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  CKAcceptableValueClasses();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v1, (uint64_t)&v7, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setByAddingObjectsFromArray_(v0, v3, (uint64_t)v2, v4, v7, v8);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1ECD96FF0;
  qword_1ECD96FF0 = v5;

}

void sub_18A5F1CE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_strongToWeakObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96A78;
  qword_1ECD96A78 = v4;

}

void sub_18A5F1D10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDF99378, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96E98;
  qword_1ECD96E98 = v4;

}

void sub_18A5F1D44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  id v13;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDFB46A8, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96E88;
  qword_1ECD96E88 = v4;

  v6 = (void *)qword_1ECD96E88;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v6, v12, (uint64_t)v13, (uint64_t)sel_allClouddThrottlesWithCompletionHandler_, 0, 1);

}

void sub_18A5F1DF4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);

}

void sub_18A5F1E58(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A5F1DF4;
  v5[3] = &unk_1E1F60A50;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_currentDeviceIDWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A5F1EC8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDF831C8, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96B38;
  qword_1ECD96B38 = v4;

}

void sub_18A5F1EFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDFB45E8, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96B28;
  qword_1ECD96B28 = v4;

}

uint64_t sub_18A5F1F30(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_18A5F1F44(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;

  v5 = *(_QWORD *)(a1 + 32);
  v10 = a3;
  objc_msgSend_CKAssignToContainerWithID_(a2, v6, v5, v7);
  objc_msgSend_CKAssignToContainerWithID_(v10, v8, *(_QWORD *)(a1 + 32), v9);

}

void sub_18A5F1F9C(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  if (!v8)
    objc_msgSend_accountStatus(a2, v5, v6, v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_18A5F1FFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;

  v4 = *(_BYTE **)(a1 + 32);
  if (v4[32])
    return 1;
  else
    return objc_msgSend_invalid(v4, a2, a3, a4);
}

uint64_t sub_18A5F2014(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = (void *)ck_log_facility_engine;
  if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v2;
    objc_msgSend_shortDescription(v5, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(unsigned __int8 *)(a1 + 48);
    objc_msgSend_ckShortDescription(*(void **)(a1 + 40), v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543874;
    v26 = v10;
    v27 = 1024;
    v28 = v11;
    v29 = 2112;
    v30 = v15;
    _os_log_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ setting needs to fetch changes %d for zone %@", (uint8_t *)&v25, 0x1Cu);

  }
  v16 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v16)
      result = objc_msgSend_containsObject_(*(void **)(v16 + 64), v3, *(_QWORD *)(a1 + 40), v4);
    else
      result = objc_msgSend_containsObject_(0, v3, *(_QWORD *)(a1 + 40), v4);
    if ((result & 1) == 0)
    {
      v20 = *(_QWORD *)(a1 + 32);
      if (v20)
        result = objc_msgSend_addObject_(*(void **)(v20 + 64), v18, *(_QWORD *)(a1 + 40), v19);
      else
        result = objc_msgSend_addObject_(0, v18, *(_QWORD *)(a1 + 40), v19);
LABEL_16:
      v24 = *(_QWORD *)(a1 + 32);
      if (v24)
        ++*(_QWORD *)(v24 + 96);
    }
  }
  else
  {
    if (v16)
      result = objc_msgSend_containsObject_(*(void **)(v16 + 64), v3, *(_QWORD *)(a1 + 40), v4);
    else
      result = objc_msgSend_containsObject_(0, v3, *(_QWORD *)(a1 + 40), v4);
    if ((_DWORD)result)
    {
      v23 = *(_QWORD *)(a1 + 32);
      if (v23)
        result = objc_msgSend_removeObject_(*(void **)(v23 + 64), v21, *(_QWORD *)(a1 + 40), v22);
      else
        result = objc_msgSend_removeObject_(0, v21, *(_QWORD *)(a1 + 40), v22);
      goto LABEL_16;
    }
  }
  return result;
}

void sub_18A5F21DC()
{
  objc_opt_self();
  if (qword_1ECD96AF0 != -1)
    dispatch_once(&qword_1ECD96AF0, &unk_1E1F613B0);
  objc_storeStrong((id *)&qword_1ECD96AF8, (id)qword_1ECD96AE8);
}

uint64_t sub_18A5F2228(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 10);
  return result;
}

void sub_18A5F223C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[8];
  v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_copy(v13, v7, v8, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

uint64_t sub_18A5F22A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;

  v4 = *(_BYTE **)(a1 + 32);
  if (v4[32])
    return 1;
  else
    return objc_msgSend_invalid(v4, a2, a3, a4);
}

uint64_t sub_18A5F22B8(uint64_t a1, const char *a2)
{
  return objc_msgSend__propertyDescriptionForProperty_shouldRedact_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(unsigned __int8 *)(a1 + 40));
}

void sub_18A5F22CC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  v5 = *(id *)(a1 + 40);
  if (v5 != v4 && (objc_msgSend_isEqual_(v5, v2, (uint64_t)v4, v3) & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v6 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(void **)(a1 + 32);
      v9 = v6;
      objc_msgSend_shortDescription(v8, v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      _os_log_debug_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_DEBUG, "%{public}@ setting server change token for database: (%@)", (uint8_t *)&v15, 0x16u);

    }
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      ++*(_QWORD *)(v7 + 96);
  }

}

void sub_18A5F2428(uint64_t a1)
{
  uint64_t v2;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 40), *(id *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    ++*(_QWORD *)(v2 + 96);
}

void sub_18A5F2464(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      objc_msgSend_shortDescription(v4, v6, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(unsigned __int8 *)(a1 + 40);
      v11 = 138543618;
      v12 = v9;
      v13 = 1024;
      v14 = v10;
      _os_log_debug_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_DEBUG, "%{public}@ setting needs to fetch database changes %d", (uint8_t *)&v11, 0x12u);

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = *(_BYTE *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      ++*(_QWORD *)(v3 + 96);
  }
}

uint64_t sub_18A5F25A8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 9);
  return result;
}

void sub_18A5F25BC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_18A5F25D0(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_18A5F25E4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
}

uint64_t sub_18A5F25F8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 12);
  return result;
}

void sub_18A5F260C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 32), a2, a3, a4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

uint64_t sub_18A5F2644(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 11);
  return result;
}

void sub_18A5F2658(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[10];
  v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_copy(v13, v7, v8, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

void sub_18A5F26BC(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  NSObject *v7;
  dispatch_queue_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  CKEntitlements *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  NSObject *v52;
  void *v53;
  _QWORD handler[4];
  _QWORD *v55;
  int out_token;
  objc_super v57;

  v1 = objc_alloc(*(Class *)(a1 + 32));
  if (v1)
  {
    v57.receiver = v1;
    v57.super_class = (Class)CKProcessScopedStateManager;
    v5 = objc_msgSendSuper2(&v57, sel_init);
    if (v5)
    {
      v6 = (const char *)objc_msgSend_UTF8String(CFSTR("com.apple.cloudkit.CKProcessScopedStateManager.notificationQueue"), v2, v3, v4);
      dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = dispatch_queue_create(v6, v7);
      v9 = (void *)v5[6];
      v5[6] = v8;

      objc_msgSend_weakObjectsHashTable(MEMORY[0x1E0CB3690], v10, v11, v12);
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)v5[2];
      v5[2] = v13;

      v15 = objc_opt_new();
      v16 = (void *)v5[5];
      v5[5] = v15;

      v17 = [CKEntitlements alloc];
      v21 = objc_msgSend_initWithCurrentProcess(v17, v18, v19, v20);
      v22 = (void *)v5[3];
      v5[3] = v21;

      sub_18A5FA6B8((uint64_t)v5, v23, v24, v25);
      objc_msgSend_sharedOptions(CKBehaviorOptions, v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v7) = objc_msgSend_isAppleInternalInstall(v29, v30, v31, v32);

      if ((_DWORD)v7)
      {
        out_token = -1;
        v33 = (void *)MEMORY[0x1E0CB3940];
        CKTestNotificationPrefix();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v33, v35, (uint64_t)CFSTR("%@%@"), v36, v34, CFSTR("com.apple.cloudd.sleepytime"));
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        v41 = (const char *)objc_msgSend_UTF8String(v37, v38, v39, v40);
        CKGetGlobalQueue(25);
        v42 = objc_claimAutoreleasedReturnValue();
        notify_register_dispatch(v41, &out_token, v42, &unk_1E1F583F8);

        out_token = -1;
        v43 = (void *)MEMORY[0x1E0CB3940];
        CKTestNotificationPrefix();
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v43, v45, (uint64_t)CFSTR("%@%@"), v46, v44, CFSTR("com.apple.cloudd.pcsIdentityUpdate"));
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        v51 = (const char *)objc_msgSend_UTF8String(v47, v48, v49, v50);
        v52 = v5[6];
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3221225472;
        handler[2] = sub_18A6E6C4C;
        handler[3] = &unk_1E1F61558;
        v55 = v5;
        notify_register_dispatch(v51, &out_token, v52, handler);

      }
    }
  }
  else
  {
    v5 = 0;
  }
  v53 = (void *)qword_1ECD96B20;
  qword_1ECD96B20 = (uint64_t)v5;

}

void sub_18A5F291C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[9];
  v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_copy(v13, v7, v8, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

void sub_18A5F2980(_QWORD *a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if (v3)
    v3 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v3;
  v4 = a1[4];
  v10 = 0;
  objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], a2, v4, 1, &v10);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v10;
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;

  if (v6)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v9 = ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v6;
      _os_log_fault_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_FAULT, "BUG IN CLOUDKIT: Error serializing sync engine metadata: %@", buf, 0xCu);
    }
  }

}

void sub_18A5F2AC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  objc_class *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  objc_class *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  objc_class *v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v9 = v8;
      v10 = (objc_class *)objc_opt_class();
      NSStringFromClass(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 32);
      objc_msgSend_ckShortDescription(v12, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = 138543874;
      v47 = v11;
      v48 = 2048;
      v49 = v12;
      v50 = 2114;
      v51 = v16;
      v17 = "Operation <%{public}@: %p; %{public}@> was cancelled, so skipping call to performCKOperation";
LABEL_17:
      _os_log_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_INFO, v17, (uint8_t *)&v46, 0x20u);

    }
  }
  else if (objc_msgSend_isFinished(*(void **)(a1 + 32), v5, v6, v7))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v18 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v9 = v18;
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 32);
      objc_msgSend_ckShortDescription(v20, v21, v22, v23);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = 138543874;
      v47 = v11;
      v48 = 2048;
      v49 = v20;
      v50 = 2114;
      v51 = v16;
      v17 = "Operation <%{public}@: %p; %{public}@> was finished, so skipping call to performCKOperation";
      goto LABEL_17;
    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 32);
    if (v24 && *(_BYTE *)(v24 + 278))
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v25 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        v9 = v25;
        v26 = (objc_class *)objc_opt_class();
        NSStringFromClass(v26);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = *(void **)(a1 + 32);
        objc_msgSend_ckShortDescription(v27, v28, v29, v30);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 138543874;
        v47 = v11;
        v48 = 2048;
        v49 = v27;
        v50 = 2114;
        v51 = v16;
        v17 = "Operation <%{public}@: %p; %{public}@> failed to enqueue, so skipping call to performCKOperation";
        goto LABEL_17;
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v31 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        v35 = v31;
        v36 = (objc_class *)objc_opt_class();
        NSStringFromClass(v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = *(void **)(a1 + 32);
        objc_msgSend_ckShortDescription(v38, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 138543874;
        v47 = v37;
        v48 = 2048;
        v49 = v38;
        v50 = 2114;
        v51 = v42;
        _os_log_impl(&dword_18A5C5000, v35, OS_LOG_TYPE_INFO, "Operation <%{public}@: %p; %{public}@> invoking on container throttle queue",
          (uint8_t *)&v46,
          0x20u);

      }
      objc_msgSend_ckSignpostBegin(*(void **)(a1 + 32), v32, v33, v34);
      objc_msgSend_performCKOperation(*(void **)(a1 + 32), v43, v44, v45);
    }
  }
}

void sub_18A5F2E8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  _QWORD block[5];

  objc_msgSend_callbackQueue(*(void **)(a1 + 32), a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18A5F2AC0;
  block[3] = &unk_1E1F5FAA8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v5, block);

}

void sub_18A5F2F00()
{
  CKLogicalDeviceContext *v0;
  const char *v1;
  uint64_t v2;
  void *v3;

  v0 = [CKLogicalDeviceContext alloc];
  v2 = objc_msgSend__initWithTestDeviceReferenceProtocol_useLiveServer_(v0, v1, 0, 1);
  v3 = (void *)qword_1ECD96EE0;
  qword_1ECD96EE0 = v2;

}

void sub_18A5F2F34(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  sub_18A5D6374((uint64_t)v4, v3);
  sub_18A5D6074((uint64_t)v4);
  if (v4)
    v5 = (void *)v4[5];
  else
    v5 = 0;
  v6 = v5;

  if (!v6)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_lastInsertRowID(*(void **)(a1 + 40), v7, v8, v9);
}

void sub_18A5F2FAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  void *v11;
  const char *v12;

  if (!byte_1EDF6A0E0)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v11, v12, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), CFSTR("CKXPCConnection.m"), 41, CFSTR("The daemon shouldn't be using XPC to talk to itself"));

  }
  v5 = objc_alloc(*(Class *)(a1 + 40));
  inited = objc_msgSend_initInternal(v5, v6, v7, v8);
  v10 = (void *)qword_1ECD96F50;
  qword_1ECD96F50 = inited;

}

void sub_18A5F3024()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ECD96AC8;
  qword_1ECD96AC8 = v0;

}

void sub_18A5F304C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 352));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A5F308C(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
    WeakRetained = objc_getProperty(WeakRetained, v2, 448, 1);
  sub_18A5FAFC0(WeakRetained);

}

void sub_18A5F30CC()
{
  CKBehaviorOptions *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  void *v5;

  v0 = [CKBehaviorOptions alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2, v3);
  v5 = (void *)qword_1ECD96C60;
  qword_1ECD96C60 = inited;

}

void sub_18A5F30F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;

  v3 = a2;
  v4 = (void *)objc_opt_class();
  v8 = objc_msgSend_daemonInvocationSelector(v4, v5, v6, v7);
  objc_msgSend_methodSignatureForSelector_(v3, v9, v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invocationWithMethodSignature_(MEMORY[0x1E0C99DB8], v12, (uint64_t)v11, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTarget_(v14, v15, (uint64_t)v3, v16);

  v17 = (void *)objc_opt_class();
  v21 = objc_msgSend_daemonInvocationSelector(v17, v18, v19, v20);
  objc_msgSend_setSelector_(v14, v22, v21, v23);
  objc_msgSend_retainArguments(v14, v24, v25, v26);
  objc_msgSend_operationInfo(*(void **)(a1 + 32), v27, v28, v29);
  v35 = &unk_1E1F586D8;
  v36 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setArgument_atIndex_(v14, v30, (uint64_t)&v36, 2);
  objc_msgSend_setArgument_atIndex_(v14, v31, (uint64_t)&v35, 3);
  objc_msgSend_invoke(v14, v32, v33, v34);

}

uint64_t sub_18A5F31EC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 8));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 73) = 0;
  v5 = *(_BYTE **)(a1 + 32);
  if (v5[72])
  {
    objc_msgSend_postFinishedNotice(v5, v2, v3, v4);
  }
  else
  {
    v6 = objc_msgSend_processingDelay(v5, v2, v3, v4);
    if (v6)
      objc_msgSend_delayPostBy_(*(void **)(a1 + 32), v7, v6, v8);
  }
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_18A5F3258()
{
  CKRecordZoneID *v0;
  const char *v1;
  id v2;
  void *v3;
  id v4;

  v0 = [CKRecordZoneID alloc];
  v4 = (id)objc_msgSend_initWithZoneName_ownerName_(v0, v1, (uint64_t)CFSTR("_defaultZone"), (uint64_t)CFSTR("__defaultOwner__"));
  v2 = sub_18A5F8D5C([CKRecordZone alloc], v4, 0);
  v3 = (void *)qword_1ECD96F28;
  qword_1ECD96F28 = (uint64_t)v2;

}

void sub_18A5F32C4(uint64_t a1)
{
  CKUserDefaults *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = [CKUserDefaults alloc];
  objc_msgSend_suiteName(*(void **)(a1 + 32), v3, v4, v5);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_initWithSuiteName_(v2, v6, (uint64_t)v10, v7);
  v9 = (void *)qword_1ECD970D8;
  qword_1ECD970D8 = v8;

}

int *sub_18A5F3328(uint64_t a1)
{
  void *v2;
  int *result;
  NSObject *v4;
  objc_class *v5;
  void *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v4 = v2;
    v5 = (objc_class *)objc_opt_class();
    NSStringFromClass(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD **)(a1 + 32);
    sub_18A767450(v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543874;
    v13 = v6;
    v14 = 2048;
    v15 = v7;
    v16 = 2114;
    v17 = v11;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Placeholder op <%{public}@: %p; %{public}@> finishing in main",
      (uint8_t *)&v12,
      0x20u);

  }
  result = *(int **)(a1 + 32);
  if (result)
    return (int *)CKOperationExecutionStateTransitionToFinished(result, result + 64);
  return result;
}

uint64_t sub_18A5F347C()
{
  id v0;
  void *v1;
  const char *v2;
  uint64_t v3;

  v0 = objc_alloc_init(MEMORY[0x1E0C99D38]);
  v1 = (void *)qword_1ECD96C78;
  qword_1ECD96C78 = (uint64_t)v0;

  return objc_msgSend_setName_((void *)qword_1ECD96C78, v2, (uint64_t)CFSTR("CKObjcClassCache"), v3);
}

void sub_18A5F34BC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  _BYTE *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  const char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  uint8_t buf[4];
  _BYTE *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_sync_enter(v4);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v5 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        *(_DWORD *)buf = 138543618;
        v31 = v4;
        v32 = 2048;
        v33 = v6;
        _os_log_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_INFO, "Warn: %{public}@: NSXPCConnection %p became invalid", buf, 0x16u);
      }
      v4[8] = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      objc_sync_exit(v4);

      objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_postNotificationName_object_(v10, v11, (uint64_t)CFSTR("CKXPCConnectionInvalidated"), (uint64_t)v4);

      objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_postNotificationName_object_(v15, v16, (uint64_t)CFSTR("CKXPCConnectionInterrupted"), (uint64_t)v4);

      v17 = *(id *)(a1 + 32);
      objc_sync_enter(v17);
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v18 = *(_QWORD **)(a1 + 32);
      if (v18)
        v18 = (_QWORD *)v18[4];
      v19 = v18;
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v25, (uint64_t)v29, 16);
      if (v21)
      {
        v22 = *(_QWORD *)v26;
        do
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v26 != v22)
              objc_enumerationMutation(v19);
            (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i) + 16))(*(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i));
          }
          v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v24, (uint64_t)&v25, (uint64_t)v29, 16);
        }
        while (v21);
      }

      sub_18A815920(*(_QWORD *)(a1 + 32), 0);
      objc_sync_exit(v17);

    }
    else
    {
      objc_sync_exit(v4);

    }
  }

}

void sub_18A5F372C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5F3750(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v1, v2, (uint64_t)v4, v3);

}

uint64_t sub_18A5F3794(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_processingComplete(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18A5F37A4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F37AC()
{
  return swift_release();
}

uint64_t sub_18A5F37B4()
{
  return swift_allocObject();
}

uint64_t sub_18A5F37BC()
{
  return swift_allocObject();
}

id sub_18A5F37C8(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18A5F37D4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_18A5F37E0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F3830()
{
  return swift_slowAlloc();
}

void sub_18A5F3838()
{
  const void *v0;

  _Block_release(v0);
}

void sub_18A5F384C(id a1)
{

}

uint64_t sub_18A5F385C()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

id sub_18A5F3888(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_18A5F3890()
{
  void *v0;

}

uint64_t sub_18A5F3898()
{
  return swift_bridgeObjectRetain();
}

id sub_18A5F38A0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_18A5F38AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F38B4()
{
  return 0x6573616261746164;
}

uint64_t sub_18A5F38D8()
{
  return swift_arrayDestroy();
}

uint64_t sub_18A5F38E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for CKShareTransferRepresentation.ExportedShare(0, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
}

uint64_t sub_18A5F3900(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_18A5F3920()
{
  return type metadata accessor for SyncEngine();
}

void sub_18A5F392C()
{
  JUMPOUT(0x18D76E86CLL);
}

void *sub_18A5F3938@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

uint64_t sub_18A5F3944()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F394C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F3954()
{
  return swift_unknownObjectRetain_n();
}

uint64_t sub_18A5F3964()
{
  return swift_retain();
}

uint64_t sub_18A5F3974()
{
  return swift_allocObject();
}

uint64_t sub_18A5F3980(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  return result;
}

void sub_18A5F398C()
{
  JUMPOUT(0x18D76CEB0);
}

id sub_18A5F399C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18A5F39A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v1;
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = (_QWORD *)(v6 + 32 * v5);
  v7[4] = v4;
  v7[5] = v0;
  v7[6] = v3;
  v7[7] = v2;
  return swift_release();
}

uint64_t sub_18A5F39C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_18A5F39D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_18A5F3A0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_18A5F3A20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

uint64_t sub_18A5F3A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  *(_QWORD *)(v1 + 32) = v0;
  return sub_18A5F101C(v2);
}

uint64_t sub_18A5F3A40()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_18A5F3A4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F3A58()
{
  return swift_retain_n();
}

id sub_18A5F3A84()
{
  void *v0;

  return v0;
}

uint64_t sub_18A5F3A8C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F3A94()
{
  return swift_task_switch();
}

uint64_t sub_18A5F3AA0()
{
  return swift_release();
}

uint64_t sub_18A5F3AA8()
{
  uint64_t v0;

  return sub_18A60A578(v0);
}

id sub_18A5F3AD8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_18A5F3AE0()
{
  return swift_task_switch();
}

uint64_t sub_18A5F3AEC()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

void sub_18A5F3B04(uint64_t a1, unint64_t *a2)
{
  sub_18A5F50F0(0, a2);
}

uint64_t sub_18A5F3B0C()
{
  uint64_t v0;

  return v0 + 56;
}

void sub_18A5F3B34()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_18A5F3B44()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_18A5F3B58()
{
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

BOOL sub_18A5F3B90(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A5F3BA0()
{
  return type metadata accessor for Logger();
}

uint64_t sub_18A5F3BA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_18A5F3BC0(id a1)
{

}

uint64_t sub_18A5F3BD8()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_18A5F3BE8()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t sub_18A5F3BF4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18A65AA60(a1, a2, a3, a4, a5);
}

uint64_t sub_18A5F3C08()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_18A5F3C20()
{
  return swift_task_alloc();
}

uint64_t sub_18A5F3C60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return v1 - 120;
}

id sub_18A5F3C70()
{
  void *v0;

  return v0;
}

uint64_t sub_18A5F3C7C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_18A60FC24(v0, v1);
}

uint64_t sub_18A5F3C88()
{
  return type metadata accessor for SyncEngine();
}

uint64_t sub_18A5F3C94()
{
  return swift_continuation_await();
}

uint64_t sub_18A5F3C9C()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_18A5F3CA8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_18A5F3CB0()
{
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18A5F3CBC()
{
  return swift_task_alloc();
}

uint64_t sub_18A5F3CDC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_18A5F3CEC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_18A65B168(a1, a2, a3, a4);
}

uint64_t sub_18A5F3D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A5F1010(a1, a2, 1, v2);
}

id sub_18A5F3D34@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_18A5F3D3C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_18A5F3D48()
{
  return swift_bridgeObjectRetain();
}

id sub_18A5F3D50(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_18A5F3D58()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A5F3D90()
{
  uint64_t v0;

  return **(int **)(v0 + 48) + *(_QWORD *)(v0 + 48);
}

void sub_18A5F3DA4(id a1)
{

}

uint64_t sub_18A5F3DC0()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18A5F3DD4()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_18A5F3DF8(uint64_t a1, unint64_t *a2)
{
  return sub_18A60B8D0(0, a2);
}

uint64_t sub_18A5F3E00()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F3E28()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_18A5F3E50(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A5F3E6C()
{
  return swift_retain();
}

uint64_t sub_18A5F3E74()
{
  return swift_dynamicCastObjCClass();
}

uint64_t sub_18A5F3E80(uint64_t a1, SEL *a2)
{
  void *v2;

  return sub_18A62A200(v2, a2);
}

uint64_t sub_18A5F3E88()
{
  return 0x6D614E72656E776FLL;
}

uint64_t sub_18A5F3EA4()
{
  return swift_task_switch();
}

__n128 sub_18A5F3EB4()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 72);
}

uint64_t sub_18A5F3ED0()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_18A5F3EDC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FBA4(v1, v0);
}

uint64_t sub_18A5F3EE8(uint64_t a1, uint64_t a2)
{
  return sub_18A619B98(a1, a2);
}

void sub_18A5F3F14()
{
  JUMPOUT(0x18D76C7CCLL);
}

void sub_18A5F3F20()
{
  sub_18A60FC4C();
}

__n128 sub_18A5F3F38()
{
  __n128 *v0;
  __n128 *v1;
  unsigned __int8 v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 result;

  v1 = (__n128 *)v0[6].n128_u64[0];
  v2 = v0[1].n128_u8[8];
  v3 = v0[3].n128_u64[0];
  v4 = v0[3].n128_u8[8];
  v5 = v0[4].n128_u64[0];
  v6 = v0[4].n128_u8[8];
  result = v0[2];
  v1->n128_u64[0] = v0[1].n128_u64[0];
  v1->n128_u8[8] = v2;
  v1[1] = result;
  v1[2].n128_u64[0] = v3;
  v1[2].n128_u8[8] = v4;
  v1[3].n128_u64[0] = v5;
  v1[3].n128_u8[8] = v6;
  return result;
}

double sub_18A5F3F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  uint64_t v11;

  return sub_18A6A8694(a1, a2, v11, &a11);
}

void sub_18A5F3F88()
{
  void *v0;

}

uint64_t sub_18A5F3F90()
{
  return swift_allocObject();
}

uint64_t sub_18A5F3F9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18A5F101C(a3);
}

uint64_t sub_18A5F3FAC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F3FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_18A5F3FC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A5F3FE4()
{
  return swift_bridgeObjectRelease();
}

void sub_18A5F3FEC()
{
  void *v0;

}

uint64_t sub_18A5F3FF4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F4008(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A5F4018()
{
  uint64_t v0;

  return sub_18A62F96C(v0);
}

uint64_t sub_18A5F402C()
{
  uint64_t v0;

  return sub_18A63DE8C(v0);
}

id sub_18A5F4034()
{
  id *v0;

  return *v0;
}

void sub_18A5F4040()
{
  sub_18A630F04();
}

uint64_t sub_18A5F4050()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_18A5F4060@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_18A5F4084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_18A5F40A4()
{
  return swift_beginAccess();
}

uint64_t sub_18A5F40AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F40B4()
{
  return type metadata accessor for Date();
}

uint64_t sub_18A5F40BC()
{
  return swift_dynamicCastObjCClass();
}

uint64_t sub_18A5F40D8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_18A5F40F8(uint64_t a1, uint64_t a2)
{
  char v2;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v2 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F4120()
{
  return swift_release();
}

uint64_t sub_18A5F4134(uint64_t (*a1)(void))
{
  return a1();
}

__n128 sub_18A5F4144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  *(_QWORD *)(v9 + 184) = a1;
  *(_QWORD *)(a1 + 16) = v10;
  result = a9;
  *(__n128 *)(a1 + 24) = a9;
  return result;
}

id sub_18A5F415C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, (SEL)(v3 + 3190), v1, v2);
}

uint64_t sub_18A5F416C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_task_dealloc();
}

uint64_t sub_18A5F4174(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a1)
    return a10;
  else
    return 0;
}

uint64_t sub_18A5F4184()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_18A5F4194()
{
  return swift_task_switch();
}

id sub_18A5F41A0(id a1, SEL a2)
{
  return objc_msgSend(a1, a2);
}

void *sub_18A5F41B4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char aBlock, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  a6 = v7;
  a7 = a1;
  return _Block_copy(&aBlock);
}

void sub_18A5F41C0()
{
  JUMPOUT(0x18D76C7CCLL);
}

uint64_t sub_18A5F41DC()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

void sub_18A5F41EC(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_18A5F41F4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_18A5F4214(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A5F4224(uint64_t a1, uint64_t a2)
{
  sub_18A60990C(a1, a2);
  return Logger.logObject.getter();
}

Swift::Int sub_18A5F4238()
{
  return Hasher._finalize()();
}

uint64_t sub_18A5F4240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  return sub_18A64C3C0(a1, a2, a3, v6, v5, v4, v3);
}

uint64_t sub_18A5F4258()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_18A5F4260()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_18A5F4270()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t sub_18A5F4294()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FBA4(v1, v0);
}

void sub_18A5F42A0()
{
  type metadata accessor for CKError(0);
}

void sub_18A5F42A8()
{
  JUMPOUT(0x18D76C7CCLL);
}

uint64_t sub_18A5F42B4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FC24(v1, v0);
}

uint64_t sub_18A5F42C0()
{
  return swift_getObjectType();
}

id sub_18A5F42D4()
{
  void *v0;

  return v0;
}

uint64_t sub_18A5F42DC(uint64_t a1, uint64_t a2)
{
  char v2;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v2 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v2;
  return swift_bridgeObjectRelease();
}

Swift::Int sub_18A5F4304()
{
  uint64_t v0;

  return NSObject._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
}

id sub_18A5F4314(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  return objc_msgSend(v4, a2, v3, v5, v2);
}

void sub_18A5F4328()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_18A5F4338(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_18A5F4340()
{
  return swift_bridgeObjectRetain();
}

id sub_18A5F4354(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  return objc_msgSend(v1, sel_container);
}

uint64_t sub_18A5F436C()
{
  return type metadata accessor for CKDeviceCapability(0);
}

void sub_18A5F4374()
{
  void *v0;

}

void sub_18A5F4380()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8250;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t sub_18A5F438C()
{
  return swift_release();
}

BOOL sub_18A5F4394(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A5F43A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A5F1010(a1, a2, 1, v2);
}

uint64_t sub_18A5F43B0(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 56) = a5;
  *(_QWORD *)(v6 + 64) = a6;
  *(_BYTE *)(v6 + 96) = a4;
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 48) = a3;
  *(_QWORD *)(v6 + 32) = result;
  return result;
}

void sub_18A5F43CC(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_18A5F43D4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_18A5F43FC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_QWORD *sub_18A5F4404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr, uint64_t *), uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  return a5((uint64_t *)va1, (uint64_t *)va);
}

uint64_t sub_18A5F4420()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F4434()
{
  return swift_task_switch();
}

void sub_18A5F443C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;
  Swift::String v13;

  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t sub_18A5F447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_18A5F4490()
{
  return _BridgedStoredNSError.userInfo.getter();
}

void sub_18A5F44A0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C696E203ALL;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
}

uint64_t sub_18A5F44B4()
{
  return swift_arrayDestroy();
}

id sub_18A5F44C0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 3912));
}

uint64_t sub_18A5F44CC()
{
  return swift_arrayInitWithCopy();
}

void sub_18A5F44F8(id a1)
{

}

uint64_t sub_18A5F4514()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18A5F4520()
{
  return swift_release();
}

uint64_t sub_18A5F453C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return sub_18A63839C(v0, v2, v3, v1);
}

uint64_t sub_18A5F4554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_18A5F4564()
{
  return sub_18A63EAF0();
}

void sub_18A5F4570(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_18A5F4584()
{
  uint64_t v0;

  return v0;
}

void sub_18A5F4598()
{
  void *v0;

}

uint64_t sub_18A5F45A4()
{
  return String.init<A>(_:)();
}

uint64_t sub_18A5F45B8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = result;
  return result;
}

uint64_t sub_18A5F45CC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FC24(v1, v0);
}

uint64_t sub_18A5F45E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A5F460C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F4614@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F461C()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_18A5F4628()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_18A5F4630(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_18A5F4640()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F4668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_18A5F4674()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_18A5F4680(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A5F468C()
{
  return type metadata accessor for CKShare.BlockedIdentity();
}

id sub_18A5F4694()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v0, (SEL)(v3 + 2545), v1, 0, v2);
}

uint64_t sub_18A5F46AC()
{
  return swift_beginAccess();
}

uint64_t sub_18A5F46B8()
{
  return swift_beginAccess();
}

void *sub_18A5F46C4@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_18A5F46D4()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_18A5F46E0()
{
  return sub_18A669988();
}

uint64_t sub_18A5F4708()
{
  return swift_task_switch();
}

uint64_t sub_18A5F4710()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18A5F4724()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18A5F4730()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_18A5F4754()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A5F4778@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_18A5F4790()
{
  return swift_slowAlloc();
}

uint64_t sub_18A5F479C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  return sub_18A64C5A4(a1, a2, a3, v6, v5, v4, v3);
}

uint64_t sub_18A5F47B4()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_18A5F47C4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FBA4(v1, v0);
}

uint64_t sub_18A5F47D0(uint64_t a1)
{
  unint64_t v1;

  return sub_18A612FA0(a1, v1);
}

id sub_18A5F47D8(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  return objc_msgSend(v10, a2, a10);
}

uint64_t sub_18A5F47E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_18A5F47F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A5F4804()
{
  return swift_release_n();
}

uint64_t sub_18A5F4810()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

id sub_18A5F4820()
{
  uint64_t v0;
  uint64_t v1;

  return CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter(v0, v1);
}

uint64_t sub_18A5F482C()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t sub_18A5F4838(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A5F4844()
{
  return swift_bridgeObjectRetain();
}

void sub_18A5F4850()
{
  uint64_t v0;
  uint64_t v1;

  CKDatabaseSubscription.recordType.setter(v1, v0);
}

void sub_18A5F485C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 62;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

id sub_18A5F4868()
{
  uint64_t v0;
  uint64_t v1;

  return CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter(v0, v1);
}

void sub_18A5F4874()
{
  uint64_t v0;
  uint64_t v1;

  CKRecordZoneSubscription.recordType.setter(v1, v0);
}

id sub_18A5F4880(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18A5F488C()
{
  return swift_deallocObject();
}

uint64_t sub_18A5F489C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

_QWORD *sub_18A5F48AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_18A638418((uint64_t *)va, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2);
}

uint64_t sub_18A5F48F4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A612FA0(v1, v0);
}

uint64_t sub_18A5F4900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_18A5F4910()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FBA4(v1, v0);
}

id sub_18A5F491C()
{
  uint64_t v0;
  uint64_t v1;

  return CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter(v0, v1);
}

uint64_t sub_18A5F4928(uint64_t a1)
{
  unint64_t v1;

  return sub_18A60FBA4(a1, v1);
}

uint64_t sub_18A5F4930()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A5F493C()
{
  return swift_dynamicCast();
}

uint64_t sub_18A5F4950(uint64_t a1, uint64_t *a2)
{
  return sub_18A6ACF58(a1, a2);
}

__CFString *CKStringFromCapabilities(uint64_t a1)
{
  char v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  __CFString *v10;

  if (!a1)
  {
    v10 = CFSTR("(none)");
    return v10;
  }
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v5 = v2;
  if ((v1 & 2) != 0)
  {
    objc_msgSend_addObject_(v2, v3, (uint64_t)CFSTR("Atomic"), v4);
    if ((v1 & 1) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      objc_msgSend_addObject_(v5, v3, (uint64_t)CFSTR("Share"), v4);
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v1 & 1) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend_addObject_(v5, v3, (uint64_t)CFSTR("Sync"), v4);
  if ((v1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((v1 & 8) != 0)
LABEL_6:
    objc_msgSend_addObject_(v5, v3, (uint64_t)CFSTR("Zone-Wide Sharing"), v4);
LABEL_7:
  v6 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_componentsJoinedByString_(v5, v3, (uint64_t)CFSTR(","), v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v8, (uint64_t)CFSTR("(%@)"), v9, v7);
  v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id CKPushTopicForPushBehavior(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;

  v7 = a2;
  v8 = a3;
  v11 = a4;
  if (a1 == 2)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("%@%@"), v10, v8, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKSHA256(v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v18, (uint64_t)CFSTR("%@-DH-%@"), v19, v7, v17);
    v12 = (id)objc_claimAutoreleasedReturnValue();

  }
  else if (a1 == 1)
  {
    v12 = v7;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id CKDeviceSerialNumber()
{
  return sub_18A5C7BE4(CFSTR("SerialNumber"));
}

uint64_t CKDPRecordZoneIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  CKDPIdentifier *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_36;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_38;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 8) = v22;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(CKDPIdentifier);
          v19 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = objc_alloc_init(CKDPIdentifier);
          v19 = 24;
        }
        objc_storeStrong((id *)(a1 + v19), v18);
        if (!PBReaderPlaceMark() || (CKDPIdentifierReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id CKApplicationBundleIDForPush(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  if (v8)
    v12 = v8;
  else
    v12 = v7;
  if (v10)
    v12 = v10;
  if (v9)
    v12 = v9;
  v13 = v12;

  return v13;
}

void sub_18A5F50F0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  sub_18A5F379C();
}

uint64_t sub_18A5F5124(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18A5F5164(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t _s21RecordZoneChangeBatchVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18A5F51C8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18A5F51F4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_18A5F5220(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;

  objc_msgSend_dataUsingEncoding_(a1, a2, 4, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_base64EncodedStringWithOptions_(v4, v5, 0, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v7, v8, v9, v10))
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v11, (uint64_t)CFSTR(":%@:"), v12, v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

uint64_t sub_18A5F52A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 6, a4);
}

uint64_t sub_18A5F52A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 7, a4);
}

uint64_t sub_18A5F52B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 2, a4);
}

void sub_18A5F52B8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  id v21;

  v21 = a3;
  v7 = objc_retainAutorelease(a1);
  v14 = *(char *)objc_msgSend_objCType(v7, v8, v9, v10) - 66;
  if (v14 > 0x31)
    goto LABEL_7;
  if (((1 << v14) & 0x2009200020083) == 0)
  {
    if (((1 << v14) & 0x840400008400) != 0)
    {
      v17 = (const char *)objc_msgSend_longLongValue(v7, v11, v12, v13);
      sub_18A5F8768((uint64_t)v21, v17, a4, v18);
      goto LABEL_6;
    }
LABEL_7:
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v11, v12, v13);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v20, a2, (uint64_t)v7, CFSTR("CKSQLiteStatement.m"), 51, CFSTR("Expected number type to be either integer or floating point"));

    goto LABEL_6;
  }
  v15 = (const char *)objc_msgSend_intValue(v7, v11, v12, v13);
  sub_18A7BA6E8((uint64_t)v21, v15, a4, v16);
LABEL_6:

}

id sub_18A5F53BC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD v20[4];
  id v21;
  id v22;

  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99DE8];
  v9 = objc_msgSend_count(a1, v6, v7, v8);
  objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_18A5F3750;
  v20[3] = &unk_1E1F63D10;
  v13 = v12;
  v21 = v13;
  v22 = v4;
  v14 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v15, (uint64_t)v20, v16);
  v17 = v22;
  v18 = v13;

  return v18;
}

id sub_18A5F5484(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  _QWORD v33[4];
  id v34;

  v4 = a3;
  objc_msgSend_objectForKeyedSubscript_(a1, v5, (uint64_t)v4, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    objc_msgSend_lowercaseString(v4, v7, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(a1, v12, (uint64_t)v11, v13);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      objc_msgSend_capitalizedString(v4, v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(a1, v18, (uint64_t)v17, v19);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v10)
      {
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = sub_18A6FF9D4;
        v33[3] = &unk_1E1F62220;
        v34 = v4;
        objc_msgSend_keysOfEntriesPassingTest_(a1, v20, (uint64_t)v33, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v22, v23, v24, v25))
        {
          objc_msgSend_anyObject(v22, v26, v27, v28);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(a1, v30, (uint64_t)v29, v31);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v10 = 0;
        }

      }
    }
  }

  return v10;
}

id sub_18A5F55C4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = a3;
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v22, (uint64_t)v30, 16);
  if (v6)
  {
    v10 = v6;
    v11 = *(_QWORD *)v23;
    *(_QWORD *)&v9 = 138543618;
    v21 = v9;
    while (2)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v4);
        v13 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v12);
        objc_msgSend_objectForKey_(a1, v7, v13, v8, v21, (_QWORD)v22);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_URLWithString_(MEMORY[0x1E0C99E98], v15, (uint64_t)v14, v16);
            v17 = objc_claimAutoreleasedReturnValue();
            if (v17)
            {
              v19 = (void *)v17;

              goto LABEL_17;
            }
          }
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v18 = ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v21;
            v27 = v13;
            v28 = 2114;
            v29 = v14;
            _os_log_debug_impl(&dword_18A5C5000, v18, OS_LOG_TYPE_DEBUG, "Couldn't create url for key %{public}@ with value %{public}@", buf, 0x16u);
          }
        }

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v22, (uint64_t)v30, 16);
      if (v10)
        continue;
      break;
    }
  }
  v19 = 0;
LABEL_17:

  return v19;
}

void sub_18A5F57BC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_18A5F1F44;
  v8[3] = &unk_1E1F622B8;
  v9 = v4;
  v7 = v4;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v5, (uint64_t)v8, v6);

}

id sub_18A5F5834(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  id v11;
  const char *v12;
  uint64_t v14;

  v14 = 0;
  v1 = objc_retainAutorelease(a1);
  v5 = objc_msgSend_bytes(v1, v2, v3, v4);
  v9 = objc_msgSend_length(v1, v6, v7, v8);
  v10 = CKHexCharFromBytes(v5, v9, &v14, 3);
  v11 = objc_alloc(MEMORY[0x1E0CB3940]);
  return (id)objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v11, v12, (uint64_t)v10, v14, 1, 1);
}

void sub_18A5F58A8(void *a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  id v27;

  v27 = a3;
  objc_msgSend_setPrintAsDictionary_(v27, v4, 1, v5);
  if (objc_msgSend_avoidShortDescription(v27, v6, v7, v8))
    objc_msgSend_addProperty_value_shouldRedact_(v27, v9, (uint64_t)CFSTR("type"), (uint64_t)CFSTR("data"), 0);
  v12 = (void *)MEMORY[0x1E0CB37E8];
  v13 = objc_msgSend_length(a1, v9, v10, v11);
  objc_msgSend_numberWithUnsignedInteger_(v12, v14, v13, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addProperty_value_shouldRedact_(v27, v17, (uint64_t)CFSTR("length"), (uint64_t)v16, 0);

  if ((unint64_t)objc_msgSend_length(a1, v18, v19, v20) < 0x19)
  {
    objc_msgSend_base64EncodedStringWithOptions_(a1, v21, 32, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addProperty_value_shouldRedact_(v27, v26, (uint64_t)CFSTR("data"), (uint64_t)v24, 1);
  }
  else
  {
    objc_msgSend_CKSHA256(a1, v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addProperty_value_shouldRedact_(v27, v25, (uint64_t)CFSTR("sha256"), (uint64_t)v24, 1);
  }

}

uint64_t sub_18A5F59A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a1, sel_CKFirstObjectWithOptions_passingTest_, 0, a3);
}

id sub_18A5F59B0(void *a1, uint64_t a2, void *a3)
{
  unsigned int (**v4)(id, uint64_t);
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99DE8];
  v9 = objc_msgSend_count(a1, v6, v7, v8);
  objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v13 = a1;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v23, (uint64_t)v27, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v24 != v17)
          objc_enumerationMutation(v13);
        v19 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
        if (v4[2](v4, v19))
          objc_msgSend_addObject_(v12, v20, v19, v21, (_QWORD)v23);
      }
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v20, (uint64_t)&v23, (uint64_t)v27, 16);
    }
    while (v16);
  }

  return v12;
}

void sub_18A5F6A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F6DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F6FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F70D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F71C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F7294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F7390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F7528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F7738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F7878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F7C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A5F8768(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  if (result)
  {
    v6 = (_QWORD *)result;
    if (!*(_BYTE *)(result + 8))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, (uint64_t)sel_bindInt64_atIndex_, (uint64_t)v6, CFSTR("CKSQLiteStatement.m"), 211, CFSTR("Statement is not reset: \"%@\""), v6[3]);

    }
    result = v6[4];
    if (result)
    {
      result = sqlite3_bind_int64((sqlite3_stmt *)result, a3 + 1, (sqlite3_int64)a2);
      if ((_DWORD)result)
        return objc_msgSend_invalidate_(v6, v7, (uint64_t)CFSTR("Error binding int64 at %ld: \"%@\""), v8, a3, v6[3]);
    }
  }
  return result;
}

id sub_18A5F8D5C(id a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  CKRequiredFeatureSet *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  CKRequiredFeatureSet *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  objc_super v22;

  v5 = a2;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)CKRecordZone;
    v6 = objc_msgSendSuper2(&v22, sel_init);
    a1 = v6;
    if (v6)
    {
      v6[5] = a3;
      v10 = objc_msgSend_copy(v5, v7, v8, v9);
      v11 = (void *)*((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = v10;

      *((_BYTE *)a1 + 12) = 1;
      *((_BYTE *)a1 + 10) = 0;
      v12 = [CKRequiredFeatureSet alloc];
      v13 = MEMORY[0x1E0C9AA60];
      v15 = objc_msgSend_initWithZoneFeatures_recordFeatures_fieldFeatures_(v12, v14, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60]);
      v16 = (void *)*((_QWORD *)a1 + 25);
      *((_QWORD *)a1 + 25) = v15;

      v17 = [CKRequiredFeatureSet alloc];
      v19 = objc_msgSend_initWithZoneFeatures_recordFeatures_fieldFeatures_(v17, v18, v13, v13, v13);
      v20 = (void *)*((_QWORD *)a1 + 19);
      *((_QWORD *)a1 + 19) = v19;

    }
  }

  return a1;
}

void sub_18A5F95E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5F9758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5FA1B4(void *a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    v5 = v4[2];
    objc_msgSend_removeObject_(v5, v6, (uint64_t)v3, v7);

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = v4[2];
      v13 = 138412546;
      v14 = v3;
      v15 = 2048;
      v16 = objc_msgSend_count(v9, v10, v11, v12);
      _os_log_debug_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_DEBUG, "Unregistering %@ from account changes. Now have %ld registered containers", (uint8_t *)&v13, 0x16u);

    }
    objc_sync_exit(v4);

  }
}

void sub_18A5FA2F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FA318(void *a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    v5 = v4[2];
    objc_msgSend_addObject_(v5, v6, (uint64_t)v3, v7);

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = v4[2];
      v20 = 138412546;
      v21 = v3;
      v22 = 2048;
      v23 = objc_msgSend_count(v9, v10, v11, v12);
      _os_log_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_INFO, "Registering %@ for account and authorization change notifications. Now have %ld registered containers", (uint8_t *)&v20, 0x16u);

    }
    if ((byte_1ECD96A58 & 1) == 0)
    {
      byte_1ECD96A58 = 1;
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v13 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v20) = 0;
        _os_log_debug_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_DEBUG, "Registering notification handlers", (uint8_t *)&v20, 2u);
      }
      objc_msgSend___registerForAuthorizationChangeNotifications(v4, v14, v15, v16);
      objc_msgSend___registerForAccountChangeNotifications(v4, v17, v18, v19);
    }
    objc_sync_exit(v4);

  }
}

void sub_18A5FA4EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FA62C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A5FA640(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t IsAppleExecutable;
  const char *v9;
  uint64_t v10;

  if (a1)
  {
    v1 = (void *)objc_opt_new();
    v2 = CKSDKVersion();
    objc_msgSend_setClientSDKVersion_(v1, v3, v2, v4);
    v5 = (void *)objc_opt_new();
    objc_msgSend_setFrameworkFingerprint_(v1, v6, (uint64_t)v5, v7);

    IsAppleExecutable = CKMainBundleIsAppleExecutable();
    objc_msgSend_setIsClientMainBundleAppleExecutable_(v1, v9, IsAppleExecutable, v10);
  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void sub_18A5FA6B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  const char *v16;
  char v17;
  id v18;
  CKException *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  id v29;
  id v30;

  if (a1)
  {
    v5 = objc_msgSend_count(*(void **)(a1 + 40), a2, a3, a4);
    v6 = *(void **)(a1 + 24);
    if (v5)
    {
      v7 = *(id *)(a1 + 40);
      v8 = v6;
      objc_msgSend_entitlementsByAddingOverlay_(v8, v9, (uint64_t)v7, v10);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v11;

    }
    else
    {
      v13 = v6;
      v8 = *(id *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v13;
    }

    v14 = *(id *)(a1 + 32);
    v15 = CKSDKVersion();
    v30 = 0;
    v17 = objc_msgSend_validateEntitlementsWithSDKVersion_error_(v14, v16, v15, (uint64_t)&v30);
    v18 = v30;

    if ((v17 & 1) == 0)
    {
      v19 = [CKException alloc];
      v23 = objc_msgSend_code(v18, v20, v21, v22);
      objc_msgSend_localizedDescription(v18, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = (id)objc_msgSend_initWithCode_format_(v19, v28, v23, (uint64_t)CFSTR("%@"), v27);

      objc_exception_throw(v29);
    }

  }
}

id sub_18A5FAE88(id a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  objc_super v38;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v38.receiver = a1;
    v38.super_class = (Class)CKPlaceholderOperation;
    a1 = objc_msgSendSuper2(&v38, sel_init);
    if (a1)
    {
      objc_msgSend_date(MEMORY[0x1E0C99D68], v7, v8, v9);
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = (void *)*((_QWORD *)a1 + 33);
      *((_QWORD *)a1 + 33) = v10;

      v12 = dispatch_group_create();
      dispatch_group_enter(v12);
      v13 = (void *)*((_QWORD *)a1 + 31);
      *((_QWORD *)a1 + 31) = v12;
      v14 = v12;

      *((_BYTE *)a1 + 260) = 0;
      objc_msgSend_operationID(v5, v15, v16, v17);
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = (void *)*((_QWORD *)a1 + 34);
      *((_QWORD *)a1 + 34) = v18;

      v23 = objc_msgSend_copy(v6, v20, v21, v22);
      v24 = (void *)*((_QWORD *)a1 + 35);
      *((_QWORD *)a1 + 35) = v23;

      v28 = objc_msgSend_qualityOfService(v5, v25, v26, v27);
      objc_msgSend_setQualityOfService_(a1, v29, v28, v30);
      v34 = objc_msgSend_queuePriority(v5, v31, v32, v33);
      objc_msgSend_setQueuePriority_(a1, v35, v34, v36);
    }
  }

  return a1;
}

void sub_18A5FAFC0(void *a1)
{
  dispatch_group_t *obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    if (!*((_BYTE *)obj + 260))
    {
      dispatch_group_leave(obj[31]);
      *((_BYTE *)obj + 260) = 1;
    }
    objc_sync_exit(obj);

  }
}

void sub_18A5FB490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5FB510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5FB624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FB724(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FB88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A5FBCF0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18A5FBEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A5FC2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_18A5FC5E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FC6D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FC80C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18A5FCF48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FD144(void *a1)
{
  id *v1;
  id v2;
  NSObject *v3;
  NSObject *source;

  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    source = v1[46];
    v2 = v1[46];
    v1[46] = 0;

    objc_sync_exit(v1);
    v3 = source;
    if (source)
    {
      dispatch_source_cancel(source);
      v3 = source;
    }

  }
}

void sub_18A5FD404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A5FD868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A5FE9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A5FF8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A601414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A601FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A602468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6035D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A603638(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_18A603A04(void *result)
{
  if (result)
    return sub_18A5CD0A0(result, CFSTR("com.apple.private.cloudkit.notifyOnAccountWarmup"));
  return result;
}

void sub_18A603DC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A604E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A604FD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A605104(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6052EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_18A605924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6059C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double sub_18A60610C(uint64_t a1)
{
  if (a1)
    return sub_18A5C7AC4(a1, CFSTR("OperationTimeout"), 30.0);
  else
    return 0.0;
}

uint64_t sub_18A606250(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    return 0;
  sub_18A5C7F78(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v8 = (void *)v4;
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      objc_msgSend_null(MEMORY[0x1E0C99E38], v9, v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v12;
      if (!v12)
        goto LABEL_9;
    }
LABEL_7:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      a3 = objc_msgSend_intValue(v8, v13, v14, v15);
    goto LABEL_9;
  }
  objc_msgSend_null(MEMORY[0x1E0C99E38], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    goto LABEL_7;
LABEL_9:

  return a3;
}

id sub_18A60757C()
{
  objc_opt_self();
  if (qword_1ECD96AE0 != -1)
    dispatch_once(&qword_1ECD96AE0, &unk_1E1F61390);
  return (id)qword_1ECD96AD8;
}

id sub_18A6075C0()
{
  uint64_t v0;
  _QWORD block[5];

  v0 = objc_opt_self();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18A5F21DC;
  block[3] = &unk_1E1F5F680;
  block[4] = v0;
  if (qword_1ECD96B00 != -1)
    dispatch_once(&qword_1ECD96B00, block);
  return (id)qword_1ECD96AF8;
}

void type metadata accessor for CKSchedulerPriority(uint64_t a1)
{
  sub_18A6087D4(a1, (unint64_t *)&unk_1EDF6AC88);
}

void type metadata accessor for CKUnderlyingError(uint64_t a1)
{
  sub_18A6087D4(a1, &qword_1EDF699B0);
}

void type metadata accessor for CKSchedulerActivityResult(uint64_t a1)
{
  sub_18A6087D4(a1, (unint64_t *)&unk_1EDF6AC98);
}

void type metadata accessor for Scope(uint64_t a1)
{
  sub_18A6087D4(a1, (unint64_t *)&unk_1EDF6A8E0);
}

void type metadata accessor for CKSyncEngineSyncReason(uint64_t a1)
{
  sub_18A6087D4(a1, &qword_1EDF6ACA8);
}

void type metadata accessor for CKSyncEngineAccountChangeType(uint64_t a1)
{
  sub_18A6087D4(a1, &qword_1EDF6ACB0);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_18A6087D4(a1, (unint64_t *)&unk_1EDF6AA18);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_18A6087D4(a1, &qword_1EDF6A7B0);
}

BOOL sub_18A60771C(char a1, char a2)
{
  return a1 == a2;
}

void sub_18A60772C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_18A607750(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  BOOL v6;
  char v7;

  if (a1 == 0xD000000000000010 && a2 == 0x800000018A83D8D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = a1 == 0x6D75736B63656863 && a2 == 0xE800000000000000;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v6 = a1 == 0x6874676E656CLL && a2 == 0xE600000000000000;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x800000018A83D8F0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v7 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_18A6078F0()
{
  return 4;
}

Swift::Int sub_18A6078F8(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_18A60793C()
{
  return 0;
}

uint64_t sub_18A607948(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18A607980 + 4 * byte_18A838F20[a1]))(0xD000000000000010, 0x800000018A83D8D0);
}

uint64_t sub_18A607980()
{
  return 0x6D75736B63656863;
}

uint64_t sub_18A607998()
{
  return 0x6874676E656CLL;
}

uint64_t sub_18A6079AC(uint64_t a1)
{
  return a1 + 1;
}

BOOL sub_18A6079C4(char *a1, char *a2)
{
  return sub_18A60771C(*a1, *a2);
}

Swift::Int sub_18A6079D0()
{
  unsigned __int8 *v0;

  return sub_18A6078F8(*v0);
}

void sub_18A6079D8(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_18A60772C(a1, *v1);
}

Swift::Int sub_18A6079E0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_18A607A20()
{
  unsigned __int8 *v0;

  return sub_18A607948(*v0);
}

uint64_t sub_18A607A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A607750(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18A607A4C()
{
  return sub_18A60793C();
}

uint64_t sub_18A607A68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18A6078F0();
  *a1 = result;
  return result;
}

uint64_t sub_18A607A8C()
{
  sub_18A608B24();
  return CodingKey.description.getter();
}

uint64_t sub_18A607AB4()
{
  sub_18A608B24();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_18A607ADC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_18A5F101C(&qword_1EDF6AD08);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_18A608B00(a1, a1[3]);
  sub_18A608B24();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  sub_18A5F3DD4();
  if (!v1)
  {
    v8[14] = 1;
    sub_18A5F3DD4();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    sub_18A5F3DD4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_18A607C1C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(sub_18A5F101C(&qword_1EDF6ACF8) - 8);
  MEMORY[0x1E0C80A78]();
  sub_18A608B00(a1, a1[3]);
  sub_18A608B24();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return sub_18A608DCC();
  v6 = sub_18A5F4184();
  v8 = v7;
  v20 = v6;
  swift_bridgeObjectRetain();
  v9 = sub_18A5F4184();
  v11 = v10;
  v18 = v9;
  swift_bridgeObjectRetain();
  v19 = v11;
  v17 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = sub_18A5F4184();
  v14 = v13;
  v15 = v12;
  sub_18A608DC0(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18A5F3A8C();
  sub_18A608DCC();
  sub_18A5F37A4();
  swift_bridgeObjectRelease();
  result = sub_18A5F3A8C();
  *a2 = v20;
  a2[1] = v8;
  a2[2] = v18;
  a2[3] = v19;
  a2[4] = v17;
  a2[5] = v15;
  a2[6] = v14;
  return result;
}

double sub_18A607E20@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_18A607C1C(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_18A607E6C(_QWORD *a1)
{
  return sub_18A607ADC(a1);
}

uint64_t sub_18A607E80()
{
  sub_18A6083AC((unint64_t *)&unk_1EDF6A9E0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839144);
  return Error<>._domain.getter();
}

uint64_t sub_18A607EC0()
{
  sub_18A6083AC((unint64_t *)&unk_1EDF6A9E0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839144);
  return Error<>._code.getter();
}

uint64_t sub_18A607F04()
{
  sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

id _s8CloudKit12CKSyncEngineC5EventO19SentDatabaseChangesV14FailedZoneSaveV4zoneSo08CKRecordJ0Cvg_0()
{
  id *v0;

  return *v0;
}

uint64_t sub_18A607F4C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_18A607F54()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_18A5F4674();
  *v0 = nullsub_3(v1);
  sub_18A5F379C();
}

void sub_18A607F78(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_18A607FA8();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

BOOL sub_18A607FB0(uint64_t *a1, uint64_t *a2)
{
  return sub_18A60F7C8(*a1, *a2);
}

void sub_18A607FBC()
{
  sub_18A66D590();
}

void sub_18A607FC4(int a1)
{
  Swift::UInt *v1;

  sub_18A64CDB8(a1, *v1);
}

void sub_18A607FCC()
{
  sub_18A66D684();
}

uint64_t sub_18A607FD8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A607FE8()
{
  sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_18A608028()
{
  sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t sub_18A608068(void *a1)
{
  id v2;

  sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t sub_18A6080CC()
{
  void **v0;

  return sub_18A6080D4(*v0);
}

uint64_t sub_18A6080D4(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_18A608104()
{
  sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  return _BridgedStoredNSError.hash(into:)();
}

uint64_t sub_18A60815C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A60816C()
{
  sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_18A6081AC()
{
  sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t sub_18A6081EC(void *a1)
{
  id v2;

  sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t sub_18A608250()
{
  sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int sub_18A6082A0()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_18A6082FC()
{
  sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_18A608354()
{
  return sub_18A6083AC(&qword_1EDF6AA08, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83905C);
}

uint64_t sub_18A608380()
{
  return sub_18A6083AC(&qword_1EDF6AA10, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839088);
}

uint64_t sub_18A6083AC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x18D76E7C4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18A6083EC()
{
  return sub_18A6083AC(&qword_1EDF6A7A8, (uint64_t (*)(uint64_t))type metadata accessor for Scope, (uint64_t)&unk_18A8391CC);
}

uint64_t sub_18A608418()
{
  sub_18A6083AC(&qword_1EDF69980, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83930C);
  return Error<>._domain.getter();
}

uint64_t sub_18A608458()
{
  sub_18A6083AC(&qword_1EDF69980, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83930C);
  return Error<>._code.getter();
}

uint64_t sub_18A608498()
{
  sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t sub_18A6084D8()
{
  sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_18A608530()
{
  return sub_18A6083AC(&qword_1EDF699A0, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A839234);
}

uint64_t sub_18A60855C()
{
  return sub_18A6083AC(&qword_1EDF699A8, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83925C);
}

uint64_t sub_18A608588()
{
  return sub_18A6083AC(&qword_1EDF69980, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83930C);
}

uint64_t sub_18A6085B4()
{
  return sub_18A6083AC(&qword_1EDF69978, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A8392DC);
}

uint64_t sub_18A6085E0()
{
  return sub_18A6083AC((unint64_t *)&unk_1EDF69990, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83929C);
}

uint64_t sub_18A60860C()
{
  return sub_18A6083AC(&qword_1EDF6ACB8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_18A8393EC);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_18A6087D4(a1, &qword_1EDF6ACF0);
}

uint64_t sub_18A60864C()
{
  return sub_18A6083AC((unint64_t *)&unk_1EDF6ACC0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_18A8393B4);
}

unint64_t sub_18A60867C()
{
  unint64_t result;

  result = qword_1EDF6A7F8;
  if (!qword_1EDF6A7F8)
  {
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EDF6A7F8);
  }
  return result;
}

uint64_t sub_18A6086B8()
{
  return sub_18A6083AC(&qword_1EDF6ACD0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_18A839424);
}

uint64_t sub_18A6086E4()
{
  return sub_18A6083AC(&qword_1EDF69988, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, (uint64_t)&unk_18A83934C);
}

uint64_t sub_18A608710()
{
  return sub_18A6083AC((unint64_t *)&unk_1EDF6A9E0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839144);
}

uint64_t sub_18A60873C()
{
  return sub_18A6083AC(&qword_1EDF6A9F8, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839110);
}

uint64_t sub_18A608768()
{
  return sub_18A6083AC(&qword_1EDF6AA00, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A8390CC);
}

uint64_t sub_18A608794()
{
  return sub_18A6083AC((unint64_t *)&unk_1EDF6ACD8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_18A8394F4);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_18A6087D4(a1, (unint64_t *)&unk_1EDF6A808);
}

void sub_18A6087D4(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_18A608818()
{
  return sub_18A6083AC(&qword_1EDF6A800, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_18A8394B8);
}

uint64_t sub_18A608844()
{
  return sub_18A6083AC(&qword_1EDF6ACE8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_18A839530);
}

uint64_t sub_18A608870()
{
  return sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
}

uint64_t initializeBufferWithCopyOfBuffer for ChunkInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ChunkInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ChunkInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ChunkInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ChunkInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ChunkInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChunkInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChunkInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChunkInfo()
{
  return &type metadata for ChunkInfo;
}

_QWORD *sub_18A608B00(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_18A608B24()
{
  unint64_t result;

  result = qword_1EDF6AD00;
  if (!qword_1EDF6AD00)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A8396BC, &type metadata for ChunkInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6AD00);
  }
  return result;
}

uint64_t sub_18A608B60(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_BYTE *initializeBufferWithCopyOfBuffer for ChunkInfo.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ChunkInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChunkInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18A608C64 + 4 * byte_18A838F29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18A608C98 + 4 * byte_18A838F24[v4]))();
}

uint64_t sub_18A608C98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A608CA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A608CA8);
  return result;
}

uint64_t sub_18A608CB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A608CBCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18A608CC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A608CC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A608CD4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_18A608CDC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChunkInfo.CodingKeys()
{
  return &type metadata for ChunkInfo.CodingKeys;
}

unint64_t sub_18A608CF8()
{
  unint64_t result;

  result = qword_1EDF6AD10;
  if (!qword_1EDF6AD10)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A839694, &type metadata for ChunkInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6AD10);
  }
  return result;
}

unint64_t sub_18A608D38()
{
  unint64_t result;

  result = qword_1EDF6AD18;
  if (!qword_1EDF6AD18)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A839604, &type metadata for ChunkInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6AD18);
  }
  return result;
}

unint64_t sub_18A608D78()
{
  unint64_t result;

  result = qword_1EDF6AD20;
  if (!qword_1EDF6AD20)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83962C, &type metadata for ChunkInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6AD20);
  }
  return result;
}

uint64_t sub_18A608DC0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_18A608DCC()
{
  uint64_t v0;

  return sub_18A608B60(v0);
}

void CKSyncEngine.__allocating_init(_:)(uint64_t a1)
{
  swift_allocObject();
  CKSyncEngine.init(_:)(a1);
  sub_18A5F379C();
}

void CKSyncEngine.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A7B8);
  v3 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v3 + 24) = 0;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  *(_QWORD *)(v3 + 16) = 0;
  v5 = (uint64_t *)(v3 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_18A608E88(v5, a1);
  os_unfair_lock_unlock(v4);
  sub_18A608F0C(a1);
  sub_18A60A0E0();
}

uint64_t sub_18A608E88(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v5[184];

  swift_release();
  sub_18A60A09C(a2, (uint64_t)v5);
  type metadata accessor for SyncEngine();
  swift_allocObject();
  swift_retain();
  result = sub_18A6770CC();
  *a1 = result;
  return result;
}

uint64_t sub_18A608F0C(uint64_t a1)
{
  _s13ConfigurationVwxx(a1);
  return a1;
}

void CKSyncEngine.database.getter()
{
  uint64_t v0;
  id v1;

  CKSyncEngine.actor.getter();
  v1 = *(id *)(v0 + 136);
  sub_18A5F3AA0();
  sub_18A5F379C();
}

void CKSyncEngine.actor.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_18A608FE4(v2, &v4);
  os_unfair_lock_unlock(v3);
  sub_18A60A0E0();
}

void CKSyncEngine.state.getter()
{
  CKSyncEngine.actor.getter();
  sub_18A60A0F0();
  sub_18A5F3AA0();
  sub_18A5F379C();
}

uint64_t sub_18A608FE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CKSyncEngine.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t CKSyncEngine.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t CKSyncEngine.fetchChanges(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  *(_QWORD *)(v2 + 80) = v1;
  *(_QWORD *)(v2 + 88) = v3;
  *(_BYTE *)(v2 + 73) = *((_BYTE *)a1 + 8);
  *(_OWORD *)(v2 + 96) = *((_OWORD *)a1 + 1);
  v4 = a1[4];
  *(_BYTE *)(v2 + 74) = *((_BYTE *)a1 + 40);
  v5 = a1[6];
  *(_QWORD *)(v2 + 112) = v4;
  *(_QWORD *)(v2 + 120) = v5;
  *(_BYTE *)(v2 + 75) = *((_BYTE *)a1 + 56);
  return sub_18A5F4194();
}

uint64_t sub_18A609088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;

  sub_18A60A10C();
  if (v0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  v3 = *(unsigned __int8 *)(v1 + 75);
  v4 = *(_BYTE *)(v1 + 74);
  v6 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v7 = *(_BYTE *)(v1 + 73);
  v8 = *(_QWORD *)(v1 + 88);
  v11 = *(_OWORD *)(v1 + 96);
  CKSyncEngine.actor.getter();
  *(_QWORD *)(v1 + 128) = v9;
  *(_QWORD *)(v1 + 16) = v8;
  *(_BYTE *)(v1 + 24) = v7;
  *(_OWORD *)(v1 + 32) = v11;
  *(_QWORD *)(v1 + 48) = v6;
  *(_BYTE *)(v1 + 56) = v4;
  *(_QWORD *)(v1 + 64) = v5;
  *(_BYTE *)(v1 + 72) = v3;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 136) = v10;
  *v10 = v1;
  v10[1] = sub_18A609170;
  return sub_18A680764((_OWORD *)(v1 + 16));
}

uint64_t sub_18A609170()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
    return sub_18A5F3A94();
  else
    return sub_18A5F4680(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A6091DC()
{
  return sub_18A60A0D8();
}

uint64_t sub_18A6091E4()
{
  uint64_t v0;
  uint64_t result;
  _BYTE *v2;
  os_unfair_lock_s *v3;
  char v4;

  result = sub_18A609748();
  if ((result & 1) != 0)
  {
    if (qword_1EDF6AA28 != -1)
      swift_once();
    v2 = off_1EDF6AD90;
    v3 = (os_unfair_lock_s *)((char *)off_1EDF6AD90 + 20);
    os_unfair_lock_lock((os_unfair_lock_t)off_1EDF6AD90 + 5);
    if (v0)
    {
      os_unfair_lock_unlock(v3);
      __break(1u);
    }
    else
    {
      v4 = v2[16];
      os_unfair_lock_unlock(v3);
      if ((v4 & 1) != 0)
      {
        related decl 'e' for CKErrorCode.init(_:description:)(12, 0xD00000000000011ELL, 0x800000018A83DC40);
        return swift_willThrow();
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CKSyncEngine.sendChanges(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *(_QWORD *)(v2 + 40) = v1;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 88) = *((_BYTE *)a1 + 8);
  *(_QWORD *)(v2 + 56) = a1[2];
  return sub_18A5F4194();
}

uint64_t sub_18A609314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;

  sub_18A60A10C();
  if (v0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  v4 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v5 = *(_BYTE *)(v1 + 88);
  CKSyncEngine.actor.getter();
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  *(_QWORD *)(v1 + 32) = v3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 72) = v7;
  *v7 = v1;
  v7[1] = sub_18A6093C0;
  return sub_18A6790B0((uint64_t *)(v1 + 16));
}

uint64_t sub_18A6093C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
    return sub_18A5F3A94();
  else
    return sub_18A5F4680(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A60942C()
{
  return sub_18A60A0D8();
}

uint64_t CKSyncEngine.cancelOperations()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_18A5F4194();
}

uint64_t sub_18A609444()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_18A60A10C();
  if (v0)

  CKSyncEngine.actor.getter();
  *(_QWORD *)(v1 + 24) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v3;
  *v3 = v1;
  v3[1] = sub_18A6094B4;
  return sub_18A689560();
}

uint64_t sub_18A6094B4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  sub_18A5F37AC();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

Swift::Void __swiftcall CKSyncEngine.setNeedsToFetchChanges()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (qword_1EDF6A540 != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  sub_18A60990C(v1, (uint64_t)qword_1EDF6A630);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    swift_retain();
    CKSyncEngine.actor.getter();
    sub_18A699D34();
    v6 = v5;
    v8 = v7;
    sub_18A5F3AA0();
    sub_18A5F37AC();
    sub_18A609924(v6, v8, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18A60A100();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18A5C5000, v2, v3, "%s manually setting needsToFetchDatabaseChanges", v4, 0xCu);
    swift_arrayDestroy();
    sub_18A5F392C();
  }

  sub_18A60A100();
  CKSyncEngine.actor.getter();
  sub_18A60A0F0();
  sub_18A5F3AA0();
  objc_msgSend(*(id *)(v0 + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
  sub_18A5F37AC();
}

uint64_t CKSyncEngine.useOpportunisticPushTopic.getter()
{
  uint64_t v0;
  uint64_t v1;

  CKSyncEngine.actor.getter();
  v1 = *(unsigned __int8 *)(v0 + 352);
  swift_release();
  return v1;
}

uint64_t sub_18A6096F8()
{
  uint64_t result;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A4A8);
  swift_allocObject();
  result = TaskLocal.init(wrappedValue:)();
  qword_1EDF753E8 = result;
  return result;
}

uint64_t sub_18A609748()
{
  unsigned __int8 v1;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  TaskLocal.get()();
  return v1;
}

uint64_t sub_18A6097A4()
{
  uint64_t result;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A820);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 0;
  off_1EDF6AD90 = (_UNKNOWN *)result;
  return result;
}

uint64_t static CKSyncEngine.shouldThrowOnCallbackRecursionLock.getter()
{
  if (qword_1EDF6AA28 != -1)
    swift_once();
  return swift_retain();
}

uint64_t CKSyncEngine.objcEngine.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_18A5F4194();
}

uint64_t sub_18A60982C()
{
  uint64_t v0;
  uint64_t v1;

  CKSyncEngine.actor.getter();
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_18A60986C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = MEMORY[0x18D76E914](*(_QWORD *)(v0 + 24) + 120);
  sub_18A5F37AC();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t CKSyncEngine.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  CKSyncEngine.actor.getter();
  sub_18A699D34();
  v1 = v0;
  sub_18A5F37AC();
  return v1;
}

uint64_t sub_18A6098EC()
{
  return CKSyncEngine.description.getter();
}

uint64_t sub_18A60990C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_18A609924(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = sub_18A609A28(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_18A609B7C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_18A609B7C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_18A608B60((uint64_t)v12);
  return v7;
}

uint64_t type metadata accessor for CKSyncEngine()
{
  return objc_opt_self();
}

uint64_t method lookup function for CKSyncEngine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKSyncEngine.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_18A609A28(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_18A609BB8((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_18A609C7C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_18A609B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_18A609BB8(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18A609C7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_18A609D10(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_18A609E80(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)sub_18A609E80((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_18A609D10(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_6:
  sub_18A619274(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_18A609E80(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_18A5F101C((uint64_t *)&unk_1EDF6A8D0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_18A60A018(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_18A609F54(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_18A609F54(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_18A60A018(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_18A60A09C(uint64_t a1, uint64_t a2)
{
  _s13ConfigurationVwcp(a2, a1);
  return a2;
}

uint64_t sub_18A60A0D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A60A0F0()
{
  return swift_retain();
}

uint64_t sub_18A60A100()
{
  return swift_release_n();
}

uint64_t sub_18A60A10C()
{
  return sub_18A6091E4();
}

void (*CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.getter())(void *a1, char a2)
{
  void *v0;
  void (*result)(void *, char);
  void (*v2)(void *, char);
  uint64_t v3;
  uint64_t v4;

  result = (void (*)(void *, char))objc_msgSend(v0, sel_discoverUserIdentitiesCompletionBlock);
  if (result)
  {
    v2 = result;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A60A3E4;
    *(_QWORD *)(v4 + 24) = v3;
    return sub_18A60A448;
  }
  return result;
}

uint64_t sub_18A60A194@<X0>(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  result = (uint64_t)CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.getter();
  if (result)
  {
    v4 = result;
    v5 = v3;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))result;
  return result;
}

id sub_18A60A1F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  return CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter((uint64_t)v4, v3);
}

id CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  _QWORD v9[6];

  v3 = v2;
  if (!a1)
    return objc_msgSend(v2, sel_setDiscoverUserIdentitiesCompletionBlock_, 0);
  v6 = sub_18A5F37B4();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_18A60A504;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_18A60A50C;
  v9[3] = &unk_1E1F59C40;
  v7 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_setDiscoverUserIdentitiesCompletionBlock_, v7);
  _Block_release(v7);
  return (id)sub_18A60A578(a1);
}

void sub_18A60A374(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_18A60A3C0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A60A3E4(uint64_t a1)
{
  uint64_t v1;

  sub_18A60A374(a1, *(_QWORD *)(v1 + 16));
}

void sub_18A60A3EC(void *a1, char a2, void (*a3)(void *))
{
  id v5;

  if ((a2 & 1) != 0)
  {
    v5 = a1;
    a3(a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    a3(0);
  }
}

void sub_18A60A448(void *a1, char a2)
{
  uint64_t v2;

  sub_18A60A3EC(a1, a2 & 1, *(void (**)(void *))(v2 + 16));
}

void sub_18A60A454(void *a1, void (*a2)(void *, uint64_t))
{
  id v4;
  id v5;

  if (!a1)
    goto LABEL_4;
  swift_getErrorValue();
  v4 = a1;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a2(0, 0);
    return;
  }
  v5 = a1;
  a2(a1, 1);

}

void sub_18A60A504(void *a1)
{
  uint64_t v1;

  sub_18A60A454(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

void sub_18A60A50C(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_18A60A560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A60A570()
{
  return swift_release();
}

uint64_t sub_18A60A578(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

id (*CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  void (*v1)(void *, char);
  void (*v3)(void *, char);

  a1[2] = v1;
  *a1 = CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.getter();
  a1[1] = v3;
  return sub_18A60A5BC;
}

id sub_18A60A5BC(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) == 0)
    return sub_18A5F4820();
  sub_18A60A614(*a1);
  sub_18A5F4820();
  return (id)sub_18A60A578(v2);
}

uint64_t sub_18A60A614(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void sub_18A60A62C(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_18A66ECD0(a1, a2 & 1, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_18A60A638()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A60A65C(uint64_t a1)
{
  uint64_t v1;

  sub_18A66ECA4(a1, *(void (**)(_QWORD, _QWORD))(v1 + 16));
}

void sub_18A60A664(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

void CKShareAccessRequestOperation.perShareAccessRequestResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perShareAccessRequestCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60A928;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A60A6F0(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  CKShareAccessRequestOperation.perShareAccessRequestResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60AF04;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))v2;
}

void sub_18A60A754(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60AECC;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKShareAccessRequestOperation.perShareAccessRequestResultBlock.setter((uint64_t)v4, v3);
}

void CKShareAccessRequestOperation.perShareAccessRequestResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = sub_18A5F3F90();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A60AA78, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    swift_retain();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setPerShareAccessRequestCompletionBlock_);
    _Block_release(v6);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerShareAccessRequestCompletionBlock_);
  }
}

void sub_18A60A894(uint64_t a1@<X1>, uint64_t a2@<X2>, NSURL *a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  URL._bridgeToObjectiveC()(a3);
  v6 = v5;
  if (a1)
    v7 = _convertErrorToNSError(_:)();
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);

}

uint64_t sub_18A60A904()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A60A928(uint64_t a1@<X1>, NSURL *a2@<X8>)
{
  uint64_t v2;

  sub_18A60A894(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_18A60A930(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id))
{
  id v7;

  if ((a3 & 1) != 0)
  {
    v7 = a2;
    a4(a1, a2);
    sub_18A60A664(a2, 1);
  }
  else
  {
    a4(a1, 0);
  }
}

void sub_18A60A99C(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;

  sub_18A60A930(a1, a2, a3 & 1, *(void (**)(uint64_t, id))(v3 + 16));
}

void sub_18A60A9A8(uint64_t a1, void *a2, void (*a3)(uint64_t, void *, uint64_t))
{
  id v6;
  id v7;

  if (!a2)
    goto LABEL_4;
  swift_getErrorValue();
  v6 = a2;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a3(a1, 0, 0);
    return;
  }
  v7 = a2;
  a3(a1, a2, 1);

}

void sub_18A60AA70(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_18A60A9A8(a1, a2, *(void (**)(uint64_t, void *, uint64_t))(v2 + 16));
}

uint64_t sub_18A60AA78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  id v10;
  uint64_t v12;

  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, void *))(a1 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v10 = a3;
  v9(v8, a3);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_18A60AB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A60AB4C()
{
  return swift_release();
}

void CKShareAccessRequestOperation.perShareAccessRequestResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKShareAccessRequestOperation.perShareAccessRequestResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A60AB84(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKShareAccessRequestOperation.perShareAccessRequestResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKShareAccessRequestOperation.shareAccessRequestResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_shareAccessRequestCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60A3E4;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A60AC14(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKShareAccessRequestOperation.shareAccessRequestResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A60AC78(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKShareAccessRequestOperation.shareAccessRequestResultBlock.setter((uint64_t)v4, v3);
}

void CKShareAccessRequestOperation.shareAccessRequestResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A60A50C, MEMORY[0x1E0C809B0], 1107296256, v9, v10);
    sub_18A60A614(a1);
    swift_retain();
    v8 = swift_release();
    sub_18A5F37C8(v8, sel_setShareAccessRequestCompletionBlock_);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setShareAccessRequestCompletionBlock_);
  }
}

uint64_t sub_18A60ADDC()
{
  swift_release();
  return swift_deallocObject();
}

void CKShareAccessRequestOperation.shareAccessRequestResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKShareAccessRequestOperation.shareAccessRequestResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A60AE30(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKShareAccessRequestOperation.shareAccessRequestResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A60AE4C(_QWORD *a1, char a2, uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  v6 = a1[1];
  if ((a2 & 1) == 0)
    return sub_18A5F37D4();
  a4(*a1, v6);
  sub_18A5F37D4();
  return a5(v5, v6);
}

uint64_t sub_18A60AECC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t *);
  uint64_t v6;
  char v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 16);
  v6 = a2;
  v7 = a3 & 1;
  return v4(a1, &v6);
}

uint64_t sub_18A60AF04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

id sub_18A60AF58()
{
  uint64_t v0;
  objc_super v2;

  *(_QWORD *)(v0 + OBJC_IVAR___CKShareBlockedIdentity__wrapped) = 0;
  v2.super_class = (Class)CKShareBlockedIdentity;
  return objc_msgSendSuper2(&v2, sel_init);
}

void __swiftcall CKShareBlockedIdentity.init(userIdentity:)(CKShareBlockedIdentity *__return_ptr retstr, CKUserIdentity *userIdentity)
{
  void *v2;

  objc_msgSend(objc_allocWithZone((Class)sub_18A5F482C()), sel_initWithUserIdentity_, v2);

  sub_18A5F379C();
}

char *CKShareBlockedIdentity.init(userIdentity:)(uint64_t a1)
{
  void *v1;
  id v3;
  objc_class *v4;
  char *v5;
  char *v6;
  id v7;
  void *v8;
  objc_super v10;

  v3 = objc_msgSend(v1, sel_init);
  v4 = (objc_class *)sub_18A5F468C();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = a1;
  v10.receiver = v5;
  v10.super_class = v4;
  v6 = (char *)v3;
  v7 = objc_msgSendSuper2(&v10, sel_init);
  v8 = *(void **)&v6[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  *(_QWORD *)&v6[OBJC_IVAR___CKShareBlockedIdentity__wrapped] = v7;

  return v6;
}

id CKShareBlockedIdentity.userIdentity.getter()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  if (v1)
    return *(id *)(v1 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
  __break(1u);
  return result;
}

uint64_t static CKShareBlockedIdentity.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall CKShareBlockedIdentity.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  NSString *v5;
  uint64_t v6;
  NSString *v7;
  NSString *v8;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  if (v2)
  {
    v4 = *(id *)(v2 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
    v5 = NSStringFromSelector(sel_userIdentity);
    if (!v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = (NSString *)MEMORY[0x18D76C7CC](v6);
      swift_bridgeObjectRelease();
      v5 = v7;
    }
    v8 = v5;
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4);

  }
  else
  {
    __break(1u);
  }
}

void __swiftcall CKShareBlockedIdentity.init(coder:)(CKShareBlockedIdentity_optional *__return_ptr retstr, NSCoder coder)
{
  void *v2;

  objc_msgSend(objc_allocWithZone((Class)sub_18A5F482C()), sel_initWithCoder_, v2);

  sub_18A5F379C();
}

id CKShareBlockedIdentity.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  NSString *v5;
  uint64_t v6;
  id v7;
  objc_class *v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  objc_super v16;
  objc_super v17;
  uint64_t v18;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;

  v3 = OBJC_IVAR___CKShareBlockedIdentity__wrapped;
  *(_QWORD *)&v1[OBJC_IVAR___CKShareBlockedIdentity__wrapped] = 0;
  v4 = v1;
  v5 = NSStringFromSelector(sel_userIdentity);
  if (!v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = (NSString *)MEMORY[0x18D76C7CC](v6);
    swift_bridgeObjectRelease();
  }
  v7 = objc_msgSend(a1, sel_decodeObjectForKey_, v5);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  sub_18A60B834((uint64_t)v19, (uint64_t)v20);
  if (!v21)
  {

    sub_18A60B87C((uint64_t)v20);
LABEL_11:
    v13 = *(void **)&v1[v3];

    type metadata accessor for CKShareBlockedIdentity(v14);
    swift_deallocPartialClassInstance();
    return 0;
  }
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6ADD0);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_11;
  }
  v8 = (objc_class *)sub_18A5F468C();
  v9 = (char *)objc_allocWithZone(v8);
  *(_QWORD *)&v9[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = v18;
  v17.receiver = v9;
  v17.super_class = v8;
  v10 = objc_msgSendSuper2(&v17, sel_init);
  v11 = *(void **)&v1[v3];
  *(_QWORD *)&v1[v3] = v10;

  v16.receiver = v4;
  v16.super_class = (Class)CKShareBlockedIdentity;
  v12 = objc_msgSendSuper2(&v16, sel_init);

  return v12;
}

void CKShareBlockedIdentity.copy(with:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)(v2 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  if (v4)
  {
    v5 = type metadata accessor for CKShareBlockedIdentity(a1);
    v6 = v4;
    CKShareBlockedIdentity.init(_:)();
    a2[3] = v5;
    *a2 = v7;
  }
  else
  {
    __break(1u);
  }
}

void CKShareBlockedIdentity.init(_:)()
{
  uint64_t v0;
  char *v1;
  void *v2;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)sub_18A5F482C()), sel_init);
  v2 = *(void **)&v1[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  *(_QWORD *)&v1[OBJC_IVAR___CKShareBlockedIdentity__wrapped] = v0;

  sub_18A5F379C();
}

uint64_t CKShareBlockedIdentity.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  char v8;
  id v10;
  char *v11;
  _BYTE v12[24];
  uint64_t v13;

  v2 = sub_18A60B908(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_18A60B87C((uint64_t)v12);
    goto LABEL_7;
  }
  type metadata accessor for CKShareBlockedIdentity(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  v3 = *(void **)(v1 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  v4 = *(void **)&v11[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  if (!v3)
  {
    v10 = v4;

    if (!v4)
    {
      v8 = 1;
      return v8 & 1;
    }

    goto LABEL_7;
  }
  if (!v4)
  {

    goto LABEL_7;
  }
  sub_18A5F468C();
  v5 = v3;
  v6 = v4;
  v7 = v5;
  v8 = static NSObject.== infix(_:_:)();

  return v8 & 1;
}

uint64_t CKShareBlockedIdentity.description.getter()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  objc_super v16;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)&v0[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSendSuper2(&v16, sel_description);
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    v18 = v4;
    v19 = v6;
    v7._countAndFlagsBits = 8250;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    sub_18A5F468C();
    v8 = v2;
    v9._countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v9);

    swift_bridgeObjectRelease();
  }
  else
  {
    v17.receiver = v0;
    v17.super_class = (Class)CKShareBlockedIdentity;
    v10 = objc_msgSendSuper2(&v17, sel_description);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    v18 = v11;
    v19 = v13;
    v14._countAndFlagsBits = 0x6C696E203ALL;
    v14._object = (void *)0xE500000000000000;
    String.append(_:)(v14);
  }
  return v18;
}

void CKShareBlockedIdentity.wrapped.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  sub_18A5F379C();
}

uint64_t sub_18A60B834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6A278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18A60B87C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_18A5F101C(&qword_1EDF6A278);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CKShareBlockedIdentity(uint64_t a1)
{
  return sub_18A60B8D0(a1, (unint64_t *)&unk_1EDF6AF00);
}

uint64_t sub_18A60B8D0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_18A60B908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6A278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void NSItemProvider.registerCKShare(container:allowedSharingOptions:preparationHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  id v13;
  char aBlock;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t ObjCClassFromMetadata;
  _QWORD *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = objc_msgSend(a1, sel_containerID);
  v12 = CKSharingContainerSupportsAdminParticipants(v8, v9, v10, v11);

  if (v12)
    objc_msgSend(a2, sel_setSupportAllowingAddedParticipantsToInviteOthers_, 1);
  v13 = CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(a1);
  sub_18A5F3DF8((uint64_t)v13, &qword_1EDF6AF10);
  swift_getObjCClassFromMetadata();
  *(_QWORD *)(sub_18A5F37BC() + 16) = a2;
  aBlock = MEMORY[0x1E0C809B0];
  v15 = sub_18A5F41B4((uint64_t)&unk_1E1F59C90, v26, a3, MEMORY[0x1E0C809B0], 1107296256, v32, v35);
  v16 = a2;
  swift_release();
  sub_18A5F4694();
  _Block_release(v15);
  sub_18A5F3DF8(v17, &qword_1EDF6AF18);
  swift_getObjCClassFromMetadata();
  *(_QWORD *)(sub_18A5F37BC() + 16) = v13;
  v18 = sub_18A5F41B4((uint64_t)&unk_1E1F5A390, v27, v30, aBlock, 1107296256, v33, v36);
  v19 = v13;
  swift_release();
  sub_18A5F4694();
  _Block_release(v18);
  sub_18A5F3DF8(v20, (unint64_t *)&unk_1EDF6AF20);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v31;
  v22[3] = a4;
  v22[4] = v19;
  v22[5] = v16;
  v23 = sub_18A5F41B4((uint64_t)&unk_1E1F5A020, v28, v31, aBlock, 1107296256, v34, v37);
  v24 = v16;
  v25 = v19;
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, 0, v23);
  _Block_release(v23);

}

uint64_t sub_18A60BB98()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_18A60BBBC(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(_QWORD, uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(sub_18A60C230, v4);
  swift_release();
  swift_release();
  return v5;
}

uint64_t sub_18A60BC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A60BC48()
{
  return swift_release();
}

void sub_18A60BC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t sub_18A60BCA8(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16), 0);
  return 0;
}

uint64_t sub_18A60BCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v22;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  sub_18A5F101C(&qword_1EDF6AF90);
  swift_allocObject();
  swift_retain();
  sub_18A61CAA4((uint64_t)sub_18A60C0C4, v14);
  v16 = v15;
  v17 = type metadata accessor for TaskPriority();
  sub_18A5F1010((uint64_t)v13, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v16;
  v18[5] = a3;
  v18[6] = a4;
  v18[7] = a5;
  v18[8] = a6;
  swift_retain();
  v19 = a5;
  v20 = a6;
  sub_18A670ABC((uint64_t)v13, (uint64_t)&unk_1EDF6AFA0, (uint64_t)v18);
  swift_release();
  return 0;
}

uint64_t sub_18A60BE28()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18A60BE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A60BCDC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_18A60BE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch();
}

uint64_t sub_18A60BE88()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = (int *)v0[3];
  v0[7] = sub_18A61C834();
  v0[8] = v2;
  v5 = (uint64_t (*)(void))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_18A60BEEC;
  return v5();
}

uint64_t sub_18A60BEEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  return swift_task_switch();
}

uint64_t sub_18A60BF60(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void (*v3)(void **, uint64_t *);
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v9;
  uint64_t v10;

  v2 = *(void **)(v1 + 88);
  v3 = *(void (**)(void **, uint64_t *))(v1 + 56);
  v4 = *(void **)(v1 + 40);
  v5 = *(void **)(v1 + 48);
  sub_18A5F3DF8(a1, (unint64_t *)&unk_1EDF6AF20);
  v6 = v2;
  v7 = (void *)sub_18A63E2F0(v6, v4, v5);
  v9 = v7;
  v10 = 0;
  v3(&v9, &v10);

  swift_release();
  return sub_18A5F4838(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A60C008()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t *, id *);
  void *v3;
  id v4;
  uint64_t v6;
  id v7;

  v1 = *(void **)(v0 + 80);
  v2 = *(void (**)(uint64_t *, id *))(v0 + 56);
  v3 = (void *)_convertErrorToNSError(_:)();
  v4 = CKXPCSuitableError(v3);

  v6 = 0;
  v7 = v4;
  v2(&v6, &v7);

  swift_release();
  return sub_18A5F4838(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Void __swiftcall NSItemProvider.registerCKShare(_:container:allowedSharingOptions:)(CKShare *_, CKContainer *container, CKAllowedSharingOptions *allowedSharingOptions)
{
  void *v3;

  objc_msgSend(v3, sel_registerCKShare_container_allowedSharingOptions_, _, container, allowedSharingOptions);
}

uint64_t sub_18A60C0A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A60C0C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_18A60C0EC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18A60C130(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_18A60C1C4;
  return sub_18A60BE68(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18A60C1C4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18A60C20C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A60C230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A60BC50(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t static CKRecordZoneID.defaultZoneName.getter()
{
  uint64_t v0;

  if (qword_1EDF6AA38 != -1)
    swift_once();
  sub_18A5F4844();
  return v0;
}

void __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(CKRecordZoneID *__return_ptr retstr, Swift::String zoneName, Swift::String ownerName)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;

  object = ownerName._object;
  countAndFlagsBits = ownerName._countAndFlagsBits;
  v5 = zoneName._object;
  v6 = zoneName._countAndFlagsBits;
  v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v8 = (void *)MEMORY[0x18D76C7CC](v6, v5);
  swift_bridgeObjectRelease();
  v9 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_initWithZoneName_ownerName_, v8, v9);

}

void sub_18A60C344()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  CKRecordZoneID *v7;
  uint64_t v8;

  sub_18A60C4D4();
  if (qword_1EDF6AA38 != -1)
    swift_once();
  v0 = qword_1EDF6AFB8;
  v1 = (void *)unk_1EDF6AFC0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v0;
  v5._object = v1;
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  CKRecordZoneID.init(zoneName:ownerName:)(v7, v5, v6);
  qword_1EDF6AFB0 = v8;
}

id static CKRecordZoneID.default.getter()
{
  if (qword_1EDF6AA30 != -1)
    swift_once();
  return (id)qword_1EDF6AFB0;
}

uint64_t sub_18A60C428()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6AFB8 = result;
  unk_1EDF6AFC0 = v1;
  return result;
}

uint64_t sub_18A60C454()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6AFC8 = result;
  unk_1EDF6AFD0 = v1;
  return result;
}

uint64_t CKRecordZoneDefaultName.getter()
{
  uint64_t v0;

  if (qword_1EDF6AA40 != -1)
    swift_once();
  sub_18A5F4844();
  return v0;
}

unint64_t sub_18A60C4D4()
{
  unint64_t result;

  result = qword_1ECD967B0;
  if (!qword_1ECD967B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECD967B0);
  }
  return result;
}

uint64_t sub_18A60C510()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6AFD8 = result;
  unk_1EDF6AFE0 = v1;
  return result;
}

uint64_t static CKShare.SystemFieldKey.title.getter()
{
  return sub_18A60C5F4();
}

uint64_t sub_18A60C55C()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6AFE8 = result;
  unk_1EDF6AFF0 = v1;
  return result;
}

uint64_t static CKShare.SystemFieldKey.thumbnailImageData.getter()
{
  return sub_18A60C5F4();
}

uint64_t sub_18A60C5A8()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6AFF8 = result;
  unk_1EDF6B000 = v1;
  return result;
}

uint64_t static CKShare.SystemFieldKey.shareType.getter()
{
  return sub_18A60C5F4();
}

uint64_t sub_18A60C5F4()
{
  uint64_t v0;
  char v1;

  sub_18A5F3AB4();
  if (!v1)
    swift_once();
  sub_18A5F3E00();
  return v0;
}

uint64_t sub_18A60C62C()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6B008 = result;
  unk_1EDF6B010 = v1;
  return result;
}

uint64_t CKRecordTypeShare.getter()
{
  return sub_18A60C5F4();
}

uint64_t sub_18A60C678()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6B018 = result;
  unk_1EDF6B020 = v1;
  return result;
}

uint64_t CKShareTitleKey.getter()
{
  return sub_18A60C5F4();
}

uint64_t sub_18A60C6C4()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6B028 = result;
  unk_1EDF6B030 = v1;
  return result;
}

uint64_t CKShareThumbnailImageDataKey.getter()
{
  return sub_18A60C5F4();
}

uint64_t sub_18A60C710()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6B038 = result;
  unk_1EDF6B040 = v1;
  return result;
}

uint64_t CKShareTypeKey.getter()
{
  return sub_18A60C5F4();
}

ValueMetadata *type metadata accessor for CKShare.SystemFieldKey()
{
  return &type metadata for CKShare.SystemFieldKey;
}

id sub_18A60C76C()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR___CKDeviceCapability__wrapped];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  sub_18A60FA88(0, 0, 0);
  v3.receiver = v0;
  v3.super_class = (Class)CKDeviceCapability;
  return objc_msgSendSuper2(&v3, sel_init);
}

void CKDeviceCapability.init(level:name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  void *v11;
  void *v12;

  v10 = objc_allocWithZone((Class)sub_18A61034C());
  v11 = (void *)MEMORY[0x18D76C7CC](a2, a3);
  swift_bridgeObjectRelease();
  v12 = (void *)MEMORY[0x18D76C7CC](a4, a5);
  sub_18A5F37E0();
  objc_msgSend(v10, sel_initWithLevel_name_value_, a1, v11, v12);

  sub_18A5F3814();
}

void CKDeviceCapability.init(level:name:value:)(int a1)
{
  void *v1;
  id v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = objc_msgSend(v1, sel_init);
  v4 = a1 - 1;
  if (v4 >= 3)
  {
    sub_18A5F3944();
    sub_18A5F37A4();
  }
  else
  {
    v5 = (char *)v3;
    sub_18A610354();
    sub_18A610354();
    v6 = 128;
    while (1)
    {
      sub_18A61039C();
      v7 = sub_18A61038C();
      v8 = MEMORY[0x18D76C928](v7);
      if (v9)
        break;
      if (!--v6)
      {
        sub_18A5F394C();
        v10 = 0;
        v11 = 0xE000000000000000;
        goto LABEL_8;
      }
    }
    v10 = v8;
    v11 = v9;
    sub_18A5F394C();
LABEL_8:
    v12 = 128;
    while (1)
    {
      sub_18A5F40AC();
      v13 = sub_18A610440(v12);
      v14 = MEMORY[0x18D76C928](v13);
      if (v15)
        break;
      if (!--v12)
      {
        sub_18A5F3944();
        v16 = 0;
        v17 = 0xE000000000000000;
        goto LABEL_13;
      }
    }
    v16 = v14;
    v17 = v15;
    sub_18A5F3944();
LABEL_13:
    v18 = (unint64_t *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped];
    v19 = *(_QWORD *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped];
    v20 = *(_QWORD *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped + 8];
    v21 = *(_QWORD *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped + 16];
    *v18 = v4;
    v18[1] = v10;
    v18[2] = v11;
    v18[3] = v16;
    v18[4] = v17;
    sub_18A60FA88(v19, v20, v21);

  }
  sub_18A5F3CFC();
}

uint64_t CKDeviceCapability.name.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16);
  if (result)
  {
    swift_bridgeObjectRetain();
    return String.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CKDeviceCapability.value.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
  {
    swift_bridgeObjectRetain();
    return String.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CKDeviceCapability.level.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
    return *(unsigned __int8 *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped) + 1;
  __break(1u);
  return result;
}

uint64_t sub_18A60CB54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x6C6576656CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_18A60CC80()
{
  return 3;
}

uint64_t sub_18A60CC88(char a1)
{
  if (!a1)
    return 0x6C6576656CLL;
  if (a1 == 1)
    return 1701667182;
  return 0x65756C6176;
}

uint64_t sub_18A60CCD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_18A5F101C(&qword_1EDF69268);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_18A608B00(a1, a1[3]);
  sub_18A60FF28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_18A60CE0C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = sub_18A5F101C((uint64_t *)&unk_1EDF692B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18A608B00(a1, a1[3]);
  sub_18A60FF28();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return sub_18A608B60((uint64_t)a1);
  v24 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v23 = 1;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  v21 = v10;
  v22 = 2;
  swift_bridgeObjectRetain();
  v13 = KeyedDecodingContainer.decode(_:forKey:)();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17 = v13;
  v16(v8, v5);
  swift_bridgeObjectRetain();
  sub_18A608B60((uint64_t)a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v19 = v21;
  *a2 = v9;
  a2[1] = v19;
  a2[2] = v12;
  a2[3] = v17;
  a2[4] = v15;
  return result;
}

uint64_t sub_18A60CFEC()
{
  char *v0;

  return sub_18A60CC88(*v0);
}

uint64_t sub_18A60CFF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A60CB54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18A60D018@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18A60CC80();
  *a1 = result;
  return result;
}

uint64_t sub_18A60D03C()
{
  sub_18A60FF28();
  return CodingKey.description.getter();
}

uint64_t sub_18A60D064()
{
  sub_18A60FF28();
  return CodingKey.debugDescription.getter();
}

double sub_18A60D08C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_18A60CE0C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_18A60D0D0(_QWORD *a1)
{
  return sub_18A60CCD0(a1);
}

Swift::String __swiftcall CKDeviceCapability.sqliteRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String result;

  type metadata accessor for String.Encoding();
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78]();
  sub_18A6103BC();
  type metadata accessor for JSONEncoder();
  sub_18A610420();
  v1 = JSONEncoder.init()();
  if (*(_QWORD *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
  {
    sub_18A60FAB8();
    swift_bridgeObjectRetain();
    sub_18A61039C();
    dispatch thunk of JSONEncoder.encode<A>(_:)();
    sub_18A5F394C();
    swift_bridgeObjectRelease();
    static String.Encoding.utf8.getter();
    v3 = String.init(data:encoding:)();
    if (v4)
    {
      v5 = v3;
      v6 = v4;
      sub_18A6103F4();
      sub_18A5F3AA0();
    }
    else
    {
      sub_18A6103F4();
      sub_18A5F3AA0();
      v5 = 0xD000000000000034;
      v6 = 0x800000018A83DED0;
    }
    v1 = v5;
    v2 = (void *)v6;
  }
  else
  {
    __break(1u);
  }
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

void static CKDeviceCapability.fromSqliteRepresentation(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  void *object;
  void *v7;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  CloudKit::CKDeviceCapability::Level v23;
  CKDeviceCapability *v24;
  uint64_t v25;
  uint64_t v26;
  CloudKit::CKDeviceCapability v27;

  v0 = type metadata accessor for String.Encoding();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5 >> 60 != 15)
  {
    type metadata accessor for JSONDecoder();
    sub_18A610420();
    JSONDecoder.init()();
    sub_18A60FBE8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    object = v27.name._object;
    v7 = v27.value._object;
    if ((unint64_t)(*(_QWORD *)&v27.level - 1) >= 3)
    {
      sub_18A5F438C();
      sub_18A5F37A4();
      sub_18A610384();
      sub_18A5F42B4();
    }
    else
    {
      v26 = *(_QWORD *)&v27.level - 1;
      countAndFlagsBits = v27.name._countAndFlagsBits;
      v9 = v27.value._countAndFlagsBits;
      v10 = 128;
      while (1)
      {
        swift_bridgeObjectRetain();
        v11 = sub_18A60F9A4(v10, countAndFlagsBits, (unint64_t)object);
        v12 = MEMORY[0x18D76C928](v11);
        if (v13)
          break;
        if (!--v10)
        {
          sub_18A610384();
          v14 = 0;
          v15 = (void *)0xE000000000000000;
          goto LABEL_10;
        }
      }
      v14 = v12;
      v15 = v13;
      sub_18A610384();
LABEL_10:
      v16 = 128;
      while (1)
      {
        swift_bridgeObjectRetain();
        v17 = sub_18A60F9A4(v16, v9, (unint64_t)v7);
        v18 = MEMORY[0x18D76C928](v17);
        if (v19)
          break;
        if (!--v16)
        {
          v20 = sub_18A5F37A4();
          v21 = 0;
          v22 = (void *)0xE000000000000000;
          goto LABEL_15;
        }
      }
      v21 = v18;
      v22 = v19;
      v20 = sub_18A5F37A4();
LABEL_15:
      v23 = (char)v26;
      type metadata accessor for CKDeviceCapability(v20);
      v27.level = v23;
      v27.name._countAndFlagsBits = v14;
      v27.name._object = v15;
      v27.value._countAndFlagsBits = v21;
      v27.value._object = v22;
      CKDeviceCapability.init(_:)(v24, &v27);
      sub_18A5F438C();
      sub_18A5F42B4();
    }
  }
  sub_18A5F37E8();
}

void __swiftcall CKDeviceCapability.init(_:)(CKDeviceCapability *__return_ptr retstr, CloudKit::CKDeviceCapability *a2)
{
  uint64_t level;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  level = a2->level;
  countAndFlagsBits = a2->name._countAndFlagsBits;
  object = a2->name._object;
  v5 = a2->value._countAndFlagsBits;
  v6 = a2->value._object;
  v7 = (uint64_t *)((char *)objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_init)
                 + OBJC_IVAR___CKDeviceCapability__wrapped);
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  *v7 = level;
  v7[1] = countAndFlagsBits;
  v7[2] = (uint64_t)object;
  v7[3] = v5;
  v7[4] = (uint64_t)v6;
  sub_18A60FA88(v8, v9, v10);
  sub_18A5F3800();
}

void static CKDeviceCapability.sqliteRepresentations(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 >> 62)
  {
    sub_18A5F3FAC();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F37E0();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
  {
LABEL_12:
    sub_18A5F3CFC();
    return;
  }
  v12 = MEMORY[0x1E0DEE9D8];
  sub_18A60FC4C();
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v4 = (id)MEMORY[0x18D76CEB0](v3, a1);
      else
        v4 = *(id *)(a1 + 8 * v3 + 32);
      v5 = v4;
      v6 = objc_msgSend(v4, sel_sqliteRepresentation);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;

      v10 = *(_QWORD *)(v12 + 16);
      if (v10 >= *(_QWORD *)(v12 + 24) >> 1)
        sub_18A60FC4C();
      ++v3;
      *(_QWORD *)(v12 + 16) = v10 + 1;
      v11 = v12 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
    }
    while (v2 != v3);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t static CKDeviceCapability.fromSqliteRepresentations(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  result = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (void *)sub_18A61034C();
    sub_18A5F3FAC();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      v9 = (void *)MEMORY[0x18D76C7CC](v7, v8);
      v10 = objc_msgSend(v5, sel_fromSqliteRepresentation_, v9);
      sub_18A610400();

      if (v1)
      {
        MEMORY[0x18D76C9DC]();
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    sub_18A5F37E0();
    return v11;
  }
  return result;
}

Swift::Void __swiftcall CKDeviceCapability.encode(with:)(NSCoder with)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  NSString *v5;

  v2 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped);
  if (*(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
  {
    v4 = *v2;
    v5 = NSStringFromSelector(sel_level);
    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_18A6103A4();
    }
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v4 + 1, v5);

    if (*((_QWORD *)v2 + 2))
    {
      sub_18A5F40AC();
      sub_18A5F41C0();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x18A60DA18);
}

void sub_18A60DA54()
{
  void *v0;
  void *v1;

}

id CKDeviceCapability.init(coder:)(void *a1)
{
  char *v1;
  uint64_t *v3;
  char *v4;
  NSString *v5;
  signed int v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  objc_super v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[4];

  v3 = (uint64_t *)&v1[OBJC_IVAR___CKDeviceCapability__wrapped];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[4] = 0;
  v4 = v1;
  v5 = NSStringFromSelector(sel_level);
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A610368();
  }
  v6 = objc_msgSend(a1, sel_decodeInt32ForKey_, v5);

  if ((unint64_t)(v6 - 1) >= 3)
    goto LABEL_15;
  v7 = NSStringFromSelector(sel_name);
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A610368();
  }
  v8 = objc_msgSend(a1, sel_decodeObjectForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    v9 = swift_unknownObjectRelease();
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  sub_18A61040C(v9, v10, &qword_1EDF6A278, v11, v12, v13, v14, v15, v43);
  if (!v51[3])
  {

    sub_18A60FCC4((uint64_t)v51, &qword_1EDF6A278);
    goto LABEL_23;
  }
  if ((sub_18A610370() & 1) == 0)
  {
LABEL_15:

LABEL_23:
    sub_18A60FA88(*v3, v3[1], v3[2]);

    type metadata accessor for CKDeviceCapability(v31);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v16 = NSStringFromSelector(sel_value);
  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A610368();
  }
  v17 = objc_msgSend(a1, sel_decodeObjectForKey_, v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    v18 = swift_unknownObjectRelease();
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  sub_18A61040C(v18, v19, &qword_1EDF6A278, v20, v21, v22, v23, v24, v44);
  if ((sub_18A610370() & 1) == 0)
  {

    sub_18A5F3944();
    goto LABEL_23;
  }
  v45 = v4;
  sub_18A5F45A4();
  v51[0] = v47;
  v51[1] = v48;
  sub_18A5F45A4();
  v25 = 128;
  while (1)
  {
    sub_18A61039C();
    v26 = sub_18A61038C();
    v27 = MEMORY[0x18D76C928](v26);
    if (v28)
      break;
    if (!--v25)
    {
      sub_18A5F394C();
      v29 = 0;
      v30 = 0xE000000000000000;
      goto LABEL_27;
    }
  }
  v29 = v27;
  v30 = v28;
  sub_18A5F394C();
LABEL_27:
  v34 = 128;
  while (1)
  {
    sub_18A5F40AC();
    v35 = sub_18A610440(v34);
    v36 = MEMORY[0x18D76C928](v35);
    if (v37)
      break;
    if (!--v34)
    {
      sub_18A5F3944();
      v38 = 0;
      v39 = 0xE000000000000000;
      goto LABEL_32;
    }
  }
  v38 = v36;
  v39 = v37;
  sub_18A5F3944();
LABEL_32:
  v40 = *v3;
  v41 = v3[1];
  v42 = v3[2];
  *v3 = v6 - 1;
  v3[1] = v29;
  v3[2] = v30;
  v3[3] = v38;
  v3[4] = v39;
  sub_18A60FA88(v40, v41, v42);

  v46.receiver = v45;
  v46.super_class = (Class)CKDeviceCapability;
  v32 = objc_msgSendSuper2(&v46, sel_init);

  return v32;
}

uint64_t CKDeviceCapability.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  char *v23;
  _BYTE v24[24];
  uint64_t v25;

  sub_18A60FC98(a1, (uint64_t)v24, &qword_1EDF6A278);
  if (!v25)
  {
    sub_18A60FCC4((uint64_t)v24, &qword_1EDF6A278);
    goto LABEL_13;
  }
  type metadata accessor for CKDeviceCapability(v2);
  if ((sub_18A610370() & 1) == 0)
  {
LABEL_13:
    v16 = 0;
    return v16 & 1;
  }
  v3 = v1 + OBJC_IVAR___CKDeviceCapability__wrapped;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 8);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 16);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped];
  v9 = *(_QWORD *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 8];
  v12 = *(_QWORD *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 16];
  v11 = *(_QWORD *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 24];
  v13 = *(_QWORD *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 32];
  if (!v7)
  {
    v22 = v5;
    sub_18A60FC68(v10, v9, v12);

    if (!v12)
    {
      v16 = 1;
      return v16 & 1;
    }
    goto LABEL_12;
  }
  if (!v12)
  {
    v22 = v5;
    swift_bridgeObjectRetain_n();
    sub_18A61039C();
    sub_18A5F3944();

LABEL_12:
    sub_18A60FA88(v22, v4, v7);
    sub_18A60FA88(v10, v9, v12);
    goto LABEL_13;
  }
  v14 = v10 ^ v5;
  v15 = v5;
  if (v14)
  {
    v16 = 0;
  }
  else
  {
    v18 = v4 == v9 && v7 == v12;
    if (v18
      || (v19 = *(_QWORD *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 24],
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(),
          v11 = v19,
          v16 = 0,
          (v20 & 1) != 0))
    {
      if (v6 == v11 && v8 == v13)
        v16 = 1;
      else
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();

  sub_18A5F394C();
  sub_18A5F3944();
  sub_18A60FA88(v15, v4, v7);
  return v16 & 1;
}

char *CKDeviceCapability.description.getter()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  id v7;
  objc_super v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v11;

  if (*(_QWORD *)&v0[OBJC_IVAR___CKDeviceCapability__wrapped + 16])
  {
    v8.super_class = (Class)CKDeviceCapability;
    sub_18A5F3FAC();
    sub_18A5F40AC();
    v1 = objc_msgSendSuper2(&v8, sel_description);
    v2 = sub_18A61044C();
    v4 = v3;

    v9 = v2;
    v10 = v4;
    sub_18A5F4380();
    v5._countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v5);
    sub_18A5F37E0();
    return (char *)v9;
  }
  else
  {
    v11.receiver = v0;
    v11.super_class = (Class)CKDeviceCapability;
    v7 = objc_msgSendSuper2(&v11, sel_description);
    sub_18A610418();
    sub_18A610378();
    sub_18A5F44A0();
    return v0;
  }
}

uint64_t CKDeviceCapability.wrapped.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 16);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 24);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 32);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_18A60FC68(v2, v3, v4);
}

id sub_18A60E188()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  char v12;
  Class isa;
  char *v14;
  uint64_t v16;
  objc_super v17;
  char v18;

  sub_18A5F101C(&qword_1EDF6A680);
  v1 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v1);
  v6 = (char *)&v16 - v5;
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for Date();
  sub_18A5F1010((uint64_t)v8, 1, 1, v9);
  v18 = 0;
  sub_18A60FC98((uint64_t)v8, (uint64_t)v6, &qword_1EDF6A680);
  sub_18A60FC98((uint64_t)v6, (uint64_t)v3, &qword_1EDF6A680);
  v10 = sub_18A5F105C((uint64_t)v3, 1, v9);
  v11 = v0;
  if (v10 == 1)
  {
    sub_18A60FCC4((uint64_t)v6, &qword_1EDF6A680);
    v12 = 0;
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18A60FCC4((uint64_t)v6, &qword_1EDF6A680);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v3, v9);
    v12 = v18;
  }
  sub_18A60FCC4((uint64_t)v8, &qword_1EDF6A680);
  v14 = &v11[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  *v14 = v12;
  *((_QWORD *)v14 + 1) = isa;

  v17.receiver = v11;
  v17.super_class = (Class)CKDeviceCapabilityCheckOptions;
  return objc_msgSendSuper2(&v17, sel_init);
}

void CKDeviceCapabilityCheckOptions.init(excludeDevicesWithoutCapabilityCheckingSupport:excludeZoneAccessBefore:)(char a1, uint64_t a2)
{
  uint64_t v4;
  Class isa;

  v4 = sub_18A5F40B4();
  isa = 0;
  if (sub_18A5F105C(a2, 1, v4) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
  }
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithExcludeDevicesWithoutCapabilityCheckingSupport_excludeZoneAccessBefore_, a1 & 1, isa);

  sub_18A5F3814();
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  int v18;
  char *v19;
  char v20;
  Class isa;
  char *v22;
  void *v23;
  uint64_t v24;
  char v25;

  v3 = v2;
  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v6);
  sub_18A6103D4();
  v9 = v7 - v8;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v24 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v24 - v14;
  v16 = objc_msgSend(v3, sel_init);
  sub_18A6103EC(a2, (uint64_t)v15);
  v25 = a1;
  sub_18A6103EC((uint64_t)v15, (uint64_t)v13);
  sub_18A6103EC((uint64_t)v13, v9);
  v17 = sub_18A5F40B4();
  v18 = sub_18A5F105C(v9, 1, v17);
  v19 = (char *)v16;
  if (v18 == 1)
  {
    v20 = a1 & 1;
    sub_18A60FCC4((uint64_t)v13, &qword_1EDF6A680);
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18A60FCC4((uint64_t)v13, &qword_1EDF6A680);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v9, v17);
    v20 = v25;
  }
  sub_18A60FCC4((uint64_t)v15, &qword_1EDF6A680);
  sub_18A60FCC4(a2, &qword_1EDF6A680);
  v22 = &v19[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  sub_18A5F40A4();
  v23 = (void *)*((_QWORD *)v22 + 1);
  *v22 = v20;
  *((_QWORD *)v22 + 1) = isa;

  sub_18A5F3800();
}

uint64_t CKDeviceCapabilityCheckOptions.excludeDevicesWithoutCapabilityCheckingSupport.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
  sub_18A5F46AC();
  return *v1;
}

{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v4);
  sub_18A6103BC();
  v5 = v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped;
  sub_18A5F40A4();
  if (*(_QWORD *)(v5 + 8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = sub_18A5F40B4();
  sub_18A5F1010(v2, v6, 1, v7);
  sub_18A60FCFC(v2, a1, &qword_1EDF6A680);
  return swift_endAccess();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v1 + 8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = sub_18A5F40B4();
  return sub_18A5F1010(a1, v3, 1, v4);
}

Swift::Void __swiftcall CKDeviceCapabilityCheckOptions.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  NSString *v16;
  uint64_t v17;
  NSDate v18;
  NSString *v19;
  _BYTE v20[24];

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v3);
  sub_18A6103D4();
  v6 = v4 - v5;
  MEMORY[0x1E0C80A78](v7);
  v9 = &v20[-v8];
  v10 = sub_18A5F40B4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
  sub_18A5F46AC();
  v15 = *v14;
  v16 = NSStringFromSelector(sel_excludeDevicesWithoutCapabilityCheckingSupport);
  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A610368();
  }
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15, v16);

  sub_18A5F40A4();
  if (*((_QWORD *)v14 + 1))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  sub_18A5F1010(v6, v17, 1, v10);
  sub_18A60FCFC(v6, (uint64_t)v9, &qword_1EDF6A680);
  if (sub_18A5F105C((uint64_t)v9, 1, v10) == 1)
  {
    sub_18A60FCC4((uint64_t)v9, &qword_1EDF6A680);
    swift_endAccess();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v13, v9, v10);
    swift_endAccess();
    v18.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v19 = NSStringFromSelector(sel_excludeZoneAccessBefore);
    if (!v19)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_18A610368();
    }
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v18.super.isa, v19);

    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
}

void CKDeviceCapabilityCheckOptions.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  NSString *v19;
  uint64_t v20;
  NSString *v21;
  uint64_t v22;
  unsigned int v23;
  NSString *v24;
  void *v25;
  uint64_t v26;
  char v27;
  Class isa;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unsigned int v33;
  objc_super v34;
  char v35;

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v3);
  sub_18A6103D4();
  v6 = v4 - v5;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v31 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v32 = (char *)&v31 - v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v31 - v16;
  v18 = v1;
  v19 = NSStringFromSelector(sel_excludeDevicesWithoutCapabilityCheckingSupport);
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A6103A4();
  }
  v33 = objc_msgSend(a1, sel_decodeBoolForKey_, v19);

  v20 = sub_18A5F40B4();
  sub_18A5F3D18((uint64_t)v17, 1);
  v21 = NSStringFromSelector(sel_excludeZoneAccessBefore);
  if (!v21)
  {
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = (NSString *)MEMORY[0x18D76C7CC](v22);
    sub_18A5F37E0();
  }
  v23 = objc_msgSend(a1, sel_containsValueForKey_, v21);

  if (v23)
  {
    v31 = v18;
    sub_18A60B8D0(0, &qword_1EDF6B060);
    v24 = NSStringFromSelector(sel_excludeZoneAccessBefore);
    sub_18A61044C();

    v25 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    sub_18A610384();
    if (!v25)
    {

      sub_18A60FCC4((uint64_t)v17, &qword_1EDF6A680);
      type metadata accessor for CKDeviceCapabilityCheckOptions(v30);
      swift_deallocPartialClassInstance();
      goto LABEL_13;
    }
    v26 = (uint64_t)v32;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18A610438((uint64_t)v17);
    sub_18A5F3D18(v26, 0);
    sub_18A60FCFC(v26, (uint64_t)v17, &qword_1EDF6A680);
    v18 = v31;
  }
  sub_18A610454((uint64_t)v17, (uint64_t)v13);
  v27 = v33;
  v35 = v33;
  sub_18A610454((uint64_t)v13, (uint64_t)v10);
  sub_18A610454((uint64_t)v10, v6);
  if (sub_18A5F105C(v6, 1, v20) == 1)
  {
    sub_18A60FCC4((uint64_t)v10, &qword_1EDF6A680);
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18A60FCC4((uint64_t)v10, &qword_1EDF6A680);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v6, v20);
    v27 = v35;
  }
  sub_18A610438((uint64_t)v13);
  sub_18A610438((uint64_t)v17);
  v29 = &v18[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  *v29 = v27;
  *((_QWORD *)v29 + 1) = isa;

  v34.receiver = v18;
  v34.super_class = (Class)CKDeviceCapabilityCheckOptions;
  objc_msgSendSuper2(&v34, sel_init);

LABEL_13:
  sub_18A5F37E8();
}

char *CKDeviceCapabilityCheckOptions.copy(with:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *result;
  char v5[16];

  v3 = type metadata accessor for CKDeviceCapabilityCheckOptions(a1);
  sub_18A5F46AC();
  sub_18A5F3C70();
  result = CKDeviceCapabilityCheckOptions.init(_:)(v5);
  a2[3] = (char *)v3;
  *a2 = result;
  return result;
}

char *CKDeviceCapabilityCheckOptions.init(_:)(char *a1)
{
  char v1;
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_init);
  v4 = &v3[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  sub_18A5F40A4();
  v5 = (void *)*((_QWORD *)v4 + 1);
  *v4 = v1;
  *((_QWORD *)v4 + 1) = v2;

  return v3;
}

uint64_t CKDeviceCapabilityCheckOptions.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  void *v5;
  char *v6;
  void *v8;
  id v9;
  id v10;
  char v11;
  char *v12;
  _BYTE v13[24];
  uint64_t v14;

  sub_18A60FC98(a1, (uint64_t)v13, &qword_1EDF6A278);
  if (!v14)
  {
    sub_18A60FCC4((uint64_t)v13, &qword_1EDF6A278);
    return 0;
  }
  type metadata accessor for CKDeviceCapabilityCheckOptions(v2);
  if ((sub_18A610370() & 1) != 0)
  {
    v3 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
    sub_18A5F46AC();
    v4 = *v3;
    v5 = (void *)*((_QWORD *)v3 + 1);
    v6 = &v12[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
    sub_18A5F46AC();
    if (v4 != *v6)
    {
LABEL_4:

      return 0;
    }
    v8 = (void *)*((_QWORD *)v6 + 1);
    if (v5)
    {
      if (!v8)
        goto LABEL_4;
      sub_18A60B8D0(0, &qword_1EDF6B060);
      v9 = v5;
      v10 = v8;
      v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {

      if (v8)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_18A60F094(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  sub_18A60FCC4((uint64_t)v10, &qword_1EDF6A278);
  return v8 & 1;
}

uint64_t CKDeviceCapabilityCheckOptions.description.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  objc_super v7;
  uint64_t v8;
  uint64_t v9;

  v7.super_class = (Class)CKDeviceCapabilityCheckOptions;
  v1 = objc_msgSendSuper2(&v7, sel_description);
  v2 = sub_18A61044C();
  v4 = v3;

  v8 = v2;
  v9 = v4;
  sub_18A5F4380();
  sub_18A5F46AC();
  sub_18A5F3C70();
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  sub_18A5F37E0();
  return v8;
}

id CKDeviceCapabilityCheckOptions.wrapped.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 *v3;
  void *v4;

  v3 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
  sub_18A5F46AC();
  v4 = (void *)*((_QWORD *)v3 + 1);
  *a1 = *v3;
  a1[1] = v4;
  return v4;
}

id sub_18A60F234()
{
  uint64_t v0;
  objc_super v2;

  *(_BYTE *)(v0 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped) = 2;
  v2.super_class = (Class)CKDeviceCapabilityCheckResult;
  return objc_msgSendSuper2(&v2, sel_init);
}

void __swiftcall CKDeviceCapabilityCheckResult.init(isSupported:)(CKDeviceCapabilityCheckResult *__return_ptr retstr, Swift::Bool isSupported)
{
  objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_initWithIsSupported_, isSupported);
}

void CKDeviceCapabilityCheckResult.init(isSupported:)(char a1)
{
  void *v1;
  _BYTE *v3;

  v3 = objc_msgSend(v1, sel_init);
  v3[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped] = a1;
  sub_18A5F379C();
}

uint64_t CKDeviceCapabilityCheckResult.isSupported.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
  if (v1 != 2)
    return v1 & 1;
  __break(1u);
  return result;
}

{
  unsigned __int8 *v0;

  return *v0;
}

Swift::Void __swiftcall CKDeviceCapabilityCheckResult.encode(with:)(NSCoder with)
{
  void *v1;
  id v3;
  NSString *v4;
  NSString *v5;

  v3 = objc_msgSend(v1, sel_isSupported);
  v4 = NSStringFromSelector(sel_isSupported);
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A6103A4();
  }
  v5 = v4;
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3);

}

void _sSo18CKDeviceCapabilityC8CloudKitE5coderABSgSo7NSCoderC_tcfC_0(void *a1)
{
  objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_initWithCoder_, a1);

  sub_18A5F379C();
}

id CKDeviceCapabilityCheckResult.init(coder:)(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  _BYTE *v4;
  NSString *v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;
  objc_super v10;

  v3 = OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped;
  v1[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped] = 2;
  v4 = v1;
  v5 = NSStringFromSelector(sel_isSupported);
  if (!v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    MEMORY[0x18D76C7CC](v6);
    sub_18A610400();
  }
  v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v5);

  v1[v3] = v7;
  v10.receiver = v4;
  v10.super_class = (Class)CKDeviceCapabilityCheckResult;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

uint64_t CKDeviceCapabilityCheckResult.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  unsigned __int8 *v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_18A60FC98(a1, (uint64_t)v9, &qword_1EDF6A278);
  if (!v10)
  {
    sub_18A60FCC4((uint64_t)v9, &qword_1EDF6A278);
    goto LABEL_12;
  }
  type metadata accessor for CKDeviceCapabilityCheckResult(v2);
  if ((sub_18A610370() & 1) == 0)
  {
LABEL_12:
    v5 = 0;
    return v5 & 1;
  }
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
  v4 = v8[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped];

  v5 = v4 == 2 && v3 == 2;
  if (v3 != 2 && v4 != 2)
    v5 = ((v3 & 1) == 0) ^ v4;
  return v5 & 1;
}

void sub_18A60F650(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;

  v4 = a1;
  a3();

  sub_18A5F41C0();
}

id sub_18A60F684(void *a1)
{
  sub_18A5F3944();
  return a1;
}

void *CKDeviceCapabilityCheckResult.description.getter()
{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  Swift::String v4;
  objc_super v6;
  objc_super v7;
  void *v8;
  uint64_t v9;

  if (*((_BYTE *)v0 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped) == 2)
  {
    v7.receiver = v0;
    v7.super_class = (Class)CKDeviceCapabilityCheckResult;
    v2 = objc_msgSendSuper2(&v7, sel_description);
    sub_18A610418();
    sub_18A610378();
    v8 = v0;
    v9 = v1;
    sub_18A5F44A0();
  }
  else
  {
    v6.receiver = v0;
    v6.super_class = (Class)CKDeviceCapabilityCheckResult;
    v3 = objc_msgSendSuper2(&v6, sel_description);
    sub_18A610418();
    sub_18A610378();
    v8 = v0;
    v9 = v1;
    sub_18A5F4380();
    v4._countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v4);
    sub_18A5F37E0();
  }
  return v8;
}

void __swiftcall CKDeviceCapabilityCheckResult.init(_:)(CKDeviceCapabilityCheckResult *__return_ptr retstr, CloudKit::CKDeviceCapabilityCheckResult a2)
{
  char v2;

  v2 = *(_BYTE *)a2.isSupported;
  *((_BYTE *)objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_init)
  + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped) = v2;
  sub_18A5F379C();
}

void CKDeviceCapabilityCheckResult.wrapped.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
}

BOOL sub_18A60F7C8(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_18A60F7D4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18A60F82C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_18A60F89C + 4 * byte_18A8397A4[a2]))(0x6D614E72656E776FLL);
}

void sub_18A60F89C(uint64_t a1)
{
  uint64_t v1;

  if (a1 != 0x6D614E72656E776FLL || v1 != 0xE900000000000065)
    sub_18A6103AC();
  sub_18A5F37E0();
  sub_18A5F37A4();
  sub_18A5F3824();
}

void sub_18A60F920(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4449656E6F7ALL;
  else
    v3 = 0x614E64726F636572;
  if (v2)
    v4 = 0xEA0000000000656DLL;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x4449656E6F7ALL;
  else
    v5 = 0x614E64726F636572;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xEA0000000000656DLL;
  if (v3 != v5 || v4 != v6)
    sub_18A6103AC();
  sub_18A5F37E0();
  sub_18A5F37A4();
  sub_18A5F3824();
}

uint64_t sub_18A60F9A4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    v10 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
    if ((v11 & 1) == 0)
    {
      v7 = v10;
      goto LABEL_8;
    }
    if ((v4 & 0x800000000000000) == 0)
    {
      v7 = v5 | 0xB;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v3 = a3;
  v4 = a2;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  v5 = v6 << 16;
  if ((a3 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if (v6 >= a1)
  {
    v7 = (a1 << 16) | 4;
    goto LABEL_8;
  }
LABEL_6:
  v7 = v5 | 7;
LABEL_8:
  v8 = MEMORY[0x18D76C904](15, v7, v4, v3);
  sub_18A5F37E0();
  return v8;
}

uint64_t sub_18A60FA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_18A60FAB8()
{
  unint64_t result;

  result = qword_1EDF692A8;
  if (!qword_1EDF692A8)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83980C, &_s32JsonSerializableDeviceCapabilityVN);
    atomic_store(result, (unint64_t *)&qword_1EDF692A8);
  }
  return result;
}

uint64_t sub_18A60FAF4(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_18A6100EC(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_18A60FB60(Swift::Int a1)
{
  if (a1 < 16)
    return 0;
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t sub_18A60FBA4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_18A60FBE8()
{
  unint64_t result;

  result = qword_1EDF69250;
  if (!qword_1EDF69250)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A8397E4, &_s32JsonSerializableDeviceCapabilityVN);
    atomic_store(result, (unint64_t *)&qword_1EDF69250);
  }
  return result;
}

uint64_t sub_18A60FC24(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_18A60FBA4(a1, a2);
  return a1;
}

uint64_t type metadata accessor for CKDeviceCapability(uint64_t a1)
{
  return sub_18A60B8D0(a1, &qword_1EDF69260);
}

void sub_18A60FC4C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C24C();
  *v0 = v1;
}

uint64_t sub_18A60FC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_18A60FC98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_18A5F3F9C(a1, a2, a3);
  sub_18A61042C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_18A5F379C();
}

void sub_18A60FCC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_18A5F101C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_18A5F379C();
}

void sub_18A60FCFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_18A5F3F9C(a1, a2, a3);
  sub_18A61042C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_18A5F379C();
}

uint64_t type metadata accessor for CKDeviceCapabilityCheckOptions(uint64_t a1)
{
  return sub_18A60B8D0(a1, (unint64_t *)&unk_1EDF6B070);
}

uint64_t type metadata accessor for CKDeviceCapabilityCheckResult(uint64_t a1)
{
  return sub_18A60B8D0(a1, (unint64_t *)&unk_1EDF6B080);
}

uint64_t _s32JsonSerializableDeviceCapabilityVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s32JsonSerializableDeviceCapabilityVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s32JsonSerializableDeviceCapabilityVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s32JsonSerializableDeviceCapabilityVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s32JsonSerializableDeviceCapabilityVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s32JsonSerializableDeviceCapabilityVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s32JsonSerializableDeviceCapabilityVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s32JsonSerializableDeviceCapabilityVMa()
{
  return &_s32JsonSerializableDeviceCapabilityVN;
}

unint64_t sub_18A60FF28()
{
  unint64_t result;

  result = qword_1EDF69280;
  if (!qword_1EDF69280)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A8398F8, &_s32JsonSerializableDeviceCapabilityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69280);
  }
  return result;
}

void sub_18A60FF64()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C268();
  *v0 = v1;
}

void sub_18A60FF80()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C30C();
  *v0 = v1;
}

void sub_18A60FF9C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C328();
  *v0 = v1;
}

void sub_18A60FFB8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C344();
  *v0 = v1;
}

void sub_18A60FFD4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C360();
  *v0 = v1;
}

void sub_18A60FFF0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C37C();
  *v0 = v1;
}

void sub_18A61000C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C414();
  *v0 = v1;
}

void sub_18A610028()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C430();
  *v0 = v1;
}

void sub_18A610044()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C44C();
  *v0 = v1;
}

void sub_18A610060()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C468();
  *v0 = v1;
}

void sub_18A61007C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C484();
  *v0 = v1;
}

void sub_18A610098()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C51C();
  *v0 = v1;
}

void sub_18A6100B4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C538();
  *v0 = v1;
}

void sub_18A6100D0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A65C750();
  *v0 = v1;
}

uint64_t sub_18A6100EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t _s32JsonSerializableDeviceCapabilityV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s32JsonSerializableDeviceCapabilityV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18A61020C + 4 * byte_18A8397AD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18A610240 + 4 * byte_18A8397A8[v4]))();
}

uint64_t sub_18A610240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A610248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A610250);
  return result;
}

uint64_t sub_18A61025C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A610264);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18A610268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A610270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s32JsonSerializableDeviceCapabilityV10CodingKeysOMa()
{
  return &_s32JsonSerializableDeviceCapabilityV10CodingKeysON;
}

unint64_t sub_18A610290()
{
  unint64_t result;

  result = qword_1EDF6B090;
  if (!qword_1EDF6B090)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A8398D0, &_s32JsonSerializableDeviceCapabilityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF6B090);
  }
  return result;
}

unint64_t sub_18A6102D0()
{
  unint64_t result;

  result = qword_1EDF69298;
  if (!qword_1EDF69298)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A839840, &_s32JsonSerializableDeviceCapabilityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69298);
  }
  return result;
}

unint64_t sub_18A610310()
{
  unint64_t result;

  result = qword_1EDF69290;
  if (!qword_1EDF69290)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A839868, &_s32JsonSerializableDeviceCapabilityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69290);
  }
  return result;
}

uint64_t sub_18A61034C()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t sub_18A610354()
{
  return String.init<A>(_:)();
}

void sub_18A610368()
{
  JUMPOUT(0x18D76C7CCLL);
}

uint64_t sub_18A610370()
{
  return swift_dynamicCast();
}

void sub_18A610378()
{
  void *v0;

}

uint64_t sub_18A610384()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A61038C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;

  return sub_18A60F9A4(v2, v1, v0);
}

uint64_t sub_18A61039C()
{
  return swift_bridgeObjectRetain();
}

void sub_18A6103A4()
{
  JUMPOUT(0x18D76C7CCLL);
}

uint64_t sub_18A6103AC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _sSo18CKDeviceCapabilityC8CloudKitE20supportsSecureCodingSbvgZ_0()
{
  return 1;
}

void sub_18A6103EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_18A60FC98(a1, a2, v2);
}

uint64_t sub_18A6103F4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FBA4(v1, v0);
}

uint64_t sub_18A610400()
{
  return swift_bridgeObjectRelease();
}

void sub_18A61040C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_18A60FCFC((uint64_t)va, (uint64_t)va1, a3);
}

uint64_t sub_18A610418()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A610420()
{
  return swift_allocObject();
}

uint64_t sub_18A61042C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_18A610438(uint64_t a1)
{
  uint64_t *v1;

  sub_18A60FCC4(a1, v1);
}

uint64_t sub_18A610440(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  return sub_18A60F9A4(a1, v2, v1);
}

uint64_t sub_18A61044C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_18A610454(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_18A60FC98(a1, a2, v2);
}

void CKRecordValue.CKToSwiftNativeValue()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);
  __int128 v7;
  uint64_t v8;

  swift_getObjectType();
  if (sub_18A610534(v1))
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    swift_unknownObjectRetain();
    v6(ObjectType, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = v1;
    swift_unknownObjectRetain();
    sub_18A5F101C((uint64_t *)&unk_1EDF6B0A0);
    sub_18A612F00();
    sub_18A610568(&v7, a1);
    sub_18A5F3E10();
  }
}

uint64_t sub_18A610534(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

uint64_t sub_18A610568(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t CKRecordValueProtocol.CKToObjCRecordValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  sub_18A5F3FB4((uint64_t)v9 - v4);
  sub_18A5F101C(&qword_1EDF6A308);
  if (swift_dynamicCast())
  {
    sub_18A610568(v9, (uint64_t)v11);
    v5 = v12;
    v6 = v13;
    sub_18A608B00(v11, v12);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    sub_18A608B60((uint64_t)v11);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_18A60FCC4((uint64_t)v9, &qword_1EDF69380);
    sub_18A5F3FB4((uint64_t)v3);
    sub_18A5F101C(&qword_1EDF69438);
    sub_18A612F00();
    return v11[0];
  }
  return v7;
}

void CKRecordKeyValueSetting.subscript.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD v51[2];
  uint8_t *v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE v55[40];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  sub_18A612EB8();
  v59 = v1;
  v60 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v51 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v51 - v18;
  v20 = (void *)MEMORY[0x18D76C7CC](v8, v6);
  v21 = objc_msgSend(v0, sel_objectForKey_, v20);

  if (v21)
  {
    v22 = sub_18A610534(v4);
    if (v22)
    {
      v24 = v22;
      v25 = v23;
      v52 = (uint8_t *)v10;
      v53 = (_QWORD *)v11;
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 24);
      v27 = type metadata accessor for Optional();
      v28 = v21;
      v29 = *(_QWORD *)(v27 - 8);
      v30 = MEMORY[0x1E0C80A78](v28);
      v32 = (char *)v51 - v31;
      v51[1] = v30;
      v26(v30, v24, v25);
      if (sub_18A5F105C((uint64_t)v32, 1, v24) == 1)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v27);
        v58 = 0;
        v56 = 0u;
        v57 = 0u;
      }
      else
      {
        *((_QWORD *)&v57 + 1) = v24;
        v58 = v25;
        v39 = sub_18A612B50((uint64_t *)&v56);
        (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v39, v32, v24);
      }
      sub_18A612B8C((uint64_t)&v56, (uint64_t)v55, &qword_1EDF69380);
      sub_18A5F101C(&qword_1EDF69380);
      v40 = sub_18A612F08();
      sub_18A5F43A4((uint64_t)v19, v40 ^ 1u);
      v41 = *((_QWORD *)&v57 + 1);
      v42 = v54;
      sub_18A612F2C((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16));
      v43 = (uint64_t)v52;
      if (v41)
      {
        v44 = sub_18A5F105C((uint64_t)v17, 1, v4);
        sub_18A612EE8();
        if (v44 == 1)
        {
          if (qword_1ECD96788 != -1)
            swift_once();
          v45 = type metadata accessor for Logger();
          sub_18A60990C(v45, (uint64_t)qword_1ECD96770);
          sub_18A5F3954();
          v46 = Logger.logObject.getter();
          v47 = static os_log_type_t.error.getter();
          if (sub_18A5F4394(v47))
          {
            v48 = (uint8_t *)sub_18A5F3830();
            v49 = (_QWORD *)sub_18A5F3830();
            *(_DWORD *)v48 = 138412290;
            v51[0] = v48 + 4;
            objc_opt_self();
            v50 = sub_18A612ED8();
            sub_18A5F45B8(v50);
            swift_unknownObjectRetain();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v49 = v27;
            sub_18A612EF8();
            _os_log_impl(&dword_18A5C5000, v46, (os_log_type_t)v4, "Error converting record value %@ to requested type", v48, 0xCu);
            sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
            sub_18A5F44B4();
            sub_18A5F392C();
          }

          swift_unknownObjectRelease_n();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        sub_18A612EE8();
      }
      sub_18A612F2C(v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32));
      sub_18A60FCC4((uint64_t)&v56, &qword_1EDF69380);
    }
    else
    {
      swift_getObjectType();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)&v56);
      sub_18A610C74((uint64_t)&v56, (uint64_t)v55);
      sub_18A5F101C((uint64_t *)&unk_1EDF6B0A0);
      v33 = sub_18A612F08();
      sub_18A5F43A4((uint64_t)v14, v33 ^ 1u);
      if (sub_18A5F105C((uint64_t)v14, 1, v4) == 1)
      {
        if (qword_1ECD96788 != -1)
          swift_once();
        v34 = type metadata accessor for Logger();
        sub_18A60990C(v34, (uint64_t)qword_1ECD96770);
        sub_18A5F3954();
        v35 = Logger.logObject.getter();
        v36 = static os_log_type_t.error.getter();
        if (sub_18A5F4394(v36))
        {
          v37 = (uint8_t *)sub_18A5F3830();
          v53 = (_QWORD *)sub_18A5F3830();
          *(_DWORD *)v37 = 138412290;
          v52 = v37 + 4;
          objc_opt_self();
          v38 = sub_18A612ED8();
          sub_18A5F45B8(v38);
          swift_unknownObjectRetain();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v53 = v11;
          sub_18A612EF8();
          _os_log_impl(&dword_18A5C5000, v35, (os_log_type_t)v4, "Error converting record value %@ to requested type", v37, 0xCu);
          sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
          sub_18A5F44B4();
          sub_18A5F392C();
        }
        sub_18A612EF8();
        sub_18A612ED0();

        sub_18A608B60((uint64_t)&v56);
      }
      else
      {
        sub_18A608B60((uint64_t)&v56);
        sub_18A612ED0();
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v10, v14, v11);
    }
    sub_18A5F37E8();
  }
  else
  {
    sub_18A5F1010(v10, 1, 1, v4);
  }
}

uint64_t sub_18A610C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_18A610CB8()
{
  CKRecordKeyValueSetting.subscript.getter();
}

#error "18A610D74: call analysis failed (funcsize=43)"

void CKRecordKeyValueSetting.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  sub_18A612EB8();
  a19 = v21;
  a20 = v22;
  v23 = v20;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = type metadata accessor for Optional();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&a9 - v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)&a9 - v34, v31, v32);
  if (sub_18A5F105C((uint64_t)v35, 1, v25) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    v36 = 0;
  }
  else
  {
    v36 = CKRecordValueProtocol.CKToObjCRecordValue()(v25);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v35, v25);
  }
  MEMORY[0x18D76C7CC](v29, v27);
  sub_18A612F20();
  objc_msgSend(v23, sel_setObject_forKeyedSubscript_, v36, v35);
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  sub_18A5F37E8();
}

void (*CKRecordKeyValueSetting.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;

  v13 = malloc(0x50uLL);
  *a1 = v13;
  v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *v13 = a2;
  v13[1] = a3;
  v14 = type metadata accessor for Optional();
  v13[6] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v13[7] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v13[8] = malloc(v16);
  v13[9] = malloc(v16);
  CKRecordKeyValueSetting.subscript.getter();
  return sub_18A610F60;
}

void sub_18A610F60()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_18A612EB8();
  v33 = v2;
  v3 = *v1;
  v4 = (void *)(*v1)[8];
  v5 = (void *)(*v1)[9];
  if ((v6 & 1) != 0)
  {
    v7 = v3[6];
    v8 = v3[7];
    v9 = v3[3];
    v11 = *v3;
    v10 = v3[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*v1)[8], v5, v7);
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter((uint64_t)v4, v11, v10, v12, v9, v13, v14, v15, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v0,
      v33);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v7);
  }
  else
  {
    v16 = v3[3];
    v18 = *v3;
    v17 = v3[1];
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter((uint64_t)v5, v18, v17, v19, v16, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v0,
      v33);
  }
  free(v5);
  free(v4);
  free(v3);
}

void CKRecordKeyValueSetting.subscript.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v3;
  id v4;

  v3 = (void *)MEMORY[0x18D76C7CC]();
  v4 = objc_msgSend(v1, sel_objectForKey_, v3);

  if (v4)
  {
    sub_18A5F42C0();
    CKRecordValue.CKToSwiftNativeValue()(a1);
    swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    sub_18A5F3824();
  }
}

void sub_18A6110A4(uint64_t a1@<X8>)
{
  CKRecordKeyValueSetting.subscript.getter(a1);
}

void sub_18A6110C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[40];

  v4 = *a3;
  v3 = a3[1];
  sub_18A612B8C(a1, (uint64_t)v5, &qword_1EDF6A2E8);
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter((uint64_t)v5, v4, v3);
}

void CKRecordKeyValueSetting.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  void *v9;
  _QWORD v10[3];
  uint64_t v11;

  v4 = v3;
  sub_18A612B8C(a1, (uint64_t)v10, &qword_1EDF6A2E8);
  v8 = v11;
  if (v11)
  {
    sub_18A608B00(v10, v11);
    v8 = CKRecordValueProtocol.CKToObjCRecordValue()(v8);
    sub_18A608B60((uint64_t)v10);
  }
  else
  {
    sub_18A60FCC4((uint64_t)v10, &qword_1EDF6A2E8);
  }
  v9 = (void *)MEMORY[0x18D76C7CC](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setObject_forKeyedSubscript_, v8, v9);
  swift_unknownObjectRelease();

  sub_18A60FCC4(a1, &qword_1EDF6A2E8);
}

void (*CKRecordKeyValueSetting.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[12] = a4;
  v9[13] = v4;
  v9[10] = a2;
  v9[11] = a3;
  CKRecordKeyValueSetting.subscript.getter((uint64_t)v9);
  return sub_18A611270;
}

void sub_18A611270(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[10];
    v3 = v2[11];
    sub_18A612B8C(*a1, (uint64_t)(v2 + 5), &qword_1EDF6A2E8);
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter((uint64_t)(v2 + 5), v4, v3);
    sub_18A60FCC4((uint64_t)v2, &qword_1EDF6A2E8);
  }
  else
  {
    v6 = v2[10];
    v5 = v2[11];
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter((uint64_t)v2, v6, v5);
  }
  free(v2);
}

double sub_18A611310@<D0>(__int128 *a1@<X8>)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  double result;
  uint64_t v8;
  __int128 v9;

  swift_unknownObjectRetain();
  sub_18A5F101C(&qword_1EDF69438);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (*((_QWORD *)&v9 + 1) >> 60 != 15)
      goto LABEL_10;
  }
  else
  {
    v9 = xmmword_18A839950;
  }
  if (qword_1ECD96788 != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  sub_18A60990C(v2, (uint64_t)qword_1ECD96770);
  swift_unknownObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    objc_opt_self();
    v8 = swift_dynamicCastObjCClassUnconditional();
    swift_unknownObjectRetain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v8;
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_18A5C5000, v3, v4, "Error converting record value %@ to requested type", v5, 0xCu);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    swift_arrayDestroy();
    MEMORY[0x18D76E86C](v6, -1, -1);
    MEMORY[0x18D76E86C](v5, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
LABEL_10:
  result = *(double *)&v9;
  *a1 = v9;
  return result;
}

void sub_18A611530(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t v9;

  swift_unknownObjectRetain();
  sub_18A5F101C(&qword_1EDF69438);
  v2 = type metadata accessor for Date();
  v3 = swift_dynamicCast();
  sub_18A5F1010(a1, v3 ^ 1u, 1, v2);
  if (sub_18A5F105C(a1, 1, v2) == 1)
  {
    if (qword_1ECD96788 != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    sub_18A60990C(v4, (uint64_t)qword_1ECD96770);
    swift_unknownObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      objc_opt_self();
      v9 = swift_dynamicCastObjCClassUnconditional();
      swift_unknownObjectRetain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v9;
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_18A5C5000, v5, v6, "Error converting record value %@ to requested type", v7, 0xCu);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      swift_arrayDestroy();
      MEMORY[0x18D76E86C](v8, -1, -1);
      MEMORY[0x18D76E86C](v7, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t sub_18A61175C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_unknownObjectRetain();
  sub_18A5F101C(&qword_1EDF69438);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (v8)
      return v7;
  }
  else
  {
    v7 = 0;
  }
  if (qword_1ECD96788 != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  sub_18A60990C(v0, (uint64_t)qword_1ECD96770);
  swift_unknownObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v3 = 138412290;
    objc_opt_self();
    v6 = swift_dynamicCastObjCClassUnconditional();
    swift_unknownObjectRetain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v4 = v6;
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_18A5C5000, v1, v2, "Error converting record value %@ to requested type", v3, 0xCu);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    swift_arrayDestroy();
    MEMORY[0x18D76E86C](v4, -1, -1);
    MEMORY[0x18D76E86C](v3, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  return v7;
}

void sub_18A611964(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;

  swift_unknownObjectRetain();
  sub_18A5F101C(&qword_1EDF69438);
  v4 = swift_dynamicCast();
  sub_18A5F1010(a2, v4 ^ 1u, 1, a1);
  if (sub_18A5F105C(a2, 1, a1) == 1)
  {
    if (qword_1ECD96788 != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    sub_18A60990C(v5, (uint64_t)qword_1ECD96770);
    swift_unknownObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      objc_opt_self();
      v10 = swift_dynamicCastObjCClassUnconditional();
      swift_unknownObjectRetain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v10;
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_18A5C5000, v6, v7, "Error converting record value %@ to requested type", v8, 0xCu);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      swift_arrayDestroy();
      MEMORY[0x18D76E86C](v9, -1, -1);
      MEMORY[0x18D76E86C](v8, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

void sub_18A611B88()
{
  _QWORD *v0;

  sub_18A611B84(*v0, v0[1]);
}

uint64_t sub_18A611B90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_18A61175C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

NSData sub_18A611BC4()
{
  return j___s10Foundation4DataV19_bridgeToObjectiveCSo6NSDataCyF();
}

id sub_18A611BD0(char a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
}

uint64_t sub_18A611C04()
{
  void *v0;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  if (v0)
    return (uint64_t)objc_msgSend(v0, sel_BOOLValue);
  else
    return 2;
}

id sub_18A611C50()
{
  char *v0;

  return sub_18A611BD0(*v0);
}

uint64_t sub_18A611C58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18A611C04();
  *a1 = result;
  return result;
}

id sub_18A611C7C(double a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a1);
}

double sub_18A611CB0()
{
  void *v0;
  double result;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  if (v0)
    objc_msgSend(v0, sel_doubleValue);
  return result;
}

id sub_18A611D08()
{
  double *v0;

  return sub_18A611C7C(*v0);
}

void sub_18A611D10(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_18A611CB0();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

id sub_18A611D3C(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a1);
}

id sub_18A611D70()
{
  uint64_t *v0;

  return sub_18A611D3C(*v0);
}

id sub_18A611D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result;
  char v4;

  result = sub_18A61233C(a1, (SEL *)&selRef_integerValue);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18A611DAC(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, a1);
}

id sub_18A611DE0()
{
  uint64_t *v0;

  return sub_18A611DAC(*v0);
}

id sub_18A611DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result;
  char v4;

  result = sub_18A61233C(a1, (SEL *)&selRef_unsignedIntegerValue);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18A611E1C(char a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithChar_, a1);
}

uint64_t sub_18A611E50()
{
  void *v0;
  void *v1;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  v1 = v0;
  if (v0)
    LOBYTE(v0) = objc_msgSend(v0, sel_charValue);
  return v0 | ((v1 == 0) << 8);
}

id sub_18A611EB4()
{
  char *v0;

  return sub_18A611E1C(*v0);
}

uint64_t sub_18A611EBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18A611E50();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

id sub_18A611EE8(unsigned __int8 a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedChar_, a1);
}

uint64_t sub_18A611F1C()
{
  void *v0;
  void *v1;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  v1 = v0;
  if (v0)
    LODWORD(v0) = objc_msgSend(v0, sel_unsignedCharValue);
  return v0 | ((v1 == 0) << 8);
}

id sub_18A611F7C()
{
  unsigned __int8 *v0;

  return sub_18A611EE8(*v0);
}

uint64_t sub_18A611F84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18A611F1C();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

id sub_18A611FB0(__int16 a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithShort_, a1);
}

uint64_t sub_18A611FE4()
{
  void *v0;
  void *v1;
  int v2;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  v1 = v0;
  if (v0)
    v2 = (unsigned __int16)objc_msgSend(v0, sel_shortValue);
  else
    v2 = 0;
  return v2 | ((v1 == 0) << 16);
}

id sub_18A612050()
{
  __int16 *v0;

  return sub_18A611FB0(*v0);
}

uint64_t sub_18A612058@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = sub_18A611FE4();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

id sub_18A612084(unsigned __int16 a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedShort_, a1);
}

uint64_t sub_18A6120B8()
{
  void *v0;
  void *v1;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  v1 = v0;
  if (v0)
    LODWORD(v0) = objc_msgSend(v0, sel_unsignedShortValue);
  return v0 | ((v1 == 0) << 16);
}

id sub_18A612118()
{
  unsigned __int16 *v0;

  return sub_18A612084(*v0);
}

uint64_t sub_18A612120@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = sub_18A6120B8();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

id sub_18A61214C(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInt_, a1);
}

id sub_18A612180()
{
  unsigned int *v0;

  return sub_18A61214C(*v0);
}

unint64_t sub_18A612188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_18A6121F0(a1, (SEL *)&selRef_intValue);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

id sub_18A6121BC(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInt_, a1);
}

unint64_t sub_18A6121F0(uint64_t a1, SEL *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_opt_self();
  v3 = (void *)sub_18A5F40BC();
  v4 = v3;
  if (v3)
    v5 = objc_msgSend(v3, *a2);
  else
    v5 = 0;
  return v5 | ((unint64_t)(v4 == 0) << 32);
}

id sub_18A61225C()
{
  unsigned int *v0;

  return sub_18A6121BC(*v0);
}

unint64_t sub_18A612264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_18A6121F0(a1, (SEL *)&selRef_unsignedIntValue);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

id sub_18A612298(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, a1);
}

id sub_18A6122CC()
{
  uint64_t *v0;

  return sub_18A612298(*v0);
}

id sub_18A6122D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result;
  char v4;

  result = sub_18A61233C(a1, (SEL *)&selRef_longLongValue);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18A612308(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedLongLong_, a1);
}

id sub_18A61233C(uint64_t a1, SEL *a2)
{
  id result;

  objc_opt_self();
  result = (id)sub_18A5F40BC();
  if (result)
    return objc_msgSend(result, *a2);
  return result;
}

id sub_18A612388()
{
  uint64_t *v0;

  return sub_18A612308(*v0);
}

id sub_18A612390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result;
  char v4;

  result = sub_18A61233C(a1, (SEL *)&selRef_unsignedLongLongValue);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18A6123C4(float a1)
{
  id v2;
  double v3;

  v2 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  *(float *)&v3 = a1;
  return objc_msgSend(v2, sel_initWithFloat_, v3);
}

unint64_t sub_18A6123F8()
{
  void *v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;

  objc_opt_self();
  v0 = (void *)swift_dynamicCastObjCClass();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, sel_floatValue);
    v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  return v3 | ((unint64_t)(v1 == 0) << 32);
}

id sub_18A61246C()
{
  float *v0;

  return sub_18A6123C4(*v0);
}

unint64_t sub_18A612474@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = sub_18A6123F8();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

id sub_18A6124A0()
{
  uint64_t v0;
  id v2;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
  v0 = type metadata accessor for Array();
  MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF38], v0);
  Sequence.forEach(_:)();
  return v2;
}

uint64_t sub_18A612540(uint64_t a1, void *a2, uint64_t a3)
{
  objc_msgSend(a2, sel_addObject_, CKRecordValueProtocol.CKToObjCRecordValue()(a3));
  return swift_unknownObjectRelease();
}

id sub_18A612598()
{
  return sub_18A6124A0();
}

void sub_18A6125B0(uint64_t *a1@<X8>)
{
  sub_18A612624((uint64_t (*)(uint64_t))MEMORY[0x1E0CB1980], MEMORY[0x1E0DEA968], (uint64_t)&protocol witness table for String, a1);
}

uint64_t sub_18A6125DC@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for Date();
  a1[4] = (uint64_t)&protocol witness table for Date;
  sub_18A612B50(a1);
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_18A612624(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v8 = v4;
  v10 = a1(v8);
  a4[3] = a2;
  a4[4] = a3;
  *a4 = v10;
  a4[1] = v11;
  sub_18A5F3824();
}

void sub_18A61265C(uint64_t *a1@<X8>)
{
  sub_18A612624((uint64_t (*)(uint64_t))MEMORY[0x1E0CB0228], MEMORY[0x1E0CB0338], (uint64_t)&protocol witness table for Data, a1);
}

id sub_18A612688@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id result;
  id v4;
  _UNKNOWN **v5;
  uint64_t v6;

  if (CFNumberIsFloatType((CFNumberRef)v1))
  {
    result = objc_msgSend(v1, sel_doubleValue);
    v5 = &protocol witness table for Double;
    v6 = MEMORY[0x1E0DEB070];
  }
  else
  {
    result = objc_msgSend(v1, sel_longLongValue);
    v4 = result;
    v5 = &protocol witness table for Int64;
    v6 = MEMORY[0x1E0DEDC60];
  }
  a1[3] = v6;
  a1[4] = v5;
  *a1 = v4;
  return result;
}

void sub_18A612704()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;

  sub_18A612EB8();
  v2 = v1;
  v11 = type metadata accessor for NSFastEnumerationIterator();
  v3 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSArray.makeIterator()();
  sub_18A612F38();
  if (v15)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    do
    {
      sub_18A612E68(&v14, v13);
      sub_18A5F101C(&qword_1EDF69438);
      sub_18A612F00();
      v0 = *(_QWORD *)&v12[0];
      sub_18A5F42C0();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)v13);
      sub_18A610C74((uint64_t)v13, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A612F14();
        v6 = v8;
      }
      v7 = *(_QWORD *)(v6 + 16);
      if (v7 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_18A612F14();
        v6 = v9;
      }
      *(_QWORD *)(v6 + 16) = v7 + 1;
      sub_18A610568(v12, v6 + 40 * v7 + 32);
      swift_unknownObjectRelease();
      sub_18A608B60((uint64_t)v13);
      sub_18A612F38();
    }
    while (v15);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v11);
  sub_18A5F101C((uint64_t *)&unk_1EDF6B0A0);
  Array._bridgeToObjectiveC()();
  sub_18A612F20();
  v2[3] = sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6B0C0);
  v2[4] = &protocol witness table for NSArray;
  *v2 = v0;
  sub_18A5F37E8();
}

void CKRecordValueStoreIterator.init(_:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend((id)swift_unknownObjectRetain(), sel_allKeys);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18A612ED0();
  *a2 = a1;
  a2[1] = v5;
  a2[2] = 0;
  sub_18A5F3824();
}

void CKRecordValueStoreIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  __int128 v12[2];

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    goto LABEL_6;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = v1;
    v6 = v3 + 16 * v4;
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 40);
    v9 = *(void **)v1;
    swift_bridgeObjectRetain();
    v10 = (void *)MEMORY[0x18D76C7CC](v7, v8);
    v11 = objc_msgSend(v9, sel_objectForKey_, v10);

    if (v11)
    {
      sub_18A5F42C0();
      swift_unknownObjectRetain();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)v12);
      sub_18A612EF8();
      *(_QWORD *)(v5 + 16) = v4 + 1;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      sub_18A610568(v12, a1 + 16);
LABEL_6:
      sub_18A5F3E10();
      return;
    }
  }
  __break(1u);
}

void CKRecordValueStore.makeIterator()(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;

  v3 = v1;
  v4 = objc_msgSend(v3, sel_allKeys);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v3;
  a1[1] = v5;
  a1[2] = 0;
  sub_18A5F3824();
}

void sub_18A612A58(_QWORD *a1@<X8>)
{
  id *v1;
  id v2;

  v2 = *v1;
  CKRecordValueStore.makeIterator()(a1);

}

uint64_t sub_18A612A90()
{
  return 2;
}

void sub_18A612A98()
{
  sub_18A6A9DF4();
}

uint64_t sub_18A612AB8()
{
  return sub_18A6A9E4C();
}

uint64_t sub_18A612AD8()
{
  sub_18A60B8D0(0, &qword_1EDF6B0B8);
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t *sub_18A612B50(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_18A612B8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_18A5F101C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_18A5F379C();
}

unint64_t sub_18A612BCC(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_18A612BEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for <A> [A], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18A612C30()
{
  unint64_t result;

  result = qword_1EDF6B0B0;
  if (!qword_1EDF6B0B0)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKRecordValueStoreIterator, &type metadata for CKRecordValueStoreIterator);
    atomic_store(result, (unint64_t *)&qword_1EDF6B0B0);
  }
  return result;
}

uint64_t sub_18A612C74()
{
  return 24;
}

__n128 sub_18A612C80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18A612C9C()
{
  return 8;
}

_QWORD *sub_18A612CA8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t destroy for CKRecordValueStoreIterator()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s8CloudKit26CKRecordValueStoreIteratorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_18A5F379C();
}

_QWORD *assignWithCopy for CKRecordValueStoreIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for CKRecordValueStoreIterator(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CKRecordValueStoreIterator(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CKRecordValueStoreIterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKRecordValueStoreIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKRecordValueStoreIterator()
{
  return &type metadata for CKRecordValueStoreIterator;
}

_OWORD *sub_18A612E68(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_18A612E78(uint64_t a1)
{
  uint64_t v1;

  return sub_18A612540(a1, *(void **)(v1 + 32), *(_QWORD *)(v1 + 16));
}

unint64_t sub_18A612E94(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_18A612ED0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_18A612ED8()
{
  return swift_dynamicCastObjCClassUnconditional();
}

uint64_t sub_18A612EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_18A612EF8()
{
  return swift_unknownObjectRelease_n();
}

uint64_t sub_18A612F00()
{
  return swift_dynamicCast();
}

uint64_t sub_18A612F08()
{
  return swift_dynamicCast();
}

void sub_18A612F14()
{
  sub_18A618060();
}

uint64_t sub_18A612F20()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A612F2C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_18A612F38()
{
  return NSFastEnumerationIterator.next()();
}

id CKSyncEngine.Configuration.database.getter()
{
  id *v0;

  return *v0;
}

void CKSyncEngine.Configuration.database.setter(void *a1)
{
  id *v1;

  *v1 = a1;
  sub_18A5F379C();
}

uint64_t (*CKSyncEngine.Configuration.database.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.stateSerialization.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  a1[1] = v3;
  return sub_18A612F8C(v2, v3);
}

uint64_t sub_18A612F8C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_18A612FA0(a1, a2);
  return a1;
}

uint64_t sub_18A612FA0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void CKSyncEngine.Configuration.stateSerialization.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  sub_18A60FC24(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.Configuration.stateSerialization.modify())()
{
  return nullsub_3;
}

void CKSyncEngine.Configuration.delegate.getter()
{
  swift_unknownObjectRetain();
  sub_18A5F379C();
}

void CKSyncEngine.Configuration.delegate.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A614630();
  swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v0;
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.Configuration.delegate.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.automaticallySync.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CKSyncEngine.Configuration.automaticallySync.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.automaticallySync.modify())()
{
  return nullsub_3;
}

void CKSyncEngine.Configuration.subscriptionID.getter()
{
  swift_bridgeObjectRetain();
  sub_18A5F379C();
}

void CKSyncEngine.Configuration.subscriptionID.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A614630();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v0;
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.Configuration.subscriptionID.modify())()
{
  return nullsub_3;
}

void CKSyncEngine.Configuration.delegatePrivate.getter()
{
  swift_unknownObjectRetain();
  sub_18A5F379C();
}

void CKSyncEngine.Configuration.delegatePrivate.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A614630();
  swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v0;
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.Configuration.delegatePrivate.modify())()
{
  return nullsub_3;
}

void CKSyncEngine.Configuration.apsMachServiceName.getter()
{
  swift_bridgeObjectRetain();
  sub_18A5F379C();
}

void CKSyncEngine.Configuration.apsMachServiceName.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A614630();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v0;
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.Configuration.apsMachServiceName.modify())()
{
  return nullsub_3;
}

xpc_object_t CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.getter()
{
  uint64_t v0;
  uint64_t v1;
  xpc_object_t result;

  v1 = *(_QWORD *)(v0 + 96);
  sub_18A5F40A4();
  result = *(xpc_object_t *)(v1 + 16);
  if (result)
    return xpc_copy(result);
  return result;
}

uint64_t sub_18A6131EC()
{
  void *v0;

  v0 = (void *)swift_unknownObjectRetain();
  return CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.setter(v0);
}

uint64_t CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  xpc_object_t v3;

  v2 = *(_QWORD *)(v1 + 96);
  if (a1)
  {
    v3 = xpc_copy(a1);
    swift_unknownObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  sub_18A5F46B8();
  *(_QWORD *)(v2 + 16) = v3;
  return swift_unknownObjectRelease();
}

void CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  xpc_object_t v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v4 = v3 + 9;
  v3[10] = v1;
  v5 = *(_QWORD *)(v1 + 96);
  sub_18A5F40A4();
  v6 = *(xpc_object_t *)(v5 + 16);
  if (v6)
    v6 = xpc_copy(v6);
  *v4 = v6;
  sub_18A5F379C();
}

void sub_18A6132D4(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 80) + 96);
  if ((a2 & 1) != 0)
  {
    if (v3)
      v5 = xpc_copy(*(xpc_object_t *)(*(_QWORD *)a1 + 72));
    else
      v5 = 0;
    sub_18A5F46B8();
    *(_QWORD *)(v4 + 16) = v5;
    swift_unknownObjectRelease();
  }
  else
  {
    if (v3)
    {
      v6 = xpc_copy(*(xpc_object_t *)(*(_QWORD *)a1 + 72));
      swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    sub_18A5F46B8();
    *(_QWORD *)(v4 + 16) = v6;
  }
  swift_unknownObjectRelease();
  free(v2);
}

uint64_t CKSyncEngine.Configuration.useOpportunisticPushTopic.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t CKSyncEngine.Configuration.useOpportunisticPushTopic.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.useOpportunisticPushTopic.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.allowFetchAndModifyConcurrently.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t CKSyncEngine.Configuration.allowFetchAndModifyConcurrently.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 105) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.allowFetchAndModifyConcurrently.modify())()
{
  return nullsub_3;
}

void *CKSyncEngine.Configuration.assetDownloadStagingManager.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 112);
  v2 = v1;
  return v1;
}

void CKSyncEngine.Configuration.assetDownloadStagingManager.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = a1;
  sub_18A5F379C();
}

uint64_t (*CKSyncEngine.Configuration.assetDownloadStagingManager.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.useUniqueActivityIdentifiers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t CKSyncEngine.Configuration.useUniqueActivityIdentifiers.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 120) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.useUniqueActivityIdentifiers.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.continueSendingChangesAfterFailure.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 121);
}

uint64_t CKSyncEngine.Configuration.continueSendingChangesAfterFailure.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 121) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.continueSendingChangesAfterFailure.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.isImmediatePushSyncEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 122);
}

uint64_t CKSyncEngine.Configuration.isImmediatePushSyncEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 122) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.isImmediatePushSyncEnabled.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.delegateInternal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_18A613494(v1 + 128, a1);
}

uint64_t sub_18A613494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C((uint64_t *)&unk_1EDF6A750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CKSyncEngine.Configuration.delegateInternal.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_18A6134E4(a1, v1 + 128);
}

uint64_t sub_18A6134E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C((uint64_t *)&unk_1EDF6A750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CKSyncEngine.Configuration.delegateInternal.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.repeatZoneModificationsUntilNoneLeft.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t CKSyncEngine.Configuration.repeatZoneModificationsUntilNoneLeft.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 168) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.repeatZoneModificationsUntilNoneLeft.modify())()
{
  return nullsub_3;
}

void *CKSyncEngine.Configuration.objcEngine.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 176);
  v2 = v1;
  return v1;
}

void CKSyncEngine.Configuration.objcEngine.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = a1;
  sub_18A5F379C();
}

uint64_t (*CKSyncEngine.Configuration.objcEngine.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v9 = *a2;
  v10 = a2[1];
  *(_BYTE *)(a5 + 40) = 1;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A740);
  v11 = sub_18A5F37BC();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(a5 + 96) = v11;
  *(_BYTE *)(a5 + 105) = 0;
  *(_QWORD *)(a5 + 112) = 0;
  *(_WORD *)(a5 + 120) = 0;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_QWORD *)(a5 + 160) = 0;
  *(_BYTE *)(a5 + 168) = 1;
  *(_QWORD *)(a5 + 176) = 0;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  result = CKCurrentProcessIsDaemon();
  *(_BYTE *)(a5 + 122) = result ^ 1;
  *(_BYTE *)(a5 + 104) = 0;
  return result;
}

uint64_t sub_18A613660@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  xpc_object_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  unsigned __int8 v41;
  uint64_t result;
  char v43;
  _BYTE v44[40];

  v2 = v1;
  v4 = objc_msgSend(v1, sel_stateSerialization);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_data);

    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xF000000000000000;
  }
  if (!sub_18A5F3AD8((uint64_t)v4, sel_delegate))
  {
    v16 = sub_18A5F3AD8(0, sel_dataSource);
    if (!v16)
    {
      sub_18A5F45CC();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    objc_msgSend(objc_allocWithZone((Class)CKSyncEngineDataSourceAdapter), sel_initWithDataSource_, v16);
    swift_unknownObjectRetain();
    sub_18A5F101C((uint64_t *)&unk_1EDF6A190);
    sub_18A5F101C(&qword_1EDF6A378);
    v17 = swift_dynamicCast();
    sub_18A614624(v17, v18, v19, v20, v21, v22);
    if (sub_18A5F44C0())
    {
      swift_unknownObjectRelease();
    }
    else
    {
      v23 = sub_18A5F44C0();
      swift_unknownObjectRelease();
      if (!v23)
        goto LABEL_6;
    }
    v43 = 0;
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  sub_18A5F101C(&qword_1EDF6A128);
  sub_18A5F101C(&qword_1EDF6A378);
  v10 = swift_dynamicCast();
  sub_18A614624(v10, v11, v12, v13, v14, v15);
LABEL_6:
  v43 = 1;
LABEL_12:
  sub_18A5F101C(&qword_1EDF6A380);
  swift_initStackObject();
  v24 = swift_unknownObjectRetain();
  sub_18A61CAFC(v24);
  type metadata accessor for CKSyncEngineObjCDelegateAdapter();
  swift_allocObject();
  v25 = sub_18A61E34C();
  v26 = sub_18A5F3AD8(v25, sel_database);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A740);
  v27 = sub_18A5F37BC();
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(v27 + 16) = 0;
  v28 = (_QWORD *)(v27 + 16);
  *(_BYTE *)(a1 + 105) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 32) = &off_1E1F57608;
  swift_retain();
  sub_18A612F8C(v7, v9);
  *(_BYTE *)(a1 + 122) = CKCurrentProcessIsDaemon() ^ 1;
  *(_BYTE *)(a1 + 104) = 0;
  v29 = sub_18A6145B4(v2, (SEL *)&selRef_subscriptionID);
  *(_QWORD *)(a1 + 48) = v29;
  *(_QWORD *)(a1 + 56) = v30;
  v31 = sub_18A5F3AD8(v29, sel_automaticallySync);
  *(_BYTE *)(a1 + 40) = (_BYTE)v31;
  v32 = sub_18A5F3AD8((uint64_t)v31, sel_xpcActivityCriteriaOverrides);
  if (v32)
  {
    v33 = xpc_copy(v32);
    swift_unknownObjectRelease();
  }
  else
  {
    v33 = 0;
  }
  sub_18A5F46B8();
  *v28 = v33;
  v34 = swift_unknownObjectRelease();
  v35 = sub_18A5F3AD8(v34, sel_useUniqueActivityIdentifiers);
  *(_BYTE *)(a1 + 120) = (_BYTE)v35;
  *(_BYTE *)(a1 + 121) = sub_18A5F3AD8((uint64_t)v35, sel_continueSendingChangesAfterFailure);
  v36 = sub_18A6145B4(v2, (SEL *)&selRef_apsMachServiceName);
  *(_QWORD *)(a1 + 80) = v36;
  *(_QWORD *)(a1 + 88) = v37;
  v38 = sub_18A5F3AD8(v36, sel_useOpportunisticPushTopic);
  *(_BYTE *)(a1 + 104) = (_BYTE)v38;
  v39 = sub_18A5F3AD8((uint64_t)v38, sel_allowFetchAndModifyConcurrently);
  *(_BYTE *)(a1 + 105) = (_BYTE)v39;
  v40 = sub_18A5F3AD8((uint64_t)v39, sel_assetDownloadStagingManager);
  *(_QWORD *)(a1 + 112) = v40;
  v41 = sub_18A5F3AD8((uint64_t)v40, sel_isImmediatePushSyncEnabled);
  sub_18A5F45CC();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 122) = v41;
  *(_BYTE *)(a1 + 168) = v43;
  *(_QWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 72) = &off_1E1F575F8;
  return sub_18A6134E4((uint64_t)v44, a1 + 128);
}

unint64_t CKSyncEngine.Configuration.description.getter()
{
  id *v0;
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  Swift::String v18;

  v1 = v0;
  v2 = *v0;
  v3 = objc_msgSend(v2, sel_description);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8 = (unint64_t)v1[2];
  if (v8 >> 60 == 15)
  {
    v9._countAndFlagsBits = 0xD000000000000017;
    v9._object = (void *)0x800000018A83E090;
    String.append(_:)(v9);
  }
  else
  {
    v11 = (uint64_t)v1[1];
    sub_18A612FA0(v11, v8);
    sub_18A614618();
    sub_18A61463C(v12, 0x800000018A83E130);
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v10 = sub_18A60FC24(v11, v8);
  }
  if (*((_BYTE *)v1 + 40) == 1)
    sub_18A61463C(v10, 0x800000018A83E110);
  if (v1[7])
  {
    v14 = (uint64_t)v1[6];
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    sub_18A614610(v14);
    sub_18A614610(0xD000000000000010);
    sub_18A5F3944();
  }
  if (v1[11])
  {
    v15 = (uint64_t)v1[10];
    sub_18A614618();
    swift_bridgeObjectRelease();
    sub_18A614610(v15);
    sub_18A614610(0xD000000000000014);
    sub_18A5F3944();
  }
  v16 = v1[12];
  sub_18A5F40A4();
  v17 = (void *)v16[2];
  if (v17 && xpc_copy(v17))
  {
    _StringGuts.grow(_:)(32);
    v18._countAndFlagsBits = 0xD00000000000001ELL;
    v18._object = (void *)0x800000018A83E0B0;
    String.append(_:)(v18);
    swift_getObjectType();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    sub_18A614610(0);
    swift_unknownObjectRelease();
    sub_18A5F3944();
  }
  return 0xD000000000000018;
}

void sub_18A613D78(xpc_object_t *a1@<X8>)
{
  *a1 = CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.getter();
  sub_18A5F379C();
}

void _s13ConfigurationVwxx(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >> 60 != 15)
    sub_18A60FBA4(*(_QWORD *)(a1 + 8), v2);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if (*(_QWORD *)(a1 + 152))
    sub_18A608B60(a1 + 128);

}

uint64_t _s13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  id v18;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v6 = (uint64_t *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v4;
  if (v7 >> 60 == 15)
  {
    *v5 = *(_OWORD *)v6;
  }
  else
  {
    v9 = *v6;
    sub_18A612FA0(*v6, v7);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  v12 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v12;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  v13 = *(_QWORD *)(a2 + 152);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v14 = v12;
  if (v13)
  {
    v15 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v13;
    *(_QWORD *)(a1 + 160) = v15;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 128, a2 + 128, v13);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v17 = *(void **)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v17;
  v18 = v17;
  return a1;
}

uint64_t _s13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  void *v22;
  id v23;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = (uint64_t *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
      v9 = *v7;
      sub_18A612FA0(*v7, *(_QWORD *)(a2 + 16));
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
    sub_18A6141B0(a1 + 8);
LABEL_6:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    goto LABEL_8;
  }
  v10 = *v7;
  sub_18A612FA0(*v7, *(_QWORD *)(a2 + 16));
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v8;
  sub_18A60FBA4(v11, v12);
LABEL_8:
  v13 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  v15 = *(void **)(a1 + 112);
  v16 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  v17 = v16;

  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  v18 = *(_QWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 152) = v18;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 128, a2 + 128);
      goto LABEL_15;
    }
LABEL_14:
    v19 = *(_OWORD *)(a2 + 128);
    v20 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v20;
    goto LABEL_15;
  }
  if (!v18)
  {
    sub_18A608B60(a1 + 128);
    goto LABEL_14;
  }
  sub_18A6141E4((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
LABEL_15:
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v21 = *(void **)(a1 + 176);
  v22 = *(void **)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v22;
  v23 = v22;

  return a1;
}

uint64_t sub_18A6141B0(uint64_t a1)
{
  _s5StateC13SerializationVwxx(a1);
  return a1;
}

uint64_t *sub_18A6141E4(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

void *_s13ConfigurationVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

uint64_t _s13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  void *v16;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_18A6141B0(a1 + 8);
LABEL_4:
    *(_OWORD *)(a1 + 8) = *v5;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)v5;
  *(_QWORD *)(a1 + 16) = v7;
  sub_18A60FBA4(v8, v6);
LABEL_6:
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_unknownObjectRelease();
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  v14 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  if (*(_QWORD *)(a1 + 152))
    sub_18A608B60(a1 + 128);
  v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v16 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);

  return a1;
}

uint64_t _s13ConfigurationVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 184))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSyncEngine.Configuration()
{
  return &type metadata for CKSyncEngine.Configuration;
}

uint64_t sub_18A61456C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C((uint64_t *)&unk_1EDF6A750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18A6145B4(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_18A614610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_18A614618()
{
  _StringGuts.grow(_:)(22);
}

uint64_t sub_18A614624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  return sub_18A61456C((uint64_t)va, (uint64_t)va1);
}

void sub_18A61463C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD000000000000014;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_18A614648()
{
  sub_18A6146F0();
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_18A6146A4()
{
  sub_18A6146F0();
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_18A6146F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF69318;
  if (!qword_1EDF69318)
  {
    type metadata accessor for Scope(255);
    result = MEMORY[0x18D76E7C4](&unk_18A8391F8, v1);
    atomic_store(result, (unint64_t *)&qword_1EDF69318);
  }
  return result;
}

void CKShare.BlockedIdentity.__allocating_init(userIdentity:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v4;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = a1;
  v4.receiver = v3;
  v4.super_class = v1;
  objc_msgSendSuper2(&v4, sel_init);
  sub_18A5F45D8();
}

id CKShare.BlockedIdentity.userIdentity.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
}

void sub_18A614784()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CKShare.BlockedIdentity.init(userIdentity:)(uint64_t a1)
{
  char *v1;
  objc_class *v3;
  objc_super v4;

  v3 = (objc_class *)sub_18A5F42C0();
  *(_QWORD *)&v1[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = a1;
  v4.receiver = v1;
  v4.super_class = v3;
  objc_msgSendSuper2(&v4, sel_init);
  sub_18A5F45D8();
}

unint64_t CKShare.BlockedIdentity.description.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v1 = *(id *)(v0 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
  v2 = objc_msgSend(v1, sel_description);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 23842;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  return 0xD00000000000001FLL;
}

id CKShare.BlockedIdentity.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *v4;
  char *v5;
  id result;
  objc_super v7;
  uint64_t v8;

  v2 = v1;
  v4 = (objc_class *)sub_18A5F42C0();
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6ADD0);
  swift_dynamicCast();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = v8;
  v7.receiver = v5;
  v7.super_class = v4;
  result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = v4;
  *a1 = result;
  return result;
}

uint64_t CKShare.BlockedIdentity.isEqual(_:)(uint64_t a1)
{
  id v2;
  char v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  sub_18A5F42C0();
  sub_18A60B908(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_18A60B87C((uint64_t)v6);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  sub_18A60B8D0(0, &qword_1EDF6A970);
  v2 = *(id *)&v5[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity];
  v3 = static NSObject.== infix(_:_:)();

  return v3 & 1;
}

id CKShare.BlockedIdentity.hash.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity), sel_hash);
}

id CKShare.BlockedIdentity.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_18A5F42C0();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CKShare.BlockedIdentity()
{
  return objc_opt_self();
}

uint64_t method lookup function for CKShare.BlockedIdentity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKShare.BlockedIdentity.__allocating_init(userIdentity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void CKFetchRecordZonesOperation.perRecordZoneResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perRecordZoneCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A614F28;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A614D08(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKFetchRecordZonesOperation.perRecordZoneResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A615AB4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A614D6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A615AA8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v5 = sub_18A5F37B4();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v7, v8);
    sub_18A5F3964();
    v6 = sub_18A5F438C();
    sub_18A5F37C8(v6, sel_setPerRecordZoneCompletionBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerRecordZoneCompletionBlock_);
  }
}

void sub_18A614E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;

  if (a3)
    v7 = _convertErrorToNSError(_:)();
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a1, a2);

}

uint64_t sub_18A614F04()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A614F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A614E9C(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A614F30(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id, id))
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  if ((a3 & 1) != 0)
  {
    v7 = a2;
    v8 = a1;
    v9 = 0;
    v10 = a2;
  }
  else
  {
    v11 = a2;
    v8 = a1;
    v9 = a2;
    v10 = 0;
  }
  a4(v8, v9, v10);
  sub_18A615B4C(a2);
}

void sub_18A614FA4(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;

  sub_18A614F30(a1, a2, a3 & 1, *(void (**)(uint64_t, id, id))(v3 + 16));
}

void sub_18A614FB0(uint64_t a1, void *a2, id a3, void (*a4)(uint64_t, id, uint64_t))
{
  id v7;
  id v9;
  void *v10;

  if (a3)
  {
    v7 = a3;
    a4(a1, a3, 1);

  }
  else if (a2)
  {
    v9 = a2;
    a4(a1, a2, 0);

  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    a4(a1, v10, 1);

  }
}

void sub_18A6150C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_18A614FB0(a1, a2, a3, *(void (**)(uint64_t, id, uint64_t))(v3 + 16));
}

void sub_18A6150D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, a3, a4);
  swift_release();

}

uint64_t sub_18A615158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A615168()
{
  return swift_release();
}

void CKFetchRecordZonesOperation.perRecordZoneResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchRecordZonesOperation.perRecordZoneResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A6151A0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_fetchRecordZonesCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A615218(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60C0C4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A61527C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A615A74;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.setter((uint64_t)v4);
}

void CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
  {
    sub_18A5F3938((uint64_t)sub_18A615450, MEMORY[0x1E0C809B0], 1107296256, v1, v2);
    sub_18A5F3964();
    a1 = sub_18A5F438C();
  }
  sub_18A5F37C8(a1, sel_setFetchRecordZonesCompletionBlock_);
  sub_18A5F3AA8();
  sub_18A5F3838();
  sub_18A5F3DE4();
}

void sub_18A615380(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F50F0(0, &qword_1EDF6A910);
    sub_18A615ABC();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

void sub_18A615448(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A615380(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_18A615450(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F50F0(0, &qword_1EDF6A910);
    sub_18A615ABC();
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A615538(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchRecordZonesCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A615B58;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A6155D0(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A615634(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F37B4();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A615450, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A60A614(a1);
    swift_retain();
    v7 = sub_18A5F438C();
    sub_18A5F37C8(v7, sel_setFetchRecordZonesCompletionBlock_);
    sub_18A5F3838();
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setFetchRecordZonesCompletionBlock_);
  }
}

void sub_18A615794(void *a1, char a2, void (*a3)(void))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    ((void (*)(_QWORD, void *))a3)(0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F50F0(0, &qword_1EDF6A910);
    sub_18A615ABC();
    Dictionary.init(dictionaryLiteral:)();
    a3();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18A615924()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A615948(void *a1, char a2)
{
  uint64_t v2;

  sub_18A615794(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

void sub_18A615954(uint64_t a1, void *a2, void (*a3)(void *, uint64_t))
{
  id v5;
  id v6;

  if (!a2)
    goto LABEL_4;
  swift_getErrorValue();
  v5 = a2;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a3(0, 0);
    return;
  }
  v6 = a2;
  a3(a2, 1);

}

void sub_18A615A08(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_18A615954(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

void CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A615A40(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A615A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t sub_18A615AA8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_18A66DE88(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_18A615AB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A66DE58(a1, a2, *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 16));
}

unint64_t sub_18A615ABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECD967B8;
  if (!qword_1ECD967B8)
  {
    sub_18A5F50F0(255, (unint64_t *)&qword_1ECD967B0);
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1ECD967B8);
  }
  return result;
}

unint64_t sub_18A615B0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6A9F0;
  if (!qword_1EDF6A9F0)
  {
    type metadata accessor for CKError(255);
    result = MEMORY[0x18D76E7C4](&unk_18A83944C, v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6A9F0);
  }
  return result;
}

void sub_18A615B4C(id a1)
{

}

BOOL Error.ckIsPartialError.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  void *v4;

  MEMORY[0x1E0C80A78]();
  sub_18A5F3E5C();
  (*(void (**)(uint64_t))(v2 + 16))(v1 - v0);
  type metadata accessor for CKError(0);
  result = 0;
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_18A61A47C(&qword_1EDF6A9F0, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();

    if (v4 == (void *)2)
      return 1;
  }
  return result;
}

void CKCheckedUnsafeObjectTransfer.__allocating_init(_:)(uint64_t a1)
{
  sub_18A615DB0(a1, (void (*)(uint64_t))CKCheckedUnsafeObjectTransfer.init(_:));
}

void CKCheckedUnsafeObjectTransfer.extractValue()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  sub_18A61A92C();
  v4 = v3;
  v5 = *v1;
  v6 = *(_QWORD *)(*v1 + 80);
  type metadata accessor for Optional();
  sub_18A61A9CC();
  MEMORY[0x1E0C80A78](v7);
  sub_18A6103D4();
  v10 = v8 - v9;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v15 - v12;
  v14 = (uint64_t)v1 + *(_QWORD *)(v5 + 88);
  sub_18A5F40A4();
  sub_18A61A7C8((uint64_t)v13, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  if (sub_18A5F105C((uint64_t)v13, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v13, v0);
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v4, v13, v6);
    sub_18A5F1010(v10, 1, 1, v6);
    sub_18A61A71C();
    sub_18A61A7C8(v14, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 40));
    swift_endAccess();
    sub_18A5F3800();
  }
}

void CKUnsafeObjectTransfer.__allocating_init(_:)(uint64_t a1)
{
  sub_18A615DB0(a1, (void (*)(uint64_t))CKUnsafeObjectTransfer.init(_:));
}

void sub_18A615DB0(uint64_t a1, void (*a2)(uint64_t))
{
  swift_allocObject();
  a2(a1);
  sub_18A5F3824();
}

Swift::String __swiftcall Data.ckBase64URLSafeString()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  Data.base64EncodedString(options:)(0);
  sub_18A618024();
  sub_18A61A6D4();
  swift_bridgeObjectRelease();
  sub_18A61A6D4();
  sub_18A5F3FE4();
  sub_18A61A6D4();
  swift_bridgeObjectRelease();
  v0 = sub_18A61A770();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall Data.ckLowercaseHexStringWithoutSpaces()()
{
  Class isa;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class CKLowercaseHexStringWithoutSpaces](isa, sel_CKLowercaseHexStringWithoutSpaces);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall String.ckLowercaseHexStringWithoutSpaces()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v0 = type metadata accessor for SHA256();
  MEMORY[0x1E0C80A78](v0);
  sub_18A5F3E5C();
  v1 = type metadata accessor for SHA256Digest();
  MEMORY[0x1E0C80A78](v1);
  sub_18A6103D4();
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for String.Encoding();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_18A5F3E5C();
  v7 = v6 - v5;
  String.lowercased()();
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v9 = v8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  if (v9 >> 60 != 15)
  {
    sub_18A61A47C(&qword_1EDF6B198, (void (*)(uint64_t))MEMORY[0x1E0CA9940]);
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x18A61626CLL);
}

uint64_t sub_18A61627C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for SHA256Digest();
  v8 = v2;
  sub_18A61A47C(&qword_1EDF6B230, (void (*)(uint64_t))MEMORY[0x1E0CA92F8]);
  v9 = v3;
  v4 = sub_18A612B50(v7);
  v5 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v4, a1, v2);
  sub_18A608B00(v7, v8);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
  sub_18A608B60((uint64_t)v7);
  return sub_18A61A770();
}

uint64_t sub_18A616358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v10 = sub_18A5F101C(&qword_1EDF6B1E0);
  sub_18A619FAC(&qword_1EDF6B1E8, &qword_1EDF6B1E0);
  v11 = v4;
  v9[0] = a1;
  v9[1] = a2;
  v5 = sub_18A608B00(v9, v10);
  if (*v5)
    v6 = *v5 + v5[1];
  else
    v6 = 0;
  sub_18A6192D0(*v5, v6, &v8);
  sub_18A608B60((uint64_t)v9);
  return sub_18A61A770();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.ckMarkFilePurgeable()()
{
  void *v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v4;
  id v5;
  NSURL *v6;

  v6 = (NSURL *)*MEMORY[0x1E0C80C00];
  URL._bridgeToObjectiveC()(v6);
  v1 = v0;
  v5 = 0;
  v2 = objc_msgSend(v0, sel_CKMarkFilePurgeable_, &v5);

  if (v2)
  {
    v3 = v5;
  }
  else
  {
    v4 = v5;
    _convertNSErrorToError(_:)();

    sub_18A61A8B8();
  }
}

void CKActivityCreate(_:dso:)(unint64_t a1@<X0>, char a2@<W2>, void *a3@<X3>, unint64_t a4@<X8>)
{
  void *v5;
  const char *v6;
  os_activity_t v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char description[8];

  if ((a2 & 1) == 0)
  {
    if (a1)
    {
      if (a3)
      {
        dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
        v5 = (void *)sub_18A61A770();
        _os_activity_create(v5, v6, v7, OS_ACTIVITY_FLAG_DEFAULT);
        return;
      }
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_14;
  }
  a4 = HIDWORD(a1);
  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a1 >> 11 == 27)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  LODWORD(a4) = WORD1(a1);
  if (WORD1(a1) > 0x10u)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0xFFFFFF80) == 0)
  {
    if (a1 <= 0xFF)
    {
      v8 = (a1 + 1);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_16:
  v10 = (a1 & 0x3F) << 8;
  v11 = (v10 | (a1 >> 6)) + 33217;
  v12 = (v10 | (a1 >> 6) & 0x3F) << 8;
  v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
  v14 = (v12 | (a1 >> 12)) + 8487393;
  if ((_DWORD)a4)
    v8 = v13;
  else
    v8 = v14;
  if (a1 < 0x800)
    v8 = v11;
LABEL_11:
  *(_QWORD *)description = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v8) & 0x38)) & 0x38));
  if (a3)
  {
    v9 = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
    _os_activity_create(a3, description, v9, OS_ACTIVITY_FLAG_DEFAULT);
    sub_18A5F42C8();
    return;
  }
LABEL_24:
  sub_18A61A974();
  __break(1u);
}

uint64_t CKPerformWithActivity<A>(_:block:)(unint64_t a1, uint64_t a2, char a3, void (*a4)(void))
{
  os_activity_t v5;
  os_activity_scope_state_s state;
  unint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  CKActivityCreate(_:dso:)(a1, a3, &dword_18A5C5000, v8);
  os_activity_scope_enter(v5, &state);
  a4();
  os_activity_scope_leave(&state);
  return swift_unknownObjectRelease();
}

uint64_t sub_18A6166E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 + 120) = a5;
  *(_QWORD *)(v6 + 128) = a6;
  *(_BYTE *)(v6 + 81) = a4;
  *(_QWORD *)(v6 + 104) = a2;
  *(_QWORD *)(v6 + 112) = a3;
  *(_QWORD *)(v6 + 136) = *(_QWORD *)a5;
  *(_BYTE *)(v6 + 82) = *(_BYTE *)(a5 + 8);
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a5 + 16);
  v7 = *(_QWORD *)(a5 + 32);
  *(_BYTE *)(v6 + 83) = *(_BYTE *)(a5 + 40);
  v8 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(v6 + 160) = v7;
  *(_QWORD *)(v6 + 168) = v8;
  *(_BYTE *)(v6 + 84) = *(_BYTE *)(a5 + 56);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A61677C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  NSObject *v10;
  _QWORD *v11;
  __int128 v13;

  v1 = *(unsigned __int8 *)(v0 + 84);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_BYTE *)(v0 + 82);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = v1 & 1;
  v9 = *(_BYTE *)(v0 + 83) & 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  v13 = *(_OWORD *)(v0 + 144);
  CKActivityCreate(_:dso:)(v7, *(_BYTE *)(v0 + 81), &dword_18A5C5000, v1);
  *(_QWORD *)(v0 + 176) = v10;
  os_activity_scope_enter(v10, (os_activity_scope_state_t)(v0 + 88));
  *(_BYTE *)(v0 + 16) = 1;
  *(_QWORD *)(v0 + 24) = v5;
  *(_BYTE *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 40) = v13;
  *(_QWORD *)(v0 + 56) = v3;
  *(_BYTE *)(v0 + 64) = v9;
  *(_QWORD *)(v0 + 72) = v2;
  *(_BYTE *)(v0 + 80) = v8;
  sub_18A61A4B0(v6);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v11;
  *v11 = v0;
  v11[1] = sub_18A61689C;
  return sub_18A68085C((const void *)(v0 + 16));
}

uint64_t sub_18A61689C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_18A61A9A0();
  *v2 = *v1;
  *(_QWORD *)(v3 + 192) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A61692C()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A61A758();
  sub_18A61A898();
  sub_18A612ED0();
  sub_18A61A4FC(v1);
  sub_18A61A878();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6169A0()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A61A758();
  sub_18A61A898();
  sub_18A612ED0();
  sub_18A61A4FC(v1);
  sub_18A61A878();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A616A14(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = a8;
  *(_BYTE *)(v8 + 129) = a6;
  *(_QWORD *)(v8 + 72) = a3;
  *(_QWORD *)(v8 + 80) = a5;
  *(_BYTE *)(v8 + 128) = a4;
  *(_QWORD *)(v8 + 64) = a2;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A616A7C()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD *v8;

  v1 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(v0 + 129);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(void **)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  CKActivityCreate(_:dso:)(v5, *(_BYTE *)(v0 + 128), &dword_18A5C5000, v1);
  *(_QWORD *)(v0 + 104) = v6;
  os_activity_scope_enter(v6, (os_activity_scope_state_t)(v0 + 48));
  *(_BYTE *)(v0 + 16) = 1;
  *(_QWORD *)(v0 + 24) = v3;
  *(_BYTE *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v4;
  swift_bridgeObjectRetain();
  v7 = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v8;
  *v8 = v0;
  v8[1] = sub_18A616B60;
  return sub_18A6791B4(v0 + 16);
}

uint64_t sub_18A616B60()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_18A61A9A0();
  *v2 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A616BF0()
{
  uint64_t v0;
  void *v1;

  sub_18A61A844();
  sub_18A5F3FE4();
  sub_18A61A898();
  sub_18A612ED0();
  sub_18A5F3FE4();

  sub_18A61A878();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A616C68()
{
  uint64_t v0;
  void *v1;

  sub_18A61A844();
  sub_18A5F3FE4();
  sub_18A61A898();
  sub_18A612ED0();
  sub_18A5F3FE4();

  sub_18A61A878();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A616CE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_18A5F43B0(a1, a2, a3, a4, a5, a6);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A616D30()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_18A61A728();
  CKActivityCreate(_:dso:)(v1, v2, &dword_18A5C5000, v3);
  sub_18A61A7D0(v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  v6 = sub_18A61A8C0(v5);
  return sub_18A695AA0(v6, v7, v8);
}

uint64_t sub_18A616DB4()
{
  sub_18A61A6A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A616E30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_18A5F43B0(a1, a2, a3, a4, a5, a6);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A616E80()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_18A61A728();
  CKActivityCreate(_:dso:)(v1, v2, &dword_18A5C5000, v3);
  sub_18A61A7D0(v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  v6 = sub_18A61A8C0(v5);
  return sub_18A696418(v6, v7, v8);
}

uint64_t sub_18A616F04()
{
  sub_18A61A6A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A616F80()
{
  uint64_t v0;

  sub_18A61A7DC();
  sub_18A61A798();
  sub_18A5F3AA0();
  return sub_18A61A748(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A616FDC()
{
  uint64_t v0;

  sub_18A61A7DC();
  sub_18A61A798();
  sub_18A5F3AA0();
  return sub_18A61A748(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A617038(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_18A61A7F8(a1, a2, a3, a4, a5, a6);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A617088()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_18A61A814();
  CKActivityCreate(_:dso:)(v1, v2, &dword_18A5C5000, v3);
  sub_18A61A8E8(v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  sub_18A61A8D4(v5);
  return sub_18A690050(v0 + 32, v6, v7, v8);
}

uint64_t sub_18A61710C()
{
  sub_18A5F3FC0();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A617188()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A61A830();
  sub_18A61A798();
  sub_18A5F3AA0();
  v2 = *(_QWORD *)(v1 + 32);

  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_18A6171FC()
{
  void *v0;
  uint64_t v1;

  sub_18A61A830();
  sub_18A61A798();
  sub_18A5F3AA0();

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_18A617268(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_18A61A7F8(a1, a2, a3, a4, a5, a6);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6172B8()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_18A61A814();
  CKActivityCreate(_:dso:)(v1, v2, &dword_18A5C5000, v3);
  sub_18A61A8E8(v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  sub_18A61A8D4(v5);
  return sub_18A691420(v0 + 32, v6, v7);
}

uint64_t sub_18A61733C()
{
  sub_18A5F3FC0();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t CKPerformWithActivity<A>(_:block:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_18A5F43B0(a1, a2, a3, a4, a5, a6);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A617408()
{
  _QWORD *v0;
  int *v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (int *)v0[7];
  v2 = sub_18A61A728();
  CKActivityCreate(_:dso:)(v2, v3, &dword_18A5C5000, v4);
  sub_18A61A7D0(v5);
  v6 = *v1;
  v7 = (_QWORD *)swift_task_alloc();
  v0[10] = v7;
  *v7 = v0;
  v7[1] = sub_18A6174A8;
  return ((uint64_t (*)(_QWORD))((char *)v1 + v6))(v0[4]);
}

uint64_t sub_18A6174A8()
{
  sub_18A61A6A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A617524()
{
  uint64_t v0;

  sub_18A61A858();
  sub_18A61A798();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A617578()
{
  uint64_t v0;

  sub_18A61A858();
  sub_18A61A798();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Bool __swiftcall CKUseSystemInstalledBinaries()()
{
  return CKUseSystemInstalledBinariesFuncForSwift();
}

uint64_t sub_18A6175E0()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if ((String.count.getter() & 1) != 0)
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A61A47C(&qword_1EDF6A9F0, type metadata accessor for CKError);
    sub_18A61AA14();
    return sub_18A61A8B8();
  }
  v0 = String.count.getter();
  if (v0 < -1)
    __break(1u);
  if ((unint64_t)(v0 + 1) < 3)
    return 0;
  if (!(v0 / 2))
  {
    __break(1u);
    goto LABEL_14;
  }
  v2 = sub_18A61AA08();
  if ((unint64_t)sub_18A61AA08() >> 14 < v2 >> 14)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v3 = String.subscript.getter();
  v7 = v6;
  if ((v3 ^ v4) >> 14)
  {
    v8 = v3;
    v9 = v4;
    v10 = v5;
    v11 = sub_18A619ED0(v3, v4, v5, v6, 16);
    if ((v11 & 0x10000) != 0)
      LOWORD(v11) = sub_18A619344(v8, v9, v10, v7, 16);
    v12 = v11;
    swift_bridgeObjectRelease();
    if ((v12 & 0x100) == 0)
      JUMPOUT(0x18A61779CLL);
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRelease();
LABEL_16:
  type metadata accessor for CKError(0);
  sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
  sub_18A61A47C(&qword_1EDF6A9F0, type metadata accessor for CKError);
  sub_18A61AA14();
  sub_18A61A8B8();
  return sub_18A60FBA4(0, 0xC000000000000000);
}

void CKCheckedUnsafeObjectTransfer.__allocating_init()()
{
  swift_allocObject();
  CKCheckedUnsafeObjectTransfer.init()();
  sub_18A5F379C();
}

uint64_t CKCheckedUnsafeObjectTransfer.init()()
{
  uint64_t v0;

  sub_18A5F1010(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88), 1, 1, *(_QWORD *)(*(_QWORD *)v0 + 80));
  return v0;
}

void CKCheckedUnsafeObjectTransfer.init(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  sub_18A61A92C();
  v2 = v1;
  v3 = *v0;
  v4 = *(_QWORD *)(*v0 + 80);
  v5 = sub_18A61A9E0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - v7;
  v9 = (uint64_t)v0 + *(_QWORD *)(v3 + 88);
  sub_18A61A7BC(v9, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v8, v2, v4);
  sub_18A61A7BC((uint64_t)v8, 0);
  sub_18A61A71C();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  sub_18A5F3800();
}

void CKCheckedUnsafeObjectTransfer.setValue(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  sub_18A61A92C();
  v4 = v3;
  v5 = *v1;
  v6 = *(_QWORD *)(*v1 + 80);
  sub_18A61A9E0();
  sub_18A61A9CC();
  MEMORY[0x1E0C80A78](v7);
  sub_18A6103D4();
  v10 = v8 - v9;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v16 - v12;
  v14 = (uint64_t)v1 + *(_QWORD *)(v5 + 88);
  sub_18A5F40A4();
  sub_18A61A7C8((uint64_t)v13, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v15 = sub_18A5F105C((uint64_t)v13, 1, v6);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v13, v0);
  if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v10, v4, v6);
    sub_18A61A7BC(v10, 0);
    sub_18A61A71C();
    sub_18A61A7C8(v14, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 40));
    swift_endAccess();
    sub_18A5F3800();
  }
  else
  {
    __break(1u);
  }
}

uint64_t CKUnsafeObjectTransfer.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
  return v1;
}

void CKUnsafeObjectTransfer.wrapped.getter()
{
  uint64_t v0;
  void (*v1)(uint64_t);

  sub_18A61A880();
  sub_18A5F40A4();
  v0 = sub_18A61A770();
  v1(v0);
  sub_18A5F40C8();
}

void CKUnsafeObjectTransfer.wrapped.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_18A61A880();
  sub_18A61A71C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 40))(v1, a1);
  swift_endAccess();
  sub_18A5F40C8();
}

uint64_t (*CKUnsafeObjectTransfer.wrapped.modify())()
{
  sub_18A61A71C();
  return j__swift_endAccess;
}

uint64_t CKUnsafeObjectTransfer.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t CKUnsafeObjectTransfer.__deallocating_deinit()
{
  return sub_18A5F5164((void (*)(void))CKUnsafeObjectTransfer.deinit);
}

uint64_t String.ckSplit(maxSize:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = 0;
    v20 = 4 * v3;
    v5 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v6 = v5 | (v3 << 16);
    v7 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      result = String.index(_:offsetBy:limitedBy:)();
      v10 = (v9 & 1) != 0 ? v6 : result;
      if (v10 >> 14 < v4)
        break;
      v11 = String.subscript.getter();
      v12 = MEMORY[0x18D76C844](v11);
      v14 = v13;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A61A8AC(0, *(_QWORD *)(v7 + 16) + 1);
        v7 = v18;
      }
      v16 = *(_QWORD *)(v7 + 16);
      v15 = *(_QWORD *)(v7 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_18A61A8AC(v15 > 1, v16 + 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v16 + 1;
      v17 = v7 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v14;
      v4 = v10 >> 14;
      if (v10 >> 14 >= v20)
        return v7;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t CKAssociatedObjectKey()()
{
  return swift_slowAlloc();
}

uint64_t TaskPriority.init(_:)(uint64_t a1)
{
  switch(a1)
  {
    case -1:
      return TaskPriority.init(rawValue:)();
    case 33:
      return static TaskPriority.userInitiated.getter();
    case 17:
      return TaskPriority.init(rawValue:)();
  }
  if (a1 != 25)
  {
    if (a1 == 9)
      return static TaskPriority.low.getter();
    return TaskPriority.init(rawValue:)();
  }
  return static TaskPriority.userInitiated.getter();
}

uint64_t NSQualityOfService.init(_:)(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  Swift::String v16;
  Swift::String v17;
  _QWORD v18[2];

  v2 = type metadata accessor for TaskPriority();
  v3 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
  MEMORY[0x1E0C80A78](v2);
  sub_18A6103D4();
  v6 = v4 - v5;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v18 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v18 - v11;
  sub_18A61A9C0((uint64_t)v18 - v11);
  static TaskPriority.background.getter();
  sub_18A61A47C(&qword_1EDF6B1A8, v3);
  v13 = sub_18A5F3AEC();
  sub_18A61A740((uint64_t)v10);
  if ((v13 & 1) != 0)
  {
    v14 = 9;
LABEL_4:
    sub_18A61A740(a1);
    sub_18A61A740((uint64_t)v12);
    return v14;
  }
  static TaskPriority.low.getter();
  sub_18A5F3AEC();
  sub_18A61A70C();
  TaskPriority.init(rawValue:)();
  sub_18A5F3AEC();
  sub_18A61A70C();
  if ((v13 & 1) != 0)
  {
    v14 = 17;
    goto LABEL_4;
  }
  static TaskPriority.low.getter();
  sub_18A5F3AEC();
  sub_18A61A70C();
  static TaskPriority.userInitiated.getter();
  sub_18A5F3AEC();
  sub_18A61A70C();
  if ((v13 & 1) != 0)
  {
    v14 = 25;
    goto LABEL_4;
  }
  sub_18A61A9C0(v6);
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v16._object = (void *)0x800000018A83E3A0;
  v16._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v16);
  sub_18A61A47C(&qword_1EDF6B1B0, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  sub_18A5F37E0();
  result = sub_18A61A974();
  __break(1u);
  return result;
}

unint64_t sub_18A618024()
{
  unint64_t result;

  result = qword_1EDF6A3E0;
  if (!qword_1EDF6A3E0)
  {
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EDF6A3E0);
  }
  return result;
}

void sub_18A618060()
{
  sub_18A618404();
}

void sub_18A61807C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v7 != v8)
    {
      sub_18A61A78C();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    sub_18A5F101C(&qword_1EDF6A830);
    v11 = (char *)sub_18A5F3974();
    j__malloc_size(v11);
    sub_18A61A960();
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    sub_18A618F58((char *)(a4 + 32), v9, v13);
    sub_18A61A6F0();
  }
  else
  {
    sub_18A6187CC(0, v9, (unint64_t)v13, a4);
  }
  sub_18A5F3824();
}

void sub_18A618130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A618158(a1, a2, a3, a4, &qword_1EDF6B218);
}

void sub_18A618144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A618158(a1, a2, a3, a4, &qword_1EDF6B220);
}

void sub_18A618158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = a1;
  if ((a3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v8 != v9)
    {
      sub_18A61A78C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v7 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(a4 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_18A61A7F0(a1, a2, a3, a4, a5);
    v12 = sub_18A5F3974();
    v13 = j__malloc_size((const void *)v12);
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = 2 * ((uint64_t)(v13 - 32) / 32);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  if ((v6 & 1) != 0)
  {
    sub_18A619074((char *)(a4 + 32), v10, (char *)(v12 + 32));
    sub_18A61A6F0();
  }
  else
  {
    v14 = sub_18A61A9EC();
    sub_18A6188C0(v14, v15, v16, v17);
  }
  sub_18A5F3814();
}

void sub_18A618210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A618158(a1, a2, a3, a4, &qword_1EDF6B228);
}

void sub_18A618224()
{
  sub_18A618354();
}

void sub_18A618240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A6184AC(a1, a2, a3, a4, &qword_1EDF6A330);
}

void sub_18A618254()
{
  sub_18A618278();
}

void sub_18A618278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void (*v5)(uint64_t, uint64_t, _QWORD *);
  void (*v6)(uint64_t, uint64_t, _QWORD *);
  void (*v7)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t);
  void (*v8)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  sub_18A61A92C();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v3;
  v12 = v0;
  if ((v2 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v14 != v15)
    {
      sub_18A61A78C();
      if (v14)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v13 = v1;
  }
  v16 = *(_QWORD *)(v11 + 16);
  if (v13 <= v16)
    v17 = *(_QWORD *)(v11 + 16);
  else
    v17 = v13;
  if (v17)
  {
    sub_18A61A7F0(v0, v1, v2, v3, v4);
    v18 = (_QWORD *)sub_18A5F3974();
    j__malloc_size(v18);
    sub_18A61A960();
    v18[2] = v16;
    v18[3] = v19;
  }
  else
  {
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v20 = v18 + 4;
  if ((v12 & 1) != 0)
  {
    v6(v11 + 32, v16, v20);
    sub_18A61A6F0();
  }
  else
  {
    v8(0, v16, v20, v11, v10);
  }
  sub_18A5F3800();
}

void sub_18A618338()
{
  sub_18A618354();
}

void sub_18A618354()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;

  sub_18A61A92C();
  sub_18A61A8F4();
  if ((v4 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v8 != v9)
    {
      sub_18A61A78C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v7 = v3;
  }
  if (v7 <= *(_QWORD *)(v0 + 16))
    v10 = *(_QWORD *)(v0 + 16);
  else
    v10 = v7;
  if (v10)
  {
    sub_18A61A7F0(v2, v3, v4, v5, v6);
    v11 = (_QWORD *)sub_18A5F37B4();
    v2 = sub_18A61A908(v11);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  if ((v1 & 1) != 0)
  {
    sub_18A61A940();
    sub_18A61A6F0();
  }
  else
  {
    sub_18A61A868(v2, v3, v10 + 32);
  }
  sub_18A5F3800();
}

void sub_18A6183E8()
{
  sub_18A618404();
}

void sub_18A618404()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;

  sub_18A61A92C();
  sub_18A61A8F4();
  if ((v4 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v8 != v9)
    {
      sub_18A61A78C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v7 = v3;
  }
  if (v7 <= *(_QWORD *)(v0 + 16))
    v10 = *(_QWORD *)(v0 + 16);
  else
    v10 = v7;
  if (v10)
  {
    sub_18A61A7F0(v2, v3, v4, v5, v6);
    v11 = (_QWORD *)sub_18A5F37B4();
    v2 = sub_18A61A908(v11);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  if ((v1 & 1) != 0)
  {
    sub_18A61A940();
    sub_18A61A6F0();
  }
  else
  {
    sub_18A61A868(v2, v3, v10 + 32);
  }
  sub_18A5F3800();
}

void sub_18A618498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A6184AC(a1, a2, a3, a4, (uint64_t *)&unk_1EDF6A1D8);
}

void sub_18A6184AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = a1;
  if ((a3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v8 != v9)
    {
      sub_18A61A78C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v7 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(a4 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_18A61A7F0(a1, a2, a3, a4, a5);
    v12 = sub_18A5F3974();
    j__malloc_size((const void *)v12);
    sub_18A61A94C();
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v13;
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  if ((v6 & 1) != 0)
  {
    sub_18A618FB4((char *)(a4 + 32), v10, (char *)(v12 + 32));
    sub_18A61A6F0();
  }
  else
  {
    v14 = sub_18A61A9EC();
    sub_18A618D10(v14, v15, v16, v17);
  }
  sub_18A5F3814();
}

void sub_18A618558()
{
  sub_18A618278();
}

void sub_18A61857C()
{
  sub_18A618278();
}

void sub_18A6185A0()
{
  sub_18A618278();
}

void sub_18A6185C4()
{
  sub_18A618278();
}

void sub_18A6185E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A6184AC(a1, a2, a3, a4, (uint64_t *)&unk_1EDF6A180);
}

void sub_18A6185FC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v7 != v8)
    {
      sub_18A61A78C();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    sub_18A5F101C(&qword_1EDF6A620);
    v11 = (char *)sub_18A5F3974();
    j__malloc_size(v11);
    sub_18A61A94C();
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    sub_18A618FB4((char *)(a4 + 32), v9, v13);
    sub_18A61A6F0();
  }
  else
  {
    sub_18A618DB8(0, v9, (unint64_t)v13, a4);
  }
  sub_18A5F3824();
}

uint64_t sub_18A6186B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_18A5F101C((uint64_t *)&unk_1EDF6B0A0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18A6187CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_18A6188C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_18A5F41C8();
    sub_18A61A77C();
    goto LABEL_11;
  }
  v5 = a4 + 32 * a1 + 32;
  if (v5 >= a3 + 32 * v4 || v5 + 32 * v4 <= a3)
  {
    sub_18A5F44CC();
    sub_18A5F37E0();
    sub_18A5F42C8();
    return;
  }
  sub_18A5F41C8();
  sub_18A5F3D24();
LABEL_11:
  sub_18A5F46D4();
  __break(1u);
}

uint64_t sub_18A618968(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_18A5F101C(&qword_1EDF6B210);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18A618A84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18A618B80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_18A618C7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  BOOL v5;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_18A5F41C8();
    sub_18A61A77C();
    goto LABEL_11;
  }
  sub_18A61A7A0();
  if (v4)
    v5 = 0;
  else
    v5 = v3 > v2;
  if (!v5)
  {
    sub_18A5F44CC();
    sub_18A5F37E0();
    sub_18A5F42C8();
    return;
  }
  sub_18A5F41C8();
  sub_18A5F3D24();
LABEL_11:
  sub_18A5F46D4();
  __break(1u);
}

void sub_18A618D10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_18A5F41C8();
    sub_18A61A77C();
    goto LABEL_11;
  }
  v5 = a4 + 8 * a1 + 32;
  if (v5 >= a3 + 8 * v4 || v5 + 8 * v4 <= a3)
  {
    sub_18A5F44CC();
    sub_18A5F37E0();
    sub_18A5F42C8();
    return;
  }
  sub_18A5F41C8();
  sub_18A5F3D24();
LABEL_11:
  sub_18A5F46D4();
  __break(1u);
}

uint64_t sub_18A618DB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_18A5F101C((uint64_t *)&unk_1EDF6A780);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_18A618ECC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_18A618F58(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18A5F41C8();
    result = (char *)sub_18A5F3E28();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_18A5F46C4(a3, result);
  }
  return result;
}

char *sub_18A618FB4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18A5F41C8();
    result = (char *)sub_18A5F3E28();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_18A5F46C4(a3, result);
  }
  return result;
}

char *sub_18A619014(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18A5F41C8();
    result = (char *)sub_18A5F3E28();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_18A5F46C4(a3, result);
  }
  return result;
}

char *sub_18A619074(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18A5F41C8();
    result = (char *)sub_18A5F3E28();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_18A5F46C4(a3, result);
  }
  return result;
}

char *sub_18A6190CC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_18A619154(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18A5F41C8();
    result = (char *)sub_18A5F3E28();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_18A5F46C4(a3, result);
  }
  return result;
}

void sub_18A6191B4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_18A5F41C8();
    sub_18A5F3E28();
    __break(1u);
  }
  else if (a3 < a1 || a1 + *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * a2 <= a3)
  {
    sub_18A5F101C(&qword_1EDF6A3D0);
    sub_18A61A980();
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 == a1)
  {
    sub_18A5F40C8();
  }
  else
  {
    sub_18A61A980();
    swift_arrayInitWithTakeBackToFront();
  }
}

void sub_18A619274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    sub_18A5F101C((uint64_t *)&unk_1EDF6A8D0);
    v4 = (_QWORD *)sub_18A5F37B4();
    v5 = j__malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  sub_18A5F379C();
}

uint64_t sub_18A6192D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = MEMORY[0x18D76C2BC]();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = MEMORY[0x18D76C2C8]();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_18A619344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_18A619FE0();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_18A6196D8();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = (unsigned __int16)sub_18A619430(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

unsigned __int8 *sub_18A619430(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6196D8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_18A619734();
  v4 = sub_18A619768(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_18A619734()
{
  return String.subscript.getter();
}

uint64_t sub_18A619768(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_18A6198AC(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      sub_18A619274(v9, 0);
      v12 = v11;
      v13 = sub_18A619998((unint64_t)v15, v11 + 32, v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v13 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v14 = MEMORY[0x18D76C850](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v14;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x18D76C850);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x18D76C850]((char *)v15 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_18A6198AC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_18A65258C(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_18A65258C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t sub_18A619998(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = sub_18A65258C(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = sub_18A65258C(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_18A619B98(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      sub_18A61AA00();
      sub_18A61A47C(&qword_1EDF6B198, (void (*)(uint64_t))MEMORY[0x1E0CA9940]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A619C58()
{
  sub_18A61AA00();
  sub_18A61A47C(&qword_1EDF6B198, (void (*)(uint64_t))MEMORY[0x1E0CA9940]);
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t sub_18A619D64()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CKCheckedUnsafeObjectTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKCheckedUnsafeObjectTransfer);
}

uint64_t method lookup function for CKCheckedUnsafeObjectTransfer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKCheckedUnsafeObjectTransfer.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of CKCheckedUnsafeObjectTransfer.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_18A619DFC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CKUnsafeObjectTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKUnsafeObjectTransfer);
}

uint64_t method lookup function for CKUnsafeObjectTransfer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKUnsafeObjectTransfer.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_18A619E8C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D76E7B8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_18A619ED0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  _QWORD v15[2];
  char v16;

  if ((a4 & 0x1000000000000000) != 0)
  {
    v14 = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = sub_18A61A01C((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v16 = BYTE1(result) & 1;
    v14 = result | ((BYTE1(result) & 1) << 8);
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
    return v14 | (LOBYTE(v15[0]) << 16);
  }
  return result;
}

void sub_18A619FAC(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    sub_18A619E8C(a2);
    sub_18A61A994();
  }
  sub_18A5F379C();
}

unint64_t sub_18A619FE0()
{
  unint64_t result;

  result = qword_1EDF6A760;
  if (!qword_1EDF6A760)
  {
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EDF6A760);
  }
  return result;
}

uint64_t sub_18A61A01C(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  unsigned __int8 v35;
  int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  char v49;

  v11 = a3;
  v12 = result;
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a3 & 0xC;
  v16 = a3;
  if (v15 == 4 << v13)
  {
    result = sub_18A65258C(a3, a5, a6);
    v16 = result;
  }
  v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0)
      v19 = HIBYTE(a6) & 0xF;
    if (v19 < v16 >> 16)
      goto LABEL_105;
    result = String.UTF8View._foreignDistance(from:to:)();
    v18 = result;
    v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    v20 = v17;
    result = sub_18A65258C(v11, a5, a6);
    v17 = v20;
    v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    v21 = a4;
    v22 = v17;
    result = sub_18A65258C(v21, a5, a6);
    v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v23 = v17;
  if (v23 < v11 >> 16)
    goto LABEL_101;
  if (v23 < a4 >> 16)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_100;
  }
  if (v24 < v18)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12)
    v25 = 0;
  v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v37 = a7 + 87;
        if (a7 > 10)
        {
          v38 = a7 + 55;
        }
        else
        {
          v37 = 97;
          v38 = 65;
        }
        if (a7 <= 10)
          v39 = a7 + 48;
        else
          v39 = 58;
        if (v25)
        {
          LOBYTE(v30) = 0;
          v40 = v25 + 1;
          v41 = result - 1;
          do
          {
            v42 = *v40;
            if (v42 < 0x30 || v42 >= v39)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                v35 = 0;
                v36 = 1;
                if (v42 < 0x61 || v42 >= v37)
                  return v35 | (v36 << 8);
                v43 = -87;
              }
              else
              {
                v43 = -55;
              }
            }
            else
            {
              v43 = -48;
            }
            if (((v30 * (unsigned __int16)a7) & 0xFF00) != 0)
              goto LABEL_97;
            v30 = (v30 * a7) + (v42 + v43);
            if (((v30 >> 8) & 1) != 0)
              goto LABEL_97;
            ++v40;
            --v41;
          }
          while (v41);
LABEL_73:
          v36 = 0;
          v35 = v30;
          return v35 | (v36 << 8);
        }
        goto LABEL_96;
      }
LABEL_97:
      v35 = 0;
      v36 = 1;
      return v35 | (v36 << 8);
    }
    goto LABEL_104;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      v44 = a7 + 87;
      if (a7 > 10)
      {
        v45 = a7 + 55;
      }
      else
      {
        v44 = 97;
        v45 = 65;
      }
      if (a7 <= 10)
        v46 = a7 + 48;
      else
        v46 = 58;
      if (v25)
      {
        LOBYTE(v47) = 0;
        do
        {
          v48 = *v25;
          if (v48 < 0x30 || v48 >= v46)
          {
            if (v48 < 0x41 || v48 >= v45)
            {
              v35 = 0;
              v36 = 1;
              if (v48 < 0x61 || v48 >= v44)
                return v35 | (v36 << 8);
              v49 = -87;
            }
            else
            {
              v49 = -55;
            }
          }
          else
          {
            v49 = -48;
          }
          if (((v47 * (unsigned __int16)a7) & 0xFF00) != 0)
            goto LABEL_97;
          v47 = (v47 * a7) + (v48 + v49);
          if (((v47 >> 8) & 1) != 0)
            goto LABEL_97;
          ++v25;
          --result;
        }
        while (result);
        v36 = 0;
        v35 = v47;
        return v35 | (v36 << 8);
      }
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v27 = a7 + 87;
      if (a7 > 10)
      {
        v28 = a7 + 55;
      }
      else
      {
        v27 = 97;
        v28 = 65;
      }
      if (a7 <= 10)
        v29 = a7 + 48;
      else
        v29 = 58;
      if (v25)
      {
        LOBYTE(v30) = 0;
        v31 = v25 + 1;
        v32 = result - 1;
        while (1)
        {
          v33 = *v31;
          if (v33 < 0x30 || v33 >= v29)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              v35 = 0;
              v36 = 1;
              if (v33 < 0x61 || v33 >= v27)
                return v35 | (v36 << 8);
              v34 = -87;
            }
            else
            {
              v34 = -55;
            }
          }
          else
          {
            v34 = -48;
          }
          if (((v30 * (unsigned __int16)a7) & 0xFF00) != 0)
            goto LABEL_97;
          v30 = (v30 * a7) - (v33 + v34);
          if ((v30 & 0xFFFFFF00) != 0)
            goto LABEL_97;
          ++v31;
          if (!--v32)
            goto LABEL_73;
        }
      }
LABEL_96:
      v35 = 0;
      v36 = 0;
      return v35 | (v36 << 8);
    }
    goto LABEL_97;
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

void sub_18A61A47C(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    sub_18A61A994();
  }
  sub_18A5F379C();
}

uint64_t sub_18A61A4B0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_18A61A4FC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18A61A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x18D76E758](a1, v6, a5);
}

uint64_t sub_18A61A574()
{
  sub_18A61A9B4();
  return sub_18A616F80();
}

uint64_t sub_18A61A5C0()
{
  sub_18A61A9B4();
  return sub_18A616FDC();
}

uint64_t sub_18A61A60C()
{
  sub_18A61A9B4();
  return sub_18A617188();
}

uint64_t sub_18A61A658()
{
  sub_18A61A9B4();
  return sub_18A6171FC();
}

uint64_t sub_18A61A6A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A61A6C8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A61A6D4()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t sub_18A61A6F0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A61A70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_18A61A71C()
{
  return swift_beginAccess();
}

uint64_t sub_18A61A728()
{
  _QWORD *v0;
  uint64_t result;

  result = v0[5];
  v0[3] = 0;
  v0[2] = 0;
  return result;
}

uint64_t sub_18A61A740(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_18A61A748(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A61A758()
{
  uint64_t v0;

  return sub_18A61A4FC(*(_QWORD *)(v0 + 120));
}

uint64_t sub_18A61A770()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A61A798()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_18A61A7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A5F1010(a1, a2, 1, v2);
}

uint64_t sub_18A61A7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_18A61A7D0(NSObject *a1)
{
  os_activity_scope_state_s *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  os_activity_scope_enter(a1, v1);
}

void sub_18A61A7DC()
{
  os_activity_scope_state_s *v0;

  os_activity_scope_leave(v0 + 1);
}

uint64_t sub_18A61A7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_18A5F101C(a5);
}

uint64_t sub_18A61A7F8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 64) = a5;
  *(_QWORD *)(v6 + 72) = a6;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 56) = a4;
  *(_BYTE *)(v6 + 104) = a3;
  *(_QWORD *)(v6 + 40) = result;
  return result;
}

uint64_t sub_18A61A814()
{
  _QWORD *v0;
  uint64_t result;

  result = v0[5];
  v0[3] = 0;
  v0[2] = 0;
  return result;
}

void sub_18A61A830()
{
  os_activity_scope_state_s *v0;

  os_activity_scope_leave(v0 + 1);
}

void sub_18A61A844()
{
  uint64_t v0;

}

void sub_18A61A858()
{
  os_activity_scope_state_s *v0;

  os_activity_scope_leave(v0 + 1);
}

uint64_t sub_18A61A868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

uint64_t sub_18A61A878()
{
  return swift_release();
}

uint64_t sub_18A61A880()
{
  uint64_t v0;

  return v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
}

void sub_18A61A898()
{
  os_activity_scope_state_s *v0;

  os_activity_scope_leave(v0);
}

uint64_t sub_18A61A8A0(uint64_t a1, uint64_t a2)
{
  return sub_18A619B98(a1, a2);
}

void sub_18A61A8AC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A61807C(a1, a2, 1, v2);
}

uint64_t sub_18A61A8B8()
{
  return swift_willThrow();
}

uint64_t sub_18A61A8C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 32);
}

_QWORD *sub_18A61A8D4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *result = v2;
  result[1] = v1;
  return result;
}

void sub_18A61A8E8(NSObject *a1)
{
  os_activity_scope_state_s *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  os_activity_scope_enter(a1, v1);
}

size_t sub_18A61A908(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_18A61A940()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t sub_18A61A974()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18A61A980()
{
  uint64_t v0;

  return v0;
}

void sub_18A61A994()
{
  JUMPOUT(0x18D76E7C4);
}

void sub_18A61A9A0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_18A61A9C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_18A61A9E0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_18A61A9EC()
{
  return 0;
}

uint64_t sub_18A61AA00()
{
  return type metadata accessor for SHA256();
}

uint64_t sub_18A61AA08()
{
  return String.index(_:offsetBy:)();
}

uint64_t sub_18A61AA14()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

void __swiftcall CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(CKFetchRecordZoneChangesOperation *__return_ptr retstr, Swift::OpaquePointer_optional recordZoneIDs, Swift::OpaquePointer_optional configurationsByRecordZoneID)
{
  uint64_t v3;
  void *rawValue;
  id v5;
  void *v6;
  id v7;
  NSArray v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSDictionary v12;

  v3 = *(_QWORD *)&recordZoneIDs.is_nil;
  rawValue = recordZoneIDs.value._rawValue;
  v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v6 = v5;
  if (rawValue)
  {
    sub_18A5F3B04((uint64_t)v5, (unint64_t *)&qword_1ECD967B0);
    v7 = v6;
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v5;
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setRecordZoneIDs_, v8.super.isa);

  if (v3)
  {
    sub_18A5F3B04(v10, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F3B04(v11, &qword_1EDF6A9A0);
    sub_18A615ABC();
    v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  objc_msgSend(v6, sel_setConfigurationsByRecordZoneID_, v12.super.isa);

}

void CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.getter()
{
  void *v0;
  uint64_t v1;

  if (objc_msgSend(v0, sel_recordChangedBlock))
  {
    v1 = sub_18A5F37BC();
    sub_18A61C828(v1);
  }
  sub_18A5F379C();
}

void sub_18A61AB98(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C758;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A61ABFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A61C7CC;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter(uint64_t a1, uint64_t a2)
{
  sub_18A61AE84(a1, a2, (uint64_t)sub_18A61ACC4, (uint64_t)&unk_1E1F59CE0, (SEL *)&selRef_setRecordChangedBlock_, (void (*)(uint64_t, uint64_t))sub_18A615B5C);
}

uint64_t sub_18A61ACA0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18A61ACC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A61ACD8()
{
  return swift_release();
}

void CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61AD0C(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.getter()
{
  void *v0;
  uint64_t v1;

  if (objc_msgSend(v0, sel_recordWithIDWasDeletedBlock))
  {
    v1 = sub_18A5F37BC();
    sub_18A61C828(v1);
  }
  sub_18A5F379C();
}

void sub_18A61AD7C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *);

  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C6C0;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A61ADE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A61C688;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(uint64_t a1, uint64_t a2)
{
  sub_18A61AE84(a1, a2, (uint64_t)sub_18A61AF98, (uint64_t)&unk_1E1F5A3B8, (SEL *)&selRef_setRecordWithIDWasDeletedBlock_, (void (*)(uint64_t, uint64_t))sub_18A60A578);
}

void sub_18A61AE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, void (*a6)(uint64_t, uint64_t))
{
  void *v6;
  void *v9;
  void *v12;
  _QWORD v13[6];

  v9 = v6;
  if (a1)
  {
    v13[4] = a1;
    v13[5] = a2;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 1107296256;
    v13[2] = a3;
    v13[3] = a4;
    v12 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(v9, *a5, v12);
  a6(a1, a2);
  _Block_release(v12);
}

void sub_18A61AF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;

  v6 = (id)MEMORY[0x18D76C7CC](a2, a3);
  (*(void (**)(uint64_t, uint64_t, id))(a4 + 16))(a4, a1, v6);

}

void sub_18A61AF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A61AF40(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A61AF98(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v4 = a2;
  v3();
  swift_release();
  swift_bridgeObjectRelease();

}

void CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61B03C(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.getter()
{
  void *v0;
  uint64_t v1;

  if (objc_msgSend(v0, sel_zoneAttributesChangedBlock))
  {
    v1 = sub_18A5F37BC();
    sub_18A61C828(v1);
  }
  sub_18A5F379C();
}

void sub_18A61B0AC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *);

  CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C668;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A61B110(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A61C638;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter(uint64_t a1, uint64_t a2)
{
  sub_18A61AE84(a1, a2, (uint64_t)sub_18A61ACC4, (uint64_t)&unk_1E1F5A070, (SEL *)&selRef_setZoneAttributesChangedBlock_, (void (*)(uint64_t, uint64_t))sub_18A615B5C);
}

uint64_t sub_18A61B1B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_18A61B1C4(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();
  sub_18A5F384C(v4);
}

void CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61B234(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.recordWasChangedBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_recordWasChangedBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A61B4CC;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A61B2C8(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A615AB4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A61B32C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A615AA8;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter((uint64_t)v4);
}

void CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    v3 = sub_18A61C80C();
    sub_18A61C81C(v3, sel_setErrorReportingStyle_);
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v6, v7);
    sub_18A5F3964();
    v5 = sub_18A5F438C();
    sub_18A5F37C8(v5, sel_setRecordWasChangedBlock_);
    sub_18A60A578((uint64_t)v2);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setRecordWasChangedBlock_);
  }
}

void sub_18A61B470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;

  if (a3)
    v7 = _convertErrorToNSError(_:)();
  else
    v7 = 0;
  v8 = (void *)v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a1, a2);
  sub_18A5F384C(v8);
}

void sub_18A61B4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A61B470(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void CKFetchRecordZoneChangesOperation.recordWasChangedBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61B500(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.getter()
{
  void *v0;
  uint64_t v1;

  if (objc_msgSend(v0, sel_recordZoneFetchCompletionBlock))
  {
    v1 = sub_18A5F37BC();
    sub_18A61C828(v1);
  }
  sub_18A5F379C();
}

void sub_18A61B570(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, _QWORD *, unsigned __int8 *, _QWORD *);

  CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C5FC;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A61B5D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A61C5D0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18A61B654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(uint64_t *, uint64_t *, _QWORD *, char *, uint64_t *))
{
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v10[1] = a4;
  v11 = a2;
  v10[0] = a3;
  v9 = a5;
  v8 = a6;
  return a7(&v12, &v11, v10, &v9, &v8);
}

void CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter(uint64_t a1, uint64_t a2)
{
  sub_18A61AE84(a1, a2, (uint64_t)sub_18A61B778, (uint64_t)&unk_1E1F5A228, (SEL *)&selRef_setRecordZoneFetchCompletionBlock_, (void (*)(uint64_t, uint64_t))sub_18A615B5C);
}

void sub_18A61B6C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  Class isa;
  uint64_t v13;
  id v14;

  if (a4 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v13 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v13 = _convertErrorToNSError(_:)();
LABEL_6:
  v14 = (id)v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, Class, _QWORD))(a7 + 16))(a7, a1, a2, isa, a5 & 1);

}

void sub_18A61B770(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;

  sub_18A61B6C8(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16));
}

uint64_t sub_18A61B778(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  void *v8;
  void (*v11)(void *, void *, void *, unint64_t, uint64_t, void *);
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  id v19;

  v8 = a4;
  v11 = *(void (**)(void *, void *, void *, unint64_t, uint64_t, void *))(a1 + 32);
  if (a4)
  {
    swift_retain();
    v12 = a2;
    v13 = a3;
    v14 = v8;
    v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

  }
  else
  {
    swift_retain();
    v17 = a2;
    v18 = a3;
    v16 = 0xF000000000000000;
  }
  v19 = a6;
  v11(a2, a3, v8, v16, a5, a6);

  sub_18A60FC24((uint64_t)v8, v16);
  return swift_release();
}

void CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61B878(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_recordZoneFetchCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A61C750;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A61B90C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);

  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C5C8;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

uint64_t sub_18A61B970(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a3(*a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 25) << 8));
}

void sub_18A61B9B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, __int16);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A61C5A4;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter((uint64_t)v4);
}

uint64_t sub_18A61BA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t (*a6)(uint64_t *, _QWORD *))
{
  _QWORD v7[3];
  __int16 v8;
  uint64_t v9;

  v9 = a1;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v8 = a5 & 0x1FF;
  return a6(&v9, v7);
}

void CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    v3 = sub_18A61C80C();
    sub_18A61C81C(v3, sel_setErrorReportingStyle_);
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A61B778, MEMORY[0x1E0C809B0], 1107296256, v6, v7);
    sub_18A5F3964();
    v5 = sub_18A5F438C();
    sub_18A5F37C8(v5, sel_setRecordZoneFetchCompletionBlock_);
    sub_18A5F3838();
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setRecordZoneFetchCompletionBlock_);
  }
}

void sub_18A61BB50(uint64_t a1, id a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, id, uint64_t, unint64_t, uint64_t, id))
{
  id v12;
  id v13;

  if ((a5 & 0x100) != 0)
  {
    v12 = a2;
    a6(a1, 0, 0, 0xF000000000000000, 0, a2);
    sub_18A61C71C(a2, a3, a4, a5, 1);
  }
  else
  {
    v13 = a2;
    sub_18A612F8C(a3, a4);
    a6(a1, a2, a3, a4, a5 & 1, 0);
    sub_18A60FC24(a3, a4);

  }
}

uint64_t sub_18A61BC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  return sub_18A61C5B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))sub_18A61BB50);
}

void sub_18A61BC48(void *a1, void *a2, uint64_t a3, unint64_t a4, char a5, void *a6, void (*a7)(void *, void *, uint64_t, unint64_t, uint64_t))
{
  char v8;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  _QWORD v26[5];
  id v27;
  uint64_t v28;

  v8 = a5;
  if (a6)
  {
    swift_getErrorValue();
    v14 = a6;
    if (!Error.ckIsPartialError.getter())
    {
      v22 = a6;
      a7(a1, a6, 0, 0, 256);

      v21 = a6;
      goto LABEL_7;
    }
    v28 = (uint64_t)a6;
    v15 = a6;
    sub_18A5F101C(&qword_1EDF6A9D8);
    type metadata accessor for CKError(0);
    swift_dynamicCast();
    related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v27);
    v17 = v16;

    if (v17)
    {
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      sub_18A615ABC();
      v24 = a1;
      AnyHashable.init<A>(_:)();
      sub_18A6A86E4((uint64_t)v26, v17);
      v19 = v18;
      swift_bridgeObjectRelease();
      sub_18A61C6E8((uint64_t)v26);
      if (v19)
      {
        v20 = v19;
        a7(v24, v19, 0, 0, 256);

        v21 = v19;
LABEL_7:

        return;
      }
    }

    v8 = a5;
  }
  if (a2)
  {
    v23 = a2;
    sub_18A612F8C(a3, a4);
    a7(a1, a2, a3, a4, v8 & 1);

    sub_18A60FC24(a3, a4);
  }
  else
  {
    type metadata accessor for CKError(0);
    v28 = 1;
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    v23 = (id)v26[0];
    a7(a1, (void *)v26[0], 0, 0, 256);
  }

}

void sub_18A61BECC(void *a1, void *a2, uint64_t a3, unint64_t a4, char a5, void *a6)
{
  uint64_t v6;

  sub_18A61BC48(a1, a2, a3, a4, a5, a6, *(void (**)(void *, void *, uint64_t, unint64_t, uint64_t))(v6 + 16));
}

void CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61BF00(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.getter()
{
  void *v0;
  uint64_t v1;

  if (objc_msgSend(v0, sel_fetchRecordZoneChangesCompletionBlock))
  {
    v1 = sub_18A5F37BC();
    sub_18A61C828(v1);
  }
  sub_18A5F379C();
}

void sub_18A61BF70(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *);

  CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C59C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A61BFD4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A61C594;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter(uint64_t a1, uint64_t a2)
{
  sub_18A61AE84(a1, a2, (uint64_t)sub_18A60A50C, (uint64_t)&unk_1E1F5A318, (SEL *)&selRef_setFetchRecordZoneChangesCompletionBlock_, (void (*)(uint64_t, uint64_t))sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61C0A4(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchRecordZoneChangesCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A61C754;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A61C138(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A61C19C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter((uint64_t)v4);
}

void CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    v3 = sub_18A61C80C();
    sub_18A61C81C(v3, sel_setErrorReportingStyle_);
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A60A50C, MEMORY[0x1E0C809B0], 1107296256, v6, v7);
    sub_18A5F3964();
    v5 = sub_18A5F438C();
    sub_18A5F37C8(v5, sel_setFetchRecordZoneChangesCompletionBlock_);
    sub_18A60A578((uint64_t)v2);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setFetchRecordZoneChangesCompletionBlock_);
  }
}

void CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A61C30C(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t CKFetchRecordZoneChangesConfiguration.desiredKeys.getter()
{
  void *v0;

  return sub_18A61C4D8(v0);
}

void sub_18A61C330()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(v0);
}

void CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, sel_setDesiredKeys_, isa);

}

void CKFetchRecordZoneChangesConfiguration.desiredKeys.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  *a1 = sub_18A61C4D8(v1);
  sub_18A5F379C();
}

void sub_18A61C3EC(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(*a1);
    sub_18A5F379C();
  }
}

void __swiftcall CKFetchRecordZoneChangesConfiguration.init(previousServerChangeToken:resultsLimit:desiredKeys:)(CKFetchRecordZoneChangesConfiguration *__return_ptr retstr, CKServerChangeToken_optional previousServerChangeToken, Swift::Int_optional resultsLimit, Swift::OpaquePointer_optional desiredKeys)
{
  Swift::Int value;
  Swift::Bool is_nil;
  Class isa;
  id v7;
  void *v8;
  id v9;

  value = resultsLimit.value;
  is_nil = previousServerChangeToken.is_nil;
  isa = previousServerChangeToken.value.super.isa;
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v8 = v7;
  if (isa)
  {
    v9 = objc_msgSend(v7, sel_setPreviousServerChangeToken_, isa);
    if (is_nil)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = v7;
  if (!is_nil)
LABEL_3:
    sub_18A5F37C8((uint64_t)v9, sel_setResultsLimit_);
LABEL_4:
  if (value)
    CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(value);

}

uint64_t sub_18A61C4D8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_desiredKeys);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18A61C56C(uint64_t *a1@<X8>)
{
  *a1 = CKFetchRecordZoneChangesConfiguration.desiredKeys.getter();
  sub_18A5F379C();
}

uint64_t sub_18A61C594(uint64_t a1)
{
  uint64_t v1;

  return sub_18A61CBD0(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

void sub_18A61C59C(_QWORD *a1)
{
  uint64_t v1;

  sub_18A61CBB0(a1, *(void (**)(_QWORD))(v1 + 16));
}

uint64_t sub_18A61C5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  return sub_18A61C5B0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))sub_18A61BA38);
}

uint64_t sub_18A61C5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v6;

  return a6(a1, a2, a3, a4, a5 & 0x1FF, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
}

uint64_t sub_18A61C5C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A61B970(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16));
}

uint64_t sub_18A61C5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;

  return sub_18A61B654(a1, a2, a3, a4, a5, a6, *(uint64_t (**)(uint64_t *, uint64_t *, _QWORD *, char *, uint64_t *))(v6 + 16));
}

uint64_t sub_18A61C5D8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A61C5FC(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5)
{
  uint64_t v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v5 + 16))(*a1, *a2, *a3, a3[1], *a4, *a5);
  sub_18A5F379C();
}

uint64_t sub_18A61C638(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

void sub_18A61C668(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD))(v1 + 16))(*a1);
  sub_18A5F379C();
}

uint64_t sub_18A61C688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD *);
  _QWORD v6[2];
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t *, _QWORD *))(v3 + 16);
  v6[1] = a3;
  v7 = a1;
  v6[0] = a2;
  return v4(&v7, v6);
}

void sub_18A61C6C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, *a2, a2[1]);
  sub_18A5F379C();
}

uint64_t sub_18A61C6E8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

void sub_18A61C71C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {

  }
  else
  {

    sub_18A60FC24(a2, a3);
  }
}

uint64_t sub_18A61C80C()
{
  return swift_retain();
}

id sub_18A61C81C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_18A61C828(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t sub_18A61C834()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_18A5F40A4();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    sub_18A5F3E6C();
    sub_18A623B38(v2);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18A61C898()
{
  uint64_t v0;
  uint64_t result;

  swift_beginAccess();
  result = *(_QWORD *)(v0 + 16);
  if (result)
    *(_QWORD *)(v0 + 16) = 0;
  else
    __break(1u);
  return result;
}

uint64_t sub_18A61C8E0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 == 1)
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = xmmword_18A83A050;
    sub_18A60A614(v2);
    sub_18A6234D8(v2);
    return v2;
  }
  return result;
}

uint64_t sub_18A61C95C(unint64_t a1, uint64_t a2, Class *a3, SEL *a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t UniqueAndReserveCapacityIfNot;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = v4;
  if (a1 >> 62)
    goto LABEL_14;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v9)
      break;
    v25 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
      __break(1u);
      return result;
    }
    v23 = v7;
    v11 = 0;
    v7 = a1 & 0xC000000000000001;
    while (v9 != v11)
    {
      if (v7)
        v12 = (id)MEMORY[0x18D76CEB0](v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      ++v11;
      objc_msgSend(objc_allocWithZone(*a3), *a4, v12);

      UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18A623F30(UniqueAndReserveCapacityIfNot, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v9 == v11)
        return v25;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void sub_18A61CAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  sub_18A5F40A4();
  v5 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_18A60A578(v5);
  sub_18A5F40C8();
}

void sub_18A61CAFC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  sub_18A5F40A4();
  *(_QWORD *)(v1 + 16) = a1;
  swift_unknownObjectRelease();
  sub_18A5F40C8();
}

uint64_t sub_18A61CB44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  *(_OWORD *)(v2 + 16) = xmmword_18A83A050;
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_18A6234D8(v5);
  return v2;
}

void sub_18A61CBB0(_QWORD *a1, void (*a2)(_QWORD))
{
  a2(*a1);
  sub_18A5F379C();
}

uint64_t sub_18A61CBD0(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = a1;
  return a2(&v3);
}

uint64_t sub_18A61CC00(void *a1)
{
  char *v1;
  char *v3;
  id v4;
  id v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;
  uint64_t v13;
  objc_super v14;
  _BYTE v15[24];
  id v16;
  id v17;

  *(_QWORD *)&v1[OBJC_IVAR___CKSyncEngine_swiftEngine] = 0;
  v3 = v1;
  sub_18A613660((uint64_t)v15);
  v4 = v16;
  if (object_getClass(v16) != (Class)_TtC8CloudKit31CKSyncEngineObjCDelegateAdapter || v4 == 0)
  {
    _StringGuts.grow(_:)(75);
    v12._object = (void *)0x800000018A83E860;
    v12._countAndFlagsBits = 0xD000000000000049;
    String.append(_:)(v12);
    swift_getObjectType();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    result = sub_18A623E88();
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v3[OBJC_IVAR___CKSyncEngine_delegateAdapter] = v4;
    swift_unknownObjectRetain_n();

    v14.receiver = v3;
    v14.super_class = (Class)CKSyncEngine;
    v6 = objc_msgSendSuper2(&v14, sel_init);
    v7 = v17;
    v8 = (char *)v6;

    v17 = v6;
    sub_18A60A09C((uint64_t)v15, (uint64_t)&v13);
    type metadata accessor for CKSyncEngine();
    sub_18A5F37B4();
    CKSyncEngine.init(_:)((uint64_t)&v13);
    v10 = v9;
    sub_18A612ED0();

    *(_QWORD *)&v8[OBJC_IVAR___CKSyncEngine_swiftEngine] = v10;
    swift_release();
    sub_18A608F0C((uint64_t)v15);
    return (uint64_t)v8;
  }
  return result;
}

void CKSyncEngine.description.getter()
{
  uint64_t v0;

  CKSyncEngine.actorIfInitialized.getter();
  if (v0)
  {
    sub_18A699D34();
    sub_18A61A878();
  }
  sub_18A5F3824();
}

void CKSyncEngine.actorIfInitialized.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR___CKSyncEngine_swiftEngine))
  {
    sub_18A5F3E6C();
    CKSyncEngine.actor.getter();
    sub_18A5F37AC();
  }
  sub_18A5F379C();
}

void sub_18A61CEA8()
{
  id v0;

  v0 = *(id *)(CKSyncEngine.actor.getter() + 136);
  sub_18A5F3AA0();
  sub_18A5F379C();
}

uint64_t CKSyncEngine.actor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR___CKSyncEngine_swiftEngine))
  {
    sub_18A5F3E6C();
    CKSyncEngine.actor.getter();
    v2 = v1;
    sub_18A5F37AC();
    return v2;
  }
  else
  {
    result = sub_18A623E88();
    __break(1u);
  }
  return result;
}

void sub_18A61CF90()
{
  uint64_t v0;
  id v1;

  v0 = *(_QWORD *)(CKSyncEngine.actor.getter() + 128);
  sub_18A5F3E6C();
  sub_18A5F3AA0();
  v1 = *(id *)(v0 + 16);
  sub_18A5F37AC();
  sub_18A5F379C();
}

uint64_t sub_18A61CFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t sub_18A61CFE8()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 40) = CKSyncEngine.actor.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_18A61D03C;
  return sub_18A689560();
}

uint64_t sub_18A61D03C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37AC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A61D074()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 24);
  if (v1)
    v1();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A61D154()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;

  sub_18A61A92C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v10);
  v11 = sub_18A623B1C();
  sub_18A6239F8(v1, v12, v13, v11);
  v14 = (_QWORD *)sub_18A5F37B4();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v0;
  v14[5] = v9;
  v14[6] = v7;
  v15 = v0;
  v5(v9, v7);
  sub_18A670ABC(v1, v3, (uint64_t)v14);
  swift_release();
  sub_18A5F3800();
}

uint64_t sub_18A61D1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  return swift_task_switch();
}

uint64_t sub_18A61D210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  uint64_t v10;
  char v11;

  v1 = CKSyncEngine.actor.getter();
  *(_QWORD *)(v0 + 104) = v1;
  sub_18A5F3DF8(v1, (unint64_t *)&qword_1ECD967B0);
  sub_18A615ABC();
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v0 + 112) = v3;
  type metadata accessor for SyncEngine();
  static SyncEngine.defaultOperationGroup()();
  *(_QWORD *)(v0 + 120) = v4;
  v5 = v4;
  sub_18A5F40AC();
  sub_18A6239CC();
  sub_18A623B14();
  if (v6 && (sub_18A669988() & 1) == 0)
  {
    sub_18A5F394C();
  }
  else
  {
    v10 = 0;
    v11 = 2;
    sub_18A6756FC((uint64_t)&v10);
    sub_18A623984();
    sub_18A623B40();
  }
  swift_bridgeObjectRelease();

  sub_18A5F3944();
  sub_18A5F3FE4();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 2;
  *(_QWORD *)(v0 + 32) = v5;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v3;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 0;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v7;
  *v7 = v0;
  v7[1] = sub_18A61D388;
  v8 = (_OWORD *)sub_18A623D44();
  return sub_18A680764(v8);
}

uint64_t sub_18A61D388()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  sub_18A623A14();
  v2 = *(void **)(v1 + 120);
  sub_18A623FAC();
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_18A5F37E0();
  sub_18A61A878();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A61D404()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(v0 + 88);
  if (v1)
    sub_18A623D2C(v1);
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61D434()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 88))
  {
    sub_18A5F42D4();
    sub_18A623E38();
    sub_18A5F3FEC();
  }
  sub_18A5F3FEC();
  return sub_18A623874(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61D52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return swift_task_switch();
}

uint64_t sub_18A61D548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _OWORD *v11;

  v1 = CKSyncEngine.actor.getter();
  *(_QWORD *)(v0 + 176) = v1;
  CKSyncEngineFetchChangesOptions.optionsStruct()(v1, v0 + 16);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 184) = v2;
  *(_QWORD *)(v0 + 192) = v4;
  v6 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 200) = v5;
  *(_QWORD *)(v0 + 208) = v6;
  v7 = *(_BYTE *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_BYTE *)(v0 + 72);
  *(_QWORD *)(v0 + 80) = v2;
  *(_BYTE *)(v0 + 88) = v3;
  *(_QWORD *)(v0 + 96) = v4;
  *(_QWORD *)(v0 + 104) = v5;
  *(_QWORD *)(v0 + 112) = v6;
  *(_BYTE *)(v0 + 120) = v7;
  *(_QWORD *)(v0 + 128) = v8;
  *(_BYTE *)(v0 + 136) = v9;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v10;
  v11 = (_OWORD *)sub_18A623FD4(v10, (uint64_t)sub_18A61D5F4);
  return sub_18A680764(v11);
}

uint64_t sub_18A61D5F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  sub_18A623A14();
  v2 = *(void **)(v1 + 192);
  sub_18A623FAC();
  *(_QWORD *)(v3 + 224) = v0;
  swift_task_dealloc();

  sub_18A5F3944();
  sub_18A5F37E0();
  swift_release();
  sub_18A5F3FE4();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A61D674()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(v0 + 160);
  if (v1)
    sub_18A623D2C(v1);
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61D6A4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 160))
  {
    sub_18A5F42D4();
    sub_18A623E38();
    sub_18A5F3FEC();
  }
  sub_18A5F3FEC();
  return sub_18A623874(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A61D7AC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_18A61A92C();
  v3 = v2;
  v5 = v4;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v6);
  sub_18A6103BC();
  if (v5)
  {
    v7 = sub_18A5F37B4();
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v3;
    v8 = sub_18A61C758;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  sub_18A5F101C((uint64_t *)&unk_1EDF694E0);
  v9 = sub_18A5F37B4();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  v10 = sub_18A623B70();
  sub_18A6239F8(v1, v11, v12, v10);
  v13 = (_QWORD *)sub_18A5F37B4();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v0;
  v13[5] = v9;
  sub_18A623F94();
  sub_18A623EE4((uint64_t)v0, (uint64_t)&unk_1EDF6B390);
  swift_release();
  sub_18A5F3800();
}

uint64_t sub_18A61D884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = a5;
  return swift_task_switch();
}

uint64_t sub_18A61D89C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  char v7;

  *(_QWORD *)(v0 + 128) = CKSyncEngine.actor.getter();
  v6 = 0;
  v7 = 3;
  CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)((uint64_t)&v6, 0, v0 + 16);
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 40) = v1;
  *(_BYTE *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v4;
  *v4 = v0;
  v4[1] = sub_18A61D93C;
  return sub_18A6790B0((uint64_t *)(v0 + 40));
}

uint64_t sub_18A61D93C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  sub_18A623A14();
  v2 = *(void **)(v1 + 144);
  sub_18A623FAC();
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc();

  sub_18A61A878();
  sub_18A5F37E0();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A61D9A4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *);
  uint64_t v4;

  sub_18A623BE8();
  v2 = *(void (**)(uint64_t *))(v0 + 16);
  if (v2)
  {
    v4 = 0;
    sub_18A5F3E6C();
    v2(&v4);
    sub_18A623B38((uint64_t)v2);
  }
  return sub_18A623874(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A61D9FC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *);
  uint64_t v4;

  sub_18A623BE8();
  v2 = *(void (**)(uint64_t *))(v0 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v1 + 160);
    sub_18A623F8C((uint64_t)v2);
    sub_18A5F42D4();
    v2(&v4);
    sub_18A5F3FEC();
    sub_18A623B38((uint64_t)v2);
  }
  sub_18A5F3FEC();
  return sub_18A623874(*(uint64_t (**)(void))(v1 + 8));
}

void sub_18A61DB00()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;

  sub_18A61A92C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v10);
  v11 = sub_18A623B1C();
  sub_18A6239F8(v1, v12, v13, v11);
  v14 = (_QWORD *)sub_18A5F37B4();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v0;
  v14[5] = v9;
  v14[6] = v7;
  v14[7] = v5;
  v15 = v0;
  v16 = v9;
  sub_18A60A614(v7);
  sub_18A670ABC(v1, v3, (uint64_t)v14);
  swift_release();
  sub_18A5F3800();
}

uint64_t sub_18A61DBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  return swift_task_switch();
}

uint64_t sub_18A61DBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;

  v1 = CKSyncEngine.actor.getter();
  *(_QWORD *)(v0 + 96) = v1;
  CKSyncEngineSendChangesOptions.optionsStruct()(v1, v0 + 16);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 40) = v2;
  *(_BYTE *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v5;
  v6 = (uint64_t *)sub_18A623FD4(v5, (uint64_t)sub_18A61DC48);
  return sub_18A6790B0(v6);
}

uint64_t sub_18A61DC48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  sub_18A623A14();
  v2 = *(void **)(v1 + 112);
  sub_18A623FAC();
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc();

  sub_18A61A878();
  sub_18A5F37E0();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A61DCB0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(v0 + 80);
  if (v1)
    sub_18A623D2C(v1);
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61DCE0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 80))
  {
    sub_18A5F42D4();
    sub_18A623E38();
    sub_18A5F3FEC();
  }
  sub_18A5F3FEC();
  return sub_18A623874(*(uint64_t (**)(void))(v0 + 8));
}

void __swiftcall CKSyncEngine.init()(CKSyncEngine *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void CKSyncEngine.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_18A61DE78()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  id v8;

  sub_18A5F44DC();
  if (qword_1EDF6A540 != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  sub_18A60990C(v1, (uint64_t)qword_1EDF6A630);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v2;

    _os_log_impl(&dword_18A5C5000, v3, v4, "%@ manually setting needsToFetchDatabaseChanges", v5, 0xCu);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    swift_arrayDestroy();
    sub_18A5F392C();
  }

  v8 = objc_msgSend(v2, sel_state);
  objc_msgSend(v8, sel_setNeedsToFetchDatabaseChanges_, 1);

  sub_18A5F3CFC();
}

uint64_t sub_18A61E0F0(uint64_t (*a1)(void))
{
  CKSyncEngine.actor.getter();
  LOBYTE(a1) = a1();
  sub_18A5F37AC();
  return a1 & 1;
}

uint64_t sub_18A61E16C(uint64_t a1, void (*a2)(uint64_t))
{
  CKSyncEngine.actor.getter();
  a2(a1);
  return swift_release();
}

uint64_t sub_18A61E1A8()
{
  CKSyncEngine.actor.getter();
  sub_18A691B20();
  return sub_18A623C08();
}

void sub_18A61E200()
{
  type metadata accessor for SyncEngine();
  sub_18A5F3840();
  static SyncEngine.unregisterActivities(database:activityNameSuffix:)();
  sub_18A5F379C();
}

id sub_18A61E268(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  v8 = (void *)MEMORY[0x18D76C7CC](v5, v7);
  sub_18A5F3944();
  return v8;
}

void sub_18A61E2BC()
{
  CKSyncEngine.actor.getter();
  sub_18A68F8C4();
  sub_18A5F37AC();
  sub_18A5F3824();
}

uint64_t sub_18A61E324()
{
  uint64_t v0;

  v0 = *(unsigned __int8 *)(CKSyncEngine.actor.getter() + 352);
  swift_release();
  return v0;
}

uint64_t sub_18A61E34C()
{
  uint64_t v0;
  uint64_t v1;

  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  sub_18A61C898();
  sub_18A61A878();
  swift_unknownObjectWeakAssign();
  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    sub_18A61A798();
    v1 = 0;
  }
  *(_QWORD *)(v0 + 120) = v1;
  return v0;
}

uint64_t sub_18A61E3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 48) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 80) = v5;
  *(_BYTE *)(v3 + 120) = *(_BYTE *)(a1 + 64);
  return sub_18A6238D4();
}

void sub_18A61E3FC()
{
  sub_18A623C40();
}

uint64_t sub_18A61E418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 96) = a1;
  if (!a1)
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  CKSyncEngine.actor.getter();
  *(_QWORD *)(v1 + 104) = v2;
  return sub_18A5F3AE0();
}

void sub_18A61E450()
{
  sub_18A623C10();
}

uint64_t sub_18A61E470(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = a1;
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F4708();
}

uint64_t sub_18A61E490()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Class isa;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 112);
  v2 = *(void **)(v0 + 96);
  if (v1)
  {
    v5 = *(_OWORD *)(v0 + 32);
    v6 = *(_OWORD *)(v0 + 48);
    v7 = *(_OWORD *)(v0 + 64);
    v8 = *(_OWORD *)(v0 + 80);
    LOBYTE(v9) = *(_BYTE *)(v0 + 120);
    isa = CKSyncEngine.Event.eventObject()().super.isa;
    objc_msgSend(v2, sel_syncEngine_handleEvent_, v1, isa, v5, v6, v7, v8, v9);

  }
  sub_18A612ED0();
  return sub_18A623BBC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61E50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a3;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 81) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 24);
  return sub_18A6238D4();
}

void sub_18A61E53C()
{
  sub_18A623C40();
}

uint64_t sub_18A61E558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 56) = a1;
  if (a1)
  {
    CKSyncEngine.actor.getter();
    *(_QWORD *)(v1 + 64) = v2;
    return sub_18A5F3AE0();
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 16) = 0;
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  }
}

void sub_18A61E59C()
{
  sub_18A623C10();
}

uint64_t sub_18A61E5BC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F4708();
}

uint64_t sub_18A61E5DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(void **)(v0 + 56);
  if (v1)
  {
    v3 = *(_BYTE *)(v0 + 81);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = (void *)*(unsigned __int8 *)(v0 + 80);
    *(_QWORD *)&v13 = *(_QWORD *)(v0 + 40);
    BYTE8(v13) = v3;
    v14 = v4;
    objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesContext), sel_initWithReason_options_, v5, (unint64_t)CKSyncEngine.SendChangesOptions.optionsObject()());
    sub_18A623D94();
    v6 = objc_msgSend(v2, sel_syncEngine_nextRecordZoneChangeBatchForContext_, v1, v5);
    v7 = *(void **)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 16);
    if (v6)
    {
      v9 = v6;
      CKSyncEngineRecordZoneChangeBatch.batchStruct()((uint64_t)v9, (uint64_t)&v13);

      sub_18A623E08();
      v10 = v14;
      *(_OWORD *)v8 = v13;
      *(_BYTE *)(v8 + 16) = v10;
    }
    else
    {

      sub_18A623E08();
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 16) = 0;
    }
  }
  else
  {
    swift_unknownObjectRelease();
    v11 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = 0;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A61E6FC(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[12] = a3;
  v4[13] = v3;
  v4[11] = a1;
  memcpy(v4 + 2, a2, 0x41uLL);
  return sub_18A5F3AE0();
}

void sub_18A61E740()
{
  sub_18A623C40();
}

uint64_t sub_18A61E75C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 112) = a1;
  if (a1)
  {
    CKSyncEngine.actor.getter();
    *(_QWORD *)(v1 + 120) = v2;
    return sub_18A5F3AE0();
  }
  else
  {
    sub_18A623AF0();
    sub_18A621764(v4);
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  }
}

void sub_18A61E7A0()
{
  sub_18A623C10();
}

uint64_t sub_18A61E7C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F4708();
}

uint64_t sub_18A61E7E0()
{
  uint64_t v0;
  CKSyncEngineFetchChangesOptions *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(CKSyncEngineFetchChangesOptions **)(v0 + 128);
  v2 = *(void **)(v0 + 112);
  if (v1)
  {
    v3 = *(unsigned __int8 *)(v0 + 16);
    CKSyncEngine.FetchChangesOptions.optionsObject()(v1);
    v5 = v4;
    v6 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesContext), sel_initWithReason_options_, v3, v4);
    *(_QWORD *)(v0 + 136) = v6;

    if ((objc_msgSend(v2, sel_respondsToSelector_, sel_syncEngine_nextFetchChangesOptionsForContext_) & 1) == 0
      || (v7 = objc_msgSend(*(id *)(v0 + 112), sel_syncEngine_nextFetchChangesOptionsForContext_, *(_QWORD *)(v0 + 128), v6)) == 0)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EDF6B2A8
                                                                                + dword_1EDF6B2A8);
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v10;
      *v10 = v0;
      v10[1] = sub_18A61E958;
      return v12(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 104), (uint64_t)&off_1E1F57608, v0 + 16, *(_QWORD *)(v0 + 96));
    }
    v8 = v7;
    v9 = *(void **)(v0 + 128);
    CKSyncEngineFetchChangesOptions.optionsStruct()((uint64_t)v7, *(_QWORD *)(v0 + 88));
    sub_18A612ED0();

  }
  else
  {
    swift_unknownObjectRelease();
    sub_18A623AF0();
    sub_18A621764(v0 + 16);
  }
  return sub_18A623BD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61E958()
{
  sub_18A623A14();
  sub_18A6239A4();
  return sub_18A5F3AE0();
}

uint64_t sub_18A61E994()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);

  sub_18A61A798();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A61E9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;

  *(_QWORD *)(v5 + 160) = a1;
  *(_QWORD *)(v5 + 168) = a5;
  v6 = *(_OWORD *)(a4 + 8);
  v7 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 32) = v7;
  v8 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v5 + 48) = v8;
  v9 = *(_OWORD *)(a4 + 49);
  *(_OWORD *)(v5 + 57) = v9;
  *(_OWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = v7;
  *(_OWORD *)(v5 + 112) = v8;
  *(_OWORD *)(v5 + 121) = v9;
  sub_18A61A4B0(v5 + 16);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 176) = v10;
  *v10 = v5;
  v10[1] = sub_18A61EA50;
  return CKSyncEngine.objcEngine.getter();
}

uint64_t sub_18A61EA50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A61EAA0()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  char v31;

  if (!*(_QWORD *)(v0 + 184))
    goto LABEL_31;
  CKSyncEngine.actor.getter();
  sub_18A623E28();
  sub_18A5F37AC();
  CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  v3 = v2;
  sub_18A61A878();
  v4 = sub_18A61FB60(v3, (unint64_t *)(v0 + 80));
  *(_QWORD *)(v0 + 192) = v4;
  v5 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 144) = MEMORY[0x1E0DEE9D8];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_18A623E10();
    sub_18A5F37A4();
  }
  else
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v0 + 200) = v6;
  if (!v6)
  {
    sub_18A5F37A4();
    if (v5 >> 62)
    {
      sub_18A5F3FAC();
      v28 = sub_18A623AB0();
      sub_18A5F37E0();
      if (v28)
        goto LABEL_9;
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_9:
      v11 = *(_QWORD *)(v0 + 80);
      if (!*(_BYTE *)(v0 + 88))
      {
        sub_18A5F40AC();
        sub_18A6682F4(MEMORY[0x1E0DEE9D8]);
        v21 = sub_18A6682F4(v11);
        sub_18A6759EC(v21);
        v22 = sub_18A623E30();
        sub_18A5F37A4();
        sub_18A5F3944();
        *(_QWORD *)(v0 + 80) = v22;
        *(_BYTE *)(v0 + 88) = 0;
        v23 = *(void **)(v0 + 96);
        sub_18A5F3FAC();
        v15 = v23;
        sub_18A6239CC();
        sub_18A5F40AC();
        sub_18A623B14();
        sub_18A623C48();
        if (!v24 || (sub_18A5F46E0() & 1) != 0)
        {
          sub_18A5F3C88();
          v30 = v22;
          v31 = 0;
          goto LABEL_19;
        }
LABEL_24:
        v1 = *(void **)(v0 + 184);
        sub_18A5F394C();
        goto LABEL_25;
      }
      if (*(_BYTE *)(v0 + 88) == 1)
      {
        v12 = sub_18A5F40AC();
        sub_18A6682F4(v12);
        sub_18A6217CC();
        sub_18A5F37E0();
        v13 = sub_18A623E30();
        sub_18A5F37A4();
        sub_18A5F3944();
        *(_QWORD *)(v0 + 80) = v13;
        *(_BYTE *)(v0 + 88) = 1;
        v14 = *(void **)(v0 + 96);
        sub_18A5F3FAC();
        v15 = v14;
        sub_18A6239CC();
        sub_18A5F40AC();
        sub_18A623B14();
        sub_18A623C48();
        if (!v16 || (sub_18A5F46E0() & 1) != 0)
        {
          sub_18A5F3C88();
          v30 = v13;
          v31 = 1;
LABEL_19:
          sub_18A5F3FAC();
          sub_18A623A04((uint64_t)&v30);
          sub_18A623984();
          sub_18A5F3AA0();
LABEL_23:
          sub_18A623B40();
LABEL_25:
          sub_18A5F37E0();

          sub_18A5F3FE4();
          sub_18A5F3944();

LABEL_31:
          v29 = (uint64_t (*)(void))sub_18A6238E0();
          return sub_18A623BD4(v29);
        }
        goto LABEL_24;
      }
      *(_QWORD *)(v0 + 80) = v5;
      *(_BYTE *)(v0 + 88) = 0;
      v25 = *(void **)(v0 + 96);
      sub_18A5F3FAC();
      v15 = v25;
      sub_18A6239CC();
      sub_18A5F40AC();
      sub_18A623B14();
      sub_18A623C48();
      if (!v26 || (sub_18A5F46E0() & 1) != 0)
      {
        sub_18A5F3C88();
        v30 = v5;
        v31 = 0;
        sub_18A5F3FAC();
        sub_18A623A04((uint64_t)&v30);
        sub_18A623984();
        sub_18A5F37E0();
        goto LABEL_23;
      }
      v27 = *(void **)(v0 + 184);
      sub_18A5F394C();
      swift_bridgeObjectRelease();

      sub_18A5F3FE4();
LABEL_30:
      swift_bridgeObjectRelease();

      goto LABEL_31;
    }
    v27 = *(void **)(v0 + 184);
    goto LABEL_30;
  }
  v7 = OBJC_IVAR___CKSyncEngine_delegateAdapter;
  v8 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 208) = OBJC_IVAR___CKSyncEngine_delegateAdapter;
  *(_QWORD *)(v0 + 216) = v8;
  v9 = *(_QWORD *)(v0 + 192);
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)MEMORY[0x18D76CEB0](0);
    v7 = *(_QWORD *)(v0 + 208);
  }
  else
  {
    v10 = *(id *)(v9 + 32);
  }
  *(_QWORD *)(v0 + 224) = v10;
  *(_QWORD *)(v0 + 232) = 1;
  *(_QWORD *)(v0 + 240) = *(_QWORD *)(*(_QWORD *)(v0 + 184) + v7);
  swift_retain();
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v17;
  *v17 = v0;
  v17[1] = sub_18A61EE34;
  v18 = sub_18A623D44();
  return sub_18A61F380(v18, v19);
}

uint64_t sub_18A61EE34(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 73) = a1;
  swift_task_dealloc();
  sub_18A5F37AC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

void sub_18A61EE88()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  char AssetContents;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  _BOOL8 v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  unint64_t v50;
  char v51;

  if ((*(_BYTE *)(v0 + 73) & 1) == 0)
  {
    MEMORY[0x18D76C9DC](*(id *)(v0 + 224));
    if (*(_QWORD *)((*(_QWORD *)(v0 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v2 = objc_msgSend(*(id *)(v0 + 184), sel_dataSource);
  v3 = *(void **)(v0 + 224);
  if (!v2)
  {

    goto LABEL_9;
  }
  AssetContents = CKSyncEngineDataSourceShouldFetchAssetContents(v2, *(void **)(v0 + 184), v3);
  v5 = *(void **)(v0 + 224);
  if ((AssetContents & 1) != 0)
  {

    sub_18A612ED0();
LABEL_9:
    v6 = *(_QWORD **)(v0 + 216);
LABEL_20:
    v28 = *(_QWORD *)(v0 + 232);
    if (v28 == *(_QWORD *)(v0 + 200))
    {
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v0 + 144);
      if (v29 >> 62)
      {
        sub_18A5F3FAC();
        v48 = sub_18A623AB0();
        sub_18A5F37E0();
        if (v48)
          goto LABEL_23;
      }
      else if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_23:
        v30 = *(_QWORD *)(v0 + 80);
        if (!*(_BYTE *)(v0 + 88))
        {
          sub_18A5F40AC();
          sub_18A6682F4(v29);
          v41 = sub_18A6682F4(v30);
          sub_18A6759EC(v41);
          v42 = sub_18A623E30();
          sub_18A5F37A4();
          sub_18A5F3944();
          *(_QWORD *)(v0 + 80) = v42;
          *(_BYTE *)(v0 + 88) = 0;
          v43 = *(void **)(v0 + 96);
          sub_18A5F3FAC();
          v34 = v43;
          sub_18A6239CC();
          sub_18A5F40AC();
          sub_18A623B14();
          sub_18A623C48();
          if (!v44 || (sub_18A5F46E0() & 1) != 0)
          {
            sub_18A5F3C88();
            v50 = v42;
            v51 = 0;
            goto LABEL_36;
          }
LABEL_41:
          v1 = *(void **)(v0 + 184);
          sub_18A5F394C();
          goto LABEL_42;
        }
        if (*(_BYTE *)(v0 + 88) == 1)
        {
          v31 = sub_18A5F40AC();
          sub_18A6682F4(v31);
          sub_18A6217CC();
          sub_18A5F37E0();
          v32 = sub_18A623E30();
          sub_18A5F37A4();
          sub_18A5F3944();
          *(_QWORD *)(v0 + 80) = v32;
          *(_BYTE *)(v0 + 88) = 1;
          v33 = *(void **)(v0 + 96);
          sub_18A5F3FAC();
          v34 = v33;
          sub_18A6239CC();
          sub_18A5F40AC();
          sub_18A623B14();
          sub_18A623C48();
          if (!v35 || (sub_18A5F46E0() & 1) != 0)
          {
            sub_18A5F3C88();
            v50 = v32;
            v51 = 1;
LABEL_36:
            sub_18A5F3FAC();
            sub_18A623A04((uint64_t)&v50);
            sub_18A623984();
            sub_18A5F3AA0();
LABEL_40:
            sub_18A623B40();
LABEL_42:
            sub_18A5F37E0();

            sub_18A5F3FE4();
            sub_18A5F3944();

LABEL_47:
            v49 = (uint64_t (*)(void))sub_18A6238E0();
            sub_18A623BBC(v49);
            return;
          }
          goto LABEL_41;
        }
        *(_QWORD *)(v0 + 80) = v29;
        *(_BYTE *)(v0 + 88) = 0;
        v45 = *(void **)(v0 + 96);
        sub_18A5F3FAC();
        v34 = v45;
        sub_18A6239CC();
        sub_18A5F40AC();
        sub_18A623B14();
        sub_18A623C48();
        if (!v46 || (sub_18A5F46E0() & 1) != 0)
        {
          sub_18A5F3C88();
          v50 = v29;
          v51 = 0;
          sub_18A5F3FAC();
          sub_18A623A04((uint64_t)&v50);
          sub_18A623984();
          sub_18A5F37E0();
          goto LABEL_40;
        }
        v47 = *(void **)(v0 + 184);
        sub_18A5F394C();
        sub_18A5F37E0();

        sub_18A5F3FE4();
LABEL_46:
        swift_bridgeObjectRelease();

        goto LABEL_47;
      }
      v47 = *(void **)(v0 + 184);
      goto LABEL_46;
    }
    *(_QWORD *)(v0 + 216) = v6;
    v36 = *(_QWORD *)(v0 + 192);
    if ((v36 & 0xC000000000000001) != 0)
      v37 = (id)MEMORY[0x18D76CEB0](v28);
    else
      v37 = sub_18A5F3D34(v36 + 8 * v28);
    *(_QWORD *)(v0 + 224) = v37;
    *(_QWORD *)(v0 + 232) = v28 + 1;
    if (!__OFADD__(v28, 1))
    {
      *(_QWORD *)(v0 + 240) = *(_QWORD *)(*(_QWORD *)(v0 + 184) + *(_QWORD *)(v0 + 208));
      swift_retain();
      v38 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 248) = v38;
      *v38 = v0;
      v38[1] = sub_18A61EE34;
      v39 = sub_18A623D44();
      sub_18A61F380(v39, v40);
      return;
    }
    __break(1u);
    goto LABEL_49;
  }
  v7 = *(_QWORD *)(v0 + 216);
  v8 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 152) = v7;
  *(_QWORD *)(v0 + 112) = 0x8000000000000000;
  sub_18A62E990();
  v12 = *(_QWORD *)(v7 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF6B2B0);
  v17 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14);
  if (v17)
  {
    sub_18A5F3DF8(v17, (unint64_t *)&qword_1ECD967B0);
    v6 = *(_QWORD **)(v0 + 152);
    sub_18A62E990();
    if ((v16 & 1) != (v19 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      return;
    }
    v15 = v18;
  }
  else
  {
    v6 = *(_QWORD **)(v0 + 152);
  }
  *(_QWORD *)(v0 + 112) = v6;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_19:
    v27 = *(void **)(v0 + 224);
    *(_BYTE *)(v6[7] + 16 * v15) = 0;
    sub_18A612ED0();

    goto LABEL_20;
  }
  v20 = *(_QWORD *)(v0 + 224);
  v6[(v15 >> 6) + 8] |= 1 << v15;
  *(_QWORD *)(v6[6] + 8 * v15) = v20;
  v21 = v6[7] + 16 * v15;
  *(_BYTE *)v21 = 1;
  *(_QWORD *)(v21 + 8) = 0;
  v22 = v6[2];
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    v25 = *(void **)(v0 + 224);
    v6[2] = v24;
    v26 = v25;
    goto LABEL_19;
  }
LABEL_50:
  __break(1u);
}

uint64_t sub_18A61F380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18A6238D4();
}

void sub_18A61F394()
{
  sub_18A623C40();
}

uint64_t sub_18A61F3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = a1;
  if (!a1)
    return sub_18A623BC8(1, *(uint64_t (**)(void))(v1 + 8));
  CKSyncEngine.actor.getter();
  *(_QWORD *)(v1 + 48) = v2;
  return sub_18A5F3AE0();
}

void sub_18A61F3EC()
{
  sub_18A623C10();
}

uint64_t sub_18A61F40C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F4708();
}

uint64_t sub_18A61F42C()
{
  uint64_t v0;
  void *v1;
  uint64_t Changes;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    Changes = CKSyncEngineDelegateShouldFetchChanges(*(void **)(v0 + 40), *(void **)(v0 + 56), *(void **)(v0 + 16));

  }
  else
  {
    Changes = 1;
  }
  sub_18A61A798();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(Changes);
}

uint64_t sub_18A61F494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A6238D4();
}

void sub_18A61F4A8()
{
  sub_18A623C40();
}

uint64_t sub_18A61F4C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = a1;
  if (!a1)
    return sub_18A623BC8(0, *(uint64_t (**)(void))(v1 + 8));
  CKSyncEngine.actor.getter();
  *(_QWORD *)(v1 + 64) = v2;
  return sub_18A5F3AE0();
}

void sub_18A61F4FC()
{
  sub_18A623C10();
}

uint64_t sub_18A61F51C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F4708();
}

uint64_t sub_18A61F53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Class isa;
  Class v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_18A623E50();
  if (!*(_QWORD *)(v10 + 72))
    goto LABEL_9;
  *(_QWORD *)(v10 + 16) = &unk_1EDF88848;
  v11 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (!v11)
  {

LABEL_9:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v12 = v11;
  v13 = (uint64_t)objc_msgSend(v11, sel_respondsToSelector_, sel_syncEngine_relatedApplicationBundleIdentifiersForZoneIDs_recordIDs_);
  v14 = *(void **)(v10 + 72);
  if ((v13 & 1) != 0)
  {
    sub_18A5F3DF8(v13, (unint64_t *)&qword_1ECD967B0);
    swift_unknownObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_18A5F3DF8((uint64_t)isa, (unint64_t *)&unk_1EDF6A8F0);
    v16 = Array._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend(v12, sel_syncEngine_relatedApplicationBundleIdentifiersForZoneIDs_recordIDs_, v14, isa, v16);

    v18 = *(void **)(v10 + 72);
    if (v17)
    {
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
      sub_18A5F3890();
    }
    sub_18A623FA0();

  }
  else
  {
    sub_18A623E08();

  }
LABEL_12:
  sub_18A623D08();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t sub_18A61F6A4()
{
  uint64_t v0;

  sub_18A6235D0(v0 + 112);

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_18A61F6D0()
{
  sub_18A61F6A4();
  return swift_defaultActor_deallocate();
}

uint64_t sub_18A61F6E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A61F6F4()
{
  return sub_18A61F6E8();
}

uint64_t sub_18A61F70C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18A61F768;
  return sub_18A61E3D4(a1, a2);
}

uint64_t sub_18A61F768()
{
  uint64_t v0;

  sub_18A5F40D8();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A61F78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18A62384C;
  return sub_18A61E50C(a1, a2, a3);
}

uint64_t sub_18A61F7F4(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18A62384C;
  return sub_18A61E6FC(a1, a2, a3);
}

uint64_t sub_18A61F85C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18A61F8B8;
  return sub_18A61F380(a1, a2);
}

uint64_t sub_18A61F8B8(uint64_t a1)
{
  uint64_t v1;

  sub_18A5F40D8();
  return sub_18A623BC8(a1, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A61F8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18A61F8B8;
  return sub_18A61F494(a1, a2, a3);
}

void sub_18A61F948(uint64_t a1)
{
  void *v1;

  objc_msgSend(v1, sel_initWithConfiguration_, a1);
  sub_18A5F3890();
  sub_18A5F379C();
}

void sub_18A61F9AC()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  sub_18A5F44DC();
  v3 = (uint64_t)objc_msgSend(v0, sel_state);
  v4 = objc_msgSend((id)v3, sel_pendingRecordZoneChanges);
  sub_18A5F3890();
  sub_18A5F3DF8(v5, (unint64_t *)&unk_1EDF6A450);
  sub_18A5F3C9C();
  sub_18A623D94();
  v11 = MEMORY[0x1E0DEE9D8];
  if (!((unint64_t)v3 >> 62))
  {
    sub_18A623DFC();
    if (v1)
      goto LABEL_3;
LABEL_17:
    sub_18A5F37E0();
    v8 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_24;
LABEL_18:
    if ((v8 & 0x4000000000000000) == 0)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (!v9)
      {
LABEL_25:
        sub_18A5F3AA0();
        sub_18A5F3CFC();
        return;
      }
      goto LABEL_20;
    }
LABEL_24:
    sub_18A5F3FAC();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F3AA0();
    if (!v9)
      goto LABEL_25;
LABEL_20:
    sub_18A623E40();
    if ((v9 & 0x8000000000000000) == 0)
    {
      while ((v8 & 0xC000000000000001) == 0)
      {
        v10 = sub_18A5F3D34(v8);
        sub_18A623DC4(v10);

        sub_18A623AA0();
        sub_18A5F4710();
        sub_18A5F41DC();
        sub_18A623AA8();
      }
      sub_18A623A6C();
    }
    goto LABEL_27;
  }
  if (v3 < 0)
    v0 = (void *)v3;
  else
    v0 = (void *)(v3 & 0xFFFFFFFFFFFFFF8);
  sub_18A5F3FAC();
  v1 = sub_18A623AB0();
  sub_18A5F37E0();
  if (!v1)
    goto LABEL_17;
LABEL_3:
  if (v1 >= 1)
  {
    for (i = 0; i != v1; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        sub_18A623A6C();
      v7 = sub_18A5F3D34(v3 + 8 * i);
      if (sub_18A623F44(v7))
      {

      }
      else
      {
        sub_18A623AA0();
        sub_18A5F4710();
        sub_18A5F41DC();
        sub_18A623AA8();
      }
    }
    sub_18A5F37E0();
    v8 = v11;
    if (v11 < 0)
      goto LABEL_24;
    goto LABEL_18;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_18A61FB60(unint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;

  v2 = a1;
  v28 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_46;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v22 = v2;
      v4 = 0;
      v25 = v2 & 0xFFFFFFFFFFFFFF8;
      v26 = v2 & 0xC000000000000001;
      v23 = v3;
      v24 = v2 + 32;
      while (1)
      {
        if (v26)
        {
          v5 = (id)MEMORY[0x18D76CEB0](v4, v22);
        }
        else
        {
          if (v4 >= *(_QWORD *)(v25 + 16))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          v5 = *(id *)(v24 + 8 * v4);
        }
        v6 = v5;
        if (__OFADD__(v4++, 1))
          goto LABEL_43;
        v8 = *a2;
        v9 = *a2 >> 62;
        if (!*((_BYTE *)a2 + 8))
          break;
        if (*((_BYTE *)a2 + 8) != 1)
          goto LABEL_32;
        if (v9)
        {
          sub_18A5F4724();
          v10 = _CocoaArrayWrapper.endIndex.getter();
          if (!v10)
          {
LABEL_37:

            sub_18A5F4514();
            goto LABEL_33;
          }
        }
        else
        {
          v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          sub_18A5F4724();
          if (!v10)
            goto LABEL_37;
        }
        if ((v8 & 0xC000000000000001) != 0)
          sub_18A5F398C();
        v11 = *(id *)(v8 + 32);
        sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
        v2 = sub_18A623DD4();

        if ((v2 & 1) != 0)
          goto LABEL_31;
        if (v10 != 1)
        {
          v12 = 5;
          do
          {
            v2 = (uint64_t)*(id *)(v8 + 8 * v12);
            v13 = v12 - 3;
            if (__OFADD__(v12 - 4, 1))
              goto LABEL_44;
            v14 = sub_18A623EF0();

            if ((v14 & 1) != 0)
              goto LABEL_31;
            ++v12;
          }
          while (v13 != v10);
        }

        sub_18A5F4514();
LABEL_25:
        v3 = v23;
LABEL_33:
        if (v4 == v3)
        {
          v20 = v28;
          goto LABEL_48;
        }
      }
      if (v9)
      {
        sub_18A5F4724();
        v15 = _CocoaArrayWrapper.endIndex.getter();
        if (!v15)
          goto LABEL_31;
      }
      else
      {
        v15 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        sub_18A5F4724();
        if (!v15)
          goto LABEL_31;
      }
      if ((v8 & 0xC000000000000001) != 0)
        sub_18A5F398C();
      v16 = *(id *)(v8 + 32);
      sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
      v2 = sub_18A623DD4();

      if ((v2 & 1) != 0)
        break;
      if (v15 == 1)
      {
LABEL_31:
        sub_18A5F4514();
        v3 = v23;
LABEL_32:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_33;
      }
      v17 = 5;
      while (1)
      {
        v2 = (uint64_t)*(id *)(v8 + 8 * v17);
        v18 = v17 - 3;
        if (__OFADD__(v17 - 4, 1))
          break;
        v19 = sub_18A623EF0();

        if ((v19 & 1) != 0)
          goto LABEL_24;
        ++v17;
        if (v18 == v15)
          goto LABEL_31;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3)
        goto LABEL_47;
    }
LABEL_24:
    sub_18A5F4514();

    goto LABEL_25;
  }
LABEL_47:
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_48:
  swift_bridgeObjectRelease();
  return v20;
}

Class sub_18A61FEAC(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  Class isa;

  v4 = a1;
  a3();
  sub_18A623D94();
  sub_18A5F3DF8(v5, (unint64_t *)&unk_1EDF6A8F0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_18A5F37E0();
  return isa;
}

void sub_18A61FF04()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  sub_18A5F44DC();
  v3 = (uint64_t)objc_msgSend(v0, sel_state);
  v4 = objc_msgSend((id)v3, sel_pendingRecordZoneChanges);
  sub_18A5F3890();
  sub_18A5F3DF8(v5, (unint64_t *)&unk_1EDF6A450);
  sub_18A5F3C9C();
  sub_18A623D94();
  v11 = MEMORY[0x1E0DEE9D8];
  if (!((unint64_t)v3 >> 62))
  {
    sub_18A623DFC();
    if (v1)
      goto LABEL_3;
LABEL_17:
    sub_18A5F37E0();
    v8 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_24;
LABEL_18:
    if ((v8 & 0x4000000000000000) == 0)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (!v9)
      {
LABEL_25:
        sub_18A5F3AA0();
        sub_18A5F3CFC();
        return;
      }
      goto LABEL_20;
    }
LABEL_24:
    sub_18A5F3FAC();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F3AA0();
    if (!v9)
      goto LABEL_25;
LABEL_20:
    sub_18A623E40();
    if ((v9 & 0x8000000000000000) == 0)
    {
      while ((v8 & 0xC000000000000001) == 0)
      {
        v10 = sub_18A5F3D34(v8);
        sub_18A623DC4(v10);

        sub_18A623AA0();
        sub_18A5F4710();
        sub_18A5F41DC();
        sub_18A623AA8();
      }
      sub_18A623A6C();
    }
    goto LABEL_27;
  }
  if (v3 < 0)
    v0 = (void *)v3;
  else
    v0 = (void *)(v3 & 0xFFFFFFFFFFFFFF8);
  sub_18A5F3FAC();
  v1 = sub_18A623AB0();
  sub_18A5F37E0();
  if (!v1)
    goto LABEL_17;
LABEL_3:
  if (v1 >= 1)
  {
    for (i = 0; i != v1; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        sub_18A623A6C();
      v7 = sub_18A5F3D34(v3 + 8 * i);
      if (sub_18A623F44(v7) == (id)1)
      {
        sub_18A623AA0();
        sub_18A5F4710();
        sub_18A5F41DC();
        sub_18A623AA8();
      }
      else
      {

      }
    }
    sub_18A5F37E0();
    v8 = v11;
    if (v11 < 0)
      goto LABEL_24;
    goto LABEL_18;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_18A6200EC(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v12;
  unsigned int v13;

  v1 = sub_18A5F3888(a1, sel_state);
  v2 = objc_msgSend(v1, sel_pendingDatabaseChanges);

  sub_18A5F3DF8(v3, (unint64_t *)&unk_1EDF6A490);
  v4 = sub_18A623A54();

  if (v4 >> 62)
  {
    sub_18A5F3FAC();
    v2 = (id)sub_18A623E10();
    sub_18A5F37E0();
  }
  else
  {
    sub_18A623DFC();
  }
  v5 = sub_18A5F37E0();
  if (v2)
    return 1;
  v6 = sub_18A5F3888(v5, sel_state);
  v7 = objc_msgSend(v6, sel_pendingRecordZoneChanges);

  sub_18A5F3DF8(v8, (unint64_t *)&unk_1EDF6A450);
  v9 = sub_18A623A54();

  if (v9 >> 62)
  {
    sub_18A5F3FAC();
    v7 = (id)sub_18A623E10();
    sub_18A5F37E0();
  }
  else
  {
    sub_18A623DFC();
  }
  v10 = sub_18A5F37E0();
  if (v7)
    return 1;
  v12 = sub_18A5F3888(v10, sel_state);
  v13 = objc_msgSend(v12, sel_hasPendingUntrackedChanges);

  return v13 ^ 1;
}

id sub_18A62027C()
{
  uint64_t v0;

  return objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v0
                                                                           + OBJC_IVAR___CKSyncEngine_delegateAdapter)
                                                               + 120), sel_dataSource));
}

uint64_t sub_18A6202AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v16;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_18A623B70();
  sub_18A6239F8((uint64_t)v9, v11, v12, v10);
  v13 = (_QWORD *)sub_18A5F37B4();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a1;
  v13[5] = v3;
  v13[6] = a2;
  v13[7] = a3;
  swift_bridgeObjectRetain();
  v14 = v3;
  sub_18A623F94();
  sub_18A670ABC((uint64_t)v9, (uint64_t)&unk_1EDF6B360, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_18A62036C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  return swift_task_switch();
}

uint64_t sub_18A620388()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;

  if (v0[15])
  {
    v1 = swift_bridgeObjectRetain();
    v2 = sub_18A6682F4(v1);
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
  v4 = sub_18A66B5AC(v2);
  v0[19] = sub_18A623D9C(objc_allocWithZone((Class)CKSyncEngineFetchChangesOptions), sel_initWithScope_);

  v5 = sub_18A623D84((uint64_t)sub_18A620464);
  v0[10] = MEMORY[0x1E0C809B0];
  v6 = v0 + 10;
  v6[1] = 0x40000000;
  v6[2] = sub_18A67211C;
  v6[3] = &unk_1E1F5B650;
  v6[4] = v5;
  sub_18A623E18(v5, sel_fetchChangesWithOptions_completionHandler_);
  return sub_18A5F3C94();
}

uint64_t sub_18A620464()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 160) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6204A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);

  if (v1)
    sub_18A623D2C(*(uint64_t (**)(_QWORD))(v0 + 136));
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6204DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  swift_willThrow();

  if (v2)
  {
    sub_18A5F42D4();
    sub_18A623E38();
    sub_18A5F3FEC();
  }
  sub_18A5F3FEC();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A620600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;

  sub_18A61A92C();
  a17 = v19;
  a18 = v20;
  v21 = v18;
  v23 = v22;
  v25 = v24;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v25)
  {
    v29 = sub_18A5F37B4();
    *(_QWORD *)(v29 + 16) = v25;
    *(_QWORD *)(v29 + 24) = v23;
    v30 = sub_18A61C758;
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  sub_18A5F101C(&qword_1EDF694F0);
  sub_18A5F37B4();
  sub_18A623F8C(v25);
  v31 = sub_18A61CB44((uint64_t)v30, v29);
  v32 = sub_18A623B70();
  sub_18A6239F8((uint64_t)v28, v33, v34, v32);
  v35 = (_QWORD *)sub_18A5F37B4();
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = v21;
  v35[5] = v31;
  v36 = v21;
  sub_18A670ABC((uint64_t)v28, (uint64_t)&unk_1EDF6B350, (uint64_t)v35);
  swift_release();
  sub_18A5F3800();
}

uint64_t sub_18A620708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 120) = a4;
  *(_QWORD *)(v5 + 128) = a5;
  return swift_task_switch();
}

uint64_t sub_18A620720()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_18A6207A8;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_18A62088C;
  v3[3] = &unk_1E1F5B5E8;
  v3[4] = v2;
  objc_msgSend(v1, sel_sendChangesWithCompletionHandler_, v3);
  return sub_18A5F3C94();
}

uint64_t sub_18A6207A8()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 136) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6207E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = (uint64_t (*)(uint64_t *))sub_18A61C8E0();
  if (v2)
  {
    sub_18A623C18(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
    sub_18A623B38(v0);
  }
  return sub_18A623874(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A620828()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *);
  uint64_t v4;

  swift_willThrow();
  v1 = sub_18A61C8E0();
  if (v1)
  {
    v2 = (void (*)(uint64_t *))v1;
    v4 = *(_QWORD *)(v0 + 136);
    sub_18A5F42D4();
    v2(&v4);
    sub_18A5F3FEC();
    sub_18A623B38((uint64_t)v2);
  }
  sub_18A5F3FEC();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A62088C(uint64_t a1, void *a2)
{
  if (a2)
    return sub_18A672150(*(_QWORD *)(a1 + 32), a2);
  else
    return j__swift_continuation_throwingResume();
}

#error "18A620938: call analysis failed (funcsize=36)"

void sub_18A620960()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  sub_18A61A92C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v9);
  sub_18A6103BC();
  if (v6)
  {
    v10 = sub_18A5F37B4();
    *(_QWORD *)(v10 + 16) = v6;
    *(_QWORD *)(v10 + 24) = v4;
    v11 = sub_18A61C668;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  sub_18A5F101C(&qword_1EDF694F0);
  sub_18A5F37B4();
  sub_18A623F8C(v6);
  v12 = sub_18A61CB44((uint64_t)v11, v10);
  v13 = sub_18A623B70();
  sub_18A6239F8(v1, v14, v15, v13);
  v16 = (_QWORD *)sub_18A5F37B4();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v8;
  v16[5] = v2;
  v16[6] = v12;
  sub_18A5F40AC();
  sub_18A623EE4((uint64_t)v2, (uint64_t)&unk_1EDF6B340);
  swift_release();
  sub_18A5F3800();
}

uint64_t sub_18A620A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  return swift_task_switch();
}

uint64_t sub_18A620A78()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;

  if (v0[15])
  {
    v1 = swift_bridgeObjectRetain();
    v2 = sub_18A6682F4(v1);
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_allocWithZone((Class)CKSyncEngineSendChangesScope);
  v4 = sub_18A66B5AC(v2);
  v0[18] = sub_18A623D9C(objc_allocWithZone((Class)CKSyncEngineSendChangesOptions), sel_initWithScope_);

  v5 = sub_18A623D84((uint64_t)sub_18A620B54);
  v0[10] = MEMORY[0x1E0C809B0];
  v6 = v0 + 10;
  v6[1] = 0x40000000;
  v6[2] = sub_18A67211C;
  v6[3] = &unk_1E1F59D08;
  v6[4] = v5;
  sub_18A623E18(v5, sel_sendChangesWithOptions_completionHandler_);
  return sub_18A5F3C94();
}

uint64_t sub_18A620B54()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 152) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A620B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = (uint64_t (*)(uint64_t *))sub_18A61C8E0();
  if (v2)
  {
    sub_18A623C18(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
    sub_18A623B38(v0);
  }
  return sub_18A623874(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A620BD8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t *);
  uint64_t v5;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  v2 = sub_18A61C8E0();
  if (v2)
  {
    v3 = (void (*)(uint64_t *))v2;
    v5 = *(_QWORD *)(v0 + 152);
    sub_18A5F42D4();
    v3(&v5);
    sub_18A5F3FEC();
    sub_18A623B38((uint64_t)v3);
  }
  sub_18A5F3FEC();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A620D18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  SEL *v25;
  SEL *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t UniqueAndReserveCapacityIfNot;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  Class v53;
  uint64_t v54;

  sub_18A623AD4();
  v26 = v25;
  v27 = v24;
  v29 = v28;
  v31 = v30;
  v32 = sub_18A5F3888(v30, sel_state);
  v33 = MEMORY[0x1E0DEE9D8];
  v51 = (uint64_t)v26;
  v52 = v32;
  if (!v31)
    goto LABEL_12;
  if (v31 >> 62)
  {
    sub_18A6239CC();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    if (v34)
      goto LABEL_4;
LABEL_11:
    v32 = (id)sub_18A5F3FE4();
    goto LABEL_12;
  }
  v34 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  sub_18A6239CC();
  if (!v34)
    goto LABEL_11;
LABEL_4:
  v54 = v33;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v34 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v50 = (uint64_t)v27;
  v35 = 0;
  do
  {
    if ((v31 & 0xC000000000000001) != 0)
      sub_18A623F64();
    v36 = sub_18A5F3D34(v31 + 8 * v35++);
    objc_msgSend(objc_allocWithZone((Class)CKSyncEnginePendingRecordZoneChange), sel_initWithRecordID_type_, v36, 0);

    UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    sub_18A623F30(UniqueAndReserveCapacityIfNot, v38, v39, v40, v41, v42, v43, v44, v50, v51, (uint64_t)v52, v54);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v34 != v35);
  v32 = (id)sub_18A5F3FE4();
  v27 = (void *)v50;
  v26 = (SEL *)v51;
LABEL_12:
  sub_18A5F3DF8((uint64_t)v32, (unint64_t *)&unk_1EDF6A450);
  isa = sub_18A623DE4().super.isa;
  sub_18A5F37A4();
  objc_msgSend(v52, *v26, isa);

  v46 = objc_msgSend(v27, sel_state);
  if (!v29)
  {
LABEL_24:
    v53 = sub_18A623DE4().super.isa;
    sub_18A5F37A4();
    objc_msgSend(v46, *v26, v53);

    return;
  }
  if (!(v29 >> 62))
  {
    v47 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    sub_18A5F40AC();
    if (v47)
      goto LABEL_15;
LABEL_23:
    sub_18A5F3944();
    v26 = (SEL *)v51;
    goto LABEL_24;
  }
  sub_18A5F40AC();
  v47 = _CocoaArrayWrapper.endIndex.getter();
  if (!v47)
    goto LABEL_23;
LABEL_15:
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v47 & 0x8000000000000000) == 0)
  {
    v48 = 0;
    do
    {
      if ((v29 & 0xC000000000000001) != 0)
        v49 = (id)MEMORY[0x18D76CEB0](v48, v29);
      else
        v49 = sub_18A5F3D34(v29 + 8 * v48);
      ++v48;
      objc_msgSend(objc_allocWithZone((Class)CKSyncEnginePendingRecordZoneChange), sel_initWithRecordID_type_, v49, 1);
      sub_18A623F28();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      sub_18A623C54();
      specialized ContiguousArray._endMutation()();
    }
    while (v47 != v48);
    goto LABEL_23;
  }
LABEL_26:
  __break(1u);
}

#error "18A621044: call analysis failed (funcsize=25)"

#error "18A6210C4: call analysis failed (funcsize=25)"

void sub_18A6210DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  SEL *v27;
  SEL *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  unint64_t v35;
  Class isa;
  id v37;
  unint64_t v38;
  Class v39;

  sub_18A623AD4();
  a24 = v25;
  a25 = v26;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = sub_18A623E7C();
  v34 = v33;
  if (v32)
  {
    v35 = sub_18A6239CC();
    sub_18A61C95C(v35, (uint64_t)&a10, (Class *)off_1E1F54498, (SEL *)&selRef_initWithZone_);
    v33 = (id)sub_18A5F3FE4();
  }
  sub_18A5F3DF8((uint64_t)v33, (unint64_t *)&unk_1EDF6A490);
  isa = sub_18A623DE4().super.isa;
  sub_18A5F394C();
  objc_msgSend(v34, *v28, isa);

  v37 = sub_18A623E7C();
  if (v30)
  {
    v38 = swift_bridgeObjectRetain();
    sub_18A61C95C(v38, (uint64_t)&a12, (Class *)off_1E1F54490, (SEL *)&selRef_initWithZoneID_);
    sub_18A5F37A4();
  }
  v39 = sub_18A623DE4().super.isa;
  sub_18A5F3944();
  objc_msgSend(v37, *v28, v39);

  sub_18A623AB8();
}

void sub_18A621218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  char **v20;
  uint64_t v21;
  void *v22;
  id v23;
  Class isa;

  sub_18A5F44DC();
  v11 = v10;
  v13 = v12;
  v14 = sub_18A5F3888(v12, sel_state);
  v15 = v14;
  v16 = v13 >> 62;
  if ((v11 & 1) != 0)
  {
    if (v16)
    {
      sub_18A623C60();
      v17 = sub_18A623AB0();
      v14 = (id)sub_18A5F460C();
    }
    else
    {
      v17 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v18 = (void *)MEMORY[0x1E0DEE9D8];
    if (!v17)
    {
      v20 = &selRef_addPendingRecordZoneChanges_;
      goto LABEL_23;
    }
    sub_18A623CD4();
    if ((v17 & 0x8000000000000000) == 0)
    {
      sub_18A623CAC();
      do
      {
        if (v9)
          sub_18A623EFC();
        sub_18A5F3D34(v13 + 8 * (_QWORD)v15);
        v19 = sub_18A623DA4();
        sub_18A623C9C(v19);

        sub_18A623AA0();
        sub_18A623C88();
        sub_18A623DEC();
        v14 = (id)sub_18A623AA8();
      }
      while ((void *)v17 != v15);
      v20 = &selRef_addPendingRecordZoneChanges_;
LABEL_20:
      v15 = a9;
LABEL_23:
      sub_18A5F3DF8((uint64_t)v14, (unint64_t *)&unk_1EDF6A450);
      isa = sub_18A623E94().super.isa;
      sub_18A5F37A4();
      objc_msgSend(v15, *v20, isa);

      sub_18A5F44F8(isa);
      return;
    }
    __break(1u);
  }
  else
  {
    if (v16)
    {
      sub_18A623C60();
      v21 = sub_18A623AB0();
      v14 = (id)sub_18A5F460C();
    }
    else
    {
      v21 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v22 = (void *)MEMORY[0x1E0DEE9D8];
    if (!v21)
    {
      v20 = &selRef_removePendingRecordZoneChanges_;
      goto LABEL_23;
    }
    sub_18A623CD4();
    if ((v21 & 0x8000000000000000) == 0)
    {
      sub_18A623CAC();
      do
      {
        if (v9)
          sub_18A623EFC();
        sub_18A5F3D34(v13 + 8 * (_QWORD)v15);
        v23 = sub_18A623DA4();
        sub_18A623C9C(v23);

        sub_18A623AA0();
        sub_18A623C88();
        sub_18A623DEC();
        v14 = (id)sub_18A623AA8();
      }
      while ((void *)v21 != v15);
      v20 = &selRef_removePendingRecordZoneChanges_;
      goto LABEL_20;
    }
  }
  __break(1u);
}

uint64_t sub_18A6213C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;

  sub_18A5F3DF8((uint64_t)a1, (unint64_t *)&unk_1EDF6A8F0);
  v8 = sub_18A623A54();
  v9 = a1;
  sub_18A621218(v8, a4, a5, v10, v11, v12, v13, v14, v16);

  return sub_18A6239EC();
}

void sub_18A621454()
{
  SEL *v0;
  SEL *v1;
  char v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char **v11;
  uint64_t v12;
  id v13;
  Class isa;

  sub_18A5F44DC();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = sub_18A5F3888(v4, sel_state);
  v7 = v6;
  v8 = v5 >> 62;
  if ((v3 & 1) == 0)
  {
    if (v8)
    {
      sub_18A6239CC();
      v12 = sub_18A623AB0();
      v6 = (id)sub_18A5F3FE4();
    }
    else
    {
      v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v12)
    {
      sub_18A623CC4();
      if ((v12 & 0x8000000000000000) == 0)
      {
        while ((v5 & 0xC000000000000001) == 0)
        {
          sub_18A5F3D34(v5);
          v13 = sub_18A623DB4();
          sub_18A623D9C(v13, *v1);
          sub_18A623F28();
          sub_18A623AA0();
          sub_18A623C74();
          sub_18A623C54();
          sub_18A623AA8();
        }
        sub_18A623F64();
      }
      goto LABEL_22;
    }
    v11 = &selRef_removePendingDatabaseChanges_;
LABEL_18:
    sub_18A5F3DF8((uint64_t)v6, (unint64_t *)&unk_1EDF6A490);
    isa = sub_18A623E94().super.isa;
    sub_18A5F37A4();
    objc_msgSend(v7, *v11, isa);

    sub_18A5F44F8(isa);
    return;
  }
  if (v8)
  {
    sub_18A6239CC();
    v9 = sub_18A623AB0();
    v6 = (id)sub_18A5F3FE4();
  }
  else
  {
    v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v9)
  {
    v11 = &selRef_addPendingDatabaseChanges_;
    goto LABEL_18;
  }
  sub_18A623CC4();
  if ((v9 & 0x8000000000000000) == 0)
  {
    while ((v5 & 0xC000000000000001) == 0)
    {
      sub_18A5F3D34(v5);
      v10 = sub_18A623DB4();
      sub_18A623D9C(v10, *v1);
      sub_18A623F28();
      sub_18A623AA0();
      sub_18A623C74();
      sub_18A623C54();
      sub_18A623AA8();
    }
    sub_18A623F64();
  }
  __break(1u);
LABEL_22:
  __break(1u);
}

uint64_t sub_18A621638(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  id v6;

  sub_18A60B8D0(0, a5);
  sub_18A623BFC();
  v6 = a1;
  sub_18A621454();

  return swift_bridgeObjectRelease();
}

void sub_18A6216B4()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_state);
  objc_msgSend(v1, sel_setHasPendingUntrackedChanges_, 1);

}

uint64_t type metadata accessor for CKSyncEngine(uint64_t a1)
{
  return sub_18A60B8D0(a1, &qword_1EDF6B268);
}

uint64_t type metadata accessor for CKSyncEngineObjCDelegateAdapter()
{
  return objc_opt_self();
}

uint64_t sub_18A621764(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_18A6217B0(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_18A6217CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;

  sub_18A61A92C();
  v3 = v2;
  if ((*(_QWORD *)v0 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
      goto LABEL_3;
LABEL_12:
    sub_18A5F3800();
    return;
  }
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    goto LABEL_12;
LABEL_3:
  if (v3 >> 62)
  {
    sub_18A5F3FAC();
    v1 = sub_18A623E10();
    if (v1)
      goto LABEL_5;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  sub_18A623DFC();
  sub_18A5F3FAC();
  if (!v1)
    goto LABEL_10;
LABEL_5:
  if (v1 >= 1)
  {
    v4 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        sub_18A623A6C();
      v5 = sub_18A5F3D34(v3 + 8 * v4++);
      sub_18A621A20();
      v7 = v6;

    }
    while (v1 != v4);
    goto LABEL_10;
  }
  __break(1u);
}

void sub_18A6218AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  sub_18A61A92C();
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    sub_18A5F3800();
    return;
  }
  v2 = v1;
  v3 = v1 + 56;
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = v15 + (v8 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_18A621B88(v17, v18);
    sub_18A5F460C();
    sub_18A5F3944();
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    ++v8;
    if (!*(_QWORD *)(v3 + 8 * v11))
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      if (!*(_QWORD *)(v3 + 8 * v8))
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        if (!*(_QWORD *)(v3 + 8 * v8))
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          if (!*(_QWORD *)(v3 + 8 * v8))
            break;
        }
      }
    }
LABEL_21:
    sub_18A623BAC();
    v6 = v14 & v13;
  }
  v12 = v11 + 4;
  if (v12 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  if (*(_QWORD *)(v3 + 8 * v12))
  {
    v8 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    ++v12;
    if (*(_QWORD *)(v3 + 8 * v8))
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

void sub_18A621A20()
{
  uint64_t *v0;
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  char v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;

  sub_18A5F44DC();
  v2 = v0;
  v4 = v3;
  v5 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    v8 = *(_QWORD *)(v5 + 40);
    sub_18A5F40AC();
    v9 = NSObject._rawHashValue(seed:)(v8);
    v10 = -1 << *(_BYTE *)(v5 + 32);
    v11 = v9 & ~v10;
    sub_18A623F14();
    if ((v13 & 1) != 0)
    {
      sub_18A5F3DF8(v12, (unint64_t *)&qword_1ECD967B0);
      sub_18A623F08();
      v14 = sub_18A623F6C();

      if ((v14 & 1) != 0)
      {
LABEL_9:
        sub_18A5F3944();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19 = *v2;
        *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
          sub_18A621FD8();
        sub_18A622D6C(v11);
        *v2 = v19;
        goto LABEL_12;
      }
      v15 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v15;
        sub_18A623F14();
        if ((v16 & 1) == 0)
          break;
        sub_18A623F08();
        v17 = sub_18A623F6C();

        if ((v17 & 1) != 0)
          goto LABEL_9;
      }
    }
LABEL_13:
    sub_18A5F3944();
    goto LABEL_14;
  }
  sub_18A5F40AC();
  v6 = v4;
  v7 = __CocoaSet.contains(_:)();

  if ((v7 & 1) == 0)
    goto LABEL_13;
  sub_18A621D14();
LABEL_12:
  swift_bridgeObjectRelease();
LABEL_14:
  sub_18A5F3CFC();
}

uint64_t sub_18A621B88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_18A6221B0();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  sub_18A622F00(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_18A621D14()
{
  Swift::Int *v0;
  Swift::Int *v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  Swift::Int v14;

  v1 = v0;
  swift_bridgeObjectRelease();
  __CocoaSet.count.getter();
  swift_unknownObjectRetain();
  v2 = sub_18A6230F0();
  v14 = v2;
  v3 = *(_QWORD *)(v2 + 40);
  swift_retain();
  v4 = NSObject._rawHashValue(seed:)(v3);
  v5 = -1 << *(_BYTE *)(v2 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v6);
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v12 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v6);
      sub_18A622D6C(v6);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v1 = v14;
        return v12;
      }
      __break(1u);
    }
    else
    {
      v9 = ~v5;
      while (1)
      {
        v6 = (v6 + 1) & v9;
        if (((*(_QWORD *)(v2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v6);
        v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

void sub_18A621EC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_18A5F101C(&qword_1EDF6B3D0);
  sub_18A623994();
  sub_18A623BA0();
  if (v2)
  {
    v3 = (void *)sub_18A5F3B0C();
    if (v6)
      v7 = (unint64_t)v3 >= v5;
    else
      v7 = 1;
    if (v7)
      sub_18A623A60(v3, v4);
    sub_18A623948();
    if (!v10)
      goto LABEL_10;
LABEL_9:
    sub_18A623D6C();
    while (1)
    {
      sub_18A623ED0();
      if (v14)
        goto LABEL_9;
LABEL_10:
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v11 >= v8)
        goto LABEL_25;
      if (!*(_QWORD *)(v1 + 8 * v11))
      {
        if (v9 + 2 >= v8)
          goto LABEL_25;
        if (!*(_QWORD *)(v1 + 8 * (v9 + 2)))
        {
          if (v9 + 3 >= v8)
            goto LABEL_25;
          if (!*(_QWORD *)(v1 + 8 * (v9 + 3)))
          {
            v12 = v9 + 4;
            if (v9 + 4 >= v8)
              goto LABEL_25;
            if (!*(_QWORD *)(v1 + 8 * v12))
              break;
          }
        }
      }
LABEL_22:
      sub_18A623D54();
    }
    while (1)
    {
      v13 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      if (v13 >= v8)
        goto LABEL_25;
      ++v12;
      if (*(_QWORD *)(v1 + 8 * v13))
        goto LABEL_22;
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    sub_18A61A878();
    *v0 = v0;
    sub_18A5F3824();
  }
}

void sub_18A621FB4()
{
  sub_18A621FD8();
}

void sub_18A621FC0()
{
  sub_18A621FD8();
}

void sub_18A621FCC()
{
  sub_18A621FD8();
}

void sub_18A621FD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  sub_18A61A92C();
  sub_18A5F101C(v6);
  sub_18A623994();
  sub_18A623BA0();
  if (!v7)
  {
LABEL_29:
    sub_18A61A878();
    *v0 = v0;
    sub_18A5F3800();
    return;
  }
  v8 = (void *)sub_18A5F3B0C();
  if (v11)
    v12 = (unint64_t)v8 >= v10;
  else
    v12 = 1;
  if (v12)
    sub_18A623A60(v8, v9);
  sub_18A623880();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  sub_18A6239B4();
  while (1)
  {
    v19 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v13);
    *(_QWORD *)(v0[6] + 8 * v13) = v19;
    v20 = v19;
    if (v5)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v4 + 1 >= v3)
      goto LABEL_29;
    sub_18A623EC4();
    if (!v14)
    {
      sub_18A623EB8();
      if (v15 == v16)
        goto LABEL_29;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        sub_18A623EA0();
        if (v15 == v16)
          goto LABEL_29;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_26:
    sub_18A6239D4();
  }
  sub_18A623D20();
  if (v15 == v16)
    goto LABEL_29;
  if (*(_QWORD *)(v2 + 8 * v17))
  {
    v4 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v4 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v4 >= v3)
      goto LABEL_29;
    sub_18A623EAC();
    if (v18)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

void sub_18A6220C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_18A5F101C(&qword_1EDF6A4C0);
  sub_18A623994();
  sub_18A623BA0();
  if (v2)
  {
    v3 = (void *)sub_18A5F3B0C();
    if (v6)
      v7 = (unint64_t)v3 >= v5;
    else
      v7 = 1;
    if (v7)
      sub_18A623A60(v3, v4);
    sub_18A623948();
    if (!v10)
      goto LABEL_10;
LABEL_9:
    sub_18A623D6C();
    while (1)
    {
      sub_18A623ED0();
      if (v14)
        goto LABEL_9;
LABEL_10:
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v11 >= v8)
        goto LABEL_25;
      if (!*(_QWORD *)(v1 + 8 * v11))
      {
        if (v9 + 2 >= v8)
          goto LABEL_25;
        if (!*(_QWORD *)(v1 + 8 * (v9 + 2)))
        {
          if (v9 + 3 >= v8)
            goto LABEL_25;
          if (!*(_QWORD *)(v1 + 8 * (v9 + 3)))
          {
            v12 = v9 + 4;
            if (v9 + 4 >= v8)
              goto LABEL_25;
            if (!*(_QWORD *)(v1 + 8 * v12))
              break;
          }
        }
      }
LABEL_22:
      sub_18A623D54();
    }
    while (1)
    {
      v13 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      if (v13 >= v8)
        goto LABEL_25;
      ++v12;
      if (*(_QWORD *)(v1 + 8 * v13))
        goto LABEL_22;
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    sub_18A61A878();
    *v0 = v0;
    sub_18A5F3824();
  }
}

void sub_18A6221B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  sub_18A61A92C();
  sub_18A5F101C((uint64_t *)&unk_1EDF69270);
  sub_18A623994();
  sub_18A623BA0();
  if (!v6)
  {
LABEL_29:
    sub_18A61A878();
    *v0 = v0;
    sub_18A5F3800();
    return;
  }
  v7 = (void *)sub_18A5F3B0C();
  if (v10)
    v11 = (unint64_t)v7 >= v9;
  else
    v11 = 1;
  if (v11)
    sub_18A623A60(v7, v8);
  sub_18A623880();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  sub_18A6239B4();
  while (1)
  {
    v18 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v12);
    v19 = v18[1];
    v20 = (_QWORD *)(v0[6] + 16 * v12);
    *v20 = *v18;
    v20[1] = v19;
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v4 + 1 >= v3)
      goto LABEL_29;
    sub_18A623EC4();
    if (!v13)
    {
      sub_18A623EB8();
      if (v14 == v15)
        goto LABEL_29;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        sub_18A623EA0();
        if (v14 == v15)
          goto LABEL_29;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_26:
    sub_18A6239D4();
  }
  sub_18A623D20();
  if (v14 == v15)
    goto LABEL_29;
  if (*(_QWORD *)(v2 + 8 * v16))
  {
    v4 = v16;
    goto LABEL_26;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v3)
      goto LABEL_29;
    sub_18A623EAC();
    if (v17)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

void sub_18A6222A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;

  sub_18A61A92C();
  sub_18A5F101C(&qword_1EDF69348);
  sub_18A623994();
  sub_18A623BA0();
  if (!v6)
  {
LABEL_29:
    sub_18A61A878();
    *v0 = v0;
    sub_18A5F3800();
    return;
  }
  v7 = (void *)sub_18A5F3B0C();
  if (v10)
    v11 = (unint64_t)v7 >= v9;
  else
    v11 = 1;
  if (v11)
    sub_18A623A60(v7, v8);
  sub_18A623880();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  sub_18A6239B4();
  while (1)
  {
    v18 = *(_QWORD *)(v1 + 48) + 16 * v12;
    v19 = *(void **)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = v0[6] + 16 * v12;
    *(_QWORD *)v20 = v19;
    *(_BYTE *)(v20 + 8) = v18;
    v21 = v19;
    if (v5)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v4 + 1 >= v3)
      goto LABEL_29;
    sub_18A623EC4();
    if (!v13)
    {
      sub_18A623EB8();
      if (v14 == v15)
        goto LABEL_29;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        sub_18A623EA0();
        if (v14 == v15)
          goto LABEL_29;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_26:
    sub_18A6239D4();
  }
  sub_18A623D20();
  if (v14 == v15)
    goto LABEL_29;
  if (*(_QWORD *)(v2 + 8 * v16))
  {
    v4 = v16;
    goto LABEL_26;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v3)
      goto LABEL_29;
    sub_18A623EAC();
    if (v17)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

void sub_18A6223A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t *v29;

  sub_18A6238BC();
  sub_18A5F101C(&qword_1EDF6B3D0);
  v2 = sub_18A5F385C();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v29 = v0;
    v4 = 0;
    v5 = (_QWORD *)(v1 + 56);
    v6 = 1 << *(_BYTE *)(v1 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v1 + 56);
    v9 = (unint64_t)(v6 + 63) >> 6;
    v10 = v2 + 56;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v16);
      Hasher._finalize()();
      sub_18A623E68();
      if (((-1 << v18) & ~*(_QWORD *)(v10 + 8 * v17)) == 0)
      {
        sub_18A623A8C();
        while (1)
        {
          sub_18A623FE8();
          if (v22)
          {
            if ((v19 & 1) != 0)
              break;
          }
          if (v20 == v21)
            v20 = 0;
          if (*(_QWORD *)(v10 + 8 * v20) != -1)
          {
            sub_18A5F3874();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_18A623A40();
LABEL_31:
      sub_18A623FB8();
      *(_QWORD *)(v10 + v23) |= v24;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v25) = v16;
      sub_18A623D34();
      if (v8)
        goto LABEL_6;
LABEL_7:
      v13 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_39;
      if (v13 >= v9)
        goto LABEL_33;
      v14 = v5[v13];
      ++v4;
      if (!v14)
      {
        v4 = v13 + 1;
        if (v13 + 1 >= v9)
          goto LABEL_33;
        v14 = v5[v4];
        if (!v14)
        {
          v4 = v13 + 2;
          if (v13 + 2 >= v9)
            goto LABEL_33;
          v14 = v5[v4];
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v9)
            {
LABEL_33:
              sub_18A623A78();
              if (v27 ^ v28 | v22)
                *v5 = -1 << v26;
              else
                sub_18A623C2C(v26);
              v0 = v29;
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            v14 = v5[v15];
            if (!v14)
            {
              while (1)
              {
                v4 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_40;
                if (v4 >= v9)
                  goto LABEL_33;
                v14 = v5[v4];
                ++v15;
                if (v14)
                  goto LABEL_20;
              }
            }
            v4 = v15;
          }
        }
      }
LABEL_20:
      v8 = (v14 - 1) & v14;
    }
  }
  sub_18A61A878();
  *v0 = v3;
}

void sub_18A6225C8()
{
  sub_18A6225EC();
}

void sub_18A6225D4()
{
  sub_18A6225EC();
}

void sub_18A6225E0()
{
  sub_18A6225EC();
}

void sub_18A6225EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t *v30;

  sub_18A5F44DC();
  sub_18A6238BC();
  sub_18A5F101C(v2);
  v3 = sub_18A5F385C();
  v4 = v3;
  if (*(_QWORD *)(v1 + 16))
  {
    v30 = v0;
    v5 = 1 << *(_BYTE *)(v1 + 32);
    v6 = (_QWORD *)(v1 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v1 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    sub_18A623E28();
    v11 = 0;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v12 | (v11 << 6); ; i = v18 + (v11 << 6))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i);
      NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      sub_18A623E68();
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * v20)) == 0)
      {
        sub_18A623A8C();
        while (1)
        {
          sub_18A623FE8();
          if (v26)
          {
            if ((v23 & 1) != 0)
              break;
          }
          if (v24 == v25)
            v24 = 0;
          if (*(_QWORD *)(v10 + 8 * v24) != -1)
          {
            sub_18A5F3874();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_18A623A40();
LABEL_31:
      *(_QWORD *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v19;
      sub_18A623D34();
      if (v8)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_39;
      if (v14 >= v9)
        goto LABEL_33;
      ++v11;
      if (!v6[v14])
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v9)
          goto LABEL_33;
        if (!v6[v11])
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v9)
            goto LABEL_33;
          if (!v6[v11])
          {
            v15 = v14 + 3;
            if (v15 >= v9)
            {
LABEL_33:
              sub_18A61A878();
              v0 = v30;
              sub_18A623A78();
              if (v28 ^ v29 | v26)
                *v6 = -1 << v27;
              else
                sub_18A623C2C(v27);
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            if (!v6[v15])
            {
              while (1)
              {
                v11 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_40;
                if (v11 >= v9)
                  goto LABEL_33;
                ++v15;
                if (v6[v11])
                  goto LABEL_20;
              }
            }
            v11 = v15;
          }
        }
      }
LABEL_20:
      sub_18A623BAC();
      v8 = v17 & v16;
    }
  }
  sub_18A61A878();
  *v0 = v4;
  sub_18A5F3CFC();
}

void sub_18A6227D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  int64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  sub_18A623AD4();
  sub_18A6238BC();
  sub_18A5F101C(&qword_1EDF6A4C0);
  sub_18A5F385C();
  sub_18A623BA0();
  if (v3)
  {
    v4 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v5 = *(_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v29 = -1 << v7;
    v30 = v0;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v31 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v1 + 56;
    if ((v8 & v5) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v4 << 6); ; i = v20 + (v4 << 6))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      static Hasher._hash(seed:_:)();
      sub_18A623E68();
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * v22)) == 0)
      {
        sub_18A623A8C();
        while (1)
        {
          sub_18A623FE8();
          if (v28)
          {
            if ((v25 & 1) != 0)
              break;
          }
          if (v26 == v27)
            v26 = 0;
          if (*(_QWORD *)(v11 + 8 * v26) != -1)
          {
            sub_18A5F3874();
            goto LABEL_32;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      sub_18A623A40();
LABEL_32:
      *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v24) = v21;
      ++*(_QWORD *)(v1 + 16);
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_40;
      if (v14 >= v10)
        goto LABEL_34;
      ++v4;
      if (!v6[v14])
      {
        v4 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_34;
        if (!v6[v4])
        {
          v4 = v14 + 2;
          if (v14 + 2 >= v10)
            goto LABEL_34;
          if (!v6[v4])
          {
            sub_18A623D20();
            if (v16 == v17)
            {
LABEL_34:
              if (v31 > 63)
                sub_18A6217B0(0, v10, (_QWORD *)(v2 + 56));
              else
                *v6 = v29;
              v0 = v30;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            if (!v6[v15])
            {
              while (1)
              {
                v4 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_41;
                if (v4 >= v10)
                  goto LABEL_34;
                ++v15;
                if (v6[v4])
                  goto LABEL_21;
              }
            }
            v4 = v15;
          }
        }
      }
LABEL_21:
      sub_18A623BAC();
      v9 = v19 & v18;
    }
  }
  sub_18A61A878();
  *v0 = v1;
  sub_18A623AB8();
}

void sub_18A6229CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t *v33;
  _QWORD *v34;

  sub_18A6238BC();
  sub_18A5F101C((uint64_t *)&unk_1EDF69270);
  v2 = sub_18A5F385C();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v33 = v0;
    v34 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v7 = (unint64_t)(v4 + 63) >> 6;
    v8 = v2 + 56;
    sub_18A623E28();
    v9 = 0;
    if (!v6)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    for (i = v10 | (v9 << 6); ; i = v16 + (v9 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      sub_18A623E68();
      if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * v20)) == 0)
      {
        sub_18A623A8C();
        while (1)
        {
          sub_18A623FE8();
          if (v25)
          {
            if ((v22 & 1) != 0)
              break;
          }
          if (v23 == v24)
            v23 = 0;
          if (*(_QWORD *)(v8 + 8 * v23) != -1)
          {
            sub_18A5F3874();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_18A623A40();
LABEL_31:
      sub_18A623FB8();
      *(_QWORD *)(v8 + v26) |= v27;
      v29 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v28);
      *v29 = v18;
      v29[1] = v19;
      sub_18A623D34();
      if (v6)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_39;
      if (v12 >= v7)
        goto LABEL_33;
      ++v9;
      if (!v34[v12])
      {
        v9 = v12 + 1;
        if (v12 + 1 >= v7)
          goto LABEL_33;
        if (!v34[v9])
        {
          v9 = v12 + 2;
          if (v12 + 2 >= v7)
            goto LABEL_33;
          if (!v34[v9])
          {
            v13 = v12 + 3;
            if (v13 >= v7)
            {
LABEL_33:
              sub_18A61A878();
              v0 = v33;
              sub_18A623A78();
              if (v31 ^ v32 | v25)
                *v34 = -1 << v30;
              else
                sub_18A6217B0(0, (unint64_t)(v30 + 63) >> 6, v34);
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            if (!v34[v13])
            {
              while (1)
              {
                v9 = v13 + 1;
                if (__OFADD__(v13, 1))
                  goto LABEL_40;
                if (v9 >= v7)
                  goto LABEL_33;
                ++v13;
                if (v34[v9])
                  goto LABEL_20;
              }
            }
            v9 = v13;
          }
        }
      }
LABEL_20:
      sub_18A623BAC();
      v6 = v15 & v14;
    }
  }
  sub_18A61A878();
  *v0 = v3;
}

void sub_18A622C20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_18A61A92C();
  sub_18A6238BC();
  sub_18A5F101C(&qword_1EDF69348);
  sub_18A5F385C();
  sub_18A623BA0();
  if (v3)
  {
    v4 = 1 << *(_BYTE *)(v2 + 32);
    v5 = (_QWORD *)(v2 + 56);
    v6 = -1;
    if (v4 < 64)
      v6 = ~(-1 << v4);
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    sub_18A623E28();
    v9 = 0;
    if (!v7)
      goto LABEL_6;
LABEL_5:
    sub_18A6239B4();
    while (1)
    {
      sub_18A623354(*(void **)(*(_QWORD *)(v2 + 48) + 16 * v10), *(_BYTE *)(*(_QWORD *)(v2 + 48) + 16 * v10 + 8), v1);
      if (v7)
        goto LABEL_5;
LABEL_6:
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        return;
      }
      if (v9 + 1 >= v8)
        goto LABEL_25;
      sub_18A623EC4();
      if (!v11)
      {
        sub_18A623EB8();
        if (v12 == v13)
          goto LABEL_25;
        if (!v5[v9])
        {
          sub_18A623EA0();
          if (v12 == v13)
            goto LABEL_25;
          if (!v5[v9])
          {
            sub_18A623D20();
            if (v12 == v13)
            {
LABEL_25:
              sub_18A61A878();
              sub_18A623A78();
              if (v12 ^ v13 | v17)
                *v5 = -1 << v16;
              else
                sub_18A6217B0(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v2 + 56));
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            if (!v5[v14])
            {
              while (1)
              {
                v9 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_31;
                if (v9 >= v8)
                  goto LABEL_25;
                sub_18A623EAC();
                if (v15)
                  goto LABEL_22;
              }
            }
            v9 = v14;
          }
        }
      }
LABEL_22:
      sub_18A6239D4();
    }
  }
  sub_18A61A878();
  *v0 = v1;
  sub_18A5F3800();
}

unint64_t sub_18A622D6C(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_15:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            v19 = v2 != v6 || v17 >= v18 + 1;
            v2 = v6;
            if (v19)
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_18A622F00(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            v14 = *(_QWORD *)(v3 + 48);
            v15 = (_OWORD *)(v14 + 16 * v2);
            v16 = (_OWORD *)(v14 + 16 * v6);
            v17 = v2 != v6 || v15 >= v16 + 1;
            v2 = v6;
            if (v17)
            {
              *v15 = *v16;
              v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int sub_18A6230B8()
{
  return sub_18A6230F0();
}

Swift::Int sub_18A6230D4()
{
  return sub_18A6230F0();
}

Swift::Int sub_18A6230F0()
{
  uint64_t *v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A623AD4();
  if (!v2)
  {
    sub_18A623E08();
    return MEMORY[0x1E0DEE9E8];
  }
  v3 = v1;
  sub_18A5F101C(v0);
  v4 = static _SetStorage.convert(_:capacity:)();
  v16 = v4;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    sub_18A61A878();
    return v4;
  }
  sub_18A60B8D0(0, v3);
  while (1)
  {
    swift_dynamicCast();
    v4 = v16;
    if (*(_QWORD *)(v16 + 24) <= *(_QWORD *)(v16 + 16))
    {
      sub_18A6225EC();
      v4 = v16;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
    v6 = v4 + 56;
    v7 = -1 << *(_BYTE *)(v4 + 32);
    v8 = result & ~v7;
    v9 = v8 >> 6;
    if (((-1 << v8) & ~*(_QWORD *)(v4 + 56 + 8 * (v8 >> 6))) == 0)
      break;
    v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v4 + 56 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v10) = v15;
    ++*(_QWORD *)(v4 + 16);
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_16;
  }
  v11 = 0;
  v12 = (unint64_t)(63 - v7) >> 6;
  while (++v9 != v12 || (v11 & 1) == 0)
  {
    v13 = v9 == v12;
    if (v9 == v12)
      v9 = 0;
    v11 |= v13;
    v14 = *(_QWORD *)(v6 + 8 * v9);
    if (v14 != -1)
    {
      v10 = __clz(__rbit64(~v14)) + (v9 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_18A6232CC()
{
  return sub_18A6230F0();
}

void sub_18A6232EC(uint64_t a1, _QWORD *a2)
{
  Swift::Int v4;
  unint64_t v5;

  v4 = NSObject._rawHashValue(seed:)(a2[5]);
  sub_18A623CF0(v4);
  v5 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << v5;
  *(_QWORD *)(a2[6] + 8 * v5) = a1;
  ++a2[2];
  sub_18A5F3824();
}

unint64_t sub_18A623354(void *a1, char a2, uint64_t a3)
{
  id v6;
  Swift::Int v7;
  unint64_t result;
  uint64_t v9;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 & 1);
  v6 = a1;
  NSObject.hash(into:)();

  v7 = Hasher._finalize()();
  sub_18A623CF0(v7);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v9 = *(_QWORD *)(a3 + 48) + 16 * result;
  *(_QWORD *)v9 = a1;
  *(_BYTE *)(v9 + 8) = a2 & 1;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

uint64_t sub_18A623408()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18A62342C()
{
  sub_18A623BE0();
  swift_bridgeObjectRelease();
  sub_18A623E74();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A623460()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_18A623B78();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A623924(v1);
  return sub_18A620A5C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A6234B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6234D8(uint64_t result)
{
  if (result != 1)
    return sub_18A60A578(result);
  return result;
}

uint64_t sub_18A6234EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A623B50(v1);
  return sub_18A620708(v2, v3, v4, v5, v6);
}

uint64_t sub_18A623548()
{
  uint64_t v0;

  sub_18A623BE0();
  swift_bridgeObjectRelease();
  sub_18A623E74();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A623584()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_18A623E50();
  sub_18A623B8C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A5F45E4(v1);
  sub_18A623D08();
  return sub_18A62036C(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18A6235D0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_18A6235F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_18A623E50();
  sub_18A623B8C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A5F45E4(v1);
  sub_18A623D08();
  return sub_18A61DBA4(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18A623648()
{
  sub_18A623BE0();
  sub_18A623FCC();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A623674()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A623B50(v1);
  return sub_18A61D884(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6236D4()
{
  uint64_t v0;

  sub_18A623BE0();
  sub_18A623FCC();
  sub_18A623E74();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A62370C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_18A623E50();
  sub_18A623B8C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A5F45E4(v1);
  sub_18A623D08();
  return sub_18A61D52C(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18A62375C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_18A623B78();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A623924(v1);
  return sub_18A61D1F4(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A6237B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_18A6237C0()
{
  uint64_t v0;

  sub_18A623BE0();
  sub_18A623FCC();
  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6237F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_18A623B78();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A623924(v1);
  return sub_18A61CFCC(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A623874(uint64_t (*a1)(void))
{
  return a1();
}

void sub_18A623880()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t sub_18A6238D4()
{
  return swift_task_switch();
}

uint64_t sub_18A6238E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_BYTE *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_BYTE *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_BYTE *)(v0 + 136);
  v7 = *(_OWORD *)(v0 + 96);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 80);
  *(_BYTE *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 48) = v5;
  *(_BYTE *)(v1 + 56) = v6;
  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_18A623924(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_18A623948()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t sub_18A623984()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A623994()
{
  return static _SetStorage.copy(original:)();
}

uint64_t sub_18A6239A4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_18A6239CC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A6239EC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6239F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A5F1010(a1, 1, 1, a4);
}

void sub_18A623A04(uint64_t a1)
{
  sub_18A6756FC(a1);
}

void sub_18A623A14()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_18A623A24()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
}

uint64_t sub_18A623A54()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

void *sub_18A623A60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

void sub_18A623A6C()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A623AA0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_18A623AA8()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_18A623AB0()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

__n128 sub_18A623AF0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 88);
  result = *(__n128 *)(v0 + 24);
  v3 = *(_OWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v1 + 41) = *(_OWORD *)(v0 + 65);
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(__n128 *)v1 = result;
  return result;
}

void sub_18A623B14()
{
  void *v0;

  sub_18A66BCA0(v0);
}

uint64_t sub_18A623B1C()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_18A623B38(uint64_t result)
{
  return sub_18A60A578(result);
}

void sub_18A623B40()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  sub_18A66BCF8(v0, v2, v1);
}

uint64_t sub_18A623B50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A623B70()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_18A623BBC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A623BC8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A623BD4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A623BE0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_18A623BE8()
{
  return swift_beginAccess();
}

uint64_t sub_18A623BFC()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A623C08()
{
  return swift_release();
}

void sub_18A623C10()
{
  JUMPOUT(0x18D76E914);
}

uint64_t sub_18A623C18(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  return a1(&a10);
}

uint64_t sub_18A623C2C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_18A6217B0(0, (unint64_t)(a1 + 63) >> 6, v1);
}

void sub_18A623C40()
{
  JUMPOUT(0x18D76E914);
}

uint64_t sub_18A623C54()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_18A623C60()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A623C74()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18A623C88()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

id sub_18A623C9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, (SEL)(v1 + 3190), v2, v3);
}

uint64_t sub_18A623CC4()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_18A623CD4()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_18A623CF0(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_18A623D2C@<X0>(uint64_t (*a1)(_QWORD)@<X8>)
{
  return a1(0);
}

void sub_18A623D34()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_18A623D44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A623D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v1;
  *(_QWORD *)(v1 + 24) = a1;
  return swift_continuation_init();
}

void sub_18A623D94()
{
  void *v0;

}

id sub_18A623D9C(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

id sub_18A623DA4()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 1160));
}

id sub_18A623DB4()
{
  Class *v0;

  return objc_allocWithZone(*v0);
}

id sub_18A623DC4(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 3144));
}

uint64_t sub_18A623DD4()
{
  return static NSObject.== infix(_:_:)();
}

NSArray sub_18A623DE4()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_18A623DEC()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_18A623E08()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_18A623E10()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

id sub_18A623E18(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(v2, a2, v4, v3);
}

uint64_t sub_18A623E28()
{
  return swift_retain();
}

uint64_t sub_18A623E30()
{
  uint64_t v0;

  return sub_18A6668F4(v0);
}

uint64_t sub_18A623E38()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  return v1(v0);
}

uint64_t sub_18A623E40()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

void sub_18A623E74()
{
  uint64_t v0;

}

id sub_18A623E7C()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1480));
}

uint64_t sub_18A623E88()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

NSArray sub_18A623E94()
{
  return Array._bridgeToObjectiveC()();
}

void sub_18A623ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v0) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v0);
}

void sub_18A623EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_18A670ABC(v2, a2, v3);
}

uint64_t sub_18A623EF0()
{
  return static NSObject.== infix(_:_:)();
}

void sub_18A623EFC()
{
  JUMPOUT(0x18D76CEB0);
}

id sub_18A623F08()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

void sub_18A623F28()
{
  void *v0;

}

uint64_t sub_18A623F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return *(_QWORD *)(a12 + 16);
}

id sub_18A623F44(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 72));
}

uint64_t sub_18A623F50()
{
  uint64_t v0;

  return v0;
}

void sub_18A623F64()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A623F6C()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18A623F8C(uint64_t result)
{
  return sub_18A60A614(result);
}

uint64_t sub_18A623F94()
{
  uint64_t v0;

  return sub_18A60A614(v0);
}

uint64_t sub_18A623FA0()
{
  return swift_unknownObjectRelease_n();
}

void sub_18A623FAC()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

void sub_18A623FCC()
{
  uint64_t v0;

}

uint64_t sub_18A623FD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void __swiftcall CKDatabaseSubscription.init(subscriptionID:)(CKDatabaseSubscription *__return_ptr retstr, Swift::String subscriptionID)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v4;
  void *v5;

  object = subscriptionID._object;
  countAndFlagsBits = subscriptionID._countAndFlagsBits;
  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithSubscriptionID_, v5);

}

uint64_t CKDatabaseSubscription.recordType.getter()
{
  void *v0;

  return sub_18A624188(v0);
}

void sub_18A62406C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  CKDatabaseSubscription.recordType.setter(v1, v2);
}

void CKDatabaseSubscription.recordType.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    v3 = (id)MEMORY[0x18D76C7CC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v2, sel_setRecordType_, v3);

}

void (*CKDatabaseSubscription.recordType.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = sub_18A624188(v1);
  a1[1] = v3;
  return sub_18A624138;
}

void sub_18A624138(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_18A5F4850();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18A5F4850();
  }
}

uint64_t sub_18A624188(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_recordType);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18A6241E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CKDatabaseSubscription.recordType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

CKSyncEngineEvent __swiftcall CKSyncEngine.Event.eventObject()()
{
  CKSyncEngineEvent result;

  __asm { BR              X10 }
  return result;
}

#error "18A6242C4: call analysis failed (funcsize=30)"

uint64_t CKSyncEngine.Event.StateUpdate.stateSerialization.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_18A612FA0(v2, v3);
}

id CKSyncEngine.Event.AccountChange.changeType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  unsigned __int8 v4;

  v2 = *(void **)v1;
  v3 = *(void **)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_18A627C68(v2, v3, v4);
}

void CKSyncEngine.Event.AccountChange.ChangeType.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  id v7;
  char v8;
  id v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  v4 = objc_msgSend(a1, sel_currentUser);
  v5 = sub_18A5F3D50((uint64_t)v4, sel_previousUser);
  v6 = sub_18A5F3D50((uint64_t)v5, sel_changeType);
  if (v6 == (id)2)
  {
    if (v4 && v5)
    {
      v9 = v4;
      v8 = 2;
      v4 = v5;
LABEL_12:

      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v9;
      *(_BYTE *)(a2 + 16) = v8;
      return;
    }
    sub_18A6291F8();
    _StringGuts.grow(_:)(67);
    sub_18A629324();
    v14._countAndFlagsBits = v10 + 26;
    v14._object = (void *)0x800000018A83E910;
    sub_18A5F43CC(v14);
    sub_18A5F101C(&qword_1EDF6B3E0);
    v15._countAndFlagsBits = sub_18A629304();
    sub_18A5F43CC(v15);
    sub_18A5F460C();
    v11._countAndFlagsBits = 0x756F697665727020;
    v11._object = (void *)0xEA00000000003D73;
    String.append(_:)(v11);
    v16._countAndFlagsBits = sub_18A629304();
    sub_18A5F43CC(v16);
    sub_18A5F37E0();
  }
  else if (v6 == (id)1)
  {
    if (v5)
    {
      v7 = v5;
      v8 = 1;
      v5 = v4;
      v4 = v7;
LABEL_11:

      v9 = 0;
      goto LABEL_12;
    }
  }
  else if (v6)
  {
    sub_18A6291F8();
    _StringGuts.grow(_:)(41);
    sub_18A629324();
    v17._countAndFlagsBits = v12 + 12;
    v17._object = (void *)0x800000018A83E8E0;
    sub_18A5F43CC(v17);
    sub_18A5F3D50(v13, sel_changeType);
    type metadata accessor for CKSyncEngineAccountChangeType(0);
    _print_unlocked<A, B>(_:_:)();
  }
  else if (v4)
  {
    v8 = 0;
    goto LABEL_11;
  }
  sub_18A62929C();
  __break(1u);
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.failedZoneDeletes.getter()
{
  return swift_bridgeObjectRetain();
}

id CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.error.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

void CKSyncEngine.Event.DidFetchRecordZoneChanges.error.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 8);
  sub_18A5F379C();
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO16WillFetchChangesV7contextAC0gH7ContextVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  id v10;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v5 = *(void **)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  v10 = v5;
  sub_18A5F3FAC();
  return swift_bridgeObjectRetain();
}

id _s8CloudKit12CKSyncEngineC5EventO15WillSendChangesV7contextAC0gH7ContextVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  id v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v5 = *(id *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  return v5;
}

void CKSyncEngineEvent.event.getter(uint64_t a1@<X8>)
{
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  char v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __n128 v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  id v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  id v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  id v167;
  unint64_t v168;
  unint64_t v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  Swift::String v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  id v207;
  id v208;
  id v209;
  uint64_t v210;
  void *v211;
  __n128 v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  unsigned __int8 v217;
  __int128 v218;

  v4 = v1;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v6 = sub_18A628FE0();
    v7 = sub_18A5F3888((uint64_t)v6, sel_stateSerialization);
    v8 = objc_msgSend(v7, sel_data);

    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = a1;
    v12 = v11;

    *(_QWORD *)v10 = v9;
    *(_QWORD *)(v10 + 8) = v12;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_BYTE *)(v10 + 64) = 0;
    return;
  }
  objc_opt_self();
  if (sub_18A5F3E74())
  {
    sub_18A628FE0();
    CKSyncEngine.Event.AccountChange.ChangeType.init(_:)((void *)v1, (uint64_t)&v216);
    v13 = v217;
    *(_OWORD *)a1 = v216;
    *(_QWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_QWORD *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 64) = 16;
    return;
  }
  objc_opt_self();
  v14 = sub_18A5F3E74();
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = &selRef_checkAccountID;
  v210 = a1;
  if (!v14)
  {
    objc_opt_self();
    if (!sub_18A5F3E74())
    {
      objc_opt_self();
      v46 = sub_18A5F3E74();
      if (!v46)
      {
        objc_opt_self();
        v63 = sub_18A5F3E74();
        if (!v63)
        {
          objc_opt_self();
          if (sub_18A5F3E74())
          {
            v78 = sub_18A628FE0();
            v79 = sub_18A5F3888((uint64_t)v78, sel_context);
            sub_18A629340((uint64_t)v79, v80, v81, v82, v83, v84, v85, v86, v200, v203, (uint64_t)v206);

            sub_18A628FF8();
            v88 = v218;
            *(_QWORD *)a1 = v89;
            *(_QWORD *)(a1 + 8) = v90;
            *(_QWORD *)(a1 + 16) = v91;
            *(_OWORD *)(a1 + 24) = v88;
            *(_QWORD *)(a1 + 40) = v92;
            *(_QWORD *)(a1 + 48) = v93;
            *(_QWORD *)(a1 + 56) = v94;
            *(_BYTE *)(a1 + 64) = v87 | 0x60;
            return;
          }
          objc_opt_self();
          v95 = (void *)sub_18A5F3E74();
          if (v95)
          {
            *(_QWORD *)a1 = objc_msgSend(v95, sel_zoneID);
            *(_OWORD *)(a1 + 8) = 0u;
            *(_OWORD *)(a1 + 24) = 0u;
            *(_OWORD *)(a1 + 40) = 0u;
            *(_QWORD *)(a1 + 56) = 0;
            v96 = 112;
          }
          else
          {
            objc_opt_self();
            if (!sub_18A5F3E74())
            {
              objc_opt_self();
              if (sub_18A5F3E74())
              {
                v100 = sub_18A628FE0();
                v101 = sub_18A5F3888((uint64_t)v100, sel_context);
                sub_18A629340((uint64_t)v101, v102, v103, v104, v105, v106, v107, v108, v200, v203, (uint64_t)v206);

                sub_18A628FF8();
                v110 = v218;
                *(_QWORD *)a1 = v111;
                *(_QWORD *)(a1 + 8) = v112;
                *(_QWORD *)(a1 + 16) = v113;
                *(_OWORD *)(a1 + 24) = v110;
                *(_QWORD *)(a1 + 40) = v114;
                *(_QWORD *)(a1 + 48) = v115;
                *(_QWORD *)(a1 + 56) = v116;
                *(_BYTE *)(a1 + 64) = v109 | 0x90;
                return;
              }
              objc_opt_self();
              if (sub_18A5F3E74())
              {
                v118 = sub_18A628FE0();
                v119 = sub_18A5F3888((uint64_t)v118, sel_context);
                sub_18A62934C((uint64_t)v119, v120, v121, v122, v123, v124, v125, v126, v200, v203, (uint64_t)v206);

                sub_18A628E84(v127, v128, v129, v130, v131, v132, v133, v134, v201, v204, (uint64_t)v207, (uint64_t)v209, a1, (uint64_t)v211, v212.n128_i64[0], v212.n128_i64[1], v214, v215, v216,
                  *((uint64_t *)&v216 + 1),
                  v217,
                  v218);
                v136 = -96;
LABEL_94:
                *(_BYTE *)(v135 + 64) = v136;
                return;
              }
              goto LABEL_92;
            }
            v97 = sub_18A629360();
            v98 = sub_18A628E2C((uint64_t)v97, sel_error);
            if (v98)
            {
              v98 = (id)related decl 'e' for CKErrorCode.init(_:)(v98);
              v99 = v98;
            }
            else
            {
              v99 = 0;
            }
            v117 = sub_18A628E2C((uint64_t)v98, sel_zoneID);

            *(_QWORD *)a1 = v117;
            *(_QWORD *)(a1 + 8) = v99;
            *(_OWORD *)(a1 + 16) = 0u;
            *(_OWORD *)(a1 + 32) = 0u;
            *(_OWORD *)(a1 + 48) = 0u;
            v96 = 0x80;
          }
          *(_BYTE *)(a1 + 64) = v96;
          return;
        }
        v26 = v63;
        v2 = (id)v1;
        v64 = sub_18A5F3CA8((uint64_t)v2, sel_failedRecordSaves);
        sub_18A5F3DF8((uint64_t)v64, (unint64_t *)&unk_1EDF69FF0);
        sub_18A5F3C9C();
        sub_18A6292B4();
        if (!(v1 >> 62))
        {
          v65 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v65)
          {
LABEL_133:
            v77 = sub_18A5F3944();
            goto LABEL_134;
          }
LABEL_60:
          sub_18A629128();
          sub_18A60FF9C();
          if (v65 < 0)
          {
            __break(1u);
            goto LABEL_137;
          }
          do
          {
            if ((v4 & 0xC000000000000001) != 0)
              sub_18A6290C0();
            v66 = sub_18A5F3D34(v4);
            CKSyncEngineFailedRecordSave.failedRecordSaveStruct()(&v216);

            v76 = sub_18A629208(v67, v68, v69, v70, v71, v72, v73, v74, v200, v203, (uint64_t)v206, (uint64_t)v209, v210, (uint64_t)v211, v212.n128_i64[0], v212.n128_i64[1], v214, v215, v216);
            if (v60)
            {
              sub_18A6290A4(v75);
              sub_18A60FF9C();
              v76 = v212;
            }
            sub_18A6291B0(v76);
          }
          while (!v61);
          v77 = sub_18A5F3944();
LABEL_134:
          v184 = sub_18A5F3CA8(v77, sel_failedRecordDeletes);
          sub_18A6291E8();
          sub_18A5F101C(&qword_1EDF6A9D8);
          sub_18A629290((unint64_t *)&qword_1EDF6A400);
          sub_18A629068();

          sub_18A6292A8(v185, &qword_1EDF6A008);
          v186 = sub_18A5F3A8C();
          v187 = sub_18A5F3CA8(v186, sel_savedRecords);
          sub_18A5F3DF8((uint64_t)v187, &qword_1EDF6A338);
          sub_18A62923C();

          v189 = sub_18A5F3CA8(v188, sel_deletedRecordIDs);
          sub_18A629260();

          sub_18A629158(v190, v191, v192, v193, v194, v195, v196, v197, v200, v203, (uint64_t)v206, (uint64_t)v209, v210);
          v44 = 80;
          goto LABEL_135;
        }
LABEL_132:
        sub_18A5F40AC();
        v65 = sub_18A623AB0();
        sub_18A5F3944();
        if (!v65)
          goto LABEL_133;
        goto LABEL_60;
      }
      v26 = v46;
      v2 = (id)v1;
      v47 = sub_18A5F3CA8((uint64_t)v2, sel_failedZoneSaves);
      sub_18A5F3DF8((uint64_t)v47, &qword_1EDF694F8);
      sub_18A5F3C9C();
      sub_18A6292B4();
      if (!(v1 >> 62))
      {
        v48 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v48)
        {
LABEL_129:
          v62 = sub_18A5F3944();
LABEL_130:
          v170 = sub_18A5F3CA8(v62, sel_failedZoneDeletes);
          sub_18A6291E8();
          sub_18A5F101C(&qword_1EDF6A9D8);
          sub_18A629290((unint64_t *)&qword_1ECD967B8);
          sub_18A629068();

          sub_18A6292A8(v171, &qword_1EDF69500);
          v172 = sub_18A5F3A8C();
          v173 = sub_18A5F3CA8(v172, sel_savedZones);
          sub_18A5F3DF8((uint64_t)v173, &qword_1EDF6A910);
          sub_18A62923C();

          v175 = sub_18A5F3CA8(v174, sel_deletedZoneIDs);
          sub_18A629260();

          sub_18A629158(v176, v177, v178, v179, v180, v181, v182, v183, v200, v203, (uint64_t)v206, (uint64_t)v209, v210);
          v44 = 64;
          goto LABEL_135;
        }
        goto LABEL_49;
      }
LABEL_128:
      sub_18A5F40AC();
      v48 = sub_18A623AB0();
      sub_18A5F3944();
      if (!v48)
        goto LABEL_129;
LABEL_49:
      sub_18A629128();
      sub_18A60FFB8();
      if ((v48 & 0x8000000000000000) == 0)
      {
        do
        {
          if ((v4 & 0xC000000000000001) != 0)
            sub_18A6290C0();
          v49 = sub_18A5F3D34(v4);
          CKSyncEngineFailedZoneSave.failedZoneSaveStruct()(&v216);

          v59 = sub_18A629208(v50, v51, v52, v53, v54, v55, v56, v57, v200, v203, (uint64_t)v206, (uint64_t)v209, v210, (uint64_t)v211, v212.n128_i64[0], v212.n128_i64[1], v214, v215, v216);
          if (v60)
          {
            sub_18A6290A4(v58);
            sub_18A60FFB8();
            v59 = v212;
          }
          sub_18A6291B0(v59);
        }
        while (!v61);
        v62 = sub_18A5F3944();
        goto LABEL_130;
      }
      __break(1u);
      goto LABEL_132;
    }
    v209 = sub_18A629360();
    v25 = sub_18A628E2C((uint64_t)v209, sel_modifications);
    sub_18A5F3DF8((uint64_t)v25, &qword_1EDF6A338);
    v26 = sub_18A5F3C9C();

    if (v26 >> 62)
    {
      sub_18A6239CC();
      v27 = sub_18A623AB0();
      sub_18A5F3FE4();
      if (v27)
        goto LABEL_20;
    }
    else
    {
      v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v27)
      {
LABEL_20:
        *(_QWORD *)&v216 = v15;
        sub_18A628E34();
        sub_18A61000C();
        if (v27 < 0)
        {
          __break(1u);
          goto LABEL_126;
        }
        v28 = 0;
        v29 = v216;
        do
        {
          if ((v26 & 0xC000000000000001) != 0)
            sub_18A6292E0();
          v30 = sub_18A5F3D34(v26 + 8 * v28);
          *(_QWORD *)&v216 = v29;
          v3 = *(_QWORD *)(v29 + 16);
          v31 = *(_QWORD *)(v29 + 24);
          v4 = v3 + 1;
          if (v3 >= v31 >> 1)
          {
            sub_18A628E14(v31);
            sub_18A61000C();
            v29 = v216;
          }
          ++v28;
          *(_QWORD *)(v29 + 16) = v4;
          *(_QWORD *)(v29 + 8 * v3 + 32) = v30;
        }
        while (v27 != v28);
        v45 = sub_18A5F3FE4();
        v16 = &selRef_checkAccountID;
LABEL_97:
        v154 = sub_18A628E2C(v45, v16[368]);
        sub_18A5F3DF8((uint64_t)v154, (unint64_t *)&unk_1EDF6A160);
        sub_18A5F3C9C();
        sub_18A6292B4();
        if (v4 >> 62)
        {
          sub_18A5F40AC();
          v26 = sub_18A623AB0();
          sub_18A5F3944();
        }
        else
        {
          v26 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v155 = MEMORY[0x1E0DEE9D8];
        v206 = v2;
        if (!v26)
        {
          sub_18A5F3944();
          v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_109:
          v162 = objc_msgSend(v206, sel_zoneAttributesModifications);
          sub_18A5F3DF8((uint64_t)v162, &qword_1EDF6A910);
          v163 = sub_18A5F3C9C();

          if (v163 >> 62)
          {
            sub_18A629140();
            v26 = sub_18A623AB0();
            sub_18A610384();
          }
          else
          {
            v26 = *(_QWORD *)((v163 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if (!v26)
          {
            sub_18A610384();

            v165 = MEMORY[0x1E0DEE9D8];
LABEL_122:
            v43 = v210;
            *(_QWORD *)v210 = v29;
            *(_QWORD *)(v210 + 8) = v2;
            *(_QWORD *)(v210 + 16) = v165;
            *(_OWORD *)(v210 + 24) = 0u;
            *(_OWORD *)(v210 + 40) = 0u;
            *(_QWORD *)(v210 + 56) = 0;
            v44 = 48;
            goto LABEL_135;
          }
          *(_QWORD *)&v216 = MEMORY[0x1E0DEE9D8];
          sub_18A628E34();
          sub_18A60FFD4();
          if ((v26 & 0x8000000000000000) == 0)
          {
            v164 = 0;
            v165 = v216;
            do
            {
              if ((v163 & 0xC000000000000001) != 0)
                v166 = (id)MEMORY[0x18D76CEB0](v164, v163);
              else
                v166 = sub_18A5F3D34(v163 + 8 * v164);
              v167 = v166;
              *(_QWORD *)&v216 = v165;
              v169 = *(_QWORD *)(v165 + 16);
              v168 = *(_QWORD *)(v165 + 24);
              if (v169 >= v168 >> 1)
              {
                sub_18A628E14(v168);
                sub_18A60FFD4();
                v165 = v216;
              }
              ++v164;
              *(_QWORD *)(v165 + 16) = v169 + 1;
              *(_QWORD *)(v165 + 8 * v169 + 32) = v167;
            }
            while (v26 != v164);
            sub_18A610384();

            goto LABEL_122;
          }
          goto LABEL_127;
        }
        *(_QWORD *)&v216 = MEMORY[0x1E0DEE9D8];
        sub_18A628E34();
        sub_18A60FFF0();
        if ((v26 & 0x8000000000000000) == 0)
        {
          v156 = 0;
          v2 = (_QWORD *)v216;
          v211 = (void *)(v4 & 0xC000000000000001);
          v212.n128_u64[0] = v4;
          do
          {
            if (v211)
              sub_18A6290C0();
            v157 = objc_msgSend(sub_18A5F3D34(v4 + 8 * v156), sel_recordID);
            v158 = sub_18A5F3888((uint64_t)v157, sel_recordType);
            sub_18A6291A8();
            sub_18A629284();

            *(_QWORD *)&v216 = v2;
            v160 = v2[2];
            v159 = v2[3];
            if (v160 >= v159 >> 1)
            {
              sub_18A628E14(v159);
              sub_18A60FFF0();
              v2 = (_QWORD *)v216;
            }
            ++v156;
            v2[2] = v160 + 1;
            v161 = &v2[3 * v160];
            v161[4] = v157;
            v161[5] = v3;
            v161[6] = v155;
            v4 = v212.n128_u64[0];
          }
          while (v26 != v156);
          sub_18A5F3944();
          goto LABEL_109;
        }
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
    }
    v45 = sub_18A5F3FE4();
    v29 = MEMORY[0x1E0DEE9D8];
    goto LABEL_97;
  }
  v4 = (unint64_t)sub_18A629360();
  v1 = (unint64_t)sub_18A628E2C(v4, sel_modifications);
  sub_18A5F3DF8(v1, &qword_1EDF6A910);
  v17 = sub_18A5F3C9C();

  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v1 = v17;
    else
      v1 = v17 & 0xFFFFFFFFFFFFFF8;
    sub_18A6239CC();
    v18 = sub_18A623AB0();
    sub_18A5F3FE4();
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v211 = (void *)v4;
  if (!v18)
  {
    v24 = sub_18A5F3FE4();
    v20 = MEMORY[0x1E0DEE9D8];
LABEL_29:
    v1 = (unint64_t)sub_18A628E2C(v24, sel_deletions);
    sub_18A5F3DF8(v1, &qword_1EDF6A1D0);
    v32 = sub_18A5F3C9C();

    if ((unint64_t)v32 >> 62)
    {
      if (v32 < 0)
        v1 = v32;
      else
        v1 = v32 & 0xFFFFFFFFFFFFFF8;
      sub_18A5F3FAC();
      v4 = sub_18A623AB0();
      sub_18A5F37E0();
    }
    else
    {
      v4 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v4)
    {
      sub_18A5F37E0();

      v34 = MEMORY[0x1E0DEE9D8];
LABEL_45:
      v43 = v210;
      *(_QWORD *)v210 = v20;
      *(_QWORD *)(v210 + 8) = v34;
      *(_OWORD *)(v210 + 16) = 0u;
      *(_OWORD *)(v210 + 32) = 0u;
      *(_OWORD *)(v210 + 48) = 0u;
      v44 = 32;
LABEL_135:
      *(_BYTE *)(v43 + 64) = v44;
      return;
    }
    *(_QWORD *)&v216 = MEMORY[0x1E0DEE9D8];
    sub_18A628E34();
    sub_18A610028();
    if ((v4 & 0x8000000000000000) == 0)
    {
      v33 = 0;
      v34 = v216;
      v213 = v32 & 0xC000000000000001;
      v35 = v32;
      do
      {
        if (v213)
          v36 = (id)MEMORY[0x18D76CEB0](v33, v32);
        else
          v36 = sub_18A5F3D34(v32 + 8 * v33);
        v37 = v36;
        v38 = objc_msgSend(v36, sel_reason);
        if (v38 == (id)1)
          v39 = 1;
        else
          v39 = 2 * (v38 == (id)2);
        v40 = sub_18A5F3888((uint64_t)v38, sel_zoneID);

        *(_QWORD *)&v216 = v34;
        v41 = *(_QWORD *)(v34 + 16);
        if (v41 >= *(_QWORD *)(v34 + 24) >> 1)
        {
          sub_18A610028();
          v34 = v216;
        }
        ++v33;
        *(_QWORD *)(v34 + 16) = v41 + 1;
        v42 = v34 + 16 * v41;
        *(_QWORD *)(v42 + 32) = v40;
        *(_BYTE *)(v42 + 40) = v39;
        v32 = v35;
      }
      while (v4 != v33);
      sub_18A5F37E0();

      goto LABEL_45;
    }
    goto LABEL_91;
  }
  *(_QWORD *)&v216 = v15;
  sub_18A628E34();
  sub_18A610044();
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = 0;
    v20 = v216;
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        sub_18A6292E0();
      v21 = sub_18A5F3D34(v17 + 8 * v19);
      v22 = objc_msgSend(v21, sel_zoneID);

      *(_QWORD *)&v216 = v20;
      v23 = *(_QWORD *)(v20 + 16);
      if (v23 >= *(_QWORD *)(v20 + 24) >> 1)
      {
        sub_18A610044();
        v20 = v216;
      }
      ++v19;
      *(_QWORD *)(v20 + 16) = v23 + 1;
      *(_QWORD *)(v20 + 8 * v23 + 32) = v22;
    }
    while (v18 != v19);
    v24 = sub_18A5F3FE4();
    goto LABEL_29;
  }
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  objc_opt_self();
  if (sub_18A5F3E74())
  {
    v137 = sub_18A628FE0();
    v138 = sub_18A5F3888((uint64_t)v137, sel_context);
    sub_18A62934C((uint64_t)v138, v139, v140, v141, v142, v143, v144, v145, v200, v203, (uint64_t)v206);

    sub_18A628E84(v146, v147, v148, v149, v150, v151, v152, v153, v202, v205, (uint64_t)v208, (uint64_t)v209, v210, (uint64_t)v211, v212.n128_i64[0], v212.n128_i64[1], v214, v215, v216,
      *((uint64_t *)&v216 + 1),
      v217,
      v218);
    v136 = -80;
    goto LABEL_94;
  }
LABEL_137:
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v198 = objc_msgSend((id)v4, sel_description);
  sub_18A610418();
  sub_18A6292D4();
  v199._countAndFlagsBits = v4;
  v199._object = v2;
  String.append(_:)(v199);
  sub_18A5F460C();
  sub_18A62929C();
  __break(1u);
}

id sub_18A625B7C(uint64_t a1, unint64_t a2)
{
  id v4;
  Class isa;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v4, sel_initWithData_, isa);
  sub_18A60FBA4(a1, a2);

  return v6;
}

id sub_18A625BF0(void *a1, void *a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPreviousUser_currentUser_, a1, a2);

  return v4;
}

void CKSyncEngine.Event.description.getter()
{
  __asm { BR              X10 }
}

#error "18A625D28: call analysis failed (funcsize=43)"

void CKSyncEngine.Event.AccountChange.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  Swift::String v11;
  id v12;
  Swift::String v13;
  uint64_t v14;
  id v15;

  v1 = *(void **)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) != 1)
    {
      v9 = sub_18A6290D4();
      v10 = v1;
      _StringGuts.grow(_:)(51);
      sub_18A5F41EC(60);
      v11._countAndFlagsBits = 0x43746E756F636341;
      v11._object = (void *)0xED000065676E6168;
      String.append(_:)(v11);
      sub_18A629038(29, 0x800000018A83EA80);
      v12 = objc_msgSend(v9, sel_description);
      sub_18A61044C();
      sub_18A628D94();
      sub_18A5F3B34();
      sub_18A5F3FE4();
      v13._countAndFlagsBits = 0x6E6572727563203ELL;
      v13._object = (void *)0xEE003D7265735574;
      String.append(_:)(v13);
      v15 = sub_18A5F3D50(v14, sel_description);
      sub_18A61044C();
      sub_18A628D94();
      sub_18A5F3B34();
      sub_18A5F3FE4();
      sub_18A5F485C();

      goto LABEL_7;
    }
    sub_18A6290D4();
    _StringGuts.grow(_:)(28);
    sub_18A628F58();
    sub_18A628DA0();
    v3 = sub_18A628E2C(v2, sel_description);
    sub_18A61044C();
    sub_18A628D94();
    sub_18A5F3B34();
    sub_18A5F3FE4();
    sub_18A5F485C();
    v4 = (void *)sub_18A629170();
    v6 = 1;
  }
  else
  {
    sub_18A6290D4();
    sub_18A629310();
    sub_18A628F58();
    sub_18A628DA0();
    v8 = sub_18A628E2C(v7, sel_description);
    sub_18A61044C();
    sub_18A628D94();
    sub_18A5F3B34();
    sub_18A5F3FE4();
    sub_18A5F485C();
    v4 = (void *)sub_18A629170();
    v6 = 0;
  }
  sub_18A6270DC(v4, v5, v6);
LABEL_7:
  sub_18A628DF8();
}

uint64_t CKSyncEngine.Event.StateUpdate.description.getter()
{
  sub_18A629310();
  sub_18A5F41EC(60);
  sub_18A628E44();
  sub_18A629038(20, 0x800000018A83E130);
  _print_unlocked<A, B>(_:_:)();
  sub_18A5F485C();
  return 0;
}

void CKSyncEngine.Event.FetchedDatabaseChanges.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;

  sub_18A628FE8();
  _StringGuts.grow(_:)(34);
  sub_18A628F58();
  sub_18A628DA0();
  v0 = sub_18A5F40AC();
  v2._countAndFlagsBits = MEMORY[0x18D76CA0C](v0, &type metadata for CKDatabase.DatabaseChange.Modification);
  sub_18A628E0C(v2);
  sub_18A5F3944();
  sub_18A5F460C();
  sub_18A628E64();
  v1 = sub_18A5F3FAC();
  v3._countAndFlagsBits = MEMORY[0x18D76CA0C](v1, &type metadata for CKDatabase.DatabaseChange.Deletion);
  sub_18A628E0C(v3);
  sub_18A5F37E0();
  sub_18A5F3944();
  sub_18A5F485C();
  sub_18A60A0E0();
}

unint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_18A5F3D48();
    sub_18A60FC4C();
    v4 = 0;
    v3 = v16;
    do
    {
      v5 = sub_18A5F3D34(v1 + 8 * v4);
      v6 = objc_msgSend(v5, sel_conciseDescription);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;

      v10 = *(_QWORD *)(v16 + 16);
      if (v10 >= *(_QWORD *)(v16 + 24) >> 1)
        sub_18A60FC4C();
      ++v4;
      *(_QWORD *)(v16 + 16) = v10 + 1;
      v11 = v16 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
    }
    while (v2 != v4);
    sub_18A5F460C();
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = MEMORY[0x18D76CA0C](v3, MEMORY[0x1E0DEA968]);
  String.append(_:)(v12);
  sub_18A5F3944();
  sub_18A5F460C();
  sub_18A628E64();
  v13 = sub_18A5F3FAC();
  v14._countAndFlagsBits = MEMORY[0x18D76CA0C](v13, &type metadata for CKDatabase.RecordZoneChange.Deletion);
  String.append(_:)(v14);
  sub_18A5F37E0();
  sub_18A5F3944();
  sub_18A5F485C();
  return 0xD000000000000028;
}

void CKSyncEngine.Event.SentDatabaseChanges.description.getter()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  sub_18A628FE8();
  _StringGuts.grow(_:)(76);
  sub_18A5F41EC(60);
  sub_18A629038(19, 0x800000018A83A120);
  v0._countAndFlagsBits = 0x6F5A646576617320;
  v0._object = (void *)0xEC0000003D73656ELL;
  String.append(_:)(v0);
  v2 = sub_18A5F3DF8(v1, &qword_1EDF6A910);
  v3 = sub_18A6239CC();
  v7._countAndFlagsBits = MEMORY[0x18D76CA0C](v3, v2);
  sub_18A628E0C(v7);
  sub_18A5F3FE4();
  sub_18A5F3A8C();
  v8._countAndFlagsBits = 0xD000000000000011;
  v8._object = (void *)0x800000018A83EB60;
  sub_18A628E0C(v8);
  v4 = sub_18A5F3D48();
  v9._countAndFlagsBits = MEMORY[0x18D76CA0C](v4, &type metadata for CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave);
  sub_18A628E0C(v9);
  sub_18A5F460C();
  sub_18A5F3FE4();
  v10._countAndFlagsBits = 0xD000000000000010;
  v10._object = (void *)0x800000018A83EB80;
  sub_18A628E0C(v10);
  v5 = sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
  v6 = sub_18A5F40AC();
  v11._countAndFlagsBits = MEMORY[0x18D76CA0C](v6, v5);
  sub_18A628E0C(v11);
  sub_18A5F3944();
  swift_bridgeObjectRelease();
  sub_18A629038(19, 0x800000018A83EBA0);
  type metadata accessor for CKError(0);
  sub_18A627CA0((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  sub_18A5F3FAC();
  v12._countAndFlagsBits = Dictionary.description.getter();
  sub_18A628E0C(v12);
  sub_18A5F37E0();
  sub_18A5F3944();
  sub_18A5F485C();
  sub_18A628F40();
}

void CKSyncEngine.Event.SentRecordZoneChanges.description.getter()
{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0)
      v0 = (void *)*v1;
    else
      v0 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
    sub_18A6291A0();
    v5 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6291A0();
  }
  if (!v5)
  {
    sub_18A5F3A8C();
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    sub_18A6291F8();
    _StringGuts.grow(_:)(84);
    sub_18A5F41EC(60);
    sub_18A629038(21, 0x800000018A83A140);
    v12._countAndFlagsBits = 0x6552646576617320;
    v12._object = (void *)0xEE003D7364726F63;
    String.append(_:)(v12);
    v17._countAndFlagsBits = MEMORY[0x18D76CA0C](v7, MEMORY[0x1E0DEA968]);
    sub_18A5F43CC(v17);
    sub_18A5F3FE4();
    sub_18A5F37E0();
    v18._countAndFlagsBits = 0xD000000000000013;
    v18._object = (void *)0x800000018A83EBC0;
    sub_18A5F43CC(v18);
    v13 = sub_18A5F3D48();
    v19._countAndFlagsBits = MEMORY[0x18D76CA0C](v13, &type metadata for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave);
    sub_18A5F43CC(v19);
    sub_18A5F460C();
    sub_18A5F37E0();
    v20._countAndFlagsBits = 0xD000000000000012;
    v20._object = (void *)0x800000018A83EBE0;
    sub_18A5F43CC(v20);
    v14 = sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6A8F0);
    v15 = sub_18A5F40AC();
    v21._countAndFlagsBits = MEMORY[0x18D76CA0C](v15, v14);
    sub_18A5F43CC(v21);
    sub_18A5F3944();
    sub_18A5F3A8C();
    sub_18A629038(21, 0x800000018A83EC00);
    type metadata accessor for CKError(0);
    sub_18A627CA0((unint64_t *)&qword_1EDF6A400, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A629140();
    v22._countAndFlagsBits = Dictionary.description.getter();
    sub_18A5F43CC(v22);
    sub_18A610384();
    sub_18A5F37E0();
    sub_18A5F485C();
    return;
  }
  v16 = MEMORY[0x1E0DEE9D8];
  sub_18A60FC4C();
  if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    v7 = v16;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x18D76CEB0](v6, v4);
      else
        v8 = sub_18A5F3D34(v4 + 8 * v6);
      v9 = objc_msgSend(v8, sel_conciseDescription);
      sub_18A610418();
      sub_18A629284();

      v10 = *(_QWORD *)(v16 + 16);
      v0 = (void *)(v10 + 1);
      if (v10 >= *(_QWORD *)(v16 + 24) >> 1)
        sub_18A60FC4C();
      ++v6;
      *(_QWORD *)(v16 + 16) = v0;
      v11 = v16 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v2;
      *(_QWORD *)(v11 + 40) = v3;
    }
    while (v5 != v6);
    sub_18A5F3A8C();
    goto LABEL_14;
  }
  __break(1u);
}

unint64_t CKSyncEngine.Event.WillFetchChanges.description.getter()
{
  return sub_18A629120(26);
}

void CKSyncEngine.Event.WillFetchRecordZoneChanges.description.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = objc_msgSend(v1, sel_description, 0xD000000000000023, 0x800000018A83EA30);
  sub_18A61044C();
  sub_18A6292C8();
  sub_18A628EC8();

  sub_18A5F460C();
  sub_18A5F485C();
  sub_18A60A0E0();
}

void CKSyncEngine.Event.DidFetchRecordZoneChanges.description.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;

  v4 = *(void **)v1;
  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    v5 = v3;
    v6 = objc_msgSend((id)sub_18A629358(), sel_description, 0x3D726F72726520, 0xE700000000000000);
    sub_18A6291A8();
    sub_18A628D94();

    sub_18A5F3B34();
    sub_18A5F3FE4();
  }
  _StringGuts.grow(_:)(16);
  sub_18A628F58();
  sub_18A628DA0();
  v7 = v4;
  v8 = objc_msgSend(v7, sel_description, 0, 0xE000000000000000);
  v9 = sub_18A61044C();
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);

  sub_18A5F3A8C();
  v13._countAndFlagsBits = sub_18A629170();
  String.append(_:)(v13);
  sub_18A5F37E0();
  sub_18A5F485C();
  sub_18A628F40();
}

unint64_t CKSyncEngine.Event.DidFetchChanges.description.getter()
{
  return sub_18A629120(25);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_18A626ABC()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;

  v1 = *(void **)(v0 + 24);
  sub_18A5F3FAC();
  v2 = v1;
  sub_18A5F40AC();
  sub_18A5F3D48();
  v3._countAndFlagsBits = CKSyncEngine.FetchChangesContext.description.getter();
  String.append(_:)(v3);
  sub_18A5F460C();
  sub_18A5F3944();

  sub_18A5F37E0();
  sub_18A5F3A8C();
  sub_18A5F485C();
}

unint64_t CKSyncEngine.Event.WillSendChanges.description.getter()
{
  return sub_18A629118(25);
}

unint64_t CKSyncEngine.Event.DidSendChanges.description.getter()
{
  return sub_18A629118(24);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_18A626BA4()
{
  uint64_t v0;
  id v1;
  void *v2;
  Swift::String v3;

  v2 = *(void **)(v0 + 24);
  sub_18A5F3FAC();
  v1 = v2;
  v3._countAndFlagsBits = CKSyncEngine.SendChangesContext.description.getter();
  sub_18A5F43CC(v3);

  sub_18A5F37E0();
  sub_18A5F460C();
  sub_18A5F485C();
}

uint64_t static CKSyncEngine.Event.AccountChange.ChangeType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  int v4;
  id v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char v19;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(id *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      sub_18A5F3DF8(a1, &qword_1EDF6A970);
      sub_18A627C68(v5, v6, 0);
      v11 = (void *)sub_18A629254();
      sub_18A627C68(v11, v12, 0);
      v10 = sub_18A629248();
      LOBYTE(v4) = 0;
      LOBYTE(v7) = 0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      sub_18A5F3DF8(a1, &qword_1EDF6A970);
      LOBYTE(v4) = 1;
      sub_18A627C68(v5, v6, 1u);
      v8 = (void *)sub_18A629254();
      sub_18A627C68(v8, v9, 1u);
      v10 = sub_18A629248();
      LOBYTE(v7) = 1;
      goto LABEL_13;
    }
LABEL_10:
    sub_18A627C68(*(id *)a2, *(void **)(a2 + 8), v7);
    sub_18A627C68(v2, v3, v4);
    v10 = 0;
    goto LABEL_13;
  }
  if (v7 != 2)
    goto LABEL_10;
  sub_18A5F3DF8(a1, &qword_1EDF6A970);
  sub_18A627C68(v5, v6, 2u);
  v13 = (void *)sub_18A629254();
  sub_18A627C68(v13, v14, 2u);
  v15 = v2;
  v16 = v5;
  v17 = v3;
  v18 = v6;
  v19 = static NSObject.== infix(_:_:)();

  if ((v19 & 1) != 0)
  {
    v10 = static NSObject.== infix(_:_:)();

  }
  else
  {

    v10 = 0;
  }
  LOBYTE(v4) = 2;
  LOBYTE(v7) = 2;
LABEL_13:
  sub_18A6270DC(v2, v3, v4);
  sub_18A6270DC(v5, v6, v7);
  return v10 & 1;
}

void CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.description.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = *(void **)v0;
  v3 = *(void **)(v0 + 8);
  sub_18A628FE8();
  _StringGuts.grow(_:)(21);
  sub_18A628F58();
  sub_18A628DA0();
  v4 = v2;
  v5 = objc_msgSend(v4, sel_description);
  sub_18A61044C();
  sub_18A6292C8();
  sub_18A628EC8();

  sub_18A5F460C();
  sub_18A628EAC();
  v6 = v3;
  v7 = objc_msgSend((id)sub_18A629358(), sel_description);
  sub_18A6291A8();
  sub_18A628D94();

  sub_18A5F3B34();
  sub_18A5F3FE4();
  sub_18A5F485C();
  sub_18A628DF8();
}

void CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.description.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  v2 = *(void **)v0;
  v3 = *(void **)(v0 + 8);
  sub_18A628FE8();
  _StringGuts.grow(_:)(23);
  sub_18A628F58();
  sub_18A628F80();
  sub_18A628DA0();
  v5 = sub_18A5F3D50(v4, sel_conciseDescription);
  sub_18A610418();
  sub_18A6292D4();
  sub_18A628EC8();
  sub_18A5F460C();
  sub_18A628EAC();
  v6 = v3;
  v7 = objc_msgSend((id)sub_18A629358(), sel_description);
  sub_18A6291A8();
  sub_18A628D94();

  sub_18A5F3B34();
  sub_18A5F3FE4();
  sub_18A5F485C();
  sub_18A628DF8();
}

void sub_18A626FB4(void *a1, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  switch(a9 >> 4)
  {
    case 0:
      sub_18A60FBA4((uint64_t)a1, (unint64_t)a2);
      return;
    case 1:
      sub_18A6270DC(a1, a2, a3);
      return;
    case 2:
      goto LABEL_7;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4:
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6:
    case 9:

      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 7:
      goto LABEL_11;
    case 8:

      a1 = a2;
LABEL_11:

      break;
    case 0xA:
    case 0xB:

LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void sub_18A6270DC(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2)
      return;

    a1 = a2;
  }

}

id sub_18A627114()
{
  void *v0;
  Class isa;
  Class v2;
  id v3;

  sub_18A60B8D0(0, &qword_1EDF6A910);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, &qword_1EDF6A1D0);
  v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_initWithModifications_deletions_, isa, v2);

  return v3;
}

id sub_18A6271C4(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;

  v5 = (void *)MEMORY[0x18D76C7CC](a2, a3);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_initWithRecordID_recordType_, a1, v5);

  return v6;
}

id sub_18A62722C()
{
  void *v0;
  Class isa;
  Class v2;
  Class v3;
  id v4;

  sub_18A60B8D0(0, &qword_1EDF6A338);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6A160);
  v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, &qword_1EDF6A910);
  v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v0, sel_initWithModifications_deletions_zoneAttributesModifications_, isa, v2, v3);

  return v4;
}

id sub_18A627320()
{
  void *v0;
  Class isa;
  Class v2;
  Class v3;
  Class v4;
  id v5;

  sub_18A60B8D0(0, &qword_1EDF6A910);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, &qword_1EDF694F8);
  v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
  v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A5F101C(&qword_1EDF6A9D8);
  sub_18A627CA0((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v0, sel_initWithSavedZones_failedZoneSaves_deletedZoneIDs_failedZoneDeletes_, isa, v2, v3, v4);

  return v5;
}

id sub_18A627480(void *a1, void *a2, SEL *a3)
{
  void *v3;
  void *v7;
  id v8;

  v7 = (void *)_convertErrorToNSError(_:)();
  v8 = objc_msgSend(v3, *a3, a1, v7);

  return v8;
}

id sub_18A6274EC()
{
  void *v0;
  Class isa;
  Class v2;
  Class v3;
  Class v4;
  id v5;

  sub_18A60B8D0(0, &qword_1EDF6A338);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF69FF0);
  v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6A8F0);
  v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18A5F101C(&qword_1EDF6A9D8);
  sub_18A627CA0((unint64_t *)&qword_1EDF6A400, (unint64_t *)&unk_1EDF6A8F0);
  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v0, sel_initWithSavedRecords_failedRecordSaves_deletedRecordIDs_failedRecordDeletes_, isa, v2, v3, v4);

  return v5;
}

id sub_18A62764C(void *a1, void *a2)
{
  void *v2;
  void *v5;
  id v6;

  if (a2)
  {
    v5 = (void *)_convertErrorToNSError(_:)();

  }
  else
  {
    v5 = 0;
  }
  v6 = objc_msgSend(v2, sel_initWithZoneID_error_, a1, v5);

  return v6;
}

uint64_t sub_18A6276BC(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  sub_18A5F101C(&qword_1EDF6A008);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v21 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    v17 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    result = related decl 'e' for CKErrorCode.init(_:)(v16);
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v17;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v20;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v21 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v21 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v21 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v21 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v21 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_18A627888(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  id v21;

  sub_18A5F101C(&qword_1EDF69500);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v3 = result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = (char *)(result + 8);
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    *(_QWORD *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v16;
    *(_QWORD *)(v3[7] + 8 * i) = v17;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v20;
    v21 = v16;
    result = v17;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_18A627A30(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  sub_18A5F101C(a2);
  result = static _DictionaryStorage.copy(original:)();
  v4 = (_QWORD *)result;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 64;
  if ((v8 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    v19 = v17;
    result = related decl 'e' for CKErrorCode.init(_:)(v17);
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v4[6] + 8 * i) = v18;
    *(_QWORD *)(v4[7] + 8 * i) = result;
    v20 = v4[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v4[2] = v22;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_24;
    if (v14 >= v10)
      return (uint64_t)v4;
    v15 = *(_QWORD *)(v23 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        return (uint64_t)v4;
      v15 = *(_QWORD *)(v23 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          return (uint64_t)v4;
        v15 = *(_QWORD *)(v23 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
    return (uint64_t)v4;
  v15 = *(_QWORD *)(v23 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      return (uint64_t)v4;
    v15 = *(_QWORD *)(v23 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_18A627C00(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  sub_18A612E64(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = (id)MEMORY[0x18D76CEB0](a2, a3);
  else
    v7 = sub_18A5F3D34(a3 + 8 * a2);
  *a1 = v7;
  sub_18A5F3824();
}

void _s14DatabaseChangeO8DeletionVwxx(id *a1)
{

}

id sub_18A627C68(id result, void *a2, unsigned __int8 a3)
{
  id v3;

  if (a3 >= 2u)
  {
    if (a3 != 2)
      return result;
    v3 = result;
    result = a2;
  }
  return result;
}

void sub_18A627CA0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_18A60B8D0(255, a2);
    atomic_store(MEMORY[0x18D76E7C4](MEMORY[0x1E0DEFCF8], v3), a1);
  }
  sub_18A5F379C();
}

id sub_18A627CDC(id result, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  id v9;
  id v10;
  id v12;

  switch(a9 >> 4)
  {
    case 0:
      return (id)sub_18A612FA0((uint64_t)result, (unint64_t)a2);
    case 1:
      return sub_18A627C68(result, a2, a3);
    case 2:
      swift_bridgeObjectRetain();
      return (id)swift_bridgeObjectRetain();
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return (id)swift_bridgeObjectRetain();
    case 4:
    case 5:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return (id)swift_bridgeObjectRetain();
    case 6:
    case 9:
      swift_bridgeObjectRetain();
      v9 = a4;
      swift_bridgeObjectRetain();
      return (id)swift_bridgeObjectRetain();
    case 7:
      goto LABEL_12;
    case 8:
      v12 = result;
      v10 = a2;
      goto LABEL_11;
    case 0xA:
    case 0xB:
      v12 = a4;
      swift_bridgeObjectRetain();
LABEL_11:
      result = v12;
LABEL_12:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void _s5EventOwxx(uint64_t a1)
{
  sub_18A626FB4(*(void **)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t _s5EventOwcp(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_18A627CDC(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t _s5EventOwca(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_18A627CDC(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(void **)a1;
  v13 = *(void **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(void **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_18A626FB4(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

void *_s19FetchChangesContextVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t _s5EventOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_18A626FB4(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s5EventOwet(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 48) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double _s5EventOwst(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = 2 * -a2;
      *(_QWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 64) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_18A6280B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64) >> 4;
}

uint64_t sub_18A6280C0(uint64_t result)
{
  *(_BYTE *)(result + 64) &= 0xFu;
  return result;
}

uint64_t sub_18A6280D0(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 64) & 1 | (16 * a2);
  *(_QWORD *)(result + 48) &= 1uLL;
  *(_BYTE *)(result + 64) = v2;
  return result;
}

void type metadata accessor for CKSyncEngine.Event()
{
  sub_18A5F3994();
}

uint64_t *_s5StateC13SerializationVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_18A612FA0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s5StateC13SerializationVwxx(uint64_t a1)
{
  return sub_18A60FBA4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s5StateC13SerializationVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_18A612FA0(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_18A60FBA4(v5, v6);
  return a1;
}

__n128 _s5StateC13SerializationVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *_s5StateC13SerializationVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_18A60FBA4(v3, v4);
  return a1;
}

uint64_t _s5StateC13SerializationVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t _s5StateC13SerializationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.StateUpdate()
{
  sub_18A5F3994();
}

__n128 _s5EventO13AccountChangeV10ChangeTypeOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void type metadata accessor for CKSyncEngine.Event.AccountChange()
{
  sub_18A5F3994();
}

void _s5EventO13AccountChangeV10ChangeTypeOwxx(uint64_t a1)
{
  sub_18A6270DC(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void _s5EventO13AccountChangeV10ChangeTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_18A628F24(a1, a2);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  *(_BYTE *)(v2 + 16) = v5;
  sub_18A5F3824();
}

void _s5EventO13AccountChangeV10ChangeTypeOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;

  sub_18A628F24(a1, a2);
  v6 = *(void **)v2;
  v7 = *(void **)(v2 + 8);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  v8 = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v2 + 16) = v5;
  sub_18A6270DC(v6, v7, v8);
  sub_18A5F3824();
}

void _s5EventO13AccountChangeV10ChangeTypeOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_18A6270DC(v4, v5, v6);
  sub_18A5F379C();
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwet_0(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_18A6283D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_18A6283DC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType()
{
  sub_18A5F3994();
}

uint64_t _s5EventO22FetchedDatabaseChangesVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s5EventO22FetchedDatabaseChangesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  sub_18A629220(a1, a2);
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F379C();
}

_QWORD *_s5EventO22FetchedDatabaseChangesVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s5EventO22FetchedDatabaseChangesVwta(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges()
{
  sub_18A5F3994();
}

uint64_t _s5EventO24FetchedRecordZoneChangesVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s5EventO24FetchedRecordZoneChangesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_18A629220(a1, a2);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F40AC();
  sub_18A5F3824();
}

_QWORD *_s5EventO24FetchedRecordZoneChangesVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5EventO24FetchedRecordZoneChangesVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges()
{
  sub_18A5F3994();
}

__n128 _s5EventO19SentDatabaseChangesVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges()
{
  sub_18A5F3994();
}

_QWORD *_s5EventO19SentDatabaseChangesV14FailedZoneSaveVwCP(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void _s5EventO19SentDatabaseChangesV14FailedZoneSaveVwxx(id *a1)
{

}

uint64_t _s5EventO19SentDatabaseChangesV14FailedZoneSaveVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t _s5EventO19SentDatabaseChangesV14FailedZoneSaveVwta(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

void type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave()
{
  sub_18A5F3994();
}

uint64_t _s5EventO19SentDatabaseChangesVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_18A5F3FF4();
}

void _s5EventO19SentDatabaseChangesVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A629220(a1, a2);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v2 + 24) = v4;
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F40AC();
  sub_18A5F3D48();
  sub_18A5F3824();
}

void _s5EventO19SentDatabaseChangesVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  sub_18A5F3944();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_18A5F3944();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_18A5F3944();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  sub_18A5F37E0();
  sub_18A5F3824();
}

void _s5EventO19SentDatabaseChangesVwta_0(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  sub_18A5F379C();
}

uint64_t _s5EventO19SentDatabaseChangesVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return sub_18A629198(-1);
  if (a2 < 0 && *((_BYTE *)a1 + 32))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_18A629198(v2);
}

uint64_t sub_18A6288B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      return sub_18A6292F8(result);
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return (uint64_t)sub_18A62926C((_QWORD *)result, a2);
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      return (uint64_t)sub_18A62926C((_QWORD *)result, a2);
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges()
{
  sub_18A5F3994();
}

void type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave()
{
  sub_18A5F3994();
}

void type metadata accessor for CKSyncEngine.Event.WillFetchChanges()
{
  sub_18A5F3994();
}

void type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges()
{
  sub_18A5F3994();
}

uint64_t _s5EventO25DidFetchRecordZoneChangesVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t _s5EventO22FetchedDatabaseChangesVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return sub_18A629198(-1);
  if (a2 < 0 && *((_BYTE *)a1 + 16))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_18A629198(v2);
}

_QWORD *sub_18A6289B8(_QWORD *result, int a2, int a3)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
    if (a3 < 0)
      *((_BYTE *)result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_18A62926C(result, a2);
    }
    *((_BYTE *)result + 16) = 0;
    if (a2)
      return sub_18A62926C(result, a2);
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges()
{
  sub_18A5F3994();
}

uint64_t _s5EventO16WillFetchChangesVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return sub_18A5F3FF4();
}

void _s5EventO16WillFetchChangesVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  sub_18A629040(a1, a2);
  v5 = *(void **)(v3 + 24);
  v4 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v2 + 24) = v5;
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v3 + 40);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v3 + 48);
  *(_BYTE *)(v2 + 64) = *(_BYTE *)(v3 + 64);
  swift_bridgeObjectRetain();
  v6 = v5;
  sub_18A5F3898();
  sub_18A5F40AC();
  sub_18A5F3824();
}

void _s5EventO16WillFetchChangesVwca_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;

  sub_18A5F40F8(a1, a2);
  sub_18A5F3944();
  v4 = (void *)v2[3];
  v5 = (void *)v3[3];
  v3[3] = v4;
  v6 = v4;

  v3[4] = v2[4];
  swift_bridgeObjectRetain();
  sub_18A5F3944();
  v3[5] = v2[5];
  swift_bridgeObjectRetain();
  sub_18A5F3944();
  sub_18A628F60();
  sub_18A5F3824();
}

void _s5EventO16WillFetchChangesVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_18A5F42DC(a1, a2);

  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v2 + 40);
  swift_bridgeObjectRelease();
  sub_18A628F60();
  sub_18A5F379C();
}

uint64_t _s5EventO16WillFetchChangesVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return sub_18A629198(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_18A629198(v2);
}

uint64_t sub_18A628B5C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_18A629278(result, a2);
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      return sub_18A629278(result, a2);
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.DidFetchChanges()
{
  sub_18A5F3994();
}

void type metadata accessor for CKSyncEngine.Event.WillSendChanges()
{
  sub_18A5F3994();
}

void _s18SendChangesContextVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

void _s5EventO15WillSendChangesVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  sub_18A629040(a1, a2);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v2 + 24) = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  sub_18A5F379C();
}

void _s5EventO15WillSendChangesVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  sub_18A5F40F8(a1, a2);
  sub_18A5F3944();
  v4 = *(void **)(v2 + 24);
  v5 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v4;
  v6 = v4;

  sub_18A5F3824();
}

void _s5EventO15WillSendChangesVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  sub_18A5F42DC(a1, a2);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);

  sub_18A5F379C();
}

uint64_t _s5EventO15WillSendChangesVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return sub_18A629198(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_18A629198(v2);
}

uint64_t sub_18A628CC8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      return sub_18A6292F8(result);
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_18A629278(result, a2);
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      return sub_18A629278(result, a2);
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.DidSendChanges()
{
  sub_18A5F3994();
}

void sub_18A628D44(void *a1, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_18A626FB4(a1, a2, a3, a4, v12, v11, v10, v9, a9);
}

uint64_t sub_18A628D58()
{
  return swift_bridgeObjectRetain_n();
}

void sub_18A628D94()
{
  void *v0;

}

uint64_t _s8CloudKit12CKSyncEngineC5EventO22FetchedDatabaseChangesV9deletionsSaySo10CKDatabaseCAAE0G6ChangeO8DeletionVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO22FetchedDatabaseChangesV13modificationsSaySo10CKDatabaseCAAE0G6ChangeO12ModificationVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A628DC0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A628DE4()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

void sub_18A628E0C(Swift::String a1)
{
  String.append(_:)(a1);
}

BOOL sub_18A628E14@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

id sub_18A628E2C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_18A628E34()
{
  return 0;
}

void sub_18A628E44()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6470556574617453;
  v0._object = (void *)0xEB00000000657461;
  String.append(_:)(v0);
}

void sub_18A628E64()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6F6974656C656420;
  v0._object = (void *)0xEB000000003D736ELL;
  String.append(_:)(v0);
}

double sub_18A628E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,unsigned __int8 a21,uint64_t a22)
{
  double result;

  *(_QWORD *)a13 = a19;
  *(_QWORD *)(a13 + 8) = a20;
  *(_QWORD *)(a13 + 16) = a21;
  *(_QWORD *)(a13 + 24) = a22;
  result = 0.0;
  *(_OWORD *)(a13 + 32) = 0u;
  *(_OWORD *)(a13 + 48) = 0u;
  return result;
}

void sub_18A628EAC()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x3D726F72726520;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
}

void sub_18A628EC8()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_18A628ED8()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_18A628EE0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_18A628EE8()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_18A628EF4()
{
  uint64_t v0;

  return v0;
}

id sub_18A628F18(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v3, v2);
}

id sub_18A628F24(uint64_t a1, uint64_t a2)
{
  return sub_18A627C68(*(id *)a2, *(void **)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_18A628F58()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A628F60()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = *(_BYTE *)(v0 + 48);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(v0 + 56);
  *(_BYTE *)(v1 + 64) = *(_BYTE *)(v0 + 64);
  return v1;
}

uint64_t sub_18A628F8C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A628FA0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A628FC0()
{
  uint64_t v0;

  return v0;
}

id sub_18A628FE0()
{
  void *v0;

  return v0;
}

uint64_t sub_18A629018()
{
  uint64_t v0;

  return v0;
}

void sub_18A629038(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_18A629040(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  result = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO24FetchedRecordZoneChangesV27zoneAttributesModificationsSaySo10CKDatabaseCAAE0gH6ChangeO0hK12ModificationVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A629068()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A62907C()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18A629090()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

BOOL sub_18A6290A4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_18A6290C0()
{
  JUMPOUT(0x18D76CEB0);
}

void sub_18A6290CC()
{
  void *v0;

}

id sub_18A6290D4()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6290FC()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_18A629118(uint64_t a1)
{
  unint64_t result;

  result = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  sub_18A626BA4();
  return result;
}

unint64_t sub_18A629120(uint64_t a1)
{
  unint64_t result;

  result = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  sub_18A626ABC();
  return result;
}

uint64_t sub_18A629128()
{
  return 0;
}

uint64_t sub_18A629140()
{
  return swift_bridgeObjectRetain();
}

id sub_18A629148(void *a1)
{
  SEL *v1;
  void *v2;

  return sub_18A627480(v2, a1, v1);
}

double sub_18A629158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  *(_QWORD *)a13 = v16;
  *(_QWORD *)(a13 + 8) = v13;
  *(_QWORD *)(a13 + 16) = v14;
  *(_QWORD *)(a13 + 24) = v15;
  result = 0.0;
  *(_OWORD *)(a13 + 32) = 0u;
  *(_OWORD *)(a13 + 48) = 0u;
  return result;
}

uint64_t sub_18A629170()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A629198@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_18A6291A0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A6291A8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_18A6291B0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v2;
  *(__n128 *)(v1 + 16 * v3 + 32) = a1;
}

uint64_t sub_18A6291C8()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_18A6291D8()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18A6291E8()
{
  unint64_t *v0;

  return sub_18A60B8D0(0, v0);
}

__n128 sub_18A629208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19)
{
  return (__n128)a19;
}

uint64_t sub_18A629220(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return result;
}

uint64_t sub_18A629230()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18A62923C()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A629248()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18A629254()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A629260()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

_QWORD *sub_18A62926C(_QWORD *result, int a2)
{
  *result = (a2 - 1);
  return result;
}

uint64_t sub_18A629278(uint64_t result, int a2)
{
  *(_QWORD *)(result + 24) = (a2 - 1);
  return result;
}

void sub_18A629284()
{
  void *v0;

}

void sub_18A629290(unint64_t *a1)
{
  unint64_t *v1;

  sub_18A627CA0(a1, v1);
}

uint64_t sub_18A62929C()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18A6292A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_18A627A30(v2, a2);
}

void sub_18A6292B4()
{
  void *v0;

}

uint64_t sub_18A6292BC()
{
  return swift_release();
}

void sub_18A6292C8()
{
  void *v0;

}

void sub_18A6292D4()
{
  void *v0;

}

void sub_18A6292E0()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A6292EC()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_18A6292F8(uint64_t result)
{
  *(_BYTE *)(result + 32) = 1;
  return result;
}

uint64_t sub_18A629304()
{
  return String.init<A>(describing:)();
}

void sub_18A629310()
{
  _StringGuts.grow(_:)(26);
}

uint64_t sub_18A629318()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A612FA0(v1, v0);
}

id sub_18A629338(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

void sub_18A629340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  CKSyncEngineFetchChangesContext.contextStruct()(a1, (uint64_t)va);
}

void sub_18A62934C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  CKSyncEngineSendChangesContext.contextStruct()(a1, (uint64_t)va);
}

uint64_t sub_18A629358()
{
  return _convertErrorToNSError(_:)();
}

id sub_18A629360()
{
  void *v0;

  return v0;
}

void (*CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.getter())(void *a1, uint64_t a2, char a3)
{
  void *v0;
  void (*result)(void *, uint64_t, char);
  void (*v2)(void *, uint64_t, char);
  uint64_t v3;
  uint64_t v4;

  result = (void (*)(void *, uint64_t, char))objc_msgSend(v0, sel_fetchWebAuthTokenCompletionBlock);
  if (result)
  {
    v2 = result;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A629664;
    *(_QWORD *)(v4 + 24) = v3;
    return sub_18A6296E4;
  }
  return result;
}

uint64_t sub_18A6293E8@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  result = (uint64_t)CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.getter();
  if (result)
  {
    v4 = result;
    v5 = v3;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 24) = v5;
    v6 = sub_18A6299B0;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18A62944C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A629954;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  return CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  _QWORD v9[6];

  v3 = v2;
  if (!a1)
    return objc_msgSend(v2, sel_setFetchWebAuthTokenCompletionBlock_, 0);
  v6 = sub_18A5F37B4();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_18A629820;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_18A629828;
  v9[3] = &unk_1E1F59D20;
  v7 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_setFetchWebAuthTokenCompletionBlock_, v7);
  _Block_release(v7);
  return (id)sub_18A60A578(a1);
}

void sub_18A6295C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;

  if (!a2)
  {
    v6 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v6 = (void *)MEMORY[0x18D76C7CC]();
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)();
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v6);

}

uint64_t sub_18A629640()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A629664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A6295C8(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A62966C(id a1, uint64_t a2, char a3, void (*a4)(id, uint64_t, id))
{
  id v7;

  if ((a3 & 1) != 0)
  {
    v7 = a1;
    a4(0, 0, a1);
    sub_18A6299DC(a1, a2, 1);
  }
  else
  {
    a4(a1, a2, 0);
  }
}

void sub_18A6296E4(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_18A62966C(a1, a2, a3 & 1, *(void (**)(id, uint64_t, id))(v3 + 16));
}

void sub_18A6296F0(void *a1, uint64_t a2, void *a3, void (*a4)(void *, uint64_t, uint64_t))
{
  id v8;
  id v9;
  void *v10;

  if (a3)
  {
    swift_getErrorValue();
    v8 = a3;
    if (!Error.ckIsPartialError.getter())
    {
      v9 = a3;
      a4(a3, 0, 1);

      return;
    }

  }
  if (a2)
  {
    a4(a1, a2, 0);
  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    a4(v10, 0, 1);

  }
}

void sub_18A629820(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_18A6296F0(a1, a2, a3, *(void (**)(void *, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_18A629828(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, uint64_t, void *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  swift_retain();
  v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6298A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A6298B8()
{
  return swift_release();
}

id (*CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.modify(void (**a1)(void *a1, uint64_t a2, char a3)))(uint64_t *a1, char a2)
{
  void (*v1)(void *, uint64_t, char);
  void (*v3)(void *, uint64_t, char);

  a1[2] = v1;
  *a1 = CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.getter();
  a1[1] = v3;
  return sub_18A6298F4;
}

id sub_18A6298F4(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) == 0)
    return sub_18A5F4868();
  sub_18A60A614(*a1);
  sub_18A5F4868();
  return (id)sub_18A60A578(v2);
}

uint64_t sub_18A629954(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_18A62998C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6299B0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void sub_18A6299DC(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void __swiftcall CKRecordZoneSubscription.init(zoneID:subscriptionID:)(CKRecordZoneSubscription *__return_ptr retstr, CKRecordZoneID *zoneID, Swift::String subscriptionID)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v6;
  void *v7;

  object = subscriptionID._object;
  countAndFlagsBits = subscriptionID._countAndFlagsBits;
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_initWithZoneID_subscriptionID_, zoneID, v7);

}

uint64_t CKRecordZoneSubscription.recordType.getter()
{
  void *v0;

  return sub_18A624188(v0);
}

void sub_18A629A7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  CKRecordZoneSubscription.recordType.setter(v1, v2);
}

void CKRecordZoneSubscription.recordType.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    v3 = (id)MEMORY[0x18D76C7CC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v2, sel_setRecordType_, v3);

}

void (*CKRecordZoneSubscription.recordType.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = sub_18A624188(v1);
  a1[1] = v3;
  return sub_18A629B48;
}

void sub_18A629B48(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_18A5F4874();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18A5F4874();
  }
}

uint64_t sub_18A629B98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CKRecordZoneSubscription.recordType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CKNotificationInfo.alertLocalizationArgs.getter()
{
  void *v0;

  return sub_18A62A200(v0, (SEL *)&selRef_alertLocalizationArgs);
}

void sub_18A629BE4()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.alertLocalizationArgs.setter(v0);
}

void CKNotificationInfo.alertLocalizationArgs.setter(uint64_t a1)
{
  sub_18A629E28(a1, (SEL *)&selRef_setAlertLocalizationArgs_);
}

void CKNotificationInfo.alertLocalizationArgs.modify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_18A62A2E0(a1);
  *v1 = sub_18A5F3E80(v2, (SEL *)&selRef_alertLocalizationArgs);
  sub_18A5F379C();
}

uint64_t sub_18A629C4C(uint64_t *a1, char a2)
{
  return sub_18A629CEC(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.alertLocalizationArgs.setter);
}

uint64_t CKNotificationInfo.titleLocalizationArgs.getter()
{
  void *v0;

  return sub_18A62A200(v0, (SEL *)&selRef_titleLocalizationArgs);
}

void sub_18A629C78()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.titleLocalizationArgs.setter(v0);
}

void CKNotificationInfo.titleLocalizationArgs.setter(uint64_t a1)
{
  sub_18A629E28(a1, (SEL *)&selRef_setTitleLocalizationArgs_);
}

void CKNotificationInfo.titleLocalizationArgs.modify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_18A62A2E0(a1);
  *v1 = sub_18A5F3E80(v2, (SEL *)&selRef_titleLocalizationArgs);
  sub_18A5F379C();
}

uint64_t sub_18A629CE0(uint64_t *a1, char a2)
{
  return sub_18A629CEC(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.titleLocalizationArgs.setter);
}

uint64_t sub_18A629CEC(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_bridgeObjectRetain();
  a3(v4);
  return swift_bridgeObjectRelease();
}

uint64_t CKNotificationInfo.subtitleLocalizationArgs.getter()
{
  void *v0;

  return sub_18A62A200(v0, (SEL *)&selRef_subtitleLocalizationArgs);
}

void sub_18A629D60()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.subtitleLocalizationArgs.setter(v0);
}

void CKNotificationInfo.subtitleLocalizationArgs.setter(uint64_t a1)
{
  sub_18A629E28(a1, (SEL *)&selRef_setSubtitleLocalizationArgs_);
}

void CKNotificationInfo.subtitleLocalizationArgs.modify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_18A62A2E0(a1);
  *v1 = sub_18A5F3E80(v2, (SEL *)&selRef_subtitleLocalizationArgs);
  sub_18A5F379C();
}

uint64_t sub_18A629DC8(uint64_t *a1, char a2)
{
  return sub_18A629CEC(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.subtitleLocalizationArgs.setter);
}

uint64_t CKNotificationInfo.desiredKeys.getter()
{
  void *v0;

  return sub_18A62A200(v0, (SEL *)&selRef_desiredKeys);
}

void sub_18A629DF4()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.desiredKeys.setter(v0);
}

void CKNotificationInfo.desiredKeys.setter(uint64_t a1)
{
  sub_18A629E28(a1, (SEL *)&selRef_setDesiredKeys_);
}

void sub_18A629E28(uint64_t a1, SEL *a2)
{
  void *v2;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_18A5F3944();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v2, *a2, isa);

}

void CKNotificationInfo.desiredKeys.modify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_18A62A2E0(a1);
  *v1 = sub_18A5F3E80(v2, (SEL *)&selRef_desiredKeys);
  sub_18A5F379C();
}

uint64_t sub_18A629EC0(uint64_t *a1, char a2)
{
  return sub_18A629CEC(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.desiredKeys.setter);
}

void __swiftcall CKNotificationInfo.init(alertBody:alertLocalizationKey:alertLocalizationArgs:title:titleLocalizationKey:titleLocalizationArgs:subtitle:subtitleLocalizationKey:subtitleLocalizationArgs:alertActionLocalizationKey:alertLaunchImage:soundName:desiredKeys:shouldBadge:shouldSendContentAvailable:shouldSendMutableContent:category:collapseIDKey:)(CKNotificationInfo *__return_ptr retstr, Swift::String_optional alertBody, Swift::String_optional alertLocalizationKey, Swift::OpaquePointer alertLocalizationArgs, Swift::String_optional title, Swift::String_optional titleLocalizationKey, Swift::OpaquePointer titleLocalizationArgs, Swift::String_optional subtitle, Swift::String_optional subtitleLocalizationKey, Swift::OpaquePointer subtitleLocalizationArgs, Swift::String_optional alertActionLocalizationKey, Swift::String_optional alertLaunchImage, Swift::String_optional soundName, Swift::OpaquePointer desiredKeys, Swift::Bool shouldBadge, Swift::Bool shouldSendContentAvailable, Swift::Bool shouldSendMutableContent, Swift::String_optional category, Swift::String_optional collapseIDKey)
{
  uint64_t countAndFlagsBits;
  void *object;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;

  countAndFlagsBits = titleLocalizationKey.value._countAndFlagsBits;
  object = title.value._object;
  v22 = alertLocalizationKey.value._object;
  v23 = alertLocalizationKey.value._countAndFlagsBits;
  v24 = alertBody.value._object;
  v25 = alertBody.value._countAndFlagsBits;
  v26 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v27 = v26;
  if (v24)
  {
    v28 = (void *)MEMORY[0x18D76C7CC](v25, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  objc_msgSend(v26, sel_setAlertBody_, v28);

  if (v22)
  {
    v29 = (void *)MEMORY[0x18D76C7CC](v23, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = 0;
  }
  objc_msgSend(v26, sel_setAlertLocalizationKey_, v29);

  CKNotificationInfo.alertLocalizationArgs.setter((uint64_t)alertLocalizationArgs._rawValue);
  if (object)
    sub_18A5F41C0();
  sub_18A5F4880(v30, sel_setTitle_);

  if (titleLocalizationKey.value._object)
  {
    v32 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, titleLocalizationKey.value._object);
    v31 = swift_bridgeObjectRelease();
  }
  else
  {
    v32 = 0;
  }
  sub_18A5F4880(v31, sel_setTitleLocalizationKey_);

  CKNotificationInfo.titleLocalizationArgs.setter((uint64_t)titleLocalizationArgs._rawValue);
  if (subtitle.value._object)
  {
    v34 = (void *)MEMORY[0x18D76C7CC](subtitle.value._countAndFlagsBits, subtitle.value._object);
    v33 = swift_bridgeObjectRelease();
  }
  else
  {
    v34 = 0;
  }
  sub_18A5F4880(v33, sel_setSubtitle_);

  if (subtitleLocalizationKey.value._object)
    sub_18A5F41C0();
  sub_18A5F4880(v35, sel_setSubtitleLocalizationKey_);

  CKNotificationInfo.subtitleLocalizationArgs.setter((uint64_t)subtitleLocalizationArgs._rawValue);
  if (alertActionLocalizationKey.value._object)
  {
    v37 = (void *)MEMORY[0x18D76C7CC](alertActionLocalizationKey.value._countAndFlagsBits, alertActionLocalizationKey.value._object);
    v36 = swift_bridgeObjectRelease();
  }
  else
  {
    v37 = 0;
  }
  sub_18A5F38A0(v36, sel_setAlertActionLocalizationKey_);

  if (alertLaunchImage.value._object)
    sub_18A5F41C0();
  sub_18A5F399C(v38, sel_setAlertLaunchImage_);

  if (soundName.value._object)
  {
    v40 = (void *)MEMORY[0x18D76C7CC](soundName.value._countAndFlagsBits, soundName.value._object);
    v39 = swift_bridgeObjectRelease();
  }
  else
  {
    v40 = 0;
  }
  sub_18A5F399C(v39, sel_setSoundName_);

  CKNotificationInfo.desiredKeys.setter((uint64_t)desiredKeys._rawValue);
  v42 = sub_18A5F3888(v41, sel_setShouldBadge_);
  v43 = sub_18A5F3888((uint64_t)v42, sel_setShouldSendContentAvailable_);
  sub_18A5F3888((uint64_t)v43, sel_setShouldSendMutableContent_);
  if (category.value._object)
  {
    v44 = (void *)MEMORY[0x18D76C7CC](category.value._countAndFlagsBits, category.value._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = 0;
  }
  objc_msgSend(v26, sel_setCategory_, v44);

  if (collapseIDKey.value._object)
    sub_18A5F41C0();
  sub_18A5F38A0(v45, sel_setCollapseIDKey_);

}

uint64_t sub_18A62A200(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_18A62A250()
{
  uint64_t *v0;

  sub_18A5F3FFC();
  *v0 = CKNotificationInfo.alertLocalizationArgs.getter();
  sub_18A5F379C();
}

void sub_18A62A274()
{
  uint64_t *v0;

  sub_18A5F3FFC();
  *v0 = CKNotificationInfo.titleLocalizationArgs.getter();
  sub_18A5F379C();
}

void sub_18A62A298()
{
  uint64_t *v0;

  sub_18A5F3FFC();
  *v0 = CKNotificationInfo.subtitleLocalizationArgs.getter();
  sub_18A5F379C();
}

void sub_18A62A2BC()
{
  uint64_t *v0;

  sub_18A5F3FFC();
  *v0 = CKNotificationInfo.desiredKeys.getter();
  sub_18A5F379C();
}

uint64_t sub_18A62A2E0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 8) = v1;
  return result;
}

_QWORD *sub_18A62A2EC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[5];
  uint64_t v46[5];
  _QWORD v47[2];
  unsigned __int8 v48;
  unint64_t v49;
  unsigned __int8 v50;
  _QWORD v51[2];
  unsigned __int8 v52;
  unint64_t v53;
  unsigned __int8 v54;
  _QWORD v55[2];
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;

  sub_18A6376F0(v45);
  sub_18A6378F4(v46, a1, a2, a3);
  v7 = sub_18A63791C(v45, v46, a1, a2, a3);
  sub_18A62F96C((uint64_t)v46);
  sub_18A62F96C((uint64_t)v45);
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return (_QWORD *)v8;
  v59 = MEMORY[0x1E0DEE9D8];
  sub_18A60FF64();
  v8 = v59;
  result = sub_18A6376F0(v47);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v31 = v3;
    v10 = v47[0];
    if ((v47[0] & 0x8000000000000000) != 0 || v47[0] >= 1 << *(_BYTE *)(a1 + 32))
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      v11 = v48;
      v12 = v47[1];
      v34 = a3;
      v35 = a1 + 64;
      v13 = v49;
      v14 = v50;
      v32 = a1;
      v33 = (uint64_t)a2;
      while (((*(_QWORD *)(v35 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
          goto LABEL_21;
        v36 = v12;
        HIDWORD(v37) = v11;
        v15 = v8;
        v38 = v7;
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
        v17 = v16[1];
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
        v41 = *v16;
        v42 = v17;
        v43 = v18;
        HIDWORD(v40) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v44, &v41);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v40 & 0x100000000) != 0)
          goto LABEL_25;
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v13 >= *(_QWORD *)(v44 + 16))
          goto LABEL_23;
        v8 = v15;
        v19 = (_QWORD *)(v44 + 32 * v13);
        v20 = v19[4];
        v21 = v19[5];
        v22 = v19[6];
        v23 = v19[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v59 = v15;
        v28 = *(_QWORD *)(v15 + 16);
        if (v28 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_18A60FF64();
          v8 = v59;
        }
        *(_QWORD *)(v8 + 16) = v28 + 1;
        v29 = (_QWORD *)(v8 + 32 * v28);
        v29[4] = v20;
        v29[5] = v21;
        v29[6] = v22;
        v29[7] = v23;
        v55[0] = v10;
        v55[1] = v36;
        v56 = BYTE4(v37) & 1;
        v57 = v13;
        v58 = 0;
        a1 = v32;
        a2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v33;
        result = (_QWORD *)sub_18A637FD4((int)v55, v32, v33, v34, v24, v25, v26, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41,
                             v42,
                             v43,
                             v44,
                             v45[0],
                             v45[1],
                             v45[2],
                             v45[3],
                             v45[4],
                             v46[0],
                             v46[1],
                             v46[2]);
        v7 = v39 - 1;
        if (v39 == 1)
        {
          sub_18A62F96C((uint64_t)v51);
          return (_QWORD *)v8;
        }
        v10 = v51[0];
        if ((v51[0] & 0x8000000000000000) == 0)
        {
          v12 = v51[1];
          v11 = v52;
          v13 = v53;
          v14 = v54;
          if (v51[0] < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_18A62A5BC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[5];
  uint64_t v46[5];
  _QWORD v47[2];
  unsigned __int8 v48;
  unint64_t v49;
  unsigned __int8 v50;
  _QWORD v51[2];
  unsigned __int8 v52;
  unint64_t v53;
  unsigned __int8 v54;
  _QWORD v55[2];
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;

  sub_18A6376F0(v45);
  sub_18A6378F4(v46, a1, a2, a3);
  v7 = sub_18A63791C(v45, v46, a1, a2, a3);
  sub_18A62F96C((uint64_t)v46);
  sub_18A62F96C((uint64_t)v45);
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return (_QWORD *)v8;
  v59 = MEMORY[0x1E0DEE9D8];
  sub_18A60FF64();
  v8 = v59;
  result = sub_18A6376F0(v47);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v31 = v3;
    v10 = v47[0];
    if ((v47[0] & 0x8000000000000000) != 0 || v47[0] >= 1 << *(_BYTE *)(a1 + 32))
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      v11 = v48;
      v12 = v47[1];
      v34 = a3;
      v35 = a1 + 64;
      v13 = v49;
      v14 = v50;
      v32 = a1;
      v33 = (uint64_t)a2;
      while (((*(_QWORD *)(v35 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
          goto LABEL_21;
        v36 = v12;
        HIDWORD(v37) = v11;
        v15 = v8;
        v38 = v7;
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
        v17 = v16[1];
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
        v41 = *v16;
        v42 = v17;
        v43 = v18;
        HIDWORD(v40) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v44, &v41);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v40 & 0x100000000) != 0)
          goto LABEL_25;
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v13 >= *(_QWORD *)(v44 + 16))
          goto LABEL_23;
        v8 = v15;
        v19 = (_QWORD *)(v44 + 32 * v13);
        v20 = v19[4];
        v21 = v19[5];
        v22 = v19[6];
        v23 = v19[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v59 = v15;
        v28 = *(_QWORD *)(v15 + 16);
        if (v28 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_18A60FF64();
          v8 = v59;
        }
        *(_QWORD *)(v8 + 16) = v28 + 1;
        v29 = (_QWORD *)(v8 + 32 * v28);
        v29[4] = v20;
        v29[5] = v21;
        v29[6] = v22;
        v29[7] = v23;
        v55[0] = v10;
        v55[1] = v36;
        v56 = BYTE4(v37) & 1;
        v57 = v13;
        v58 = 0;
        a1 = v32;
        a2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v33;
        result = (_QWORD *)sub_18A637EAC((int)v55, v32, v33, v34, v24, v25, v26, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41,
                             v42,
                             v43,
                             v44,
                             v45[0],
                             v45[1],
                             v45[2],
                             v45[3],
                             v45[4],
                             v46[0],
                             v46[1],
                             v46[2]);
        v7 = v39 - 1;
        if (v39 == 1)
        {
          sub_18A62F96C((uint64_t)v51);
          return (_QWORD *)v8;
        }
        v10 = v51[0];
        if ((v51[0] & 0x8000000000000000) == 0)
        {
          v12 = v51[1];
          v11 = v52;
          v13 = v53;
          v14 = v54;
          if (v51[0] < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_18A62A88C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[5];
  uint64_t v46[5];
  _QWORD v47[2];
  unsigned __int8 v48;
  unint64_t v49;
  unsigned __int8 v50;
  _QWORD v51[2];
  unsigned __int8 v52;
  unint64_t v53;
  unsigned __int8 v54;
  _QWORD v55[2];
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;

  sub_18A6376F0(v45);
  sub_18A6378F4(v46, a1, a2, a3);
  v7 = sub_18A63791C(v45, v46, a1, a2, a3);
  sub_18A62F96C((uint64_t)v46);
  sub_18A62F96C((uint64_t)v45);
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return (_QWORD *)v8;
  v59 = MEMORY[0x1E0DEE9D8];
  sub_18A60FF64();
  v8 = v59;
  result = sub_18A6376F0(v47);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v31 = v3;
    v10 = v47[0];
    if ((v47[0] & 0x8000000000000000) != 0 || v47[0] >= 1 << *(_BYTE *)(a1 + 32))
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      v11 = v48;
      v12 = v47[1];
      v34 = a3;
      v35 = a1 + 64;
      v13 = v49;
      v14 = v50;
      v32 = a1;
      v33 = (uint64_t)a2;
      while (((*(_QWORD *)(v35 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
          goto LABEL_21;
        v36 = v12;
        HIDWORD(v37) = v11;
        v15 = v8;
        v38 = v7;
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
        v17 = v16[1];
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
        v41 = *v16;
        v42 = v17;
        v43 = v18;
        HIDWORD(v40) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v44, &v41);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v40 & 0x100000000) != 0)
          goto LABEL_25;
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v13 >= *(_QWORD *)(v44 + 16))
          goto LABEL_23;
        v8 = v15;
        v19 = (_QWORD *)(v44 + 32 * v13);
        v20 = v19[4];
        v21 = v19[5];
        v22 = v19[6];
        v23 = v19[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v59 = v15;
        v28 = *(_QWORD *)(v15 + 16);
        if (v28 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_18A60FF64();
          v8 = v59;
        }
        *(_QWORD *)(v8 + 16) = v28 + 1;
        v29 = (_QWORD *)(v8 + 32 * v28);
        v29[4] = v20;
        v29[5] = v21;
        v29[6] = v22;
        v29[7] = v23;
        v55[0] = v10;
        v55[1] = v36;
        v56 = BYTE4(v37) & 1;
        v57 = v13;
        v58 = 0;
        a1 = v32;
        a2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v33;
        result = (_QWORD *)sub_18A637D84((int)v55, v32, v33, v34, v24, v25, v26, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41,
                             v42,
                             v43,
                             v44,
                             v45[0],
                             v45[1],
                             v45[2],
                             v45[3],
                             v45[4],
                             v46[0],
                             v46[1],
                             v46[2]);
        v7 = v39 - 1;
        if (v39 == 1)
        {
          sub_18A62F96C((uint64_t)v51);
          return (_QWORD *)v8;
        }
        v10 = v51[0];
        if ((v51[0] & 0x8000000000000000) == 0)
        {
          v12 = v51[1];
          v11 = v52;
          v13 = v53;
          v14 = v54;
          if (v51[0] < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_18A62AB5C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t result;
  Swift::Int v24;
  void (*v25)(char *, _QWORD);
  void (*v26)(char *);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t AssociatedTypeWitness;
  void (*v45)(char *, char *);
  uint64_t v46;
  char *v47;
  Swift::Int v48;
  uint64_t v49;
  char v50[32];
  uint64_t v51;

  v37 = a5;
  v38 = a8;
  v45 = a1;
  v46 = a2;
  v36 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v34 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v16 - 8);
  v40 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v35 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v34 - v19;
  v21 = dispatch thunk of Collection.count.getter();
  if (!v21)
    return static Array._allocateUninitialized(_:)();
  v22 = v21;
  v51 = Array.init()();
  v41 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  v43 = a6;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22;
    v42 = v15;
    while (v24)
    {
      v48 = v24;
      v25 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v26 = *(void (**)(char *))(v10 + 16);
      v27 = v10;
      v28 = AssociatedTypeWitness;
      v26(v13);
      v25(v50, 0);
      v29 = v20;
      v30 = v49;
      v45(v13, v47);
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v40);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v38, v47, v37);
      }
      v49 = 0;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
      ContiguousArray.append(_:)();
      result = dispatch thunk of Collection.formIndex(after:)();
      v24 = v48 - 1;
      v10 = v27;
      if (v48 == 1)
      {
        v32 = v39;
        v31 = v40;
        v33 = v35;
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v35, v29, v40);
        _expectEnd<A>(of:is:)();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v31);
        return v51;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall String.truncated(maxByteCount:)(Swift::Int maxByteCount)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String result;

  if (maxByteCount < 1)
  {
    v7 = 0;
    v8 = (void *)0xE000000000000000;
  }
  else
  {
    v3 = v2;
    v4 = v1;
    v5 = maxByteCount;
    while (1)
    {
      sub_18A5F3FAC();
      v6 = sub_18A60F9A4(v5, v4, v3);
      v7 = MEMORY[0x18D76C928](v6);
      if (v8)
        break;
      if (v5-- <= 1)
      {
        v7 = 0;
        v8 = (void *)0xE000000000000000;
        break;
      }
    }
  }
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t CKFeatureNameOrValueMaxUTF8Bytes.getter()
{
  return 128;
}

void sub_18A62AF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  sub_18A61A92C();
  sub_18A62FD24();
  v6 = v6 && v4 == v5;
  if (v6 || (sub_18A62FAFC() & 1) != 0)
  {
    if (v3 == v1 && v2 == v0)
    {
      sub_18A5F3800();
      return;
    }
    sub_18A62FE98();
  }
  else
  {
    sub_18A62FE6C();
  }
  sub_18A62FAE8();
}

void static CKFeatureProtocol.< infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_18A61A92C();
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v1, v0);
  v4 = v3;
  if (v2 == sub_18A62FC40() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7 = sub_18A62FAFC();
    sub_18A5F3A8C();
    sub_18A5F37A4();
    if ((v7 & 1) == 0)
    {
      v8 = sub_18A62FC40();
      v10 = v9;
      v11 = sub_18A62FC40();
      goto LABEL_9;
    }
  }
  v8 = sub_18A62FF04();
  v10 = v13;
  v11 = sub_18A62FF04();
LABEL_9:
  if (v8 != v11 || v10 != v12)
    sub_18A62FE5C();
  sub_18A5F460C();
  sub_18A5F37E0();
  sub_18A5F3800();
}

void CKFeatureProtocol<>.description.getter(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  swift_getDynamicType();
  v7._countAndFlagsBits = _typeName(_:qualified:)();
  sub_18A62FE50(v7);
  sub_18A5F3FE4();
  v3._countAndFlagsBits = 2629690;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  v8._countAndFlagsBits = sub_18A62FD7C(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16));
  sub_18A62FE50(v8);
  sub_18A5F3FE4();
  v4._countAndFlagsBits = 2112032;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = sub_18A62FD7C(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24));
  String.append(_:)(v5);
  sub_18A5F37E0();
  v6._countAndFlagsBits = 15913;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  sub_18A628DF8();
}

void CKZoneFeature.name.getter()
{
  sub_18A5F3898();
  sub_18A5F379C();
}

{
  sub_18A6360F8();
}

uint64_t sub_18A62B178@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A62B184(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKZoneFeature.name.setter(v1, v2);
}

void (*CKZoneFeature.name.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A62B1D8;
}

void sub_18A62B1D8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    sub_18A62B4FC();
}

void CKZoneFeature.value.getter()
{
  sub_18A5F3898();
  sub_18A5F379C();
}

{
  sub_18A636144(&OBJC_IVAR___CKZoneFeature__wrapped);
}

uint64_t sub_18A62B220@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A62B22C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKZoneFeature.value.setter(v1, v2);
}

void (*CKZoneFeature.value.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A62B280;
}

void sub_18A62B280(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    sub_18A62B570();
}

uint64_t sub_18A62B2B4()
{
  return sub_18A635300();
}

uint64_t sub_18A62B2C4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_18A62B2DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_18A62AF20);
}

uint64_t sub_18A62B2D0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_18A62B2DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_18A62B310);
}

uint64_t sub_18A62B2DC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]) & 1;
}

void sub_18A62B310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  sub_18A61A92C();
  sub_18A62FD0C();
  v6 = v6 && v5 == v4;
  if (!v6 && (sub_18A5F43D4() & 1) == 0)
  {
    sub_18A62FE28();
    goto LABEL_13;
  }
  if (v2 != v3 || v0 != v1)
  {
    sub_18A62FF10();
LABEL_13:
    sub_18A62FE5C();
  }
  sub_18A5F3800();
}

uint64_t sub_18A62B36C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_18A62B2DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_18A62B378);
}

void sub_18A62B378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  sub_18A61A92C();
  sub_18A62FD24();
  v6 = v6 && v4 == v5;
  if (!v6 && (sub_18A62FAFC() & 1) == 0)
  {
    sub_18A62FE6C();
    goto LABEL_13;
  }
  if (v3 != v1 || v2 != v0)
  {
    sub_18A62FE98();
LABEL_13:
    sub_18A62FE5C();
  }
  sub_18A5F3800();
}

uint64_t sub_18A62B3EC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_18A62B2DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_18A62B3F8);
}

void sub_18A62B3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  sub_18A61A92C();
  sub_18A62FD0C();
  v6 = v6 && v5 == v4;
  if (v6 || (sub_18A5F43D4() & 1) != 0)
  {
    if (v2 == v3 && v0 == v1)
    {
      sub_18A5F3800();
      return;
    }
    sub_18A62FF10();
  }
  else
  {
    sub_18A62FE28();
  }
  sub_18A62FAE8();
}

void _s8CloudKit13CKZoneFeatureV4nameSSvs_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_18A62B4FC();
  sub_18A5F3824();
}

uint64_t (*CKRecordFeature.name.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A62F9D0;
}

void _s8CloudKit13CKZoneFeatureV5valueSSvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_18A62B570();
  sub_18A5F3824();
}

uint64_t (*CKRecordFeature.value.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A62F9D4;
}

uint64_t sub_18A62B4E8()
{
  return sub_18A635318();
}

void sub_18A62B4FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = 128;
  while (1)
  {
    sub_18A5F3FAC();
    v2 = sub_18A62FC4C();
    v3 = MEMORY[0x18D76C928](v2);
    if (v4)
      break;
    if (!--v1)
    {
      sub_18A5F37E0();
      v5 = 0;
      v6 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  v5 = v3;
  v6 = v4;
  sub_18A5F37E0();
LABEL_6:
  *v0 = v5;
  v0[1] = v6;
  sub_18A5F3814();
}

uint64_t (*CKFieldFeature.name.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A62F9D0;
}

void sub_18A62B570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = 128;
  while (1)
  {
    sub_18A5F3FAC();
    v2 = sub_18A62FC4C();
    v3 = MEMORY[0x18D76C928](v2);
    if (v4)
      break;
    if (!--v1)
    {
      sub_18A5F37E0();
      v5 = 0;
      v6 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  v5 = v3;
  v6 = v4;
  sub_18A5F37E0();
LABEL_6:
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v6;
  sub_18A5F3814();
}

uint64_t (*CKFieldFeature.value.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A62F9D4;
}

uint64_t _s8CloudKit13CKZoneFeatureV4name5valueACSS_SStcfC_0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;

  sub_18A61A92C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = 128;
  while (1)
  {
    sub_18A6291A0();
    v11 = sub_18A60F9A4(v10, v7, v5);
    v12 = MEMORY[0x18D76C928](v11);
    if (v13)
      break;
    if (!--v10)
    {
      sub_18A5F3A8C();
      v14 = 0;
      v15 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  v14 = v12;
  v15 = v13;
  sub_18A5F3A8C();
LABEL_6:
  v16 = 128;
  while (1)
  {
    sub_18A5F3898();
    v17 = sub_18A60F9A4(v16, v3, v1);
    v18 = MEMORY[0x18D76C928](v17);
    if (v19)
      break;
    if (!--v16)
    {
      result = sub_18A5F37A4();
      v21 = 0;
      v22 = 0xE000000000000000;
      goto LABEL_11;
    }
  }
  v21 = v18;
  v22 = v19;
  result = sub_18A5F37A4();
LABEL_11:
  *v9 = v14;
  v9[1] = v15;
  v9[2] = v21;
  v9[3] = v22;
  return result;
}

uint64_t sub_18A62B6B4()
{
  return sub_18A63530C();
}

uint64_t _s8CloudKit13CKZoneFeatureV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_18A62FAFC(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

void CKFeatureSet.init()(uint64_t *a1@<X8>)
{
  sub_18A62FC2C();
  *a1 = Dictionary.init()();
  sub_18A5F379C();
}

uint64_t CKFeatureSet.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  sub_18A62FDC0(&v10);
  *a3 = v10;
  type metadata accessor for CKFeatureSet(0, a1, a2, v6);
  CKFeatureSet.insert<A>(_:)();
  v7 = sub_18A62FE8C();
  return v8(v7);
}

void CKFeatureSet.insert<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  sub_18A612EB8();
  v2 = v1;
  v37 = v3;
  v38 = v1;
  v5 = v4;
  v7 = v6;
  v8 = *(_QWORD *)(v3 + 16);
  v36 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v6);
  sub_18A5F3E5C();
  v11 = v10 - v9;
  sub_18A62FED0();
  sub_18A62FEDC();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - v14;
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v13);
  sub_18A5F3E5C();
  v33 = v17 - v16;
  v34 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_18A62FEDC();
  MEMORY[0x1E0C80A78](v20);
  v39 = (char *)&v30 - v21;
  v31 = v0;
  v22 = *v0;
  sub_18A62FB18();
  v23 = MEMORY[0x18D76C754](v22, MEMORY[0x1E0DEA968]);
  v35 = v7;
  v24 = dispatch thunk of Collection.count.getter();
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
  }
  else
  {
    v38 = v19;
    type metadata accessor for Dictionary();
    Dictionary.reserveCapacity(_:)(v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v33, v35, v5);
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    sub_18A62FE3C();
    v26 = sub_18A5F105C((uint64_t)v15, 1, v8);
    v27 = v36;
    if (v26 != 1)
    {
      v28 = *(void (**)(uint64_t))(v36 + 32);
      do
      {
        v29 = sub_18A62FE80();
        v28(v29);
        CKFeatureSet.insert(_:)();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v11, v8);
        sub_18A62FE3C();
      }
      while (sub_18A5F105C((uint64_t)v15, 1, v8) != 1);
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, AssociatedTypeWitness);
    sub_18A5F37E8();
  }
}

uint64_t type metadata accessor for CKFeatureSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKFeatureSet);
}

void CKFeatureSet.features.getter()
{
  type metadata accessor for Array();
  type metadata accessor for Dictionary();
  sub_18A62FBE0();
}

void sub_18A62BAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_18A62FE04();
  MEMORY[0x18D76C988](v2);
  v3 = sub_18A5F3F90();
  v4 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v4;
  sub_18A62FEB8();
  type metadata accessor for LazySequence();
  sub_18A62FB2C();
}

void sub_18A62BB4C()
{
  sub_18A62FD04();
}

void sub_18A62BB5C()
{
  LazySequenceProtocol.flatMap<A>(_:)();
  sub_18A62FE64();
  swift_bridgeObjectRelease();
  sub_18A628F40();
}

uint64_t sub_18A62BB98()
{
  return swift_bridgeObjectRetain();
}

void CKFeatureSet.valuesByName.getter()
{
  sub_18A62FC2C();
  sub_18A62FB24();
}

uint64_t sub_18A62BBD8()
{
  type metadata accessor for LazyMapSequence();
  return Dictionary.mapValues<A>(_:)();
}

uint64_t sub_18A62BC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = type metadata accessor for Array();
  v6 = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF38], v5);
  MEMORY[0x18D76C988](&v10, v5, v6);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = type metadata accessor for LazySequence();
  MEMORY[0x18D76E7C4](MEMORY[0x1E0DEC330], v8);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

void CKFeatureSet.isEmpty.getter()
{
  sub_18A62FC2C();
  JUMPOUT(0x18D76C760);
}

uint64_t CKFeatureSet.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v5 = *v2;
  v6 = *(_QWORD *)(v5 + 16);
  sub_18A62FB04();
  if (v6 && (v7 = sub_18A62E868(a1, a2), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
    sub_18A5F3898();
  }
  else
  {
    v9 = Array.init()();
  }
  sub_18A5F37E0();
  return v9;
}

void CKFeatureSet.subscript.setter()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A62FD3C();
  sub_18A62FC5C(&v1);
  swift_bridgeObjectRelease();
  v1 = v0;
  sub_18A62FC2C();
  sub_18A62FBE0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_18A62FD3C();
  sub_18A62FC5C(&v12);
  swift_bridgeObjectRelease();
  v12 = v3;
  v9 = *(_OWORD *)(v1 + 16);
  v10 = v0;
  v11 = v2;
  v4 = sub_18A62FDE8();
  sub_18A62FEFC(&qword_1EDF6B3E8);
  v7 = sub_18A62AB5C((void (*)(char *, char *))sub_18A62F9D8, (uint64_t)v8, v4, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  sub_18A5F3A8C();
  sub_18A5F3FE4();
  v12 = v7;
  sub_18A62FEC4();
  sub_18A62FB24();
}

void sub_18A62BE44()
{
  _ArrayProtocol.filter(_:)();
  sub_18A5F3FE4();
  sub_18A62FBE0();
}

void sub_18A62BE7C()
{
  CKFeatureSet.insert<A>(_:)();
  sub_18A5F3944();
  sub_18A62FBFC();
}

void CKFeatureSet.removeAll(for:)(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Array();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  v2 = v3;
  if (!v3)
    v2 = static Array._allocateUninitialized(_:)();
  *a1 = v2;
  sub_18A5F40C8();
}

uint64_t sub_18A62BF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char v8;

  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5) == a2 && v6 == a3)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void CKFeatureSet.subscript.modify()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_18A62FB58();
  v2 = sub_18A62FA60(v1);
  *v0 = CKFeatureSet.subscript.getter(v2, v3);
  sub_18A628DF8();
}

{
  _QWORD *v0;

  v0 = sub_18A62FB58();
  sub_18A62FA60(v0);
  CKFeatureSet.subscript.getter();
}

void sub_18A62BFD0()
{
  sub_18A62C358();
}

void CKFeatureSet.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_18A61A92C();
  v2 = v1;
  v4 = v3;
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  sub_18A62FB04();
  if (v5 && (sub_18A62E868(v4, v2), (v6 & 1) != 0))
  {
    sub_18A5F3D48();
    sub_18A5F3FE4();
  }
  else
  {
    Array.init()();
    sub_18A5F3FE4();
  }
  type metadata accessor for Array();
  sub_18A62FBF4();
}

void sub_18A62C06C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_18A62FE80();
  MEMORY[0x18D76C988](v1);
  v2 = sub_18A5F460C();
  *(_QWORD *)(v0 - 80) = *(_QWORD *)(v0 - 72);
  MEMORY[0x1E0C80A78](v2);
  type metadata accessor for LazySequence();
  sub_18A62FBF4();
}

void sub_18A62C0D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  sub_18A62FAE0();
}

uint64_t sub_18A62C0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = sub_18A62AB5C((void (*)(char *, char *))sub_18A62E8EC, v9, v8, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], a1, MEMORY[0x1E0DEDD18], a8);
  swift_bridgeObjectRelease();
  return v10;
}

void sub_18A62C14C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for CKFeatureSet(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), (uint64_t)a3);
  sub_18A5F3D48();
  v6 = sub_18A62FE80();
  v7 = a3(v6);
  sub_18A5F460C();
  *a4 = v7;
  sub_18A628F40();
}

void sub_18A62C1BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a3;
  v7 = a3[1];
  v8 = type metadata accessor for CKFeatureSet(0, *(uint64_t *)((char *)a3 + a4 - 16), *(uint64_t *)((char *)a3 + a4 - 8), a4);
  sub_18A5F3D48();
  v9 = sub_18A6239CC();
  a5(v9, v6, v7, v8);
  sub_18A5F3814();
}

uint64_t sub_18A62C2D8()
{
  CKFeatureSet.insert<A>(_:)();
  return sub_18A5F3944();
}

void sub_18A62C34C()
{
  sub_18A62C358();
}

void sub_18A62C358()
{
  char v0;
  char v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  sub_18A61A92C();
  v1 = v0;
  v3 = *v2;
  v4 = **v2;
  sub_18A5F3D48();
  if ((v1 & 1) != 0)
  {
    v5 = sub_18A6239CC();
    sub_18A62FCF4(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18A62FCF4(v4);
  }
  free(v3);
}

Swift::Bool __swiftcall CKFeatureSet.contains(name:)(Swift::String name)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v6;
  uint64_t v7;

  v2 = *v1;
  v6 = name;
  v3 = sub_18A62FC2C();
  sub_18A5F3FAC();
  MEMORY[0x18D76C790](&v7, &v6, v2, MEMORY[0x1E0DEA968], v3, MEMORY[0x1E0DEA978]);
  sub_18A5F37E0();
  v4 = v7;
  if (v7)
    sub_18A5F37E0();
  return v4 != 0;
}

uint64_t CKFeatureSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;

  v3 = *v2;
  v7[0] = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7[1] = v4;
  v5 = sub_18A62FB18();
  MEMORY[0x18D76C790](&v8, v7, v3, MEMORY[0x1E0DEA968], v5, MEMORY[0x1E0DEA978]);
  sub_18A5F37A4();
  if (v8)
  {
    v7[0] = v8;
    sub_18A62FB2C();
  }
  return 0;
}

Swift::Bool __swiftcall CKFeatureSet.contains(name:value:)(Swift::String name, Swift::String value)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Bool result;
  _QWORD v9[2];
  uint64_t v10;

  sub_18A61A92C();
  v3 = *v2;
  v9[0] = v4;
  v9[1] = v5;
  v6 = type metadata accessor for Array();
  sub_18A61039C();
  MEMORY[0x18D76C790](&v10, v9, v3, MEMORY[0x1E0DEA968], v6, MEMORY[0x1E0DEA978]);
  v7 = sub_18A5F394C();
  if (v10)
  {
    v9[0] = v10;
    MEMORY[0x1E0C80A78](v7);
    sub_18A62FAE0();
  }
  sub_18A5F3800();
  return result;
}

uint64_t sub_18A62C614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char v8;

  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5) == a2 && v6 == a3)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL static CKFeatureSet.isValid(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    return 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = v9 & 0xFFFFFFFFFFFFLL;
  return v12 != 0;
}

#error "18A62C7FC: call analysis failed (funcsize=75)"

#error "18A62C934: call analysis failed (funcsize=75)"

#error "18A62CA6C: call analysis failed (funcsize=75)"

void CKFeatureSet.insert(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_18A612EB8();
  v2 = *(_QWORD *)(v1 + 16);
  MEMORY[0x1E0C80A78](v3);
  sub_18A5F3E5C();
  if (static CKFeatureSet.isValid(_:)(v5, v2, *(_QWORD *)(v4 + 24)))
  {
    v6 = sub_18A62FCCC();
    if (*(_QWORD *)(*(_QWORD *)v0 + 16) && (sub_18A62FDAC(v6), (v7 & 1) != 0))
      sub_18A6239CC();
    else
      Array.init()();
    sub_18A5F460C();
    sub_18A62FEC4();
    sub_18A62FB2C();
  }
  sub_18A5F37E8();
}

uint64_t sub_18A62CD64()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_18A62CD74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_18A5F4614(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_18A62CD7C(uint64_t a1)
{
  uint64_t v1;

  return sub_18A62BC34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

Swift::Void __swiftcall CKFeatureSet.insert(name:value:)(Swift::String name, Swift::String value)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;

  sub_18A612EB8();
  sub_18A62FCDC();
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_18A5F3E5C();
  v8 = v7 - v6;
  v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 + 24) + 32);
  sub_18A62FB04();
  sub_18A5F3898();
  v11 = sub_18A62FDF0();
  v10(v11);
  CKFeatureSet.insert(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  sub_18A5F37E8();
}

void CKFeatureSet.remove(name:value:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;

  sub_18A612EB8();
  sub_18A62FCDC();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_18A62FD54();
  v6 = *(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 32);
  sub_18A62FB04();
  sub_18A5F3898();
  v7 = sub_18A62FDF0();
  v6(v7);
  CKFeatureSet.remove(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  sub_18A5F37E8();
}

void CKFeatureSet.remove(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t (*v29)(uint64_t, uint64_t);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_18A612EB8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = sub_18A62FED0();
  v8 = *(_QWORD *)(v7 - 8);
  sub_18A62FEDC();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v28 - v10;
  sub_18A62FDD4(v5, 1);
  v12 = *(_QWORD *)(v3 + 24);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  v13 = v29(v6, v12);
  v30 = v1;
  v31 = v13;
  v14 = *v1;
  v32 = v15;
  v16 = sub_18A62FB18();
  MEMORY[0x18D76C790](&v35, &v31, v14, MEMORY[0x1E0DEA968], v16, MEMORY[0x1E0DEA978]);
  sub_18A5F37A4();
  if (v35)
  {
    v28[2] = v5;
    v31 = v35;
    v17 = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF50], v16);
    Collection<>.firstIndex(of:)();
    sub_18A5F38AC();
    if ((v34 & 1) == 0)
    {
      v28[1] = v17;
      v33 = sub_18A62FAB4();
      v34 = v18;
      v28[0] = type metadata accessor for Dictionary();
      v19 = v30;
      Dictionary.subscript.modify();
      if (*v20)
      {
        v19 = v20;
        sub_18A62FE04();
        Array.remove(at:)();
        sub_18A62FDB4();
        swift_bridgeObjectRelease();
        sub_18A62FBCC();
        v21 = 0;
      }
      else
      {
        sub_18A62FDB4();
        swift_bridgeObjectRelease();
        sub_18A62FBCC();
        v21 = 1;
      }
      sub_18A62FDD4((uint64_t)v11, v21);
      (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 32))(v19, v11, v7);
      v22 = sub_18A62FAB4();
      v24 = v23;
      v25 = *v30;
      v31 = v22;
      v32 = v24;
      MEMORY[0x18D76C790](&v33, &v31, v25, MEMORY[0x1E0DEA968], v16, MEMORY[0x1E0DEA978]);
      sub_18A5F37A4();
      if (v33)
      {
        v31 = v33;
        v26 = Collection.isEmpty.getter();
        sub_18A5F3A8C();
        if ((v26 & 1) != 0)
        {
          v31 = sub_18A62FAB4();
          v32 = v27;
          Dictionary.removeValue(forKey:)();
          sub_18A5F3944();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  sub_18A5F37E8();
}

uint64_t sub_18A62D114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v2 = a2;
  v3 = a1;
  v43 = a1 + 64;
  sub_18A62FC10();
  v6 = v5 & v4;
  v44 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_4;
LABEL_3:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    if (!*(_QWORD *)(v2 + 16))
    {
LABEL_43:
      sub_18A61A878();
      return 0;
    }
    v42 = v9;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * i);
    swift_bridgeObjectRetain_n();
    sub_18A629140();
    v49 = v16;
    v19 = sub_18A62FDAC(v16);
    if ((v20 & 1) == 0)
    {
      sub_18A61A878();
      sub_18A610384();
      sub_18A62FDA0();
      return 0;
    }
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v19);
    sub_18A5F3FAC();
    sub_18A5F460C();
    v22 = *(_QWORD *)(v21 + 16);
    result = sub_18A5F37E0();
    if (v22 != *(_QWORD *)(v18 + 16))
    {
      sub_18A61A878();
      sub_18A5F460C();
      sub_18A610384();
      return 0;
    }
    if (v22)
    {
      v23 = 0;
      v46 = v18;
      v47 = v18 + 32;
      v45 = v3;
      v40 = v2;
      v41 = v6;
      v39 = v22;
      while (v23 < *(_QWORD *)(v18 + 16))
      {
        if (!*(_QWORD *)(v2 + 16))
        {
          sub_18A610384();
LABEL_48:
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        v24 = (uint64_t *)(v47 + 32 * v23);
        v26 = *v24;
        v25 = v24[1];
        v28 = v24[2];
        v27 = v24[3];
        sub_18A5F3D48();
        sub_18A6291A0();
        sub_18A61039C();
        v29 = sub_18A62FDAC(v49);
        if ((v30 & 1) == 0)
        {
          sub_18A610384();
          sub_18A5F394C();
          sub_18A5F3A8C();
          sub_18A62FDA0();
          goto LABEL_43;
        }
        v31 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v29);
        sub_18A629140();
        v32 = v17;
        sub_18A5F460C();
        v33 = *(_QWORD *)(v31 + 16);
        if (!v33)
        {
          swift_bridgeObjectRelease();
          sub_18A5F37A4();
          sub_18A5F394C();
          sub_18A5F3A8C();
          goto LABEL_48;
        }
        v48 = v23 + 1;
        v34 = (uint64_t *)(v31 + 56);
        while (1)
        {
          v35 = *(v34 - 1);
          v36 = *v34;
          v37 = *(v34 - 3) == v26 && *(v34 - 2) == v25;
          if (v37 || (sub_18A62FAFC() & 1) != 0)
          {
            v38 = v35 == v28 && v36 == v27;
            if (v38 || (sub_18A62FAFC() & 1) != 0)
              break;
          }
          v34 += 4;
          if (!--v33)
          {
            swift_bridgeObjectRelease();
            sub_18A5F37A4();
            sub_18A5F394C();
            sub_18A5F3A8C();
            sub_18A610384();
            goto LABEL_43;
          }
        }
        sub_18A5F394C();
        sub_18A5F3A8C();
        result = sub_18A610384();
        v23 = v48;
        v3 = v45;
        v18 = v46;
        v17 = v32;
        v2 = v40;
        v6 = v41;
        if (v48 == v39)
          goto LABEL_41;
      }
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
LABEL_41:
    sub_18A610384();
    result = sub_18A5F460C();
    v9 = v42;
    if (v6)
      goto LABEL_3;
LABEL_4:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_53;
    if (v12 >= v44)
      goto LABEL_51;
    v13 = *(_QWORD *)(v43 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v44)
        goto LABEL_51;
      v13 = *(_QWORD *)(v43 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v44)
          goto LABEL_51;
        v13 = *(_QWORD *)(v43 + 8 * v9);
        if (!v13)
          break;
      }
    }
LABEL_17:
    v6 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v44)
  {
LABEL_51:
    sub_18A61A878();
    return 1;
  }
  v13 = *(_QWORD *)(v43 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v44)
      goto LABEL_51;
    v13 = *(_QWORD *)(v43 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_54:
  __break(1u);
  return result;
}

void static CKFeatureSet.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A612EB8();
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for Array();
  sub_18A62FCAC();
}

void sub_18A62D870()
{
  static CKFeatureSet.== infix(_:_:)();
}

void CKFeatureSet.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  sub_18A5F3944();
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  CKFeatureSet.features.getter();
}

void sub_18A62D8E0()
{
  type metadata accessor for Array();
  sub_18A62FDC8();
  sub_18A62FB24();
}

void sub_18A62D92C()
{
  sub_18A62FB98();
  sub_18A62FBF4();
}

void sub_18A62D940()
{
  sub_18A62FAE0();
}

void sub_18A62D950()
{
  type metadata accessor for FlattenSequence();
  sub_18A62FBE0();
}

void sub_18A62D974()
{
  sub_18A62FEB8();
  type metadata accessor for LazySequence();
  sub_18A5F101C(&qword_1EDF6B3F0);
  sub_18A62FB24();
}

void sub_18A62D9A0()
{
  sub_18A62FBF4();
}

void sub_18A62D9B4()
{
  sub_18A62FAE0();
}

void sub_18A62D9C4()
{
  sub_18A62FBE0();
}

void sub_18A62D9D8()
{
  sub_18A62FD04();
}

uint64_t sub_18A62D9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v16;

  v10 = sub_18A62FC6C((void (*)(char *, char *))sub_18A62EED0, (uint64_t)&v16, a3, a4, MEMORY[0x1E0DEDCE8], a1, MEMORY[0x1E0DEDD18], a8);
  swift_bridgeObjectRelease();
  swift_release();
  v11 = MEMORY[0x18D76CA0C](v10, v8);
  v13 = v12;
  sub_18A5F37E0();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  sub_18A5F460C();
  sub_18A5F485C();
  return *(_QWORD *)(v9 - 64);
}

uint64_t sub_18A62DA74@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  *a3 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  a3[1] = v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  a3[2] = result;
  a3[3] = v8;
  return result;
}

uint64_t sub_18A62DAE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = -1;
  *a2 = a1;
  a2[1] = a1;
  v4 = -1 << v2;
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  a2[2] = a1 + 64;
  a2[3] = ~v4;
  a2[4] = 0;
  a2[5] = v5;
  return swift_bridgeObjectRetain();
}

Swift::tuple_String_OpaquePointer_optional __swiftcall CKFeatureSet.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::tuple_String_OpaquePointer_optional result;

  v1 = v0[1];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v3;
  if (!v2)
  {
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    v12 = (unint64_t)(v0[3] + 64) >> 6;
    if (v11 < v12)
    {
      v13 = v0[2];
      v14 = *(_QWORD *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        v5 = (v14 - 1) & v14;
        v6 = __clz(__rbit64(v14)) + (v11 << 6);
        v4 = v11;
        goto LABEL_3;
      }
      v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * (v3 + 2));
        if (v14)
        {
          v11 = v3 + 2;
          goto LABEL_7;
        }
        v11 = v3 + 3;
        v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * v11);
          if (v14)
            goto LABEL_7;
          v4 = v12 - 1;
          v15 = v3 + 4;
          while (v15 < v12)
          {
            v14 = *(_QWORD *)(v13 + 8 * v15++);
            if (v14)
            {
              v11 = v15 - 1;
              goto LABEL_7;
            }
          }
        }
      }
    }
    v9 = 0;
    v8 = 0;
    v10 = 0;
    v0[4] = v4;
    v0[5] = 0;
    goto LABEL_18;
  }
  v5 = (v2 - 1) & v2;
  v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
  v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
  v9 = *v7;
  v8 = (void *)v7[1];
  v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
  v0[4] = v4;
  v0[5] = v5;
  sub_18A5F3FAC();
  sub_18A5F40AC();
LABEL_18:
  v16 = v9;
  v17 = v8;
  v18 = v10;
LABEL_20:
  result.value._1._rawValue = v18;
  result.value._0._object = v17;
  result.value._0._countAndFlagsBits = v16;
  return result;
}

uint64_t sub_18A62DC40@<X0>(Swift::tuple_String_OpaquePointer_optional *a1@<X8>)
{
  Swift::tuple_String_OpaquePointer_optional v3;

  v3 = CKFeatureSet.Iterator.next()();
  *a1 = v3;
  return v3.value._0._countAndFlagsBits;
}

uint64_t CKFeatureSet.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  sub_18A62DAE0(*v1, a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A62DC90@<X0>(_QWORD *a1@<X8>)
{
  CKFeatureSet.makeIterator()(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A62DCB0()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void CKFeatureSet.init(dictionaryLiteral:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  sub_18A612EB8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_18A62FDC0(&v27);
  v9 = v27;
  v28 = v27;
  v10 = *(_QWORD *)(v5 + 16);
  if (v10)
  {
    v24 = v7;
    v25 = v1;
    v23[1] = v5;
    v11 = (uint64_t *)(v5 + 48);
    do
    {
      v26 = v23;
      v12 = *(v11 - 1);
      v13 = *v11;
      v11 += 3;
      v27 = v13;
      MEMORY[0x1E0C80A78](v8);
      v23[-4] = v3;
      v23[-3] = v1;
      v23[-2] = v14;
      v23[-1] = v12;
      sub_18A629140();
      swift_bridgeObjectRetain();
      v15 = sub_18A62FDE8();
      sub_18A62FEFC(&qword_1EDF6B3E8);
      v18 = sub_18A62AB5C((void (*)(char *, char *))sub_18A62EEEC, (uint64_t)&v23[-6], v15, v3, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
      swift_bridgeObjectRelease();
      sub_18A610384();
      v27 = v18;
      v19 = sub_18A62FEB8();
      type metadata accessor for CKFeatureSet(v19, v20, v1, v21);
      sub_18A62FEB8();
      v22 = type metadata accessor for Array();
      MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF50], v22);
      CKFeatureSet.insert<A>(_:)();
      v8 = sub_18A5F37E0();
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v9 = v28;
    v7 = v24;
  }
  else
  {
    sub_18A5F3FE4();
  }
  *v7 = v9;
  sub_18A5F37E8();
}

uint64_t sub_18A62DE48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *a1;
  v10 = a1[1];
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32);
  swift_bridgeObjectRetain();
  sub_18A629140();
  return v11(a2, a3, v9, v10, a4, a5);
}

void sub_18A62DEC8()
{
  CKFeatureSet.init(dictionaryLiteral:)();
}

void CKFeatureSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;

  sub_18A62FDC0(&v14);
  v13 = a1;
  v12[2] = a2;
  v12[3] = a3;
  sub_18A62FDE8();
  sub_18A62FEFC(&qword_1EDF6B400);
  v10 = sub_18A62FC6C((void (*)(char *, char *))sub_18A62EF0C, (uint64_t)v12, v7, v8, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v9);
  sub_18A5F3A8C();
  v13 = v10;
  type metadata accessor for CKFeatureSet(0, a2, a3, v11);
  sub_18A62FB18();
  sub_18A62FB2C();
}

void sub_18A62DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;

  CKFeatureSet.insert<A>(_:)();
  sub_18A5F3944();
  *v16 = a16;
  sub_18A62FBFC();
}

uint64_t sub_18A62DFB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v9(v5, v6, v7, v8, a2, a3);
}

void sub_18A62E030(uint64_t a1, uint64_t a2)
{
  CKFeatureSet.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t CKRequiredFeatureSet.zone.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_18A5F4614(*v1, a1);
}

void CKRequiredFeatureSet.zone.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease();
  *v1 = v2;
  sub_18A5F379C();
}

uint64_t (*CKRequiredFeatureSet.zone.modify())()
{
  return nullsub_3;
}

uint64_t CKRequiredFeatureSet.record.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_18A5F4614(*(_QWORD *)(v1 + 8), a1);
}

void CKRequiredFeatureSet.record.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  sub_18A5F379C();
}

uint64_t (*CKRequiredFeatureSet.record.modify())()
{
  return nullsub_3;
}

uint64_t CKRequiredFeatureSet.field.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_18A5F4614(*(_QWORD *)(v1 + 16), a1);
}

void CKRequiredFeatureSet.field.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  sub_18A5F379C();
}

uint64_t (*CKRequiredFeatureSet.field.modify())()
{
  return nullsub_3;
}

void CKRequiredFeatureSet.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9E0];
  *a1 = MEMORY[0x1E0DEE9E0];
  a1[1] = v1;
  a1[2] = v1;
}

void CKRequiredFeatureSet.init<A, B, C>(zone:record:field:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  sub_18A612EB8();
  v31 = v1;
  v29 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v32 = v11;
  v12 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v1);
  sub_18A62FD54();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v15);
  sub_18A5F3E5C();
  v18 = v17 - v16;
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v21);
  sub_18A5F3E5C();
  (*(void (**)(uint64_t))(v20 + 16))(v23 - v22);
  v24 = sub_18A62EF64();
  CKFeatureSet.init<A>(_:)((uint64_t)&type metadata for CKZoneFeature, v24, &v33);
  v30 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v18, v29, v6);
  v25 = sub_18A62EFA0();
  CKFeatureSet.init<A>(_:)((uint64_t)&type metadata for CKRecordFeature, v25, &v33);
  v26 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v0, v10, v4);
  v27 = sub_18A62EFDC();
  CKFeatureSet.init<A>(_:)((uint64_t)&type metadata for CKFieldFeature, v27, &v33);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, v6);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v31, v8);
  v28 = v33;
  *v32 = v30;
  v32[1] = v26;
  v32[2] = v28;
  sub_18A5F37E8();
}

BOOL CKRequiredFeatureSet.isEmpty.getter()
{
  _QWORD *v0;

  return !*(_QWORD *)(*v0 + 16) && !*(_QWORD *)(v0[1] + 16) && *(_QWORD *)(v0[2] + 16) == 0;
}

Swift::Void __swiftcall CKRequiredFeatureSet.insert(_:)(CloudKit::CKZoneFeature a1)
{
  sub_18A62C73C(*(_QWORD *)a1.name._countAndFlagsBits, *(_QWORD *)(a1.name._countAndFlagsBits + 8), *(_QWORD *)(a1.name._countAndFlagsBits + 16), *(_QWORD *)(a1.name._countAndFlagsBits + 24));
}

void CKRequiredFeatureSet.insert<A>(_:)()
{
  sub_18A62FD6C();
  sub_18A5F101C(&qword_1EDF6B420);
  CKFeatureSet.insert<A>(_:)();
}

{
  sub_18A62FD6C();
  sub_18A5F101C(&qword_1EDF6B428);
  sub_18A62FBAC();
  sub_18A5F3824();
}

{
  sub_18A62FD6C();
  sub_18A5F101C(&qword_1EDF6B430);
  sub_18A62FBAC();
  sub_18A5F3824();
}

Swift::Void __swiftcall CKRequiredFeatureSet.insert(_:)(CloudKit::CKRecordFeature a1)
{
  sub_18A62C874(*(_QWORD *)a1.name._countAndFlagsBits, *(_QWORD *)(a1.name._countAndFlagsBits + 8), *(_QWORD *)(a1.name._countAndFlagsBits + 16), *(_QWORD *)(a1.name._countAndFlagsBits + 24));
  sub_18A5F379C();
}

Swift::Void __swiftcall CKRequiredFeatureSet.insert(_:)(CloudKit::CKFieldFeature a1)
{
  sub_18A62C9AC(*(_QWORD *)a1.name._countAndFlagsBits, *(_QWORD *)(a1.name._countAndFlagsBits + 8), *(_QWORD *)(a1.name._countAndFlagsBits + 16), *(_QWORD *)(a1.name._countAndFlagsBits + 24));
  sub_18A5F379C();
}

void static CKRequiredFeatureSet.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  sub_18A61A92C();
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  sub_18A6239CC();
  sub_18A6291A0();
  v6 = sub_18A62FE80();
  v8 = sub_18A62D114(v6, v7);
  sub_18A5F3FE4();
  sub_18A5F3A8C();
  if ((v8 & 1) != 0)
  {
    sub_18A5F3D48();
    sub_18A5F40AC();
    v9 = sub_18A62D114(v1, v4);
    sub_18A5F460C();
    sub_18A5F3944();
    if ((v9 & 1) != 0)
    {
      sub_18A5F3898();
      sub_18A5F3FAC();
      sub_18A62D114(v2, v5);
      sub_18A5F37A4();
      sub_18A5F37E0();
    }
  }
  sub_18A5F3800();
}

uint64_t CKRequiredFeatureSet.description.getter()
{
  _QWORD *v0;
  uint64_t v1;

  if (*(_QWORD *)(*v0 + 16) || *(_QWORD *)(v0[1] + 16) || *(_QWORD *)(v0[2] + 16))
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v1 = sub_18A6239CC();
    sub_18A62A2EC(v1, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18A62F018, 0);
    sub_18A5F3FE4();
    sub_18A5F101C(&qword_1EDF6B3F0);
    sub_18A62FBC0();
  }
  return 0x3E7974706D453CLL;
}

{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  objc_super v7;
  uint64_t v8;
  uint64_t v9;

  v7.super_class = (Class)CKRequiredFeatureSet;
  v1 = objc_msgSendSuper2(&v7, sel_description);
  v2 = sub_18A61044C();
  v4 = v3;

  v8 = v2;
  v9 = v4;
  sub_18A5F4380();
  v5._countAndFlagsBits = CKRequiredFeatureSet.description.getter();
  String.append(_:)(v5);
  sub_18A5F37E0();
  return v8;
}

void CKRecordZone.requiredFeatures.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  __int128 v5;

  v3 = objc_msgSend(v1, sel_requiredFeatures);
  sub_18A6353EC(&v4);

  if (v4)
  {
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v5;
  }
  else
  {
    __break(1u);
  }
}

double sub_18A62E6B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  uint64_t v5;

  CKRecordZone.requiredFeatures.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

void sub_18A62E6F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;

  v1 = a1[1];
  v2 = a1[2];
  *(_QWORD *)&v3 = *a1;
  *((_QWORD *)&v3 + 1) = v1;
  v4 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CKRecordZone.requiredFeatures.setter(&v3);
}

void CKRecordZone.requiredFeatures.setter(__int128 *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  id v6;
  __int128 v7;
  uint64_t v8;

  v2 = v1;
  v4 = *((_QWORD *)a1 + 2);
  type metadata accessor for CKRequiredFeatureSet(0);
  v7 = *a1;
  v8 = v4;
  sub_18A635428((uint64_t)&v7);
  v6 = v5;
  objc_msgSend(v2, sel_setRequiredFeatures_, v5);

}

void CKRecordZone.requiredFeatures.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  CKRecordZone.requiredFeatures.getter(a1);
  sub_18A5F379C();
}

void sub_18A62E7F4(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  *(_QWORD *)&v4 = *a1;
  *((_QWORD *)&v4 + 1) = v2;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    sub_18A5F3D48();
    sub_18A5F40AC();
    sub_18A5F3FAC();
    CKRecordZone.requiredFeatures.setter(&v4);
    sub_18A5F460C();
    sub_18A5F3944();
    swift_bridgeObjectRelease();
  }
  else
  {
    CKRecordZone.requiredFeatures.setter(&v4);
    sub_18A5F40C8();
  }
}

unint64_t sub_18A62E868(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return sub_18A62EB30(a1, a2, v4);
}

uint64_t sub_18A62E8CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_18A62BF14(a1, v1[4], v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_18A62E8EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;
  uint64_t v5;

  v2 = sub_18A62FD8C();
  result = v3(v2);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_18A62E924(uint64_t a1)
{
  uint64_t *v1;

  return sub_18A62C614(a1, v1[4], v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_18A62E948()
{
  return Array.init()();
}

uint64_t sub_18A62E950()
{
  return swift_deallocObject();
}

unint64_t sub_18A62E960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_18A62EC10(a1, v4);
}

void sub_18A62E990()
{
  sub_18A5F4304();
  sub_18A62FB0C();
  sub_18A5F379C();
}

void sub_18A62E9C4()
{
  sub_18A5F4304();
  sub_18A62FB0C();
  sub_18A5F379C();
}

void sub_18A62E9F8()
{
  sub_18A5F4304();
  sub_18A62FB0C();
  sub_18A5F379C();
}

void sub_18A62EA2C()
{
  sub_18A62FEE8();
  type metadata accessor for URL();
  sub_18A62F924((unint64_t *)&qword_1EDF6B568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_18A62FC9C();
  sub_18A62FC7C();
  sub_18A5F3814();
}

void sub_18A62EA94()
{
  sub_18A5F4304();
  sub_18A62FB0C();
  sub_18A5F379C();
}

void sub_18A62EAC8()
{
  sub_18A62FEE8();
  type metadata accessor for UUID();
  sub_18A62F924((unint64_t *)&unk_1EDF6A410, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_18A62FC9C();
  sub_18A62FC7C();
  sub_18A5F3814();
}

unint64_t sub_18A62EB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_18A62EC10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_18A62F8E8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x18D76CE2C](v9, a1);
      sub_18A61C6E8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_18A62ECD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  char v5;
  id v6;
  char v7;
  uint64_t v8;
  char v9;
  id v10;
  char v11;
  char v12;

  sub_18A61A92C();
  v1 = -1 << *(_BYTE *)(v0 + 32);
  v3 = v2 & ~v1;
  sub_18A62FB84();
  if ((v5 & 1) != 0)
  {
    sub_18A5F50F0(0, v4);
    v6 = sub_18A62FEAC();
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v1;
      v3 = (v3 + 1) & v8;
      sub_18A62FB84();
      if ((v9 & 1) != 0)
      {
        do
        {
          v10 = sub_18A62FEAC();
          v11 = static NSObject.== infix(_:_:)();

          if ((v11 & 1) != 0)
            break;
          v3 = (v3 + 1) & v8;
          sub_18A62FB84();
        }
        while ((v12 & 1) != 0);
      }
    }
  }
  return v3;
}

unint64_t sub_18A62EDAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_18A612EB8();
  v25 = v1;
  v26 = v2;
  v23 = v3;
  v24 = v4;
  v5 = v0;
  v7 = v6;
  v21 = v8;
  v22 = v9;
  v10 = v9(0);
  v11 = *(_QWORD *)(v10 - 8);
  sub_18A62FEDC();
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v21 - v12;
  v14 = -1 << *(_BYTE *)(v5 + 32);
  v15 = v7 & ~v14;
  if (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v11 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    do
    {
      v18(v13, *(_QWORD *)(v5 + 48) + v17 * v15, v10);
      sub_18A62F924(v23, v22, v24);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v19 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  return v15;
}

uint64_t sub_18A62EED0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_18A62DA74(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_18A62EEEC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_18A62DE48(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_18A62EF0C(uint64_t *a1)
{
  uint64_t v1;

  return sub_18A62DFB0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_18A62EF28(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_18A619E8C(a2);
    atomic_store(MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF50], v3), a1);
  }
  sub_18A5F379C();
}

unint64_t sub_18A62EF64()
{
  unint64_t result;

  result = qword_1EDF6B408;
  if (!qword_1EDF6B408)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKZoneFeature, &type metadata for CKZoneFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B408);
  }
  return result;
}

unint64_t sub_18A62EFA0()
{
  unint64_t result;

  result = qword_1EDF6B410;
  if (!qword_1EDF6B410)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKRecordFeature, &type metadata for CKRecordFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B410);
  }
  return result;
}

unint64_t sub_18A62EFDC()
{
  unint64_t result;

  result = qword_1EDF6B418;
  if (!qword_1EDF6B418)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKFieldFeature, &type metadata for CKFieldFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B418);
  }
  return result;
}

void sub_18A62F018(uint64_t *a1@<X8>)
{
  *a1 = sub_18A62BB98();
  sub_18A5F379C();
}

unint64_t sub_18A62F044(uint64_t a1)
{
  unint64_t result;

  result = sub_18A62F068();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18A62F068()
{
  unint64_t result;

  result = qword_1EDF6B438;
  if (!qword_1EDF6B438)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKZoneFeature, &type metadata for CKZoneFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B438);
  }
  return result;
}

unint64_t sub_18A62F0A8()
{
  unint64_t result;

  result = qword_1EDF6B440;
  if (!qword_1EDF6B440)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKZoneFeature, &type metadata for CKZoneFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B440);
  }
  return result;
}

unint64_t sub_18A62F0E4(uint64_t a1)
{
  unint64_t result;

  result = sub_18A62F108();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18A62F108()
{
  unint64_t result;

  result = qword_1EDF6B448;
  if (!qword_1EDF6B448)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKRecordFeature, &type metadata for CKRecordFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B448);
  }
  return result;
}

unint64_t sub_18A62F148()
{
  unint64_t result;

  result = qword_1EDF6B450;
  if (!qword_1EDF6B450)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKRecordFeature, &type metadata for CKRecordFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B450);
  }
  return result;
}

unint64_t sub_18A62F184(uint64_t a1)
{
  unint64_t result;

  result = sub_18A62F1A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18A62F1A8()
{
  unint64_t result;

  result = qword_1EDF6B458;
  if (!qword_1EDF6B458)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKFieldFeature, &type metadata for CKFieldFeature);
    atomic_store(result, (unint64_t *)&qword_1EDF6B458);
  }
  return result;
}

unint64_t sub_18A62F1E8()
{
  unint64_t result;

  result = qword_1EDF6B460[0];
  if (!qword_1EDF6B460[0])
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKFieldFeature, &type metadata for CKFieldFeature);
    atomic_store(result, qword_1EDF6B460);
  }
  return result;
}

void sub_18A62F224()
{
  JUMPOUT(0x18D76E7C4);
}

void sub_18A62F264(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  sub_18A62C14C(a1, a2, (uint64_t (*)(uint64_t))CKFeatureSet.subscript.getter, a3);
}

void sub_18A62F280(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_18A62C1BC(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))CKFeatureSet.subscript.setter);
}

void sub_18A62F2A4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  sub_18A62C14C(a1, a2, (uint64_t (*)(uint64_t))CKFeatureSet.subscript.getter, a3);
}

void sub_18A62F2C0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_18A62C1BC(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))CKFeatureSet.subscript.setter);
}

uint64_t dispatch thunk of CKFeatureProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CKFeatureProtocol.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CKFeatureProtocol.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

void type metadata accessor for CKZoneFeature()
{
  sub_18A5F3994();
}

void type metadata accessor for CKRecordFeature()
{
  sub_18A5F3994();
}

uint64_t _s8CloudKit13CKZoneFeatureVwxx_0()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s8CloudKit13CKZoneFeatureVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F379C();
}

void _s8CloudKit13CKZoneFeatureVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_18A5F3944();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  sub_18A5F37E0();
  sub_18A5F3824();
}

void _s8CloudKit13CKZoneFeatureVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  sub_18A5F379C();
}

uint64_t _s8CloudKit13CKZoneFeatureVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18A62F46C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CKFieldFeature()
{
  sub_18A5F3994();
}

uint64_t sub_18A62F4B8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_18A62F4C0()
{
  return swift_retain();
}

uint64_t sub_18A62F4C8()
{
  swift_bridgeObjectRelease();
  return sub_18A62F4F8();
}

uint64_t sub_18A62F4F8()
{
  return swift_release();
}

_QWORD *sub_18A62F500(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  swift_bridgeObjectRetain();
  sub_18A62F4C0();
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return a1;
}

_QWORD *sub_18A62F568(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  sub_18A62F4C0();
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  sub_18A62F4F8();
  return a1;
}

__n128 sub_18A62F5F4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_18A62F608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  sub_18A62F4F8();
  return a1;
}

uint64_t sub_18A62F664(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18A62F6A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CKFeatureSet.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKFeatureSet.Iterator);
}

void sub_18A62F700(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F40AC();
  sub_18A5F3824();
}

void type metadata accessor for CKRequiredFeatureSet()
{
  sub_18A5F3994();
}

void sub_18A62F748()
{
  sub_18A62FC34();
  sub_18A62FDC8();
  sub_18A62FB24();
}

void sub_18A62F78C()
{
  sub_18A62FB98();
  sub_18A62FD04();
}

void sub_18A62F7A0()
{
  sub_18A62FAE0();
}

void sub_18A62F7B0()
{
  type metadata accessor for FlattenSequence();
  sub_18A62FB2C();
}

void sub_18A62F7D4()
{
  type metadata accessor for LazySequence();
  sub_18A62FB24();
}

void sub_18A62F7F4()
{
  sub_18A62FD04();
}

void sub_18A62F808()
{
  sub_18A62FAE0();
}

void sub_18A62F818()
{
  sub_18A62FB2C();
}

void sub_18A62F82C()
{
  sub_18A62FBF4();
}

void sub_18A62F858()
{
  sub_18A62FC34();
  sub_18A62FAE0();
}

void sub_18A62F87C()
{
  type metadata accessor for LazyMapSequence();
  sub_18A62FAE0();
}

void sub_18A62F8A4()
{
  sub_18A62FB24();
}

void sub_18A62F8C8()
{
  sub_18A62FC34();
  JUMPOUT(0x18D76E7C4);
}

uint64_t sub_18A62F8E8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

void sub_18A62F924(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x18D76E7C4](a3, v5), a1);
  }
  sub_18A5F379C();
}

uint64_t sub_18A62F960(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_18A62F96C(uint64_t a1)
{
  sub_18A62F960(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

void sub_18A62F9AC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v2 = sub_18A62FD8C();
  *a1 = v3(v2);
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A62F9D8(uint64_t *a1)
{
  return sub_18A62EEEC(a1);
}

uint64_t sub_18A62FA00()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_18A62FA1C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A62E868(v1, v0);
}

uint64_t sub_18A62FA28()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A62FA60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *v5 = a1;
  a1[3] = v1;
  a1[4] = v2;
  a1[1] = v4;
  a1[2] = v3;
  return v4;
}

BOOL sub_18A62FA8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Int v10;
  Swift::Bool v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v11, v10);
}

uint64_t sub_18A62FAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18A62FAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 152))(v0, v1);
}

uint64_t sub_18A62FAC8()
{
  uint64_t v0;

  return v0;
}

void sub_18A62FAE0()
{
  JUMPOUT(0x18D76E7C4);
}

uint64_t sub_18A62FAE8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_18A62FAFC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_18A62FB04()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A62FB0C()
{
  return sub_18A62ECD4();
}

uint64_t sub_18A62FB18()
{
  return type metadata accessor for Array();
}

void sub_18A62FB24()
{
  JUMPOUT(0x18D76E7C4);
}

void sub_18A62FB2C()
{
  JUMPOUT(0x18D76E7C4);
}

void *sub_18A62FB58()
{
  return malloc(0x28uLL);
}

uint64_t sub_18A62FB98()
{
  return type metadata accessor for LazyMapSequence();
}

void sub_18A62FBAC()
{
  CKFeatureSet.insert<A>(_:)();
}

void sub_18A62FBC0()
{
  JUMPOUT(0x18D76CA0CLL);
}

uint64_t sub_18A62FBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 160), v1);
}

void sub_18A62FBE0()
{
  JUMPOUT(0x18D76E7C4);
}

uint64_t sub_18A62FBE8()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  return swift_bridgeObjectRelease();
}

void sub_18A62FBF4()
{
  JUMPOUT(0x18D76E7C4);
}

uint64_t sub_18A62FC2C()
{
  return type metadata accessor for Array();
}

uint64_t sub_18A62FC34()
{
  return type metadata accessor for Array();
}

uint64_t sub_18A62FC40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_18A62FC4C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;

  return sub_18A60F9A4(v2, v1, v0);
}

void sub_18A62FC5C(uint64_t *a1@<X8>)
{
  CKFeatureSet.removeAll(for:)(a1);
}

uint64_t sub_18A62FC6C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  return sub_18A62AB5C(a1, a2, v8, v9, a5, a6, a7, a8);
}

unint64_t sub_18A62FC7C()
{
  return sub_18A62EDAC();
}

uint64_t sub_18A62FC8C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t sub_18A62FC9C()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

void sub_18A62FCAC()
{
  JUMPOUT(0x18D76C754);
}

uint64_t sub_18A62FCBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_18A62FCCC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_18A62FCF4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(a1, v4, v2, v3);
}

void sub_18A62FD04()
{
  JUMPOUT(0x18D76E7C4);
}

uint64_t sub_18A62FD7C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_18A62FD8C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_18A62FDA0()
{
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_18A62FDAC(uint64_t a1)
{
  uint64_t v1;

  return sub_18A62E868(a1, v1);
}

uint64_t sub_18A62FDB4()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 136, 0);
}

void sub_18A62FDC0(uint64_t *a1@<X8>)
{
  CKFeatureSet.init()(a1);
}

uint64_t sub_18A62FDC8()
{
  return type metadata accessor for Dictionary();
}

uint64_t sub_18A62FDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A5F1010(a1, a2, 1, v2);
}

uint64_t sub_18A62FDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_18A62FDE8()
{
  uint64_t *v0;

  return sub_18A5F101C(v0);
}

uint64_t sub_18A62FDF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A62FE04()
{
  uint64_t v0;

  return v0;
}

__n128 sub_18A62FE10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18A62FE1C()
{
  return 16;
}

uint64_t sub_18A62FE28()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A62FE3C()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t sub_18A62FE48()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_18A62FE50(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_18A62FE5C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_18A62FE64()
{
  return swift_release();
}

uint64_t sub_18A62FE6C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A62FE80()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A62FE8C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A62FE98()
{
  uint64_t v0;

  return v0;
}

id sub_18A62FEAC()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 48) + 8 * v0);
}

uint64_t sub_18A62FEB8()
{
  return 0;
}

uint64_t sub_18A62FEC4()
{
  return type metadata accessor for Array();
}

uint64_t sub_18A62FED0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_18A62FEE8()
{
  return 0;
}

void sub_18A62FEFC(unint64_t *a1)
{
  uint64_t *v1;

  sub_18A62EF28(a1, v1);
}

uint64_t sub_18A62FF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_18A62FF10()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_18A62FF24(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&unk_1E1F57D20, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_18A62FF70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18A62FFA4
                                                            + 4 * asc_18A83AA58[a1]))(0x656D614E656E6F7ALL, 0xE800000000000000);
}

unint64_t sub_18A62FFA8()
{
  return sub_18A63088C();
}

uint64_t sub_18A62FFB4()
{
  return sub_18A5F38B4();
}

uint64_t sub_18A62FFC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18A62FFF8 + 4 * byte_18A83AA5C[a1]))(0x656D614E656E6F7ALL, 0xE800000000000000);
}

unint64_t sub_18A62FFFC()
{
  return sub_18A63088C();
}

uint64_t sub_18A630008()
{
  return sub_18A5F38B4();
}

void sub_18A630018(char *a1)
{
  sub_18A60F7D4(*a1);
}

void sub_18A630024()
{
  sub_18A66D534();
}

void sub_18A63002C(uint64_t a1)
{
  char *v1;

  sub_18A64CDD8(a1, *v1);
}

void sub_18A630034()
{
  sub_18A66D65C();
}

unint64_t sub_18A63003C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_18A62FF24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_18A630068@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_18A62FF70(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18A630090()
{
  unsigned __int8 *v0;

  return sub_18A62FFC4(*v0);
}

uint64_t sub_18A630098@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_18A62FF6C(a1);
  *a2 = result;
  return result;
}

void sub_18A6300BC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_18A6300C8()
{
  sub_18A630394();
  return CodingKey.description.getter();
}

uint64_t sub_18A6300F0()
{
  sub_18A630394();
  return CodingKey.debugDescription.getter();
}

_QWORD *CKRecordZoneID.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_18A5F101C(&qword_1EDF69328);
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_18A608B00(a1, a1[3]);
  sub_18A630394();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_18A608B60((uint64_t)a1);
  }
  else
  {
    v5 = sub_18A5F3B44();
    v7 = v6;
    LOBYTE(v15) = 1;
    v13 = sub_18A5F3B44();
    v14 = v8;
    sub_18A5F101C(&qword_1EDF692E0);
    sub_18A630644(&qword_1EDF692F0, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEE9A0]);
    sub_18A5F4730();
    type metadata accessor for Scope(0);
    sub_18A6306A4(&qword_1EDF69320, (uint64_t)&protocol conformance descriptor for CKDatabaseScope);
    sub_18A5F4730();
    v12 = (void *)MEMORY[0x18D76C7CC](v5, v7);
    swift_bridgeObjectRelease();
    v10 = (void *)MEMORY[0x18D76C7CC](v13, v14);
    swift_bridgeObjectRelease();
    if (v16)
    {
      v11 = (void *)MEMORY[0x18D76C7CC](v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = 0;
    }
    v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithZoneName_ownerName_anonymousCKUserID_databaseScope_, v12, v10, v11, v15);

    sub_18A5F489C();
    sub_18A608B60((uint64_t)a1);
  }
  return v4;
}

unint64_t sub_18A630394()
{
  unint64_t result;

  result = qword_1EDF692F8;
  if (!qword_1EDF692F8)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83ABC8, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF692F8);
  }
  return result;
}

uint64_t CKRecordZoneID.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v3 = v1;
  v5 = sub_18A5F101C(&qword_1EDF69330);
  MEMORY[0x1E0C80A78](v5);
  sub_18A608B00(a1, a1[3]);
  sub_18A630394();
  v6 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v7 = sub_18A5F3CA8(v6, sel_zoneName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A6308A0();
  sub_18A630870();
  if (v2)
  {
    sub_18A5F39C8();
    return sub_18A5F394C();
  }
  else
  {
    v8 = sub_18A5F394C();
    v9 = sub_18A5F3CA8(v8, sel_ownerName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A6308A0();
    sub_18A630870();
    sub_18A5F394C();
    sub_18A6305E4(v3);
    sub_18A5F101C(&qword_1EDF692E0);
    sub_18A630644(&qword_1EDF692E8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEE988]);
    sub_18A5F41F4();
    v10 = sub_18A5F394C();
    sub_18A5F3CA8(v10, sel_databaseScope);
    type metadata accessor for Scope(0);
    sub_18A6306A4(&qword_1EDF69310, (uint64_t)&protocol conformance descriptor for CKDatabaseScope);
    sub_18A5F41F4();
    return sub_18A5F39C8();
  }
}

_QWORD *sub_18A63059C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = CKRecordZoneID.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_18A6305C4(_QWORD *a1)
{
  return CKRecordZoneID.encode(to:)(a1);
}

uint64_t sub_18A6305E4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_anonymousCKUserID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18A630644(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_18A619E8C(&qword_1EDF692E0);
    v8 = a2;
    result = MEMORY[0x18D76E7C4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18A6306A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Scope(255);
    result = MEMORY[0x18D76E7C4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18A630730 + 4 * byte_18A83AA65[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18A630764 + 4 * byte_18A83AA60[v4]))();
}

uint64_t sub_18A630764(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A63076C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A630774);
  return result;
}

uint64_t sub_18A630780(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A630788);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18A63078C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A630794(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

unint64_t sub_18A6307B4()
{
  unint64_t result;

  result = qword_1EDF6B598;
  if (!qword_1EDF6B598)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83ABA0, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF6B598);
  }
  return result;
}

unint64_t sub_18A6307F4()
{
  unint64_t result;

  result = qword_1EDF69308;
  if (!qword_1EDF69308)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AAD8, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69308);
  }
  return result;
}

unint64_t sub_18A630834()
{
  unint64_t result;

  result = qword_1EDF69300;
  if (!qword_1EDF69300)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AB00, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69300);
  }
  return result;
}

uint64_t sub_18A630870()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

unint64_t sub_18A63088C()
{
  return 0xD000000000000011;
}

void sub_18A6308A0()
{
  void *v0;

}

void CKContainer.fetchAllLongLivedOperationIDs(completionHandler:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_18A5F3938((uint64_t)sub_18A63093C, MEMORY[0x1E0C809B0], 1107296256, v2, v3);
  swift_retain();
  swift_release();
  objc_msgSend(v0, sel_fetchAllLongLivedOperationIDsWithCompletionHandler_, v1);
  _Block_release(v1);
}

uint64_t sub_18A63093C(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  else
    v5 = 0;
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6309BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A6309CC()
{
  return swift_release();
}

uint64_t CKContainer.allLongLivedOperationIDs()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return sub_18A5F4194();
}

uint64_t sub_18A6309E4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[16];
  v0[7] = v0 + 15;
  v2 = sub_18A634FAC((uint64_t)sub_18A630A68);
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_18A630AE4;
  v3[3] = &unk_1E1F5BD30;
  v3[4] = v2;
  objc_msgSend(v1, sel_fetchAllLongLivedOperationIDsWithCompletionHandler_, v3);
  return sub_18A5F3C94();
}

uint64_t sub_18A630A68()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 136) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A630AA8()
{
  uint64_t v0;

  return sub_18A5F43FC(*(_QWORD *)(v0 + 120), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A630AB4()
{
  uint64_t v0;

  swift_willThrow();
  return sub_18A5F4008(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A630AE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_18A672150(v3, a3);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_18A6721A8(v3, v5);
}

void CKContainer.fetchLongLivedOperation(withID:completionHandler:)()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x18D76C7CC]();
  v2 = sub_18A5F3938((uint64_t)sub_18A630BE4, MEMORY[0x1E0C809B0], 1107296256, v3, v4);
  swift_retain();
  swift_release();
  objc_msgSend(v0, sel_fetchLongLivedOperationWithID_completionHandler_, v1, v2);
  _Block_release(v2);

}

void sub_18A630BE4(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t CKContainer.longLivedOperation(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A630C6C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[18];
  v2 = MEMORY[0x18D76C7CC](v0[16], v0[17]);
  v0[19] = v2;
  v0[7] = v0 + 15;
  v3 = sub_18A634FAC((uint64_t)sub_18A630D0C);
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_18A630DBC;
  v4[3] = &unk_1E1F5A3E0;
  v4[4] = v3;
  objc_msgSend(v1, sel_fetchLongLivedOperationWithID_completionHandler_, v2, v4);
  return sub_18A5F3C94();
}

uint64_t sub_18A630D0C()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 160) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A630D4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_18A630D88()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return sub_18A5F4008(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A630DBC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_18A672150(v3, a3);
  }
  else
  {
    v5 = a2;
    sub_18A6721B8(v3, (uint64_t)a2);
  }
}

void CKContainer.configuredWith<A>(configuration:group:body:)(void *a1, void *a2, void (*a3)(void))
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;

  v4 = v3;
  swift_getObjectType();
  sub_18A60B8D0(0, qword_1EDF6A848);
  v8 = a2;
  v9 = a1;
  sub_18A630F04();
  v11 = v10;
  v12 = objc_msgSend(v4, sel_implementation);
  v13 = v11;
  sub_18A630F40();
  v15 = v14;
  a3();
  sub_18A631180((uint64_t)v15, (uint64_t)nullsub_3);

}

void sub_18A630F04()
{
  void *v0;
  void *v1;
  id v2;

  v2 = objc_allocWithZone((Class)sub_18A634FBC());
  sub_18A635024(v2, sel_initWithConfiguration_group_);

  sub_18A5F3824();
}

void sub_18A630F40()
{
  void *v0;
  void *v1;
  id v2;

  v2 = objc_allocWithZone((Class)sub_18A634FBC());
  sub_18A635024(v2, sel_initWithImplementation_convenienceConfiguration_);

  sub_18A5F3824();
}

uint64_t CKContainer.configuredWith<A>(configuration:group:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = swift_getObjectType();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A630FBC(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  int *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int *v15;

  v2 = (void *)v1[4];
  v3 = (int *)v1[5];
  v4 = (void *)v1[3];
  sub_18A5F3DF8(a1, qword_1EDF6A848);
  v5 = v2;
  v6 = v4;
  sub_18A630F04();
  v8 = (void *)v7;
  v1[9] = v7;
  v9 = sub_18A5F3AD8(v7, sel_implementation);
  v10 = v8;
  sub_18A630F40();
  v12 = v11;
  v1[10] = v11;
  v15 = (int *)((char *)v3 + *v3);
  v13 = (_QWORD *)swift_task_alloc();
  v1[11] = v13;
  *v13 = v1;
  v13[1] = sub_18A6310A8;
  return ((uint64_t (*)(_QWORD, uint64_t))v15)(v1[2], v12);
}

uint64_t sub_18A6310A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A631100()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 72);
  v2 = *(void **)(v0 + 80);
  sub_18A631180((uint64_t)v2, (uint64_t)nullsub_3);

  return sub_18A5F4680(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A631140()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 72);
  v2 = *(void **)(v0 + 80);
  sub_18A631180((uint64_t)v2, (uint64_t)nullsub_3);

  return sub_18A5F4680(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A631180(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;

  ObjectType = swift_getObjectType();
  v6 = a1;
  sub_18A6349A4((uint64_t)&v6, a2, 0, ObjectType, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v5);
  sub_18A60A0E0();
}

uint64_t CKContainer.discoverUserIdentities(forEmailAddresses:completionHandler:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return sub_18A6313C8(a1, a2, a3, (int)&selRef_lookupInfosWithEmails_, (int)&unk_1E1F5C0A0, (int)sub_18A634E00, (int)sub_18A63266C, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t CKContainer.userIdentities(forEmailAddresses:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631214(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A631288);
  return sub_18A6312D0(v6, v7, v8);
}

uint64_t sub_18A631288()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_18A5F4754();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    sub_18A634F28();

    v2 = sub_18A634EC0();
    return sub_18A5F4214(v2, v3);
  }
}

uint64_t sub_18A6312D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A6312E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B6D0);
  *v0 = v1;
  v0[1] = sub_18A631364;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

uint64_t sub_18A631364()
{
  uint64_t v0;

  sub_18A634E74();
  if (!v0)
    sub_18A634F08();
  sub_18A5F3840();
  return sub_18A5F3A94();
}

uint64_t CKContainer.discoverUserIdentities(forPhoneNumbers:completionHandler:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return sub_18A6313C8(a1, a2, a3, (int)&selRef_lookupInfosWithPhoneNumbers_, (int)&unk_1E1F5C050, (int)sub_18A634D44, (int)sub_18A63266C, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

#error "18A63144C: call analysis failed (funcsize=44)"

uint64_t CKContainer.userIdentities(forPhoneNumbers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631488(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A6314FC);
  return sub_18A631574(v6, v7, v8);
}

uint64_t sub_18A6314FC()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_18A5F4754();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    sub_18A634F28();

    v2 = sub_18A634EC0();
    return sub_18A5F4214(v2, v3);
  }
}

uint64_t sub_18A631544()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);

  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A631574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A631588()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B6D0);
  *v0 = v1;
  v0[1] = sub_18A631608;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

uint64_t sub_18A631608()
{
  uint64_t v0;

  sub_18A634E74();
  if (!v0)
    sub_18A634F08();
  sub_18A5F3840();
  return sub_18A5F3A94();
}

uint64_t sub_18A631648()
{
  uint64_t v0;

  return sub_18A5F43FC(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A631650()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void CKContainer.discoverUserIdentities(forUserRecordIDs:completionHandler:)(uint64_t a1)
{
  sub_18A631698(a1);
}

void sub_18A631698(uint64_t a1)
{
  id v1;
  id v2;

  v1 = sub_18A5F3888(a1, sel_implementation);
  v2 = sub_18A5F3888((uint64_t)v1, sel_convenienceConfiguration);
  sub_18A631BCC();

}

uint64_t CKContainer.userIdentities(forUserRecordIDs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631758(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A631288);
  return sub_18A6317CC(v6, v7, v8);
}

uint64_t sub_18A6317CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A6317E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B6B0);
  *v0 = v1;
  v0[1] = sub_18A631364;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

uint64_t CKContainer.fetchShareParticipants(forEmailAddresses:completionHandler:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return sub_18A6313C8(a1, a2, a3, (int)&selRef_lookupInfosWithEmails_, (int)&unk_1E1F5BF60, (int)sub_18A634C50, (int)sub_18A633698, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t CKContainer.shareParticipants(forEmailAddresses:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631894(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A631288);
  return sub_18A631908(v6, v7, v8);
}

uint64_t sub_18A631908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A63191C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B698);
  *v0 = v1;
  v0[1] = sub_18A631364;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

uint64_t CKContainer.fetchShareParticipants(forPhoneNumbers:completionHandler:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return sub_18A6313C8(a1, a2, a3, (int)&selRef_lookupInfosWithPhoneNumbers_, (int)&unk_1E1F5BF10, (int)sub_18A634C08, (int)sub_18A633698, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_18A6319C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (*a23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v23;
  const char **v24;
  const char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  sub_18A5F44DC();
  v40 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  objc_opt_self();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v35 = sub_18A63503C((uint64_t)isa, *v25);

  sub_18A635018(v36, &qword_1EDF6B578);
  v37 = sub_18A635030();

  v38 = sub_18A5F37B4();
  *(_QWORD *)(v38 + 16) = v29;
  *(_QWORD *)(v38 + 24) = v27;
  sub_18A634FA4();
  a23(v37, v33, v31, v40, v38);
  swift_bridgeObjectRelease();
  return sub_18A5F4520();
}

uint64_t CKContainer.shareParticipants(forPhoneNumbers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631AA8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A631288);
  return sub_18A631B1C(v6, v7, v8);
}

uint64_t sub_18A631B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A631B30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B698);
  *v0 = v1;
  v0[1] = sub_18A631364;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

void CKContainer.fetchShareParticipants(forUserRecordIDs:completionHandler:)(uint64_t a1)
{
  sub_18A631698(a1);
}

uint64_t sub_18A631BCC()
{
  void (*v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_18A5F44DC();
  v18 = v0;
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = objc_opt_self();
  sub_18A5F3DF8(v11, (unint64_t *)&unk_1EDF6A8F0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = sub_18A63503C((uint64_t)isa, sel_lookupInfosWithRecordIDs_);

  sub_18A635018(v14, &qword_1EDF6B578);
  v15 = sub_18A635030();

  v16 = sub_18A5F37B4();
  *(_QWORD *)(v16 + 16) = v6;
  *(_QWORD *)(v16 + 24) = v4;
  swift_retain();
  v18(v15, v10, v8, v2, v16);
  swift_bridgeObjectRelease();
  return sub_18A5F4520();
}

uint64_t CKContainer.shareParticipants(forUserRecordIDs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631CC8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A631288);
  return sub_18A631D3C(v6, v7, v8);
}

uint64_t sub_18A631D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A631D50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B678);
  *v0 = v1;
  v0[1] = sub_18A631364;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

uint64_t CKContainer.fetchShareMetadatas(for:completionHandler:)(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_18A5F3AD8(a1, sel_implementation);
  v3 = sub_18A5F3AD8((uint64_t)v2, sel_convenienceConfiguration);
  v4 = type metadata accessor for URL();
  sub_18A5F3DF8(v4, &qword_1EDF6B618);
  sub_18A631EB0();
  v5 = Dictionary.init(dictionaryLiteral:)();
  sub_18A631EF0(a1, v5);

  return swift_bridgeObjectRelease();
}

unint64_t sub_18A631EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6B568;
  if (!qword_1EDF6B568)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0CB0018], v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6B568);
  }
  return result;
}

uint64_t sub_18A631EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = sub_18A5F3DF8(a1, &qword_1EDF6B670);
  swift_bridgeObjectRetain();
  v4 = sub_18A634548();
  if (*(_QWORD *)(a2 + 16))
    sub_18A634AAC(a2, v4);
  v5 = sub_18A5F37B4();
  *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9E0];
  swift_retain();
  CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter((uint64_t)sub_18A634B38, v5);
  v6 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v6);
  sub_18A634FA4();
  CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter((uint64_t)sub_18A634B48, v3);
  sub_18A5F4314(v7, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_);

  return sub_18A5F4120();
}

uint64_t CKContainer.shareMetadatas(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A631FEC()
{
  uint64_t *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[3];
  v0[4] = (uint64_t)objc_msgSend(v1, sel_implementation);
  v2 = objc_msgSend(v1, sel_convenienceConfiguration);
  v0[5] = (uint64_t)v2;
  v3 = type metadata accessor for URL();
  sub_18A5F3DF8(v3, &qword_1EDF6B618);
  sub_18A631EB0();
  v4 = Dictionary.init(dictionaryLiteral:)();
  v0[6] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_18A6320D0;
  return sub_18A634F54(v0[2], v4, v0[3], (uint64_t)v2);
}

uint64_t sub_18A6320D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A634ED0();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    v3 = *(void **)(v1 + 40);
    v4 = *(void **)(v1 + 32);
    swift_bridgeObjectRelease();

    v5 = sub_18A634EC0();
    return sub_18A5F4214(v5, v6);
  }
}

uint64_t sub_18A632124()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 40);
  v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A632164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A63217C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  sub_18A5F101C(&qword_1EDF6B660);
  *v6 = v0;
  v6[1] = sub_18A632238;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18A632238()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3A94();
}

uint64_t sub_18A632298()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CKContainer.shareMetadatas(for:invitationTokensByShareURL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6322D8(uint64_t a1)
{
  uint64_t *v1;
  id v2;
  id v3;
  _QWORD *v4;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v1[5] = (uint64_t)v2;
  v3 = sub_18A5F3888((uint64_t)v2, sel_convenienceConfiguration);
  v1[6] = (uint64_t)v3;
  v4 = (_QWORD *)swift_task_alloc();
  v1[7] = (uint64_t)v4;
  *v4 = v1;
  v4[1] = sub_18A632368;
  return sub_18A634F54(v1[2], v1[3], v1[4], (uint64_t)v3);
}

uint64_t sub_18A632368()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_18A634ED0();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    v3 = *(void **)(v1 + 40);

    v4 = sub_18A634EC0();
    return sub_18A5F4214(v4, v5);
  }
}

uint64_t sub_18A6323B4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void CKContainer.accept(_:completionHandler:)(uint64_t a1)
{
  id v1;
  id v2;

  v1 = sub_18A5F3888(a1, sel_implementation);
  v2 = sub_18A5F3888((uint64_t)v1, sel_convenienceConfiguration);
  sub_18A632474();

}

uint64_t sub_18A632474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  sub_18A634F5C();
  sub_18A5F3DF8(v1, &qword_1EDF6B658);
  v2 = sub_18A634FEC();
  v3 = sub_18A6337C4(v2, &qword_1EDF6C7C0, (uint64_t)off_1E1F543B8, (SEL *)&selRef_initWithShareMetadatas_);
  v4 = sub_18A5F37B4();
  *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9E0];
  swift_retain();
  CKAcceptSharesOperation.perShareResultBlock.setter((uint64_t)sub_18A634974, v4);
  v5 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v5);
  sub_18A634FA4();
  CKAcceptSharesOperation.acceptSharesResultBlock.setter((uint64_t)sub_18A634E70, v0);
  sub_18A5F4314(v6, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_);

  return sub_18A5F4120();
}

uint64_t CKContainer.accept(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A632554(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A634F30((uint64_t)v2);
  v4 = sub_18A5F3888(v3, sel_convenienceConfiguration);
  sub_18A634F3C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v5;
  v6 = sub_18A5F39D8(v5, (uint64_t)sub_18A631288);
  return sub_18A6325C8(v6, v7, v8);
}

uint64_t sub_18A6325C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A6325DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_18A634EB0();
  sub_18A634E94(v2);
  v3 = swift_task_alloc();
  sub_18A634F48(v3);
  sub_18A5F101C(&qword_1EDF6B648);
  *v0 = v1;
  v0[1] = sub_18A631364;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3B58();
}

ValueMetadata *type metadata accessor for CKContainer.Application()
{
  return &type metadata for CKContainer.Application;
}

uint64_t sub_18A63266C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  _QWORD *v4;
  id v5;
  uint64_t v7;
  uint64_t v8;

  sub_18A634F5C();
  sub_18A5F3DF8(v0, &qword_1EDF6B6C0);
  v1 = sub_18A634FEC();
  v2 = sub_18A6337C4(v1, &qword_1EDF6B578, (uint64_t)off_1E1F54578, (SEL *)&selRef_initWithUserIdentityLookupInfos_);
  *(_QWORD *)(sub_18A5F37B4() + 16) = MEMORY[0x1E0DEE9E0];
  v3 = sub_18A5F3938((uint64_t)sub_18A632824, MEMORY[0x1E0C809B0], 1107296256, v7, v8);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_setUserIdentityDiscoveredBlock_, v3);
  _Block_release(v3);
  v4 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v4);
  sub_18A634FA4();
  v5 = CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter((uint64_t)sub_18A634E70, (uint64_t)v3);
  sub_18A5F4314((uint64_t)v5, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_);

  return swift_release();
}

void sub_18A6327B8(void *a1, void *a2)
{
  id v4;
  id v5;

  swift_beginAccess();
  v4 = a2;
  v5 = a1;
  sub_18A69E34C();
  swift_endAccess();

}

void sub_18A632824(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, id);
  id v6;
  id v7;

  v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, v6);
  swift_release();

}

#error "18A632984: call analysis failed (funcsize=66)"

uint64_t sub_18A6329B4@<X0>(unint64_t *a1@<X0>, SEL *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  Swift::Int v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  BOOL v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  char isUnique;
  id v47;
  _QWORD *v49;
  int64_t v50;
  unint64_t v52;
  SEL *v53;
  _QWORD *v54;

  v6 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    v52 = 0;
    v7 = 0;
    v8 = 0;
    v9 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(v6 + 32);
    v7 = ~v10;
    v52 = v6 + 64;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(v6 + 64);
    v9 = *a1;
  }
  swift_bridgeObjectRetain();
  v13 = 0;
  v50 = (unint64_t)(v7 + 64) >> 6;
  v49 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v53 = a2;
  while (1)
  {
    v14 = v13;
    if ((v9 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaDictionary.Iterator.next()())
      goto LABEL_44;
    sub_18A60B8D0(0, &qword_1EDF6B578);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v17 = v54;
    swift_unknownObjectRelease();
    v4 = sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6ADD0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v18 = v54;
    swift_unknownObjectRelease();
    if (!v54)
      goto LABEL_44;
LABEL_29:
    v23 = sub_18A6145B4(v17, a2);
    if (v24)
    {
      v31 = v23;
      v32 = v24;
      v47 = v18;
      isUnique = swift_isUniquelyReferenced_nonNull_native();
      v54 = v49;
      sub_18A63500C();
      sub_18A634FF8();
      if (v35)
        goto LABEL_46;
      v36 = v33;
      v37 = v34;
      sub_18A5F101C((uint64_t *)&unk_1EDF6B6E0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v4))
      {
        v38 = sub_18A63500C();
        if ((v37 & 1) != (v39 & 1))
          goto LABEL_48;
        v36 = v38;
      }
      v4 = (Swift::Int)v49;
      if ((v37 & 1) != 0)
      {
        v40 = v49[7];

        *(_QWORD *)(v40 + 8 * v36) = v47;
        v41 = v47;
      }
      else
      {
        v49[(v36 >> 6) + 8] |= 1 << v36;
        v42 = (uint64_t *)(v49[6] + 16 * v36);
        *v42 = v31;
        v42[1] = v32;
        v41 = v47;
        *(_QWORD *)(v49[7] + 8 * v36) = v47;
        v43 = v49[2];
        v35 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v35)
          goto LABEL_47;
        v49[2] = v44;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v53;
    }
    else
    {
      if (qword_1ECD96788 != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      sub_18A60990C(v25, (uint64_t)qword_1ECD96770);
      v26 = v17;
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      v4 = v28;
      if (os_log_type_enabled(v27, v28))
      {
        v29 = sub_18A5F3830();
        v30 = (_QWORD *)sub_18A5F3830();
        *(_DWORD *)v29 = 138412290;
        *(_QWORD *)(v29 + 4) = v26;
        *v30 = v17;
        _os_log_impl(&dword_18A5C5000, v27, (os_log_type_t)v4, a3, (uint8_t *)v29, 0xCu);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        swift_arrayDestroy();
        sub_18A5F392C();
      }

    }
  }
  if (v8)
  {
    v15 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v16 = v15 | (v13 << 6);
LABEL_28:
    v22 = *(void **)(*(_QWORD *)(v9 + 56) + 8 * v16);
    v17 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v16);
    v18 = v22;
    if (!v17)
      goto LABEL_44;
    goto LABEL_29;
  }
  v19 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v19 >= v50)
      goto LABEL_44;
    v20 = *(_QWORD *)(v52 + 8 * v19);
    ++v13;
    if (!v20)
    {
      v13 = v14 + 2;
      if (v14 + 2 >= v50)
        goto LABEL_44;
      v20 = *(_QWORD *)(v52 + 8 * v13);
      if (!v20)
      {
        v13 = v14 + 3;
        if (v14 + 3 >= v50)
          goto LABEL_44;
        v20 = *(_QWORD *)(v52 + 8 * v13);
        if (!v20)
        {
          v13 = v14 + 4;
          if (v14 + 4 >= v50)
            goto LABEL_44;
          v20 = *(_QWORD *)(v52 + 8 * v13);
          if (!v20)
          {
            v21 = v14 + 5;
            while (v21 < v50)
            {
              v20 = *(_QWORD *)(v52 + 8 * v21++);
              if (v20)
              {
                v13 = v21 - 1;
                goto LABEL_27;
              }
            }
LABEL_44:
            result = sub_18A62F4F8();
            *a4 = v49;
            return result;
          }
        }
      }
    }
LABEL_27:
    v8 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v13 << 6);
    goto LABEL_28;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

#error "18A632FC4: call analysis failed (funcsize=66)"

uint64_t sub_18A632FF4@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  char v39;
  Class isa;
  _BOOL8 v41;
  Swift::Int v42;
  unint64_t v43;
  char v44;
  Swift::Bool v45;
  unint64_t v46;
  char v47;
  Class v48;
  Class v49;
  BOOL v50;
  objc_class *v51;
  id v52;
  uint64_t result;
  unint64_t v54;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  NSObject *v59;

  v2 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    v58 = 0;
    v3 = 0;
    v4 = 0;
    v5 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(v2 + 32);
    v3 = ~v6;
    v58 = v2 + 64;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v4 = v8 & *(_QWORD *)(v2 + 64);
    v5 = *a1;
  }
  swift_bridgeObjectRetain();
  v9 = 0;
  v57 = (unint64_t)(v3 + 64) >> 6;
  v56 = MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v10 = v9;
    if ((v5 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.next()())
        goto LABEL_51;
      sub_18A60B8D0(0, &qword_1EDF6B578);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v13 = v59;
      swift_unknownObjectRelease();
      sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6ADD0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v14 = v59;
      swift_unknownObjectRelease();
      if (!v59)
        goto LABEL_51;
      goto LABEL_29;
    }
    if (!v4)
      break;
    v11 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v12 = v11 | (v9 << 6);
LABEL_28:
    v18 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v12);
    v13 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v12);
    v14 = v18;
    if (!v13)
      goto LABEL_51;
LABEL_29:
    v19 = -[NSObject userRecordID](v13, sel_userRecordID);
    if (v19)
    {
      v29 = v19;
      v30 = v56;
      v54 = v5;
      if ((v56 & 0xC000000000000001) != 0)
      {
        if (v56 >= 0)
          v30 = (v56 & 0xFFFFFFFFFFFFFF8);
        v31 = v19;
        v32 = v14;
        v33 = __CocoaSet.count.getter();
        if (__OFADD__(v33, 1))
          goto LABEL_54;
        sub_18A66B910((uint64_t)v30, v33 + 1);
        v30 = v34;
      }
      else
      {
        v35 = v19;
        v36 = v14;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v59 = v30;
      sub_18A62E9C4();
      isa = v30[2].isa;
      v41 = (v39 & 1) == 0;
      v42 = (Swift::Int)isa + v41;
      if (__OFADD__(isa, v41))
        goto LABEL_53;
      v43 = v38;
      v44 = v39;
      sub_18A5F101C(&qword_1EDF6B6C8);
      v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
      v5 = v54;
      if (v45)
      {
        sub_18A62E9C4();
        if ((v44 & 1) != (v47 & 1))
          goto LABEL_56;
        v43 = v46;
      }
      v56 = (uint64_t)v30;
      if ((v44 & 1) != 0)
      {
        v48 = v30[7].isa;

        *((_QWORD *)v48 + v43) = v14;
      }
      else
      {
        v30[(v43 >> 6) + 8].isa = (Class)((uint64_t)v30[(v43 >> 6) + 8].isa | (1 << v43));
        *((_QWORD *)v30[6].isa + v43) = v29;
        *((_QWORD *)v30[7].isa + v43) = v14;
        v49 = v30[2].isa;
        v50 = __OFADD__(v49, 1);
        v51 = (Class)((char *)v49 + 1);
        if (v50)
          goto LABEL_55;
        v30[2].isa = v51;
        v52 = v29;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1ECD96788 != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      sub_18A60990C(v20, (uint64_t)qword_1ECD96770);
      v21 = v13;
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc();
        v25 = v5;
        v26 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v24 = 138412290;
        *(_QWORD *)(v24 + 4) = v21;
        *v26 = v13;
        _os_log_impl(&dword_18A5C5000, v22, v23, "Unexpected lookup info that lacks user record id: %@", (uint8_t *)v24, 0xCu);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        swift_arrayDestroy();
        v27 = v26;
        v5 = v25;
        MEMORY[0x18D76E86C](v27, -1, -1);
        MEMORY[0x18D76E86C](v24, -1, -1);
        v28 = v21;
      }
      else
      {

        v28 = v14;
        v14 = v21;
        v22 = v21;
      }

    }
  }
  v15 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v15 >= v57)
      goto LABEL_51;
    v16 = *(_QWORD *)(v58 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v10 + 2;
      if (v10 + 2 >= v57)
        goto LABEL_51;
      v16 = *(_QWORD *)(v58 + 8 * v9);
      if (!v16)
      {
        v9 = v10 + 3;
        if (v10 + 3 >= v57)
          goto LABEL_51;
        v16 = *(_QWORD *)(v58 + 8 * v9);
        if (!v16)
        {
          v9 = v10 + 4;
          if (v10 + 4 >= v57)
            goto LABEL_51;
          v16 = *(_QWORD *)(v58 + 8 * v9);
          if (!v16)
          {
            v17 = v10 + 5;
            while (v17 < v57)
            {
              v16 = *(_QWORD *)(v58 + 8 * v17++);
              if (v16)
              {
                v9 = v17 - 1;
                goto LABEL_27;
              }
            }
LABEL_51:
            result = sub_18A62F4F8();
            *a2 = v56;
            return result;
          }
        }
      }
    }
LABEL_27:
    v4 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_28;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6A8F0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_18A633580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_18A5F101C(&qword_1EDF6B6B8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_18A631BCC();
  return swift_release();
}

uint64_t sub_18A633698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = v5;
  sub_18A60B8D0(0, &qword_1EDF6B688);
  v11 = swift_bridgeObjectRetain();
  v12 = sub_18A6337C4(v11, &qword_1EDF6B578, (uint64_t)off_1E1F54578, (SEL *)&selRef_initWithUserIdentityLookupInfos_);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = MEMORY[0x1E0DEE9E0];
  swift_retain();
  CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter((uint64_t)sub_18A634BB4, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a4;
  v14[4] = a5;
  swift_retain();
  swift_retain();
  CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter((uint64_t)sub_18A634E70, (uint64_t)v14);
  objc_msgSend(v6, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_, v12, a2, a3);

  return swift_release();
}

id sub_18A6337C4(uint64_t a1, unint64_t *a2, uint64_t a3, SEL *a4)
{
  id v6;
  Class isa;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18A60B8D0(0, a2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, *a4, isa);

  return v8;
}

void sub_18A633850(void *a1, char a2)
{
  id v2;

  if ((a2 & 1) != 0)
  {
    v2 = a1;
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
  }
  sub_18A634F98();
  sub_18A634F8C();
  sub_18A634F78();
}

#error "18A6339AC: call analysis failed (funcsize=66)"

void sub_18A6339DC()
{
  char v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void **__return_ptr, void **, uint64_t, uint64_t);
  char v5;
  id v6;
  void *v7;
  void *v8;

  sub_18A634FCC();
  if ((v5 & 1) != 0)
  {
    v6 = v1;
  }
  else
  {
    v8 = v1;
    v4(&v7, &v8, v2, v3);
    v1 = v7;
  }
  sub_18A634D74(v1, v0);
  sub_18A634F98();
  sub_18A634D80(v1, v0);
  sub_18A634F8C();
  sub_18A60A0E0();
}

uint64_t sub_18A633A48@<X0>(uint64_t *a1@<X0>, SEL *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  Swift::Int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char isUnique;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v4 = *a1;
  v47 = *a1 + 64;
  v5 = 1 << *(_BYTE *)(*a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*a1 + 64);
  v48 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v44 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v46 = v4;
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v8 << 6);
LABEL_20:
    v14 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v10);
    v15 = *(_QWORD *)(v4 + 56) + 16 * v10;
    v16 = *(_QWORD *)v15;
    v17 = *(_BYTE *)(v15 + 8);
    v18 = v14;
    sub_18A635048();
    v19 = sub_18A6145B4(v18, a2);
    if (v20)
    {
      v27 = v19;
      v28 = v20;
      sub_18A635048();
      isUnique = swift_isUniquelyReferenced_nonNull_native();
      sub_18A634FE0();
      sub_18A634FF8();
      if (v31)
        goto LABEL_38;
      v32 = v29;
      v33 = v30;
      sub_18A5F101C(&qword_1EDF6B6A8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v8))
      {
        v34 = sub_18A634FE0();
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_40;
        v32 = v34;
      }
      if ((v33 & 1) != 0)
      {
        v36 = v44[7] + 16 * v32;
        sub_18A615B4C(*(id *)v36);
        *(_QWORD *)v36 = v16;
        *(_BYTE *)(v36 + 8) = v17;
      }
      else
      {
        v44[(v32 >> 6) + 8] |= 1 << v32;
        v37 = (uint64_t *)(v44[6] + 16 * v32);
        *v37 = v27;
        v37[1] = v28;
        v38 = v44[7] + 16 * v32;
        *(_QWORD *)v38 = v16;
        *(_BYTE *)(v38 + 8) = v17;
        v39 = v44[2];
        v31 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v31)
          goto LABEL_39;
        v44[2] = v40;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18A635054();
      v4 = v46;
    }
    else
    {
      if (qword_1ECD96788 != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      sub_18A60990C(v21, (uint64_t)qword_1ECD96770);
      v22 = v18;
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = sub_18A5F3830();
        v26 = (_QWORD *)sub_18A5F3830();
        *(_DWORD *)v25 = 138412290;
        *(_QWORD *)(v25 + 4) = v22;
        *v26 = v22;
        _os_log_impl(&dword_18A5C5000, v23, v24, a3, (uint8_t *)v25, 0xCu);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        swift_arrayDestroy();
        sub_18A5F392C();
      }

      sub_18A635054();
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v11 >= v48)
    goto LABEL_35;
  v12 = *(_QWORD *)(v47 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_19;
  v8 = v11 + 1;
  if (v11 + 1 >= v48)
    goto LABEL_35;
  v12 = *(_QWORD *)(v47 + 8 * v8);
  if (v12)
    goto LABEL_19;
  v8 = v11 + 2;
  if (v11 + 2 >= v48)
    goto LABEL_35;
  v12 = *(_QWORD *)(v47 + 8 * v8);
  if (v12)
  {
LABEL_19:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_20;
  }
  v13 = v11 + 3;
  if (v13 >= v48)
  {
LABEL_35:
    result = swift_release();
    *a4 = v44;
    return result;
  }
  v12 = *(_QWORD *)(v47 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v48)
      goto LABEL_35;
    v12 = *(_QWORD *)(v47 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

#error "18A633F44: call analysis failed (funcsize=66)"

void sub_18A633F74()
{
  char v0;
  void *v1;
  void (*v2)(void **__return_ptr, void **);
  char v3;
  id v4;
  void *v5;
  void *v6;

  sub_18A634FCC();
  if ((v3 & 1) != 0)
  {
    v4 = v1;
  }
  else
  {
    v6 = v1;
    v2(&v5, &v6);
    v1 = v5;
  }
  sub_18A634D74(v1, v0);
  sub_18A634F98();
  sub_18A634D80(v1, v0);
  sub_18A634F8C();
  sub_18A60A0E0();
}

uint64_t sub_18A633FD8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  void *v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  Swift::Int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  id v41;
  uint64_t result;
  char isUnique;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  int64_t v48;

  v2 = *a1;
  v47 = *a1 + 64;
  v3 = 1 << *(_BYTE *)(*a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*a1 + 64);
  v48 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v46 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (v5)
  {
    v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v8 = v7 | (v6 << 6);
LABEL_20:
    v12 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v8);
    v13 = *(_QWORD *)(v2 + 56) + 16 * v8;
    v14 = *(void **)v13;
    v15 = *(_BYTE *)(v13 + 8);
    v16 = v12;
    sub_18A634B64(v14);
    v17 = objc_msgSend(v16, sel_userRecordID);
    if (v17)
    {
      v25 = v17;
      sub_18A634B64(v14);
      v26 = v25;
      isUnique = swift_isUniquelyReferenced_nonNull_native();
      v45 = v26;
      sub_18A62E9C4();
      v29 = v46[2];
      v30 = (v28 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        goto LABEL_39;
      v32 = v27;
      v33 = v28;
      sub_18A5F101C(&qword_1EDF6B690);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v31))
      {
        sub_18A62E9C4();
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_41;
        v32 = v34;
      }
      if ((v33 & 1) != 0)
      {
        v36 = v46[7] + 16 * v32;
        sub_18A615B4C(*(id *)v36);
        *(_QWORD *)v36 = v14;
        *(_BYTE *)(v36 + 8) = v15;
      }
      else
      {
        v46[(v32 >> 6) + 8] |= 1 << v32;
        *(_QWORD *)(v46[6] + 8 * v32) = v45;
        v37 = v46[7] + 16 * v32;
        *(_QWORD *)v37 = v14;
        *(_BYTE *)(v37 + 8) = v15;
        v38 = v46[2];
        v39 = __OFADD__(v38, 1);
        v40 = v38 + 1;
        if (v39)
          goto LABEL_40;
        v46[2] = v40;
        v41 = v45;
      }

      swift_bridgeObjectRelease();
      sub_18A615B4C(v14);
    }
    else
    {
      if (qword_1ECD96788 != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      sub_18A60990C(v18, (uint64_t)qword_1ECD96770);
      v19 = v16;
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc();
        v23 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v22 = 138412290;
        *(_QWORD *)(v22 + 4) = v19;
        *v23 = v19;
        _os_log_impl(&dword_18A5C5000, v20, v21, "Unexpected lookup info that lacks user record id: %@", (uint8_t *)v22, 0xCu);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        swift_arrayDestroy();
        MEMORY[0x18D76E86C](v23, -1, -1);
        MEMORY[0x18D76E86C](v22, -1, -1);
        v24 = v20;
      }
      else
      {

        v24 = v19;
        v19 = v20;
      }

      sub_18A615B4C(v14);
    }
  }
  v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v9 >= v48)
    goto LABEL_36;
  v10 = *(_QWORD *)(v47 + 8 * v9);
  ++v6;
  if (v10)
    goto LABEL_19;
  v6 = v9 + 1;
  if (v9 + 1 >= v48)
    goto LABEL_36;
  v10 = *(_QWORD *)(v47 + 8 * v6);
  if (v10)
    goto LABEL_19;
  v6 = v9 + 2;
  if (v9 + 2 >= v48)
    goto LABEL_36;
  v10 = *(_QWORD *)(v47 + 8 * v6);
  if (v10)
  {
LABEL_19:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v6 << 6);
    goto LABEL_20;
  }
  v11 = v9 + 3;
  if (v11 >= v48)
  {
LABEL_36:
    result = swift_release();
    *a2 = v46;
    return result;
  }
  v10 = *(_QWORD *)(v47 + 8 * v11);
  if (v10)
  {
    v6 = v11;
    goto LABEL_19;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v48)
      goto LABEL_36;
    v10 = *(_QWORD *)(v47 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6A8F0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_18A634430(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_18A5F101C(&qword_1EDF6B680);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_18A631BCC();
  return swift_release();
}

id sub_18A634548()
{
  id v0;
  Class isa;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for URL();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithShareURLs_, isa);

  return v2;
}

uint64_t sub_18A6345BC(uint64_t a1, void *a2, char a3)
{
  swift_beginAccess();
  sub_18A634B64(a2);
  sub_18A69E3CC((uint64_t)a2, a3 & 1, a1);
  return swift_endAccess();
}

uint64_t sub_18A634634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[1] = a6;
  v9 = sub_18A5F101C(&qword_1EDF6B668);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_18A631EF0(a3, a4);
  return swift_release();
}

void sub_18A634740(void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, id))
{
  id v11;
  uint64_t v12;

  swift_beginAccess();
  v11 = a1;
  v12 = a3 & 1;
  a5(a2, v12);
  a6(a2, v12, v11);
  swift_endAccess();

  sub_18A634F78();
}

uint64_t sub_18A6347C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_18A5F101C(&qword_1EDF6B650);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_18A632474();
  return swift_release();
}

uint64_t sub_18A6348C4(uint64_t a1)
{
  return sub_18A6347C4(a1);
}

uint64_t sub_18A6348D0(void *a1, char a2, uint64_t a3, uint64_t *a4)
{
  id v6;

  if ((a2 & 1) != 0)
  {
    v6 = a1;
    sub_18A5F101C(a4);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_18A5F101C(a4);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_18A634938()
{
  return sub_18A634DA4(&qword_1EDF6B650);
}

uint64_t sub_18A634944(void *a1, char a2)
{
  return sub_18A634A54(a1, a2, &qword_1EDF6B650);
}

uint64_t sub_18A634950()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_18A634974(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_18A634740(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_18A634E30, (void (*)(uint64_t, uint64_t, id))sub_18A69E418);
}

uint64_t sub_18A6349A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t result;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v13);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  return result;
}

uint64_t sub_18A634A2C(uint64_t a1)
{
  uint64_t *v1;

  return sub_18A634634(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_18A634A3C()
{
  return sub_18A634DA4(&qword_1EDF6B668);
}

uint64_t sub_18A634A48(void *a1, char a2)
{
  return sub_18A634A54(a1, a2, &qword_1EDF6B668);
}

uint64_t sub_18A634A54(void *a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a2 & 1;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_18A5F101C(a3) - 8) + 80);
  return sub_18A6348D0(a1, v6, v3 + ((v7 + 16) & ~v7), a3);
}

void sub_18A634AAC(uint64_t a1, void *a2)
{
  Class isa;

  type metadata accessor for URL();
  sub_18A60B8D0(0, &qword_1EDF6B618);
  sub_18A631EB0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_setShareInvitationTokensByShareURL_, isa);

}

uint64_t sub_18A634B38(uint64_t a1, void *a2, char a3)
{
  return sub_18A6345BC(a1, a2, a3 & 1);
}

void sub_18A634B48()
{
  void *v0;
  char v1;

  sub_18A5F3D70();
  sub_18A633850(v0, v1);
}

id sub_18A634B64(id a1)
{
  return a1;
}

uint64_t sub_18A634B70(uint64_t a1)
{
  return sub_18A634430(a1);
}

uint64_t sub_18A634B7C()
{
  return sub_18A634DA4(&qword_1EDF6B680);
}

uint64_t sub_18A634B88(void *a1, char a2)
{
  return sub_18A634A54(a1, a2, &qword_1EDF6B680);
}

void sub_18A634B94()
{
  sub_18A5F3D70();
  sub_18A633F74();
}

void sub_18A634BB4(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_18A634740(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_18A634E30, (void (*)(uint64_t, uint64_t, id))sub_18A69E3C0);
}

uint64_t sub_18A634BE4(uint64_t a1)
{
  _QWORD *v1;

  return sub_18A633E50(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18A634BF0()
{
  return sub_18A634DA4(&qword_1EDF6B6A0);
}

uint64_t sub_18A634BFC(void *a1, char a2)
{
  return sub_18A634A54(a1, a2, &qword_1EDF6B6A0);
}

void sub_18A634C08()
{
  sub_18A5F3D70();
  sub_18A6339DC();
}

uint64_t sub_18A634C38(uint64_t a1)
{
  _QWORD *v1;

  return sub_18A6338B8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18A634C44()
{
  return sub_18A634DA4(&qword_1EDF6B6A0);
}

void sub_18A634C50()
{
  sub_18A5F3D70();
  sub_18A6339DC();
}

uint64_t sub_18A634C80(uint64_t a1)
{
  return sub_18A633580(a1);
}

uint64_t sub_18A634C8C()
{
  return sub_18A634DA4(&qword_1EDF6B6B8);
}

uint64_t sub_18A634C98(void *a1, char a2)
{
  return sub_18A634A54(a1, a2, &qword_1EDF6B6B8);
}

void sub_18A634CA4()
{
  sub_18A5F3D70();
  sub_18A633F74();
}

void sub_18A634CC4(void *a1, void *a2)
{
  sub_18A6327B8(a1, a2);
}

uint64_t sub_18A634CD0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A634CFC(uint64_t a1)
{
  _QWORD *v1;

  return sub_18A632ED0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18A634D08()
{
  return sub_18A634DA4(&qword_1EDF6B6D8);
}

uint64_t sub_18A634D14(void *a1, char a2)
{
  return sub_18A634A54(a1, a2, &qword_1EDF6B6D8);
}

uint64_t sub_18A634D20()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A634D44()
{
  sub_18A5F3D70();
  sub_18A6339DC();
}

id sub_18A634D74(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void sub_18A634D80(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t sub_18A634D8C(uint64_t a1)
{
  _QWORD *v1;

  return sub_18A632890(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18A634D98()
{
  return sub_18A634DA4(&qword_1EDF6B6D8);
}

uint64_t sub_18A634DA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_18A5F101C(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

void sub_18A634E00()
{
  sub_18A5F3D70();
  sub_18A6339DC();
}

uint64_t sub_18A634E74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc();
}

__n128 sub_18A634E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  *(_QWORD *)(v2 + 56) = a1;
  result = *(__n128 *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_18A634EB0()
{
  return swift_task_alloc();
}

uint64_t sub_18A634EC0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A634ED0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A634EF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  a1[2] = v3;
  a1[3] = v2;
  a1[4] = v1;
  return swift_retain();
}

uint64_t sub_18A634F08()
{
  return swift_task_dealloc();
}

void sub_18A634F28()
{
  uint64_t v0;

}

uint64_t sub_18A634F30(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t sub_18A634F3C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t sub_18A634F48(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t sub_18A634F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A632164(a1, a2, a3, a4);
}

void sub_18A634F8C()
{
  char v0;
  void *v1;

  sub_18A634D80(v1, v0);
}

uint64_t sub_18A634F98()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t sub_18A634FA4()
{
  return swift_retain();
}

uint64_t sub_18A634FAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v1;
  *(_QWORD *)(v1 + 24) = a1;
  return swift_continuation_init();
}

uint64_t sub_18A634FBC()
{
  return swift_getObjCClassFromMetadata();
}

unint64_t sub_18A634FE0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A62E868(v1, v0);
}

uint64_t sub_18A634FEC()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_18A63500C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A62E868(v1, v0);
}

uint64_t sub_18A635018(uint64_t a1, unint64_t *a2)
{
  return sub_18A60B8D0(0, a2);
}

id sub_18A635024(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v3, v2);
}

uint64_t sub_18A635030()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_18A63503C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id sub_18A635048()
{
  void *v0;

  return sub_18A634B64(v0);
}

void sub_18A635054()
{
  void *v0;

  sub_18A615B4C(v0);
}

void sub_18A635060(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4, void (*a5)(_QWORD *), void (*a6)(uint64_t), _QWORD *a7, void (*a8)(_QWORD *__return_ptr, _QWORD *, uint64_t, void (*)(_QWORD *__return_ptr, _QWORD), uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD *);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  _QWORD v45[2];
  char v46;
  uint64_t v47;
  char v48;
  _QWORD v49[2];
  char v50;
  unint64_t v51;
  char v52;
  _QWORD v53[2];
  char v54;
  unint64_t v55;
  char v56;
  _QWORD v57[2];
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;

  sub_18A6376F4(a1, a2, (uint64_t)v44);
  v12 = *(unsigned int *)(a1 + 36);
  v45[0] = 1 << *(_BYTE *)(a1 + 32);
  v45[1] = v12;
  v46 = 0;
  v47 = 0;
  v48 = 1;
  v13 = sub_18A637920((uint64_t)v44, (uint64_t)v45, a1);
  a5(v45);
  a5(v44);
  if (!v13)
    return;
  v61 = MEMORY[0x1E0DEE9D8];
  v37 = a3;
  specialized ContiguousArray.reserveCapacity(_:)();
  v36 = a1;
  sub_18A6376F4(a1, a2, (uint64_t)v49);
  if (v13 < 0)
    goto LABEL_22;
  v38 = a2;
  v32 = a5;
  v14 = v49[0];
  v15 = v36;
  if ((v49[0] & 0x8000000000000000) == 0)
  {
    sub_18A6387AC();
    if (v16 != v17)
    {
      v18 = v50;
      v19 = v49[1];
      v20 = v51;
      v21 = v52;
      while (((*(_QWORD *)(v36 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        if (*(_DWORD *)(v15 + 36) != (_DWORD)v19)
          goto LABEL_19;
        v22 = *(_QWORD *)(v15 + 56);
        v23 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v14);
        v24 = v23[1];
        v25 = *(_QWORD *)(v22 + 8 * v14);
        v39 = *v23;
        v40 = v24;
        v41 = v25;
        sub_18A5F3D48();
        swift_bridgeObjectRetain();
        v38(&v43, &v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0)
          goto LABEL_23;
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_20;
        if (v20 >= *(_QWORD *)(v43 + 16))
          goto LABEL_21;
        v26 = (_QWORD *)(v43 + 32 * v20);
        v28 = v26[4];
        v27 = v26[5];
        v30 = v26[6];
        v29 = v26[7];
        sub_18A5F3898();
        sub_18A5F3D48();
        v31 = swift_bridgeObjectRelease();
        a6(v31);
        v39 = v28;
        v40 = v27;
        v41 = v30;
        v42 = v29;
        sub_18A635754(&v39, a7);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v57[0] = v14;
        v57[1] = v19;
        v58 = v18 & 1;
        v59 = v20;
        v60 = 0;
        v15 = v36;
        a8(v53, v57, v36, (void (*)(_QWORD *__return_ptr, _QWORD))v38, v37);
        if (!--v13)
          goto LABEL_16;
        v14 = v53[0];
        if ((v53[0] & 0x8000000000000000) == 0)
        {
          v19 = v53[1];
          v18 = v54;
          v20 = v55;
          v21 = v56;
          sub_18A6387AC();
          if (v16 != v17)
            continue;
        }
        goto LABEL_15;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return;
    }
  }
LABEL_15:
  __break(1u);
LABEL_16:
  v32(v53);
}

uint64_t sub_18A635300()
{
  return sub_18A635324();
}

uint64_t sub_18A63530C()
{
  return sub_18A635324();
}

uint64_t sub_18A635318()
{
  return sub_18A635324();
}

uint64_t sub_18A635324()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  sub_18A6387F8();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  sub_18A5F3A8C();
  v5._countAndFlagsBits = 2629690;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  sub_18A5F3D48();
  v6._countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  sub_18A5F460C();
  v7._countAndFlagsBits = 2112032;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  sub_18A5F3FAC();
  v8._countAndFlagsBits = v1;
  v8._object = v0;
  String.append(_:)(v8);
  sub_18A5F37E0();
  v9._countAndFlagsBits = 15913;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t sub_18A6353EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 16);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  sub_18A5F3FAC();
  return sub_18A6386D8();
}

void sub_18A635428(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_init)
     + OBJC_IVAR___CKRequiredFeatureSet__wrapped;
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *((_QWORD *)v3 + 2) = v2;
  swift_bridgeObjectRelease();
  sub_18A5F460C();
  sub_18A5F3944();
  sub_18A5F3814();
}

void sub_18A635494()
{
  swift_bridgeObjectRetain();
  sub_18A6387A0();
}

void sub_18A6354CC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;

  sub_18A5F460C();
  v5 = (void *)MEMORY[0x18D76C7CC](1701667182, 0xE400000000000000);
  objc_msgSend(v1, sel_encodeObject_forKey_, a1, v5);

  sub_18A5F3898();
  v6 = (void *)MEMORY[0x18D76C7CC](v3, v2);
  sub_18A5F37A4();
  v7 = (void *)MEMORY[0x18D76C7CC](0x65756C6176, 0xE500000000000000);
  objc_msgSend(v1, sel_encodeObject_forKey_, v6, v7);

  sub_18A63862C(v7);
}

void CKZoneFeature.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_18A635F94(a1, a2, a3, a4, &OBJC_IVAR___CKZoneFeature__wrapped);
}

id sub_18A6355D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  void *v4;

  v3 = a3();
  v4 = (void *)MEMORY[0x18D76C7CC](v3);
  sub_18A5F37E0();
  return v4;
}

uint64_t CKZoneFeature.isEqual(_:)(uint64_t a1)
{
  return sub_18A63586C(a1, type metadata accessor for CKZoneFeature, &OBJC_IVAR___CKZoneFeature__wrapped);
}

void type metadata accessor for CKZoneFeature(uint64_t a1)
{
  sub_18A5F50F0(a1, (unint64_t *)&unk_1ECD96840);
}

uint64_t CKZoneFeature.description.getter()
{
  return sub_18A635A24();
}

Swift::Void __swiftcall CKZoneFeature.encode(with:)(NSCoder with)
{
  sub_18A635B54();
}

void sub_18A6356BC()
{
  void *v0;
  void *v1;

}

void CKZoneFeature.init(coder:)(void *a1)
{
  sub_18A635C38(a1, &OBJC_IVAR___CKZoneFeature__wrapped, (objc_class **)&off_1E1F54598);
}

void sub_18A635754(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (uint64_t *)((char *)objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_init) + *a2);
  v7 = *v6;
  v8 = v6[1];
  *v6 = v2;
  v6[1] = v3;
  v6[2] = v4;
  v6[3] = v5;
  sub_18A6361D0(v7, v8);
  sub_18A5F3814();
}

void CKRecordFeature.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_18A635F94(a1, a2, a3, a4, &OBJC_IVAR___CKRecordFeature__wrapped);
}

void sub_18A6357D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  a5(v6, v8, v9, v10);
  sub_18A5F3814();
}

void CKRecordFeature.name.getter()
{
  sub_18A6360F8();
}

void CKRecordFeature.value.getter()
{
  sub_18A636144(&OBJC_IVAR___CKRecordFeature__wrapped);
}

uint64_t CKRecordFeature.isEqual(_:)(uint64_t a1)
{
  return sub_18A63586C(a1, type metadata accessor for CKRecordFeature, &OBJC_IVAR___CKRecordFeature__wrapped);
}

uint64_t sub_18A63586C(uint64_t a1, void (*a2)(uint64_t), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  _BYTE v24[24];
  uint64_t v25;

  v6 = sub_18A60B908(a1, (uint64_t)v24);
  if (!v25)
  {
    sub_18A60B87C((uint64_t)v24);
    goto LABEL_20;
  }
  a2(v6);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    v16 = 0;
    return v16 & 1;
  }
  v7 = (_QWORD *)(v3 + *a3);
  v8 = v7[1];
  v9 = v7[2];
  v10 = v7[3];
  v11 = &v23[*a3];
  v12 = *((_QWORD *)v11 + 1);
  v13 = *((_QWORD *)v11 + 2);
  v14 = *((_QWORD *)v11 + 3);
  if (!v8)
  {
    v18 = sub_18A6387C8();
    sub_18A6361A4(v18, v19);

    if (!v12)
    {
      v16 = 1;
      return v16 & 1;
    }
    goto LABEL_19;
  }
  if (!v12)
  {
    sub_18A638784();
    sub_18A5F3D48();
    sub_18A5F37A4();

LABEL_19:
    sub_18A6386EC();
    v20 = sub_18A6387C8();
    sub_18A6361D0(v20, v21);
    goto LABEL_20;
  }
  v15 = *v7 == *(_QWORD *)v11 && v8 == v12;
  if (v15 || (v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v9 == v13 && v10 == v14)
      v16 = 1;
    else
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  sub_18A638784();
  swift_bridgeObjectRetain_n();

  sub_18A5F460C();
  sub_18A5F37A4();
  sub_18A6386EC();
  return v16 & 1;
}

void type metadata accessor for CKRecordFeature(uint64_t a1)
{
  sub_18A5F50F0(a1, (unint64_t *)&unk_1ECD96850);
}

uint64_t CKRecordFeature.description.getter()
{
  return sub_18A635A24();
}

uint64_t sub_18A635A24()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class **v4;
  objc_class *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  objc_super v19;
  objc_super v20;
  uint64_t v21;
  uint64_t v22;

  sub_18A638778();
  v5 = *v4;
  if (v0)
  {
    v19.receiver = v1;
    v19.super_class = v5;
    sub_18A5F3FAC();
    sub_18A5F3D48();
    v6 = objc_msgSendSuper2(&v19, sel_description);
    sub_18A61044C();
    sub_18A638818();
    v21 = v2;
    v22 = v3;
    sub_18A5F4380();
    sub_18A6387DC();
    v7 = sub_18A635324();
    v9 = v8;
    v10 = sub_18A6387DC();
    sub_18A6361D0(v10, v11);
    v12._countAndFlagsBits = v7;
    v12._object = v9;
    String.append(_:)(v12);
    sub_18A5F394C();
  }
  else
  {
    v20.receiver = v1;
    v20.super_class = v5;
    v13 = objc_msgSendSuper2(&v20, sel_description);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

    v21 = v14;
    v22 = v16;
    v17._countAndFlagsBits = 0x6C696E203ALL;
    v17._object = (void *)0xE500000000000000;
    String.append(_:)(v17);
  }
  return v21;
}

Swift::Void __swiftcall CKRecordFeature.encode(with:)(NSCoder with)
{
  sub_18A635B54();
}

void sub_18A635B54()
{
  uint64_t v0;

  sub_18A638778();
  if (v0)
  {
    sub_18A5F3FAC();
    sub_18A5F3898();
    sub_18A635494();
  }
  __break(1u);
}

void sub_18A635C04()
{
  void *v0;
  void *v1;

}

void CKRecordFeature.init(coder:)(void *a1)
{
  sub_18A635C38(a1, &OBJC_IVAR___CKRecordFeature__wrapped, (objc_class **)off_1E1F54278);
}

void sub_18A635C38(void *a1, _QWORD *a2, objc_class **a3)
{
  char *v3;
  _QWORD *v4;
  char *v5;
  char *v7;
  objc_class *v8;
  id v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  objc_super v36;

  v4 = a2;
  v5 = v3;
  v7 = &v5[*a2];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v8 = *a3;
  v36.receiver = v5;
  v36.super_class = v8;
  v9 = objc_msgSendSuper2(&v36, sel_init);
  sub_18A5F50F0(0, &qword_1EDF6B700);
  v10 = (char *)v9;
  v11 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v11)
  {

    v13 = 0;
LABEL_9:
    v24 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_17;
  }
  v12 = (void *)v11;
  v13 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v13)
  {

    goto LABEL_9;
  }
  v35 = v4;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;
  v34 = (void *)v13;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;
  v20 = 128;
  while (1)
  {
    sub_18A5F3FAC();
    v21 = sub_18A60F9A4(v20, v14, v16);
    v22 = MEMORY[0x18D76C928](v21);
    if (v23)
      break;
    if (!--v20)
    {
      sub_18A5F37E0();
      v13 = 0;
      v24 = 0xE000000000000000;
      goto LABEL_11;
    }
  }
  v13 = v22;
  v24 = v23;
  sub_18A5F37E0();
LABEL_11:
  v27 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    v28 = sub_18A60F9A4(v27, v17, v19);
    v29 = MEMORY[0x18D76C928](v28);
    if (v30)
      break;
    if (!--v27)
    {

      sub_18A610384();
      v25 = 0;
      v26 = 0xE000000000000000;
      goto LABEL_16;
    }
  }
  v25 = v29;
  v26 = v30;

  sub_18A610384();
LABEL_16:

  a1 = v34;
  v4 = v35;
LABEL_17:

  v31 = (uint64_t *)&v10[*v4];
  v32 = *v31;
  v33 = v31[1];
  *v31 = v13;
  v31[1] = v24;
  v31[2] = v25;
  v31[3] = v26;
  sub_18A6361D0(v32, v33);
  if (!v31[1])

  sub_18A623AB8();
}

uint64_t sub_18A635E50(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_18A6361D0(*(_QWORD *)(a1 + *a3), *(_QWORD *)(a1 + *a3 + 8));
}

uint64_t sub_18A635E74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)(v2 + *a1);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return sub_18A6361A4(v4, v5);
}

id sub_18A635EA0(_QWORD *a1, Class *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _OWORD *v9;
  objc_super v11;

  v9 = (_OWORD *)(v8 + *a1);
  *v9 = 0u;
  v9[1] = 0u;
  v11.super_class = *a2;
  return sub_18A638770((uint64_t)a1, sel_init, a3, a4, a5, a6, a7, a8, v11);
}

void _sSo13CKZoneFeatureC8CloudKitE4name5valueABSS_SStcfC_0()
{
  id v0;

  sub_18A6387F8();
  v0 = objc_allocWithZone((Class)sub_18A61034C());
  sub_18A6387A0();
}

void sub_18A635F3C(void *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v5;

  sub_18A5F460C();
  v5 = (void *)MEMORY[0x18D76C7CC](v3, v1);
  sub_18A5F37E0();
  objc_msgSend(v2, sel_initWithName_value_, a1, v5);

  sub_18A5F3814();
}

void CKFieldFeature.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_18A635F94(a1, a2, a3, a4, &OBJC_IVAR___CKFieldFeature__wrapped);
}

void sub_18A635F94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  void *v5;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v9 = v5;
  v10 = sub_18A6386C4();
  v12 = v11;
  v28 = a3;
  v29 = a4;
  v13 = sub_18A6386C4();
  v15 = v14;
  v16 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    v17 = sub_18A60F9A4(v16, v10, v12);
    v18 = MEMORY[0x18D76C928](v17);
    if (v19)
      break;
    if (!--v16)
    {
      sub_18A5F394C();
      v20 = 0;
      v21 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  v20 = v18;
  v21 = v19;
  sub_18A5F394C();
LABEL_6:
  v22 = 128;
  while (1)
  {
    sub_18A5F3898();
    v23 = sub_18A60F9A4(v22, v13, v15);
    v24 = MEMORY[0x18D76C928](v23);
    if (v25)
      break;
    if (!--v22)
    {
      sub_18A5F37A4();
      v26 = 0;
      v27 = 0xE000000000000000;
      goto LABEL_11;
    }
  }
  v26 = v24;
  v27 = v25;
  sub_18A5F37A4();
LABEL_11:
  swift_getObjectType();

  v28 = v20;
  v29 = v21;
  v30 = v26;
  v31 = v27;
  sub_18A635754(&v28, a5);
  swift_deallocPartialClassInstance();
  sub_18A623AB8();
}

void CKFieldFeature.name.getter()
{
  sub_18A6360F8();
}

void sub_18A6360F8()
{
  uint64_t v0;

  sub_18A638778();
  if (v0)
  {
    sub_18A5F3FAC();
    sub_18A5F379C();
  }
  else
  {
    __break(1u);
  }
}

void CKFieldFeature.value.getter()
{
  sub_18A636144(&OBJC_IVAR___CKFieldFeature__wrapped);
}

void sub_18A636144(_QWORD *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + *a1 + 8))
  {
    sub_18A5F3898();
    sub_18A5F379C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t CKFieldFeature.isEqual(_:)(uint64_t a1)
{
  return sub_18A63586C(a1, type metadata accessor for CKFieldFeature, &OBJC_IVAR___CKFieldFeature__wrapped);
}

void type metadata accessor for CKFieldFeature(uint64_t a1)
{
  sub_18A5F50F0(a1, &qword_1ECD96860);
}

uint64_t sub_18A6361A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return sub_18A6386D8();
  }
  return result;
}

uint64_t sub_18A6361D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return sub_18A5F3FF4();
  }
  return result;
}

uint64_t CKFieldFeature.description.getter()
{
  return sub_18A635A24();
}

Swift::Void __swiftcall CKFieldFeature.encode(with:)(NSCoder with)
{
  sub_18A635B54();
}

void sub_18A636280()
{
  void *v0;
  void *v1;

}

void CKFieldFeature.init(coder:)(void *a1)
{
  sub_18A635C38(a1, &OBJC_IVAR___CKFieldFeature__wrapped, (objc_class **)off_1E1F54000);
}

id sub_18A6362E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  objc_super v4;

  v1 = (_QWORD *)(v0 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v2 = MEMORY[0x1E0DEE9E0];
  *v1 = MEMORY[0x1E0DEE9E0];
  v1[1] = v2;
  v1[2] = v2;
  v4.super_class = (Class)CKRequiredFeatureSet;
  return objc_msgSendSuper2(&v4, sel_init);
}

void __swiftcall CKRequiredFeatureSet.init(zoneFeatures:recordFeatures:fieldFeatures:)(CKRequiredFeatureSet *__return_ptr retstr, Swift::OpaquePointer zoneFeatures, Swift::OpaquePointer recordFeatures, Swift::OpaquePointer fieldFeatures)
{
  id v4;
  Class isa;
  uint64_t v6;
  Class v7;
  uint64_t v8;
  Class v9;

  v4 = objc_allocWithZone((Class)sub_18A61034C());
  type metadata accessor for CKZoneFeature((uint64_t)v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = sub_18A5F460C();
  type metadata accessor for CKRecordFeature(v6);
  v7 = Array._bridgeToObjectiveC()().super.isa;
  v8 = sub_18A5F3944();
  type metadata accessor for CKFieldFeature(v8);
  v9 = Array._bridgeToObjectiveC()().super.isa;
  sub_18A5F37E0();
  objc_msgSend(v4, sel_initWithZoneFeatures_recordFeatures_fieldFeatures_, isa, v7, v9);

  sub_18A5F3814();
}

void CKRequiredFeatureSet.init(zoneFeatures:recordFeatures:fieldFeatures:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  objc_super v15;

  v12 = (_QWORD *)(v8 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v13 = MEMORY[0x1E0DEE9E0];
  *v12 = MEMORY[0x1E0DEE9E0];
  v12[1] = v13;
  v12[2] = v13;
  v15.super_class = (Class)CKRequiredFeatureSet;
  v14 = sub_18A638770(a1, sel_init, a3, a4, a5, a6, a7, a8, v15);
  sub_18A636488(a1, a2, a3);
  sub_18A5F460C();
  sub_18A5F3944();
  sub_18A5F37E0();

  sub_18A60A0E0();
}

uint64_t sub_18A636488(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v77 = a2;
  v75 = v3;
  if (v6)
  {
    if (v6 < 1)
    {
      __break(1u);
      goto LABEL_69;
    }
    v8 = 0;
    v9 = MEMORY[0x1E0DEE9D8];
    do
    {
      v10 = v9;
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x18D76CEB0](v8, a1);
      else
        v11 = *(id *)(a1 + 8 * v8 + 32);
      v12 = v11;
      sub_18A635E74(&OBJC_IVAR___CKZoneFeature__wrapped, &v81);

      v13 = v82;
      if (v82)
      {
        v14 = v81;
        v15 = v83;
        v16 = v84;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v9 = v10;
        }
        else
        {
          sub_18A618130(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
          v9 = v20;
        }
        v18 = *(_QWORD *)(v9 + 16);
        v17 = *(_QWORD *)(v9 + 24);
        if (v18 >= v17 >> 1)
        {
          sub_18A618130(v17 > 1, v18 + 1, 1, v9);
          v9 = v21;
        }
        *(_QWORD *)(v9 + 16) = v18 + 1;
        v19 = (_QWORD *)(v9 + 32 * v18);
        v19[4] = v14;
        v19[5] = v13;
        v19[6] = v15;
        v19[7] = v16;
      }
      else
      {
        v9 = v10;
      }
      ++v8;
    }
    while (v6 != v8);
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v76 = v9;
  swift_bridgeObjectRelease();
  v22 = v77;
  if (!(v77 >> 62))
  {
    v23 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v23)
      goto LABEL_22;
LABEL_37:
    v25 = MEMORY[0x1E0DEE9D8];
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v23 = result;
  if (!result)
    goto LABEL_37;
LABEL_22:
  if (v23 < 1)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v24 = 0;
  v25 = MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v77 & 0xC000000000000001) != 0)
      v26 = (id)MEMORY[0x18D76CEB0](v24, v22);
    else
      v26 = *(id *)(v22 + 8 * v24 + 32);
    v27 = v26;
    sub_18A635E74(&OBJC_IVAR___CKRecordFeature__wrapped, &v81);

    v28 = v82;
    if (v82)
    {
      v29 = v81;
      v30 = v83;
      v31 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A618144(0, *(_QWORD *)(v25 + 16) + 1, 1, v25);
        v25 = v35;
      }
      v33 = *(_QWORD *)(v25 + 16);
      v32 = *(_QWORD *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        sub_18A618144(v32 > 1, v33 + 1, 1, v25);
        v25 = v36;
      }
      *(_QWORD *)(v25 + 16) = v33 + 1;
      v34 = (_QWORD *)(v25 + 32 * v33);
      v34[4] = v29;
      v34[5] = v28;
      v34[6] = v30;
      v34[7] = v31;
      v22 = v77;
    }
    ++v24;
  }
  while (v23 != v24);
LABEL_38:
  swift_bridgeObjectRelease();
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v37 = result;
    if (result)
    {
LABEL_40:
      if (v37 >= 1)
      {
        v38 = 0;
        v39 = MEMORY[0x1E0DEE9D8];
        v78 = v25;
        do
        {
          if ((a3 & 0xC000000000000001) != 0)
            v40 = (id)MEMORY[0x18D76CEB0](v38, a3);
          else
            v40 = *(id *)(a3 + 8 * v38 + 32);
          v41 = v40;
          sub_18A635E74(&OBJC_IVAR___CKFieldFeature__wrapped, &v81);

          v42 = v82;
          if (v82)
          {
            v43 = v81;
            v44 = v83;
            v45 = v84;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_18A618210(0, *(_QWORD *)(v39 + 16) + 1, 1, v39);
              v39 = v49;
            }
            v47 = *(_QWORD *)(v39 + 16);
            v46 = *(_QWORD *)(v39 + 24);
            if (v47 >= v46 >> 1)
            {
              sub_18A618210(v46 > 1, v47 + 1, 1, v39);
              v39 = v50;
            }
            *(_QWORD *)(v39 + 16) = v47 + 1;
            v48 = (_QWORD *)(v39 + 32 * v47);
            v48[4] = v43;
            v48[5] = v42;
            v48[6] = v44;
            v48[7] = v45;
            v25 = v78;
          }
          ++v38;
        }
        while (v37 != v38);
        goto LABEL_55;
      }
LABEL_70:
      __break(1u);
      return result;
    }
  }
  else
  {
    v37 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v37)
      goto LABEL_40;
  }
  v39 = MEMORY[0x1E0DEE9D8];
LABEL_55:
  swift_bridgeObjectRelease();
  v51 = MEMORY[0x1E0DEE9E0];
  v81 = MEMORY[0x1E0DEE9E0];
  v52 = *(_QWORD *)(v76 + 16);
  sub_18A5F101C((uint64_t *)&unk_1ECD96810);
  Dictionary.reserveCapacity(_:)(v52);
  if (v52)
  {
    swift_bridgeObjectRetain();
    v53 = (uint64_t *)(v76 + 56);
    do
    {
      v54 = *(v53 - 3);
      v55 = *(v53 - 2);
      v56 = *(v53 - 1);
      v57 = *v53;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18A62C73C(v54, v55, v56, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 += 4;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
  }
  v58 = v81;
  v81 = v51;
  v59 = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRetain();
  sub_18A5F101C((uint64_t *)&unk_1ECD96830);
  Dictionary.reserveCapacity(_:)(v59);
  if (v59)
  {
    v60 = v58;
    swift_bridgeObjectRetain();
    v61 = (uint64_t *)(v25 + 56);
    do
    {
      v62 = *(v61 - 3);
      v63 = *(v61 - 2);
      v64 = *(v61 - 1);
      v65 = *v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18A62C874(v62, v63, v64, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 += 4;
      --v59;
    }
    while (v59);
    swift_bridgeObjectRelease();
    v58 = v60;
    v51 = MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRelease();
  v66 = v81;
  v81 = v51;
  v67 = *(_QWORD *)(v39 + 16);
  sub_18A5F101C((uint64_t *)&unk_1ECD96820);
  Dictionary.reserveCapacity(_:)(v67);
  if (v67)
  {
    v80 = v66;
    swift_bridgeObjectRetain();
    v68 = (uint64_t *)(v39 + 56);
    do
    {
      v69 = *(v68 - 3);
      v70 = *(v68 - 2);
      v71 = *(v68 - 1);
      v72 = *v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18A62C9AC(v69, v70, v71, v72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v68 += 4;
      --v67;
    }
    while (v67);
    swift_bridgeObjectRelease();
    v66 = v80;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = v81;
  v74 = (uint64_t *)(v75 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  *v74 = v58;
  v74[1] = v66;
  v74[2] = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CKRequiredFeatureSet.zoneFeatures.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_18A5F3FAC();
  sub_18A63868C(v0, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18A62F018, v1, v2, (void (*)(_QWORD *))sub_18A62F96C, type metadata accessor for CKZoneFeature, &OBJC_IVAR___CKZoneFeature__wrapped, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, void (*)(_QWORD *__return_ptr, _QWORD), uint64_t))sub_18A637FD4, v4);
  sub_18A5F37E0();
  type metadata accessor for CKZoneFeature((uint64_t)objc_allocWithZone((Class)CKFeatureSet));
  sub_18A623E94();
  v3 = sub_18A5F37A4();
  sub_18A638700(v3, sel_initWithFeatures_);
  sub_18A6387F0();
  sub_18A60A0E0();
}

void CKRequiredFeatureSet.recordFeatures.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A638778();
  v0 = sub_18A5F3FAC();
  sub_18A63868C(v0, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18A62F9FC, v1, v2, (void (*)(_QWORD *))sub_18A6385A0, type metadata accessor for CKRecordFeature, &OBJC_IVAR___CKRecordFeature__wrapped, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, void (*)(_QWORD *__return_ptr, _QWORD), uint64_t))sub_18A637EAC, v4);
  sub_18A5F37E0();
  type metadata accessor for CKRecordFeature((uint64_t)objc_allocWithZone((Class)CKFeatureSet));
  sub_18A623E94();
  v3 = sub_18A5F37A4();
  sub_18A638700(v3, sel_initWithFeatures_);
  sub_18A6387F0();
  sub_18A60A0E0();
}

void CKRequiredFeatureSet.fieldFeatures.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_18A5F3FAC();
  sub_18A63868C(v0, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18A62F9FC, v1, v2, (void (*)(_QWORD *))sub_18A6385A0, type metadata accessor for CKFieldFeature, &OBJC_IVAR___CKFieldFeature__wrapped, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, void (*)(_QWORD *__return_ptr, _QWORD), uint64_t))sub_18A637D84, v4);
  sub_18A5F37E0();
  type metadata accessor for CKFieldFeature((uint64_t)objc_allocWithZone((Class)CKFeatureSet));
  sub_18A623E94();
  v3 = sub_18A5F37A4();
  sub_18A638700(v3, sel_initWithFeatures_);
  sub_18A6387F0();
  sub_18A60A0E0();
}

Swift::Void __swiftcall CKRequiredFeatureSet.encode(with:)(NSCoder with)
{
  id v2;
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  NSString *v14;

  v2 = sub_18A5F3888((uint64_t)with.super.isa, sel_zoneFeatures);
  v3 = NSStringFromSelector(sel_zoneFeatures);
  if (!v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = (NSString *)MEMORY[0x18D76C7CC](v4);
    sub_18A5F3FE4();
  }
  sub_18A6386B0();

  v6 = sub_18A5F3888(v5, sel_recordFeatures);
  v7 = NSStringFromSelector(sel_recordFeatures);
  if (!v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = (NSString *)MEMORY[0x18D76C7CC](v8);
    sub_18A5F3FE4();
  }
  sub_18A6386B0();

  v10 = sub_18A5F3888(v9, sel_fieldFeatures);
  v11 = NSStringFromSelector(sel_fieldFeatures);
  if (!v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = MEMORY[0x18D76C7CC](v12);
    sub_18A5F3944();
    v11 = (NSString *)v13;
  }
  v14 = v11;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10);

  sub_18A63862C(v14);
}

id _sSo13CKZoneFeatureC8CloudKitE5coderABSgSo7NSCoderC_tcfC_0(void *a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)sub_18A61034C()), sel_initWithCoder_, a1);

  return v2;
}

id CKRequiredFeatureSet.init(coder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSString *v14;
  void *v15;
  NSString *v16;
  void *v17;
  NSString *v18;
  void *v19;
  id v20;
  unint64_t v21;
  id v22;
  unint64_t v23;
  id v24;
  unint64_t v25;
  objc_super v27;

  v10 = (_QWORD *)(v8 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v11 = MEMORY[0x1E0DEE9E0];
  *v10 = MEMORY[0x1E0DEE9E0];
  v10[1] = v11;
  v10[2] = v11;
  v27.super_class = (Class)CKRequiredFeatureSet;
  v12 = sub_18A638770((uint64_t)a1, sel_init, a3, a4, a5, a6, a7, a8, v27);
  sub_18A5F101C((uint64_t *)&unk_1ECD96800);
  v13 = v12;
  v14 = NSStringFromSelector(sel_zoneFeatures);
  sub_18A61044C();

  v15 = (void *)sub_18A63870C();
  sub_18A5F3FE4();
  if (!v15)
    goto LABEL_7;
  v16 = NSStringFromSelector(sel_recordFeatures);
  sub_18A61044C();

  v17 = (void *)sub_18A63870C();
  sub_18A5F394C();
  if (!v17)
  {

LABEL_7:
    return 0;
  }
  v18 = NSStringFromSelector(sel_fieldFeatures);
  sub_18A61044C();
  sub_18A638818();
  v19 = (void *)sub_18A63870C();
  sub_18A610384();
  if (!v19)
  {

    goto LABEL_7;
  }
  v20 = objc_msgSend(v15, sel_features);
  type metadata accessor for CKZoneFeature((uint64_t)v20);
  v21 = sub_18A5F3C9C();

  v22 = objc_msgSend(v17, sel_features);
  type metadata accessor for CKRecordFeature((uint64_t)v22);
  v23 = sub_18A5F3C9C();

  v24 = objc_msgSend(v19, sel_features);
  type metadata accessor for CKFieldFeature((uint64_t)v24);
  v25 = sub_18A5F3C9C();

  sub_18A636488(v21, v23, v25);
  sub_18A5F394C();
  sub_18A610384();
  swift_bridgeObjectRelease();

  return v13;
}

void CKRequiredFeatureSet.copy(with:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];

  type metadata accessor for CKRequiredFeatureSet(a1);
  v5 = v4;
  v6 = v2 + OBJC_IVAR___CKRequiredFeatureSet__wrapped;
  v7 = *(_QWORD *)(v2 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 8);
  v9 = *(_QWORD *)(v6 + 16);
  v11[0] = v7;
  v11[1] = v8;
  v11[2] = v9;
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F3D48();
  sub_18A635428((uint64_t)v11);
  a2[3] = v5;
  *a2 = v10;
  sub_18A5F40C8();
}

uint64_t CKRequiredFeatureSet.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  void *v8;
  _QWORD v9[4];

  v2 = sub_18A60B908(a1, (uint64_t)v9);
  if (!v9[3])
  {
    sub_18A60B87C((uint64_t)v9);
    goto LABEL_5;
  }
  type metadata accessor for CKRequiredFeatureSet(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v6 = 0;
    return v6 & 1;
  }
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 8);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 16);
  v9[0] = *(_QWORD *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v9[1] = v3;
  v9[2] = v4;
  sub_18A5F40AC();
  sub_18A5F3D48();
  swift_bridgeObjectRetain();
  sub_18A5F3FAC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CKRequiredFeatureSet.== infix(_:_:)();
  v6 = v5;
  sub_18A5F3FE4();
  sub_18A5F460C();
  sub_18A5F3944();
  sub_18A5F394C();
  sub_18A5F3A8C();
  sub_18A5F37E0();

  return v6 & 1;
}

uint64_t sub_18A637378(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  sub_18A60B87C((uint64_t)v10);
  return v8 & 1;
}

void CKRecordZone.originalRequiredFeatures.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  __int128 v5;

  v3 = objc_msgSend(v1, sel_originalRequiredFeatures);
  sub_18A6353EC(&v4);

  if (v4)
  {
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v5;
  }
  else
  {
    __break(1u);
  }
}

double sub_18A637540@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  uint64_t v5;

  CKRecordZone.originalRequiredFeatures.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

void sub_18A637580(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  v1 = a1[1];
  v2 = a1[2];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CKRecordZone.originalRequiredFeatures.setter((uint64_t)v3);
}

void CKRecordZone.originalRequiredFeatures.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  id v6;
  __int128 v7;
  uint64_t v8;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CKRequiredFeatureSet(a1);
  v7 = *(_OWORD *)a1;
  v8 = v4;
  sub_18A635428((uint64_t)&v7);
  v6 = v5;
  objc_msgSend(v2, sel_setOriginalRequiredFeatures_, v5);

}

void CKRecordZone.originalRequiredFeatures.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  CKRecordZone.originalRequiredFeatures.getter(a1);
  sub_18A5F379C();
}

void sub_18A63767C(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  v2 = a1[1];
  v3 = a1[2];
  v4[0] = *a1;
  v4[1] = v2;
  v4[2] = v3;
  if ((a2 & 1) != 0)
  {
    sub_18A5F3D48();
    sub_18A5F40AC();
    sub_18A5F3FAC();
    CKRecordZone.originalRequiredFeatures.setter((uint64_t)v4);
    sub_18A5F460C();
    sub_18A5F3944();
    swift_bridgeObjectRelease();
  }
  else
  {
    CKRecordZone.originalRequiredFeatures.setter((uint64_t)v4);
    sub_18A5F40C8();
  }
}

uint64_t sub_18A6376F4@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _QWORD *)@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 36);
  result = sub_18A6381EC(a1);
  if ((v9 & 1) == 0)
  {
    v10 = v8;
    if ((_DWORD)v6 == (_DWORD)v8)
    {
      v11 = result;
      v18 = 1 << v5;
      if (result == 1 << v5)
      {
LABEL_4:
        v12 = 1;
        v11 = 1 << *(_BYTE *)(a1 + 32);
        v10 = *(unsigned int *)(a1 + 36);
LABEL_20:
        *(_QWORD *)a3 = v11;
        *(_QWORD *)(a3 + 8) = v10;
        *(_BYTE *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_BYTE *)(a3 + 32) = v12;
        return result;
      }
      if (result < 0 || result >= 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_18:
        __break(1u);
LABEL_19:
        sub_18A62F960(v18, v6, 0);
        result = sub_18A5F38AC();
        v12 = 0;
        goto LABEL_20;
      }
      v13 = a1 + 64;
      while ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
          goto LABEL_22;
        v14 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
        v15 = v14[1];
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
        v20[0] = *v14;
        v20[1] = v15;
        v20[2] = v16;
        swift_bridgeObjectRetain();
        sub_18A5F3FAC();
        a2(&v21, v20);
        sub_18A5F37E0();
        sub_18A5F38AC();
        if (*(_QWORD *)(v21 + 16))
          goto LABEL_19;
        result = sub_18A5F38AC();
        if (v11 >= -(-1 << *(_BYTE *)(a1 + 32)))
          goto LABEL_23;
        if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
          goto LABEL_24;
        if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
          goto LABEL_25;
        sub_18A5F3D48();
        sub_18A5F3E6C();
        v11 = _HashTable.occupiedBucket(after:)();
        v17 = *(_DWORD *)(a1 + 36);
        sub_18A5F37AC();
        result = sub_18A5F460C();
        if (v17 != (_DWORD)v6)
          goto LABEL_26;
        if (v11 == v18)
          goto LABEL_4;
        if ((v11 & 0x8000000000000000) == 0)
        {
          v10 = v6;
          if (v11 < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_18;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6378F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(unsigned int *)(result + 36);
  *(_QWORD *)a2 = 1 << *(_BYTE *)(result + 32);
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t sub_18A637920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *(*v29)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *(*v38)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *(*v53)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *(*v60)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  result = sub_18A6380FC(a2, a1);
  if ((result & 1) != 0)
  {
    v7 = result;
    v8 = 1 << *(_BYTE *)(a3 + 32);
    v9 = *(unsigned int *)(a3 + 36);
    v10 = sub_18A6381EC(a3);
    v12 = v11;
    v14 = v13 & 1;
    sub_18A63826C(v8, v9, 0, v10, v11, v13 & 1, a3);
    sub_18A5F40AC();
    sub_18A5F3E6C();
    sub_18A62F960(v10, v12, v14);
    sub_18A62F960(v8, v9, 0);
    sub_18A5F37AC();
    sub_18A5F3944();
    result = v7;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_51;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a2 + 8);
  if ((_DWORD)v15 != (_DWORD)v16)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v17 = *(_QWORD *)a2;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(unsigned __int8 *)(a1 + 32);
  v20 = *(_QWORD *)(a2 + 24);
  LODWORD(v21) = *(unsigned __int8 *)(a2 + 32);
  v69 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (((v19 | v21) & 1) != 0)
      return 0;
LABEL_12:
    v21 = v20;
    v25 = sub_18A638418(&v72, v69, v15, 0, a3);
    a3 = v72;
    sub_18A5F4404((uint64_t)v25, v26, v27, v28, v29, v30, v31);
    sub_18A5F3944();
    sub_18A5F37E0();
    swift_bridgeObjectRelease();
    result = v21 - v18;
    if (!__OFSUB__(v21, v18))
      return result;
    __break(1u);
    goto LABEL_15;
  }
  v68 = result;
  if ((result & 1) != 0)
  {
    v70 = *(_QWORD *)(a2 + 24);
    v22 = sub_18A6380FC(a1, a2);
    v23 = v18;
    v20 = v19;
    v24 = v16;
    if (!v22)
      goto LABEL_16;
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  v23 = v20;
  LOBYTE(v20) = v21;
  LOBYTE(v21) = v19;
  v32 = v69;
  v24 = v15;
  v69 = v17;
  v70 = v18;
  v17 = v32;
  LODWORD(v15) = v16;
LABEL_16:
  v67 = v20;
  v64 = v23;
  v65 = v24;
  v66 = v17;
  if ((v21 & 1) != 0)
  {
    result = sub_18A638750();
    v71 = 0;
    goto LABEL_20;
  }
  v33 = v24;
  sub_18A638824(&v72, v17, v24);
  sub_18A638750();
  sub_18A5F40AC();
  v34 = sub_18A5F3E6C();
  sub_18A5F4404(v34, v35, v36, v37, v38, v39, v40);
  sub_18A5F37AC();
  sub_18A5F3944();
  sub_18A5F394C();
  sub_18A5F3A8C();
  result = sub_18A63880C();
  if (__OFSUB__(v24, v70))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v71 = v24 - v70;
  sub_18A5F40AC();
  sub_18A5F3E6C();
  v41 = sub_18A63839C(v17, v24, 0, a3);
  v42 = v17;
  v17 = v41;
  v24 = v43;
  v45 = v44;
  sub_18A62F960(v42, v33, 0);
  sub_18A5F37AC();
  result = sub_18A5F3944();
  if ((v45 & 1) != 0)
  {
LABEL_52:
    __break(1u);
    return result;
  }
LABEL_20:
  if ((_DWORD)v24 == (_DWORD)v15)
  {
    v46 = a3 + 64;
    LODWORD(v15) = v24;
    while (v17 < v69)
    {
      if (v17 < 0 || v17 >= 1 << *(_BYTE *)(a3 + 32))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if ((*(_QWORD *)(v46 + 8 * ((unint64_t)v17 >> 6)) & (1 << v17)) == 0)
        goto LABEL_41;
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v15)
        goto LABEL_42;
      v47 = v24;
      v48 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v17 + 8);
      sub_18A5F40AC();
      sub_18A5F3E6C();
      sub_18A5F3FAC();
      v49 = sub_18A5F3D48();
      sub_18A5F4404(v49, v50, v51, v52, v53, v54, v55);
      sub_18A5F37AC();
      sub_18A5F3944();
      sub_18A5F460C();
      sub_18A5F37E0();
      result = sub_18A63880C();
      if (__OFADD__(v71, v48))
        goto LABEL_43;
      if (v17 >= -(-1 << *(_BYTE *)(a3 + 32)))
        goto LABEL_44;
      if ((*(_QWORD *)(v46 + 8 * ((unint64_t)v17 >> 6)) & (1 << v17)) == 0)
        goto LABEL_45;
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v15)
        goto LABEL_46;
      v71 += v48;
      sub_18A5F40AC();
      sub_18A5F3E6C();
      v17 = _HashTable.occupiedBucket(after:)();
      LODWORD(v15) = *(_DWORD *)(a3 + 36);
      sub_18A5F37AC();
      result = sub_18A5F3944();
      v24 = v47;
      if ((_DWORD)v15 != (_DWORD)v47)
        goto LABEL_32;
    }
  }
  else
  {
LABEL_32:
    __break(1u);
  }
  sub_18A62F960(v66, v65, 0);
  if ((v67 & 1) != 0)
  {
    sub_18A638740();
    result = v71;
    if ((v68 & 1) == 0)
      return result;
    goto LABEL_38;
  }
  sub_18A638824(&v72, v17, v15);
  sub_18A5F40AC();
  v56 = sub_18A5F3E6C();
  sub_18A5F4404(v56, v57, v58, v59, v60, v61, v62);
  sub_18A5F460C();
  sub_18A5F37E0();
  sub_18A638740();
  sub_18A5F37AC();
  sub_18A5F3944();
  swift_bridgeObjectRelease();
  result = v71 + v64;
  if (__OFADD__(v71, v64))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if ((v68 & 1) == 0)
    return result;
LABEL_38:
  v63 = __OFSUB__(0, result);
  result = -result;
  if (v63)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

#error "18A637D98: call analysis failed (funcsize=70)"

#error "18A637EC0: call analysis failed (funcsize=70)"

#error "18A637FE8: call analysis failed (funcsize=70)"

BOOL sub_18A6380FC(_BOOL8 result, uint64_t a2)
{
  BOOL v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_15;
  if (*(_QWORD *)(result + 8) != *(_DWORD *)(a2 + 8))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = *(_QWORD *)result < *(_QWORD *)a2;
  if (*(_QWORD *)result == *(_QWORD *)a2)
  {
    if ((*(_BYTE *)(result + 32) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 32) & 1) != 0)
        return 0;
      goto LABEL_14;
    }
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
LABEL_16:
      __break(1u);
      return result;
    }
    return *(_QWORD *)(result + 24) < *(_QWORD *)(a2 + 24);
  }
  return v2;
}

void sub_18A63816C(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = sub_18A638600(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_18A6385C8((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  sub_18A5F460C();
  sub_18A5F3FE4();
  sub_18A634F78();
}

void sub_18A6381A8(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = sub_18A638600(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_18A6385C8((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  sub_18A5F460C();
  sub_18A5F3FE4();
  sub_18A634F78();
}

uint64_t _s18SendChangesOptionsV5ScopeOwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6381EC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_18A63826C(uint64_t result, int a2, char a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_34;
  v7 = result;
  if (a4 < result)
    goto LABEL_31;
  if (a5 != a2)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    if (*(_DWORD *)(a7 + 36) == a5)
    {
      v8 = a7 + 64;
      v9 = 1 << *(_BYTE *)(a7 + 32);
      v10 = (unint64_t)(v9 + 63) >> 6;
      result = 1;
      while (1)
      {
        if ((v7 & 0x8000000000000000) != 0 || (uint64_t)v7 >= v9)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v11 = v7 >> 6;
        v12 = *(_QWORD *)(v8 + 8 * (v7 >> 6));
        if (((v12 >> v7) & 1) == 0)
          goto LABEL_29;
        v13 = v12 & (-2 << (v7 & 0x3F));
        if (v13)
        {
          v7 = __clz(__rbit64(v13)) | v7 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = v11 + 1;
          v7 = 1 << *(_BYTE *)(a7 + 32);
          if (v11 + 1 < v10)
          {
            v15 = *(_QWORD *)(v8 + 8 * v14);
            if (!v15)
            {
              v14 = v11 + 2;
              v7 = 1 << *(_BYTE *)(a7 + 32);
              if (v11 + 2 >= v10)
                goto LABEL_18;
              v15 = *(_QWORD *)(v8 + 8 * v14);
              if (!v15)
              {
                while (v11 + 3 < v10)
                {
                  v15 = *(_QWORD *)(a7 + 88 + 8 * v11++);
                  if (v15)
                  {
                    v14 = v11 + 2;
                    goto LABEL_17;
                  }
                }
                v7 = 1 << *(_BYTE *)(a7 + 32);
                goto LABEL_18;
              }
            }
LABEL_17:
            v7 = __clz(__rbit64(v15)) + (v14 << 6);
          }
        }
LABEL_18:
        if (v7 == a4)
          return result;
        if (__OFADD__(result++, 1))
          goto LABEL_30;
      }
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t sub_18A63839C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return _HashTable.occupiedBucket(after:)();
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *sub_18A638418(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    *result = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2);
    sub_18A5F3898();
    sub_18A5F40AC();
    return (_QWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void type metadata accessor for CKRequiredFeatureSet(uint64_t a1)
{
  sub_18A5F50F0(a1, (unint64_t *)&unk_1ECD967C0);
}

uint64_t sub_18A6384C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

void sub_18A6384CC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!*a1)
  {
    v7 = sub_18A619E8C(a2);
    v8 = sub_18A638560(a3, a4);
    atomic_store(MEMORY[0x18D76E7C4](MEMORY[0x1E0DEC860], v7, &v8), a1);
  }
  sub_18A60A0E0();
}

uint64_t sub_18A638530(uint64_t a1)
{
  sub_18A6384C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_18A638560(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_18A619E8C(a2);
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEA0E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_18A6385A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *(*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v8 = a1;
  v10 = a2;
  v11 = v13;
  return v6((uint64_t *)va1, (uint64_t *)va);
}

uint64_t sub_18A6385C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t (*v12)(uint64_t *);

  a9 = a1;
  a10 = a2;
  a11 = a12;
  return v12(&a9);
}

_QWORD *sub_18A638600(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return sub_18A638418((uint64_t *)va, a2, a3, a4 & 1, a5);
}

uint64_t sub_18A638618()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return sub_18A63839C(v1, v2, 0, v0);
}

void sub_18A63862C(id a1)
{

}

void sub_18A638640(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)a5 = v5;
  *(_QWORD *)(a5 + 8) = v6;
  *(_BYTE *)(a5 + 16) = v7;
  *(_QWORD *)(a5 + 24) = v8;
  *(_BYTE *)(a5 + 32) = a1;
}

uint64_t sub_18A638658()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  return sub_18A6384C0(v0, v1, v2);
}

uint64_t sub_18A63867C()
{
  return swift_bridgeObjectRetain();
}

void sub_18A63868C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4, void (*a5)(_QWORD *), void (*a6)(uint64_t), _QWORD *a7, void (*a8)(_QWORD *__return_ptr, _QWORD *, uint64_t, void (*)(_QWORD *__return_ptr, _QWORD), uint64_t), uint64_t a9)
{
  sub_18A635060(a1, a2, 0, (uint64_t)&a9, a5, a6, a7, a8);
}

id sub_18A6386B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v0, (SEL)(v3 + 328), v1, v2);
}

uint64_t sub_18A6386C4()
{
  return String.init<A>(_:)();
}

uint64_t sub_18A6386D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A6386E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t (*v4)(char *, _QWORD);
  va_list va;

  va_start(va, a4);
  return v4(va, 0);
}

uint64_t sub_18A6386EC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A6361D0(v0, v1);
}

id sub_18A638700(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18A63870C()
{
  return NSCoder.decodeObject<A>(of:forKey:)();
}

uint64_t sub_18A638718()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A638740()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A62F960(v0, v1, 0);
}

uint64_t sub_18A638750()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A6384C0(v1, v0, 0);
}

id sub_18A638770(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2);
}

uint64_t sub_18A638784()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18A638790()
{
  uint64_t v0;

  return sub_18A638530(v0);
}

void sub_18A638798(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t *v3;

  sub_18A6384CC(a1, a2, a3, v3);
}

void sub_18A6387A0()
{
  JUMPOUT(0x18D76C7CCLL);
}

uint64_t sub_18A6387C0()
{
  uint64_t *v0;

  return sub_18A5F101C(v0);
}

uint64_t sub_18A6387C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6387DC()
{
  uint64_t v0;

  return v0;
}

void sub_18A6387F0()
{
  void *v0;

}

uint64_t sub_18A63880C()
{
  return swift_bridgeObjectRelease();
}

void sub_18A638818()
{
  void *v0;

}

_QWORD *sub_18A638824(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return sub_18A638418(a1, a2, a3, 0, v3);
}

uint64_t CKFetchRecordsOperation.desiredKeys.getter()
{
  void *v0;

  return sub_18A61C4D8(v0);
}

void sub_18A638838()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKFetchRecordsOperation.desiredKeys.setter(v0);
}

void CKFetchRecordsOperation.desiredKeys.setter(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, sel_setDesiredKeys_, isa);

}

void CKFetchRecordsOperation.desiredKeys.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  *a1 = sub_18A61C4D8(v1);
  sub_18A5F379C();
}

void sub_18A6388F4(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CKFetchRecordsOperation.desiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchRecordsOperation.desiredKeys.setter(*a1);
  }
}

void CKFetchRecordsOperation.perRecordResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perRecordCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A614F28;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A6389B4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKFetchRecordsOperation.perRecordResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A615AB4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A638A18(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A615AA8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A615B60(v1);
  CKFetchRecordsOperation.perRecordResultBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordsOperation.perRecordResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = (_QWORD *)sub_18A5F37B4();
    v5[2] = v2;
    v5[3] = a1;
    v5[4] = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A638D2C, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A615B60(a1);
    v7 = v2;
    swift_release();
    objc_msgSend(v7, sel_setPerRecordCompletionBlock_, v6);
    _Block_release(v6);
    sub_18A639524(a1);
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerRecordCompletionBlock_);
  }
}

void sub_18A638B74(uint64_t a1, id a2, char a3, void (*a4)(id, uint64_t, id))
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;

  if ((a3 & 1) != 0)
  {
    v7 = a2;
    v8 = 0;
    v9 = a1;
    v10 = a2;
  }
  else
  {
    v11 = a2;
    v8 = a2;
    v9 = a1;
    v10 = 0;
  }
  a4(v8, v9, v10);
  sub_18A615B4C(a2);
}

void sub_18A638BE8(void *a1, void *a2, void *a3, uint64_t a4, void (*a5)(id, void *, uint64_t))
{
  id v8;
  id v9;
  id v11;
  id v12;
  id v13;
  void *v14;

  if (a2)
  {
    if (a3)
    {
      v8 = a2;
      v9 = a3;
      a5(v8, a3, 1);

    }
    else if (a1)
    {
      v13 = a2;
      v11 = a1;
      a5(v13, a1, 0);

    }
    else
    {
      type metadata accessor for CKError(0);
      v12 = a2;
      sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
      sub_18A615B0C();
      _BridgedStoredNSError.init(_:userInfo:)();
      a5(v12, v14, 1);

    }
  }
}

void sub_18A638D2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(void *, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(a2, a3, a4);
  swift_release();

}

void CKFetchRecordsOperation.perRecordResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchRecordsOperation.perRecordResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A638DEC(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordsOperation.perRecordResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKFetchRecordsOperation.fetchRecordsResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchRecordsCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A63943C;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A638E84(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKFetchRecordsOperation.fetchRecordsResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A638EE8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A615B60(v1);
  CKFetchRecordsOperation.fetchRecordsResultBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordsOperation.fetchRecordsResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F37B4();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A6392B8, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A615B60(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchRecordsCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 0);
    sub_18A639524(a1);
    sub_18A639524(a1);
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setFetchRecordsCompletionBlock_);
  }
}

void sub_18A639060(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A5F50F0(0, &qword_1EDF6A338);
    sub_18A6394B0();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

void sub_18A639128(void *a1, char a2, void (*a3)(void))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    ((void (*)(_QWORD, void *))a3)(0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A5F50F0(0, &qword_1EDF6A338);
    sub_18A6394B0();
    Dictionary.init(dictionaryLiteral:)();
    a3();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18A6392B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A5F50F0(0, &qword_1EDF6A338);
    sub_18A6394B0();
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void CKFetchRecordsOperation.fetchRecordsResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchRecordsOperation.fetchRecordsResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A6393A0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchRecordsOperation.fetchRecordsResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A6393BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A6393E0(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;

  sub_18A638B74(a1, a2, a3 & 1, *(void (**)(id, uint64_t, id))(v3 + 16));
}

uint64_t sub_18A6393EC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_18A639418(void *a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_18A638BE8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(id, void *, uint64_t))(v3 + 24));
}

uint64_t sub_18A639424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A639434()
{
  return swift_release();
}

void sub_18A63943C(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A639060(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_18A639444()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A639468(void *a1, char a2)
{
  uint64_t v2;

  sub_18A639128(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

uint64_t sub_18A639474@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CKFetchRecordsOperation.desiredKeys.getter();
  *a1 = result;
  return result;
}

unint64_t sub_18A6394B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6A400;
  if (!qword_1EDF6A400)
  {
    sub_18A5F50F0(255, (unint64_t *)&unk_1EDF6A8F0);
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6A400);
  }
  return result;
}

uint64_t sub_18A639524(uint64_t a1)
{
  uint64_t v1;

  return sub_18A615B5C(a1, v1);
}

void CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_fetchDatabaseChangesCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A639588(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, unsigned __int8 *, _QWORD *);

  CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A639D8C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A6395EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, char, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A639D84;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter((uint64_t)v4);
}

uint64_t sub_18A63966C(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t *, char *, uint64_t *))
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  return a4(&v7, &v6, &v5);
}

void CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    sub_18A5F3938((uint64_t)sub_18A6397CC, MEMORY[0x1E0C809B0], 1107296256, v2, v3);
    sub_18A5F3964();
    a1 = swift_release();
  }
  else
  {
    v1 = 0;
  }
  sub_18A5F37C8(a1, sel_setFetchDatabaseChangesCompletionBlock_);
  sub_18A5F3AA8();
  _Block_release(v1);
  sub_18A5F3DE4();
}

void sub_18A639738(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;

  if (a3)
    v7 = _convertErrorToNSError(_:)();
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, a1, a2 & 1);

}

uint64_t sub_18A6397A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A6397C4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A639738(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A6397CC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void (*v7)(void *, uint64_t, void *);
  id v8;
  id v9;

  v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v9 = a2;
  v8 = a4;
  v7(a2, a3, a4);
  swift_release();

}

uint64_t sub_18A639848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A639858()
{
  return swift_release();
}

void CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A639890(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchDatabaseChangesCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A639DE4;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A639928(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A639D7C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v2;
}

uint64_t sub_18A63998C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  return a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 9) << 8));
}

void sub_18A6399CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __int16);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A639D40;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter((uint64_t)v4, v3);
}

void CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  const void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v6 = sub_18A5F37B4();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A6397CC, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A5F3964();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setFetchDatabaseChangesCompletionBlock_);
    _Block_release(v3);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    objc_msgSend(v2, sel_setFetchDatabaseChangesCompletionBlock_, 0);
  }
}

void sub_18A639B14(id a1, __int16 a2, void (*a3)(id, uint64_t, id))
{
  char v4;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v4 = a2;
  if ((a2 & 0x100) != 0)
  {
    v6 = a1;
    v7 = 0;
    v8 = 0;
    v9 = a1;
  }
  else
  {
    v10 = a1;
    v8 = v4 & 1;
    v7 = a1;
    v9 = 0;
  }
  a3(v7, v8, v9);
  sub_18A639DB8(a1);
}

void sub_18A639B80(void *a1, __int16 a2)
{
  uint64_t v2;

  sub_18A639B14(a1, a2 & 0x1FF, *(void (**)(id, uint64_t, id))(v2 + 16));
}

void sub_18A639B94(void *a1, char a2, void *a3, void (*a4)(void *, uint64_t))
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;

  if (a3)
  {
    swift_getErrorValue();
    v8 = a3;
    if (!Error.ckIsPartialError.getter())
    {
      v12 = a3;
      a4(a3, 256);

      return;
    }

  }
  if (a1)
  {
    v9 = a1;
    v10 = a2 & 1;
    v11 = a1;
  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    v9 = v13;
    v11 = v13;
    v10 = 256;
  }
  a4(v11, v10);

}

void sub_18A639CB8(void *a1, char a2, void *a3)
{
  uint64_t v3;

  sub_18A639B94(a1, a2, a3, *(void (**)(void *, uint64_t))(v3 + 16));
}

void CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A639CF0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

uint64_t sub_18A639D1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A639D40(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  __int16 v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 0x1FF;
  return v3(&v5);
}

uint64_t sub_18A639D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_18A63998C(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_18A639D84(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_18A63966C(a1, a2, a3, *(uint64_t (**)(uint64_t *, char *, uint64_t *))(v3 + 16));
}

uint64_t sub_18A639D8C(_QWORD *a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(*a1, *a2, *a3);
}

void sub_18A639DB8(id a1)
{

}

void sub_18A639DE8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_18A639E44(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;

  v7 = v3;
  if (v3)
  {
    v26 = v3;
    v25 = v2;
    *(_QWORD *)(v6 - 104) = v5;
    v8 = v3 & ~(v3 >> 63);
    sub_18A60FC4C();
    v5 = *(_QWORD *)(v6 - 104);
    if ((_DWORD)v4)
    {
      if ((_DWORD)v4 == 1)
        v9 = (int)a1;
      else
        v9 = *(_QWORD *)(a1 + 16);
      if (v7 < 0)
        goto LABEL_40;
    }
    else
    {
      if (v7 < 0)
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      v9 = 0;
    }
    *(_QWORD *)(v6 - 136) = a2 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v6 - 128) = v4;
    while (v8)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
        {
          if (v9 < (int)a1 || v9 >= a1 >> 32)
            goto LABEL_34;
          v11 = __DataStorage._bytes.getter();
          if (!v11)
            goto LABEL_42;
          v12 = v11;
          v13 = __DataStorage._offset.getter();
          v14 = v9 - v13;
          if (__OFSUB__(v9, v13))
            goto LABEL_37;
        }
        else
        {
          if (v9 < *(_QWORD *)(a1 + 16))
            goto LABEL_36;
          if (v9 >= *(_QWORD *)(a1 + 24))
            goto LABEL_38;
          v16 = __DataStorage._bytes.getter();
          if (!v16)
            goto LABEL_43;
          v12 = v16;
          v17 = __DataStorage._offset.getter();
          v14 = v9 - v17;
          if (__OFSUB__(v9, v17))
            goto LABEL_39;
        }
        v15 = *(_BYTE *)(v12 + v14);
      }
      else
      {
        if (v9 >= v26)
          goto LABEL_35;
        *(_DWORD *)(v6 - 118) = a1;
        *(_BYTE *)(v6 - 114) = v25;
        *(_WORD *)(v6 - 113) = *(_WORD *)((char *)&a1 + 5);
        *(_BYTE *)(v6 - 111) = HIBYTE(a1);
        *(_DWORD *)(v6 - 110) = a2;
        *(_WORD *)(v6 - 106) = WORD2(a2);
        v15 = *(_BYTE *)(v6 - 118 + v9);
      }
      sub_18A5F101C(&qword_1EDF6B8A0);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_18A83AC30;
      *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v18 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v18 + 32) = v15;
      v19 = String.init(format:_:)();
      v21 = v20;
      *(_QWORD *)(v6 - 104) = v5;
      v22 = *(_QWORD *)(v5 + 16);
      if (v22 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_18A60FC4C();
        v5 = *(_QWORD *)(v6 - 104);
      }
      *(_QWORD *)(v5 + 16) = v22 + 1;
      v23 = v5 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v19;
      *(_QWORD *)(v23 + 40) = v21;
      ++v9;
      --v8;
      --v7;
      v4 = *(_QWORD *)(v6 - 128);
      if (!v7)
        return v5;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    JUMPOUT(0x18A63A148);
  }
  return v5;
}

uint64_t sub_18A63A170(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x64616F6C6E776F64 && a2 == 0xEB000000004C5255;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7955819 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x727574616E676973 && a2 == 0xE900000000000065;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_18A63A328(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18A63A364 + 4 * byte_18A83AC40[a1]))(0x64616F6C6E776F64, 0xEB000000004C5255);
}

uint64_t sub_18A63A364()
{
  return 7955819;
}

uint64_t sub_18A63A374()
{
  return 0x727574616E676973;
}

uint64_t sub_18A63A390()
{
  return 0x65676E6172;
}

uint64_t sub_18A63A3A4()
{
  unsigned __int8 *v0;

  return sub_18A63A328(*v0);
}

uint64_t sub_18A63A3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A63A170(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18A63A3D0()
{
  sub_18A63D6F8();
  return CodingKey.description.getter();
}

uint64_t sub_18A63A3F8()
{
  sub_18A63D6F8();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_18A63A420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = v5;
  v26 = a4;
  v29 = type metadata accessor for URL.DirectoryHint();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v30 = a1;
  v17(v6 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_url, a1, v13);
  v18 = (_QWORD *)(v6
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
  v19 = a2;
  *v18 = a2;
  v18[1] = a3;
  v20 = v26;
  v21 = (uint64_t *)(v6
                  + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key);
  *v21 = v26;
  v21[1] = a5;
  swift_bridgeObjectRetain();
  v28 = a5;
  sub_18A612FA0(v20, a5);
  if (qword_1EDF6AA80 != -1)
    swift_once();
  sub_18A60990C(v13, (uint64_t)qword_1EDF6B7E0);
  v31 = v19;
  v32 = a3;
  v22 = v27;
  v23 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v12, *MEMORY[0x1E0CAFD78], v29);
  sub_18A618024();
  URL.appending<A>(component:directoryHint:)();
  sub_18A60FBA4(v20, v28);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v6 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile, v16, v13);
  *(_QWORD *)(v6
            + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState) = 0;
  return v6;
}

unint64_t sub_18A63A638(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = v2;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  v7 = __DataStorage.init(length:)() | 0x4000000000000000;
  v8 = v4 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key;
  v9 = *(_QWORD *)(v4
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key);
  v10 = *(_QWORD *)(v8 + 8);
  type metadata accessor for ChunkDataDecryptor();
  swift_allocObject();
  swift_retain();
  sub_18A612FA0(v9, v10);
  sub_18A654EF4(0x1000000000, v7);
  if (!v3)
  {
    a2 = sub_18A654DAC(a1, a2);
    swift_release();
  }
  swift_release();
  return a2;
}

uint64_t sub_18A63A740(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
  v3 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                 + 8);
  sub_18A65A35C(a1, a2);
  v6 = v5;
  v8 = v7;
  sub_18A639DE8(v5, v7);
  sub_18A60FBA4(v6, v8);
  sub_18A5F101C(&qword_1EDF6A770);
  sub_18A63DD6C();
  v9 = BidirectionalCollection<>.joined(separator:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  if (v4 == v9 && v3 == v11)
    v13 = 1;
  else
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

void sub_18A63A828()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL();
  sub_18A63DE4C(v0, qword_1EDF6B7E0);
  v1 = sub_18A60990C(v0, (uint64_t)qword_1EDF6B7E0);
  sub_18A63A870(v1);
}

void sub_18A63A870(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40[2];

  v39 = a1;
  v40[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = sub_18A5F101C(&qword_1EDF6B8C0);
  MEMORY[0x1E0C80A78](v1);
  v38 = (uint64_t)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL.DirectoryHint();
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_defaultManager);
  v40[0] = 0;
  v12 = objc_msgSend(v11, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, v40);
  v13 = v40[0];
  if (v12)
  {
    v14 = v12;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v13;

    v16 = objc_msgSend(v10, sel_defaultManager);
    URL._bridgeToObjectiveC()(v17);
    v19 = v18;
    v40[0] = 0;
    v20 = objc_msgSend(v16, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v18, 1, v40);

    v21 = v40[0];
    if (v20)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return;
    }
    v25 = v40[0];
    v24 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v23 = v40[0];
    v24 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  if (qword_1EDF6AB68 != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  sub_18A60990C(v26, (uint64_t)qword_1EDF6C990);
  v27 = v24;
  v28 = v24;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v31 = 138412290;
    v33 = v24;
    v34 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v40[0] = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v32 = v34;

    _os_log_impl(&dword_18A5C5000, v29, v30, "Failed to create cache directory with error %@", v31, 0xCu);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    swift_arrayDestroy();
    MEMORY[0x18D76E86C](v32, -1, -1);
    MEMORY[0x18D76E86C](v31, -1, -1);
  }
  else
  {

  }
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v5, *MEMORY[0x1E0CAFD60], v37);
  sub_18A5F1010(v38, 1, 1, v6);
  URL.init(filePath:directoryHint:relativeTo:)();

}

uint64_t sub_18A63ACAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v1);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v0 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_url);
  return URLRequest.init(url:cachePolicy:timeoutInterval:)();
}

uint64_t sub_18A63AD3C(unint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  char *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t result;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  void *v33;
  uint8_t *v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  id v38[2];

  v4 = v2;
  v38[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18A63DD30();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile, v7);
  v11 = sub_18A63B28C((uint64_t)v10);
  if (v3)
    return (uint64_t)a2;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v12 = v11;
    v38[0] = 0;
    if (objc_msgSend(v11, sel_seekToOffset_error_, a1, v38))
    {
      v13 = &a2[-a1];
      if (__OFSUB__(a2, a1))
      {
        __break(1u);
      }
      else
      {
        v14 = v38[0];
        v15 = NSFileHandle.read(upToCount:)();
        a2 = (char *)v15;
        a1 = v16;
        if (v16 >> 60 != 15)
        {
          sub_18A612FA0(v15, v16);
          if ((char *)Data.count.getter() == v13)
          {
            if (qword_1EDF6AB68 != -1)
              swift_once();
            v17 = type metadata accessor for Logger();
            sub_18A60990C(v17, (uint64_t)qword_1EDF6C990);
            swift_retain();
            v18 = Logger.logObject.getter();
            v19 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v18, v19))
            {
              v20 = (uint8_t *)swift_slowAlloc();
              v36 = (void *)swift_slowAlloc();
              v38[0] = v36;
              v35 = v20;
              *(_DWORD *)v20 = 136315138;
              v34 = v20 + 4;
              v21 = *(_QWORD *)(v4
                              + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
              v22 = *(_QWORD *)(v4
                              + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                              + 8);
              swift_bridgeObjectRetain();
              v37 = sub_18A609924(v21, v22, (uint64_t *)v38);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              v23 = v35;
              _os_log_impl(&dword_18A5C5000, v18, v19, "found chunk with signature %s in local cache", v35, 0xCu);
              v24 = v36;
              swift_arrayDestroy();
              MEMORY[0x18D76E86C](v24, -1, -1);
              MEMORY[0x18D76E86C](v23, -1, -1);

              sub_18A60FC24((uint64_t)a2, a1);
            }
            else
            {
              sub_18A60FC24((uint64_t)a2, a1);

              swift_release();
            }
            return (uint64_t)a2;
          }
          sub_18A60FC24((uint64_t)a2, a1);
        }
        if (qword_1EDF6AB68 == -1)
          goto LABEL_15;
      }
      swift_once();
LABEL_15:
      v26 = type metadata accessor for Logger();
      sub_18A60990C(v26, (uint64_t)qword_1EDF6C990);
      swift_retain_n();
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v36 = (void *)swift_slowAlloc();
        v38[0] = v36;
        v35 = v29;
        *(_DWORD *)v29 = 136315138;
        v34 = v29 + 4;
        v30 = *(_QWORD *)(v4
                        + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
        v31 = *(_QWORD *)(v4
                        + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                        + 8);
        swift_bridgeObjectRetain();
        v37 = sub_18A609924(v30, v31, (uint64_t *)v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        v32 = v35;
        _os_log_impl(&dword_18A5C5000, v27, v28, "can't find chunk with signature %s in local cache", v35, 0xCu);
        v33 = v36;
        swift_arrayDestroy();
        MEMORY[0x18D76E86C](v33, -1, -1);
        MEMORY[0x18D76E86C](v32, -1, -1);

        sub_18A60FC24((uint64_t)a2, a1);
      }
      else
      {
        sub_18A60FC24((uint64_t)a2, a1);

        swift_release_n();
      }
      return 0;
    }
    a2 = (char *)v38[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)a2;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_18A63B28C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x1E0C80C00];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_18A63B3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = v0;
  Data.write(to:options:)();
  if (!v1)
  {
    if (qword_1EDF6AB68 != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    sub_18A60990C(v3, (uint64_t)qword_1EDF6C990);
    swift_retain();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v10 = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = *(_QWORD *)(v2
                     + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      v9 = *(_QWORD *)(v2
                     + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                     + 8);
      swift_bridgeObjectRetain();
      sub_18A609924(v8, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18A5C5000, v4, v5, "cache chunk with signature %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D76E86C](v7, -1, -1);
      MEMORY[0x18D76E86C](v6, -1, -1);

    }
    else
    {

      swift_release();
    }
    URL.ckMarkFilePurgeable()();
  }
}

uint64_t sub_18A63B58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  v3[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A63B5EC()
{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint8_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  objc_class *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53[2];

  v3 = *(NSObject **)(v1 + 104);
  v4 = OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState;
  v5 = *(uint64_t *)((char *)&v3->isa
                  + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState);
  *(_QWORD *)(v1 + 120) = v5;
  if (!v5)
  {
    v13 = v3;
    if (qword_1EDF6AB68 != -1)
    {
      swift_once();
      v13 = *(NSObject **)(v1 + 104);
    }
    v14 = sub_18A5F3BA0();
    sub_18A60990C(v14, (uint64_t)qword_1EDF6C990);
    sub_18A5F3E6C();
    sub_18A63E2B8();
    v15 = sub_18A63E288();
    v16 = sub_18A5F3B90(v15);
    v17 = *(_QWORD *)(v1 + 104);
    if (v16)
    {
      v18 = (uint8_t *)sub_18A5F3830();
      v53[0] = sub_18A5F3830();
      *(_DWORD *)v18 = 136315138;
      v20 = *(_QWORD *)(v17
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      v19 = *(_QWORD *)(v17
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                      + 8);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v1 + 80) = sub_18A609924(v20, v19, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A62FE64();
      swift_bridgeObjectRelease();
      sub_18A63E290(&dword_18A5C5000, v13, v2, "chunk %s needed, downloading", v18);
      sub_18A63E278();
      sub_18A5F392C();
    }

    sub_18A62FE64();
    goto LABEL_22;
  }
  if (v5 != 1)
  {
    v21 = qword_1EDF6AB68;
    swift_retain();
    if (v21 != -1)
      swift_once();
    v22 = sub_18A5F3BA0();
    v23 = sub_18A60990C(v22, (uint64_t)qword_1EDF6C990);
    *(_QWORD *)(v1 + 128) = v23;
    swift_retain();
    Logger.logObject.getter();
    v24 = sub_18A63E288();
    v25 = sub_18A5F3B90(v24);
    v26 = *(_QWORD *)(v1 + 104);
    if (v25)
    {
      v27 = (uint8_t *)sub_18A5F3830();
      v53[0] = sub_18A5F3830();
      *(_DWORD *)v27 = 136315138;
      v29 = *(_QWORD *)(v26
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      v28 = *(_QWORD *)(v26
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                      + 8);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v1 + 72) = sub_18A609924(v29, v28, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A62FE64();
      swift_bridgeObjectRelease();
      sub_18A63E290(&dword_18A5C5000, v23, v2, "chunk %s download in-progress, waiting", v27);
      sub_18A63E278();
      sub_18A5F392C();
    }

    sub_18A62FE64();
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 136) = v33;
    sub_18A5F101C(&qword_1EDF6A9D8);
    *v33 = v1;
    v33[1] = sub_18A63BCC4;
    return Task.value.getter();
  }
  v51 = v4;
  v52 = v3;
  if (qword_1EDF6AB68 != -1)
  {
    swift_once();
    v3 = *(NSObject **)(v1 + 104);
  }
  v6 = sub_18A5F3BA0();
  sub_18A60990C(v6, (uint64_t)qword_1EDF6C990);
  swift_retain();
  sub_18A63E2B8();
  v7 = sub_18A63E288();
  v8 = sub_18A5F4394(v7);
  v9 = *(_QWORD *)(v1 + 104);
  if (v8)
  {
    v10 = (uint8_t *)sub_18A5F3830();
    v53[0] = sub_18A5F3830();
    *(_DWORD *)v10 = 136315138;
    v12 = *(_QWORD *)(v9
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
    v11 = *(_QWORD *)(v9
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                    + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v1 + 48) = sub_18A609924(v12, v11, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_18A63E290(&dword_18A5C5000, v0, (os_log_type_t)v3, "chunk %s available in cache, retrieving", v10);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  swift_release();
  v30 = *(NSObject **)(v1 + 104);
  v31 = sub_18A63AD3C(*(_QWORD *)(v1 + 88), *(char **)(v1 + 96));
  v34 = v32;
  if (v32 >> 60 == 15)
  {
    swift_retain();
    sub_18A63E2B8();
    v35 = sub_18A63E288();
    v36 = sub_18A5F3B90(v35);
    v37 = *(_QWORD *)(v1 + 104);
    if (v36)
    {
      v38 = (uint8_t *)sub_18A5F3830();
      v53[0] = sub_18A5F3830();
      *(_DWORD *)v38 = 136315138;
      v39 = *(_QWORD *)(v37
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      v40 = *(_QWORD *)(v37
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                      + 8);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v1 + 56) = sub_18A609924(v39, v40, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A62FE64();
      swift_bridgeObjectRelease();
      sub_18A63E290(&dword_18A5C5000, v30, v2, "chunk %s not found in cache, re-downloading", v38);
      sub_18A63E278();
      sub_18A5F392C();
    }

    sub_18A62FE64();
    v4 = v51;
    v3 = v52;
LABEL_22:
    v42 = *(_QWORD *)(v1 + 104);
    v41 = *(_QWORD *)(v1 + 112);
    v43 = type metadata accessor for TaskPriority();
    sub_18A5F1010(v41, 1, 1, v43);
    v44 = sub_18A6083AC(&qword_1EDF6B870, type metadata accessor for ChunkStreamHandle.ChunkReader, (uint64_t)&unk_18A83AD0C);
    v45 = (_QWORD *)swift_allocObject();
    v45[2] = v42;
    v45[3] = v44;
    v45[4] = v42;
    swift_retain_n();
    sub_18A672208(v41, (uint64_t)&unk_1EDF6B878, (uint64_t)v45);
    *(_QWORD *)(v1 + 152) = v46;
    v47 = *(unint64_t *)((char *)&v3->isa + v4);
    *(Class *)((char *)&v3->isa + v4) = v46;
    swift_retain();
    sub_18A63D9D0(v47);
    v48 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 160) = v48;
    sub_18A5F101C(&qword_1EDF6A9D8);
    *v48 = v1;
    v48[1] = sub_18A63BEBC;
    return Task.value.getter();
  }
  v50 = v31;
  sub_18A63E298();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v1 + 8))(v50, v34);
}

uint64_t sub_18A63BCC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18A5F4328();
  *v3 = *v2;
  *(_QWORD *)(v0 + 144) = v1;
  swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A63BD18()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = *(NSObject **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = Data.subdata(in:)();
  v6 = v5;
  sub_18A60FBA4(v2, v3);
  swift_retain();
  Logger.logObject.getter();
  v7 = sub_18A63E288();
  if (sub_18A5F4394(v7))
  {
    v8 = *(_QWORD *)(v0 + 104);
    v9 = (uint8_t *)sub_18A5F3830();
    v14 = sub_18A5F3830();
    *(_DWORD *)v9 = 136315138;
    v10 = *(_QWORD *)(v8
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
    v11 = *(_QWORD *)(v8
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                    + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = sub_18A609924(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    sub_18A63E290(&dword_18A5C5000, v1, (os_log_type_t)v3, "chunk %s download in-progress, done waiting", v9);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  v12 = *(_QWORD *)(v0 + 120);
  swift_release();
  sub_18A63D9D0(v12);

  sub_18A63E298();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
}

uint64_t sub_18A63BEBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18A5F4328();
  *v3 = *v2;
  *(_QWORD *)(v0 + 168) = v1;
  swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A63BF10()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = Data.subdata(in:)();
  v5 = v4;
  swift_release();
  sub_18A60FBA4(v1, v2);
  sub_18A63E298();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v5);
}

uint64_t sub_18A63BF8C()
{
  uint64_t v0;

  sub_18A63D9D0(*(_QWORD *)(v0 + 120));
  sub_18A63E298();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A63BFBC()
{
  uint64_t v0;

  swift_release();
  sub_18A63E298();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A63BFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a1;
  v4[6] = a4;
  v5 = type metadata accessor for URLRequest();
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

id sub_18A63C050()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  id result;
  _QWORD *v11;
  uint64_t v12;

  if (qword_1EDF6AB68 != -1)
    swift_once();
  v1 = sub_18A5F3BA0();
  v2 = sub_18A60990C(v1, (uint64_t)qword_1EDF6C990);
  sub_18A5F3E6C();
  v3 = v2;
  Logger.logObject.getter();
  v4 = sub_18A63E288();
  v5 = os_log_type_enabled(v2, v4);
  v6 = v0[6];
  if (v5)
  {
    v7 = (uint8_t *)sub_18A5F3830();
    v12 = sub_18A5F3830();
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)(v6
                   + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
    v8 = *(_QWORD *)(v6
                   + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                   + 8);
    swift_bridgeObjectRetain();
    v0[4] = sub_18A609924(v9, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_18A63E290(&dword_18A5C5000, v3, v4, "chunk %s, download starting", v7);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  swift_release();
  sub_18A63ACAC();
  type metadata accessor for AssetStreamHandle();
  v0[10] = sub_18A65F614();
  result = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
  v0[11] = result;
  if (result)
  {
    v11 = (_QWORD *)swift_task_alloc();
    v0[12] = v11;
    *v11 = v0;
    v11[1] = sub_18A63C268;
    return (id)C2RequestManager.data(for:options:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18A63C268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A5F4328();
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v0 + 112) = v3;
  *(_QWORD *)(v0 + 120) = v4;
  *(_QWORD *)(v0 + 128) = v1;
  swift_task_dealloc();

  return sub_18A5F3A94();
}

uint64_t sub_18A63C2D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
    goto LABEL_6;
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 120);
  if (objc_msgSend(v2, sel_statusCode) != (id)200)
  {

LABEL_6:
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 104);
    v13 = *(void **)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 72);
    v46 = *(void **)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 64);
    v42 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v15
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState);
    *(_QWORD *)(v15
              + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState) = 0;
    sub_18A63D9D0(v16);
    type metadata accessor for CKError(0);
    *(_QWORD *)(v0 + 24) = 4;
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A6083AC((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    sub_18A60FBA4(v12, v11);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v44, v42);
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v0 + 128);
  v5 = sub_18A63A638(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  if (v4)
  {
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(void **)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(void **)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));

    sub_18A60FBA4(v9, v7);
  }
  else
  {
    v19 = v5;
    v20 = v6;
    if ((sub_18A63A740(v5, v6) & 1) != 0)
    {
      sub_18A63B3A0();
      v21 = *(void **)(v0 + 120);
      v47 = *(_QWORD *)(v0 + 112);
      v22 = *(void **)(v0 + 80);
      v29 = *(_QWORD *)(v0 + 48);
      sub_18A5F4554();

      sub_18A63E2E4(v30, v31, v32, v33, v34, v35, v36, v37, v40, v41, v43, v47);
      v38 = *(_QWORD *)(v29
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState);
      *(_QWORD *)(v29
                + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState) = 1;
      sub_18A63D9D0(v38);
      v39 = *(uint64_t **)(v0 + 40);
      *v39 = v19;
      v39[1] = v20;
      swift_task_dealloc();
      v17 = *(uint64_t (**)(void))(v0 + 8);
      return v17();
    }
    v23 = *(_QWORD *)(v0 + 112);
    v24 = *(void **)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(void **)(v0 + 80);
    v27 = *(_QWORD *)(v0 + 64);
    v45 = *(_QWORD *)(v0 + 56);
    v48 = *(_QWORD *)(v0 + 72);
    sub_18A63DCAC();
    sub_18A63E2AC();
    *v28 = 1;
    swift_willThrow();

    sub_18A60FBA4(v19, v20);
    sub_18A60FBA4(v25, v23);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v48, v45);
  }
LABEL_7:
  swift_task_dealloc();
  v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_18A63C5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A63C5F8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v14[2];

  v1 = v0;
  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v3 = v0 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile;
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile);
  v5 = v4;
  v14[0] = 0;
  v6 = objc_msgSend(v2, sel_removeItemAtURL_error_, v4, v14);

  if (v6)
  {
    v7 = v14[0];
  }
  else
  {
    v8 = v14[0];
    v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  v10 = v1 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_url;
  v11 = type metadata accessor for URL();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  swift_bridgeObjectRelease();
  sub_18A60FBA4(*(_QWORD *)(v1 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key), *(_QWORD *)(v1+ OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key+ 8));
  v12(v3, v11);
  sub_18A63D9D0(*(_QWORD *)(v1
                          + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState));
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_18A63C76C()
{
  sub_18A63C5F8();
  return swift_defaultActor_deallocate();
}

void sub_18A63C784(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  sub_18A63C7C4(a1);
}

void sub_18A63C7C4(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  objc_class *ObjectType;
  char *v36;
  objc_super v37;
  __int128 v38;
  char v39;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = sub_18A63E2CC();
  v4 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  v31 = v4;
  sub_18A63E2A0();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v32 = (uint64_t)&v27 - v9;
  v33 = sub_18A5F101C(&qword_1EDF6B8A8);
  MEMORY[0x1E0C80A78](v33);
  sub_18A5F3E5C();
  v12 = v11 - v10;
  sub_18A608B00(a1, a1[3]);
  sub_18A63D6F8();
  v13 = v1;
  v34 = v12;
  v14 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    sub_18A608B60((uint64_t)a1);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v36 = v8;
    v15 = v31;
    LOBYTE(v38) = 0;
    sub_18A6083AC(&qword_1EDF6B8B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v16 = v30;
    sub_18A63E2D4();
    v17 = *(void (**)(void))(v15 + 32);
    v29 = &v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_downloadURL];
    v17();
    v39 = 1;
    sub_18A63DDB0();
    sub_18A63E2D4();
    v18 = v38;
    *(_OWORD *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_key] = v38;
    LOBYTE(v38) = 2;
    v27 = KeyedDecodingContainer.decode(_:forKey:)();
    v28 = *((_QWORD *)&v18 + 1);
    v32 = v18;
    v19 = &v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_signature];
    *(_QWORD *)v19 = v27;
    *((_QWORD *)v19 + 1) = v20;
    v21 = v20;
    sub_18A5F101C(&qword_1EDF6B858);
    v39 = 3;
    sub_18A63DDEC(&qword_1EDF6B8B8, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEB8B0]);
    sub_18A63E2D4();
    *(_OWORD *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range] = v38;
    v22 = (uint64_t)v36;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v36, v29, v16);
    type metadata accessor for ChunkStreamHandle.ChunkReader(0);
    sub_18A610420();
    v23 = v21;
    swift_bridgeObjectRetain();
    v24 = v32;
    v25 = v28;
    sub_18A612FA0(v32, v28);
    v26 = sub_18A63A420(v22, v27, v23, v24, v25);
    sub_18A63E26C();
    *(_QWORD *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_chunkReader] = v26;

    v37.receiver = v13;
    v37.super_class = ObjectType;
    objc_msgSendSuper2(&v37, sel_init);
    sub_18A608B60((uint64_t)a1);
  }
  sub_18A5F39F4();
}

void sub_18A63CBC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_class *ObjectType;
  uint64_t v63;
  objc_super v64;
  __int128 v65;
  unint64_t v66;

  v6 = v5;
  v55 = a4;
  v56 = a5;
  v66 = a3;
  v63 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for URLError.Code();
  sub_18A63E2A0();
  MEMORY[0x1E0C80A78](v8);
  sub_18A5F3E5C();
  v57 = v10 - v9;
  v11 = type metadata accessor for URLError();
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  sub_18A63E2A0();
  MEMORY[0x1E0C80A78](v12);
  sub_18A5F3E5C();
  v15 = v14 - v13;
  sub_18A5F101C(&qword_1EDF6B8C0);
  sub_18A63E2A0();
  MEMORY[0x1E0C80A78](v16);
  sub_18A5F3E5C();
  v19 = v18 - v17;
  v20 = sub_18A63E2CC();
  v61 = *(_QWORD *)(v20 - 8);
  sub_18A63E2A0();
  v22 = MEMORY[0x1E0C80A78](v21);
  v54 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v52 - v24;
  v26 = v6;
  URL.init(string:)();
  v27 = v20;
  if (sub_18A5F105C(v19, 1, v20) == 1)
  {

    sub_18A5F402C();
    sub_18A63DED4(v19);
    static URLError.Code.badURL.getter();
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A6083AC(&qword_1EDF6B8D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB15C0], MEMORY[0x1E0CB15B8]);
    v28 = v60;
    _BridgedStoredNSError.init(_:userInfo:)();
    URLError._nsError.getter();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v15, v28);
    swift_willThrow();
    sub_18A63E2C0();
  }
  else
  {
    v29 = v63;
    v30 = v66;
    v31 = v61;
    v32 = (uint64_t)v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v25, v19, v27);
    v33 = v58;
    v34 = sub_18A6175E0();
    if (!v33)
    {
      v59 = v35;
      v60 = v34;
      sub_18A64BDB8(v34, v35);
      v37 = v36;
      v39 = v38;
      v40 = &v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_downloadURL];
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
      v41(&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_downloadURL], v32, v27);
      v57 = v37;
      v58 = v32;
      v42 = (uint64_t *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_key];
      v43 = v37;
      *v42 = v37;
      v42[1] = v39;
      v53 = v39;
      v44 = &v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range];
      v45 = v56;
      *(_QWORD *)v44 = v55;
      *((_QWORD *)v44 + 1) = v45;
      v65 = *(_OWORD *)(a1 + 16);
      v46 = (uint64_t *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_signature];
      *(_OWORD *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_signature] = v65;
      sub_18A612FA0(v43, v39);
      sub_18A63DF14((uint64_t)&v65);
      sub_18A5F402C();
      v47 = (uint64_t)v54;
      v41(v54, (uint64_t)v40, v27);
      v48 = v46[1];
      v56 = *v46;
      v49 = *v42;
      v50 = v42[1];
      type metadata accessor for ChunkStreamHandle.ChunkReader(0);
      sub_18A610420();
      swift_bridgeObjectRetain();
      sub_18A612FA0(v49, v50);
      v51 = sub_18A63A420(v47, v56, v48, v49, v50);
      sub_18A60FBA4(v60, v59);
      sub_18A60FBA4(v57, v53);
      sub_18A63E2DC(v58, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
      *(_QWORD *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_chunkReader] = v51;

      v64.receiver = v26;
      v64.super_class = ObjectType;
      objc_msgSendSuper2(&v64, sel_init);
      sub_18A63E2C0();
      goto LABEL_7;
    }

    sub_18A60FBA4(v29, v30);
    sub_18A5F402C();
    sub_18A63E2DC((uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
  }
  swift_deallocPartialClassInstance();
LABEL_7:
  sub_18A5F39F4();
}

void sub_18A63CF98()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_18A63CFD0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18A63D07C()
{
  return type metadata accessor for ChunkStreamHandle(0);
}

uint64_t type metadata accessor for ChunkStreamHandle(uint64_t a1)
{
  return sub_18A63D14C(a1, (uint64_t *)&unk_1EDF6A0B8);
}

uint64_t sub_18A63D098()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_18A63D130()
{
  return type metadata accessor for ChunkStreamHandle.ChunkReader(0);
}

uint64_t type metadata accessor for ChunkStreamHandle.ChunkReader(uint64_t a1)
{
  return sub_18A63D14C(a1, (uint64_t *)&unk_1EDF6B828);
}

uint64_t sub_18A63D14C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18A63D17C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChunkStreamHandle.ChunkReader.CacheState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for ChunkStreamHandle.ChunkReader.CacheState(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for ChunkStreamHandle.ChunkReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

_QWORD *initializeWithTake for ChunkStreamHandle.ChunkReader.CacheState(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for ChunkStreamHandle.ChunkReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChunkStreamHandle.ChunkReader.CacheState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ChunkStreamHandle.ChunkReader.CacheState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_18A63D404(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_18A63D41C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ChunkStreamHandle.ChunkReader.CacheState()
{
  return &type metadata for ChunkStreamHandle.ChunkReader.CacheState;
}

uint64_t sub_18A63D44C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_18A5F101C(&qword_1EDF6B840);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_18A5F3E5C();
  v7 = v6 - v5;
  sub_18A608B00(a1, a1[3]);
  sub_18A63D6F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18A63E2CC();
  sub_18A6083AC(&qword_1EDF6B850, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  sub_18A5F461C();
  if (!v1)
  {
    sub_18A63D734();
    sub_18A5F461C();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_18A5F101C(&qword_1EDF6B858);
    sub_18A63DDEC(&qword_1EDF6B860, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB880]);
    sub_18A5F461C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

BOOL sub_18A63D638(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_18A63D648(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_18A63D66C(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

void sub_18A63D6B0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_18A63C784(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_18A63D6D8(_QWORD *a1)
{
  return sub_18A63D44C(a1);
}

unint64_t sub_18A63D6F8()
{
  unint64_t result;

  result = qword_1EDF6B848;
  if (!qword_1EDF6B848)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AEFC, &type metadata for ChunkStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6B848);
  }
  return result;
}

unint64_t sub_18A63D734()
{
  unint64_t result;

  result = qword_1EDF69488;
  if (!qword_1EDF69488)
  {
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDF69488);
  }
  return result;
}

BOOL sub_18A63D770(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_18A63D638(*a1, *a2);
}

Swift::Int sub_18A63D77C()
{
  char *v0;

  return sub_18A63D66C(*v0);
}

void sub_18A63D784(uint64_t a1)
{
  char *v1;

  sub_18A63D648(a1, *v1);
}

uint64_t sub_18A63D798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

void sub_18A63D7B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range);
  if (v3 > v2
    || (v4 = *(_QWORD *)(v0 + 24), *(_QWORD *)(v1 + OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range + 8) < v4))
  {
    sub_18A63DCAC();
    sub_18A63E2AC();
    *v5 = 0;
    swift_willThrow();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v6 = v2 - v3;
  if (__OFSUB__(v2, v3))
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v7 >= v6)
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v8;
    *v8 = v0;
    v8[1] = sub_18A63D8A4;
    sub_18A63B58C(v6, v7);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_18A63D8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_18A6239A4();
  if (!v2)
  {
    v6 = a1;
    v7 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v7);
}

uint64_t sub_18A63D8FC()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A63D928(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_18A63D994;
  return sub_18A63BFEC(a1, v4, v5, v6);
}

uint64_t sub_18A63D994()
{
  uint64_t v0;

  sub_18A6239A4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_18A63D9D0(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

unint64_t sub_18A63D9E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_18A5F101C(&qword_1EDF6B888);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  sub_18A5F3E6C();
  while (1)
  {
    sub_18A63DCE8(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_18A63DB04(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_18A612E68(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18A63DB04(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return sub_18A63DB68(a1, a2, v4);
}

unint64_t sub_18A63DB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

unint64_t sub_18A63DCAC()
{
  unint64_t result;

  result = qword_1EDF6B880;
  if (!qword_1EDF6B880)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AEBC, &type metadata for ChunkStreamHandle.StreamError);
    atomic_store(result, (unint64_t *)&qword_1EDF6B880);
  }
  return result;
}

uint64_t sub_18A63DCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6B890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_18A63DD30()
{
  unint64_t result;

  result = qword_1EDF6B898;
  if (!qword_1EDF6B898)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDF6B898);
  }
  return result;
}

unint64_t sub_18A63DD6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6A778;
  if (!qword_1EDF6A778)
  {
    v1 = sub_18A619E8C(&qword_1EDF6A770);
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6A778);
  }
  return result;
}

unint64_t sub_18A63DDB0()
{
  unint64_t result;

  result = qword_1EDF69490;
  if (!qword_1EDF69490)
  {
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EDF69490);
  }
  return result;
}

uint64_t sub_18A63DDEC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_18A619E8C(&qword_1EDF6B858);
    v8 = a2;
    result = MEMORY[0x18D76E7C4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_18A63DE4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_18A63DE8C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18A63DED4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_18A5F101C(&qword_1EDF6B8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18A63DF14(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s10SyncReasonOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChunkStreamHandle.StreamError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A63E010 + 4 * byte_18A83AC49[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A63E044 + 4 * byte_18A83AC44[v4]))();
}

uint64_t sub_18A63E044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A63E04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A63E054);
  return result;
}

uint64_t sub_18A63E060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A63E068);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A63E06C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A63E074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_18A63E080(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ChunkStreamHandle.StreamError()
{
  return &type metadata for ChunkStreamHandle.StreamError;
}

uint64_t storeEnumTagSinglePayload for ChunkStreamHandle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18A63E0E8 + 4 * byte_18A83AC53[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18A63E11C + 4 * byte_18A83AC4E[v4]))();
}

uint64_t sub_18A63E11C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A63E124(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A63E12CLL);
  return result;
}

uint64_t sub_18A63E138(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A63E140);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18A63E144(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A63E14C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChunkStreamHandle.CodingKeys()
{
  return &type metadata for ChunkStreamHandle.CodingKeys;
}

unint64_t sub_18A63E16C()
{
  unint64_t result;

  result = qword_1EDF6B8D8;
  if (!qword_1EDF6B8D8)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AE2C, &type metadata for ChunkStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6B8D8);
  }
  return result;
}

unint64_t sub_18A63E1AC()
{
  unint64_t result;

  result = qword_1EDF6B8E0;
  if (!qword_1EDF6B8E0)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AE94, &type metadata for ChunkStreamHandle.StreamError);
    atomic_store(result, (unint64_t *)&qword_1EDF6B8E0);
  }
  return result;
}

unint64_t sub_18A63E1EC()
{
  unint64_t result;

  result = qword_1EDF6B8E8;
  if (!qword_1EDF6B8E8)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83AD9C, &type metadata for ChunkStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6B8E8);
  }
  return result;
}

unint64_t sub_18A63E22C()
{
  unint64_t result;

  result = qword_1EDF6B8F0;
  if (!qword_1EDF6B8F0)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83ADC4, &type metadata for ChunkStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6B8F0);
  }
  return result;
}

uint64_t sub_18A63E26C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 136), *(_QWORD *)(v1 - 144));
}

uint64_t sub_18A63E278()
{
  return swift_arrayDestroy();
}

uint64_t sub_18A63E288()
{
  return static os_log_type_t.debug.getter();
}

void sub_18A63E290(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_18A63E298()
{
  return swift_task_dealloc();
}

uint64_t sub_18A63E2AC()
{
  return swift_allocError();
}

uint64_t sub_18A63E2B8()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A63E2C0()
{
  uint64_t v0;

  return sub_18A60FBA4(*(_QWORD *)(v0 - 120), *(_QWORD *)(v0 - 72));
}

uint64_t sub_18A63E2CC()
{
  return type metadata accessor for URL();
}

uint64_t sub_18A63E2D4()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_18A63E2DC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_18A63E2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v12;

  return sub_18A60FBA4(v12, a12);
}

uint64_t CKShareTransferRepresentation.init(exporter:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void CKShareTransferRepresentation.body.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for CKShareTransferRepresentation.ExportedShare(255, v5, v4, a2);
  v20 = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKShareTransferRepresentation<A>.ExportedShare, v6);
  v22 = v5;
  v23 = v6;
  v24 = v4;
  v25 = v20;
  v7 = type metadata accessor for ProxyRepresentation();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  sub_18A6103D4();
  v11 = v9 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - v13;
  v16 = *v3;
  v15 = v3[1];
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v5;
  v17[3] = v4;
  v17[4] = v16;
  v17[5] = v15;
  swift_retain();
  ProxyRepresentation.init(exporting:)();
  MEMORY[0x18D76E7C4](MEMORY[0x1E0CA87C8], v7);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v14, v11, v7);
  v19 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v19(v11, v7);
  v18(v21, (uint64_t)v14, v7);
  v19((uint64_t)v14, v7);
  sub_18A5F37E8();
}

uint64_t type metadata accessor for CKShareTransferRepresentation.ExportedShare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKShareTransferRepresentation.ExportedShare);
}

_QWORD *sub_18A63E45C@<X0>(_OWORD *a1@<X8>)
{
  return sub_18A63E4E0((_QWORD *(*)(_OWORD *__return_ptr))sub_18A6405E4, a1);
}

uint64_t sub_18A63E4A0()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_18A63E4C4@<X0>(_OWORD *a1@<X8>)
{
  return sub_18A63E45C(a1);
}

_QWORD *sub_18A63E4E0@<X0>(_QWORD *(*a1)(_OWORD *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *result;
  __int128 v4;
  __int128 v5;
  _OWORD v6[3];

  result = a1(v6);
  v4 = v6[1];
  v5 = v6[2];
  *a2 = v6[0];
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

void static CKShareTransferRepresentation.ExportedShare.prepareShare(container:allowedSharingOptions:preparationHandler:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id v10;
  id v11;

  swift_retain();
  v10 = a2;
  v11 = a1;
  sub_18A63E5C4(a1, a2, 0, 0, a3, a4, a5);
}

void sub_18A63E5C4(void *a1@<X0>, id a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  id v13;
  id v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  void *v21;
  id v22;
  id v23;

  if (a1)
  {
    v13 = a1;
    v14 = CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(v13);
    v15 = objc_msgSend(v13, sel_containerID);
    v19 = CKSharingContainerSupportsAdminParticipants(v15, v16, v17, v18);

    if (v19)
    {
      if (!a2)
      {

        if (a4)
          goto LABEL_13;
LABEL_10:

        goto LABEL_14;
      }
      v20 = a2;
      objc_msgSend(v20, sel_setSupportAllowingAddedParticipantsToInviteOthers_, 1);

    }
    if (a4)
      goto LABEL_6;
LABEL_9:
    v13 = a1;
    goto LABEL_10;
  }
  v14 = 0;
  if (!a4)
    goto LABEL_9;
LABEL_6:
  if (!a2)
  {
    v13 = a1;
LABEL_13:

    a2 = 0;
    goto LABEL_14;
  }
  v21 = (void *)objc_opt_self();
  v22 = a2;
  v23 = a4;
  a2 = objc_msgSend(v21, sel_resolvedOptionsFromOptions_forExistingShare_, v22, v23);

LABEL_14:
  *a7 = v14;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
}

void static CKShareTransferRepresentation.ExportedShare.existing(_:container:allowedSharingOptions:)(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  id v9;
  id v10;

  v8 = a1;
  v9 = a3;
  v10 = a2;
  sub_18A63E5C4(a2, a3, 0, a1, 0, 0, a4);
}

BOOL sub_18A63E798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = &unk_1EDF6BAB0;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  sub_18A60A578((uint64_t)v4);
  return v1 != 0;
}

uint64_t sub_18A63E81C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_18A63E874;
  return v5();
}

uint64_t sub_18A63E874(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id sub_18A63E8D0()
{
  id *v0;

  if (*v0)
    return *v0;
  type metadata accessor for CKError(0);
  sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
  sub_18A615B0C();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)swift_willThrow();
}

id sub_18A63E954()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 8);
  if (v1)
    return v1;
  type metadata accessor for CKError(0);
  sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
  sub_18A615B0C();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)swift_willThrow();
}

uint64_t sub_18A63E9D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    swift_retain();
  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    v1 = v3;
    swift_willThrow();
  }
  return v1;
}

id sub_18A63EA6C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  if (v1)
    return v1;
  type metadata accessor for CKError(0);
  sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
  sub_18A615B0C();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)swift_willThrow();
}

uint64_t sub_18A63EAF0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t result;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = v1;
    return swift_willThrow();
  }
  else if (!*(_QWORD *)(v0 + 8) || *(_OWORD *)(v0 + 24) == 0)
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    return swift_willThrow();
  }
  return result;
}

void static CKShareTransferRepresentation.ExportedShare.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CKShareTransferRepresentation.ExportedShare(255, a1, a2, a4);
  sub_18A62FAE0();
}

void sub_18A63EBEC()
{
  type metadata accessor for DataRepresentation();
  sub_18A62FAE0();
}

void sub_18A63EC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *(_QWORD *)(v12 - 176) = a1;
  v13 = type metadata accessor for _ConditionalTransferRepresentation();
  *(_QWORD *)(v12 - 168) = v13;
  *(_QWORD *)(v12 - 184) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  sub_18A6103D4();
  *(_QWORD *)(v12 - 136) = v14 - v15;
  v17 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v12 - 144) = (char *)&a9 - v18;
  MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v12 - 104) = (char *)&a9 - v19;
  v20 = type metadata accessor for UTType();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v22);
  sub_18A6103D4();
  v28 = v26 - v27;
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&a9 - v31;
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&a9 - v33;
  if (qword_1EDF6AA98 != -1)
    swift_once();
  v35 = sub_18A60990C(v20, (uint64_t)qword_1EDF6B928);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  *(_QWORD *)(v12 - 96) = v36;
  v36(v24, v35, v20);
  v37 = sub_18A5F3F90();
  v38 = *(_QWORD *)(v12 - 88);
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v12 - 112);
  *(_QWORD *)(v37 + 24) = v38;
  sub_18A6406A4();
  v39 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  *(_QWORD *)(v12 - 120) = v39;
  v39(v34, v32, v9);
  v40 = *(void (**)(char *, uint64_t))(v25 + 8);
  v40(v32, v9);
  if (qword_1EDF6AAA0 != -1)
    swift_once();
  *(_QWORD *)(v12 - 160) = v34;
  v41 = sub_18A60990C(v20, (uint64_t)qword_1EDF6B940);
  sub_18A640698((uint64_t)v24, v41);
  v42 = sub_18A5F3F90();
  v43 = *(_QWORD *)(v12 - 112);
  v44 = *(_QWORD *)(v12 - 88);
  *(_QWORD *)(v42 + 16) = v43;
  *(_QWORD *)(v42 + 24) = v44;
  sub_18A6406A4();
  *(_QWORD *)(v12 - 152) = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 - 120))(v32, v28, v9);
  v45 = sub_18A6406BC();
  ((void (*)(uint64_t))v40)(v45);
  v46 = qword_1EDF6AA88 == -1;
  *(_QWORD *)(v12 - 120) = v40;
  v47 = (uint64_t)v24;
  if (!v46)
    swift_once();
  v48 = sub_18A60990C(v20, (uint64_t)qword_1EDF6B8F8);
  sub_18A640698((uint64_t)v24, v48);
  v49 = sub_18A5F3F90();
  v50 = *(_QWORD *)(v12 - 88);
  *(_QWORD *)(v49 + 16) = v43;
  *(_QWORD *)(v49 + 24) = v50;
  sub_18A6406A4();
  v51 = sub_18A5F3F90();
  *(_QWORD *)(v12 - 216) = v10;
  *(_QWORD *)(v12 - 192) = v11;
  v52 = v43;
  *(_QWORD *)(v51 + 16) = v43;
  *(_QWORD *)(v51 + 24) = v50;
  v53 = *(_QWORD *)(v12 - 144);
  v54 = *(_QWORD *)(v12 - 176);
  TransferRepresentation.exportingCondition(_:)();
  swift_release();
  v55 = sub_18A6406BC();
  (*(void (**)(uint64_t))(v12 - 120))(v55);
  v56 = *(_QWORD *)(v12 - 168);
  *(_QWORD *)(v12 - 200) = MEMORY[0x18D76E7C4](MEMORY[0x1E0CA88C8], v56);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 184) + 16);
  v58 = *(_QWORD *)(v12 - 104);
  *(_QWORD *)(v12 - 208) = v57;
  v57(v58, v53, v56);
  sub_18A5F4338(v53);
  if (qword_1EDF6AA90 != -1)
    swift_once();
  v59 = sub_18A60990C(v20, (uint64_t)qword_1EDF6B910);
  sub_18A640698(v47, v59);
  v60 = sub_18A5F3F90();
  *(_QWORD *)(v60 + 16) = v52;
  v61 = *(_QWORD *)(v12 - 88);
  *(_QWORD *)(v60 + 24) = v61;
  v62 = *(_QWORD *)(v12 - 192);
  DataRepresentation.init(exportedContentType:exporting:)();
  v63 = sub_18A5F3F90();
  *(_QWORD *)(v63 + 16) = v52;
  *(_QWORD *)(v63 + 24) = v61;
  v64 = *(_QWORD *)(v12 - 136);
  TransferRepresentation.exportingCondition(_:)();
  swift_release();
  v65 = sub_18A6406BC();
  v66 = *(void (**)(uint64_t))(v12 - 120);
  v66(v65);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 - 208))(v53, v64, v56);
  sub_18A5F4338(v64);
  v70 = v54;
  v67 = *(_QWORD *)(v12 - 160);
  v68 = *(_QWORD *)(v12 - 104);
  sub_18A63FB24(v67, *(_QWORD *)(v12 - 152), v68, v53, v62, v9, v9, v56, *(_QWORD *)(v12 - 128), v56, v70);
  sub_18A5F4338(v53);
  sub_18A5F4338(v68);
  v69 = sub_18A6406BC();
  v66(v69);
  ((void (*)(uint64_t, uint64_t))v66)(v67, v9);
  sub_18A5F37E8();
}

uint64_t sub_18A63F0D8(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;

  v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return swift_task_switch();
}

uint64_t sub_18A63F150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v7;
  void *v8;
  id v9;
  id v10;

  type metadata accessor for CKShareTransferRepresentation.ExportedShare(0, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), a4);
  sub_18A5F4564();
  if (!v4)
  {
    sub_18A640650();
    v7 = sub_18A63E8D0();
    v8 = (void *)objc_opt_self();
    *(_QWORD *)(v5 + 16) = 0;
    v9 = sub_18A640640(v8, sel_archivedDataWithRootObject_requiringSecureCoding_error_);
    v10 = sub_18A5F4034();
    _convertNSErrorToError(_:)();

    sub_18A61A8B8();
  }
  return sub_18A64062C(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_18A63F278(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;

  v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return swift_task_switch();
}

uint64_t sub_18A63F2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v7;
  void *v8;
  id v9;
  id v10;

  type metadata accessor for CKShareTransferRepresentation.ExportedShare(0, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), a4);
  sub_18A5F4564();
  if (!v4)
  {
    sub_18A640650();
    v7 = sub_18A63E954();
    v8 = (void *)objc_opt_self();
    *(_QWORD *)(v5 + 16) = 0;
    v9 = sub_18A640640(v8, sel_archivedDataWithRootObject_requiringSecureCoding_error_);
    v10 = sub_18A5F4034();
    _convertNSErrorToError(_:)();

    sub_18A61A8B8();
  }
  return sub_18A64062C(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_18A63F418(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;

  v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return swift_task_switch();
}

uint64_t sub_18A63F490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v9;
  int v10;
  _QWORD *v11;

  *(_QWORD *)(v5 + 88) = sub_18A5F38E0(a1, a2, a3, a4);
  sub_18A5F4564();
  if (v4)
    return (*(uint64_t (**)(void))(v5 + 8))();
  sub_18A5F3EB4();
  v6 = (_DWORD *)sub_18A63E9D8();
  *(_QWORD *)(v5 + 96) = v7;
  v9 = v6;
  v10 = *v6;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 104) = v11;
  *v11 = v5;
  v11[1] = sub_18A63F570;
  return ((uint64_t (*)(void))((char *)v9 + v10))();
}

uint64_t sub_18A63F570(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_18A63F630()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v1 = *(_QWORD *)(v0 + 120);
  sub_18A5F3EB4();
  v2 = sub_18A63E8D0();
  if (v1)
  {

    return sub_18A640614(*(uint64_t (**)(void))(v0 + 8));
  }
  v3 = v2;
  sub_18A5F3EB4();
  v4 = sub_18A63E954();
  v5 = *(void **)(v0 + 112);
  v7 = v4;
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6AF20);
  v8 = v5;
  v9 = v3;
  v10 = v7;
  v11 = sub_18A63FAC0(v8, v9, v10);
  v12 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 16) = 0;
  v13 = sub_18A640640(v12, sel_archivedDataWithRootObject_requiringSecureCoding_error_);
  v14 = *(id *)(v0 + 16);
  v15 = *(void **)(v0 + 112);
  if (!v13)
  {
    v19 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return sub_18A640614(*(uint64_t (**)(void))(v0 + 8));
  }
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  return sub_18A5F3BA8(v16, v18, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A63F7E4()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_18A63F844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CKShareTransferRepresentation.ExportedShare(0, a2, a3, a4);
  return sub_18A63E798();
}

uint64_t sub_18A63F888(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;

  v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return swift_task_switch();
}

uint64_t sub_18A63F900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;

  sub_18A5F38E0(a1, a2, a3, a4);
  v5 = sub_18A63EA6C();
  sub_18A640674();
  v6 = sub_18A63E8D0();
  sub_18A640674();
  v7 = sub_18A63E954();
  sub_18A60B8D0(0, &qword_1EDF6BA98);
  v8 = v5;
  v9 = v6;
  v10 = v7;
  v11 = sub_18A63FAC0(v8, v9, v10);
  v12 = (void *)objc_opt_self();
  *(_QWORD *)(v4 + 16) = 0;
  v13 = objc_msgSend(v12, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v11, 1, v4 + 16);
  v14 = *(id *)(v4 + 16);
  if (v13)
  {
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    return sub_18A5F3BA8(v15, v17, *(uint64_t (**)(void))(v4 + 8));
  }
  else
  {
    v19 = v14;
    _convertNSErrorToError(_:)();

    sub_18A61A8B8();
    return sub_18A640614(*(uint64_t (**)(void))(v4 + 8));
  }
}

id sub_18A63FAC0(void *a1, void *a2, void *a3)
{
  id v6;

  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithShare_containerSetupInfo_allowedOptions_, a1, a2, a3);

  return v6;
}

uint64_t sub_18A63FB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t TupleTypeMetadata;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a5;
  v27 = a9;
  v23 = a3;
  v24 = a4;
  v22 = a2;
  v25 = a11;
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a10;
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v16 = (int *)MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v18 = (char *)&v22 + v16[12] - v17;
  v19 = (char *)&v22 + v16[16] - v17;
  v20 = (char *)&v22 + v16[20] - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))((char *)&v22 - v17, a1, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v18, v22, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16))(v19, v23, a8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 16))(v20, v24, a10);
  swift_getAssociatedConformanceWitness();
  return TupleTransferRepresentation.init(_:)();
}

void sub_18A63FC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static CKShareTransferRepresentation.ExportedShare.transferRepresentation.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a3, a4);
}

uint64_t sub_18A63FC98(uint64_t a1)
{
  return sub_18A63FD38(a1, qword_1EDF6B8F8);
}

uint64_t sub_18A63FCAC(uint64_t a1)
{
  return sub_18A63FD38(a1, qword_1EDF6B910);
}

uint64_t sub_18A63FCC0(uint64_t a1)
{
  return sub_18A63FD38(a1, qword_1EDF6B928);
}

uint64_t sub_18A63FCD8()
{
  uint64_t v0;
  _QWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A5F4414();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (_OWORD *)sub_18A5F4778(v1, (uint64_t)sub_18A64060C);
  return sub_18A63F0D8(v2, v3, v4);
}

uint64_t sub_18A63FD24(uint64_t a1)
{
  return sub_18A63FD38(a1, qword_1EDF6B940);
}

uint64_t sub_18A63FD38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = sub_18A5F101C(&qword_1EDF6BAA0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UTType();
  sub_18A63DE4C(v6, a2);
  sub_18A60990C(v6, (uint64_t)a2);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F1010((uint64_t)v5, 1, 1, v6);
  return UTType.init(exportedAs:conformingTo:)();
}

uint64_t sub_18A63FE04()
{
  uint64_t v0;
  _QWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A5F4414();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (_OWORD *)sub_18A5F4778(v1, (uint64_t)sub_18A63FE50);
  return sub_18A63F278(v2, v3, v4);
}

uint64_t sub_18A63FE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A5F40D8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1, a2);
}

uint64_t sub_18A63FE98()
{
  uint64_t v0;
  _QWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A5F4414();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (_OWORD *)sub_18A5F4778(v1, (uint64_t)sub_18A64060C);
  return sub_18A63F418(v2, v3, v4);
}

BOOL sub_18A63FEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_18A63F844(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_18A63FEF4()
{
  uint64_t v0;
  _QWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A5F4414();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (_OWORD *)sub_18A5F4778(v1, (uint64_t)sub_18A64060C);
  return sub_18A63F888(v2, v3, v4);
}

BOOL sub_18A63FF44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t sub_18A63FF54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18A63FF88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18A63FFBC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

_QWORD *sub_18A63FFC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_18A63FFF0()
{
  return swift_release();
}

_QWORD *sub_18A63FFF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_18A640030(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_18A640060(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18A6400A0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CKShareTransferRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKShareTransferRepresentation);
}

uint64_t sub_18A6400E8()
{
  return swift_allocateGenericValueMetadata();
}

void sub_18A6400F0(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 32))
    swift_release();
}

_QWORD *sub_18A640144(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *(void **)(a2 + 16);
  v7 = v4;
  v8 = v5;
  v9 = v6;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(void **)(a2 + 24);
  a1[2] = v6;
  a1[3] = v11;
  v12 = v11;
  if (v10)
  {
    v13 = *(_QWORD *)(a2 + 40);
    a1[4] = v10;
    a1[5] = v13;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t sub_18A6401C8(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  v12 = v11;
  *(_QWORD *)(a1 + 16) = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  v16 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v16)
    {
      v18 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v18;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_18A6402A4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_release();
  return a1;
}

uint64_t sub_18A64034C(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18A6403A0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void sub_18A640400(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for CKShareTransferRepresentation.ExportedShare(255, *a1, a1[1], a4);
  MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKShareTransferRepresentation<A>.ExportedShare, v5);
  v4 = type metadata accessor for ProxyRepresentation();
  MEMORY[0x18D76E7C4](MEMORY[0x1E0CA87C8], v4);
  sub_18A5F40C8();
}

void sub_18A640468(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CKShareTransferRepresentation.ExportedShare(255, *a1, a1[1], a4);
  sub_18A62FAE0();
}

void sub_18A64049C()
{
  uint64_t v0;

  v0 = type metadata accessor for DataRepresentation();
  MEMORY[0x18D76E7C4](MEMORY[0x1E0CA8780], v0);
  type metadata accessor for _ConditionalTransferRepresentation();
  swift_getTupleTypeMetadata();
  sub_18A62FAE0();
}

void sub_18A6404FC()
{
  uint64_t v0;

  v0 = type metadata accessor for TupleTransferRepresentation();
  MEMORY[0x18D76E7C4](MEMORY[0x1E0CA8840], v0);
  sub_18A5F40C8();
}

uint64_t sub_18A640528()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A64054C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;

  sub_18A5F4414();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_18A6405B8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EDF6BAA8 + dword_1EDF6BAA8))(v0, v1);
}

uint64_t sub_18A6405B8()
{
  uint64_t v0;

  sub_18A5F40D8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A6405E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
}

uint64_t sub_18A640614(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A64062C(uint64_t (*a1)(void))
{
  return a1();
}

id sub_18A640640(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v2, 1, v3);
}

uint64_t sub_18A640650()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A640674()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A640698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 96))(a1, a2, v2);
}

uint64_t sub_18A6406A4()
{
  return DataRepresentation.init(exportedContentType:exporting:)();
}

void sub_18A6406B0()
{
  void *v0;

}

uint64_t sub_18A6406BC()
{
  uint64_t v0;

  return v0;
}

id CKSyncEngineRecordZoneChangeBatch.batchStruct()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id result;

  v4 = sub_18A5F3888(a1, sel_recordsToSave);
  sub_18A5F3DF8((uint64_t)v4, &qword_1EDF6A338);
  v5 = sub_18A623A54();

  v7 = sub_18A5F3888(v6, sel_recordIDsToDelete);
  sub_18A5F3DF8((uint64_t)v7, (unint64_t *)&unk_1EDF6A8F0);
  v8 = sub_18A623A54();

  result = objc_msgSend(v2, sel_atomicByZone);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = (_BYTE)result;
  return result;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordsToSave.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordsToSave.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CKSyncEngine.RecordZoneChangeBatch.recordsToSave.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordIDsToDelete.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordIDsToDelete.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CKSyncEngine.RecordZoneChangeBatch.recordIDsToDelete.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.atomicByZone.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.atomicByZone.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*CKSyncEngine.RecordZoneChangeBatch.atomicByZone.modify())()
{
  return nullsub_3;
}

void sub_18A64081C()
{
  qword_1EDF753E0 = 1572864;
}

uint64_t static CKSyncEngine.RecordZoneChangeBatch.maxRecordCountPerBatch.getter()
{
  return 250;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:recordProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t sub_18A640850()
{
  uint64_t v0;
  unint64_t v1;
  id **v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  id v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  void *v30;
  uint8_t *v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  void *v35;
  uint8_t *v36;
  const char *v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v2 = (id **)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  v3 = v0 + 24;
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 64) = v5;
  if (v5)
  {
    *(_QWORD *)(v0 + 88) = 0;
    *(_QWORD *)(v0 + 96) = 0;
    *(_QWORD *)(v0 + 72) = v1;
    *(_QWORD *)(v0 + 80) = v1;
    v6 = *(void **)(v4 + 32);
    *(_QWORD *)(v0 + 104) = v6;
    if (*(_BYTE *)(v4 + 40) != 1)
    {
LABEL_26:
      v45 = (uint64_t (*)(uint64_t))sub_18A5F3D90();
      v22 = v21;
      v23 = (_QWORD *)sub_18A6433B4();
      *(_QWORD *)(v0 + 112) = v23;
      v24 = sub_18A6433A0(v23, (uint64_t)sub_18A640D14);
      return v45(v24);
    }
    v7 = 0;
    while (1)
    {
      v8 = v6;
      v9 = objc_msgSend((id)v8, sel_size);
      v10 = (uint64_t)v9 + v7;
      if (__OFADD__(v7, v9))
        break;
      if (qword_1EDF6A138 != -1)
        swift_once();
      if (qword_1EDF753E0 < v10)
      {
        v26 = *(NSObject **)(v0 + 40);

        sub_18A5F37A4();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v27 = sub_18A5F3BA0();
        sub_18A5F4224(v27, (uint64_t)qword_1EDF6A630);
        v28 = sub_18A63E288();
        v29 = os_log_type_enabled(v26, v28);
        v30 = *(void **)(v0 + 104);
        if (v29)
        {
          v31 = (uint8_t *)sub_18A5F4790();
          *(_WORD *)v31 = 0;
          sub_18A5F4570(&dword_18A5C5000, v26, v28, "Next record will exceed max bytes per batch", v31);
          sub_18A5F392C();
        }

        v8 = *(_QWORD *)(v0 + 80);
        goto LABEL_43;
      }
      v8 = (unint64_t)(id)v8;
      MEMORY[0x18D76C9DC]();
      sub_18A643348();
      if (v12)
      {
        sub_18A643368(v11);
        sub_18A643360();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v13 = objc_msgSend((id)v8, sel_size);

      v14 = __OFADD__(v7, v13);
      v7 += (uint64_t)v13;
      if (v14)
        goto LABEL_50;
      if (v1 >> 62)
      {
        sub_18A5F40AC();
        v15 = _CocoaArrayWrapper.endIndex.getter();
        sub_18A5F3944();
      }
      else
      {
        v15 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v8 = *(_QWORD *)v3;
      if (*(_QWORD *)v3 >> 62)
      {
        sub_18A5F3FAC();
        v16 = _CocoaArrayWrapper.endIndex.getter();
        sub_18A5F37E0();
      }
      else
      {
        v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v15, v16))
        goto LABEL_51;
      if (v15 + v16 >= 250)
      {
        sub_18A643324();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v32 = sub_18A5F3BA0();
        sub_18A5F4224(v32, (uint64_t)qword_1EDF6A630);
        v33 = sub_18A63E288();
        v34 = sub_18A643304(v33);
        v35 = *(void **)(v0 + 104);
        if (v34)
        {
          v36 = (uint8_t *)sub_18A5F4790();
          *(_WORD *)v36 = 0;
          v37 = "Reached max record count per batch";
          goto LABEL_40;
        }
        goto LABEL_41;
      }
      if (qword_1EDF6A138 != -1)
        swift_once();
      if (v7 >= qword_1EDF753E0)
      {
        sub_18A643324();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v38 = sub_18A5F3BA0();
        sub_18A5F4224(v38, (uint64_t)qword_1EDF6A630);
        v39 = sub_18A63E288();
        v40 = sub_18A643304(v39);
        v35 = *(void **)(v0 + 104);
        if (v40)
        {
          v36 = (uint8_t *)sub_18A5F4790();
          *(_WORD *)v36 = 0;
          v37 = "Current batch is over the max bytes per batch";
LABEL_40:
          sub_18A5F4570(&dword_18A5C5000, (v0 + 24), (os_log_type_t)v1, v37, v36);
          sub_18A5F392C();
        }
LABEL_41:

        goto LABEL_43;
      }
      v17 = *(_QWORD *)(v0 + 64);
      v18 = *(_QWORD *)(v0 + 96) + 1;

      if (v18 == v17)
      {
        sub_18A643324();
        goto LABEL_43;
      }
      v19 = *(_QWORD *)(v0 + 96) + 1;
      *(_QWORD *)(v0 + 88) = v7;
      *(_QWORD *)(v0 + 96) = v19;
      *(_QWORD *)(v0 + 72) = v1;
      *(_QWORD *)(v0 + 80) = v8;
      sub_18A643388(v19);
      if ((v20 & 1) == 0)
        goto LABEL_26;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    sub_18A5F3898();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F37A4();
    if (v42)
      goto LABEL_47;
LABEL_45:
    if (v8 >> 62)
    {
      sub_18A5F3FAC();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      sub_18A5F37E0();
      if (v43)
        goto LABEL_47;
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_47;
    }
    v44 = *(_QWORD *)(v0 + 32);
    sub_18A5F37E0();
    sub_18A5F37A4();
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v44 + 8) = 0;
    *(_BYTE *)(v44 + 16) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9D8];
LABEL_43:
  v3 = (unint64_t)*v2;
  if ((unint64_t)*v2 >> 62)
    goto LABEL_52;
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_45;
LABEL_47:
  v41 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)v41 = v3;
  *(_QWORD *)(v41 + 8) = v8;
  *(_BYTE *)(v41 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A640D14(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18A640D70(uint64_t a1)
{
  os_log_type_t v1;
  uint64_t v2;
  unint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  os_log_type_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  id v36;
  uint64_t v37;
  id v38;
  BOOL v39;
  uint64_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void *v43;
  uint8_t *v44;
  const char *v45;
  uint64_t v46;
  os_log_type_t v47;
  _BOOL4 v48;
  id v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v54;
  os_log_type_t v55;
  _BOOL4 v56;
  void *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);

  v3 = (unint64_t *)(v2 + 16);
  v4 = *(NSObject **)(v2 + 120);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 88);
    v6 = sub_18A5F3888(a1, sel_size);
    v7 = (uint64_t)v6 + v5;
    if (__OFADD__(v5, v6))
    {
      __break(1u);
    }
    else if (qword_1EDF6A138 == -1)
    {
LABEL_4:
      v8 = qword_1EDF753E0;
      if (qword_1EDF753E0 < v7)
      {
        v9 = *(_QWORD *)(v2 + 72);
        if (v9 >> 62)
        {
          sub_18A5F4340();
          v23 = _CocoaArrayWrapper.endIndex.getter();
          sub_18A5F3944();
          if (v23)
            goto LABEL_9;
        }
        else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_9:
          v11 = *(void **)(v2 + 104);
          v12 = *(id *)(v2 + 40);

          sub_18A5F3944();
          goto LABEL_60;
        }
        v10 = *(_QWORD *)(v2 + 80);
        if (v10 >> 62)
        {
          sub_18A5F4340();
          v24 = _CocoaArrayWrapper.endIndex.getter();
          sub_18A5F3944();
          if (v24)
            goto LABEL_9;
        }
        else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_9;
        }
      }
      v12 = v4;
      MEMORY[0x18D76C9DC]();
      if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = (v2 + 16);
      v25 = *(void **)(v2 + 104);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v3 = (unint64_t *)(v2 + 16);
      v22 = (unint64_t *)(v2 + 16);
      if (v8 < v7)
      {
        sub_18A643324();
        goto LABEL_60;
      }
      goto LABEL_24;
    }
    swift_once();
    goto LABEL_4;
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v13 = *(void **)(v2 + 104);
  v14 = sub_18A5F3BA0();
  v15 = sub_18A60990C(v14, (uint64_t)qword_1EDF6A630);
  v16 = v13;
  Logger.logObject.getter();
  v17 = sub_18A63E288();
  v18 = sub_18A643304(v17);
  v19 = *(void **)(v2 + 104);
  if (v18)
  {
    v20 = sub_18A5F3830();
    v21 = (_QWORD *)sub_18A5F3830();
    *(_DWORD *)v20 = 138412290;
    *(_QWORD *)(v20 + 4) = v19;
    *v21 = v19;
    _os_log_impl(&dword_18A5C5000, v15, v1, "No record to save for record ID %@", (uint8_t *)v20, 0xCu);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    swift_arrayDestroy();
    sub_18A5F392C();
  }

  v7 = *(_QWORD *)(v2 + 88);
  v22 = (unint64_t *)(v2 + 72);
LABEL_24:
  v26 = v2 + 24;
  v27 = *v22;
  v28 = *v22 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      v29 = _CocoaArrayWrapper.endIndex.getter();
      sub_18A5F3FE4();
    }
    else
    {
      v29 = *(_QWORD *)(v28 + 16);
    }
    v12 = *(id *)v26;
    if (*(_QWORD *)v26 >> 62)
    {
      sub_18A5F40AC();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      sub_18A5F3944();
    }
    else
    {
      v30 = *(_QWORD *)(((unint64_t)v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    if (v29 + v30 >= 250)
    {
      sub_18A643324();
      if (qword_1EDF6A540 != -1)
        swift_once();
      v40 = sub_18A5F3BA0();
      sub_18A5F4224(v40, (uint64_t)qword_1EDF6A630);
      v41 = sub_18A63E288();
      v42 = sub_18A643378(v41);
      v43 = *(void **)(v2 + 104);
      if (v42)
      {
        v44 = (uint8_t *)sub_18A5F4790();
        *(_WORD *)v44 = 0;
        v45 = "Reached max record count per batch";
        goto LABEL_55;
      }
LABEL_56:

      goto LABEL_65;
    }
    if (qword_1EDF6A138 != -1)
      swift_once();
    if (v7 >= qword_1EDF753E0)
    {
      sub_18A643324();
      if (qword_1EDF6A540 != -1)
        swift_once();
      v46 = sub_18A5F3BA0();
      sub_18A5F4224(v46, (uint64_t)qword_1EDF6A630);
      v47 = sub_18A63E288();
      v48 = sub_18A643378(v47);
      v43 = *(void **)(v2 + 104);
      if (v48)
      {
        v44 = (uint8_t *)sub_18A5F4790();
        *(_WORD *)v44 = 0;
        v45 = "Current batch is over the max bytes per batch";
LABEL_55:
        sub_18A5F4570(&dword_18A5C5000, (v2 + 24), (os_log_type_t)v27, v45, v44);
        sub_18A5F392C();
      }
      goto LABEL_56;
    }
    v31 = *(_QWORD *)(v2 + 64);
    v32 = *(_QWORD *)(v2 + 96) + 1;

    if (v32 == v31)
    {
      sub_18A643324();
      goto LABEL_65;
    }
    v33 = *(_QWORD *)(v2 + 96) + 1;
    *(_QWORD *)(v2 + 88) = v7;
    *(_QWORD *)(v2 + 96) = v33;
    *(_QWORD *)(v2 + 72) = v27;
    *(_QWORD *)(v2 + 80) = v12;
    sub_18A643388(v33);
    if ((v35 & 1) == 0)
    {
      v63 = (uint64_t (*)(uint64_t))sub_18A5F3D90();
      v50 = v49;
      v51 = (_QWORD *)sub_18A6433B4();
      *(_QWORD *)(v2 + 112) = v51;
      v52 = sub_18A6433A0(v51, (uint64_t)sub_18A640D14);
      return v63(v52);
    }
    v12 = v34;
    v36 = objc_msgSend(v12, sel_size);
    v37 = (uint64_t)v36 + v7;
    if (__OFADD__(v7, v36))
      goto LABEL_72;
    if (qword_1EDF6A138 != -1)
      swift_once();
    if (qword_1EDF753E0 < v37)
      break;
    v12 = v12;
    MEMORY[0x18D76C9DC]();
    if (*(_QWORD *)((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v26 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      sub_18A643360();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v38 = objc_msgSend(v12, sel_size);

    v39 = __OFADD__(v7, v38);
    v7 += (uint64_t)v38;
    if (v39)
      goto LABEL_73;
  }
  v4 = *(NSObject **)(v2 + 40);

  sub_18A5F37A4();
LABEL_60:
  if (qword_1EDF6A540 != -1)
    swift_once();
  v54 = sub_18A5F3BA0();
  sub_18A5F4224(v54, (uint64_t)qword_1EDF6A630);
  v55 = sub_18A63E288();
  v56 = sub_18A643304(v55);
  v57 = *(void **)(v2 + 104);
  if (v56)
  {
    v58 = (uint8_t *)sub_18A5F4790();
    *(_WORD *)v58 = 0;
    sub_18A5F4570(&dword_18A5C5000, v4, (os_log_type_t)v12, "Next record will exceed max bytes per batch", v58);
    sub_18A5F392C();
  }

  v12 = *(id *)(v2 + 80);
LABEL_65:
  v26 = *v3;
  if (!(*v3 >> 62))
  {
    if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_67;
LABEL_69:
    v59 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)v59 = v26;
    *(_QWORD *)(v59 + 8) = v12;
    *(_BYTE *)(v59 + 16) = 0;
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
LABEL_74:
  sub_18A643334();
  v60 = sub_18A5F4628();
  sub_18A5F37A4();
  if (v60)
    goto LABEL_69;
LABEL_67:
  if ((unint64_t)v12 >> 62)
  {
    sub_18A5F40AC();
    v61 = sub_18A5F4628();
    sub_18A5F3944();
    if (v61)
      goto LABEL_69;
  }
  else if (*(_QWORD *)(((unint64_t)v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_69;
  }
  v62 = *(_QWORD *)(v2 + 32);
  sub_18A5F3944();
  sub_18A5F37A4();
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  *(_BYTE *)(v62 + 16) = 0;
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(recordsToSave:recordIDsToDelete:atomicByZone:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

void sub_18A641434(uint64_t (**aBlock)(void *, id)@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t (**v3)(void *, id);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  id v19;
  id v20;
  uint64_t (**v21)(void *, id);
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(void *, id);
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;

  v3 = aBlock;
  v47 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    _Block_copy(aBlock);
    v7 = 0;
    v8 = MEMORY[0x1E0DEE9D8];
    v9 = (unsigned __int8 *)(a2 + 40);
    v10 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v11 = (void *)*((_QWORD *)v9 - 1);
      v12 = *v9;
      v13 = v11;
      v14 = v13;
      if (v12 == 1)
      {
        v15 = objc_msgSend(v13, sel_size);
        v16 = (uint64_t)v15 + v7;
        if (__OFADD__(v7, v15))
          goto LABEL_73;
        v17 = v14;
        if (qword_1EDF6A138 != -1)
          swift_once();
        if (qword_1EDF753E0 < v16)
        {
          swift_bridgeObjectRelease();

          goto LABEL_60;
        }
        v10 = v14;
        MEMORY[0x18D76C9DC]();
        if (*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v16 = (uint64_t)objc_msgSend((id)v10, sel_size);

        v18 = __OFADD__(v7, v16);
        v7 += v16;
        if (v18)
          goto LABEL_74;
      }
      else
      {
        v46 = v13;
        v19 = (id)v3[2](v3, v13);
        if (v19)
        {
          v16 = (uint64_t)v19;
          v20 = objc_msgSend(v19, sel_size);
          v18 = __OFADD__(v7, v20);
          v7 += (uint64_t)v20;
          if (v18)
            goto LABEL_75;
          v21 = v3;
          if (qword_1EDF6A138 != -1)
            swift_once();
          v22 = qword_1EDF753E0;
          if (qword_1EDF753E0 < v7)
          {
            if (v8 >> 62)
            {
              swift_bridgeObjectRetain();
              v33 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v33)
                goto LABEL_48;
            }
            else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_48;
            }
            if (v10 >> 62)
            {
              swift_bridgeObjectRetain();
              v34 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v34)
              {
LABEL_48:
                swift_bridgeObjectRelease();

                v3 = v21;
                v17 = v46;
                goto LABEL_60;
              }
            }
            else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_48;
            }
          }
          v23 = (id)v16;
          MEMORY[0x18D76C9DC]();
          if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          if (v22 < v7)
          {
            swift_bridgeObjectRelease();
            v3 = v21;
            v17 = v46;
LABEL_60:
            if (qword_1EDF6A540 != -1)
              swift_once();
            v41 = type metadata accessor for Logger();
            sub_18A60990C(v41, (uint64_t)qword_1EDF6A630);
            v36 = Logger.logObject.getter();
            v37 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v36, v37))
            {
              v38 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v38 = 0;
              v39 = "Next record will exceed max bytes per batch";
LABEL_64:
              _os_log_impl(&dword_18A5C5000, v36, v37, v39, v38, 2u);
              MEMORY[0x18D76E86C](v38, -1, -1);
            }
LABEL_65:

            goto LABEL_66;
          }
          v8 = v48;
          v3 = v21;
        }
        else
        {
          if (qword_1EDF6A540 != -1)
            swift_once();
          v24 = type metadata accessor for Logger();
          sub_18A60990C(v24, (uint64_t)qword_1EDF6A630);
          v25 = v14;
          v26 = Logger.logObject.getter();
          v27 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v26, v27))
          {
            v44 = v3;
            v28 = swift_slowAlloc();
            v45 = a3;
            v29 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v28 = 138412290;
            *(_QWORD *)(v28 + 4) = v25;
            *v29 = v11;
            _os_log_impl(&dword_18A5C5000, v26, v27, "No record to save for record ID %@", (uint8_t *)v28, 0xCu);
            sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
            swift_arrayDestroy();
            v30 = v29;
            a3 = v45;
            MEMORY[0x18D76E86C](v30, -1, -1);
            v31 = v28;
            v3 = v44;
            MEMORY[0x18D76E86C](v31, -1, -1);

          }
          else
          {

          }
        }
        v17 = v46;
      }
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v10 = v47;
      if (v47 >> 62)
      {
        swift_bridgeObjectRetain();
        v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v32 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v16, v32))
        break;
      if (v16 + v32 > 249)
      {
        swift_bridgeObjectRelease();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v35 = type metadata accessor for Logger();
        sub_18A60990C(v35, (uint64_t)qword_1EDF6A630);
        v36 = Logger.logObject.getter();
        v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v38 = 0;
          v39 = "Reached max record count per batch";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (qword_1EDF6A138 != -1)
        swift_once();
      if (v7 >= qword_1EDF753E0)
      {
        swift_bridgeObjectRelease();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v40 = type metadata accessor for Logger();
        sub_18A60990C(v40, (uint64_t)qword_1EDF6A630);
        v36 = Logger.logObject.getter();
        v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v38 = 0;
          v39 = "Current batch is over the max bytes per batch";
          goto LABEL_64;
        }
        goto LABEL_65;
      }

      v9 += 16;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_bridgeObjectRetain();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42)
      goto LABEL_70;
LABEL_68:
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43)
        goto LABEL_70;
    }
    else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_70;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _Block_release(v3);
    _Block_release(v3);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_71;
  }
  _Block_copy(aBlock);
  swift_bridgeObjectRelease();
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_66:
  v16 = v48;
  if (v48 >> 62)
    goto LABEL_76;
  if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_68;
LABEL_70:
  _Block_release(v3);
  _Block_release(v3);
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v10;
LABEL_71:
  *(_BYTE *)(a3 + 16) = 0;
}

uint64_t sub_18A641C2C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(id)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  const char *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  unint64_t v47;
  unint64_t v48;

  v47 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = (unsigned __int8 *)(a1 + 40);
    v8 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v9 = (void *)*((_QWORD *)v7 - 1);
      v10 = *v7;
      v11 = v9;
      v12 = (uint64_t)v11;
      v46 = v11;
      if (v10 == 1)
      {
        v13 = objc_msgSend(v11, sel_size);
        v14 = (uint64_t)v13 + v5;
        if (__OFADD__(v5, v13))
          goto LABEL_74;
        if (qword_1EDF6A138 != -1)
          swift_once();
        if (qword_1EDF753E0 < v14)
        {
          swift_bridgeObjectRelease();
LABEL_59:

LABEL_61:
          v28 = (void *)v12;
          if (qword_1EDF6A540 != -1)
            swift_once();
          v40 = type metadata accessor for Logger();
          sub_18A60990C(v40, (uint64_t)qword_1EDF6A630);
          v36 = Logger.logObject.getter();
          v37 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v36, v37))
          {
            v38 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v38 = 0;
            v39 = "Next record will exceed max bytes per batch";
LABEL_65:
            _os_log_impl(&dword_18A5C5000, v36, v37, v39, v38, 2u);
            MEMORY[0x18D76E86C](v38, -1, -1);
          }
LABEL_66:

          goto LABEL_67;
        }
        v8 = (unint64_t)(id)v12;
        MEMORY[0x18D76C9DC]();
        if (*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v12 = (uint64_t)objc_msgSend((id)v8, sel_size);

        v15 = __OFADD__(v5, v12);
        v5 += v12;
        if (v15)
          goto LABEL_75;
      }
      else
      {
        v16 = (void *)a2(v11);
        if (v16)
        {
          v12 = (uint64_t)v16;
          v17 = objc_msgSend(v16, sel_size);
          v15 = __OFADD__(v5, v17);
          v5 += (uint64_t)v17;
          if (v15)
            goto LABEL_76;
          if (qword_1EDF6A138 != -1)
            swift_once();
          v18 = qword_1EDF753E0;
          if (qword_1EDF753E0 < v5)
          {
            if (v6 >> 62)
            {
              swift_bridgeObjectRetain();
              v29 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v29)
                goto LABEL_47;
            }
            else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
            if (v8 >> 62)
            {
              swift_bridgeObjectRetain();
              v30 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v30)
              {
LABEL_47:
                swift_bridgeObjectRelease();

                v12 = (uint64_t)v46;
                goto LABEL_59;
              }
            }
            else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
          }
          v19 = (id)v12;
          MEMORY[0x18D76C9DC]();
          if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          v12 = (uint64_t)v46;
          if (v18 < v5)
          {
            swift_bridgeObjectRelease();
            goto LABEL_61;
          }
          v6 = v48;
        }
        else
        {
          if (qword_1EDF6A540 != -1)
            swift_once();
          v20 = type metadata accessor for Logger();
          sub_18A60990C(v20, (uint64_t)qword_1EDF6A630);
          v21 = v46;
          v22 = Logger.logObject.getter();
          v23 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v22, v23))
          {
            v44 = a3;
            v24 = swift_slowAlloc();
            v25 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v24 = 138412290;
            *(_QWORD *)(v24 + 4) = v21;
            *v25 = v9;
            _os_log_impl(&dword_18A5C5000, v22, v23, "No record to save for record ID %@", (uint8_t *)v24, 0xCu);
            sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
            swift_arrayDestroy();
            MEMORY[0x18D76E86C](v25, -1, -1);
            v26 = v24;
            a3 = v44;
            MEMORY[0x18D76E86C](v26, -1, -1);

          }
          else
          {

          }
        }
      }
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v8 = v47;
      if (v47 >> 62)
      {
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v12, v27))
        break;
      if (v12 + v27 > 249)
      {
        swift_bridgeObjectRelease();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v31 = type metadata accessor for Logger();
        sub_18A60990C(v31, (uint64_t)qword_1EDF6A630);
        v32 = Logger.logObject.getter();
        v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v34 = 0;
          _os_log_impl(&dword_18A5C5000, v32, v33, "Reached max record count per batch", v34, 2u);
          MEMORY[0x18D76E86C](v34, -1, -1);
        }

        goto LABEL_67;
      }
      v28 = v46;
      if (qword_1EDF6A138 != -1)
        swift_once();
      if (v5 >= qword_1EDF753E0)
      {
        swift_bridgeObjectRelease();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v35 = type metadata accessor for Logger();
        sub_18A60990C(v35, (uint64_t)qword_1EDF6A630);
        v36 = Logger.logObject.getter();
        v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v38 = 0;
          v39 = "Current batch is over the max bytes per batch";
          goto LABEL_65;
        }
        goto LABEL_66;
      }

      v7 += 16;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_bridgeObjectRetain();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42)
      goto LABEL_71;
LABEL_69:
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43)
        goto LABEL_71;
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_71;
    }
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9D8];
LABEL_67:
  v12 = v48;
  if (v48 >> 62)
    goto LABEL_77;
  if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_69;
LABEL_71:
  result = swift_release();
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v8;
LABEL_72:
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)(uint64_t a1@<X0>, uint64_t (*a2)(NSObject *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  void *v9;
  int v10;
  NSObject *v11;
  int64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v43;
  unint64_t v44;
  unint64_t v45;

  v44 = MEMORY[0x1E0DEE9D8];
  v45 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = (unsigned __int8 *)(a1 + 40);
    v8 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v9 = (void *)*((_QWORD *)v7 - 1);
      v10 = *v7;
      v11 = v9;
      v12 = (int64_t)v11;
      v43 = v11;
      if (v10 == 1)
      {
        v13 = sub_18A5F3888((uint64_t)v11, sel_size);
        v14 = (uint64_t)v13 + v5;
        if (__OFADD__(v5, v13))
          goto LABEL_74;
        if (qword_1EDF6A138 != -1)
          swift_once();
        if (qword_1EDF753E0 < v14)
        {
          sub_18A64332C();
LABEL_59:

LABEL_61:
          v29 = v12;
          if (qword_1EDF6A540 != -1)
            swift_once();
          v38 = sub_18A5F3BA0();
          sub_18A5F4224(v38, (uint64_t)qword_1EDF6A630);
          v39 = sub_18A63E288();
          if (sub_18A643314(v39))
          {
            v36 = (uint8_t *)sub_18A5F4790();
            *(_WORD *)v36 = 0;
            v37 = "Next record will exceed max bytes per batch";
LABEL_65:
            sub_18A5F4570(&dword_18A5C5000, v12, (os_log_type_t)v6, v37, v36);
            sub_18A5F392C();
          }
          goto LABEL_66;
        }
        v8 = (unint64_t)(id)v12;
        MEMORY[0x18D76C9DC]();
        sub_18A643348();
        if (v16)
        {
          sub_18A643368(v15);
          sub_18A643360();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v12 = (int64_t)objc_msgSend((id)v8, sel_size);

        v17 = __OFADD__(v5, v12);
        v5 += v12;
        if (v17)
          goto LABEL_75;
      }
      else
      {
        v18 = a2(v11);
        if (v18)
        {
          v12 = (int64_t)v18;
          v19 = -[NSObject size](v18, sel_size);
          v17 = __OFADD__(v5, v19);
          v5 += (uint64_t)v19;
          if (v17)
            goto LABEL_76;
          if (qword_1EDF6A138 != -1)
            swift_once();
          v20 = qword_1EDF753E0;
          if (qword_1EDF753E0 < v5)
          {
            if (v6 >> 62)
            {
              sub_18A5F3D48();
              v30 = _CocoaArrayWrapper.endIndex.getter();
              sub_18A5F460C();
              if (v30)
                goto LABEL_47;
            }
            else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
            if (v8 >> 62)
            {
              swift_bridgeObjectRetain();
              v6 = _CocoaArrayWrapper.endIndex.getter();
              sub_18A643358();
              if (v6)
              {
LABEL_47:
                sub_18A64332C();

                v12 = (int64_t)v43;
                goto LABEL_59;
              }
            }
            else
            {
              v6 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v6)
                goto LABEL_47;
            }
          }
          v6 = (unint64_t)(id)v12;
          MEMORY[0x18D76C9DC]();
          sub_18A643348();
          if (v16)
          {
            sub_18A643368(v21);
            sub_18A643360();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          v12 = (int64_t)v43;
          if (v20 < v5)
          {
            sub_18A64332C();
            goto LABEL_61;
          }
          v6 = v45;
        }
        else
        {
          if (qword_1EDF6A540 != -1)
            swift_once();
          v22 = sub_18A5F3BA0();
          v23 = sub_18A60990C(v22, (uint64_t)qword_1EDF6A630);
          v24 = v43;
          Logger.logObject.getter();
          v25 = sub_18A63E288();
          if (os_log_type_enabled(v23, v25))
          {
            v26 = sub_18A5F3830();
            v27 = (_QWORD *)sub_18A5F3830();
            *(_DWORD *)v26 = 138412290;
            *(_QWORD *)(v26 + 4) = v24;
            *v27 = v9;
            _os_log_impl(&dword_18A5C5000, v23, v25, "No record to save for record ID %@", (uint8_t *)v26, 0xCu);
            sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
            swift_arrayDestroy();
            sub_18A5F392C();
          }

        }
      }
      if (v6 >> 62)
      {
        sub_18A5F3D48();
        v12 = sub_18A5F4628();
        sub_18A5F460C();
      }
      else
      {
        v12 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v8 = v44;
      if (v44 >> 62)
      {
        sub_18A5F4420();
        v28 = sub_18A5F4628();
        sub_18A643358();
      }
      else
      {
        v28 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v12, v28))
        break;
      if (v12 + v28 >= 250)
      {
        sub_18A64332C();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v31 = sub_18A5F3BA0();
        sub_18A5F4224(v31, (uint64_t)qword_1EDF6A630);
        v32 = sub_18A63E288();
        if (sub_18A643314(v32))
        {
          v33 = (uint8_t *)sub_18A5F4790();
          *(_WORD *)v33 = 0;
          sub_18A5F4570(&dword_18A5C5000, v12, (os_log_type_t)v6, "Reached max record count per batch", v33);
          sub_18A5F392C();
        }

        goto LABEL_67;
      }
      v29 = v43;
      if (qword_1EDF6A138 != -1)
        swift_once();
      if (v5 >= qword_1EDF753E0)
      {
        sub_18A64332C();
        if (qword_1EDF6A540 != -1)
          swift_once();
        v34 = sub_18A5F3BA0();
        sub_18A5F4224(v34, (uint64_t)qword_1EDF6A630);
        v35 = sub_18A63E288();
        if (sub_18A643314(v35))
        {
          v36 = (uint8_t *)sub_18A5F4790();
          *(_WORD *)v36 = 0;
          v37 = "Current batch is over the max bytes per batch";
          goto LABEL_65;
        }
LABEL_66:

        goto LABEL_67;
      }

      v7 += 16;
      if (!--v4)
      {
        sub_18A64332C();
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    sub_18A643334();
    v40 = sub_18A5F4628();
    sub_18A5F37A4();
    if (v40)
      goto LABEL_71;
LABEL_69:
    if (v8 >> 62)
    {
      sub_18A5F4420();
      v41 = sub_18A5F4628();
      sub_18A643358();
      if (v41)
        goto LABEL_71;
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_71;
    }
    sub_18A5F37A4();
    sub_18A643358();
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9D8];
LABEL_67:
  v12 = v45;
  if (v45 >> 62)
    goto LABEL_77;
  if (!*(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_69;
LABEL_71:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v8;
LABEL_72:
  *(_BYTE *)(a3 + 16) = 0;
}

BOOL CKSyncEngine.RecordZoneChangeBatch.isEmpty.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[1];
  if (*v0 >> 62)
  {
    sub_18A5F3D48();
    v3 = sub_18A623AB0();
    sub_18A5F460C();
    if (v3)
      return 0;
  }
  else if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  if (v1 >> 62)
  {
    sub_18A5F3FAC();
    v4 = sub_18A623AB0();
    sub_18A5F37E0();
  }
  else
  {
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v4 == 0;
}

void CKSyncEngine.RecordZoneChangeBatch.description.getter()
{
  uint64_t *v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  int v25;
  uint64_t v26;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 16);
  if ((unint64_t)*v0 >> 62)
  {
    sub_18A5F3D48();
    v3 = sub_18A623AB0();
    if (v3)
      goto LABEL_3;
LABEL_13:
    sub_18A5F460C();
    v5 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_18A5F3D48();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v26 = MEMORY[0x1E0DEE9D8];
  sub_18A60FC4C();
  if (v3 < 0)
  {
    __break(1u);
    return;
  }
  v25 = v2;
  v4 = 0;
  v5 = v26;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x18D76CEB0](v4, v1);
    else
      v6 = *(id *)(v1 + 8 * v4 + 32);
    v7 = v6;
    v8 = objc_msgSend(v6, sel_conciseDescription);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    v12 = *(_QWORD *)(v26 + 16);
    if (v12 >= *(_QWORD *)(v26 + 24) >> 1)
      sub_18A60FC4C();
    ++v4;
    *(_QWORD *)(v26 + 16) = v12 + 1;
    v13 = v26 + 16 * v12;
    *(_QWORD *)(v13 + 32) = v9;
    *(_QWORD *)(v13 + 40) = v11;
  }
  while (v3 != v4);
  sub_18A5F460C();
  v2 = v25;
LABEL_14:
  if (v2)
    v14 = (void *)0xEF313D656E6F5A79;
  else
    v14 = (void *)0xE000000000000000;
  if (v2)
    v15 = 0x4263696D6F746120;
  else
    v15 = 0;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  sub_18A5F460C();
  v17._countAndFlagsBits = 0x7364726F63657220;
  v17._object = (void *)0xEF3D657661536F54;
  String.append(_:)(v17);
  v18._countAndFlagsBits = MEMORY[0x18D76CA0C](v5, MEMORY[0x1E0DEA968]);
  String.append(_:)(v18);
  sub_18A5F3944();
  sub_18A5F460C();
  v19._object = (void *)0x800000018A83F280;
  v19._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v19);
  v21 = sub_18A5F3DF8(v20, (unint64_t *)&unk_1EDF6A8F0);
  v22 = sub_18A5F3FAC();
  v23._countAndFlagsBits = MEMORY[0x18D76CA0C](v22, v21);
  String.append(_:)(v23);
  sub_18A5F37E0();
  sub_18A5F3944();
  v24._countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
}

id CKSyncEngineRecordZoneChangeBatch.init(__pendingChanges:recordProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  Class isa;
  void *v7;
  id v8;
  _QWORD v10[6];

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18A5F3DF8((uint64_t)v5, (unint64_t *)&unk_1EDF6A450);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_18A5F460C();
  v10[4] = a2;
  v10[5] = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_18A642E94;
  v10[3] = &unk_1E1F59DC0;
  v7 = _Block_copy(v10);
  v8 = objc_msgSend(v5, sel_initWith__pendingChanges_recordProvider_, isa, v7);

  _Block_release(v7);
  swift_release();
  return v8;
}

id sub_18A642E94(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

void sub_18A642EE4(unint64_t a1, void *a2, void *aBlock)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v3 = aBlock;
  if (a1 >> 62)
  {
    _Block_copy(aBlock);
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  _Block_copy(aBlock);
  if (!v6)
    goto LABEL_13;
LABEL_3:
  v23 = MEMORY[0x1E0DEE9D8];
  sub_18A610060();
  if (v6 < 0)
  {
    __break(1u);
    return;
  }
  v18 = v3;
  v19 = a2;
  v7 = 0;
  v8 = v23;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v9 = (id)MEMORY[0x18D76CEB0](v7, a1);
    else
      v9 = *(id *)(a1 + 8 * v7 + 32);
    v10 = v9;
    CKSyncEnginePendingRecordZoneChange.changeStruct()((uint64_t)v9, (uint64_t)&v20);

    v11 = v20;
    v12 = v21;
    v23 = v8;
    v13 = *(_QWORD *)(v8 + 16);
    if (v13 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_18A610060();
      v8 = v23;
    }
    ++v7;
    *(_QWORD *)(v8 + 16) = v13 + 1;
    v14 = v8 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v11;
    *(_BYTE *)(v14 + 40) = v12;
  }
  while (v6 != v7);
  swift_bridgeObjectRelease();
  v3 = v18;
  a2 = v19;
LABEL_14:
  _Block_copy(v3);
  sub_18A641434((uint64_t (**)(void *, id))v3, v8, (uint64_t)&v20);
  v15 = v20;
  if (v20)
  {
    v16 = v21;
    v17 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18A643124(v15, v16, v17 & 1, a2);
    _Block_release(v3);
    _Block_release(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18A5F51F4(v15);
  }
  else
  {
    _Block_release(v3);
    _Block_release(v3);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
}

uint64_t sub_18A64310C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A64311C()
{
  return swift_release();
}

id sub_18A643124(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  Class isa;
  Class v7;
  id v8;

  sub_18A60B8D0(0, &qword_1EDF6A338);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6A8F0);
  v7 = Array._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(a4, sel_initWithRecordsToSave_recordIDsToDelete_atomicByZone_, isa, v7, a3 & 1);

  return v8;
}

uint64_t sub_18A6431D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  return a1;
}

uint64_t _s21RecordZoneChangeBatchVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s21RecordZoneChangeBatchVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s21RecordZoneChangeBatchVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSyncEngine.RecordZoneChangeBatch()
{
  return &type metadata for CKSyncEngine.RecordZoneChangeBatch;
}

BOOL sub_18A643304(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_18A643314(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A643324()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A64332C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A643334()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A643358()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A643360()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

BOOL sub_18A643368@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_18A643378(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_18A643388(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 16 * a1 + 32);
}

uint64_t sub_18A6433A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_18A6433B4()
{
  return swift_task_alloc();
}

uint64_t CKDatabase.DatabaseChange.Modification.init(zoneID:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CKDatabase.DatabaseChange.Deletion.init(zoneID:reason:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a2;
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v3;
  return result;
}

uint64_t CKDatabase.RecordZoneChange.Deletion.init(recordID:recordType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void CKDatabase.DatabaseChange.Deletion.reason.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

void CKDatabase.RecordZoneChange.Deletion.recordType.getter()
{
  sub_18A5F3898();
  sub_18A5F379C();
}

void sub_18A643420()
{
  qword_1EDF6A618 = 4;
}

uint64_t static CKDatabaseScope.organization.getter()
{
  return sub_18A643474(&qword_1EDF6A7A0, (uint64_t)&qword_1EDF6A618);
}

void sub_18A64344C()
{
  qword_1EDF6BAC0 = 0;
}

uint64_t static CKDatabaseScope.unknown.getter()
{
  return sub_18A643474(qword_1EDF6AAA8, (uint64_t)&qword_1EDF6BAC0);
}

uint64_t sub_18A643474(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

void CKDatabase.undeprecated_perform(_:inZoneWith:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  _QWORD v8[6];

  v8[4] = a3;
  v8[5] = a4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_18A643558;
  v8[3] = &unk_1E1F59DE8;
  v7 = _Block_copy(v8);
  sub_18A64A54C();
  swift_release();
  objc_msgSend(v4, sel_performQuery_inZoneWithID_completionHandler_, a1, a2, v7);
  _Block_release(v7);
}

uint64_t sub_18A643558(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A5F50F0(0, &qword_1EDF6A338);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6435E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A6435F4()
{
  return swift_release();
}

uint64_t CKDatabase.records(matching:inZoneWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A643610()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[17];
  v1 = (void *)v0[18];
  v3 = v0[16];
  v0[7] = v0 + 15;
  v4 = sub_18A634FAC((uint64_t)sub_18A6436A0);
  v0[10] = MEMORY[0x1E0C809B0];
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_18A643710;
  v5[3] = &unk_1E1F5C6B0;
  v5[4] = v4;
  objc_msgSend(v1, sel_performQuery_inZoneWithID_completionHandler_, v3, v2, v5);
  return sub_18A649FF8();
}

uint64_t sub_18A6436A0()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 152) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6436E0()
{
  uint64_t v0;

  swift_willThrow();
  return sub_18A5F4008(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A643710(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_18A672150(v3, a3);
  sub_18A5F50F0(0, &qword_1EDF6A338);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_18A6A54B0(v3, v5);
}

void CKDatabase.fetch(withSubscriptionID:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A64389C(a1, a2, a3, a4, (uint64_t)sub_18A630BE4, (uint64_t)&unk_1E1F5A368, (SEL *)&selRef_fetchSubscriptionWithID_completionHandler_);
}

uint64_t CKDatabase.subscription(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6437A8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[19] = MEMORY[0x18D76C7CC](v0[16], v0[17]);
  v0[7] = v0 + 15;
  v1 = sub_18A634FAC((uint64_t)sub_18A630D0C);
  v0[10] = MEMORY[0x1E0C809B0];
  v2 = v0 + 10;
  v2[1] = 0x40000000;
  v2[2] = sub_18A643834;
  v2[3] = &unk_1E1F5A3F8;
  v2[4] = v1;
  sub_18A64A448(v1, sel_fetchSubscriptionWithID_completionHandler_);
  return sub_18A649FF8();
}

uint64_t sub_18A643834(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
    return sub_18A672150(v3, a3);
  if (a2)
    return sub_18A6A54B0(v3, (uint64_t)a2);
  __break(1u);
  return result;
}

void CKDatabase.delete(withSubscriptionID:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A64389C(a1, a2, a3, a4, (uint64_t)sub_18A629828, (uint64_t)&unk_1E1F59FF8, (SEL *)&selRef_deleteSubscriptionWithID_completionHandler_);
}

void sub_18A64389C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  void *v7;
  void *v13;
  void *v14;
  _QWORD v15[6];

  v13 = (void *)MEMORY[0x18D76C7CC]();
  v15[4] = a3;
  v15[5] = a4;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = a5;
  v15[3] = a6;
  v14 = _Block_copy(v15);
  sub_18A634FA4();
  swift_release();
  objc_msgSend(v7, *a7, v13, v14);
  _Block_release(v14);

  sub_18A5F3E10();
}

uint64_t CKDatabase.deleteSubscription(withID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A64394C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[20] = MEMORY[0x18D76C7CC](v0[17], v0[18]);
  v0[7] = v0 + 15;
  v1 = sub_18A634FAC((uint64_t)sub_18A6439D8);
  v0[10] = MEMORY[0x1E0C809B0];
  v2 = v0 + 10;
  v2[1] = 0x40000000;
  v2[2] = sub_18A643A90;
  v2[3] = &unk_1E1F5C6C8;
  v2[4] = v1;
  sub_18A64A448(v1, sel_deleteSubscriptionWithID_completionHandler_);
  return sub_18A649FF8();
}

uint64_t sub_18A6439D8()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 168) = v1;
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A643A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = sub_18A6406BC();
  return sub_18A5F3900(v1, v2, v3);
}

uint64_t sub_18A643A50()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A643A90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_18A672150(v3, a3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_18A6721F8(v3, v5, v6);
}

void CKDatabase.configuredWith<A>(configuration:group:body:)(void *a1, void *a2, void (*a3)(void))
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;

  sub_18A5F50F0(0, qword_1EDF6A848);
  v6 = a2;
  v7 = a1;
  sub_18A630F04();
  v9 = (void *)v8;
  v10 = sub_18A64A4A0(v8, sel_container);
  if (v10)
  {
    v11 = v10;
    swift_getObjectType();

    v13 = sub_18A64A4A0(v12, sel_container);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, sel_implementation);

      v16 = v9;
      sub_18A630F40();
      v18 = v17;
      v19 = objc_msgSend(v17, sel_databaseWithDatabaseScope_, sub_18A64A4A0((uint64_t)v17, sel_databaseScope));
      a3();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_18A643C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_18A5F4194();
}

id sub_18A643C58()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  sub_18A64A1F4();
  sub_18A64A434();
  sub_18A5F3B04(v4, qword_1EDF6A848);
  sub_18A64A20C();
  v5 = v1;
  sub_18A5F4040();
  result = sub_18A5F4354(v6);
  if (result)
  {
    sub_18A64A098();
    sub_18A6387F0();
    result = sub_18A5F3CA8(v8, (const char *)(v3 + 712));
    if (result)
    {
      v9 = objc_msgSend(result, sel_implementation);
      sub_18A64A228();
      v10 = v0;
      sub_18A649FA0();
      v12 = sub_18A64A33C(v11);
      v13 = sub_18A5F3CA8(v12, sel_databaseScope);
      *(_QWORD *)(v2 + 72) = sub_18A5F3888((uint64_t)v13, sel_databaseWithDatabaseScope_);
      v14 = (_QWORD *)sub_18A64A018();
      *(_QWORD *)(v2 + 80) = v14;
      v15 = sub_18A64A118(v14, (uint64_t)sub_18A643D3C);
      return (id)sub_18A649FD4(v15, v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A643D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A64A05C();
  if (!v1)
  {
    *(_QWORD *)(v3 + 96) = v0;
    *(_QWORD *)(v3 + 104) = v2;
  }
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A643D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_18A5F4194();
}

id sub_18A643DA0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  sub_18A64A1F4();
  sub_18A64A434();
  sub_18A5F3B04(v4, qword_1EDF6A848);
  sub_18A64A20C();
  v5 = v1;
  sub_18A5F4040();
  result = sub_18A5F4354(v6);
  if (result)
  {
    sub_18A64A098();
    sub_18A6387F0();
    result = sub_18A5F3CA8(v8, (const char *)(v3 + 712));
    if (result)
    {
      v9 = objc_msgSend(result, sel_implementation);
      sub_18A64A228();
      v10 = v0;
      sub_18A649FA0();
      v12 = sub_18A64A33C(v11);
      v13 = sub_18A5F3CA8(v12, sel_databaseScope);
      *(_QWORD *)(v2 + 72) = sub_18A5F3888((uint64_t)v13, sel_databaseWithDatabaseScope_);
      v14 = (_QWORD *)sub_18A64A018();
      *(_QWORD *)(v2 + 80) = v14;
      v15 = sub_18A64A118(v14, (uint64_t)sub_18A643E84);
      return (id)sub_18A649FD4(v15, v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A643E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A64A05C();
  if (!v1)
  {
    *(_QWORD *)(v3 + 96) = v0;
    *(_QWORD *)(v3 + 104) = v2;
  }
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A643ED0()
{
  void *v0;
  void *v1;
  uint64_t v2;

  sub_18A64A17C();

  return sub_18A5F3900(*(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 96), *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A643F08()
{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);

  sub_18A64A17C();

  v2 = (uint64_t (*)(void))sub_18A64A468();
  return v2();
}

uint64_t sub_18A643F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_18A5F4194();
}

id sub_18A643F54()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  sub_18A64A1F4();
  sub_18A64A434();
  sub_18A5F3B04(v4, qword_1EDF6A848);
  sub_18A64A20C();
  v5 = v1;
  sub_18A5F4040();
  result = sub_18A5F4354(v6);
  if (result)
  {
    sub_18A64A098();
    sub_18A6387F0();
    result = sub_18A5F3CA8(v8, (const char *)(v3 + 712));
    if (result)
    {
      v9 = objc_msgSend(result, sel_implementation);
      sub_18A64A228();
      v10 = v0;
      sub_18A649FA0();
      v12 = sub_18A64A33C(v11);
      v13 = sub_18A5F3CA8(v12, sel_databaseScope);
      *(_QWORD *)(v2 + 72) = sub_18A5F3888((uint64_t)v13, sel_databaseWithDatabaseScope_);
      v14 = (_QWORD *)sub_18A64A018();
      *(_QWORD *)(v2 + 80) = v14;
      v15 = sub_18A64A118(v14, (uint64_t)sub_18A644038);
      return (id)sub_18A649FD4(v15, v16);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A644038(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v12;

  v12 = *v5;
  v10 = v12;
  sub_18A64A154(&v12);
  *(_QWORD *)(v10 + 88) = v4;
  swift_task_dealloc();
  if (!v4)
  {
    *(_BYTE *)(v10 + 120) = a4 & 1;
    *(_QWORD *)(v10 + 96) = a3;
    *(_QWORD *)(v10 + 104) = a2;
    *(_QWORD *)(v10 + 112) = a1;
  }
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A6440C0()
{
  void *v0;
  void *v1;
  uint64_t v2;

  sub_18A64A17C();

  return sub_18A64A084(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 96), *(unsigned __int8 *)(v2 + 120), *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A644100()
{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);

  sub_18A64A17C();

  v2 = (uint64_t (*)(void))sub_18A64A468();
  return v2();
}

uint64_t sub_18A644138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 104) = a6;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  return sub_18A5F4194();
}

id sub_18A644154()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;

  sub_18A64A434();
  sub_18A5F3B04(v4, qword_1EDF6A848);
  sub_18A64A20C();
  v5 = v1;
  sub_18A5F4040();
  result = sub_18A5F4354(v6);
  if (result)
  {
    sub_18A64A098();
    sub_18A6387F0();
    result = sub_18A5F3CA8(v8, (const char *)(v3 + 712));
    if (result)
    {
      v9 = objc_msgSend(result, sel_implementation);
      sub_18A64A228();
      v10 = v0;
      sub_18A649FA0();
      v12 = sub_18A64A33C(v11);
      v13 = sub_18A5F3CA8(v12, sel_databaseScope);
      *(_QWORD *)(v2 + 72) = sub_18A5F3888((uint64_t)v13, sel_databaseWithDatabaseScope_);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v2 + 80) = v14;
      *v14 = v2;
      v14[1] = sub_18A644268;
      return (id)CKDatabase.recordZoneChanges(inZonesWith:configurations:shouldFetchAssetContents:)(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 104));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A644268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_18A64A52C();
  sub_18A64A154(v3);
  *(_QWORD *)(v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 96) = v0;
  sub_18A5F3840();
  return sub_18A5F3EA4();
}

uint64_t sub_18A6442BC()
{
  void *v0;
  uint64_t v1;
  void *v2;

  sub_18A64A304();

  sub_18A5F37E0();
  sub_18A5F37A4();
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 96));
}

uint64_t sub_18A644308()
{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);

  sub_18A64A304();

  sub_18A5F37E0();
  sub_18A5F37A4();
  v2 = (uint64_t (*)(void))sub_18A64A468();
  return v2();
}

uint64_t sub_18A64434C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a2;
  v5[3] = a3;
  return sub_18A5F4194();
}

id sub_18A644360()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;

  sub_18A64A434();
  sub_18A5F3B04(v3, qword_1EDF6A848);
  sub_18A64A20C();
  v4 = v0;
  sub_18A5F4040();
  v6 = v5;
  v1[6] = v5;
  result = sub_18A649FB0();
  if (result)
  {
    sub_18A64A098();
    sub_18A6387F0();
    result = sub_18A5F3CA8(v8, (const char *)(v2 + 712));
    if (result)
    {
      v9 = objc_msgSend(result, sel_implementation);
      sub_18A64A228();
      v10 = v6;
      sub_18A649FA0();
      v1[7] = v11;
      v12 = sub_18A5F3CA8(v11, sel_databaseScope);
      v13 = sub_18A5F3888((uint64_t)v12, sel_databaseWithDatabaseScope_);
      v1[8] = v13;
      v14 = (_QWORD *)swift_task_alloc();
      v1[9] = v14;
      *v14 = v1;
      v14[1] = sub_18A644478;
      return (id)sub_18A68E6FC((uint64_t)v13);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A644478()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6444D0()
{
  void *v0;
  void *v1;
  uint64_t v2;

  sub_18A64A578();

  swift_release();
  return sub_18A5F4134(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A64450C()
{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);

  sub_18A64A578();

  swift_release();
  v2 = (uint64_t (*)(void))sub_18A64A584();
  return sub_18A5F4134(v2);
}

uint64_t CKDatabase.configuredWith<A>(configuration:group:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return sub_18A5F4194();
}

id sub_18A64455C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD, id);

  sub_18A64A1F4();
  v3 = (void *)v0[3];
  v2 = (void *)v0[4];
  sub_18A5F3B04(v4, qword_1EDF6A848);
  sub_18A64A20C();
  v5 = v3;
  sub_18A5F4040();
  sub_18A64A33C(v6);
  result = sub_18A649FB0();
  if (result)
  {
    swift_getObjectType();
    sub_18A6387F0();
    result = sub_18A5F3CA8(v8, (const char *)(v1 + 712));
    if (result)
    {
      v9 = objc_msgSend(result, sel_implementation);
      sub_18A64A228();
      v10 = v2;
      sub_18A649FA0();
      v0[9] = v11;
      v12 = sub_18A5F3CA8(v11, sel_databaseScope);
      v13 = sub_18A5F3888((uint64_t)v12, sel_databaseWithDatabaseScope_);
      v0[10] = v13;
      v14 = (_QWORD *)sub_18A64A018();
      v0[11] = v14;
      *v14 = v0;
      v14[1] = sub_18A644680;
      return (id)v15(v0[2], v13);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A644680()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6446D8()
{
  void *v0;
  void *v1;
  uint64_t v2;

  sub_18A64A540();

  return sub_18A5F4680(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A644708()
{
  void *v0;
  void *v1;
  uint64_t v2;

  sub_18A64A540();

  return sub_18A5F4680(*(uint64_t (**)(void))(v2 + 8));
}

void CKDatabase.fetch(withRecordIDs:desiredKeys:completionHandler:)()
{
  sub_18A646114();
}

uint64_t sub_18A644744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  SEL *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  sub_18A64A40C();
  sub_18A5F3B04(v0, &qword_1EDF6BC10);
  v2 = v1;
  v3 = sub_18A5F3898();
  v4 = sub_18A648188(v3, (uint64_t)&unk_1EDF6A8F0, (uint64_t)off_1E1F54288, (SEL *)&selRef_initWithRecordIDs_);
  v5 = swift_bridgeObjectRetain();
  CKFetchRecordsOperation.desiredKeys.setter(v5);
  v6 = sub_18A5F37BC();
  sub_18A64A2A8(v6, MEMORY[0x1E0DEE9E0]);
  CKFetchRecordsOperation.perRecordResultBlock.setter((uint64_t)sub_18A649EC0, v6);
  v7 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v7);
  sub_18A634FA4();
  CKFetchRecordsOperation.fetchRecordsResultBlock.setter((uint64_t)sub_18A649E90, v2);
  sub_18A5F4314(v8, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return sub_18A5F4120();
}

uint64_t CKDatabase.records(for:desiredKeys:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A644838(uint64_t a1)
{
  id v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_18A5F3888(a1, sel_implementation);
  v2 = sub_18A64A3D0((uint64_t)v1);
  v3 = objc_msgSend(sub_18A5F3888(v2, sel_container), sel_convenienceConfiguration);
  sub_18A64A08C((uint64_t)v3);
  v4 = (_QWORD *)swift_task_alloc();
  v5 = sub_18A64A194(v4, (uint64_t)sub_18A6448C8);
  return sub_18A64494C(v5, v6, v7, v8);
}

uint64_t sub_18A6448C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A64A52C();
  sub_18A64A154(v2);
  *(_QWORD *)(v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    v4 = *(void **)(v1 + 40);

    v5 = sub_18A634EC0();
    return sub_18A5F4214(v5, v6);
  }
}

uint64_t sub_18A644924()
{
  void *v0;
  uint64_t (*v1)(void);

  sub_18A64A3A8();

  v1 = (uint64_t (*)(void))sub_18A64A590();
  return sub_18A5F3E50(v1);
}

uint64_t sub_18A64494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A644964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v7 = *(_OWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_18A64A278();
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  *(_OWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  sub_18A5F101C(&qword_1EDF6BC00);
  *v5 = v0;
  v5[1] = sub_18A644A1C;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3CB0();
}

uint64_t sub_18A644A1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  sub_18A64A154(&v4);
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A644A7C()
{
  uint64_t (*v0)(void);

  swift_task_dealloc();
  v0 = (uint64_t (*)(void))sub_18A64A584();
  return sub_18A5F3E50(v0);
}

void CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:completionHandler:)()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  sub_18A5F44DC();
  sub_18A64A31C();
  v1 = sub_18A5F3888(v0, sel_implementation);
  v2 = sub_18A5F3888((uint64_t)v1, sel_container);
  v3 = objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18A64A474();
  sub_18A644B3C();

  sub_18A5F44F8(v3);
}

uint64_t sub_18A644B3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Bool v6;
  Swift::Bool v7;
  uint64_t v8;
  CKModifyRecordsOperation *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  Swift::OpaquePointer_optional v18;
  Swift::OpaquePointer_optional v19;

  sub_18A64A140();
  sub_18A64A3DC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_18A5F3B04(v8, &qword_1EDF6A0A0);
  sub_18A5F3898();
  v18.value._rawValue = (void *)swift_bridgeObjectRetain();
  v18.is_nil = v7;
  CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v9, v18, v19);
  v11 = v10;
  objc_msgSend(v10, sel_setSavePolicy_, v5);
  objc_msgSend(v11, sel_setAtomic_, v3 & 1);
  v12 = sub_18A5F37BC();
  v13 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9E0];
  v14 = sub_18A5F37BC();
  *(_QWORD *)(v14 + 16) = v13;
  sub_18A649FE8();
  CKModifyRecordsOperation.perRecordSaveBlock.setter((uint64_t)sub_18A649CCC);
  sub_18A64A02C();
  CKModifyRecordsOperation.perRecordDeleteBlock.setter((uint64_t)sub_18A649CF4);
  v15 = (_QWORD *)sub_18A5F37B4();
  v15[2] = v12;
  v15[3] = v14;
  v15[4] = v1;
  v15[5] = v0;
  sub_18A649FE8();
  sub_18A64A02C();
  sub_18A634FA4();
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter((uint64_t)sub_18A6499C4);
  sub_18A5F4314(v16, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  sub_18A64A254();
  return sub_18A649F60();
}

uint64_t CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 80) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A644C88(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  _QWORD *v5;

  v2 = sub_18A5F3D50(a1, sel_implementation);
  *(_QWORD *)(v1 + 48) = v2;
  v3 = sub_18A5F3D50((uint64_t)v2, sel_container);
  v4 = objc_msgSend(v3, sel_convenienceConfiguration);
  *(_QWORD *)(v1 + 56) = v4;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v5;
  *v5 = v1;
  v5[1] = sub_18A644D40;
  return sub_18A644DC4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 80), *(_QWORD *)(v1 + 40), (uint64_t)v4);
}

uint64_t sub_18A644D40()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A64A034();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    v3 = *(void **)(v1 + 48);

    v4 = sub_18A649FC0();
    return sub_18A649F50(v4, v5, v6);
  }
}

uint64_t sub_18A644D94()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);

  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A644DC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 64) = a6;
  *(_QWORD *)(v7 + 72) = v6;
  *(_BYTE *)(v7 + 104) = a4;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A644DE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_BYTE *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = sub_18A64A50C();
  *(_QWORD *)(v0 + 80) = v5;
  sub_18A64A398(v5);
  *(_QWORD *)(v6 + 40) = v4;
  *(_BYTE *)(v6 + 48) = v2;
  *(_QWORD *)(v6 + 56) = v3;
  *(_QWORD *)(v6 + 64) = v1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  sub_18A5F101C(&qword_1EDF6A090);
  *v7 = v0;
  v7[1] = sub_18A644E9C;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A5F3CB0();
}

uint64_t sub_18A644E9C()
{
  uint64_t v0;

  sub_18A64A0E4();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A644EE8()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void CKDatabase.fetch(withQuery:inZoneWith:desiredKeys:resultsLimit:completionHandler:)()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  sub_18A5F44DC();
  sub_18A64A31C();
  v1 = sub_18A5F3888(v0, sel_implementation);
  v2 = sub_18A5F3888((uint64_t)v1, sel_container);
  v3 = objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18A64A48C();
  sub_18A64A474();
  sub_18A644FA0();

  sub_18A5F44F8(v3);
}

uint64_t sub_18A644FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  sub_18A64A140();
  sub_18A64A3DC();
  v1 = v0;
  v3 = v2;
  v5 = objc_msgSend(objc_allocWithZone((Class)CKQueryOperation), sel_initWithQuery_, v4);
  objc_msgSend(v5, sel_setZoneID_, v3);
  v6 = sub_18A629140();
  CKQueryOperation.desiredKeys.setter(v6);
  sub_18A64A56C(v7, sel_setResultsLimit_);
  v8 = sub_18A5F37BC();
  sub_18A64A2A8(v8, MEMORY[0x1E0DEE9D8]);
  CKQueryOperation.recordMatchedBlock.setter((uint64_t)sub_18A649EBC, v8);
  v9 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v9);
  sub_18A634FA4();
  CKQueryOperation.queryResultBlock.setter((uint64_t)sub_18A649F3C, v1);
  sub_18A5F4314(v10, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return sub_18A649F60();
}

void CKDatabase.fetch(withCursor:desiredKeys:resultsLimit:completionHandler:)()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;

  sub_18A64A140();
  sub_18A64A348();
  v1 = sub_18A5F3888(v0, sel_implementation);
  v2 = objc_msgSend(sub_18A5F3888((uint64_t)v1, sel_container), sel_convenienceConfiguration);
  sub_18A64A59C();
  sub_18A64A368();
  sub_18A645110();

  sub_18A5F3BC0(v3);
}

uint64_t sub_18A645110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  sub_18A64A3F4();
  v1 = v0;
  v3 = objc_msgSend(objc_allocWithZone((Class)CKQueryOperation), sel_initWithCursor_, v2);
  v4 = sub_18A629140();
  CKQueryOperation.desiredKeys.setter(v4);
  sub_18A64A56C(v5, sel_setResultsLimit_);
  v6 = sub_18A5F37BC();
  sub_18A64A2A8(v6, MEMORY[0x1E0DEE9D8]);
  CKQueryOperation.recordMatchedBlock.setter((uint64_t)sub_18A649C34, v6);
  v7 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v7);
  sub_18A634FA4();
  CKQueryOperation.queryResultBlock.setter((uint64_t)sub_18A649C50, v1);
  sub_18A5F4314(v8, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return sub_18A5F4120();
}

uint64_t CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6451F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_18A5F3D50(a1, sel_implementation);
  *(_QWORD *)(v2 + 56) = v3;
  v4 = objc_msgSend(sub_18A5F3D50((uint64_t)v3, sel_container), sel_convenienceConfiguration);
  sub_18A64A554((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 72) = v5;
  *v5 = v2;
  v5[1] = sub_18A64529C;
  v6 = sub_18A64A3B0();
  return sub_18A64533C(v6, v7, v8, v9, v10, v1);
}

uint64_t sub_18A64529C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;

  v8 = *v1;
  v2 = v8;
  sub_18A64A154(&v8);
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    v4 = *(void **)(v2 + 56);

    v5 = sub_18A649FC0();
    return sub_18A649F50(v5, v6, v7);
  }
}

uint64_t sub_18A645310()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = *(void **)(v0 + 56);

  v2 = (uint64_t (*)(void))sub_18A64A584();
  return sub_18A5F3E50(v2);
}

uint64_t sub_18A64533C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[9] = a6;
  v7[10] = v6;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A645358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 32);
  v8 = *(_OWORD *)(v0 + 56);
  v4 = sub_18A64A50C();
  *(_QWORD *)(v0 + 88) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 48) = v8;
  *(_QWORD *)(v4 + 64) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v5;
  sub_18A5F101C(&qword_1EDF6BBF0);
  *v5 = v0;
  v5[1] = sub_18A645424;
  sub_18A634F1C();
  sub_18A634F10();
  return sub_18A64A1B8();
}

uint64_t sub_18A645424()
{
  uint64_t v0;

  sub_18A64A0A4();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A64546C()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CKDatabase.records(continuingMatchFrom:desiredKeys:resultsLimit:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A6454AC(uint64_t a1)
{
  uint64_t *v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v1[6] = (uint64_t)v2;
  v3 = sub_18A5F3888((uint64_t)v2, sel_container);
  v1[7] = (uint64_t)objc_msgSend(v3, sel_convenienceConfiguration);

  v4 = (_QWORD *)swift_task_alloc();
  v1[8] = (uint64_t)v4;
  *v4 = v1;
  v4[1] = sub_18A644D40;
  v5 = sub_18A64A214(v1[2]);
  return sub_18A645558(v5, v6, v7, v8, v9);
}

uint64_t sub_18A645558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A645570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  sub_18A64A1F4();
  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v8 = *(_OWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = sub_18A64A278();
  *(_QWORD *)(v0 + 80) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v3;
  *(_OWORD *)(v5 + 40) = v8;
  *(_QWORD *)(v5 + 56) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  sub_18A5F101C(&qword_1EDF6BBF0);
  *v6 = v0;
  v6[1] = sub_18A645630;
  sub_18A634F1C();
  sub_18A634F10();
  return sub_18A5F3CB0();
}

uint64_t sub_18A645630()
{
  uint64_t v0;

  sub_18A64A0E4();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

void CKDatabase.fetch(withRecordZoneIDs:completionHandler:)()
{
  sub_18A645DE0();
}

uint64_t sub_18A645684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  SEL *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  sub_18A634F5C();
  sub_18A5F3B04(v1, (unint64_t *)&unk_1EDF69428);
  v2 = sub_18A5F3898();
  v3 = sub_18A648188(v2, (uint64_t)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (SEL *)&selRef_initWithRecordZoneIDs_);
  v4 = sub_18A5F37BC();
  sub_18A64A2A8(v4, MEMORY[0x1E0DEE9E0]);
  CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter((uint64_t)sub_18A649EB8, v4);
  v5 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v5);
  sub_18A634FA4();
  CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter((uint64_t)sub_18A649F38, v0);
  sub_18A5F4314(v6, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return sub_18A5F4120();
}

uint64_t CKDatabase.recordZones(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A645760(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_18A5F3888(a1, sel_implementation);
  *(_QWORD *)(v1 + 32) = v2;
  v3 = objc_msgSend(sub_18A5F3888((uint64_t)v2, sel_container), sel_convenienceConfiguration);
  sub_18A64A560((uint64_t)v3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v4;
  v5 = sub_18A64A28C(v4, (uint64_t)sub_18A6457F8);
  return sub_18A645844(v5, v6, v7);
}

uint64_t sub_18A6457F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_18A5F4754();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    v3 = *(void **)(v1 + 32);

    v4 = sub_18A634EC0();
    return sub_18A5F4214(v4, v5);
  }
}

uint64_t sub_18A645844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A645858()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_18A634EB0();
  sub_18A634E94(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  sub_18A5F101C(&qword_1EDF69420);
  *v2 = v0;
  v2[1] = sub_18A6458E4;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A649FF0();
}

uint64_t sub_18A6458E4()
{
  uint64_t v0;

  sub_18A634E74();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

void CKDatabase.modifyRecordZones(saving:deleting:completionHandler:)()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  sub_18A64A140();
  sub_18A64A1C4();
  v1 = sub_18A5F3888(v0, sel_implementation);
  v2 = sub_18A5F3888((uint64_t)v1, sel_container);
  v3 = objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18A6459CC();
  sub_18A5F3BC0(v3);
}

uint64_t sub_18A6459CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  Swift::Bool v4;
  Swift::Bool v5;
  uint64_t v6;
  CKModifyRecordZonesOperation *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::OpaquePointer_optional v16;
  Swift::OpaquePointer_optional v17;

  sub_18A64A140();
  sub_18A64A3F4();
  v3 = v2;
  v5 = v4;
  sub_18A5F3B04(v6, &qword_1EDF6A150);
  sub_18A5F3898();
  v16.value._rawValue = (void *)sub_18A629140();
  v16.is_nil = v5;
  CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v7, v16, v17);
  v9 = v8;
  objc_msgSend(v8, sel_setMarkZonesAsUserPurged_, v3 & 1);
  v10 = sub_18A5F37BC();
  v11 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9E0];
  v12 = sub_18A5F37BC();
  *(_QWORD *)(v12 + 16) = v11;
  sub_18A649FE8();
  CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter((uint64_t)sub_18A649AB8);
  sub_18A64A02C();
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter((uint64_t)sub_18A649AE0);
  v13 = (_QWORD *)sub_18A5F37B4();
  v13[2] = v10;
  v13[3] = v12;
  v13[4] = v1;
  v13[5] = v0;
  sub_18A649FE8();
  sub_18A64A02C();
  sub_18A634FA4();
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter((uint64_t)sub_18A6499C4);
  sub_18A5F4314(v14, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  sub_18A64A254();
  return sub_18A649F60();
}

uint64_t CKDatabase.modifyRecordZones(saving:deleting:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A645AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_18A5F3888(a1, sel_implementation);
  v4 = sub_18A64A3D0((uint64_t)v3);
  v5 = objc_msgSend(sub_18A5F3888(v4, sel_container), sel_convenienceConfiguration);
  sub_18A64A08C((uint64_t)v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 56) = v6;
  *v6 = v2;
  v6[1] = sub_18A645B94;
  v7 = sub_18A64A3B0();
  return sub_18A64A16C(v7, v8, 0, v9, v1);
}

uint64_t sub_18A645B94()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_18A649F78();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    sub_18A64A4F0();

    v2 = sub_18A649FC0();
    return sub_18A649F50(v2, v3, v4);
  }
}

uint64_t sub_18A645BE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 56) = a5;
  *(_QWORD *)(v6 + 64) = v5;
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 48) = a4;
  *(_BYTE *)(v6 + 96) = a3;
  *(_QWORD *)(v6 + 32) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A645C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 96);
  v4 = sub_18A64A278();
  *(_QWORD *)(v0 + 72) = v4;
  sub_18A64A398(v4);
  *(_BYTE *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  sub_18A5F101C(&qword_1EDF6A148);
  *v6 = v0;
  v6[1] = sub_18A645CB4;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A649FF0();
}

uint64_t sub_18A645CB4()
{
  uint64_t v0;

  sub_18A64A0C4();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A645CFC()
{
  uint64_t (*v0)(void);

  swift_task_dealloc();
  v0 = (uint64_t (*)(void))sub_18A64A468();
  return sub_18A5F3E50(v0);
}

uint64_t CKDatabase.modifyRecordZones(saving:deleting:markZonesAsUserPurged:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A645D3C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A64A3D0((uint64_t)v2);
  v4 = objc_msgSend(sub_18A5F3888(v3, sel_container), sel_convenienceConfiguration);
  sub_18A64A08C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 56) = v5;
  *v5 = v1;
  v5[1] = sub_18A645B94;
  v6 = sub_18A64A214(*(_QWORD *)(v1 + 16));
  return sub_18A64A16C(v6, v7, v8, v9, v10);
}

void CKDatabase.fetch(withSubscriptionIDs:completionHandler:)()
{
  sub_18A645DE0();
}

void sub_18A645DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  sub_18A64A140();
  v5 = v4;
  sub_18A64A1C4();
  v7 = sub_18A5F3888(v6, sel_implementation);
  v8 = sub_18A5F3888((uint64_t)v7, sel_container);
  v9 = objc_msgSend(v8, sel_convenienceConfiguration);

  v5(v3, v0, v9, v2, v1);
  sub_18A5F3BC0(v9);
}

uint64_t sub_18A645E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  CKFetchSubscriptionsOperation *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  sub_18A634F5C();
  sub_18A5F3B04(v1, &qword_1EDF6BBE8);
  v2 = sub_18A5F3898();
  CKFetchSubscriptionsOperation.init(subscriptionIDs:)(v3, (Swift::OpaquePointer)v2);
  v5 = v4;
  v6 = sub_18A5F37BC();
  sub_18A64A2A8(v6, MEMORY[0x1E0DEE9E0]);
  CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter((uint64_t)sub_18A649F14, v6);
  v7 = (_QWORD *)sub_18A5F37B4();
  sub_18A634EF4(v7);
  sub_18A634FA4();
  CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter((uint64_t)sub_18A649F38, v0);
  sub_18A5F4314(v8, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return sub_18A5F4120();
}

uint64_t CKDatabase.subscriptions(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4194();
}

uint64_t sub_18A645F3C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_18A5F3888(a1, sel_implementation);
  *(_QWORD *)(v1 + 32) = v2;
  v3 = objc_msgSend(sub_18A5F3888((uint64_t)v2, sel_container), sel_convenienceConfiguration);
  sub_18A64A560((uint64_t)v3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v4;
  v5 = sub_18A64A28C(v4, (uint64_t)sub_18A645FD4);
  return sub_18A646020(v5, v6, v7);
}

uint64_t sub_18A645FD4()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_18A5F4754();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3EA4();
  }
  else
  {
    v3 = *(void **)(v1 + 32);

    v4 = sub_18A634EC0();
    return sub_18A5F4214(v4, v5);
  }
}

uint64_t sub_18A646020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18A5F4194();
}

uint64_t sub_18A646034()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_18A634EB0();
  sub_18A634E94(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  sub_18A5F101C(&qword_1EDF6BBD8);
  *v2 = v0;
  v2[1] = sub_18A6460C0;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A649FF0();
}

uint64_t sub_18A6460C0()
{
  uint64_t v0;

  sub_18A634E74();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

void CKDatabase.modifySubscriptions(saving:deleting:completionHandler:)()
{
  sub_18A646114();
}

void sub_18A646114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;

  sub_18A64A140();
  v5 = v4;
  v7 = v6;
  sub_18A64A348();
  v9 = sub_18A5F3888(v8, sel_implementation);
  v10 = objc_msgSend(sub_18A5F3888((uint64_t)v9, sel_container), sel_convenienceConfiguration);
  sub_18A64A59C();
  v5(v3, v2, v0, v11, v1, v7);

  sub_18A5F3BC0(v11);
}

uint64_t sub_18A6461B0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Bool v2;
  Swift::Bool v3;
  uint64_t v4;
  CKModifySubscriptionsOperation *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  Swift::OpaquePointer_optional v14;
  Swift::OpaquePointer_optional v15;

  sub_18A64A140();
  sub_18A64A40C();
  v3 = v2;
  sub_18A5F3B04(v4, (unint64_t *)&unk_1EDF69460);
  sub_18A5F3898();
  v14.value._rawValue = (void *)swift_bridgeObjectRetain();
  v14.is_nil = v3;
  CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v5, v14, v15);
  v7 = v6;
  v8 = sub_18A5F37BC();
  v9 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9E0];
  v10 = sub_18A5F37BC();
  *(_QWORD *)(v10 + 16) = v9;
  sub_18A649FE8();
  CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter((uint64_t)sub_18A649968);
  sub_18A64A02C();
  CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter((uint64_t)sub_18A649994);
  v11 = (_QWORD *)sub_18A5F37B4();
  v11[2] = v8;
  v11[3] = v10;
  v11[4] = v1;
  v11[5] = v0;
  sub_18A649FE8();
  sub_18A64A02C();
  sub_18A634FA4();
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter((uint64_t)sub_18A6499C4);
  sub_18A5F4314(v12, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  sub_18A64A254();
  return sub_18A649F60();
}

uint64_t CKDatabase.modifySubscriptions(saving:deleting:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6462CC(uint64_t a1)
{
  id v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_18A5F3888(a1, sel_implementation);
  v2 = sub_18A64A3D0((uint64_t)v1);
  v3 = objc_msgSend(sub_18A5F3888(v2, sel_container), sel_convenienceConfiguration);
  sub_18A64A08C((uint64_t)v3);
  v4 = (_QWORD *)swift_task_alloc();
  v5 = sub_18A64A194(v4, (uint64_t)sub_18A64635C);
  return sub_18A6463AC(v5, v6, v7, v8);
}

uint64_t sub_18A64635C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_18A649F78();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    sub_18A64A4F0();

    v2 = sub_18A649FC0();
    return sub_18A649F50(v2, v3, v4);
  }
}

uint64_t sub_18A6463AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6463C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[7];
  v2 = v0[6];
  v3 = sub_18A64A278();
  v0[9] = v3;
  sub_18A64A398(v3);
  *(_QWORD *)(v4 + 40) = v2;
  *(_QWORD *)(v4 + 48) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[10] = v5;
  sub_18A5F101C(&qword_1EDF69448);
  *v5 = v0;
  v5[1] = sub_18A645CB4;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18A646474@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CKDatabase.DatabaseChange.Modification.zoneID.getter();
  *a1 = result;
  return result;
}

void sub_18A6464AC(id *a1)
{
  id v1;

  v1 = *a1;
  CKDatabase.DatabaseChange.Modification.zoneID.setter();
}

void CKDatabase.DatabaseChange.Modification.zoneID.setter()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A64A2B0();
  *v1 = v0;
  sub_18A5F379C();
}

void CKDatabase.DatabaseChange.Modification.zoneID.modify(_QWORD *a1)
{
  id v1;
  id v2;

  sub_18A64A130(a1);
  v2 = v1;
  sub_18A6406BC();
  sub_18A5F379C();
}

uint64_t sub_18A64651C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = CKDatabase.DatabaseChange.Deletion.zoneID.getter(a1, a2);
  *a3 = result;
  return result;
}

void sub_18A64655C(id *a1)
{
  id v1;

  v1 = *a1;
  CKDatabase.DatabaseChange.Deletion.zoneID.setter();
}

void CKDatabase.DatabaseChange.Deletion.zoneID.setter()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A64A2B0();
  *v1 = v0;
  sub_18A5F379C();
}

void CKDatabase.DatabaseChange.Deletion.zoneID.modify(_QWORD *a1)
{
  id v1;
  id v2;

  sub_18A64A130(a1);
  v2 = v1;
  sub_18A6406BC();
  sub_18A5F379C();
}

void sub_18A6465C8(_BYTE *a1@<X8>)
{
  CKDatabase.DatabaseChange.Deletion.reason.getter(a1);
}

_BYTE *sub_18A646600(char *a1)
{
  char v2;

  v2 = *a1;
  return CKDatabase.DatabaseChange.Deletion.reason.setter(&v2);
}

_BYTE *CKDatabase.DatabaseChange.Deletion.reason.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

_BYTE *(*CKDatabase.DatabaseChange.Deletion.reason.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 8);
  return sub_18A64665C;
}

_BYTE *sub_18A64665C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 8) = result[8];
  return result;
}

void CKDatabase.DatabaseChange.Deletion.Reason.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  sub_18A5F379C();
}

BOOL static CKDatabase.DatabaseChange.Deletion.Reason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CKDatabase.DatabaseChange.Deletion.Reason.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = sub_18A5F3ED0();
  sub_18A5F3A20(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  sub_18A5F4238();
  sub_18A5F48E8();
}

BOOL CKDatabase.DatabaseChange.Deletion.purged.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) == 1;
}

void CKDatabase.fetchDatabaseChanges(since:resultsLimit:completionHandler:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  sub_18A64A140();
  v1 = sub_18A5F3888(v0, sel_implementation);
  v2 = objc_msgSend(sub_18A5F3888((uint64_t)v1, sel_container), sel_convenienceConfiguration);
  sub_18A64A59C();
  sub_18A64A368();
  sub_18A646780(v3, v4, v5, v6, v7, v8, v9);

  sub_18A5F3BC0(v10);
}

uint64_t sub_18A646780(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char aBlock;
  char aBlocka;
  char aBlockb;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v12 = objc_msgSend(objc_allocWithZone((Class)CKFetchDatabaseChangesOperation), sel_initWithPreviousServerChangeToken_, a1);
  objc_msgSend(v12, sel_setFetchAllChanges_, 0);
  if ((a3 & 1) != 0)
    v13 = 0;
  else
    v13 = a2;
  objc_msgSend(v12, sel_setResultsLimit_, v13);
  v14 = sub_18A5F37BC();
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9D8];
  v16 = sub_18A5F37BC();
  *(_QWORD *)(v16 + 16) = v15;
  sub_18A5F41B4((uint64_t)&unk_1E1F5C908, v23, a5, MEMORY[0x1E0C809B0], 1107296256, v39, v43);
  sub_18A649FE8();
  v17 = sub_18A64A2FC();
  sub_18A64A188(v17, sel_setRecordZoneWithIDChangedBlock_);
  sub_18A64A440();
  sub_18A64A424();
  sub_18A5F41B4((uint64_t)&unk_1E1F5C930, v24, v29, aBlock, v36, v40, v44);
  sub_18A64A02C();
  v18 = sub_18A64A2FC();
  sub_18A64A188(v18, sel_setRecordZoneWithIDWasDeletedBlock_);
  sub_18A64A440();
  sub_18A64A424();
  sub_18A5F41B4((uint64_t)&unk_1E1F5C958, v25, v30, aBlocka, v37, v41, v45);
  sub_18A64A02C();
  v19 = sub_18A64A2FC();
  sub_18A64A188(v19, sel_setRecordZoneWithIDWasPurgedBlock_);
  sub_18A64A440();
  sub_18A64A424();
  sub_18A5F41B4((uint64_t)&unk_1E1F5C980, v26, v31, aBlockb, v38, v42, v46);
  sub_18A64A02C();
  v20 = sub_18A64A2FC();
  sub_18A64A188(v20, sel_setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock_);
  sub_18A64A440();
  v21 = (_QWORD *)sub_18A5F37B4();
  v21[2] = v14;
  v21[3] = v16;
  v21[4] = a6;
  v21[5] = a7;
  sub_18A649FE8();
  sub_18A64A02C();
  swift_retain();
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter((uint64_t)sub_18A6498AC, (uint64_t)v21);
  objc_msgSend(v27, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_, v12, a4, v32);

  sub_18A64A254();
  return swift_release();
}

uint64_t CKDatabase.databaseChanges(since:resultsLimit:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6469DC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_18A5F3888(a1, sel_implementation);
  v3 = sub_18A64A3D0((uint64_t)v2);
  v4 = objc_msgSend(sub_18A5F3888(v3, sel_container), sel_convenienceConfiguration);
  sub_18A64A08C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 56) = v5;
  *v5 = v1;
  v5[1] = sub_18A646A84;
  v6 = sub_18A64A214(*(_QWORD *)(v1 + 16));
  return sub_18A646B28(v6, v7, v8, v9, v10);
}

uint64_t sub_18A646A84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_18A64A1D4();
  sub_18A64A154(v2);
  *(_QWORD *)(v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    v4 = *(void **)(v1 + 40);

    v5 = sub_18A64A25C();
    return sub_18A64A084(v5, v6, v7, v8, v9);
  }
}

uint64_t sub_18A646AFC()
{
  void *v0;
  uint64_t (*v1)(void);

  sub_18A64A3A8();

  v1 = (uint64_t (*)(void))sub_18A64A590();
  return sub_18A5F3E50(v1);
}

uint64_t sub_18A646B28(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 72) = a5;
  *(_QWORD *)(v6 + 80) = v5;
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a4;
  *(_BYTE *)(v6 + 41) = a3;
  *(_QWORD *)(v6 + 48) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A646B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_BYTE *)(v0 + 41);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = sub_18A64A278();
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 40) = v5 & 1;
  *(_QWORD *)(v7 + 48) = v3;
  *(_QWORD *)(v7 + 56) = v2;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v8;
  sub_18A5F101C(&qword_1EDF6A838);
  *v8 = v0;
  v8[1] = sub_18A646C0C;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A649FF0();
}

uint64_t sub_18A646C0C()
{
  uint64_t v0;

  sub_18A64A0A4();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A646C58()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void CKDatabase.RecordZoneChange.Modification.record.modify(_QWORD *a1)
{
  id v1;
  id v2;

  sub_18A64A130(a1);
  v2 = v1;
  sub_18A6406BC();
  sub_18A5F379C();
}

uint64_t sub_18A646CB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CKDatabase.RecordZoneChange.Deletion.recordID.getter();
  *a1 = result;
  return result;
}

void sub_18A646CF0(id *a1)
{
  id v1;

  v1 = *a1;
  CKDatabase.RecordZoneChange.Deletion.recordID.setter();
}

void CKDatabase.RecordZoneChange.Deletion.recordID.setter()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A64A2B0();
  *v1 = v0;
  sub_18A5F379C();
}

void CKDatabase.RecordZoneChange.Deletion.recordID.modify(_QWORD *a1)
{
  id v1;
  id v2;

  sub_18A64A130(a1);
  v2 = v1;
  sub_18A6406BC();
  sub_18A5F379C();
}

void sub_18A646D5C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CKDatabase.RecordZoneChange.Deletion.recordType.getter();
  *a1 = v2;
  a1[1] = v3;
}

void sub_18A646D9C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  CKDatabase.RecordZoneChange.Deletion.recordType.setter(v1, v2);
}

void CKDatabase.RecordZoneChange.Deletion.recordType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  sub_18A5F3824();
}

void CKDatabase.RecordZoneChange.Deletion.recordType.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  sub_18A6406BC();
  sub_18A5F379C();
}

void sub_18A646E38(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_18A5F3FAC();
    sub_18A5F37A4();
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v3 + 16) = v2;
    sub_18A6239EC();
  }
  else
  {
    sub_18A5F37A4();
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v3 + 16) = v2;
    sub_18A5F3824();
  }
}

void CKDatabase.RecordZoneChange.ZoneAttributesModification.zone.modify(_QWORD *a1)
{
  id v1;
  id v2;

  sub_18A64A130(a1);
  v2 = v1;
  sub_18A6406BC();
  sub_18A5F379C();
}

void sub_18A646EA8(uint64_t a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)a1;
  v2 = *(void ***)(a1 + 8);
  v4 = *v2;
  if ((a2 & 1) != 0)
  {
    v5 = v3;

    *v2 = v5;
  }
  else
  {

    *v2 = v3;
    sub_18A60A0E0();
  }
}

#error "18A646F90: call analysis failed (funcsize=41)"

uint64_t sub_18A646FA4(void *a1, void *a2, Swift::Int a3, NSData *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13;
  CKFetchRecordZoneChangesConfiguration *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t inited;
  id v19;
  id v20;
  CKFetchRecordZoneChangesOperation *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  _QWORD *v31;
  void *v34;
  void *v37;
  Swift::OpaquePointer_optional v38;
  Swift::OpaquePointer_optional v39;
  Swift::Int_optional v40;
  Swift::OpaquePointer_optional v41;
  CKServerChangeToken_optional v42;

  if ((a5 & 1) != 0)
    a4 = 0;
  sub_18A5F3B04((uint64_t)a1, &qword_1EDF6A9A0);
  v13 = a2;
  sub_18A5F3898();
  v42.value.super.isa = (Class)a2;
  v42.value._data = a4;
  v42.is_nil = 0;
  v40.value = a3;
  CKFetchRecordZoneChangesConfiguration.init(previousServerChangeToken:resultsLimit:desiredKeys:)(v14, v42, v40, v41);
  v16 = (void *)v15;
  sub_18A5F3B04(v15, &qword_1EDF6A328);
  sub_18A5F101C(&qword_1EDF6A388);
  v17 = sub_18A5F37B4();
  *(_OWORD *)(v17 + 16) = xmmword_18A83B0D0;
  *(_QWORD *)(v17 + 32) = a1;
  v37 = (void *)v17;
  specialized Array._endMutation()();
  sub_18A5F101C((uint64_t *)&unk_1EDF694D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18A83AC30;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = v16;
  sub_18A5F3B04(inited, (unint64_t *)&qword_1ECD967B0);
  sub_18A615ABC();
  v19 = a1;
  v20 = v16;
  v38.is_nil = Dictionary.init(dictionaryLiteral:)();
  v38.value._rawValue = v37;
  CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v21, v38, v39);
  v23 = v22;
  objc_msgSend(v22, sel_setFetchAllChanges_, 0);
  v24 = sub_18A5F37BC();
  *(_QWORD *)(v24 + 16) = MEMORY[0x1E0DEE9E0];
  v25 = sub_18A5F37BC();
  *(_QWORD *)(v25 + 16) = MEMORY[0x1E0DEE9D8];
  v26 = sub_18A5F37BC();
  *(_QWORD *)(v26 + 16) = 0;
  v27 = sub_18A5F37B4();
  *(_BYTE *)(v27 + 16) = 0;
  v28 = sub_18A5F37BC();
  *(_QWORD *)(v28 + 16) = 0;
  sub_18A64A02C();
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter((uint64_t)sub_18A649718);
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter((uint64_t)sub_18A649728, v25);
  v29 = (_QWORD *)sub_18A5F37B4();
  v29[2] = v19;
  v29[3] = v26;
  v29[4] = v27;
  v29[5] = v28;
  v30 = v19;
  swift_retain();
  sub_18A64A54C();
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter((uint64_t)sub_18A649760);
  v31 = (_QWORD *)sub_18A5F37B4();
  v31[2] = a8;
  v31[3] = a9;
  v31[4] = v28;
  v31[5] = v26;
  v31[6] = v24;
  v31[7] = v25;
  v31[8] = v27;
  sub_18A64A02C();
  swift_retain();
  swift_retain();
  sub_18A64A54C();
  swift_retain();
  sub_18A634FA4();
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter((uint64_t)sub_18A6497C8);
  objc_msgSend(v34, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_, v23, a6, a7);

  swift_release();
  swift_release();
  sub_18A64A2FC();
  swift_release();
  return swift_release();
}

uint64_t CKDatabase.recordZoneChanges(inZoneWith:since:desiredKeys:resultsLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_BYTE *)(v6 + 88) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6472C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = sub_18A5F3D50(a1, sel_implementation);
  *(_QWORD *)(v2 + 56) = v3;
  v4 = objc_msgSend(sub_18A5F3D50((uint64_t)v3, sel_container), sel_convenienceConfiguration);
  sub_18A64A554((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 72) = v5;
  *v5 = v2;
  v5[1] = sub_18A647374;
  v6 = sub_18A64A3B0();
  return sub_18A64741C(v6, v7, v8, v9, v10, v11, v1);
}

uint64_t sub_18A647374()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_18A64A1D4();
  sub_18A64A154(v2);
  *(_QWORD *)(v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    v4 = *(void **)(v1 + 56);

    v5 = sub_18A64A25C();
    return sub_18A64A084(v5, v6, v7, v8, v9);
  }
}

uint64_t sub_18A6473EC()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = *(void **)(v0 + 56);

  v2 = (uint64_t (*)(void))sub_18A64A584();
  return sub_18A5F3E50(v2);
}

uint64_t sub_18A64741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = v7;
  *(_QWORD *)(v8 + 72) = a4;
  *(_QWORD *)(v8 + 80) = a6;
  *(_BYTE *)(v8 + 41) = a5;
  *(_QWORD *)(v8 + 56) = a2;
  *(_QWORD *)(v8 + 64) = a3;
  *(_QWORD *)(v8 + 48) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A64743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_BYTE *)(v0 + 41);
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = sub_18A64A50C();
  *(_QWORD *)(v0 + 104) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = v7;
  *(_QWORD *)(v9 + 40) = v6;
  *(_QWORD *)(v9 + 48) = v4;
  *(_BYTE *)(v9 + 56) = v5 & 1;
  *(_QWORD *)(v9 + 64) = v3;
  *(_QWORD *)(v9 + 72) = v2;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v10;
  sub_18A5F101C(&qword_1EDF694C0);
  *v10 = v0;
  v10[1] = sub_18A647514;
  sub_18A634F1C();
  sub_18A5F3840();
  sub_18A634F10();
  return sub_18A64A1B8();
}

uint64_t sub_18A647514()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  sub_18A64A154(&v4);
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A647574()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void CKDatabase.DatabaseChange.Modification.hash(into:)()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSObject.hash(into:)();

}

uint64_t static CKDatabase.DatabaseChange.Deletion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  sub_18A5F3B04(a1, &qword_1EDF6A970);
  return sub_18A64A2D4() & (v2 == v3);
}

void CKDatabase.DatabaseChange.Deletion.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  id v2;

  v1 = *(unsigned __int8 *)(v0 + 8);
  v2 = *(id *)v0;
  sub_18A64A4A8();

  Hasher._combine(_:)(v1);
  sub_18A5F3824();
}

void CKDatabase.DatabaseChange.Deletion.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;

  v1 = *v0;
  sub_18A5F3ED0();
  v2 = v1;
  sub_18A64A160();

  sub_18A5F3A20(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  sub_18A5F4238();
  sub_18A64A3C0();
}

Swift::Int sub_18A6476D8()
{
  uint64_t v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  v1 = *(void **)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  v3 = v1;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _sSo10CKDatabaseC8CloudKitE14DatabaseChangeO12ModificationV2eeoiySbAG_AGtFZ_0(uint64_t a1)
{
  sub_18A5F3B04(a1, &qword_1EDF6A970);
  return sub_18A64A2D4() & 1;
}

void _sSo10CKDatabaseC8CloudKitE14DatabaseChangeO12ModificationV9hashValueSivg_0()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_18A5F3ED0();
  v2 = v1;
  sub_18A64A160();

  sub_18A5F4238();
  sub_18A5F48E8();
}

void sub_18A6477AC()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1;
  sub_18A64A160();

  sub_18A5F4238();
  sub_18A5F48E8();
}

uint64_t static CKDatabase.RecordZoneChange.Deletion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_18A5F3B04(a1, &qword_1EDF6A970);
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.hash(into:)()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_18A64A4A8();

  sub_18A5F3D48();
  String.hash(into:)();
  return sub_18A6239EC();
}

void CKDatabase.RecordZoneChange.Deletion.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_18A5F3ED0();
  v2 = v1;
  sub_18A64A160();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_18A5F4238();
  sub_18A64A3C0();
}

Swift::Int sub_18A647930()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void CKDatabase.DatabaseChange.Modification.description.getter()
{
  void **v0;
  void *v1;
  id v2;
  id v3;
  Swift::String v4;

  v1 = *v0;
  sub_18A64A32C();
  v4._countAndFlagsBits = sub_18A64A314();
  sub_18A628E0C(v4);
  sub_18A5F37E0();
  sub_18A64A2E8();
  v2 = v1;
  v3 = objc_msgSend(v2, sel_description);
  sub_18A61044C();
  sub_18A6292C8();
  sub_18A64A280();

  sub_18A5F460C();
  sub_18A5F485C();
  sub_18A60A0E0();
}

uint64_t CKDatabase.DatabaseChange.Deletion.description.getter()
{
  void **v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  id v4;
  id v5;
  Swift::String v6;

  v1 = *v0;
  _StringGuts.grow(_:)(22);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_18A64A314();
  String.append(_:)(v3);
  sub_18A5F37E0();
  sub_18A64A2E8();
  v4 = v1;
  v5 = objc_msgSend(v4, sel_description);
  sub_18A61044C();
  sub_18A6292C8();
  sub_18A64A280();

  sub_18A5F460C();
  v6._countAndFlagsBits = 0x3D6E6F7361657220;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  sub_18A5F485C();
  return 0;
}

void CKDatabase.RecordZoneChange.Modification.description.getter()
{
  Swift::String v0;
  uint64_t v1;
  id v2;
  Swift::String v3;

  sub_18A64A32C();
  v3._countAndFlagsBits = sub_18A64A314();
  sub_18A628E0C(v3);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = sub_18A64A238() & 0xFFFFFFFFFFFFLL | 0x3D64000000000000;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  v2 = sub_18A5F3D50(v1, sel_conciseDescription);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18A64A280();
  sub_18A5F460C();
  sub_18A5F485C();
  sub_18A60A0E0();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _QWORD v14[2];
  Swift::String v15;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  sub_18A64A32C();
  v15._countAndFlagsBits = sub_18A64A314();
  sub_18A628E0C(v15);
  sub_18A5F460C();
  v4._countAndFlagsBits = sub_18A64A238() & 0xFFFFFFFFFFFFLL | 0x4964000000000000;
  v4._object = (void *)0xEA00000000003D44;
  String.append(_:)(v4);
  v5 = v2;
  v6 = objc_msgSend(v5, sel_description);
  v7 = sub_18A61044C();
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = sub_18A64A238() & 0xFFFFFFFFFFFFLL | 0x5464000000000000;
  v11._object = (void *)0xEC0000003D657079;
  String.append(_:)(v11);
  sub_18A5F3FAC();
  v12._countAndFlagsBits = v1;
  v12._object = v3;
  String.append(_:)(v12);
  sub_18A5F37E0();
  sub_18A5F485C();
  return v14[0];
}

uint64_t sub_18A647CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[2] = a7;
  v16[3] = a8;
  v16[1] = a2;
  v9 = sub_18A5F101C(&qword_1EDF6A098);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_18A644B3C();
  return swift_release();
}

void sub_18A647DF0(void *a1, void *a2, char a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_18A5F40A4();
  v8 = a1;
  sub_18A634B64(a2);
  sub_18A651DA4();
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
  sub_18A651E58(v9);
  v10 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v10 + 16) = v9 + 1;
  v11 = v10 + 24 * v9;
  *(_QWORD *)(v11 + 32) = v8;
  *(_QWORD *)(v11 + 40) = a2;
  *(_BYTE *)(v11 + 48) = a3 & 1;
  sub_18A64A4D4();
  sub_18A634F78();
}

void sub_18A647E80(void *a1, char a2, uint64_t a3, void (*a4)(void *, void *, uint64_t))
{
  uint64_t v6;
  void *v7;
  void *v8;

  v6 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    v7 = 0;
    v8 = a1;
  }
  else
  {
    sub_18A5F46AC();
    v8 = *(void **)(a3 + 16);
    sub_18A6239CC();
    v7 = a1;
  }
  sub_18A634B64(a1);
  a4(v8, v7, v6);
  sub_18A649C70(v8, v7, v6);
  sub_18A634F78();
}

uint64_t sub_18A647F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[2] = a7;
  v15[3] = a8;
  v15[1] = a2;
  v9 = sub_18A5F101C(&qword_1EDF6BBF8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_18A644FA0();
  return swift_release();
}

uint64_t sub_18A64801C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a6;
  v14[1] = a7;
  v8 = sub_18A5F101C(&qword_1EDF6BBF8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_18A645110();
  return swift_release();
}

void sub_18A648128(id a1, void *a2, char a3)
{
  id v3;
  id v4;

  if ((a3 & 1) != 0)
  {
    v4 = a1;
    sub_18A5F101C(&qword_1EDF6BBF8);
    sub_18A64A2C8();
  }
  else
  {
    v3 = a2;
    sub_18A5F3FAC();
    sub_18A5F101C(&qword_1EDF6BBF8);
    sub_18A64A2BC();
  }
  sub_18A5F45D8();
}

SEL *sub_18A648188(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  unint64_t *v4;
  id v6;
  Class isa;

  sub_18A64A1C4();
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18A5F50F0(0, v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, *a4, isa);
  sub_18A6387F0();
  return a4;
}

void sub_18A648208(void *a1, char a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v5;
  void *v6;
  id v7;

  v5 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    v6 = a1;
    v7 = a1;
  }
  else
  {
    sub_18A5F46AC();
    v6 = *(void **)(a3 + 16);
    sub_18A5F3D48();
  }
  a4(v6, v5);
  sub_18A634D80(v6, v5);
  sub_18A634F78();
}

void sub_18A648274(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, id))
{
  id v10;

  sub_18A5F40A4();
  v10 = a1;
  sub_18A64A358();
  a6(a2, a3, v10);
  sub_18A64A4D4();

  sub_18A634F78();
}

void sub_18A6482E4(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, uint64_t))
{
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;

  v6 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v8 = a1;
    v9 = 0;
  }
  else
  {
    sub_18A5F46AC();
    v7 = *(void **)(a3 + 16);
    sub_18A5F46AC();
    v9 = *(_QWORD *)(a4 + 16);
    sub_18A5F3D48();
    sub_18A6239CC();
  }
  a5(v7, v9, v6);
  sub_18A649D6C(v7, v9, v6);
  sub_18A5F3E10();
}

uint64_t sub_18A64837C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a6;
  v14[1] = a7;
  v8 = sub_18A5F101C((uint64_t *)&unk_1EDF6A118);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_18A6459CC();
  return swift_release();
}

void sub_18A648488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;
  uint64_t v27;

  sub_18A64A140();
  v26 = v10;
  v27 = v11;
  v25[2] = v12;
  v25[3] = v13;
  sub_18A64A4B4(v14, v12, v15, v16, v17);
  v19 = sub_18A5F101C(v18);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  MEMORY[0x1E0C80A78](v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v19);
  v22 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v23 + v22, (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  v24 = sub_18A64A4F8();
  a9(v24);
  sub_18A64A254();
  sub_18A5F37E8();
}

void sub_18A648550(void *a1, char a2)
{
  id v2;

  if ((a2 & 1) != 0)
  {
    v2 = a1;
    sub_18A64A230();
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_18A64A230();
    CheckedContinuation.resume(returning:)();
  }
  sub_18A5F45D8();
}

uint64_t sub_18A6485A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_18A64A348();
  sub_18A5F40A4();
  sub_18A6239CC();
  sub_18A64A358();
  a7(v7, a4, v9, v8);
  sub_18A64A4D4();
  return swift_bridgeObjectRelease();
}

void sub_18A648630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;

  sub_18A64A140();
  v27 = v11;
  v28 = v12;
  v26[2] = v13;
  v26[3] = v14;
  sub_18A64A4B4(v15, v13, v16, v17, v18);
  v20 = sub_18A5F101C(v19);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x1E0C80A78](v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v20);
  v23 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v24 + v23, (char *)v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
  v25 = sub_18A64A4F8();
  a10(v25);
  swift_release();
  sub_18A5F37E8();
}

void sub_18A648700(void *a1, uint64_t a2, char a3)
{
  id v3;

  if ((a3 & 1) != 0)
  {
    v3 = a1;
    sub_18A64A230();
    sub_18A64A2C8();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18A64A230();
    sub_18A64A2BC();
  }
  sub_18A60A0E0();
}

uint64_t sub_18A648758(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  v4 = a1;
  sub_18A651DB0();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  sub_18A651E64(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  *(_QWORD *)(v6 + 8 * v5 + 32) = v4;
  return swift_endAccess();
}

void sub_18A6487D8(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_18A648828(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v4 = a1;
  sub_18A651DBC();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  sub_18A651E70(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = v6 + 16 * v5;
  *(_QWORD *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 40) = 0;
  return swift_endAccess();
}

uint64_t sub_18A6488AC(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v4 = a1;
  sub_18A651DBC();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  sub_18A651E70(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = v6 + 16 * v5;
  *(_QWORD *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 40) = 1;
  return swift_endAccess();
}

uint64_t sub_18A648934(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v4 = a1;
  sub_18A651DBC();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  sub_18A651E70(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = v6 + 16 * v5;
  *(_QWORD *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 40) = 2;
  return swift_endAccess();
}

void sub_18A6489BC(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, void *, uint64_t))
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if ((a2 & 0x100) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a1;
  }
  else
  {
    swift_beginAccess();
    v11 = *(void **)(a3 + 16);
    swift_beginAccess();
    v8 = *(_QWORD *)(a4 + 16);
    v10 = a2 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = a1;
  }
  sub_18A6498C4(a1);
  a5(v11, v8, v9, v10 & 0xFFFFFEFF | (((a2 >> 8) & 1) << 8));
  sub_18A6498D0(v11, v8, v9, v10, BYTE1(a2) & 1);
}

uint64_t sub_18A648AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a6;
  v19 = a7;
  v10 = a5 & 1;
  v11 = sub_18A5F101C(&qword_1EDF6A840);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11, v14);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  sub_18A646780(a3, a4, v10, v18, v19, (uint64_t)sub_18A649818, v16);
  return swift_release();
}

void sub_18A648BCC(void *a1, void *a2, char a3)
{
  id v6;

  swift_beginAccess();
  sub_18A634B64(a2);
  v6 = a1;
  sub_18A69E564((uint64_t)a2, a3 & 1, (uint64_t)v6);
  swift_endAccess();

}

void sub_18A648C50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  swift_beginAccess();
  v8 = a1;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  sub_18A651DC8();
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
  sub_18A651E7C(v10);
  v11 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v11 + 16) = v10 + 1;
  v12 = (_QWORD *)(v11 + 24 * v10);
  v12[4] = v9;
  v12[5] = a2;
  v12[6] = a3;
  swift_endAccess();
  swift_bridgeObjectRelease();

}

void sub_18A648D08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;

  sub_18A5F50F0(0, &qword_1EDF6A970);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
  {
    if ((a5 & 0x100) != 0)
    {
      swift_beginAccess();
      v16 = *(void **)(a9 + 16);
      *(_QWORD *)(a9 + 16) = a2;
      v17 = a2;

    }
    else
    {
      v13 = (_QWORD *)(a7 + 16);
      swift_beginAccess();
      v14 = *(void **)(a7 + 16);
      *v13 = a2;
      v15 = a2;

      swift_beginAccess();
      *(_BYTE *)(a8 + 16) = a5 & 1;
    }
  }
}

void sub_18A648E08(void *a1, char a2, void (*a3)(void *, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v14;
  id v15;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;

  if ((a2 & 1) != 0)
  {
    v17 = a1;
    a3(a1, 0, 0, 256);
    sub_18A60A664(a1, 1);
  }
  else
  {
    swift_beginAccess();
    v14 = *(void **)(a5 + 16);
    if (v14)
    {
      v15 = v14;
      a3(v14, 0, 0, 256);

    }
    else
    {
      swift_beginAccess();
      v18 = *(void **)(a6 + 16);
      if (v18)
      {
        swift_beginAccess();
        v19 = *(void **)(a7 + 16);
        swift_beginAccess();
        v20 = *(_QWORD *)(a8 + 16);
        swift_beginAccess();
        v21 = *(unsigned __int8 *)(a9 + 16);
        v22 = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a3(v19, v20, v18, v21);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for CKError(0);
        sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
        sub_18A615B0C();
        _BridgedStoredNSError.init(_:userInfo:)();
        a3(v23, 0, 0, 256);

      }
    }
  }
}

uint64_t sub_18A649008(uint64_t a1, uint64_t a2, void *a3, void *a4, Swift::Int a5, NSData *a6, char a7, uint64_t a8, uint64_t a9)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  NSData *v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v24 = a8;
  v22 = a6;
  v13 = a7 & 1;
  v14 = sub_18A5F101C(&qword_1EDF694C8);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v19 + v18, v17, v14);
  sub_18A646FA4(a3, a4, a5, v22, v13, v24, a9, (uint64_t)sub_18A6496C4, v19);
  return swift_release();
}

uint64_t sub_18A649128(void *a1, uint64_t a2, void *a3, __int16 a4)
{
  id v5;
  id v7;

  if ((a4 & 0x100) != 0)
  {
    v7 = a1;
    sub_18A64A230();
    return sub_18A64A2C8();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_18A5F3D48();
    v5 = a3;
    sub_18A64A230();
    return sub_18A64A2BC();
  }
}

unint64_t sub_18A6491A4()
{
  unint64_t result;

  result = qword_1EDF6BB90;
  if (!qword_1EDF6BB90)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDatabase.DatabaseChange.Deletion.Reason, &type metadata for CKDatabase.DatabaseChange.Deletion.Reason);
    atomic_store(result, (unint64_t *)&qword_1EDF6BB90);
  }
  return result;
}

unint64_t sub_18A6491E4()
{
  unint64_t result;

  result = qword_1EDF69458;
  if (!qword_1EDF69458)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDatabase.DatabaseChange.Modification, &type metadata for CKDatabase.DatabaseChange.Modification);
    atomic_store(result, (unint64_t *)&qword_1EDF69458);
  }
  return result;
}

unint64_t sub_18A649224()
{
  unint64_t result;

  result = qword_1EDF6BB98;
  if (!qword_1EDF6BB98)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDatabase.DatabaseChange.Deletion, &type metadata for CKDatabase.DatabaseChange.Deletion);
    atomic_store(result, (unint64_t *)&qword_1EDF6BB98);
  }
  return result;
}

unint64_t sub_18A649264()
{
  unint64_t result;

  result = qword_1EDF6BBA0;
  if (!qword_1EDF6BBA0)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDatabase.RecordZoneChange.Modification, &type metadata for CKDatabase.RecordZoneChange.Modification);
    atomic_store(result, (unint64_t *)&qword_1EDF6BBA0);
  }
  return result;
}

unint64_t sub_18A6492A4()
{
  unint64_t result;

  result = qword_1EDF6BBA8;
  if (!qword_1EDF6BBA8)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDatabase.RecordZoneChange.Deletion, &type metadata for CKDatabase.RecordZoneChange.Deletion);
    atomic_store(result, (unint64_t *)&qword_1EDF6BBA8);
  }
  return result;
}

void type metadata accessor for CKDatabase.DatabaseChange()
{
  sub_18A5F3994();
}

void type metadata accessor for CKDatabase.DatabaseChange.Modification()
{
  sub_18A5F3994();
}

uint64_t _s14DatabaseChangeO8DeletionVwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t _s14DatabaseChangeO8DeletionVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t _s14DatabaseChangeO8DeletionVwtk(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t _s14DatabaseChangeO8DeletionVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t _s14DatabaseChangeO8DeletionVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14DatabaseChangeO8DeletionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CKDatabase.DatabaseChange.Deletion()
{
  sub_18A5F3994();
}

uint64_t _s14DatabaseChangeO8DeletionV6ReasonOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18A6494D4 + 4 * byte_18A83B0E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18A649508 + 4 * byte_18A83B0E0[v4]))();
}

uint64_t sub_18A649508(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A649510(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A649518);
  return result;
}

uint64_t sub_18A649524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A64952CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18A649530(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A649538(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CKDatabase.DatabaseChange.Deletion.Reason()
{
  sub_18A5F3994();
}

void type metadata accessor for CKDatabase.RecordZoneChange()
{
  sub_18A5F3994();
}

void type metadata accessor for CKDatabase.RecordZoneChange.Modification()
{
  sub_18A5F3994();
}

uint64_t _s16RecordZoneChangeO8DeletionVwxx(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *_s16RecordZoneChangeO8DeletionVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  sub_18A5F3898();
  return a1;
}

uint64_t _s16RecordZoneChangeO8DeletionVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16RecordZoneChangeO8DeletionVwta(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKDatabase.RecordZoneChange.Deletion()
{
  sub_18A5F3994();
}

void type metadata accessor for CKDatabase.RecordZoneChange.ZoneAttributesModification()
{
  sub_18A5F3994();
}

void sub_18A649688(uint64_t a1)
{
  uint64_t v1;

  sub_18A649008(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(NSData **)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
  sub_18A64A24C();
}

uint64_t sub_18A6496B8()
{
  return sub_18A649E00(&qword_1EDF694C8);
}

uint64_t sub_18A6496C4()
{
  return sub_18A649824();
}

uint64_t sub_18A6496D0()
{
  uint64_t v0;

  sub_18A64A458();
  return swift_deallocObject();
}

uint64_t sub_18A6496EC()
{
  return swift_deallocObject();
}

uint64_t sub_18A6496FC()
{
  uint64_t v0;

  sub_18A64A458();
  return swift_deallocObject();
}

void sub_18A649718()
{
  void *v0;
  void *v1;
  char v2;

  sub_18A64A4C8();
  sub_18A648BCC(v0, v1, v2);
}

void sub_18A649728(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A648C50(a1, a2, a3, v3);
}

uint64_t sub_18A649730()
{
  uint64_t v0;

  sub_18A64A524();
  sub_18A64A51C();
  sub_18A64A514();
  return swift_deallocObject();
}

void sub_18A649760(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t *v5;

  sub_18A648D08(a1, a2, a3, a4, a5 & 0x1FF, v5[2], v5[3], v5[4], v5[5]);
  sub_18A64A24C();
}

uint64_t sub_18A649788()
{
  sub_18A64A524();
  sub_18A64A51C();
  sub_18A64A514();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_18A6497C8(void *a1, char a2)
{
  uint64_t v2;

  sub_18A648E08(a1, a2 & 1, *(void (**)(void *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
  sub_18A64A24C();
}

uint64_t sub_18A6497F8(uint64_t a1)
{
  uint64_t v1;

  return sub_18A648AC0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_18A64980C()
{
  return sub_18A649E00(&qword_1EDF6A840);
}

uint64_t sub_18A649818()
{
  return sub_18A649824();
}

uint64_t sub_18A649824()
{
  void *v0;
  uint64_t v1;
  void *v2;
  __int16 v3;
  __int16 v4;
  uint64_t *v5;

  sub_18A64A1C4();
  v4 = v3 & 0x1FF;
  sub_18A5F101C(v5);
  sub_18A64A4DC();
  return sub_18A649128(v2, v1, v0, v4);
}

uint64_t sub_18A649888(void *a1)
{
  uint64_t v1;

  return sub_18A648758(a1, v1);
}

uint64_t sub_18A649890(void *a1)
{
  uint64_t v1;

  return sub_18A648828(a1, v1);
}

uint64_t sub_18A649898(void *a1)
{
  uint64_t v1;

  return sub_18A6488AC(a1, v1);
}

uint64_t sub_18A6498A0(void *a1)
{
  uint64_t v1;

  return sub_18A648934(a1, v1);
}

void sub_18A6498AC(void *a1, __int16 a2)
{
  uint64_t v2;

  sub_18A6489BC(a1, a2 & 0x1FF, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void *, uint64_t, void *, uint64_t))(v2 + 32));
}

id sub_18A6498C4(id a1)
{
  return a1;
}

void sub_18A6498D0(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

void sub_18A649910(uint64_t a1)
{
  sub_18A649DBC(a1, (uint64_t)&qword_1EDF69450, (uint64_t)&unk_1E1F5C9E0, (uint64_t)sub_18A649940, (void (*)(uint64_t))sub_18A6461B0);
}

uint64_t sub_18A649934()
{
  return sub_18A649E00(&qword_1EDF69450);
}

void sub_18A649940(void *a1, uint64_t a2, char a3)
{
  sub_18A649A60(a1, a2, a3, &qword_1EDF69450);
}

uint64_t sub_18A64994C()
{
  swift_bridgeObjectRelease();
  sub_18A64A458();
  return swift_deallocObject();
}

uint64_t sub_18A649968(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_18A6485A8(a1, a2, a3, a4 & 1, v4, (uint64_t)sub_18A634E30, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18A69E4A4);
}

uint64_t sub_18A649994(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_18A6485A8(a1, a2, a3, a4 & 1, v4, (uint64_t)sub_18A6499C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18A69E4B8);
}

id sub_18A6499C8(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

void sub_18A6499D4(uint64_t a1)
{
  uint64_t *v1;

  sub_18A648488(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&qword_1EDF6BBE0, (uint64_t)&unk_1E1F5CA80, (uint64_t)sub_18A649A24, (void (*)(uint64_t))sub_18A645E78);
  sub_18A64A24C();
}

uint64_t sub_18A649A18()
{
  return sub_18A649E00(&qword_1EDF6BBE0);
}

void sub_18A649A24(void *a1, char a2)
{
  sub_18A649B68(a1, a2, &qword_1EDF6BBE0);
}

uint64_t sub_18A649A34(uint64_t a1)
{
  uint64_t v1;

  return sub_18A64837C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_18A649A48()
{
  return sub_18A649E00((uint64_t *)&unk_1EDF6A118);
}

void sub_18A649A54(void *a1, uint64_t a2, char a3)
{
  sub_18A649A60(a1, a2, a3, (uint64_t *)&unk_1EDF6A118);
}

void sub_18A649A60(void *a1, uint64_t a2, char a3, uint64_t *a4)
{
  char v6;

  v6 = a3 & 1;
  sub_18A5F101C(a4);
  sub_18A64A380();
  sub_18A648700(a1, a2, v6);
}

void sub_18A649AB8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A64A4C8();
  sub_18A648274(v0, v1, v2, v3, (uint64_t)sub_18A634B64, (void (*)(uint64_t, uint64_t, id))sub_18A69E48C);
}

void sub_18A649AE0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A64A4C8();
  sub_18A648274(v0, v1, v2, v3, (uint64_t)sub_18A6499C8, (void (*)(uint64_t, uint64_t, id))sub_18A69E498);
}

void sub_18A649B0C(uint64_t a1)
{
  uint64_t *v1;

  sub_18A648488(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)qword_1EDF69390, (uint64_t)&unk_1E1F5CB70, (uint64_t)sub_18A649B5C, (void (*)(uint64_t))sub_18A645684);
  sub_18A64A24C();
}

uint64_t sub_18A649B50()
{
  return sub_18A649E00(qword_1EDF69390);
}

void sub_18A649B5C(void *a1, char a2)
{
  sub_18A649B68(a1, a2, qword_1EDF69390);
}

void sub_18A649B68(void *a1, char a2, uint64_t *a3)
{
  char v4;

  v4 = a2 & 1;
  sub_18A5F101C(a3);
  sub_18A64A4DC();
  sub_18A648550(a1, v4);
  sub_18A5F3824();
}

uint64_t sub_18A649BB0(uint64_t a1)
{
  uint64_t *v1;

  return sub_18A64801C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_18A649BC0()
{
  return sub_18A649E00(&qword_1EDF6BBF8);
}

void sub_18A649BD0(void *a1, void *a2, char a3)
{
  char v5;

  v5 = a3 & 1;
  sub_18A5F101C(&qword_1EDF6BBF8);
  sub_18A64A380();
  sub_18A648128(a1, a2, v5);
  sub_18A5F3824();
}

uint64_t sub_18A649C14(uint64_t a1)
{
  uint64_t *v1;

  return sub_18A647F08(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_18A649C28()
{
  return sub_18A649E00(&qword_1EDF6BBF8);
}

void sub_18A649C34()
{
  void *v0;
  void *v1;
  char v2;
  uint64_t v3;

  sub_18A64A4C8();
  sub_18A647DF0(v0, v1, v2, v3);
}

void sub_18A649C50(void *a1, char a2)
{
  uint64_t v2;

  sub_18A647E80(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(void *, void *, uint64_t))(v2 + 24));
}

void sub_18A649C70(void *a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_18A649CA0(uint64_t a1)
{
  uint64_t v1;

  return sub_18A647CDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_18A649CB4()
{
  return sub_18A649E00(&qword_1EDF6A098);
}

void sub_18A649CC0(void *a1, uint64_t a2, char a3)
{
  sub_18A649A60(a1, a2, a3, &qword_1EDF6A098);
}

void sub_18A649CCC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A64A4C8();
  sub_18A648274(v0, v1, v2, v3, (uint64_t)sub_18A634E30, (void (*)(uint64_t, uint64_t, id))sub_18A69E474);
}

void sub_18A649CF4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A64A4C8();
  sub_18A648274(v0, v1, v2, v3, (uint64_t)sub_18A6499C8, (void (*)(uint64_t, uint64_t, id))sub_18A69E480);
}

uint64_t sub_18A649D20()
{
  swift_release();
  sub_18A64A524();
  sub_18A64A514();
  return swift_deallocObject();
}

void sub_18A649D4C(void *a1, char a2)
{
  uint64_t v2;

  sub_18A6482E4(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void *, uint64_t, uint64_t))(v2 + 32));
}

void sub_18A649D6C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_18A649D98(uint64_t a1)
{
  sub_18A649DBC(a1, (uint64_t)&qword_1EDF6BC08, (uint64_t)&unk_1E1F5CD28, (uint64_t)sub_18A649E58, (void (*)(uint64_t))sub_18A644744);
}

void sub_18A649DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t *v5;

  sub_18A648630(a1, v5[2], v5[3], v5[4], v5[5], v5[6], a2, a3, a4, a5);
  sub_18A64A24C();
}

uint64_t sub_18A649DF4()
{
  return sub_18A649E00(&qword_1EDF6BC08);
}

uint64_t sub_18A649E00(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_18A5F101C(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  sub_18A6406BC();
  return swift_deallocObject();
}

void sub_18A649E58(void *a1, char a2)
{
  sub_18A649B68(a1, a2, &qword_1EDF6BC08);
}

uint64_t sub_18A649E68()
{
  swift_release();
  sub_18A64A51C();
  return swift_deallocObject();
}

void sub_18A649E90(void *a1, char a2)
{
  uint64_t v2;

  sub_18A648208(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(void *, uint64_t))(v2 + 24));
}

uint64_t sub_18A649F50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_18A649F60()
{
  return swift_release();
}

uint64_t sub_18A649F78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

void sub_18A649FA0()
{
  sub_18A630F40();
}

id sub_18A649FB0()
{
  void *v0;

  return objc_msgSend(v0, sel_container);
}

uint64_t sub_18A649FC0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A649FD4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A649FE8()
{
  return swift_retain();
}

uint64_t sub_18A649FF0()
{
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18A649FF8()
{
  return swift_continuation_await();
}

uint64_t sub_18A64A008()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_18A64A018()
{
  return swift_task_alloc();
}

uint64_t sub_18A64A02C()
{
  return swift_retain();
}

uint64_t sub_18A64A034()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A64A05C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A64A084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_18A64A08C(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;

}

uint64_t sub_18A64A098()
{
  return swift_getObjectType();
}

uint64_t sub_18A64A0A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A64A0C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A64A0E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A64A104()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_18A64A118@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

_QWORD *sub_18A64A130(_QWORD *result)
{
  _QWORD *v1;

  *result = *v1;
  result[1] = v1;
  return result;
}

void sub_18A64A154(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_18A64A160()
{
  return NSObject.hash(into:)();
}

uint64_t sub_18A64A16C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_18A645BE4(a1, a2, a3, a4, a5);
}

void sub_18A64A17C()
{
  uint64_t v0;

}

id sub_18A64A188(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18A64A194@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_18A64A1B8()
{
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

void sub_18A64A1D4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

id sub_18A64A20C()
{
  void *v0;

  return v0;
}

uint64_t sub_18A64A214@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void sub_18A64A228()
{
  void *v0;

}

uint64_t sub_18A64A230()
{
  uint64_t *v0;

  return sub_18A5F101C(v0);
}

uint64_t sub_18A64A238()
{
  return 0x726F63657220;
}

uint64_t sub_18A64A254()
{
  return swift_release();
}

uint64_t sub_18A64A25C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A64A278()
{
  return swift_task_alloc();
}

void sub_18A64A280()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_18A64A28C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_18A64A2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 16) = a2;
  return swift_retain();
}

void sub_18A64A2B0()
{
  id *v0;

}

uint64_t sub_18A64A2BC()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_18A64A2C8()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_18A64A2D4()
{
  return static NSObject.== infix(_:_:)();
}

void sub_18A64A2E8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x3D656E6F7A20;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
}

uint64_t sub_18A64A2FC()
{
  return swift_release();
}

void sub_18A64A304()
{
  uint64_t v0;

}

uint64_t sub_18A64A314()
{
  return _typeName(_:qualified:)();
}

uint64_t sub_18A64A33C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t sub_18A64A358()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  char v1;
  uint64_t v2;

  return v0(v2, v1 & 1);
}

__n128 sub_18A64A398(uint64_t a1)
{
  uint64_t v1;
  __n128 *v2;
  __n128 result;

  result = v2[2];
  *(_QWORD *)(a1 + 16) = v1;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void sub_18A64A3A8()
{
  uint64_t v0;

}

uint64_t sub_18A64A3B0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_18A64A3D0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

void sub_18A64A440()
{
  const void *v0;

  _Block_release(v0);
}

id sub_18A64A448(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(v2, a2, v3, v4);
}

uint64_t sub_18A64A458()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A64A468()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_18A64A48C()
{
  uint64_t v0;

  return v0;
}

id sub_18A64A4A0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_18A64A4A8()
{
  return NSObject.hash(into:)();
}

void sub_18A64A4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 - 104) = a5;
}

uint64_t sub_18A64A4D4()
{
  return swift_endAccess();
}

void sub_18A64A4F0()
{
  uint64_t v0;

}

uint64_t sub_18A64A4F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A64A50C()
{
  return swift_task_alloc();
}

uint64_t sub_18A64A514()
{
  return swift_release();
}

uint64_t sub_18A64A51C()
{
  return swift_release();
}

uint64_t sub_18A64A524()
{
  return swift_release();
}

void sub_18A64A52C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_18A64A540()
{
  uint64_t v0;

}

uint64_t sub_18A64A54C()
{
  return swift_retain();
}

void sub_18A64A554(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;

}

void sub_18A64A560(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;

}

id sub_18A64A56C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_18A64A578()
{
  uint64_t v0;

}

uint64_t sub_18A64A584()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_18A64A590()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void sub_18A64A59C()
{
  void *v0;

}

void __swiftcall CKQuerySubscription.init(recordType:predicate:subscriptionID:options:)(CKQuerySubscription *__return_ptr retstr, Swift::String recordType, NSPredicate *predicate, Swift::String subscriptionID, CKQuerySubscriptionOptions options)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;

  object = subscriptionID._object;
  countAndFlagsBits = subscriptionID._countAndFlagsBits;
  v9 = recordType._object;
  v10 = recordType._countAndFlagsBits;
  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v12 = (void *)MEMORY[0x18D76C7CC](v10, v9);
  swift_bridgeObjectRelease();
  v13 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_initWithRecordType_predicate_subscriptionID_options_, v12, predicate, v13, options);

}

uint64_t CKQuerySubscription.recordType.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_recordType);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void __swiftcall CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(CKModifySubscriptionsOperation *__return_ptr retstr, Swift::OpaquePointer_optional subscriptionsToSave, Swift::OpaquePointer_optional subscriptionIDsToDelete)
{
  uint64_t v3;
  void *rawValue;
  id v5;
  void *v6;
  id v7;
  NSArray v8;
  id v9;
  NSArray v10;

  v3 = *(_QWORD *)&subscriptionsToSave.is_nil;
  rawValue = subscriptionsToSave.value._rawValue;
  v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v6 = v5;
  if (rawValue)
  {
    sub_18A64A794();
    v7 = v6;
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v5;
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setSubscriptionsToSave_, v8.super.isa);

  if (v3)
  {
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.isa = 0;
  }
  objc_msgSend(v6, sel_setSubscriptionIDsToDelete_, v10.super.isa);

}

unint64_t sub_18A64A794()
{
  unint64_t result;

  result = qword_1EDF6A9D0;
  if (!qword_1EDF6A9D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDF6A9D0);
  }
  return result;
}

void CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A659864, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A5F3964();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setPerSubscriptionSaveBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerSubscriptionSaveBlock_);
  }
}

void CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A64B22C, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A5F3964();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setPerSubscriptionDeleteBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerSubscriptionDeleteBlock_);
  }
}

void CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A64B520, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A60A614((uint64_t)v2);
    swift_retain();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setModifySubscriptionsCompletionBlock_);
    sub_18A5F3838();
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setModifySubscriptionsCompletionBlock_);
  }
}

uint64_t CKModifySubscriptionsOperation.subscriptionIDsToDelete.getter()
{
  void *v0;

  return sub_18A64BBC8(v0);
}

void sub_18A64AA0C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(v0);
}

void CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, sel_setSubscriptionIDsToDelete_, isa);

}

void CKModifySubscriptionsOperation.subscriptionIDsToDelete.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  *a1 = sub_18A64BBC8(v1);
  sub_18A5F379C();
}

void sub_18A64AAC8(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKModifySubscriptionsOperation.subscriptionIDsToDelete.setter(*a1);
    sub_18A5F379C();
  }
}

void CKModifySubscriptionsOperation.perSubscriptionSaveBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perSubscriptionSaveBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A64BC40;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A64AB84(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKModifySubscriptionsOperation.perSubscriptionSaveBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BD3C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A64ABE8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A64BD00;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter((uint64_t)v4);
}

void sub_18A64AC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  id v10;

  v8 = (void *)MEMORY[0x18D76C7CC]();
  if (a4)
    v9 = _convertErrorToNSError(_:)();
  else
    v9 = 0;
  v10 = (id)v9;
  (*(void (**)(uint64_t, void *, uint64_t))(a5 + 16))(a5, v8, a3);

}

void sub_18A64ACDC(uint64_t a1, uint64_t a2, id a3, char a4, void (*a5)(uint64_t, uint64_t, id, id))
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  if ((a4 & 1) != 0)
  {
    v9 = a3;
    v10 = a1;
    v11 = a2;
    v12 = 0;
    v13 = a3;
  }
  else
  {
    v14 = a3;
    v10 = a1;
    v11 = a2;
    v12 = a3;
    v13 = 0;
  }
  a5(v10, v11, v12, v13);
  sub_18A615B4C(a3);
}

void sub_18A64AD5C(uint64_t a1, uint64_t a2, void *a3, id a4, void (*a5)(uint64_t, uint64_t, id, uint64_t))
{
  id v9;
  id v11;
  void *v12;

  if (a4)
  {
    v9 = a4;
    a5(a1, a2, a4, 1);

  }
  else if (a3)
  {
    v11 = a3;
    a5(a1, a2, a3, 0);

  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    a5(a1, a2, v12, 1);

  }
}

uint64_t sub_18A64AE84()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A64AEA8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  sub_18A64AD5C(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, id, uint64_t))(v4 + 16));
}

uint64_t sub_18A64AEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A64AEC0()
{
  return swift_release();
}

void CKModifySubscriptionsOperation.perSubscriptionSaveBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifySubscriptionsOperation.perSubscriptionSaveBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A64AEF4(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perSubscriptionDeleteBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A64BC54;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A64AF8C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BD0C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A64AFF0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A64BD00;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter((uint64_t)v4);
}

uint64_t sub_18A64B070(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(_QWORD *, uint64_t *))
{
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = a3;
  v7 = a4 & 1;
  return a5(v8, &v6);
}

void sub_18A64B0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;

  v6 = (void *)MEMORY[0x18D76C7CC]();
  if (a3)
    v7 = _convertErrorToNSError(_:)();
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v6);

}

void sub_18A64B11C(uint64_t a1, uint64_t a2, id a3, char a4, void (*a5)(uint64_t, uint64_t, id))
{
  id v9;

  if ((a4 & 1) != 0)
  {
    v9 = a3;
    a5(a1, a2, a3);
    sub_18A60A664(a3, 1);
  }
  else
  {
    a5(a1, a2, 0);
  }
}

void sub_18A64B1A0(uint64_t a1, uint64_t a2, id a3, void (*a4)(uint64_t, uint64_t, id, uint64_t))
{
  id v8;

  if (a3)
  {
    v8 = a3;
    a4(a1, a2, a3, 1);

  }
  else
  {
    a4(a1, a2, 0, 0);
  }
}

void sub_18A64B224(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_18A64B1A0(a1, a2, a3, *(void (**)(uint64_t, uint64_t, id, uint64_t))(v3 + 16));
}

void sub_18A64B22C(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, uint64_t, void *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  swift_retain();
  v8 = a3;
  v4(v5, v7, a3);
  swift_release();
  swift_bridgeObjectRelease();

}

void CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A64B2D4(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_modifySubscriptionsCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A64B34C(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BCD4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A64B3B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
  }
  sub_18A60A614(v1);
  CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.setter();
}

uint64_t sub_18A64B430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t *, uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a1;
  v5 = a3;
  return a4(&v7, &v6, &v5);
}

void CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.setter()
{
  sub_18A64B758();
}

void sub_18A64B478(objc_class *a1, Class a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v8;
  id v9;

  isa = a1;
  if (a1)
  {
    sub_18A64A794();
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    a2 = Array._bridgeToObjectiveC()().super.isa;
  if (a3)
    v8 = _convertErrorToNSError(_:)();
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);

}

uint64_t sub_18A64B520(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void *);
  id v8;

  v6 = a2;
  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A64A794();
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A64B5F0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifySubscriptionsOperation.modifySubscriptionsCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_modifySubscriptionsCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A64B668(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BCD4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A64B6CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
  }
  sub_18A60A614(v1);
  CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter();
}

void CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter()
{
  sub_18A64B758();
}

void sub_18A64B758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  sub_18A5F4578();
  if (v2)
  {
    v4[4] = v1;
    v4[5] = v0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 1107296256;
    v4[2] = sub_18A64B520;
    v4[3] = v3;
    _Block_copy(v4);
    sub_18A5F3964();
    v2 = sub_18A5F438C();
  }
  sub_18A5F37C8(v2, sel_setModifySubscriptionsCompletionBlock_);
  sub_18A5F3AA8();
  sub_18A5F3838();
  sub_18A5F3DE4();
}

void CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A64B804(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_modifySubscriptionsCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A64BDB4;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A64B89C(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A64B900(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter((uint64_t)v4);
}

void sub_18A64B980(void *a1, char a2, void (*a3)(_QWORD, _QWORD, void *))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    a3(0, 0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    a3(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0);
  }
}

void sub_18A64BAC4(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void *, uint64_t))
{
  id v6;
  id v7;

  if (!a3)
    goto LABEL_4;
  swift_getErrorValue();
  v6 = a3;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a4(0, 0);
    return;
  }
  v7 = a3;
  a4(a3, 1);

}

void sub_18A64BB78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_18A64BAC4(a1, a2, a3, *(void (**)(void *, uint64_t))(v3 + 16));
}

void CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A64BBAC(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A64BBC8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_subscriptionIDsToDelete);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18A64BC1C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A64BC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_18A64AC68(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

void sub_18A64BC48(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;

  sub_18A64ACDC(a1, a2, a3, a4 & 1, *(void (**)(uint64_t, uint64_t, id, id))(v4 + 16));
}

void sub_18A64BC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A64B0B0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A64BC5C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;

  sub_18A64B11C(a1, a2, a3, a4 & 1, *(void (**)(uint64_t, uint64_t, id))(v4 + 16));
}

void sub_18A64BC68(objc_class *a1, objc_class *a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A64B478(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A64BC70(void *a1, char a2)
{
  uint64_t v2;

  sub_18A64B980(a1, a2 & 1, *(void (**)(_QWORD, _QWORD, void *))(v2 + 16));
}

void sub_18A64BC7C(uint64_t *a1@<X8>)
{
  *a1 = CKModifySubscriptionsOperation.subscriptionIDsToDelete.getter();
  sub_18A5F379C();
}

uint64_t sub_18A64BCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_18A64B430(a1, a2, a3, *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *))(v3 + 16));
}

void sub_18A64BCD8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16))(*a1, *a2, *a3);
  sub_18A5F379C();
}

uint64_t sub_18A64BD00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_18A64B070(a1, a2, a3, a4 & 1, *(uint64_t (**)(_QWORD *, uint64_t *))(v4 + 16));
}

void sub_18A64BD0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  sub_18A5F379C();
}

void sub_18A64BD3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A659830(a1, a2, *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16));
}

void sub_18A64BDB8(uint64_t a1, unint64_t a2)
{
  sub_18A612FA0(a1, a2);
  sub_18A64BF2C(1, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_18A64BE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_18A5F48F4();
  sub_18A5F479C(v1, v0 & 0xFFFFFFFFFFFFLL, BYTE6(v0));
  sub_18A5F3EDC();
  return v3;
}

void sub_18A64BF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x18A64C068);
}

void sub_18A64C098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_18A64C0F4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const UInt8 *v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD v8[16];

  v8[3] = v8;
  sub_18A612FA0(v2, v1);
  return sub_18A64C6BC(v0, v5 & 0xFFFFFFFFFFFFLL, BYTE6(v5), v4, v3, v2, v1, v0, v5, v6);
}

void *sub_18A64C2CC(const UInt8 *a1, uint64_t a2, const UInt8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  const __CFAllocator *v11;
  CFIndex v12;
  CFDataRef v13;
  CFIndex v14;
  CFDataRef v15;
  void *result;
  const __CFData *v17;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = Data.count.getter();
  v13 = CFDataCreate(v11, a3, v12);
  v14 = Data.count.getter();
  v15 = CFDataCreate(v11, a1, v14);
  result = (void *)PCSCopyUnwrappedKey();
  if (result)
  {
    v17 = result;
    BytePtr = CFDataGetBytePtr(v17);
    Length = CFDataGetLength(v17);

    v20 = sub_18A616358((uint64_t)BytePtr, Length);
    v22 = v21;

    v23 = *a9;
    v24 = a9[1];
    *a9 = v20;
    a9[1] = v22;
    return (void *)sub_18A60FBA4(v23, v24);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18A64C3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = __DataStorage._bytes.getter();
  v14 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v14 += a1 - result;
  }
  v15 = __OFSUB__(a2, a1);
  v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  v17 = __DataStorage._length.getter();
  if (v17 >= v16)
    v18 = v16;
  else
    v18 = v17;
  v19 = v14 + v18;
  if (v14)
    v20 = v19;
  else
    v20 = 0;
  sub_18A64C098(v14, v20, a4, a5);
  sub_18A60FBA4(a4, a5);
  return sub_18A60FBA4(a6, a7);
}

uint64_t sub_18A64C4AC(uint64_t a1, uint64_t a2, uint64_t a3, const UInt8 *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10)
{
  uint64_t result;
  const UInt8 *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const UInt8 *v22;
  uint64_t v23;

  result = __DataStorage._bytes.getter();
  v17 = (const UInt8 *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v17 += a1 - result;
  }
  v18 = __OFSUB__(a2, a1);
  v19 = a2 - a1;
  if (v18)
  {
    __break(1u);
    goto LABEL_13;
  }
  v20 = __DataStorage._length.getter();
  if (v20 >= v19)
    v21 = v19;
  else
    v21 = v20;
  v22 = &v17[v21];
  if (v17)
    v23 = (uint64_t)v22;
  else
    v23 = 0;
  sub_18A64C2CC(v17, v23, a4, a5, a6, a7, a8, a9, a10);
  sub_18A60FBA4(a6, a7);
  return sub_18A60FBA4(a8, a9);
}

uint64_t sub_18A64C5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = a2;
  v14 = BYTE2(a2);
  v15 = BYTE3(a2);
  v16 = BYTE4(a2);
  v17 = BYTE5(a2);
  sub_18A64C098((uint64_t)&v12, (uint64_t)&v12 + a3, a4, a5);
  sub_18A60FBA4(a4, a5);
  return sub_18A60FBA4(a6, a7);
}

uint64_t sub_18A64C6BC(uint64_t a1, uint64_t a2, uint64_t a3, const UInt8 *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10)
{
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = a1;
  v15 = a2;
  v16 = BYTE2(a2);
  v17 = BYTE3(a2);
  v18 = BYTE4(a2);
  v19 = BYTE5(a2);
  sub_18A64C2CC((const UInt8 *)&v14, (uint64_t)&v14 + a3, a4, a5, a6, a7, a8, a9, a10);
  sub_18A60FBA4(a6, a7);
  return sub_18A60FBA4(a8, a9);
}

uint64_t sub_18A64C7DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x18A64C838);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_18A64C7F4 + dword_18A64C83C[a4 >> 62]))(v5);
}

uint64_t sub_18A64C84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;

  v9 = sub_18A64C8D0(a1, a3, a4, a5);
  if (a2 <= 0)
  {
    if (v9 <= 0 && v9 > a2)
      return 0;
  }
  else if ((v9 & 0x8000000000000000) == 0 && v9 < (unint64_t)a2)
  {
    return 0;
  }
  return sub_18A64C7DC(a1, a2, a4, a5);
}

uint64_t sub_18A64C8D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_18A64C8E4 + dword_18A64C98C[a4 >> 62]))();
}

uint64_t sub_18A64C900(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;

  if (v1 >= a1)
  {
    v5 = __OFSUB__(0, a1);
    v3 = a1 == 0;
    v4 = -a1 < 0;
  }
  else
  {
    v5 = 0;
    v3 = 0;
    v4 = 0;
  }
  if (!(v4 ^ v5 | v3))
  {
    __break(1u);
    JUMPOUT(0x18A64C984);
  }
  return ((uint64_t (*)(void))((char *)&loc_18A64C938 + dword_18A64C99C[v2]))();
}

uint64_t sub_18A64C9AC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A612FA0(v1, v0);
}

CloudKit::CKDeviceCapability::Level_optional __swiftcall CKDeviceCapability.Level.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4)
    LOBYTE(v2) = 3;
  *v1 = v2;
  return (CloudKit::CKDeviceCapability::Level_optional)rawValue;
}

void __swiftcall CKDeviceCapability.init(level:name:value:)(CloudKit::CKDeviceCapability *__return_ptr retstr, CloudKit::CKDeviceCapability::Level level, Swift::String name, Swift::String value)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  CloudKit::CKDeviceCapability::Level v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;

  object = value._object;
  countAndFlagsBits = value._countAndFlagsBits;
  v6 = name._object;
  v7 = name._countAndFlagsBits;
  v9 = *(_BYTE *)level;
  v10 = 128;
  while (1)
  {
    sub_18A6291A0();
    v11 = sub_18A60F9A4(v10, v7, (unint64_t)v6);
    v12 = MEMORY[0x18D76C928](v11);
    if (v13)
      break;
    if (!--v10)
    {
      sub_18A5F3A8C();
      v14 = 0;
      v15 = (void *)0xE000000000000000;
      goto LABEL_6;
    }
  }
  v14 = v12;
  v15 = v13;
  sub_18A5F3A8C();
LABEL_6:
  v16 = 128;
  while (1)
  {
    sub_18A5F3898();
    v17 = sub_18A60F9A4(v16, countAndFlagsBits, (unint64_t)object);
    v18 = MEMORY[0x18D76C928](v17);
    if (v19)
      break;
    if (!--v16)
    {
      sub_18A5F37A4();
      v20 = 0;
      v21 = (void *)0xE000000000000000;
      goto LABEL_11;
    }
  }
  v20 = v18;
  v21 = v19;
  sub_18A5F37A4();
LABEL_11:
  retstr->level = v9;
  retstr->name._countAndFlagsBits = v14;
  retstr->name._object = v15;
  retstr->value._countAndFlagsBits = v20;
  retstr->value._object = v21;
  sub_18A5F37E8();
}

uint64_t CKDeviceCapability.Level.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

void CKDeviceCapabilityCheckOptions.init()(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  Class isa;
  uint64_t v14;
  char v15;

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v14 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  v11 = sub_18A5F40B4();
  sub_18A5F1010((uint64_t)v10, 1, 1, v11);
  v15 = 0;
  sub_18A64FAE8((uint64_t)v10, (uint64_t)v8);
  sub_18A65426C((uint64_t)v8);
  if (sub_18A5F105C((uint64_t)v5, 1, v11) == 1)
  {
    sub_18A654228();
    v12 = 0;
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18A654228();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v5, v11);
    v12 = v15;
  }
  sub_18A6541C8();
  *(_BYTE *)a1 = v12;
  *(_QWORD *)(a1 + 8) = isa;
  sub_18A5F3814();
}

void CKDeviceCapabilityCheckOptions.init(excludeDevicesWithoutCapabilityCheckingSupport:excludeZoneAccessBefore:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  Class isa;
  uint64_t v15;
  char v16;

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  v16 = a1;
  sub_18A64FAE8(a2, (uint64_t)&v15 - v10);
  sub_18A64FAE8((uint64_t)v11, (uint64_t)v9);
  v12 = sub_18A5F40B4();
  if (sub_18A5F105C((uint64_t)v9, 1, v12) == 1)
  {
    v13 = a1 & 1;
    sub_18A64FB30((uint64_t)v11);
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18A64FB30((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
    v13 = v16;
  }
  sub_18A6541C8();
  *(_BYTE *)a3 = v13;
  *(_QWORD *)(a3 + 8) = isa;
  sub_18A5F3814();
}

void static CKDeviceCapabilityCheckOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  if (*a1 == *a2)
  {
    v2 = (void *)*((_QWORD *)a1 + 1);
    v3 = (void *)*((_QWORD *)a2 + 1);
    if (v2)
    {
      if (v3)
      {
        sub_18A5F3B04((uint64_t)a1, &qword_1EDF6B060);
        v4 = v3;
        v5 = v2;
        static NSObject.== infix(_:_:)();

      }
    }
  }
  sub_18A5F3824();
}

CloudKit::CKDeviceCapabilityCheckResult __swiftcall CKDeviceCapabilityCheckResult.init(isSupported:)(CloudKit::CKDeviceCapabilityCheckResult isSupported)
{
  CloudKit::CKDeviceCapabilityCheckResult *v1;

  v1->isSupported = isSupported.isSupported;
  return isSupported;
}

void sub_18A64CDB8(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
  sub_18A5F379C();
}

void sub_18A64CDD8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_18A64CE18()
{
  String.hash(into:)();
  return sub_18A5F3FF4();
}

uint64_t sub_18A64CE84()
{
  String.hash(into:)();
  return sub_18A5F3FF4();
}

void sub_18A64CED8(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2 + 1);
  sub_18A5F379C();
}

uint64_t static CKDeviceCapability.MaxUTF8Bytes.getter()
{
  return 128;
}

void sub_18A64CF04()
{
  sub_18A66D55C();
}

void sub_18A64CF0C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_18A64CED8(a1, *v1);
}

void sub_18A64CF14()
{
  sub_18A66D5B8();
}

CloudKit::CKDeviceCapability::Level_optional sub_18A64CF1C(Swift::Int *a1)
{
  return CKDeviceCapability.Level.init(rawValue:)(*a1);
}

void sub_18A64CF24(uint64_t *a1@<X8>)
{
  *a1 = CKDeviceCapability.Level.rawValue.getter();
  sub_18A5F379C();
}

void CKDeviceCapability.level.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CKDeviceCapability.level.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CKDeviceCapability.level.modify())()
{
  return nullsub_3;
}

void CKDeviceCapability.name.getter()
{
  sub_18A5F3898();
  sub_18A5F379C();
}

uint64_t sub_18A64CF90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A64CF9C()
{
  swift_bridgeObjectRetain();
  return CKDeviceCapability.name.setter();
}

uint64_t CKDeviceCapability.name.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A614630();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v0;
  return sub_18A64D008();
}

uint64_t sub_18A64D008()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    v4 = sub_18A60F9A4(v3, v2, v1);
    v5 = MEMORY[0x18D76C928](v4);
    if (v6)
      break;
    if (!--v3)
    {
      result = swift_bridgeObjectRelease();
      v8 = 0;
      v9 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  v8 = v5;
  v9 = v6;
  result = swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(v0 + 8) = v8;
  *(_QWORD *)(v0 + 16) = v9;
  return result;
}

uint64_t (*CKDeviceCapability.name.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A64D09C;
}

uint64_t sub_18A64D09C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_18A64D008();
  return result;
}

void CKDeviceCapability.value.getter()
{
  sub_18A5F3898();
  sub_18A5F379C();
}

uint64_t sub_18A64D0E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A64D0F0()
{
  swift_bridgeObjectRetain();
  return CKDeviceCapability.value.setter();
}

uint64_t CKDeviceCapability.value.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A614630();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v0;
  return sub_18A64D15C();
}

uint64_t sub_18A64D15C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    v4 = sub_18A60F9A4(v3, v2, v1);
    v5 = MEMORY[0x18D76C928](v4);
    if (v6)
      break;
    if (!--v3)
    {
      result = swift_bridgeObjectRelease();
      v8 = 0;
      v9 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  v8 = v5;
  v9 = v6;
  result = swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(v0 + 24) = v8;
  *(_QWORD *)(v0 + 32) = v9;
  return result;
}

uint64_t (*CKDeviceCapability.value.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A64D1F0;
}

uint64_t sub_18A64D1F0(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_18A64D15C();
  return result;
}

BOOL CKDeviceCapability.isEmpty.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = v0[2];
  v2 = v0[1] & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (!v2)
    return 1;
  v3 = v0[4];
  if ((v3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v3) & 0xF;
  else
    v4 = v0[3] & 0xFFFFFFFFFFFFLL;
  return v4 == 0;
}

uint64_t CKDeviceCapability.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
  sub_18A5F3D48();
  String.hash(into:)();
  sub_18A5F460C();
  sub_18A6291A0();
  sub_18A654260();
  return swift_bridgeObjectRelease();
}

void static CKDeviceCapability.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
    && ((v2 = a1[3], v3 = a1[4], v4 = a2[3], v5 = a2[4], a1[1] == a2[1]) ? (v6 = a1[2] == a2[2]) : (v6 = 0),
        (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && (v2 == v4 ? (v7 = v3 == v5) : (v7 = 0), !v7)))
  {
    sub_18A6542D8();
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    sub_18A5F3824();
  }
}

Swift::Int CKDeviceCapability.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_18A5F3ED0();
  Hasher._combine(_:)(v1 + 1);
  sub_18A5F40AC();
  String.hash(into:)();
  sub_18A5F3944();
  sub_18A6239CC();
  String.hash(into:)();
  sub_18A5F3FE4();
  return sub_18A5F4238();
}

Swift::Int sub_18A64D3DC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t static CKDeviceCapability.compare(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(unsigned __int8 *)a1;
  v3 = *(unsigned __int8 *)a2;
  if (v2 != v3)
    return v2 < v3;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v8 || (sub_18A6542F4(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v4 == v6 && v5 == v7)
      return 0;
    sub_18A6542D8();
  }
  else
  {
    sub_18A6542F4();
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t CKDeviceCapabilitySet.capabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A64D52C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CKDeviceCapabilitySet.capabilities.getter();
  *a1 = result;
  return result;
}

void sub_18A64D564()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKDeviceCapabilitySet.capabilities.setter(v0);
}

void CKDeviceCapabilitySet.capabilities.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_18A64D5C0(a1);
  sub_18A5F37E0();
  swift_bridgeObjectRelease();
  *v1 = v2;
  sub_18A5F3824();
}

uint64_t sub_18A64D5C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  sub_18A6183E8();
  v3 = v2;
  v27 = a1;
  swift_bridgeObjectRetain();
  sub_18A651BC8(&v27);
  v4 = v27;
  v5 = *(_QWORD *)(v27 + 16);
  if (!v5)
  {
    v7 = v3;
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = (unint64_t *)(v4 + 64);
  v7 = v3;
  do
  {
    v8 = *((unsigned __int8 *)v6 - 32);
    v10 = *(v6 - 3);
    v9 = *(v6 - 2);
    v12 = *(v6 - 1);
    v11 = *v6;
    v13 = *(_QWORD *)(v7 + 16);
    if (!v13)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_18A60FA88(0, 0, 0);
      sub_18A60FA88(v8, v10, v9);
      goto LABEL_18;
    }
    v14 = (_QWORD *)(v7 + 40 * v13);
    if (*((unsigned __int8 *)v14 - 8) != (_DWORD)v8
      || ((v15 = v14[2], v16 = v14[3], *v14 == v10) ? (v17 = v14[1] == v9) : (v17 = 0),
          !v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      v20 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v20 = v10 & 0xFFFFFFFFFFFFLL;
      if (v20)
      {
        v21 = HIBYTE(v11) & 0xF;
        if ((v11 & 0x2000000000000000) == 0)
          v21 = v12 & 0xFFFFFFFFFFFFLL;
        if (v21)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_18A6183E8();
            v7 = v24;
          }
          v22 = *(_QWORD *)(v7 + 16);
          if (v22 >= *(_QWORD *)(v7 + 24) >> 1)
          {
            sub_18A6183E8();
            v7 = v25;
          }
          *(_QWORD *)(v7 + 16) = v22 + 1;
          v23 = v7 + 40 * v22;
          *(_BYTE *)(v23 + 32) = v8;
          *(_QWORD *)(v23 + 40) = v10;
          *(_QWORD *)(v23 + 48) = v9;
          *(_QWORD *)(v23 + 56) = v12;
          *(_QWORD *)(v23 + 64) = v11;
        }
      }
      goto LABEL_30;
    }
    if (v15 == v12 && v16 == v11)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v19 & 1) == 0)
      goto LABEL_18;
LABEL_30:
    v6 += 5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  swift_release();
LABEL_33:
  swift_release();
  return v7;
}

uint64_t sub_18A64D864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  dispatch thunk of Collection.count.getter();
  sub_18A6183E8();
  v1 = v0;
  v2 = Sequence.sorted(by:)();
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    v5 = v1;
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = (unint64_t *)(v2 + 64);
  v5 = v1;
  do
  {
    v6 = *((unsigned __int8 *)v4 - 32);
    v8 = *(v4 - 3);
    v7 = *(v4 - 2);
    v10 = *(v4 - 1);
    v9 = *v4;
    v11 = *(_QWORD *)(v5 + 16);
    if (!v11)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_18A60FA88(0, 0, 0);
      sub_18A60FA88(v6, v8, v7);
      goto LABEL_18;
    }
    v12 = (_QWORD *)(v5 + 40 * v11);
    if (*((unsigned __int8 *)v12 - 8) != (_DWORD)v6
      || ((v13 = v12[2], v14 = v12[3], *v12 == v8) ? (v15 = v12[1] == v7) : (v15 = 0),
          !v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      v18 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v18 = v8 & 0xFFFFFFFFFFFFLL;
      if (v18)
      {
        v19 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0)
          v19 = v10 & 0xFFFFFFFFFFFFLL;
        if (v19)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_18A6183E8();
            v5 = v22;
          }
          v20 = *(_QWORD *)(v5 + 16);
          if (v20 >= *(_QWORD *)(v5 + 24) >> 1)
          {
            sub_18A6183E8();
            v5 = v23;
          }
          *(_QWORD *)(v5 + 16) = v20 + 1;
          v21 = v5 + 40 * v20;
          *(_BYTE *)(v21 + 32) = v6;
          *(_QWORD *)(v21 + 40) = v8;
          *(_QWORD *)(v21 + 48) = v7;
          *(_QWORD *)(v21 + 56) = v10;
          *(_QWORD *)(v21 + 64) = v9;
        }
      }
      goto LABEL_30;
    }
    if (v13 == v10 && v14 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v17 & 1) == 0)
      goto LABEL_18;
LABEL_30:
    v4 += 5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRelease();
  return v5;
}

void CKDeviceCapabilitySet.capabilities.modify(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  sub_18A5F379C();
}

void sub_18A64DB44(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[1];
  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = swift_bridgeObjectRetain();
    v5 = sub_18A64D5C0(v4);
    sub_18A5F37E0();
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = sub_18A64D5C0(v3);
    sub_18A5F37E0();
    swift_bridgeObjectRelease();
    *v2 = v6;
    sub_18A5F3824();
  }
}

BOOL sub_18A64DBB0(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;

  v2 = *(unsigned __int8 *)a1;
  v3 = *(unsigned __int8 *)a2;
  if (v2 != v3)
    return v2 < v3;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a1[1] == a2[1] && a1[2] == a2[2];
  if ((v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && (v4 == v6 ? (v9 = v5 == v7) : (v9 = 0), v9))
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

CloudKit::CKDeviceCapabilitySet __swiftcall CKDeviceCapabilitySet.init()()
{
  _QWORD *v0;
  CloudKit::CKDeviceCapabilitySet result;

  *v0 = MEMORY[0x1E0DEE9D8];
  return result;
}

void CKDeviceCapabilitySet.init<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  v6 = sub_18A64D864();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  sub_18A5F3824();
}

void CKDeviceCapabilitySet.subscript.getter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = *a1;
    sub_18A5F3FAC();
    v5 = (uint64_t *)(v2 + 64);
    v6 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*((unsigned __int8 *)v5 - 32) == v4)
      {
        v8 = *(v5 - 3);
        v7 = *(v5 - 2);
        v9 = *(v5 - 1);
        v10 = *v5;
        sub_18A5F40AC();
        sub_18A5F3D48();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_18A654194();
        v12 = *(_QWORD *)(v6 + 16);
        v11 = *(_QWORD *)(v6 + 24);
        if (v12 >= v11 >> 1)
        {
          sub_18A654214(v11);
          sub_18A654194();
        }
        *(_QWORD *)(v6 + 16) = v12 + 1;
        v13 = v6 + 40 * v12;
        *(_BYTE *)(v13 + 32) = v4;
        *(_QWORD *)(v13 + 40) = v8;
        *(_QWORD *)(v13 + 48) = v7;
        *(_QWORD *)(v13 + 56) = v9;
        *(_QWORD *)(v13 + 64) = v10;
      }
      v5 += 5;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  sub_18A654308();
}

void sub_18A64DDE4(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  v4 = *a2;
  v7 = *a1;
  v6 = v4;
  CKDeviceCapabilitySet.subscript.getter(&v6);
  *a3 = v5;
}

uint64_t sub_18A64DE28(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned __int8 v5;

  v5 = *a3;
  v3 = swift_bridgeObjectRetain();
  return CKDeviceCapabilitySet.subscript.setter(v3, &v5);
}

uint64_t CKDeviceCapabilitySet.subscript.setter(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 32;
    v6 = *(_QWORD *)(a1 + 16);
    while (*(unsigned __int8 *)(a1 + v5) == v3)
    {
      v5 += 40;
      if (!--v6)
        goto LABEL_5;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    v7 = *v2;
    v8 = *(_QWORD *)(*v2 + 16);
    v28 = a1;
    v27 = v2;
    if (v8)
    {
      sub_18A5F3FAC();
      v9 = (uint64_t *)(v7 + 64);
      v10 = MEMORY[0x1E0DEE9D8];
      do
      {
        v11 = *((unsigned __int8 *)v9 - 32);
        if (v11 != v3)
        {
          v12 = *(v9 - 2);
          v13 = *v9;
          v29 = *(v9 - 1);
          v30 = *(v9 - 3);
          sub_18A6239CC();
          sub_18A6291A0();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_18A654194();
          v15 = *(_QWORD *)(v10 + 16);
          v14 = *(_QWORD *)(v10 + 24);
          if (v15 >= v14 >> 1)
          {
            sub_18A654214(v14);
            sub_18A654194();
          }
          *(_QWORD *)(v10 + 16) = v15 + 1;
          v16 = v10 + 40 * v15;
          *(_BYTE *)(v16 + 32) = v11;
          *(_QWORD *)(v16 + 40) = v30;
          *(_QWORD *)(v16 + 48) = v12;
          *(_QWORD *)(v16 + 56) = v29;
          *(_QWORD *)(v16 + 64) = v13;
        }
        v9 += 5;
        --v8;
      }
      while (v8);
      sub_18A5F37E0();
      a1 = v28;
    }
    else
    {
      v10 = MEMORY[0x1E0DEE9D8];
    }
    if (v4)
    {
      v18 = (uint64_t *)(a1 + 64);
      v19 = MEMORY[0x1E0DEE9D8];
      do
      {
        if (*((unsigned __int8 *)v18 - 32) == v3)
        {
          v20 = *(v18 - 2);
          v31 = *(v18 - 3);
          v21 = *(v18 - 1);
          v22 = *v18;
          sub_18A6291A0();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_18A654194();
          v24 = *(_QWORD *)(v19 + 16);
          v23 = *(_QWORD *)(v19 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_18A654214(v23);
            sub_18A654194();
          }
          *(_QWORD *)(v19 + 16) = v24 + 1;
          v25 = v19 + 40 * v24;
          *(_BYTE *)(v25 + 32) = v3;
          *(_QWORD *)(v25 + 40) = v31;
          *(_QWORD *)(v25 + 48) = v20;
          *(_QWORD *)(v25 + 56) = v21;
          *(_QWORD *)(v25 + 64) = v22;
        }
        v18 += 5;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v19 = MEMORY[0x1E0DEE9D8];
    }
    sub_18A64E0D0(v19);
    v26 = sub_18A64D5C0(v10);
    sub_18A5F37E0();
    result = sub_18A5F37A4();
    *v27 = v26;
  }
  return result;
}

void sub_18A64E0D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(_QWORD *)(v3 + 24) >> 1)
  {
    sub_18A6183E8();
    v3 = v6;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18A652324();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_18A64E1AC(uint64_t a1)
{
  sub_18A64E1D4(a1, (uint64_t (*)(void))sub_18A618558);
}

void sub_18A64E1C0(uint64_t a1)
{
  sub_18A64E1D4(a1, (uint64_t (*)(void))sub_18A6185A0);
}

void sub_18A64E1D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_18A6541D8() || v6 + v4 > *(_QWORD *)(v5 + 24) >> 1)
  {
    sub_18A654274();
    v5 = a2();
  }
  if (!*(_QWORD *)(v2 + 16))
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v5 + 24) >> 1) - *(_QWORD *)(v5 + 16) < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18A652150();
  if (!v4)
  {
LABEL_11:
    sub_18A5F37E0();
    *v3 = v5;
    sub_18A5F3800();
    return;
  }
  v8 = *(_QWORD *)(v5 + 16);
  v9 = __OFADD__(v8, v4);
  v10 = v8 + v4;
  if (!v9)
  {
    *(_QWORD *)(v5 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_18A64E2A0(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    sub_18A5F3FAC();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F37E0();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    sub_18A5F3D48();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F460C();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    sub_18A5F3D48();
    v4 = MEMORY[0x18D76CEBC](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = sub_18A653550(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    sub_18A5F3D48();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F460C();
  }
  if (v11 < 1)
    goto LABEL_20;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_20:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

void sub_18A64E438()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_18A654290();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_18A6541D8() || (v6 = *(_QWORD *)(v2 + 24) >> 1, v6 < v4))
  {
    sub_18A654274();
    sub_18A618338();
    v2 = v7;
    v6 = *(_QWORD *)(v7 + 24) >> 1;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  if (v6 - *(_QWORD *)(v2 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18A6521DC();
  if (!v3)
  {
LABEL_11:
    sub_18A5F37E0();
    *v1 = v2;
    sub_18A5F3814();
    return;
  }
  v8 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v8, v3);
  v9 = v8 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_18A64E4F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_18A654290();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_18A6541D8() || (v6 = *(_QWORD *)(v2 + 24) >> 1, v6 < v4))
  {
    sub_18A654274();
    sub_18A618498(v7, v8, v9, v10);
    v2 = v11;
    v6 = *(_QWORD *)(v11 + 24) >> 1;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  if (v6 - *(_QWORD *)(v2 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_18A652298();
  if (!v3)
  {
LABEL_11:
    sub_18A5F37E0();
    *v1 = v2;
    sub_18A5F3814();
    return;
  }
  v12 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v12, v3);
  v13 = v12 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void (*CKDeviceCapabilitySet.subscript.modify(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, char a2)
{
  uint64_t *v2;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = v2;
  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *a2;
  v8 = *v2;
  v7 = v4;
  CKDeviceCapabilitySet.subscript.getter(&v7);
  *(_QWORD *)a1 = v5;
  return sub_18A64E60C;
}

void sub_18A64E60C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)a1;
  if ((a2 & 1) != 0)
  {
    v4 = *(_BYTE *)(a1 + 16);
    v3 = sub_18A5F3FAC();
    CKDeviceCapabilitySet.subscript.setter(v3, &v4);
    sub_18A6541BC();
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 16);
    CKDeviceCapabilitySet.subscript.setter(v2, &v5);
    sub_18A5F45D8();
  }
}

Swift::Void __swiftcall CKDeviceCapabilitySet.insert(_:)(CloudKit::CKDeviceCapability *a1)
{
  uint64_t *v1;
  CloudKit::CKDeviceCapability::Level level;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  level = a1->level;
  countAndFlagsBits = a1->name._countAndFlagsBits;
  object = a1->name._object;
  v6 = a1->value._countAndFlagsBits;
  v5 = a1->value._object;
  sub_18A5F3FAC();
  sub_18A5F40AC();
  sub_18A651DEC((uint64_t (*)(void))sub_18A6183E8);
  v7 = *(_QWORD *)(*v1 + 16);
  sub_18A651EA0(v7, (uint64_t (*)(BOOL))sub_18A6183E8);
  v8 = *v1;
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = v8 + 40 * v7;
  *(_BYTE *)(v9 + 32) = level;
  *(_QWORD *)(v9 + 40) = countAndFlagsBits;
  *(_QWORD *)(v9 + 48) = object;
  *(_QWORD *)(v9 + 56) = v6;
  *(_QWORD *)(v9 + 64) = v5;
  v10 = sub_18A5F3D48();
  v11 = sub_18A64D5C0(v10);
  sub_18A654258();
  *v1 = v11;
  sub_18A5F3800();
}

void CKDeviceCapabilitySet.insert<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_18A5F101C(&qword_1EDF6BC18);
  Array.append<A>(contentsOf:)();
  v4 = sub_18A5F3FAC();
  v5 = sub_18A64D5C0(v4);
  sub_18A654258();
  *v1 = v5;
  sub_18A5F3824();
}

void CKDeviceCapabilitySet.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    sub_18A5F3FAC();
    v3 = v1 + 64;
    do
    {
      Hasher._combine(_:)(*(unsigned __int8 *)(v3 - 32) + 1);
      swift_bridgeObjectRetain_n();
      sub_18A629140();
      sub_18A654260();
      sub_18A5F3A8C();
      sub_18A629140();
      String.hash(into:)();
      sub_18A5F3A8C();
      sub_18A654258();
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18A5F37E8();
  }
}

uint64_t static CKDeviceCapabilitySet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_18A64E860(*a1, *a2);
}

uint64_t sub_18A64E860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    for (i = 0; ; i += 40)
    {
      v6 = (_QWORD *)(a1 + i);
      v7 = (_QWORD *)(a2 + i);
      if (*(unsigned __int8 *)(a1 + i + 32) != *(unsigned __int8 *)(a2 + i + 32))
        break;
      v8 = v6[7];
      v9 = v6[8];
      v10 = v7[7];
      v11 = v7[8];
      v12 = v6[5] == v7[5] && v6[6] == v7[6];
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v13 = v8 == v10 && v9 == v11;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_18A64E938(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t i;
  _BOOL8 v16;
  id v17;
  id v18;

  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    sub_18A5F40AC();
    v6 = sub_18A623AB0();
    sub_18A5F3944();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    sub_18A5F3FAC();
    v7 = sub_18A623AB0();
    sub_18A5F37E0();
  }
  else
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 == v7)
  {
    if (!v6)
      return 1;
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a1 < 0)
      v8 = a1;
    if (v5)
      v9 = v8;
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
    v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0)
      v10 = a2;
    if ((unint64_t)a2 >> 62)
      v11 = v10;
    if (v9 == v11)
      return 1;
    if (v6 < 0)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      sub_18A6541D0();
    }
    sub_18A612E64(0, (a1 & 0xC000000000000001) == 0, a1);
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_34;
    v12 = *(id *)(a1 + 32);
    sub_18A612E64(0, (a2 & 0xC000000000000001) == 0, a2);
    if ((a2 & 0xC000000000000001) != 0)
      sub_18A5F398C();
    v13 = *(id *)(a2 + 32);
    sub_18A5F3B04((uint64_t)v13, (unint64_t *)&qword_1ECD967B0);
    sub_18A654208();
    sub_18A6542EC();

    if ((v2 & 1) != 0)
    {
      v14 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v16 = v14 + i == 5;
        if (v14 + i == 5)
          return v16;
        if ((unint64_t)(i - 4) >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        v17 = *(id *)(a1 + 8 * i);
        if ((unint64_t)(i - 4) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_32;
        v18 = *(id *)(a2 + 8 * i);
        sub_18A654208();
        sub_18A6542EC();

        if ((v2 & 1) == 0)
          return v16;
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  return 0;
}

uint64_t sub_18A64EB6C(uint64_t a1, uint64_t a2)
{
  id v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  v5 = (id)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
    goto LABEL_31;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if ((unint64_t)a2 >> 62)
    {
      sub_18A5F3FAC();
      v7 = sub_18A623AB0();
      sub_18A5F37E0();
    }
    else
    {
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v6 != v7)
      break;
    if (!v6)
      goto LABEL_21;
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v8 = a1;
    if (!v5)
      v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v9 = a2 & 0xFFFFFFFFFFFFFF8;
    v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0)
      v9 = a2;
    if ((unint64_t)a2 >> 62)
      v10 = v9;
    if (v8 == v10)
    {
LABEL_21:
      v12 = 1;
      return v12 & 1;
    }
    if (v6 < 0)
      goto LABEL_34;
    if ((a1 & 0xC000000000000001) != 0)
LABEL_35:
      sub_18A6541D0();
    v5 = *(id *)(a1 + 32);
    sub_18A612E64(0, (a2 & 0xC000000000000001) == 0, a2);
    if ((a2 & 0xC000000000000001) != 0)
      sub_18A5F398C();
    v11 = *(id *)(a2 + 32);
    sub_18A5F3B04((uint64_t)v11, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A654208();
    sub_18A6542EC();

    if ((v2 & 1) == 0)
      break;
    if (v6 == 1)
      goto LABEL_21;
    v14 = 5;
    while (v14 - 4 < v6)
    {
      v5 = *(id *)(a1 + 8 * v14);
      if ((unint64_t)(v14 - 4) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v2 = *(id *)(a2 + 8 * v14);
      v12 = static NSObject.== infix(_:_:)();

      if ((v12 & 1) != 0)
      {
        v15 = 2 - v6 + v14++;
        if (v15 != 5)
          continue;
      }
      return v12 & 1;
    }
    __break(1u);
LABEL_31:
    sub_18A5F40AC();
    v6 = sub_18A623AB0();
    sub_18A5F3944();
  }
  v12 = 0;
  return v12 & 1;
}

void CKDeviceCapabilitySet.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v2[72];

  v1 = *v0;
  sub_18A5F3ED0();
  sub_18A5F3FAC();
  sub_18A65348C((uint64_t)v2, v1);
  sub_18A5F37E0();
  sub_18A5F4238();
  sub_18A654308();
}

Swift::Int sub_18A64EDD8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_18A65348C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t CKDeviceCapabilitySet.startIndex.getter()
{
  return 0;
}

uint64_t CKDeviceCapabilitySet.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

BOOL CKDeviceCapabilitySet.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

unint64_t CKDeviceCapabilitySet.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = *(_QWORD *)v2 + 40 * result;
    v5 = *(_QWORD *)(v3 + 40);
    v4 = *(_QWORD *)(v3 + 48);
    v6 = *(_QWORD *)(v3 + 56);
    v7 = *(_QWORD *)(v3 + 64);
    *(_BYTE *)a2 = *(_BYTE *)(v3 + 32);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

unint64_t sub_18A64EEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  unint64_t result;

  v3 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > *(_QWORD *)(a3 + 16))
LABEL_5:
    __break(1u);
  return result;
}

unint64_t sub_18A64EED4(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = a3 - result;
  if (a2 < 1)
  {
    if (v6 <= 0)
    {
      v9 = __OFSUB__(v6, a2);
      v7 = v6 == a2;
      v8 = v6 - a2 < 0;
    }
    else
    {
      v9 = 0;
      v7 = 1;
      v8 = 0;
    }
    if (!(v8 ^ v9 | v7))
      return 0;
  }
  else if ((v6 & 0x8000000000000000) == 0 && v6 < (unint64_t)a2)
  {
    return 0;
  }
  v9 = __OFADD__(result, a2);
  result += a2;
  if (v9)
    goto LABEL_18;
  if (result > v4)
LABEL_19:
    __break(1u);
  return result;
}

unint64_t sub_18A64EF38(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3 >= result && v3 >= a2)
    return a2 - result;
  __break(1u);
  return result;
}

unint64_t sub_18A64EF54@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t result;

  result = sub_18A64EF80(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t sub_18A64EF80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unint64_t result;

  v2 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result >= *(_QWORD *)(a2 + 16))
LABEL_5:
    __break(1u);
  return result;
}

unint64_t *sub_18A64EFA0(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_18A64EFCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;
  unint64_t result;

  result = sub_18A64EEB0(*a1, a2, *v3);
  *a3 = result;
  return result;
}

unint64_t sub_18A64EFF8(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v2;

  return sub_18A64EF38(*a1, *a2, *v2);
}

void sub_18A64F008(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_18A64F010(uint64_t *a1@<X8>)
{
  *a1 = CKDeviceCapabilitySet.endIndex.getter();
  sub_18A5F379C();
}

void sub_18A64F030()
{
  unint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_18A614630();
  v2 = sub_18A654288();
  *v1 = v2;
  sub_18A64F094(v2, *v0);
  v2[4] = v3;
  sub_18A5F3824();
}

void sub_18A64F06C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  sub_18A6541E4(v1);
}

void sub_18A64F094(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = sub_18A654288();
  *a1 = v5;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = v5;
    v7 = *(_QWORD *)v2 + 40 * a2;
    v9 = *(_QWORD *)(v7 + 40);
    v8 = *(_QWORD *)(v7 + 48);
    v10 = *(_QWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 64);
    *(_BYTE *)v6 = *(_BYTE *)(v7 + 32);
    v6[1] = v9;
    v6[2] = v8;
    v6[3] = v10;
    v6[4] = v11;
    swift_bridgeObjectRetain();
    sub_18A5F3898();
    sub_18A5F3824();
    return;
  }
  __break(1u);
}

void sub_18A64F114(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  sub_18A5F37A4();
  sub_18A6541E4(v1);
}

uint64_t sub_18A64F140@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_18A64F150(*a1, a1[1], *v2, a2);
}

uint64_t sub_18A64F150@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (result < 0 || *(_QWORD *)(a3 + 16) < a2)
  {
    __break(1u);
  }
  else
  {
    a4[1] = a2;
    a4[2] = a3;
    *a4 = result;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18A64F174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_18A64F19C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18A64F19C()
{
  return 0;
}

void sub_18A64F1AC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void sub_18A64F1BC(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  char v6;

  *(_QWORD *)a4 = sub_18A64EED4(*a1, a2, *a3, *v4);
  *(_BYTE *)(a4 + 8) = v6 & 1;
  sub_18A5F379C();
}

uint64_t sub_18A64F1F0(uint64_t *a1, uint64_t *a2)
{
  return sub_18A64F204(*a1, *a2, a2[1]);
}

uint64_t sub_18A64F204(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  BOOL v4;

  if (result >= a2)
  {
    v4 = __OFSUB__(result, a3);
    v3 = result - a3 < 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  if (v3 == v4)
    __break(1u);
  return result;
}

uint64_t sub_18A64F218(uint64_t *a1, uint64_t *a2)
{
  return sub_18A64F22C(*a1, *a2, a2[1]);
}

uint64_t sub_18A64F22C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result)
    __break(1u);
  return result;
}

uint64_t sub_18A64F240(uint64_t *a1, uint64_t *a2)
{
  return sub_18A64F258(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_18A64F258(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2)
    __break(1u);
  return result;
}

void sub_18A64F26C(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_18A64F294(*a1, *v2);
  sub_18A5F379C();
}

unint64_t sub_18A64F294(unint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) <= result)
    __break(1u);
  else
    ++result;
  return result;
}

_QWORD *sub_18A64F2AC(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)v1 + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_18A64F2D0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_18A64F2DC()
{
  uint64_t *v0;

  return sub_18A64F2E4(*v0);
}

uint64_t sub_18A64F2E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18A64F2EC()
{
  uint64_t *v0;

  return sub_18A64F2F4(*v0);
}

_QWORD *sub_18A64F2F4(uint64_t a1)
{
  _QWORD *v1;

  v1 = sub_18A666840(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_18A64F324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_18A6A9E48(a1, a2, a3, *v3);
}

uint64_t CKDeviceCapabilitySet.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  sub_18A6183E8();
  v4 = v3;
  v80 = *(_QWORD *)(a1 + 16);
  if (!v80)
    goto LABEL_81;
  v5 = 0;
  v81 = a1 + 32;
  v79 = a1;
  while (2)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
LABEL_88:
      __break(1u);
LABEL_89:
      sub_18A5F41C8();
      sub_18A5F3D24();
      result = sub_18A5F46D4();
      __break(1u);
      return result;
    }
    v6 = (char *)(v81 + 16 * v5);
    v89 = *v6;
    v7 = *((_QWORD *)v6 + 1);
    v82 = v5 + 1;
    v84 = v7 + 64;
    v8 = 1 << *(_BYTE *)(v7 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v7 + 64);
    v85 = (unint64_t)(v8 + 63) >> 6;
    sub_18A5F40AC();
    v11 = 0;
    v83 = v7;
    if (v10)
    {
LABEL_8:
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_86;
      if (v14 >= v85)
        break;
      v15 = *(_QWORD *)(v84 + 8 * v14);
      ++v11;
      if (v15)
        goto LABEL_22;
      v11 = v14 + 1;
      if (v14 + 1 >= v85)
        break;
      v15 = *(_QWORD *)(v84 + 8 * v11);
      if (v15)
        goto LABEL_22;
      v11 = v14 + 2;
      if (v14 + 2 >= v85)
        break;
      v15 = *(_QWORD *)(v84 + 8 * v11);
      if (v15)
        goto LABEL_22;
      v16 = v14 + 3;
      if (v16 >= v85)
        break;
      v15 = *(_QWORD *)(v84 + 8 * v16);
      if (!v15)
      {
        while (1)
        {
          v11 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_87;
          if (v11 >= v85)
            goto LABEL_80;
          v15 = *(_QWORD *)(v84 + 8 * v11);
          ++v16;
          if (v15)
            goto LABEL_22;
        }
      }
      v11 = v16;
LABEL_22:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_23:
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13);
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        v86 = v10;
        v87 = v11;
        v88 = v4;
        v19 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v13);
        v20 = *v19;
        v21 = v19[1];
        v102 = MEMORY[0x1E0DEE9D8];
        sub_18A6542A4();
        sub_18A5F3FAC();
        sub_18A61007C();
        v22 = 0;
        v23 = v102;
        v90 = v17 + 32;
        if ((v21 & 0x2000000000000000) != 0)
          v24 = HIBYTE(v21) & 0xF;
        else
          v24 = v20 & 0xFFFFFFFFFFFFLL;
        v97 = v24;
        v25 = (v24 << 16) | 0xB;
        v96 = (v24 << 16) | 7;
        if ((v20 & 0x800000000000000) != 0)
          v25 = (v24 << 16) | 7;
        v95 = v25;
        v91 = v20;
        v92 = v18;
        do
        {
          v94 = v22;
          v26 = (uint64_t *)(v90 + 16 * v22);
          v27 = v26[1];
          v101 = *v26;
          sub_18A6542A4();
          sub_18A6291A0();
          v28 = 8388612;
          v29 = 128;
          v93 = v23;
          while (1)
          {
            if ((v21 & 0x1000000000000000) != 0)
            {
              v31 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
              v30 = (v32 & 1) != 0 ? v95 : v31;
            }
            else
            {
              v30 = v97 >= v29 ? v28 : v96;
            }
            sub_18A6542A4();
            v33 = MEMORY[0x18D76C904](15, v30, v20, v21);
            v35 = v34;
            v37 = v36;
            v39 = v38;
            sub_18A5F38AC();
            v40 = MEMORY[0x18D76C928](v33, v35, v37, v39);
            if (v41)
              break;
            v28 -= 0x10000;
            if (!--v29)
            {
              sub_18A5F38AC();
              v42 = 0;
              v43 = 0xE000000000000000;
              goto LABEL_42;
            }
          }
          v42 = v40;
          v43 = v41;
          sub_18A5F38AC();
LABEL_42:
          v44 = v101;
          if ((v27 & 0x2000000000000000) != 0)
            v45 = HIBYTE(v27) & 0xF;
          else
            v45 = v101 & 0xFFFFFFFFFFFFLL;
          v100 = v45;
          v46 = (v45 << 16) | 0xB;
          if ((v101 & 0x800000000000000) != 0)
            v46 = (v45 << 16) | 7;
          v98 = v46;
          v99 = (v45 << 16) | 7;
          v47 = 8388612;
          v48 = 128;
          while (1)
          {
            if ((v27 & 0x1000000000000000) != 0)
            {
              v50 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
              v49 = (v51 & 1) != 0 ? v98 : v50;
            }
            else
            {
              v49 = v100 >= v48 ? v47 : v99;
            }
            sub_18A6291A0();
            v52 = MEMORY[0x18D76C904](15, v49, v44, v27);
            v54 = v53;
            v56 = v55;
            v58 = v57;
            sub_18A5F3A8C();
            v59 = MEMORY[0x18D76C928](v52, v54, v56, v58);
            if (v60)
              break;
            v47 -= 0x10000;
            --v48;
            v44 = v101;
            if (!v48)
            {
              sub_18A5F3A8C();
              v61 = 0;
              v62 = 0xE000000000000000;
              goto LABEL_59;
            }
          }
          v61 = v59;
          v62 = v60;
          sub_18A5F3A8C();
LABEL_59:
          v23 = v93;
          v63 = v94;
          v64 = *(_QWORD *)(v93 + 16);
          if (v64 >= *(_QWORD *)(v93 + 24) >> 1)
          {
            sub_18A654194();
            v63 = v94;
            v23 = v93;
          }
          *(_QWORD *)(v23 + 16) = v64 + 1;
          v65 = v23 + 40 * v64;
          *(_BYTE *)(v65 + 32) = v89;
          v22 = v63 + 1;
          *(_QWORD *)(v65 + 40) = v42;
          *(_QWORD *)(v65 + 48) = v43;
          *(_QWORD *)(v65 + 56) = v61;
          *(_QWORD *)(v65 + 64) = v62;
          v20 = v91;
        }
        while (v22 != v92);
        swift_bridgeObjectRelease();
        sub_18A5F38AC();
        v11 = v87;
        v4 = v88;
        v7 = v83;
        v10 = v86;
      }
      else
      {
        v23 = MEMORY[0x1E0DEE9D8];
      }
      v66 = *(_QWORD *)(v23 + 16);
      v67 = *(_QWORD *)(v4 + 16);
      if (__OFADD__(v67, v66))
      {
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      if (v67 + v66 > *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_18A6183E8();
        v4 = v74;
        if (!*(_QWORD *)(v23 + 16))
        {
LABEL_77:
          if (v66)
            goto LABEL_83;
          goto LABEL_78;
        }
      }
      else if (!v66)
      {
        goto LABEL_77;
      }
      v68 = *(_QWORD *)(v4 + 16);
      if ((*(_QWORD *)(v4 + 24) >> 1) - v68 < v66)
        goto LABEL_84;
      v69 = v4 + 40 * v68 + 32;
      if (v23 + 32 < v69 + 40 * v66 && v69 < v23 + 32 + 40 * v66)
        goto LABEL_89;
      swift_arrayInitWithCopy();
      if (v66)
      {
        v71 = *(_QWORD *)(v4 + 16);
        v72 = __OFADD__(v71, v66);
        v73 = v71 + v66;
        if (v72)
          goto LABEL_85;
        *(_QWORD *)(v4 + 16) = v73;
      }
LABEL_78:
      swift_bridgeObjectRelease();
      if (v10)
        goto LABEL_8;
    }
LABEL_80:
    swift_release();
    a1 = v79;
    v5 = v82;
    if (v82 != v80)
      continue;
    break;
  }
LABEL_81:
  sub_18A5F37E0();
  v75 = sub_18A5F3898();
  v76 = sub_18A64D5C0(v75);
  result = sub_18A654258();
  *a2 = v76;
  return result;
}

void CKDeviceCapabilitySet.init(arrayLiteral:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_18A64D5C0(a1);
  sub_18A5F37E0();
  *a2 = v3;
  sub_18A5F3824();
}

uint64_t CKDeviceCapabilityCheckOptions.excludeDevicesWithoutCapabilityCheckingSupport.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CKDeviceCapabilityCheckOptions.excludeDevicesWithoutCapabilityCheckingSupport.modify())()
{
  return nullsub_3;
}

uint64_t sub_18A64F980@<X0>(uint64_t a1@<X8>)
{
  return CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.getter(a1);
}

void sub_18A64F9B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = sub_18A5F101C(&qword_1EDF6A680);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18A64FAE8(a1, (uint64_t)v4);
  CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.setter((uint64_t)v4);
}

void CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;

  v2 = v1;
  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18A65426C(a1);
  v7 = sub_18A5F40B4();
  if (sub_18A5F105C((uint64_t)v6, 1, v7) == 1)
  {
    sub_18A6541C8();
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18A6541C8();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }

  *(_QWORD *)(v2 + 8) = isa;
  sub_18A5F3814();
}

uint64_t sub_18A64FAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6A680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18A64FB30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_18A5F101C(&qword_1EDF6A680);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_18A654288();
  *a1 = v3;
  *v3 = v1;
  sub_18A5F101C(&qword_1EDF6A680);
  v3[1] = sub_18A654220();
  v3[2] = sub_18A654220();
  v4 = sub_18A654220();
  v3[3] = v4;
  v5 = sub_18A654220();
  v3[4] = v5;
  if (*(_QWORD *)(v1 + 8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = sub_18A5F40B4();
  sub_18A5F1010((uint64_t)v4, v6, 1, v7);
  sub_18A6536CC((uint64_t)v4, (uint64_t)v5);
  sub_18A5F3824();
}

void sub_18A64FC24(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = (void *)v2[2];
    v4 = (void *)v2[3];
    v6 = (void *)v2[1];
    sub_18A64FAE8(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v6);
    CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.setter((uint64_t)v6);
    sub_18A6541C8();
  }
  else
  {
    v7 = v2[2];
    sub_18A65426C(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v8 = sub_18A5F40B4();
    if (sub_18A5F105C(v7, 1, v8) == 1)
    {
      sub_18A654228();
      isa = 0;
    }
    else
    {
      v10 = v2[2];
      isa = Date._bridgeToObjectiveC()().super.isa;
      sub_18A654228();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v10, v8);
    }
    v4 = (void *)v2[3];
    v3 = (void *)v2[4];
    v6 = (void *)v2[1];
    v5 = (void *)v2[2];
    v11 = *v2;

    *(_QWORD *)(v11 + 8) = isa;
  }
  free(v3);
  free(v4);
  free(v5);
  free(v6);
  free(v2);
}

void CKDeviceCapabilityCheckOptions.hash(into:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = v1;
    NSObject.hash(into:)();
    sub_18A5F3DA4(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    sub_18A5F45D8();
  }
}

Swift::Int CKDeviceCapabilityCheckOptions.hashValue.getter()
{
  uint64_t v0;
  void *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  id v10;
  uint64_t v12;
  char v13;

  v1 = *(void **)(v0 + 8);
  v2 = sub_18A5F3ED0();
  sub_18A6542C0(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v10 = v1;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return sub_18A5F4238();
}

Swift::Int sub_18A64FDFC()
{
  uint64_t v0;
  Swift::UInt8 v1;
  void *v2;
  id v3;

  v1 = *(_BYTE *)v0;
  v2 = *(void **)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    v3 = v2;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void CKDeviceCapabilityCheckResult.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
  sub_18A5F379C();
}

BOOL static CKDeviceCapabilityCheckResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CKDeviceCapabilityCheckResult.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = sub_18A5F3ED0();
  sub_18A6542C0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  sub_18A5F4238();
  sub_18A654308();
}

Swift::Int sub_18A64FEF4()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void CKContainerOptions.supportedDeviceCapabilities.getter(uint64_t *a1@<X8>)
{
  void *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_18A653364(v1);
  if (!v3)
  {
    v16 = 0;
LABEL_19:
    *a1 = v16;
    return;
  }
  v4 = v3;
  if (v3 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
  {
LABEL_17:
    sub_18A5F3944();
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_18:
    v16 = sub_18A64D5C0(v7);
    sub_18A5F3FE4();
    goto LABEL_19;
  }
  while (1)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    sub_18A6542CC();
    if (v5 < 0)
      break;
    v17 = a1;
    v18 = v5;
    v6 = 0;
    v7 = v25;
    v19 = v4;
    v20 = v4 & 0xC000000000000001;
    while (v5 != v6)
    {
      if (v20)
        sub_18A6541D0();
      v8 = *(id *)(v4 + 8 * v6 + 32);
      CKDeviceCapability.wrapped.getter(v21);
      v9 = v22;
      if (!v22)
        goto LABEL_21;
      v10 = v21[1];
      a1 = v23;
      v11 = v24;
      v12 = v21[0];

      v25 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_18A654214(v13);
        sub_18A654194();
        v7 = v25;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      v15 = v7 + 40 * v14;
      *(_BYTE *)(v15 + 32) = v12;
      ++v6;
      *(_QWORD *)(v15 + 40) = v10;
      *(_QWORD *)(v15 + 48) = v9;
      *(_QWORD *)(v15 + 56) = a1;
      *(_QWORD *)(v15 + 64) = v11;
      v5 = v18;
      v4 = v19;
      if (v18 == v6)
      {
        sub_18A5F3944();
        a1 = v17;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5)
      goto LABEL_17;
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

void sub_18A6500C8(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CKContainerOptions.supportedDeviceCapabilities.getter(&v2);
  *a1 = v2;
}

void sub_18A650100(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_bridgeObjectRetain();
  CKContainerOptions.supportedDeviceCapabilities.setter(&v1);
}

void CKContainerOptions.supportedDeviceCapabilities.setter(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CKDeviceCapability *v5;
  Class isa;
  CloudKit::CKDeviceCapability v7;
  uint64_t v8;

  v2 = *a1;
  if (!*a1)
  {
    isa = 0;
    objc_msgSend(v1, sel_setSupportedDeviceCapabilities_, 0);
LABEL_10:

    return;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    sub_18A5F3944();
LABEL_9:
    sub_18A5F436C();
    isa = sub_18A623E94().super.isa;
    sub_18A5F37A4();
    objc_msgSend(v1, sel_setSupportedDeviceCapabilities_, isa);
    goto LABEL_10;
  }
  v8 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray.reserveCapacity(_:)();
  sub_18A5F436C();
  if ((unint64_t)(v3 - 1) < *(_QWORD *)(v2 + 16))
  {
    v4 = v2 + 64;
    do
    {
      sub_18A654248();
      sub_18A5F3898();
      CKDeviceCapability.init(_:)(v5, &v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 40;
      --v3;
    }
    while (v3);
    sub_18A5F3944();
    goto LABEL_9;
  }
  __break(1u);
}

void CKContainerOptions.supportedDeviceCapabilities.modify(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  CKContainerOptions.supportedDeviceCapabilities.getter(a1);
  sub_18A5F379C();
}

void sub_18A650298(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_18A5F3FAC();
    CKContainerOptions.supportedDeviceCapabilities.setter(&v2);
    sub_18A6541BC();
  }
  else
  {
    CKContainerOptions.supportedDeviceCapabilities.setter(&v2);
    sub_18A5F45D8();
  }
}

uint64_t CKDatabase.checkSupportedDeviceCapabilities(_:in:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 128) = a1;
  *(_QWORD *)(v5 + 136) = a3;
  v6 = *a2;
  *(_QWORD *)(v5 + 144) = v4;
  *(_QWORD *)(v5 + 152) = v6;
  *(_OWORD *)(v5 + 160) = *a4;
  return swift_task_switch();
}

uint64_t sub_18A650308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  CKDeviceCapability *v5;
  void *v6;
  char *v7;
  char v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;
  _QWORD *v14;
  CloudKit::CKDeviceCapability v15;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    result = sub_18A5F436C();
    if ((unint64_t)(v2 - 1) >= *(_QWORD *)(v1 + 16))
    {
      __break(1u);
      return result;
    }
    v4 = *(_QWORD *)(v0 + 152) + 64;
    do
    {
      sub_18A654248();
      sub_18A5F3898();
      CKDeviceCapability.init(_:)(v5, &v15);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 40;
      --v2;
    }
    while (v2);
  }
  v6 = *(void **)(v0 + 168);
  if (v6 == (void *)1)
  {
    v7 = 0;
  }
  else
  {
    v8 = *(_BYTE *)(v0 + 160);
    sub_18A654280();
    v15.level = v8 & 1;
    v15.name._countAndFlagsBits = (uint64_t)v6;
    v9 = v6;
    v7 = CKDeviceCapabilityCheckOptions.init(_:)((char *)&v15);
  }
  *(_QWORD *)(v0 + 176) = v7;
  v11 = *(_QWORD *)(v0 + 136);
  v10 = *(void **)(v0 + 144);
  sub_18A5F436C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 184) = isa;
  sub_18A5F3944();
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_18A6504CC;
  v13 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v14 = (_QWORD *)(v0 + 80);
  v14[1] = 0x40000000;
  v14[2] = sub_18A643834;
  v14[3] = &unk_1E1F59E38;
  v14[4] = v13;
  objc_msgSend(v10, sel_checkSupportedDeviceCapabilities_inZone_options_completionHandler_, isa, v11, v7, v14);
  return swift_continuation_await();
}

uint64_t sub_18A6504CC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

void sub_18A65052C()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 *v2;
  int v3;
  _BYTE *v4;

  v1 = *(void **)(v0 + 184);
  v2 = *(unsigned __int8 **)(v0 + 120);

  v3 = v2[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped];
  if (v3 == 2)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_BYTE **)(v0 + 128);

    *v4 = v3 & 1;
    sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_18A65058C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 176);
  swift_willThrow();

  return sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CKCheckSupportedDeviceCapabilitiesOperation.init(desiredCapabilities:zoneIDs:options:)(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  CKDeviceCapability *v14;
  id v15;
  Class isa;
  uint64_t v17;
  Class v18;
  id v19;
  CloudKit::CKDeviceCapability v20;
  uint64_t v21;

  v3 = *a1;
  v4 = *((_QWORD *)a3 + 1);
  if (v4 == 1)
  {
    v5 = 0;
  }
  else
  {
    v6 = *a3;
    sub_18A654280();
    v20.level = v6 & 1;
    v20.name._countAndFlagsBits = v4;
    v5 = CKDeviceCapabilityCheckOptions.init(_:)((char *)&v20);
  }
  v7 = *(_QWORD *)(v3 + 16);
  if (!v7)
    goto LABEL_8;
  v21 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray.reserveCapacity(_:)();
  result = sub_18A5F436C();
  if ((unint64_t)(v7 - 1) < *(_QWORD *)(v3 + 16))
  {
    v9 = (void **)(v3 + 64);
    do
    {
      v11 = (uint64_t)*(v9 - 3);
      v10 = *(v9 - 2);
      v12 = (uint64_t)*(v9 - 1);
      v13 = *v9;
      v20.level = *((_BYTE *)v9 - 32);
      v20.name._countAndFlagsBits = v11;
      v20.name._object = v10;
      v20.value._countAndFlagsBits = v12;
      v20.value._object = v13;
      swift_bridgeObjectRetain();
      sub_18A5F3898();
      CKDeviceCapability.init(_:)(v14, &v20);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += 5;
      --v7;
    }
    while (v7);
LABEL_8:
    sub_18A5F3FE4();
    v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_18A5F436C();
    isa = sub_18A623E94().super.isa;
    v17 = sub_18A5F37A4();
    sub_18A5F3B04(v17, (unint64_t *)&qword_1ECD967B0);
    v18 = Array._bridgeToObjectiveC()().super.isa;
    sub_18A5F37E0();
    v19 = objc_msgSend(v15, sel_initWithDesiredCapabilities_zoneIDs_options_, isa, v18, v5);

    return (uint64_t)v19;
  }
  __break(1u);
  return result;
}

id CKCheckSupportedDeviceCapabilitiesOperation.init(desiredCapabilitySets:zoneIDs:options:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  CKDeviceCapability *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  Class isa;
  uint64_t v24;
  Class v25;
  id v26;
  char *v28;
  uint64_t v29;
  CloudKit::CKDeviceCapability v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *((_QWORD *)a3 + 1);
  if (v4 == 1)
  {
    v5 = 0;
  }
  else
  {
    v6 = *a3;
    sub_18A654280();
    v30.level = v6 & 1;
    v30.name._countAndFlagsBits = v4;
    v5 = CKDeviceCapabilityCheckOptions.init(_:)((char *)&v30);
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v28 = v5;
    v32 = MEMORY[0x1E0DEE9D8];
    sub_18A610098();
    v8 = a1;
    v9 = 0;
    v10 = v32;
    v29 = v8 + 32;
    do
    {
      v11 = *(_QWORD *)(v29 + 8 * v9);
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v31 = MEMORY[0x1E0DEE9D8];
        sub_18A629140();
        specialized ContiguousArray.reserveCapacity(_:)();
        sub_18A5F436C();
        v13 = (void **)(v11 + 64);
        do
        {
          v15 = (uint64_t)*(v13 - 3);
          v14 = *(v13 - 2);
          v16 = (uint64_t)*(v13 - 1);
          v17 = *v13;
          v30.level = *((_BYTE *)v13 - 32);
          v30.name._countAndFlagsBits = v15;
          v30.name._object = v14;
          v30.value._countAndFlagsBits = v16;
          v30.value._object = v17;
          swift_bridgeObjectRetain();
          sub_18A5F3898();
          CKDeviceCapability.init(_:)(v18, &v30);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v13 += 5;
          --v12;
        }
        while (v12);
        v19 = v31;
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = MEMORY[0x1E0DEE9D8];
      }
      v32 = v10;
      v21 = *(_QWORD *)(v10 + 16);
      v20 = *(_QWORD *)(v10 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_18A654214(v20);
        sub_18A610098();
        v10 = v32;
      }
      ++v9;
      *(_QWORD *)(v10 + 16) = v21 + 1;
      *(_QWORD *)(v10 + 8 * v21 + 32) = v19;
    }
    while (v9 != v7);
    swift_bridgeObjectRelease();
    v5 = v28;
  }
  else
  {
    sub_18A5F3FE4();
  }
  v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18A5F101C(&qword_1EDF6BC28);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v24 = sub_18A5F3A8C();
  sub_18A5F3B04(v24, (unint64_t *)&qword_1ECD967B0);
  v25 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v22, sel_initWithDesiredCapabilitySets_zoneIDs_options_, isa, v25, v5);

  return v26;
}

void CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilitySets.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = sub_18A6533C0(v0);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return;
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v35 = MEMORY[0x1E0DEE9D8];
  v4 = v1;
  sub_18A6100B4();
  v5 = 0;
  v6 = v35;
  v23 = v3;
  v24 = v4 + 32;
  while (1)
  {
    v7 = *(_QWORD *)(v24 + 8 * v5);
    if (v7 >> 62)
      break;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6239CC();
    if (v8)
      goto LABEL_6;
LABEL_18:
    v10 = v2;
LABEL_19:
    v20 = sub_18A64D5C0(v10);
    sub_18A5F3FE4();
    swift_bridgeObjectRelease();
    v35 = v6;
    v22 = *(_QWORD *)(v6 + 16);
    v21 = *(_QWORD *)(v6 + 24);
    if (v22 >= v21 >> 1)
    {
      sub_18A654214(v21);
      sub_18A6100B4();
      v6 = v35;
    }
    ++v5;
    *(_QWORD *)(v6 + 16) = v22 + 1;
    *(_QWORD *)(v6 + 8 * v22 + 32) = v20;
    if (v5 == v3)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRetain_n();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  sub_18A5F3FE4();
  if (!v8)
    goto LABEL_18;
LABEL_6:
  v26 = v5;
  v34 = v2;
  sub_18A6542CC();
  if ((v8 & 0x8000000000000000) == 0)
  {
    v25 = v6;
    v9 = 0;
    v10 = v34;
    v28 = v7;
    v29 = v7 & 0xC000000000000001;
    v27 = v8;
    while (v8 != v9)
    {
      if (v29)
        v11 = (id)MEMORY[0x18D76CEB0](v9, v7);
      else
        v11 = *(id *)(v7 + 8 * v9 + 32);
      v12 = v11;
      CKDeviceCapability.wrapped.getter(v30);
      v13 = v31;
      if (!v31)
        goto LABEL_27;
      v14 = v30[1];
      v15 = v32;
      v16 = v33;
      v17 = v30[0];

      v34 = v10;
      v18 = *(_QWORD *)(v10 + 16);
      if (v18 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_18A654194();
        v10 = v34;
      }
      *(_QWORD *)(v10 + 16) = v18 + 1;
      v19 = v10 + 40 * v18;
      *(_BYTE *)(v19 + 32) = v17;
      ++v9;
      *(_QWORD *)(v19 + 40) = v14;
      *(_QWORD *)(v19 + 48) = v13;
      *(_QWORD *)(v19 + 56) = v15;
      *(_QWORD *)(v19 + 64) = v16;
      v8 = v27;
      v7 = v28;
      if (v27 == v9)
      {
        v2 = MEMORY[0x1E0DEE9D8];
        v3 = v23;
        v6 = v25;
        v5 = v26;
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

void CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilities.getter(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilitySets.getter();
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3 != 1)
    goto LABEL_5;
  CKCheckSupportedDeviceCapabilitiesOperation.desiredCapabilitySets.getter();
  if (!*(_QWORD *)(v4 + 16))
  {
    sub_18A5F3944();
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v4 + 32);
  sub_18A5F3898();
  sub_18A5F3944();
LABEL_6:
  *a1 = v5;
  sub_18A5F3824();
}

uint64_t CKCheckSupportedDeviceCapabilitiesOperation.zoneIDs.getter()
{
  void *v0;
  uint64_t result;

  result = sub_18A653420(v0);
  if (!result)
    return MEMORY[0x1E0DEE9D8];
  return result;
}

void CKCheckSupportedDeviceCapabilitiesOperation.options.getter(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;

  v3 = objc_msgSend(v1, sel_options);
  if (v3)
  {
    v4 = v3;
    CKDeviceCapabilityCheckOptions.wrapped.getter(a1);
    sub_18A5F3DA4(v4);
  }
  else
  {
    *(_OWORD *)a1 = xmmword_18A83B980;
    sub_18A5F45D8();
  }
}

void CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perResultBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A653738;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A650DD8(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *);

  CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A61C668;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A650E3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A654130;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.setter((uint64_t)v4, v3);
}

void CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = sub_18A5F3F90();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A651550, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    swift_retain();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setPerResultBlock_);
    _Block_release(v6);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerResultBlock_);
  }
}

void sub_18A650F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSArray v9;
  uint64_t v10;
  id v11;

  type metadata accessor for CKDeviceCapability(0);
  v9.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a4)
    v10 = _convertErrorToNSError(_:)();
  else
    v10 = 0;
  v11 = (id)v10;
  (*(void (**)(uint64_t, uint64_t, Class, uint64_t))(a5 + 16))(a5, a1, v9.super.isa, a3);

}

void sub_18A651014(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, void *, void *))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  CKDeviceCapability *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  CKDeviceCapability *v24;
  void *v25;
  id v26;
  id v27;
  CloudKit::CKDeviceCapability v28;
  uint64_t v29;

  v6 = *a2;
  v7 = *(void **)a3;
  if ((*(_BYTE *)(a3 + 8) & 1) == 0)
  {
    v17 = *(_QWORD *)(v6 + 16);
    v18 = MEMORY[0x1E0DEE9D8];
    if (v17)
    {
      v29 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for CKDeviceCapability(0);
      if ((unint64_t)(v17 - 1) >= *(_QWORD *)(v6 + 16))
        goto LABEL_16;
      v19 = (void **)(v6 + 64);
      do
      {
        v21 = (uint64_t)*(v19 - 3);
        v20 = *(v19 - 2);
        v22 = (uint64_t)*(v19 - 1);
        v23 = *v19;
        v28.level = *((_BYTE *)v19 - 32);
        v28.name._countAndFlagsBits = v21;
        v28.name._object = v20;
        v28.value._countAndFlagsBits = v22;
        v28.value._object = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CKDeviceCapability.init(_:)(v24, &v28);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v19 += 5;
        --v17;
      }
      while (v17);
      v18 = v29;
    }
    type metadata accessor for CKDeviceCapabilityCheckResult(0);
    v28.level = v7 & 1;
    CKDeviceCapabilityCheckResult.init(_:)((CKDeviceCapabilityCheckResult *)(v7 & 1), (CloudKit::CKDeviceCapabilityCheckResult)&v28);
    v27 = v25;
    a4(a1, v18, v25, 0);
    swift_bridgeObjectRelease();

    return;
  }
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
    v26 = v7;
    v16 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    sub_18A6499C8(v7, 1);
    a4(a1, v16, 0, v7);
    sub_18A60A664(v7, 1);
    swift_bridgeObjectRelease();
    sub_18A60A664(v7, 1);
    return;
  }
  v29 = MEMORY[0x1E0DEE9D8];
  v9 = v7;
  specialized ContiguousArray.reserveCapacity(_:)();
  type metadata accessor for CKDeviceCapability(0);
  if ((unint64_t)(v8 - 1) < *(_QWORD *)(v6 + 16))
  {
    v10 = (void **)(v6 + 64);
    do
    {
      v12 = (uint64_t)*(v10 - 3);
      v11 = *(v10 - 2);
      v13 = (uint64_t)*(v10 - 1);
      v14 = *v10;
      v28.level = *((_BYTE *)v10 - 32);
      v28.name._countAndFlagsBits = v12;
      v28.name._object = v11;
      v28.value._countAndFlagsBits = v13;
      v28.value._object = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CKDeviceCapability.init(_:)(v15, &v28);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += 5;
      --v8;
    }
    while (v8);
    v16 = v29;
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_18A6512A8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  int v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 >> 62)
    goto LABEL_23;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    if (!v10)
      break;
    v33 = MEMORY[0x1E0DEE9D8];
    sub_18A61007C();
    if (v10 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21 = a4;
    v22 = a3;
    v23 = a1;
    v12 = 0;
    v11 = v33;
    v24 = a5;
    while (v10 != v12)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x18D76CEB0](v12, a2);
      else
        v13 = *(id *)(a2 + 8 * v12 + 32);
      v14 = v13;
      CKDeviceCapability.wrapped.getter(&v28);
      v15 = v30;
      if (!v30)
        goto LABEL_25;
      a5 = v29;
      v25 = v32;
      v26 = v31;
      a3 = v28;

      v33 = v11;
      a4 = *(_QWORD *)(v11 + 16);
      a1 = a4 + 1;
      if (a4 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_18A61007C();
        v11 = v33;
      }
      *(_QWORD *)(v11 + 16) = a1;
      v16 = v11 + 40 * a4;
      *(_BYTE *)(v16 + 32) = a3;
      ++v12;
      *(_QWORD *)(v16 + 40) = a5;
      *(_QWORD *)(v16 + 48) = v15;
      *(_QWORD *)(v16 + 56) = v26;
      *(_QWORD *)(v16 + 64) = v25;
      if (v10 == v12)
      {
        a5 = v24;
        a3 = v22;
        a1 = v23;
        a4 = v21;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_15:
  v17 = sub_18A64D5C0(v11);
  swift_bridgeObjectRelease();
  if (a4)
  {
    v33 = v17;
    v28 = a4;
    LOBYTE(v29) = 1;
    v18 = (id)a4;
    a5(a1, &v33, &v28);

    swift_bridgeObjectRelease();
    return;
  }
  if (!a3)
  {
    v33 = v17;
    type metadata accessor for CKError(0);
    v28 = 1;
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    v20 = (id)v27;
    v28 = v27;
    LOBYTE(v29) = 1;
    goto LABEL_21;
  }
  v33 = v17;
  v19 = *(unsigned __int8 *)(a3 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
  if (v19 != 2)
  {
    v28 = v19 & 1;
    LOBYTE(v29) = 0;
    v20 = (id)a3;
LABEL_21:
    a5(a1, &v33, &v28);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_26:
  __break(1u);
}

void sub_18A651550(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  void (*v8)(id, uint64_t, void *, void *);
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v8 = *(void (**)(id, uint64_t, void *, void *))(a1 + 32);
  type metadata accessor for CKDeviceCapability(0);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v12 = a2;
  v10 = a4;
  v11 = a5;
  v8(v12, v9, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();

}

void CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A651638(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKCheckSupportedDeviceCapabilitiesOperation.perResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_checkSupportedDeviceCapabilitiesCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A653768;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A6516C8(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A65172C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.setter((uint64_t)v4, v3);
}

void CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A651AD0, MEMORY[0x1E0C809B0], 1107296256, v9, v10);
    sub_18A60A614(a1);
    swift_retain();
    v8 = swift_release();
    sub_18A5F37C8(v8, sel_setCheckSupportedDeviceCapabilitiesCompletionBlock_);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 0);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setCheckSupportedDeviceCapabilitiesCompletionBlock_);
  }
}

void sub_18A651890(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F101C(&qword_1EDF6BCC8);
    sub_18A615ABC();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

void sub_18A65194C(void *a1, char a2, void (*a3)(void))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    ((void (*)(_QWORD, void *))a3)(0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F101C(&qword_1EDF6BCC8);
    sub_18A615ABC();
    Dictionary.init(dictionaryLiteral:)();
    a3();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18A651AD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A5F101C(&qword_1EDF6BCC8);
    sub_18A615ABC();
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A651BAC(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKCheckSupportedDeviceCapabilitiesOperation.checkSupportedDeviceCapabilitiesResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void sub_18A651BC8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_18A65EB40();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_18A6525E4(v5);
  *a1 = v2;
}

uint64_t sub_18A651C30(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_18A651CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1 < 0)
  {
    sub_18A5F41C8();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      sub_18A5F101C(&qword_1EDF6A3D0);
      v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v2 + 16) = a1;
    }
    else
    {
      v2 = MEMORY[0x1E0DEE9D8];
    }
    sub_18A5F101C(&qword_1EDF6A3D0);
    return v2;
  }
  return result;
}

void sub_18A651D80()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618130);
}

void sub_18A651D8C()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618144);
}

void sub_18A651D98()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618210);
}

void sub_18A651DA4()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618224);
}

void sub_18A651DB0()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618240);
}

void sub_18A651DBC()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618254);
}

void sub_18A651DC8()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618338);
}

void sub_18A651DD4()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A618498);
}

void sub_18A651DE0()
{
  sub_18A651DEC((uint64_t (*)(void))sub_18A6185FC);
}

void sub_18A651DEC(uint64_t (*a1)(void))
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_18A654274();
    *v1 = a1();
  }
  sub_18A5F3824();
}

uint64_t sub_18A651E34(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618130);
}

uint64_t sub_18A651E40(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618144);
}

uint64_t sub_18A651E4C(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618210);
}

uint64_t sub_18A651E58(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618224);
}

uint64_t sub_18A651E64(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618240);
}

uint64_t sub_18A651E70(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618254);
}

uint64_t sub_18A651E7C(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618338);
}

uint64_t sub_18A651E88(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A618498);
}

uint64_t sub_18A651E94(uint64_t a1)
{
  return sub_18A651EA0(a1, (uint64_t (*)(BOOL))sub_18A6185FC);
}

uint64_t sub_18A651EA0(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t sub_18A651EE0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A614630();
    if (v4 + 32 * v3 <= v2 || v2 + 32 * v3 <= v4)
    {
      sub_18A5F101C(&qword_1EDF6B3F0);
      sub_18A5F4584();
      return sub_18A5F3BD8();
    }
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A651F80()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_18A6541B0();
  if (v0 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A65419C();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_18A5F4258();
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

void *sub_18A652008(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = (void *)sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A6520A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;

  if (a2 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A6541EC();
    if (!v6 && v5)
    {
      v5 = v4 >= v3;
      v6 = v4 == v3;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      sub_18A5F3B04(v2, (unint64_t *)&qword_1ECD967B0);
      sub_18A5F4584();
      return sub_18A5F3BD8();
    }
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A652138()
{
  return sub_18A652150();
}

uint64_t sub_18A652144()
{
  return sub_18A652150();
}

uint64_t sub_18A652150()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_18A6541B0();
  if (v0 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A65419C();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_18A5F4258();
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A6521D0()
{
  return sub_18A652298();
}

uint64_t sub_18A6521DC()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_18A6541B0();
  if (v3 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    if (v2 + 24 * v1 <= v0 || v0 + 24 * v1 <= v2)
      return sub_18A5F4258();
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A652274()
{
  return sub_18A652298();
}

uint64_t sub_18A652280()
{
  return sub_18A652150();
}

uint64_t sub_18A65228C()
{
  return sub_18A652298();
}

uint64_t sub_18A652298()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_18A6541B0();
  if (v0 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A6542AC();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_18A5F4258();
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A652318()
{
  return sub_18A652150();
}

uint64_t sub_18A652324()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_18A6541B0();
  if (v3 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    if (v2 + 40 * v1 <= v0 || v0 + 40 * v1 <= v2)
      return sub_18A5F4258();
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A6523BC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A6541EC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_18A5F101C(&qword_1EDF6BC28);
      sub_18A5F4584();
      return sub_18A5F3BD8();
    }
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A65244C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  sub_18A6541B0();
  if (v0 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A6542AC();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return sub_18A5F4258();
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A6524D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  if (a2 < 0)
  {
    sub_18A5F41C8();
    sub_18A61A77C();
  }
  else
  {
    sub_18A614630();
    v6 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * v3;
    v7 = a3 + v6;
    v8 = v4 + v6;
    if (v7 <= v4 || v8 <= a3)
    {
      sub_18A5F4584();
      return sub_18A5F3BD8();
    }
    sub_18A5F41C8();
    sub_18A5F3D24();
  }
  result = sub_18A5F46D4();
  __break(1u);
  return result;
}

uint64_t sub_18A652580()
{
  return sub_18A652150();
}

uint64_t sub_18A65258C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v6 = String.UTF16View.index(_:offsetBy:)();
    sub_18A654230(v6);
    return v7 | 4;
  }
  else
  {
    v3 = MEMORY[0x18D76C8E0](15, a1 >> 16);
    sub_18A654230(v3);
    return v4 | 8;
  }
}

void sub_18A6525E4(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  Swift::Int v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v23;
  Swift::Int v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  BOOL v35;
  int v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  Swift::Int v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  char v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  Swift::Int v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  Swift::Int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  Swift::Int v147;
  int v148;
  Swift::Int v149;
  Swift::Int v150;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_18A652EB8(0, v3, 1, a1);
      return;
    }
    goto LABEL_174;
  }
  v5 = v4;
  v142 = v1;
  v134 = sub_18A651C30(v3 / 2);
  v141 = v6;
  v136 = v3;
  v132 = a1;
  if (v3 <= 0)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v69 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_137:
    if (v69 < 2)
    {
LABEL_148:
      swift_bridgeObjectRelease();
      if (v136 >= -1)
      {
        *(_QWORD *)(v134 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
      return;
    }
    v121 = *v132;
    while (1)
    {
      v122 = v69 - 2;
      if (v69 < 2)
        break;
      if (!v121)
        goto LABEL_183;
      v123 = v9;
      v124 = v9 + 4;
      v125 = v9[2 * v122 + 4];
      v126 = v9[2 * v69 + 3];
      sub_18A653044((char *)(v121 + 40 * v125), (char *)(v121 + 40 * v124[2 * v69 - 2]), v121 + 40 * v126, v141);
      if (v142)
        goto LABEL_150;
      if (v126 < v125)
        goto LABEL_169;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A65D838();
        v123 = v129;
      }
      if (v122 >= v123[2])
        goto LABEL_170;
      v127 = &v123[2 * v122 + 4];
      *v127 = v125;
      v127[1] = v126;
      v128 = v123[2];
      if (v69 > v128)
        goto LABEL_171;
      v9 = v123;
      memmove(&v123[2 * v69 + 2], &v123[2 * v69 + 4], 16 * (v128 - v69));
      v123[2] = v128 - 1;
      v69 = v128 - 1;
      if (v128 <= 2)
        goto LABEL_148;
    }
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
    goto LABEL_172;
  }
  v133 = v5;
  v7 = 0;
  v8 = *a1;
  v130 = *a1 + 32;
  v131 = *a1 + 16;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v146 = *a1;
  while (2)
  {
    v10 = v7;
    v11 = v7 + 1;
    v135 = v9;
    if (v7 + 1 >= v3)
    {
      v16 = v142;
      goto LABEL_52;
    }
    v12 = (_QWORD *)(v8 + 40 * v11);
    v13 = *(unsigned __int8 *)v12;
    v14 = (_QWORD *)(v8 + 40 * v7);
    v15 = *(unsigned __int8 *)v14;
    v16 = v142;
    if (v13 == v15)
    {
      v147 = v7 + 1;
      v17 = v12[3];
      v18 = v12[4];
      v19 = v14[3];
      v20 = v14[4];
      v21 = v12[1] == v14[1] && v12[2] == v14[2];
      if ((v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v17 == v19 && v18 == v20)
      {
        v24 = v10 + 2;
        v9 = v135;
        v3 = v136;
        v16 = v142;
        v8 = v146;
        if (v10 + 2 >= v136)
          goto LABEL_51;
        v23 = 0;
        v11 = v147;
        goto LABEL_22;
      }
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v16 = v142;
      v9 = v135;
      v3 = v136;
      v8 = v146;
      v11 = v147;
    }
    else
    {
      v23 = v13 < v15;
    }
    v24 = v10 + 2;
    if (v10 + 2 >= v3)
      goto LABEL_43;
LABEL_22:
    v138 = v10;
    v25 = (_QWORD *)(v131 + 40 * v24);
    v148 = v23;
    do
    {
      v26 = *((unsigned __int8 *)v25 - 16);
      v27 = (_QWORD *)(v8 + 40 * v11);
      v28 = *(unsigned __int8 *)v27;
      if (v26 != v28)
      {
        v36 = v26 < v28;
        goto LABEL_39;
      }
      v30 = v25[1];
      v29 = v25[2];
      v32 = v27[3];
      v31 = v27[4];
      if (*(v25 - 1) != v27[1] || *v25 != v27[2])
      {
        v144 = v25[2];
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v29 = v144;
        if ((v34 & 1) == 0)
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v3 = v136;
          goto LABEL_38;
        }
      }
      v35 = v30 == v32 && v29 == v31;
      v3 = v136;
      if (!v35)
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_38:
        v9 = v135;
        v8 = v146;
        v23 = v148;
LABEL_39:
        if (((v23 ^ v36) & 1) != 0)
          goto LABEL_42;
        goto LABEL_40;
      }
      v9 = v135;
      v8 = v146;
      v23 = v148;
      if ((v148 & 1) != 0)
      {
        v10 = v138;
        goto LABEL_44;
      }
LABEL_40:
      v25 += 5;
      v37 = v24 + 1;
      v11 = v24;
      v24 = v37;
    }
    while (v37 < v3);
    v24 = v37;
LABEL_42:
    v10 = v138;
LABEL_43:
    v11 = v24;
    if ((v23 & 1) == 0)
      goto LABEL_52;
LABEL_44:
    if (v24 < v10)
    {
LABEL_178:
      __break(1u);
      goto LABEL_179;
    }
    if (v10 < v24)
    {
      v38 = 40 * v24;
      v39 = 40 * v10;
      v40 = v24;
      v41 = v10;
      do
      {
        if (v41 != --v40)
        {
          if (!v8)
            goto LABEL_182;
          v42 = v8 + v39;
          v43 = *(_BYTE *)(v8 + v39);
          v44 = v8 + v38;
          v45 = *(_OWORD *)(v8 + v39 + 8);
          v46 = *(_QWORD *)(v8 + v39 + 24);
          v47 = *(_QWORD *)(v8 + v39 + 32);
          v48 = *(_QWORD *)(v8 + v38 - 8);
          v49 = *(_OWORD *)(v8 + v38 - 24);
          *(_OWORD *)v42 = *(_OWORD *)(v8 + v38 - 40);
          *(_OWORD *)(v42 + 16) = v49;
          *(_QWORD *)(v42 + 32) = v48;
          *(_BYTE *)(v44 - 40) = v43;
          *(_OWORD *)(v44 - 32) = v45;
          *(_QWORD *)(v44 - 16) = v46;
          *(_QWORD *)(v44 - 8) = v47;
        }
        ++v41;
        v38 -= 40;
        v39 += 40;
      }
      while (v41 < v40);
    }
LABEL_51:
    v11 = v24;
LABEL_52:
    if (v11 >= v3)
      goto LABEL_83;
    if (__OFSUB__(v11, v10))
      goto LABEL_173;
    if (v11 - v10 >= v133)
      goto LABEL_83;
    if (__OFADD__(v10, v133))
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    if (v10 + v133 >= v3)
      v50 = v3;
    else
      v50 = v10 + v133;
    if (v50 < v10)
      goto LABEL_177;
    if (v11 == v50)
      goto LABEL_83;
    v51 = v130 + 40 * v11;
    v137 = v50;
    v139 = v10;
    while (2)
    {
      v52 = (_QWORD *)(v8 + 40 * v11);
      v53 = *(unsigned __int8 *)v52;
      v55 = v52[1];
      v54 = v52[2];
      v56 = v52[3];
      v57 = v52[4];
      v140 = v51;
      v149 = v11;
      while (2)
      {
        v59 = v51 - 72;
        v58 = *(unsigned __int8 *)(v51 - 72);
        if (v53 != v58)
        {
          if (v53 >= v58)
            goto LABEL_81;
          goto LABEL_77;
        }
        v60 = *(_QWORD *)(v51 - 48);
        v61 = *(_QWORD *)(v51 - 40);
        v62 = v55 == *(_QWORD *)(v51 - 64) && v54 == *(_QWORD *)(v51 - 56);
        if (!v62
          && (v145 = *(_QWORD *)(v51 - 48),
              v143 = *(_QWORD *)(v51 - 40),
              v63 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              v61 = v143,
              v60 = v145,
              (v63 & 1) == 0)
          || (v56 == v60 ? (v64 = v57 == v61) : (v64 = 0), !v64))
        {
          v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v8 = v146;
          v11 = v149;
          if ((v65 & 1) == 0)
            goto LABEL_81;
LABEL_77:
          if (!v8)
            goto LABEL_180;
          v57 = *(_QWORD *)v51;
          v66 = *(_QWORD *)(v51 - 40);
          *(_QWORD *)(v51 - 40) = *(_QWORD *)v51;
          v51 -= 40;
          v53 = *(unsigned __int8 *)(v51 + 8);
          v55 = *(_QWORD *)(v51 + 16);
          v54 = *(_QWORD *)(v51 + 24);
          v56 = *(_QWORD *)(v51 + 32);
          v67 = *(_OWORD *)(v59 + 16);
          *(_OWORD *)(v59 + 40) = *(_OWORD *)v59;
          *(_OWORD *)(v59 + 56) = v67;
          *(_QWORD *)(v59 + 72) = v66;
          *(_BYTE *)(v51 - 32) = v53;
          *(_QWORD *)(v51 - 24) = v55;
          *(_QWORD *)(v51 - 16) = v54;
          *(_QWORD *)(v51 - 8) = v56;
          if (v11 == ++v10)
            goto LABEL_81;
          continue;
        }
        break;
      }
      v8 = v146;
      v11 = v149;
LABEL_81:
      ++v11;
      v10 = v139;
      v51 = v140 + 40;
      if (v11 != v137)
        continue;
      break;
    }
    v11 = v137;
    v9 = v135;
LABEL_83:
    if (v11 < v10)
    {
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    v150 = v11;
    v142 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_18A65D778();
      v9 = v119;
    }
    v68 = v9[2];
    v69 = v68 + 1;
    v7 = v150;
    if (v68 >= v9[3] >> 1)
    {
      sub_18A65D778();
      v7 = v150;
      v9 = v120;
    }
    v9[2] = v69;
    v70 = v9 + 4;
    v71 = &v9[2 * v68 + 4];
    *v71 = v10;
    v71[1] = v7;
    if (!v68)
    {
      v69 = 1;
LABEL_131:
      v3 = v136;
      if (v7 >= v136)
        goto LABEL_137;
      continue;
    }
    break;
  }
  while (1)
  {
    v72 = v69 - 1;
    if (v69 >= 4)
    {
      v77 = &v70[2 * v69];
      v78 = *(v77 - 8);
      v79 = *(v77 - 7);
      v83 = __OFSUB__(v79, v78);
      v80 = v79 - v78;
      if (v83)
        goto LABEL_157;
      v82 = *(v77 - 6);
      v81 = *(v77 - 5);
      v83 = __OFSUB__(v81, v82);
      v75 = v81 - v82;
      v76 = v83;
      if (v83)
        goto LABEL_158;
      v84 = v69 - 2;
      v85 = &v70[2 * v69 - 4];
      v87 = *v85;
      v86 = v85[1];
      v83 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v83)
        goto LABEL_159;
      v83 = __OFADD__(v75, v88);
      v89 = v75 + v88;
      if (v83)
        goto LABEL_161;
      if (v89 >= v80)
      {
        v107 = &v70[2 * v72];
        v109 = *v107;
        v108 = v107[1];
        v83 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v83)
          goto LABEL_167;
        v100 = v75 < v110;
        goto LABEL_120;
      }
    }
    else
    {
      if (v69 != 3)
      {
        v101 = v9[4];
        v102 = v9[5];
        v83 = __OFSUB__(v102, v101);
        v94 = v102 - v101;
        v95 = v83;
        goto LABEL_114;
      }
      v74 = v9[4];
      v73 = v9[5];
      v83 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = v83;
    }
    if ((v76 & 1) != 0)
      goto LABEL_160;
    v84 = v69 - 2;
    v90 = &v70[2 * v69 - 4];
    v92 = *v90;
    v91 = v90[1];
    v93 = __OFSUB__(v91, v92);
    v94 = v91 - v92;
    v95 = v93;
    if (v93)
      goto LABEL_162;
    v96 = &v70[2 * v72];
    v98 = *v96;
    v97 = v96[1];
    v83 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v83)
      goto LABEL_164;
    if (__OFADD__(v94, v99))
      goto LABEL_166;
    if (v94 + v99 >= v75)
    {
      v100 = v75 < v99;
LABEL_120:
      if (v100)
        v72 = v84;
      goto LABEL_122;
    }
LABEL_114:
    if ((v95 & 1) != 0)
      goto LABEL_163;
    v103 = &v70[2 * v72];
    v105 = *v103;
    v104 = v103[1];
    v83 = __OFSUB__(v104, v105);
    v106 = v104 - v105;
    if (v83)
      goto LABEL_165;
    if (v106 < v94)
      goto LABEL_131;
LABEL_122:
    v111 = v72 - 1;
    if (v72 - 1 >= v69)
    {
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    if (!v8)
      goto LABEL_181;
    v112 = v9;
    v113 = v8;
    v114 = &v70[2 * v111];
    v115 = *v114;
    v116 = &v70[2 * v72];
    v117 = v116[1];
    sub_18A653044((char *)(v113 + 40 * *v114), (char *)(v113 + 40 * *v116), v113 + 40 * v117, v141);
    if (v142)
      break;
    if (v117 < v115)
      goto LABEL_154;
    if (v72 > v112[2])
      goto LABEL_155;
    *v114 = v115;
    v70[2 * v111 + 1] = v117;
    v118 = v112[2];
    if (v72 >= v118)
      goto LABEL_156;
    v9 = v112;
    v142 = 0;
    v69 = v118 - 1;
    memmove(&v70[2 * v72], v116 + 2, 16 * (v118 - 1 - v72));
    v112[2] = v118 - 1;
    v8 = v146;
    v7 = v150;
    if (v118 <= 2)
      goto LABEL_131;
  }
LABEL_150:
  swift_bridgeObjectRelease();
  if (v136 < -1)
    goto LABEL_175;
  *(_QWORD *)(v134 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_18A652EB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 40 * a3 + 32;
    v27 = *a4;
    while (2)
    {
      v7 = (_QWORD *)(v5 + 40 * v4);
      v8 = *(unsigned __int8 *)v7;
      v9 = v7[1];
      v10 = v7[2];
      v12 = v7[3];
      v11 = v7[4];
      v13 = v23;
      v24 = v6;
      v28 = v4;
      do
      {
        v15 = v6 - 72;
        v14 = *(unsigned __int8 *)(v6 - 72);
        if (v8 == v14)
        {
          v16 = *(_QWORD *)(v6 - 48);
          v17 = *(_QWORD *)(v6 - 40);
          v18 = v9 == *(_QWORD *)(v6 - 64) && v10 == *(_QWORD *)(v6 - 56);
          if (v18
            || (v25 = *(_QWORD *)(v6 - 40),
                v26 = *(_QWORD *)(v6 - 48),
                result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                v17 = v25,
                v16 = v26,
                (result & 1) != 0))
          {
            v19 = v12 == v16 && v11 == v17;
            v4 = v28;
            v5 = v27;
            if (v19)
              break;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              break;
          }
          else
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            v4 = v28;
            v5 = v27;
            if ((result & 1) == 0)
              break;
          }
        }
        else if (v8 >= v14)
        {
          break;
        }
        if (!v5)
        {
          __break(1u);
          return result;
        }
        v11 = *(_QWORD *)v6;
        v20 = *(_QWORD *)(v6 - 40);
        *(_QWORD *)(v6 - 40) = *(_QWORD *)v6;
        v6 -= 40;
        v8 = *(unsigned __int8 *)(v6 + 8);
        v9 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        v12 = *(_QWORD *)(v6 + 32);
        v21 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)(v15 + 40) = *(_OWORD *)v15;
        *(_OWORD *)(v15 + 56) = v21;
        *(_QWORD *)(v15 + 72) = v20;
        *(_BYTE *)(v6 - 32) = v8;
        *(_QWORD *)(v6 - 24) = v9;
        *(_QWORD *)(v6 - 16) = v10;
        *(_QWORD *)(v6 - 8) = v12;
        ++v13;
      }
      while (v4 != v13);
      ++v4;
      v6 = v24 + 40;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_18A653044(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  BOOL v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v52;

  v5 = a2;
  v6 = a1;
  v7 = a2 - a1;
  v8 = (a2 - a1) / 40;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  if (v8 < v10)
  {
    v11 = a3;
    sub_18A619154(a1, (a2 - a1) / 40, a4);
    v12 = &a4[40 * v8];
    if ((unint64_t)v5 >= v11 || v7 < 40)
    {
      v5 = v6;
      v13 = a4;
      goto LABEL_64;
    }
    v13 = a4;
    while (1)
    {
      v14 = *v5;
      v15 = *v13;
      if (v14 == v15)
      {
        v17 = *((_QWORD *)v5 + 3);
        v16 = *((_QWORD *)v5 + 4);
        v18 = *((_QWORD *)v13 + 3);
        v19 = *((_QWORD *)v13 + 4);
        v20 = *((_QWORD *)v5 + 1) == *((_QWORD *)v13 + 1) && *((_QWORD *)v5 + 2) == *((_QWORD *)v13 + 2);
        if (v20
          || (v52 = *((_QWORD *)v5 + 4),
              v48 = *((_QWORD *)v13 + 3),
              v21 = *((_QWORD *)v5 + 3),
              v22 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              v18 = v48,
              v16 = v52,
              v17 = v21,
              (v22 & 1) != 0))
        {
          v23 = v17 == v18 && v16 == v19;
          v12 = &a4[40 * v8];
          v11 = a3;
          if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_25:
            v24 = v5;
            v20 = v6 == v5;
            v5 += 40;
            if (v20)
              goto LABEL_18;
LABEL_17:
            v25 = *(_OWORD *)v24;
            v26 = *((_OWORD *)v24 + 1);
            *((_QWORD *)v6 + 4) = *((_QWORD *)v24 + 4);
            *(_OWORD *)v6 = v25;
            *((_OWORD *)v6 + 1) = v26;
            goto LABEL_18;
          }
        }
        else
        {
          v12 = &a4[40 * v8];
          v11 = a3;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_25;
        }
      }
      else if (v14 < v15)
      {
        goto LABEL_25;
      }
      v24 = v13;
      v20 = v6 == v13;
      v13 += 40;
      if (!v20)
        goto LABEL_17;
LABEL_18:
      v6 += 40;
      if (v13 >= v12 || (unint64_t)v5 >= v11)
      {
        v5 = v6;
        goto LABEL_64;
      }
    }
  }
  sub_18A619154(a2, (uint64_t)(a3 - (_QWORD)a2) / 40, a4);
  v12 = &a4[40 * v10];
  v13 = a4;
  if (v6 < v5 && v9 >= 40)
  {
    v28 = a3 - 40;
    do
    {
      v29 = (unsigned __int8 *)(v28 + 40);
      v31 = (unsigned __int8 *)(v12 - 40);
      v30 = *(v12 - 40);
      v32 = *(v5 - 40);
      if (v30 == v32)
      {
        v34 = *((_QWORD *)v12 - 2);
        v33 = *((_QWORD *)v12 - 1);
        v35 = *((_QWORD *)v5 - 2);
        v36 = *((_QWORD *)v5 - 1);
        if (*((_QWORD *)v12 - 4) == *((_QWORD *)v5 - 4) && *((_QWORD *)v12 - 3) == *((_QWORD *)v5 - 3))
          goto LABEL_39;
        v46 = *((_QWORD *)v5 - 2);
        v47 = *((_QWORD *)v12 - 1);
        v45 = *((_QWORD *)v5 - 1);
        v49 = *((_QWORD *)v12 - 2);
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v36 = v45;
        v35 = v46;
        v33 = v47;
        v34 = v49;
        if ((v38 & 1) != 0)
        {
LABEL_39:
          v39 = v34 == v35 && v33 == v36;
          v29 = (unsigned __int8 *)(v28 + 40);
          if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_49:
            v40 = v29 != (unsigned __int8 *)v5 || v28 >= (unint64_t)v5;
            v31 = (unsigned __int8 *)(v5 - 40);
            v5 -= 40;
            goto LABEL_53;
          }
        }
        else
        {
          v29 = (unsigned __int8 *)(v28 + 40);
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_49;
        }
      }
      else if (v30 < v32)
      {
        goto LABEL_49;
      }
      v40 = v29 != (unsigned __int8 *)v12 || v28 >= (unint64_t)v12;
      v12 -= 40;
LABEL_53:
      v13 = a4;
      if (v40)
      {
        v41 = *(_OWORD *)v31;
        v42 = *((_OWORD *)v31 + 1);
        *(_QWORD *)(v28 + 32) = *((_QWORD *)v31 + 4);
        *(_OWORD *)v28 = v41;
        *(_OWORD *)(v28 + 16) = v42;
      }
      v28 -= 40;
    }
    while (v5 > v6 && v12 > a4);
  }
LABEL_64:
  sub_18A619154(v13, (v12 - v13) / 40, v5);
  return 1;
}

uint64_t sub_18A653364(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_supportedDeviceCapabilities);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for CKDeviceCapability(0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18A6533C0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_desiredCapabilitySets);
  if (!v1)
    return 0;
  v2 = v1;
  sub_18A5F101C(&qword_1EDF6BC28);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18A653420(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_zoneIDs);
  if (!v1)
    return 0;
  v2 = v1;
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18A65348C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = a2 + 64;
    do
    {
      Hasher._combine(_:)(*(unsigned __int8 *)(v4 - 32) + 1);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_18A653550(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *, _QWORD);
  void (*v11)(_QWORD *, _QWORD);
  id *v12;
  id v13;
  _QWORD v14[4];

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    sub_18A5F3FAC();
    v7 = sub_18A623AB0();
    result = sub_18A5F37E0();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      sub_18A5F3FAC();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = sub_18A5F37E0();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_18A6540F0(&qword_1EDF6A318, &qword_1EDF6A2F8, MEMORY[0x1E0DEAF50]);
          sub_18A5F3FAC();
          for (i = 0; i != v7; ++i)
          {
            sub_18A5F101C(&qword_1EDF6A2F8);
            sub_18A666C4C(v14, i, a3);
            v11 = v10;
            v13 = *v12;
            v11(v14, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          sub_18A5F37E0();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_18A6520A0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6536CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6A680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18A653714()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A653738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_18A650F7C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

void sub_18A653740(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A651014(a1, a2, a3, *(void (**)(uint64_t, uint64_t, void *, void *))(v3 + 16));
}

void sub_18A653748(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;

  sub_18A6512A8(a1, a2, a3, a4, *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16));
}

uint64_t sub_18A653750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A653760()
{
  return swift_release();
}

void sub_18A653768(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A651890(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_18A653770()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A653794(void *a1, char a2)
{
  uint64_t v2;

  sub_18A65194C(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

unint64_t sub_18A6537A4()
{
  unint64_t result;

  result = qword_1EDF6BC30;
  if (!qword_1EDF6BC30)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapability.Level, &type metadata for CKDeviceCapability.Level);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC30);
  }
  return result;
}

unint64_t sub_18A6537E4()
{
  unint64_t result;

  result = qword_1EDF6BC38;
  if (!qword_1EDF6BC38)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapability, &type metadata for CKDeviceCapability);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC38);
  }
  return result;
}

unint64_t sub_18A653824()
{
  unint64_t result;

  result = qword_1EDF6BC40;
  if (!qword_1EDF6BC40)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilitySet, &type metadata for CKDeviceCapabilitySet);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC40);
  }
  return result;
}

unint64_t sub_18A653864()
{
  unint64_t result;

  result = qword_1EDF6BC48;
  if (!qword_1EDF6BC48)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilitySet, &type metadata for CKDeviceCapabilitySet);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC48);
  }
  return result;
}

void sub_18A6538A0()
{
  sub_18A653AC4(&qword_1EDF6BC50, MEMORY[0x1E0DEB8B8]);
}

unint64_t sub_18A6538C4()
{
  unint64_t result;

  result = qword_1EDF6BC58;
  if (!qword_1EDF6BC58)
  {
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC58);
  }
  return result;
}

void sub_18A653900()
{
  sub_18A6539F8(&qword_1EDF6BC60, (uint64_t (*)(void))sub_18A65392C, MEMORY[0x1E0DEDE40]);
}

unint64_t sub_18A65392C()
{
  unint64_t result;

  result = qword_1EDF6BC70;
  if (!qword_1EDF6BC70)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilitySet, &type metadata for CKDeviceCapabilitySet);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC70);
  }
  return result;
}

unint64_t sub_18A65396C()
{
  unint64_t result;

  result = qword_1EDF6BC78;
  if (!qword_1EDF6BC78)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilitySet, &type metadata for CKDeviceCapabilitySet);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC78);
  }
  return result;
}

void sub_18A6539A8()
{
  sub_18A653AC4(&qword_1EDF6BC80, MEMORY[0x1E0DEB890]);
}

void sub_18A6539CC()
{
  sub_18A6539F8(&qword_1EDF6BC88, (uint64_t (*)(void))sub_18A653864, MEMORY[0x1E0DEDE28]);
}

void sub_18A6539F8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = sub_18A619E8C(&qword_1EDF6BC68);
    v7 = a2();
    atomic_store(MEMORY[0x18D76E7C4](a3, v6, &v7), a1);
  }
  sub_18A60A0E0();
}

unint64_t sub_18A653A58()
{
  unint64_t result;

  result = qword_1EDF6BC90;
  if (!qword_1EDF6BC90)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilitySet, &type metadata for CKDeviceCapabilitySet);
    atomic_store(result, (unint64_t *)&qword_1EDF6BC90);
  }
  return result;
}

uint64_t sub_18A653A94()
{
  return MEMORY[0x1E0DEB430];
}

void sub_18A653AA0()
{
  sub_18A653AC4(&qword_1EDF6BC98, MEMORY[0x1E0DEB8C0]);
}

void sub_18A653AC4(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  if (!*a1)
  {
    v4 = sub_18A619E8C(&qword_1EDF6B858);
    v5 = sub_18A6538C4();
    v6[0] = MEMORY[0x1E0DEB458];
    v6[1] = v5;
    atomic_store(MEMORY[0x18D76E7C4](a2, v4, v6), a1);
  }
  sub_18A60A0E0();
}

uint64_t sub_18A653B24()
{
  return sub_18A6540F0(&qword_1EDF6BCA0, &qword_1EDF6BC68, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_18A653B50()
{
  return sub_18A6540F0(&qword_1EDF6BCA8, &qword_1EDF6BCB0, MEMORY[0x1E0DEC908]);
}

unint64_t sub_18A653B80()
{
  unint64_t result;

  result = qword_1EDF6BCB8;
  if (!qword_1EDF6BCB8)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilityCheckOptions, &type metadata for CKDeviceCapabilityCheckOptions);
    atomic_store(result, (unint64_t *)&qword_1EDF6BCB8);
  }
  return result;
}

unint64_t sub_18A653BC0()
{
  unint64_t result;

  result = qword_1EDF6BCC0;
  if (!qword_1EDF6BCC0)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKDeviceCapabilityCheckResult, &type metadata for CKDeviceCapabilityCheckResult);
    atomic_store(result, (unint64_t *)&qword_1EDF6BCC0);
  }
  return result;
}

uint64_t sub_18A653C1C()
{
  return 0;
}

uint64_t initializeWithCopy for CKDeviceCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CKDeviceCapability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CKDeviceCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKDeviceCapability()
{
  sub_18A5F3994();
}

uint64_t storeEnumTagSinglePayload for CKDeviceCapability.Level(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18A653DA8 + 4 * byte_18A83B429[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18A653DDC + 4 * byte_18A83B424[v4]))();
}

uint64_t sub_18A653DDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A653DE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A653DECLL);
  return result;
}

uint64_t sub_18A653DF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A653E00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18A653E04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A653E0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CKDeviceCapability.Level()
{
  sub_18A5F3994();
}

void type metadata accessor for CKDeviceCapabilitySet()
{
  sub_18A5F3994();
}

uint64_t initializeBufferWithCopyOfBuffer for CKDeviceCapabilityCheckOptions(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

void destroy for CKDeviceCapabilityCheckOptions(uint64_t a1)
{

}

uint64_t assignWithCopy for CKDeviceCapabilityCheckOptions(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for CKDeviceCapabilityCheckOptions(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for CKDeviceCapabilityCheckOptions(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKDeviceCapabilityCheckOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for CKDeviceCapabilityCheckOptions()
{
  sub_18A5F3994();
}

uint64_t getEnumTagSinglePayload for CKDeviceCapabilityCheckResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CKDeviceCapabilityCheckResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A654074 + 4 * byte_18A83B433[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A6540A8 + 4 * byte_18A83B42E[v4]))();
}

uint64_t sub_18A6540A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A6540B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A6540B8);
  return result;
}

uint64_t sub_18A6540C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A6540CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A6540D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A6540D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CKDeviceCapabilityCheckResult()
{
  sub_18A5F3994();
}

uint64_t sub_18A6540F0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_18A619E8C(a2);
    result = MEMORY[0x18D76E7C4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_18A654130(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *);
  uint64_t v3;

  v2 = *(void (**)(uint64_t *))(v1 + 16);
  v3 = a1;
  v2(&v3);
  sub_18A5F45D8();
}

void sub_18A654194()
{
  sub_18A61007C();
}

uint64_t sub_18A6541BC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6541C8()
{
  uint64_t v0;

  return sub_18A64FB30(v0);
}

void sub_18A6541D0()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A6541D8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_18A6541E4(void *a1)
{
  free(a1);
}

uint64_t sub_18A654208()
{
  return static NSObject.== infix(_:_:)();
}

BOOL sub_18A654214@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void *sub_18A654220()
{
  size_t v0;

  return malloc(v0);
}

uint64_t sub_18A654228()
{
  uint64_t v0;

  return sub_18A64FB30(v0);
}

unint64_t sub_18A654230(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_18A654248()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A654258()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18A654260()
{
  return String.hash(into:)();
}

uint64_t sub_18A65426C(uint64_t a1)
{
  uint64_t v1;

  return sub_18A64FAE8(a1, v1);
}

uint64_t sub_18A654280()
{
  return type metadata accessor for CKDeviceCapabilityCheckOptions(0);
}

void *sub_18A654288()
{
  return malloc(0x28uLL);
}

uint64_t sub_18A6542A4()
{
  return swift_bridgeObjectRetain();
}

void sub_18A6542C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt8 v10;

  Hasher._combine(_:)(v10);
}

void sub_18A6542CC()
{
  sub_18A61007C();
}

uint64_t sub_18A6542D8()
{
  uint64_t v0;

  return v0;
}

void sub_18A6542EC()
{
  void *v0;

}

uint64_t sub_18A6542F4()
{
  uint64_t v0;

  return v0;
}

uint64_t destroy for AssetInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AssetInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AssetInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AssetInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetInfo()
{
  return &type metadata for AssetInfo;
}

uint64_t sub_18A654504(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6E676953656C6966 && a2 == 0xED00006572757461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000018A83F820
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736B6E756863 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_18A654668(char a1)
{
  if (!a1)
    return 0x6E676953656C6966;
  if (a1 == 1)
    return 0xD000000000000012;
  return 0x736B6E756863;
}

uint64_t sub_18A6546CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;
  char v13;

  v3 = v1;
  v5 = sub_18A5F101C(&qword_1EDF6BCF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_18A608B00(a1, a1[3]);
  sub_18A654B04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  sub_18A5F4260();
  if (!v2)
  {
    v12 = 1;
    sub_18A5F4260();
    v11 = *(_QWORD *)(v3 + 32);
    v10[15] = 2;
    sub_18A5F101C(&qword_1EDF6BCE0);
    sub_18A654B7C(&qword_1EDF6BD00, (uint64_t (*)(void))sub_18A654BE4, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_18A65482C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = sub_18A5F101C(&qword_1EDF6BCD0);
  MEMORY[0x1E0C80A78](v5);
  sub_18A608B00(a1, a1[3]);
  sub_18A654B04();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return sub_18A608DCC();
  v6 = sub_18A5F47B4();
  v8 = v7;
  v14 = v6;
  swift_bridgeObjectRetain();
  v9 = sub_18A5F47B4();
  v11 = v10;
  v13 = v9;
  sub_18A5F101C(&qword_1EDF6BCE0);
  sub_18A654B7C(&qword_1EDF6BCE8, (uint64_t (*)(void))sub_18A654B40, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_18A5F4900();
  swift_bridgeObjectRetain();
  sub_18A608DCC();
  sub_18A5F37A4();
  swift_bridgeObjectRelease();
  result = sub_18A5F394C();
  *a2 = v14;
  a2[1] = v8;
  a2[2] = v13;
  a2[3] = v11;
  a2[4] = v15;
  return result;
}

uint64_t sub_18A654A30()
{
  char *v0;

  return sub_18A654668(*v0);
}

uint64_t sub_18A654A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A654504(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18A654A5C()
{
  sub_18A654B04();
  return CodingKey.description.getter();
}

uint64_t sub_18A654A84()
{
  sub_18A654B04();
  return CodingKey.debugDescription.getter();
}

double sub_18A654AAC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_18A65482C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_18A654AF0(_QWORD *a1)
{
  return sub_18A6546CC(a1);
}

unint64_t sub_18A654B04()
{
  unint64_t result;

  result = qword_1EDF6BCD8;
  if (!qword_1EDF6BCD8)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BABC, &type metadata for AssetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BCD8);
  }
  return result;
}

unint64_t sub_18A654B40()
{
  unint64_t result;

  result = qword_1EDF6BCF0;
  if (!qword_1EDF6BCF0)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A8395D0, &type metadata for ChunkInfo);
    atomic_store(result, (unint64_t *)&qword_1EDF6BCF0);
  }
  return result;
}

uint64_t sub_18A654B7C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_18A619E8C(&qword_1EDF6BCE0);
    v8 = a2();
    result = MEMORY[0x18D76E7C4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18A654BE4()
{
  unint64_t result;

  result = qword_1EDF6BD08;
  if (!qword_1EDF6BD08)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A8395A8, &type metadata for ChunkInfo);
    atomic_store(result, (unint64_t *)&qword_1EDF6BD08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AssetInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18A654C6C + 4 * byte_18A83B995[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18A654CA0 + 4 * byte_18A83B990[v4]))();
}

uint64_t sub_18A654CA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A654CA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A654CB0);
  return result;
}

uint64_t sub_18A654CBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A654CC4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18A654CC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A654CD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetInfo.CodingKeys()
{
  return &type metadata for AssetInfo.CodingKeys;
}

unint64_t sub_18A654CF0()
{
  unint64_t result;

  result = qword_1EDF6BD10;
  if (!qword_1EDF6BD10)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BA94, &type metadata for AssetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BD10);
  }
  return result;
}

unint64_t sub_18A654D30()
{
  unint64_t result;

  result = qword_1EDF6BD18;
  if (!qword_1EDF6BD18)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BA04, &type metadata for AssetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BD18);
  }
  return result;
}

unint64_t sub_18A654D70()
{
  unint64_t result;

  result = qword_1EDF6BD20;
  if (!qword_1EDF6BD20)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BA2C, &type metadata for AssetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BD20);
  }
  return result;
}

uint64_t sub_18A654DAC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v4 = Data.count.getter();
  v7[0] = MEMORY[0x18D76C310](v4);
  v7[1] = v5;
  sub_18A612FA0(a1, a2);
  swift_retain();
  sub_18A6555E8((uint64_t)v7, a1, a2);
  return v7[0];
}

void sub_18A654E4C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_18A654E70()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_18A654EB8()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_18A654EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_18A654FA8(a1, a2);
  if (v3)
  {
    v4 = v3;
    sub_18A5F4910();
    sub_18A5F47C4();
    *(_QWORD *)(v2 + 16) = v4;
  }
  else
  {
    sub_18A656038();
    swift_allocError();
    swift_willThrow();
    sub_18A5F4910();
    sub_18A5F47C4();
    swift_deallocPartialClassInstance();
  }
  return v2;
}

void sub_18A654FA8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_18A654FF0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A612FA0(v2, v0);
  return sub_18A656074(v1, v3 & 0xFFFFFFFFFFFFLL, BYTE6(v3), v2, v0);
}

uint64_t sub_18A655148()
{
  uint64_t v0;

  CCCryptorRelease(*(CCCryptorRef *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChunkDataDecryptor()
{
  return objc_opt_self();
}

void sub_18A65518C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

CCCryptorRef sub_18A6551DC()
{
  CCCryptorRef *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  const void *v4;
  CCCryptorRef result;

  result = sub_18A656174(v1, v2 & 0xFFFFFFFFFFFFLL, BYTE6(v2), v4, v3, v1, v2);
  *v0 = result;
  return result;
}

void sub_18A655328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_18A655384()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[14];

  v5[3] = v5;
  swift_retain();
  v5[0] = v3;
  return sub_18A655F28(v0, v1 & 0xFFFFFFFFFFFFLL, BYTE6(v1), v2, v0, v1);
}

void sub_18A65554C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

uint64_t sub_18A655588(_CCCryptor *a1, const void *a2, int a3, int a4, uint64_t a5, void *dataOut, int a7, size_t *dataOutMoved, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return CCCryptorUpdate(a1, a2, BYTE6(a5), dataOut, BYTE6(a5), dataOutMoved);
}

void sub_18A6555E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  sub_18A612FA0(a2, a3);
  swift_retain();
  sub_18A612FA0(a2, a3);
  v6 = *(_QWORD *)(a1 + 8);
  swift_retain();
  __asm { BR              X9 }
}

uint64_t sub_18A65567C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v7 = v4;
  LOWORD(v8) = v0;
  BYTE2(v8) = BYTE2(v0);
  HIBYTE(v8) = BYTE3(v0);
  v9 = BYTE4(v0);
  v10 = BYTE5(v0);
  v11 = BYTE6(v0);
  swift_retain();
  sub_18A612FA0(v2, v1);
  swift_retain();
  sub_18A612FA0(v2, v1);
  sub_18A655B4C((uint64_t)&v7, BYTE6(v0), v2, v1);
  sub_18A60FBA4(v2, v1);
  v5 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v3 = v7;
  v3[1] = v5;
  swift_release();
  sub_18A60FBA4(v2, v1);
  swift_release();
  sub_18A60FBA4(v2, v1);
  swift_release();
  sub_18A60FBA4(v2, v1);
  return swift_release();
}

uint64_t sub_18A655A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = __DataStorage._bytes.getter();
  if (!result)
    goto LABEL_10;
  v10 = result;
  result = __DataStorage._offset.getter();
  v11 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  sub_18A655328(v10 + v11, v10 + v11 + v15, a4, a5);
  sub_18A60FBA4(a4, a5);
  return swift_release();
}

uint64_t sub_18A655B4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_18A655328(a1, a1 + a2, a3, a4);
  sub_18A60FBA4(a3, a4);
  return swift_release();
}

uint64_t sub_18A655B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = __DataStorage._bytes.getter();
  v12 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = __DataStorage._length.getter();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = v12 + v16;
  if (v12)
    v18 = v17;
  else
    v18 = 0;
  sub_18A65554C(v12, v18, a4, a5, a6);
  swift_release();
  return sub_18A60FBA4(a5, a6);
}

uint64_t sub_18A655C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_18A65518C(v11, v17, a4, a5);
  result = sub_18A60FBA4(a4, a5);
  if (!v5)
    return v18;
  return result;
}

CCCryptorRef sub_18A655D50(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  CCCryptorStatus v16;
  CCCryptorRef cryptorRef[2];

  cryptorRef[1] = *(CCCryptorRef *)MEMORY[0x1E0C80C00];
  v11 = __DataStorage._bytes.getter();
  if (v11)
  {
    v12 = v11;
    v13 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v13))
      __break(1u);
    v14 = (const void *)(v12 + a1 - v13);
  }
  else
  {
    v14 = 0;
  }
  __DataStorage._length.getter();
  cryptorRef[0] = 0;
  v15 = Data.count.getter();
  v16 = CCCryptorCreateWithMode(1u, 3u, 0, 0, a4, v14, v15, 0, 0, 0, 0, cryptorRef);
  sub_18A60FBA4(a6, a7);
  if (v16)
    return 0;
  else
    return cryptorRef[0];
}

CCCryptorRef sub_18A655E58(const void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  size_t v11;
  CCCryptorRef cryptorRef[2];

  cryptorRef[1] = *(CCCryptorRef *)MEMORY[0x1E0C80C00];
  cryptorRef[0] = 0;
  v11 = Data.count.getter();
  LODWORD(a4) = CCCryptorCreateWithMode(1u, 3u, 0, 0, a4, a1, v11, 0, 0, 0, 0, cryptorRef);
  sub_18A60FBA4(a6, a7);
  if ((_DWORD)a4)
    return 0;
  else
    return cryptorRef[0];
}

uint64_t sub_18A655F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  sub_18A65554C((uint64_t)&v9, (uint64_t)&v9 + a3, a4, a5, a6);
  swift_release();
  return sub_18A60FBA4(a5, a6);
}

unint64_t sub_18A656038()
{
  unint64_t result;

  result = qword_1EDF6BD28;
  if (!qword_1EDF6BD28)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BBB4, &type metadata for ChunkDataDecryptor.Error);
    atomic_store(result, (unint64_t *)&qword_1EDF6BD28);
  }
  return result;
}

uint64_t sub_18A656074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  sub_18A65518C((uint64_t)&v9, (uint64_t)&v9 + a3, a4, a5);
  result = sub_18A60FBA4(a4, a5);
  if (!v5)
    return v15;
  return result;
}

CCCryptorRef sub_18A656174(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  CCCryptorRef v12;
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = a1;
  v15 = a2;
  v16 = BYTE2(a2);
  v17 = BYTE3(a2);
  v18 = BYTE4(a2);
  v19 = BYTE5(a2);
  sub_18A612FA0(a6, a7);
  v12 = sub_18A655E58(&v14, (uint64_t)&v20, a3, a4, a5, a6, a7);
  sub_18A60FBA4(a6, a7);
  return v12;
}

uint64_t getEnumTagSinglePayload for ChunkDataDecryptor.Error(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ChunkDataDecryptor.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18A656340 + 4 * byte_18A83BB10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18A656360 + 4 * byte_18A83BB15[v4]))();
}

_BYTE *sub_18A656340(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18A656360(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18A656368(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18A656370(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18A656378(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18A656380(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_18A65638C()
{
  return 0;
}

ValueMetadata *type metadata accessor for ChunkDataDecryptor.Error()
{
  return &type metadata for ChunkDataDecryptor.Error;
}

unint64_t sub_18A6563A8()
{
  unint64_t result;

  result = qword_1EDF6BD30;
  if (!qword_1EDF6BD30)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BB8C, &type metadata for ChunkDataDecryptor.Error);
    atomic_store(result, (unint64_t *)&qword_1EDF6BD30);
  }
  return result;
}

CKQuery __swiftcall CKQuery.init(recordType:predicate:)(Swift::String recordType, NSPredicate *predicate)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  void *v6;
  objc_class *v7;
  NSPredicate *v8;
  NSArray *v9;
  NSString *v10;
  objc_class *v11;
  CKQuery result;

  object = recordType._object;
  countAndFlagsBits = recordType._countAndFlagsBits;
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v6 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v7 = (objc_class *)objc_msgSend(v5, sel_initWithRecordType_predicate_, v6, predicate);

  v11 = v7;
  result._recordType = v10;
  result._sortDescriptors = v9;
  result._predicate = v8;
  result.super.isa = v11;
  return result;
}

uint64_t CKQuery.recordType.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_recordType);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void (*CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.getter())(void *a1, char a2)
{
  void *v0;
  void (*result)(void *, char);
  void (*v2)(void *, char);
  uint64_t v3;
  uint64_t v4;

  result = (void (*)(void *, char))objc_msgSend(v0, sel_discoverAllUserIdentitiesCompletionBlock);
  if (result)
  {
    v2 = result;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A60A3E4;
    *(_QWORD *)(v4 + 24) = v3;
    return sub_18A60A448;
  }
  return result;
}

uint64_t sub_18A656534()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18A656558@<X0>(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  result = (uint64_t)CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.getter();
  if (result)
  {
    v4 = result;
    v5 = v3;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))result;
  return result;
}

id sub_18A6565BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  return CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter((uint64_t)v4, v3);
}

id CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  _QWORD v9[6];

  v3 = v2;
  if (!a1)
    return objc_msgSend(v2, sel_setDiscoverAllUserIdentitiesCompletionBlock_, 0);
  v6 = sub_18A5F37B4();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_18A60A504;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_18A60A50C;
  v9[3] = &unk_1E1F59E50;
  v7 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_setDiscoverAllUserIdentitiesCompletionBlock_, v7);
  _Block_release(v7);
  return (id)sub_18A60A578(a1);
}

uint64_t sub_18A656738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A656748()
{
  return swift_release();
}

id (*CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  void (*v1)(void *, char);
  void (*v3)(void *, char);

  a1[2] = v1;
  *a1 = CKDiscoverAllUserIdentitiesOperation.discoverAllUserIdentitiesResultBlock.getter();
  a1[1] = v3;
  return sub_18A656784;
}

id sub_18A656784(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) == 0)
    return sub_18A5F491C();
  sub_18A60A614(*a1);
  sub_18A5F491C();
  return (id)sub_18A60A578(v2);
}

uint64_t sub_18A6567E4()
{
  swift_release();
  return swift_deallocObject();
}

void CKQueryOperation.desiredKeys.setter(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, sel_setDesiredKeys_, isa);

}

void CKQueryOperation.recordMatchedBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = sub_18A5F3F90();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    swift_retain();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setRecordMatchedBlock_);
    _Block_release(v6);
    sub_18A657060();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setRecordMatchedBlock_);
  }
}

void CKQueryOperation.queryResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A630BE4, MEMORY[0x1E0C809B0], 1107296256, v9, v10);
    sub_18A615B60(a1);
    swift_retain();
    v8 = swift_release();
    sub_18A5F37C8(v8, sel_setQueryCompletionBlock_);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A657060();
    sub_18A657060();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setQueryCompletionBlock_);
  }
}

uint64_t CKQueryOperation.desiredKeys.getter()
{
  void *v0;

  return sub_18A61C4D8(v0);
}

void sub_18A656A20()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKQueryOperation.desiredKeys.setter(v0);
}

void CKQueryOperation.desiredKeys.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  *a1 = sub_18A61C4D8(v1);
  sub_18A5F379C();
}

void sub_18A656A7C(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CKQueryOperation.desiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKQueryOperation.desiredKeys.setter(*a1);
    sub_18A5F379C();
  }
}

void CKQueryOperation.recordMatchedBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_recordMatchedBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A61B4CC;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A656B30(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKQueryOperation.recordMatchedBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A615AB4;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A656B94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A615AA8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A615B60(v1);
  CKQueryOperation.recordMatchedBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18A656C14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A656C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A656C48()
{
  return swift_release();
}

void CKQueryOperation.recordMatchedBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKQueryOperation.recordMatchedBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A656C80(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKQueryOperation.recordMatchedBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKQueryOperation.queryResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_queryCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60C230;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A656D10(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKQueryOperation.queryResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A657008;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A656D74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A656FD0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A615B60(v1);
  CKQueryOperation.queryResultBlock.setter((uint64_t)v4, v3);
}

void sub_18A656DF4(id a1, char a2, void (*a3)(id, id))
{
  id v5;
  id v6;
  id v7;
  id v8;

  if ((a2 & 1) != 0)
  {
    v5 = a1;
    v6 = 0;
    v7 = a1;
  }
  else
  {
    v8 = a1;
    v6 = a1;
    v7 = 0;
  }
  a3(v6, v7);
  sub_18A615B4C(a1);
}

void sub_18A656E54(void *a1, void *a2, void (*a3)(void *, uint64_t))
{
  id v6;
  id v7;

  if (!a2)
    goto LABEL_4;
  swift_getErrorValue();
  v6 = a2;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a3(a1, 0);
    return;
  }
  v7 = a2;
  a3(a2, 1);

}

void sub_18A656F14(void *a1, void *a2)
{
  uint64_t v2;

  sub_18A656E54(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

void CKQueryOperation.queryResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKQueryOperation.queryResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A656F4C(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKQueryOperation.queryResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A657034, sub_18A657030);
}

uint64_t sub_18A656F68()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A656F8C(void *a1, char a2)
{
  uint64_t v2;

  sub_18A656DF4(a1, a2 & 1, *(void (**)(id, id))(v2 + 16));
}

void sub_18A656F98(uint64_t *a1@<X8>)
{
  *a1 = CKQueryOperation.desiredKeys.getter();
  sub_18A5F379C();
}

uint64_t sub_18A656FD0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

void sub_18A657008(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  sub_18A5F379C();
}

uint64_t sub_18A657060()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A615B5C(v1, v0);
}

void sub_18A65706C(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = a1 + 48;
    v20 = *(_QWORD *)(a1 + 16);
    v17 = v3 - 1;
    v6 = MEMORY[0x1E0DEE9D8];
    v18 = a1 + 48;
    do
    {
      v19 = v6;
      v7 = (uint64_t *)(v5 + 24 * v4);
      v8 = v4;
      while (1)
      {
        if (v8 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v9 = (void *)*(v7 - 2);
        v10 = *(v7 - 1);
        v4 = v8 + 1;
        v11 = *v7;
        sub_18A60B8D0(0, &qword_1EDF6A970);
        v12 = v9;
        swift_bridgeObjectRetain();
        v13 = objc_msgSend(v12, sel_zoneID);
        v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) != 0)
          break;
        swift_bridgeObjectRelease();

        v7 += 3;
        ++v8;
        if (v20 == v4)
          goto LABEL_13;
      }
      v6 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A60FFF0();
        v6 = v19;
      }
      v15 = *(_QWORD *)(v6 + 16);
      if (v15 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_18A60FFF0();
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v15 + 1;
      v16 = (_QWORD *)(v6 + 24 * v15);
      v16[4] = v12;
      v16[5] = v10;
      v16[6] = v11;
      v5 = v18;
    }
    while (v17 != v8);
  }
LABEL_13:

  swift_bridgeObjectRelease();
}

void sub_18A657234(uint64_t a1, void *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = MEMORY[0x1E0DEE9D8];
    do
    {
      v14 = v6;
      v7 = v5;
      while (1)
      {
        if (v7 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v8 = *(void **)(a1 + 32 + 8 * v7);
        v5 = v7 + 1;
        sub_18A60B8D0(0, &qword_1EDF6A970);
        v9 = v8;
        v10 = objc_msgSend(v9, sel_zoneID);
        v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;

        ++v7;
        if (v4 == v5)
          goto LABEL_13;
      }
      v6 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A60FFD4();
        v6 = v14;
      }
      v12 = *(_QWORD *)(v6 + 16);
      v13 = v12 + 1;
      if (v12 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_18A60FFD4();
        v13 = v12 + 1;
        v6 = v14;
      }
      *(_QWORD *)(v6 + 16) = v13;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v9;
    }
    while (v4 - 1 != v7);
  }
LABEL_13:

  swift_bridgeObjectRelease();
}

void *sub_18A6573CC(void *a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  void *v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  uint64_t v16;
  void *v22;
  void *v23;

  v23 = a1;
  v12 = a1;
  if (a2 >> 62)
    goto LABEL_13;
  v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v15 = (a2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D76CEB0](i - 4, a2) : *(id *)(a2 + 8 * i);
      v12 = v15;
      v16 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v22 = v15;
      sub_18A658224((uint64_t)&v23, &v22, a3, a4, a5, a6, a7, a8);
      if (v8)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v12;
      }

      if (v16 == v13)
      {
        swift_bridgeObjectRelease();
        return v23;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t CKDatabase.recordZoneChanges(inZonesWith:configurations:shouldFetchAssetContents:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A657530()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  _QWORD *v4;

  v1 = *(void **)(v0 + 32);
  *(_QWORD *)(v0 + 40) = objc_msgSend(v1, sel_implementation);
  v2 = objc_msgSend(v1, sel_container);
  v3 = objc_msgSend(v2, sel_convenienceConfiguration);
  *(_QWORD *)(v0 + 48) = v3;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = sub_18A6575F4;
  return sub_18A6576B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 32), (uint64_t)v3);
}

uint64_t sub_18A6575F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v6;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_18A5F3840();
    return swift_task_switch();
  }
  else
  {
    v6 = *(void **)(v4 + 40);

    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
  }
}

uint64_t sub_18A657680()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A6576B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 56) = v5;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a4;
  *(_BYTE *)(v6 + 152) = a3;
  *(_QWORD *)(v6 + 24) = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A6576D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CKFetchRecordZoneChangesOperation *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::OpaquePointer_optional v23;
  Swift::OpaquePointer_optional v24;

  v22 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 32);
  v20 = *(_QWORD *)(v0 + 40);
  v21 = *(_QWORD *)(v0 + 56);
  v2 = *(unsigned __int8 *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 24);
  sub_18A60B8D0(0, &qword_1EDF6A328);
  swift_bridgeObjectRetain();
  v23.value._rawValue = (void *)swift_bridgeObjectRetain();
  v23.is_nil = v1;
  CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v4, v23, v24);
  v6 = v5;
  *(_QWORD *)(v0 + 64) = v5;
  objc_msgSend(v5, sel_setFetchAllChanges_, 0);
  objc_msgSend(v6, sel_setShouldFetchAssetContents_, v2);
  v7 = sub_18A5F37BC();
  *(_QWORD *)(v0 + 72) = v7;
  v8 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v7 + 16) = MEMORY[0x1E0DEE9E0];
  v9 = sub_18A5F37BC();
  *(_QWORD *)(v0 + 80) = v9;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v9 + 16) = MEMORY[0x1E0DEE9D8];
  v11 = sub_18A5F37BC();
  *(_QWORD *)(v0 + 88) = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = sub_18A5F37BC();
  *(_QWORD *)(v0 + 96) = v12;
  *(_QWORD *)(v12 + 16) = v8;
  v13 = sub_18A5F37BC();
  *(_QWORD *)(v0 + 104) = v13;
  *(_QWORD *)(v13 + 16) = v8;
  v14 = sub_18A5F37BC();
  *(_QWORD *)(v0 + 112) = v14;
  *(_QWORD *)(v14 + 16) = v8;
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter((uint64_t)sub_18A657B18);
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter((uint64_t)sub_18A649728, v9);
  swift_retain();
  CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter((uint64_t)sub_18A657BA4, v11);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v12;
  v15[3] = v13;
  v15[4] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter((uint64_t)sub_18A657D08);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v16;
  v16[2] = v6;
  v16[3] = v3;
  v16[4] = v14;
  v16[5] = v12;
  v16[6] = v7;
  v16[7] = v9;
  v16[8] = v11;
  v16[9] = v13;
  v16[10] = v21;
  v16[11] = v20;
  v16[12] = v22;
  v17 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v17;
  *(_QWORD *)(v17 + 16) = v6;
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v18;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A280);
  *v18 = v0;
  v18[1] = sub_18A657970;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t sub_18A657970()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  sub_18A5F3840();
  return sub_18A5F3A94();
}

uint64_t sub_18A6579D8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18A657A58()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A657AF4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_18A657B18(void *a1, void *a2, char a3)
{
  sub_18A648BCC(a1, a2, a3 & 1);
}

uint64_t sub_18A657B24(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  v4 = a1;
  sub_18A651DD4();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  sub_18A651E88(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  *(_QWORD *)(v6 + 8 * v5 + 32) = v4;
  return swift_endAccess();
}

uint64_t sub_18A657BA4(void *a1)
{
  uint64_t v1;

  return sub_18A657B24(a1, v1);
}

void sub_18A657BAC(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  id v12;

  if ((a5 & 0x100) != 0)
  {
    swift_beginAccess();
    v12 = a1;
    sub_18A658D5C(a2, a3, a4, a5, 1);
    sub_18A69E570((uint64_t)a2, (uint64_t)v12);
    swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    v8 = a2;
    v9 = a1;
    sub_18A69E5BC();
    swift_endAccess();

    swift_beginAccess();
    sub_18A69E57C(a5 & 1, v9);
    swift_endAccess();

  }
}

uint64_t sub_18A657CD4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_18A657D08(void *a1, void *a2, uint64_t a3, unint64_t a4, __int16 a5)
{
  sub_18A657BAC(a1, a2, a3, a4, a5 & 0x1FF);
}

uint64_t sub_18A657D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 104) = v12;
  *(_OWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_18A657D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v2;
  v3 = *(_OWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 72);
  v6 = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 80) = v6;
  *(_QWORD *)(v2 + 96) = v1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v7;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A280);
  *v7 = v0;
  v7[1] = sub_18A657E18;
  sub_18A5F3840();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18A657E18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A5F3A94();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_18A657E80()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A657EAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_18A657F64;
  return sub_18A657D20(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_18A657F64()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v2 + 8));
}

id sub_18A657FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a7;
  v36 = a8;
  v33 = a5;
  v34 = a6;
  v30 = a3;
  v39 = a12;
  v40 = a11;
  v37 = a2;
  v38 = a10;
  v31 = a9;
  v32 = a4;
  v13 = sub_18A5F101C((uint64_t *)&unk_1EDF6A298);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v29 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v22 + v17, v16, v13);
  *(_QWORD *)(v22 + v29) = v30;
  v23 = v33;
  *(_QWORD *)(v22 + v28) = v32;
  *(_QWORD *)(v22 + v18) = v23;
  v24 = v35;
  *(_QWORD *)(v22 + v19) = v34;
  *(_QWORD *)(v22 + v20) = v24;
  *(_QWORD *)(v22 + v21) = v36;
  *(_QWORD *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v31;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v25 = v37;
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter((uint64_t)sub_18A658630);
  return objc_msgSend(v38, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_, v25, v40, v39);
}

uint64_t sub_18A658170(void *a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v11;

  if ((a2 & 1) != 0)
  {
    v11 = a1;
    sub_18A5F101C((uint64_t *)&unk_1EDF6A298);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_18A6573CC(MEMORY[0x1E0DEE9E0], a4, (uint64_t *)(a5 + 16), (uint64_t *)(a6 + 16), a7 + 16, a8 + 16, a9 + 16, (uint64_t *)(a10 + 16));
    sub_18A5F101C((uint64_t *)&unk_1EDF6A298);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_18A658224(uint64_t a1, void **a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  char v36;
  unsigned __int8 v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __int16 v44;

  v11 = *a2;
  swift_beginAccess();
  v12 = *a3;
  v13 = v11;
  sub_18A6A8724((uint64_t)v13, v12);
  v15 = v14;

  if (v15)
  {
    swift_endAccess();
    v40 = (uint64_t)v15;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 256;
    v16 = v13;
    v17 = v15;
    sub_18A69E630((uint64_t)&v40, v16);

    return;
  }
  swift_endAccess();
  swift_beginAccess();
  v18 = *a4;
  v19 = v13;
  v20 = sub_18A6A8764(v19, v18);

  if (!v20)
  {
    swift_endAccess();
    v38 = v19;
    v40 = related decl 'e' for CKErrorCode.init(_:description:)(1, 0xD000000000000021, 0x800000018A83F920);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 256;
    sub_18A69E630((uint64_t)&v40, v38);

    return;
  }
  swift_endAccess();
  swift_beginAccess();
  v21 = v19;
  v22 = swift_bridgeObjectRetain();
  v23 = sub_18A6586EC(v22, v21);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = v21;
  v25 = swift_bridgeObjectRetain();
  sub_18A65706C(v25, v24);
  v27 = v26;
  swift_beginAccess();
  v28 = v24;
  v29 = swift_bridgeObjectRetain();
  sub_18A657234(v29, v28);
  v31 = v30;
  swift_beginAccess();
  v32 = *a8;
  if (!*(_QWORD *)(*a8 + 16))
  {
    v39 = v20;
LABEL_10:
    v37 = 0;
    goto LABEL_11;
  }
  v33 = v28;
  v34 = v20;
  sub_18A62E990();
  if ((v36 & 1) == 0)
  {

    goto LABEL_10;
  }
  v37 = *(_BYTE *)(*(_QWORD *)(v32 + 56) + v35);

LABEL_11:
  swift_endAccess();
  v40 = v23;
  v41 = v27;
  v42 = v31;
  v43 = v20;
  v44 = v37;
  sub_18A69E630((uint64_t)&v40, v28);

}

id sub_18A6584F4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

id sub_18A658504(uint64_t a1)
{
  uint64_t v1;

  return sub_18A657FA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(void **)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_18A658540()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_18A5F101C((uint64_t *)&unk_1EDF6A298);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A658630(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(sub_18A5F101C((uint64_t *)&unk_1EDF6A298) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_18A658170(a1, v4, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v8), *(_QWORD *)(v2 + v9), *(_QWORD *)(v2 + v10), *(_QWORD *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2+ ((((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_18A6586EC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  void *v8;
  unint64_t *v9;
  id v10;
  uint64_t v11;
  unint64_t *v12;
  id v13;
  uint64_t v14;
  _QWORD v16[2];

  v3 = a1;
  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v9 = (_QWORD *)((char *)v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_18A6217B0(0, v6, v9);
    v10 = v8;
    sub_18A658898(v9, v6, v3, v10);
    if (v2)
      swift_willThrow();
    else
      v3 = v11;

  }
  else
  {
    v12 = (unint64_t *)swift_slowAlloc();
    sub_18A6217B0(0, v6, v12);
    v13 = v8;
    sub_18A658898(v12, v6, v3, v13);
    v3 = v14;
    MEMORY[0x18D76E86C](v12, -1, -1);

  }
  return v3;
}

void sub_18A658898(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;

  v20 = a2;
  v22 = 0;
  v5 = 0;
  v23 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v11 >= v24)
      goto LABEL_24;
    v12 = *(_QWORD *)(v23 + 8 * v11);
    ++v5;
    if (!v12)
    {
      v5 = v11 + 1;
      if (v11 + 1 >= v24)
        goto LABEL_24;
      v12 = *(_QWORD *)(v23 + 8 * v5);
      if (!v12)
      {
        v5 = v11 + 2;
        if (v11 + 2 >= v24)
          goto LABEL_24;
        v12 = *(_QWORD *)(v23 + 8 * v5);
        if (!v12)
          break;
      }
    }
LABEL_19:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_20:
    v14 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v10);
    v15 = *(void **)(*(_QWORD *)(a3 + 56) + 16 * v10);
    sub_18A60B8D0(0, &qword_1EDF6A970);
    v16 = v14;
    sub_18A634B64(v15);
    v17 = objc_msgSend(v16, sel_zoneID, v20);
    v18 = static NSObject.== infix(_:_:)();

    sub_18A615B4C(v15);
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        sub_18A658AD8(a1, v20, v22, a3);

        return;
      }
    }
  }
  v13 = v11 + 3;
  if (v13 >= v24)
    goto LABEL_24;
  v12 = *(_QWORD *)(v23 + 8 * v13);
  if (v12)
  {
    v5 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v24)
      goto LABEL_24;
    v12 = *(_QWORD *)(v23 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_18A658AD8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  char v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v34;
  uint64_t v35;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_18A5F101C(&qword_1EDF6A178);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v34 = a1;
  v35 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v35)
        return v9;
      v16 = v34[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v35)
          return v9;
        v16 = v34[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v35)
            return v9;
          v16 = v34[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v35)
              return v9;
            v16 = v34[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v35)
                  return v9;
                v16 = v34[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v19 = *(_QWORD *)(v4 + 56) + 16 * v14;
    v20 = *(void **)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v9 + 40);
    v23 = v18;
    sub_18A634B64(v20);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v9 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      break;
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v27) = v23;
    v32 = *(_QWORD *)(v9 + 56) + 16 * v27;
    *(_QWORD *)v32 = v20;
    *(_BYTE *)(v32 + 8) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    if (!v5)
      return v9;
  }
  v28 = 0;
  v29 = (unint64_t)(63 - v24) >> 6;
  while (++v26 != v29 || (v28 & 1) == 0)
  {
    v30 = v26 == v29;
    if (v26 == v29)
      v26 = 0;
    v28 |= v30;
    v31 = *(_QWORD *)(v12 + 8 * v26);
    if (v31 != -1)
    {
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id sub_18A658D5C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  id v8;

  if ((a5 & 1) != 0)
    return a1;
  v8 = a1;
  return (id)sub_18A612F8C(a2, a3);
}

void CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = sub_18A5F3F90();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A659240, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    swift_retain();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setPerShareMetadataBlock_);
    _Block_release(v6);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerShareMetadataBlock_);
  }
}

void CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A60A50C, MEMORY[0x1E0C809B0], 1107296256, v9, v10);
    sub_18A60A614(a1);
    swift_retain();
    v8 = swift_release();
    sub_18A5F37C8(v8, sel_setFetchShareMetadataCompletionBlock_);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setFetchShareMetadataCompletionBlock_);
  }
}

uint64_t CKFetchShareMetadataOperation.rootRecordDesiredKeys.getter()
{
  void *v0;

  return sub_18A659528(v0);
}

void sub_18A658F50()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(v0);
}

void CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, sel_setRootRecordDesiredKeys_, isa);

}

void CKFetchShareMetadataOperation.rootRecordDesiredKeys.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  *a1 = sub_18A659528(v1);
  sub_18A5F379C();
}

void sub_18A65900C(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchShareMetadataOperation.rootRecordDesiredKeys.setter(*a1);
    sub_18A5F379C();
  }
}

void CKFetchShareMetadataOperation.perShareMetadataResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perShareMetadataBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A65957C;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A6590C0(void (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  CKFetchShareMetadataOperation.perShareMetadataResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A6595E0;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t, uint64_t))v2;
}

void sub_18A659124(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60AECC;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter((uint64_t)v4, v3);
}

void sub_18A6591A4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, NSURL *a4@<X8>)
{
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  URL._bridgeToObjectiveC()(a4);
  v8 = v7;
  if (a2)
    v9 = _convertErrorToNSError(_:)();
  else
    v9 = 0;
  v10 = (id)v9;
  (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, a1);

}

uint64_t sub_18A65921C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A659240(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, void *, void *);
  id v12;
  id v13;
  uint64_t v15;

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, void *, void *))(a1 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v12 = a3;
  v13 = a4;
  v11(v10, a3, a4);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_18A659320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A659330()
{
  return swift_release();
}

void CKFetchShareMetadataOperation.perShareMetadataResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchShareMetadataOperation.perShareMetadataResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A659368(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchShareMetadataCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60A3E4;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A6593F8(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A65945C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter((uint64_t)v4, v3);
}

void CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A65950C(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A659528(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_rootRecordDesiredKeys);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18A65957C(uint64_t a1@<X1>, uint64_t a2@<X2>, NSURL *a3@<X8>)
{
  uint64_t v3;

  sub_18A6591A4(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_18A659584()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A6595A8(uint64_t *a1@<X8>)
{
  *a1 = CKFetchShareMetadataOperation.rootRecordDesiredKeys.getter();
  sub_18A5F379C();
}

void sub_18A6595E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  sub_18A5F379C();
}

void __swiftcall CKFetchSubscriptionsOperation.init(subscriptionIDs:)(CKFetchSubscriptionsOperation *__return_ptr retstr, Swift::OpaquePointer subscriptionIDs)
{
  id v2;
  Class isa;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithSubscriptionIDs_, isa);

}

void CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v5 = sub_18A5F37B4();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A659864, MEMORY[0x1E0C809B0], 1107296256, v7, v8);
    sub_18A5F3964();
    v6 = sub_18A5F438C();
    sub_18A5F37C8(v6, sel_setPerSubscriptionCompletionBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerSubscriptionCompletionBlock_);
  }
}

void CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F37B4();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A659E44, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A60A614(a1);
    swift_retain();
    v7 = sub_18A5F438C();
    sub_18A5F37C8(v7, sel_setFetchSubscriptionCompletionBlock_);
    sub_18A5F3838();
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setFetchSubscriptionCompletionBlock_);
  }
}

void sub_18A659830(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a3(*a1, a1[1], *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  sub_18A5F379C();
}

void sub_18A659864(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void (*v6)(uint64_t, uint64_t, void *, void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  v6 = *(void (**)(uint64_t, uint64_t, void *, void *))(a1 + 32);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;
  swift_retain();
  v11 = a3;
  v10 = a4;
  v6(v7, v9, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t CKFetchSubscriptionsOperation.subscriptionIDs.getter()
{
  void *v0;

  return sub_18A65A22C(v0);
}

void sub_18A659908()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  CKFetchSubscriptionsOperation.subscriptionIDs.setter(v0);
}

void CKFetchSubscriptionsOperation.subscriptionIDs.setter(uint64_t a1)
{
  void *v1;
  Class isa;

  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v1, sel_setSubscriptionIDs_, isa);

}

void CKFetchSubscriptionsOperation.subscriptionIDs.modify(uint64_t *a1)
{
  void *v1;

  a1[1] = (uint64_t)v1;
  *a1 = sub_18A65A22C(v1);
  sub_18A5F379C();
}

void sub_18A6599C4(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    CKFetchSubscriptionsOperation.subscriptionIDs.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchSubscriptionsOperation.subscriptionIDs.setter(*a1);
    sub_18A5F379C();
  }
}

void CKFetchSubscriptionsOperation.perSubscriptionResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perSubscriptionCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A64BC40;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A659A80(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t);

  CKFetchSubscriptionsOperation.perSubscriptionResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BD0C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A659AE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A64BD00;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18A659B64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A659B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A659B98()
{
  return swift_release();
}

void CKFetchSubscriptionsOperation.perSubscriptionResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchSubscriptionsOperation.perSubscriptionResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A659BD0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_fetchSubscriptionCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A659C48(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *);

  CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A65A2F8;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A659CAC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A615A74;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.setter((uint64_t)v4);
}

void CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
  {
    sub_18A5F3938((uint64_t)sub_18A659E44, MEMORY[0x1E0C809B0], 1107296256, v1, v2);
    sub_18A5F3964();
    a1 = sub_18A5F438C();
  }
  sub_18A5F37C8(a1, sel_setFetchSubscriptionCompletionBlock_);
  sub_18A5F3AA8();
  sub_18A5F3838();
  sub_18A5F3DE4();
}

void sub_18A659DB0(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    sub_18A64A794();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

uint64_t sub_18A659E44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A64A794();
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A659F00(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchSubscriptionsOperation.fetchSubscriptionCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchSubscriptionCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F37B4();
    *(_QWORD *)(v4 + 16) = sub_18A65A31C;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A659F98(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A659FFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter((uint64_t)v4, v3);
}

void sub_18A65A07C(void *a1, char a2, void (*a3)(void))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    ((void (*)(_QWORD, void *))a3)(0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    sub_18A64A794();
    Dictionary.init(dictionaryLiteral:)();
    a3();
    swift_bridgeObjectRelease();
  }
}

void CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A65A210(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A65A22C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_subscriptionIDs);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18A65A280()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A65A2A4(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A659DB0(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_18A65A2AC(void *a1, char a2)
{
  uint64_t v2;

  sub_18A65A07C(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

void sub_18A65A2B8(uint64_t *a1@<X8>)
{
  *a1 = CKFetchSubscriptionsOperation.subscriptionIDs.getter();
  sub_18A5F379C();
}

void sub_18A65A2F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
  sub_18A5F379C();
}

void sub_18A65A35C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[6];

  v3 = type metadata accessor for SHA256();
  v4 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for SHA256Digest();
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v11 - v7;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  v9 = __DataStorage.init(capacity:)();
  v11[4] = 0;
  v11[5] = v9 | 0x4000000000000000;
  sub_18A65A77C(129);
  sub_18A65A828();
  sub_18A5F4270();
  v10 = (char *)&loc_18A65A47C + dword_18A65A6EC[a2 >> 62];
  v11[2] = v8;
  __asm { BR              X10 }
}

uint64_t sub_18A65A490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_18A619C58();
  sub_18A5F4928(v3);
  sub_18A5F3BE8();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  sub_18A61627C(v4);
  v6 = v5;
  v7 = sub_18A5F4270();
  return ((uint64_t (*)(uint64_t))((char *)&loc_18A65A58C + dword_18A65A6FC[v6 >> 62]))(v7);
}

uint64_t sub_18A65A59C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  sub_18A619C58();
  sub_18A5F4928(v3);
  v5 = *(_QWORD *)(v4 - 112);
  sub_18A5F3BE8();
  v2(v1, v0);
  sub_18A5F4928(v3);
  v6 = sub_18A61627C(v5);
  v8 = v7;
  v9 = sub_18A65A70C(20, v6, v7);
  v11 = v10;
  sub_18A60FBA4(v6, v8);
  Data.append(_:)();
  sub_18A60FBA4(v9, v11);
  return *(_QWORD *)(v4 - 96);
}

uint64_t sub_18A65A70C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, unint64_t))((char *)&loc_18A65A728
                                                                             + dword_18A65A76C[a3 >> 62]))(0, a1, a2, a3);
}

uint64_t sub_18A65A73C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    JUMPOUT(0x18A65A76CLL);
  }
  return Data._Representation.subscript.getter();
}

uint64_t sub_18A65A77C(char a1)
{
  _QWORD v3[3];
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = sub_18A5F101C(&qword_1EDF6B1F0);
  v5 = sub_18A65A868();
  LOBYTE(v3[0]) = a1;
  sub_18A608B00(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return sub_18A608B60((uint64_t)v3);
}

unint64_t sub_18A65A828()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6B198;
  if (!qword_1EDF6B198)
  {
    v1 = type metadata accessor for SHA256();
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0CA9930], v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6B198);
  }
  return result;
}

unint64_t sub_18A65A868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6B1F8;
  if (!qword_1EDF6B1F8)
  {
    v1 = sub_18A619E8C(&qword_1EDF6B1F0);
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0CB25E0], v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6B1F8);
  }
  return result;
}

uint64_t sub_18A65A8AC()
{
  return 0;
}

BOOL static CKAsyncSerialQueue.OrderingPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CKAsyncSerialQueue.OrderingPolicy.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CKAsyncSerialQueue.OrderingPolicy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void CKAsyncSerialQueue.ordering.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 112);
}

uint64_t CKAsyncSerialQueue.queueDepth.getter()
{
  uint64_t v0;

  sub_18A5F40A4();
  return *(_QWORD *)(*(_QWORD *)(v0 + 136) + 24);
}

void CKAsyncSerialQueue.__allocating_init(ordering:)(char *a1)
{
  swift_allocObject();
  CKAsyncSerialQueue.init(ordering:)(a1);
  sub_18A5F379C();
}

void CKAsyncSerialQueue.init(ordering:)(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = *(_QWORD *)_emptyDequeStorage.unsafeMutableAddressor();
  *(_BYTE *)(v1 + 112) = v2;
  swift_retain();
  sub_18A5F379C();
}

uint64_t CKAsyncSerialQueue.run<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_18A65EFA8();
  v5 = swift_task_alloc();
  v6 = (_QWORD *)sub_18A5F3D3C(v5);
  *v6 = v2;
  v6[1] = sub_18A62384C;
  return sub_18A5F3BF4(v4, 0, v3, v1, v0);
}

uint64_t sub_18A65AA60(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 120) = a5;
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)(v6 + 104) = a3;
  *(_QWORD *)(v6 + 112) = a4;
  *(_BYTE *)(v6 + 208) = a2;
  *(_QWORD *)(v6 + 96) = a1;
  *(_QWORD *)(v6 + 136) = *v5;
  return sub_18A5F4434();
}

uint64_t sub_18A65AA88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  int *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 *inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = sub_18A65B10C();
  sub_18A674F24(v1, v2);
  LOBYTE(v1) = v3;
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    v11 = *(_QWORD *)(v0 + 128);
    sub_18A5F40A4();
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 136) + 24);
    v13 = *(_QWORD *)(v0 + 128);
    if (v12 || (*(_BYTE *)(v13 + 128) & 1) != 0)
    {
      v14 = *(_QWORD *)(v13 + 120);
      if (!__OFADD__(v14, 1))
      {
        v15 = *(_BYTE *)(v0 + 208);
        *(_QWORD *)(v13 + 120) = v14 + 1;
        v16 = sub_18A65EF14();
        *(_QWORD *)(v0 + 152) = v16;
        *(_BYTE *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = v13;
        *(_QWORD *)(v16 + 32) = v14;
        v17 = sub_18A65EF14();
        *(_QWORD *)(v0 + 160) = v17;
        *(_BYTE *)(v17 + 16) = v15;
        *(_QWORD *)(v17 + 24) = v13;
        *(_QWORD *)(v17 + 32) = v14;
        sub_18A65EAFC(&qword_1EDF6A520, v18, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v19 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 168) = v19;
        *v19 = v0;
        v19[1] = sub_18A65AE0C;
        return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
      }
      __break(1u);
    }
    else
    {
      *(_BYTE *)(v13 + 128) = 1;
      if ((*(_BYTE *)(v0 + 208) & 1) != 0)
        static Task<>.checkCancellation()();
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_14;
    }
    swift_once();
LABEL_14:
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    inited = (__n128 *)swift_initStackObject();
    *(_QWORD *)(v0 + 88) = sub_18A65EF54(inited, (__n128)xmmword_18A83AC30);
    v21 = sub_18A65EF14();
    sub_18A5F4144(v21, v22, v23, v24, v25, v26, v27, v28, v29);
    sub_18A65EAFC(&qword_1EDF6A520, v30, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v31;
    sub_18A65EF3C(v31);
    sub_18A65EEEC();
    return sub_18A65EED8();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  sub_18A60990C(v4, (uint64_t)qword_1EDF6A630);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_18A5C5000, v5, v6, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.", v7, 2u);
    MEMORY[0x18D76E86C](v7, -1, -1);
  }
  v8 = *(int **)(v0 + 104);

  v32 = (uint64_t (*)(_QWORD))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v9;
  *v9 = v0;
  v9[1] = sub_18A65ADCC;
  return v32(*(_QWORD *)(v0 + 96));
}

uint64_t sub_18A65ADCC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A65AE0C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18A5F4328();
  *v3 = *v2;
  *(_QWORD *)(v0 + 176) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A65AE78()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 128) + 128) != 1)
    __break(1u);
  if (*(_BYTE *)(v0 + 208) == 1 && (v1 = *(_QWORD *)(v0 + 176), static Task<>.checkCancellation()(), v1))
  {
    sub_18A65EF0C();
    return sub_18A65EEC4(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    inited = (__n128 *)swift_initStackObject();
    *(_QWORD *)(v0 + 88) = sub_18A65EF54(inited, (__n128)xmmword_18A83AC30);
    v4 = sub_18A65EF14();
    sub_18A5F4144(v4, v5, v6, v7, v8, v9, v10, v11, v12);
    sub_18A65EAFC(&qword_1EDF6A520, v13, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v14;
    sub_18A65EF3C(v14);
    sub_18A65EEEC();
    return sub_18A65EED8();
  }
}

uint64_t sub_18A65AFB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18A5F4328();
  *v3 = *v2;
  *(_QWORD *)(v0 + 200) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18A65B02C()
{
  uint64_t v0;

  sub_18A65EF0C();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A65B054()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A65B088()
{
  uint64_t v0;

  sub_18A65EF0C();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CKAsyncSerialQueue.runUnlessCancelled<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_18A65EFA8();
  v5 = swift_task_alloc();
  v6 = (_QWORD *)sub_18A5F3D3C(v5);
  *v6 = v2;
  v6[1] = sub_18A61F768;
  return sub_18A5F3BF4(v4, 1, v3, v1, v0);
}

uint64_t sub_18A65B10C()
{
  uint64_t v1;

  if (qword_1EDF6A4E0 != -1)
    swift_once();
  TaskLocal.get()();
  return v1;
}

uint64_t sub_18A65B168(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a3;
  *(_QWORD *)(v4 + 24) = a4;
  *(_BYTE *)(v4 + 56) = a2;
  return sub_18A5F4434();
}

uint64_t sub_18A65B180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (*(_BYTE *)(v2 + 56) == 1)
    static Task<>.checkCancellation()();
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  sub_18A65EAFC(&qword_1EDF6A520, a2, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
  v5 = swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 40) = v6;
  *v6 = v2;
  v6[1] = sub_18A65B280;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18A65B280()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18A5F4328();
  *v3 = *v2;
  *(_QWORD *)(v0 + 48) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A65B2E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A65B2F0()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A65B31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = sub_18A5F101C(&qword_1EDF6A3D0);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v11 = (uint64_t *)((char *)&v35 - v10);
  v12 = type metadata accessor for TaskPriority();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - v17;
  v19 = *(_BYTE *)(a2 + 112);
  v20 = (uint64_t *)(a2 + 136);
  if ((v19 & 1) != 0)
  {
    static Task<>.currentPriority.getter();
    v21 = (char *)v9 + *(int *)(v6 + 48);
    v22 = (char *)v9 + *(int *)(v6 + 64);
    *v9 = a3;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v16, v12);
    v23 = sub_18A5F101C((uint64_t *)&unk_1EDF6A3E8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, a1, v23);
    swift_beginAccess();
    v24 = *(_QWORD *)(*v20 + 24);
    v25 = v24 + 1;
    if (!__OFADD__(v24, 1))
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = *v20;
      if (*(_QWORD *)(*v20 + 16) < v25 || (isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_18A65D84C(v25, 0);
        v27 = *v20;
      }
      sub_18A65DA40((_QWORD *)(v27 + 16), v27 + ((*(unsigned __int8 *)(v36 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)), (uint64_t)v9);
      swift_endAccess();
      sub_18A60FCC4((uint64_t)v9, &qword_1EDF6A3D0);
      swift_beginAccess();
      sub_18A65B614(v20);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      return;
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  static TaskPriority.low.getter();
  v28 = (char *)v11 + *(int *)(v6 + 48);
  v29 = (char *)v11 + *(int *)(v6 + 64);
  *v11 = a3;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v28, v18, v12);
  v30 = sub_18A5F101C((uint64_t *)&unk_1EDF6A3E8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v29, a1, v30);
  swift_beginAccess();
  v31 = *(_QWORD *)(*v20 + 24);
  v32 = v31 + 1;
  if (__OFADD__(v31, 1))
    goto LABEL_14;
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v34 = *v20;
  if (*(_QWORD *)(*v20 + 16) < v32 || (v33 & 1) == 0)
  {
    sub_18A65D84C(v32, 0);
    v34 = *v20;
  }
  sub_18A65DA40((_QWORD *)(v34 + 16), v34 + ((*(unsigned __int8 *)(v36 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)), (uint64_t)v11);
  swift_endAccess();
  sub_18A60FCC4((uint64_t)v11, &qword_1EDF6A3D0);
}

void sub_18A65B614(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  unint64_t v37;
  uint64_t v38;
  char v39;
  size_t v40;

  v3 = sub_18A5F101C(&qword_1EDF6A3D0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_18A65E0C4();
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 40) & ~v7;
  sub_18A65EB7C((_QWORD *)(*a1 + 16), *a1 + v8);
  if (!v1 && (v9 & 1) != 0)
  {
    v10 = *a1;
    v32 = (_QWORD *)(*a1 + 16);
    v11 = *(_QWORD **)(v10 + 24);
    swift_retain();
    v12 = sub_18A651CC8((uint64_t)v11);
    v30 = v10;
    v31 = v12;
    v14 = v13;
    sub_18A65DCC8(v32, v10 + v8, (uint64_t)&v33);
    v15 = v34;
    if (v34 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v29 = v14;
    v32 = v11;
    sub_18A65EC18(v33, v34, 0, v34, v14);
    sub_18A65ED70((uint64_t)&v35, (uint64_t)v36, &qword_1EDF69480);
    sub_18A65ED70((uint64_t)v36, (uint64_t)&v37, &qword_1EDF69480);
    if ((v39 & 1) != 0)
    {
      v16 = v32;
    }
    else
    {
      v17 = v15 + v38;
      if (__OFADD__(v15, v38))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v16 = v32;
      if (v17 < v15)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      sub_18A65EC18(v37, v38, v15, v15 + v38, v29);
      v15 = v17;
    }
    if ((uint64_t)v16 < v15)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v18 = v31;
    *(_QWORD *)(v31 + 16) = v15;
    swift_release();
    v40 = v18;
    sub_18A65B8C4(&v40);
    v19 = v40;
    v20 = *(_QWORD *)(*a1 + 24);
    if (v20 < 0)
    {
LABEL_36:
      __break(1u);
      return;
    }
    if (v20)
    {
      v21 = *(_QWORD *)(v40 + 16);
      if (v21)
      {
        v22 = 0;
        v31 = v20 - 1;
        v32 = (_QWORD *)(v40 + ((v7 + 32) & ~v7));
        v23 = v21 - 1;
        while (v22 < *(_QWORD *)(v19 + 16))
        {
          v24 = *(_QWORD *)(v4 + 72);
          sub_18A65EAB4((uint64_t)v32 + v24 * v22, (uint64_t)v6);
          if ((int64_t)v22 >= *(_QWORD *)(*a1 + 24))
            goto LABEL_31;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_18A65E0C4();
          v25 = *(_QWORD *)(*a1 + 32);
          if ((int64_t)(v22 + v25) >= *(_QWORD *)(*a1 + 16))
            v26 = *(_QWORD *)(*a1 + 16);
          else
            v26 = 0;
          sub_18A65EDB0((uint64_t)v6, *a1 + v8 + (v22 + v25 - v26) * v24);
          sub_18A60FCC4((uint64_t)v6, &qword_1EDF6A3D0);
          v27 = v31 == v22 || v23 == v22;
          ++v22;
          if (v27)
            goto LABEL_28;
        }
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
LABEL_28:
    swift_release();
  }
}

void sub_18A65B8C4(size_t *a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_18A65EB54(v3);
  v4 = *(_QWORD *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_18A65C814(v5);
  *a1 = v3;
}

void sub_18A65B948(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v6);
  sub_18A5F3E5C();
  v9 = v8 - v7;
  if ((a1 & 1) != 0)
  {
    v10 = type metadata accessor for TaskPriority();
    sub_18A5F1010(v9, 1, 1, v10);
    v11 = (_QWORD *)sub_18A5F37B4();
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = a2;
    v11[5] = a3;
    swift_retain();
    sub_18A670ABC(v9, (uint64_t)&unk_1EDF6BD80, (uint64_t)v11);
    swift_release();
  }
}

uint64_t sub_18A65B9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_18A65BA14()
{
  uint64_t v0;

  sub_18A65BA3C(*(_QWORD *)(v0 + 24));
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A65BA3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v3 = sub_18A5F101C((uint64_t *)&unk_1EDF6A3E8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_18A5F101C(&qword_1EDF6A3D0);
  v7 = *(_QWORD *)(v42 - 8);
  v8 = MEMORY[0x1E0C80A78](v42);
  v41 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v36 - v11);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  v43 = (uint64_t *)(v1 + 136);
  swift_beginAccess();
  v15 = *(_QWORD **)(v1 + 136);
  v16 = v15[3];
  if (!v16)
    return;
  v38 = v6;
  v39 = v4;
  v40 = v3;
  v37 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v17 = (char *)v15 + v37;
  swift_retain();
  v18 = 0;
  while (1)
  {
    if (v18 >= v16)
    {
      __break(1u);
      goto LABEL_20;
    }
    v19 = v15[4];
    v20 = v18 + v19 >= v15[2] ? v15[2] : 0;
    v21 = *(_QWORD *)(v7 + 72);
    sub_18A65EAB4((uint64_t)&v17[(v18 + v19 - v20) * v21], (uint64_t)v14);
    sub_18A65ED70((uint64_t)v14, (uint64_t)v12, &qword_1EDF6A3D0);
    v22 = *v12;
    sub_18A60FCC4((uint64_t)v12, &qword_1EDF6A3D0);
    if (v22 == a1)
      break;
    ++v18;
    v16 = v15[3];
    if (v18 == v16)
    {
      swift_release();
      return;
    }
  }
  swift_release();
  v23 = v43;
  swift_beginAccess();
  if (v18 >= *(_QWORD *)(*v23 + 24))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    sub_18A65E0C4();
  v24 = *v23;
  if (v18 >= *(_QWORD *)(*v23 + 24))
    goto LABEL_21;
  v25 = *(_QWORD *)(v24 + 32);
  if (v25 + v18 >= *(_QWORD *)(v24 + 16))
    v26 = *(_QWORD *)(v24 + 16);
  else
    v26 = 0;
  v27 = v24 + v37;
  v28 = v41;
  sub_18A65EAB4(v24 + v37 + (v25 - v26 + v18) * v21, v41);
  swift_retain();
  sub_18A65E17C(v18, v18 + 1, (uint64_t *)(v24 + 16), v27);
  swift_endAccess();
  swift_release();
  v29 = v28 + *(int *)(v42 + 48);
  v30 = v28 + *(int *)(v42 + 64);
  v31 = v38;
  v32 = v39;
  v33 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v38, v30, v40);
  v34 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v29, v34);
  type metadata accessor for CancellationError();
  sub_18A65EAFC(&qword_1EDF6BD88, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
  v35 = swift_allocError();
  CancellationError.init()();
  v44 = v35;
  CheckedContinuation.resume(throwing:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
}

void sub_18A65BD74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;

  sub_18A5F101C(&qword_1EDF6A3D8);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v2);
  sub_18A5F3E5C();
  v5 = (_QWORD *)(v4 - v3);
  v6 = sub_18A5F101C(&qword_1EDF6A438);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v7);
  sub_18A5F3E5C();
  v10 = (char *)(v9 - v8);
  v11 = sub_18A5F101C((uint64_t *)&unk_1EDF6A3E8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  sub_18A5F3E5C();
  v15 = (char *)(v14 - v13);
  if (*(_BYTE *)(a1 + 128) == 1)
  {
    sub_18A5F40A4();
    if (*(uint64_t *)(*(_QWORD *)(a1 + 136) + 24) < 1)
    {
      v21 = sub_18A5F101C(&qword_1EDF6A3D0);
      v19 = (uint64_t)v5;
      v20 = 1;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_18A65E0C4();
      v16 = *(_QWORD *)(a1 + 136);
      v17 = sub_18A5F101C(&qword_1EDF6A3D0);
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80);
      sub_18A65E984((_QWORD *)(v16 + 16), v16 + ((v18 + 40) & ~v18), (uint64_t)v5);
      v19 = (uint64_t)v5;
      v20 = 0;
      v21 = v17;
    }
    sub_18A5F1010(v19, v20, 1, v21);
    swift_endAccess();
    v22 = sub_18A5F101C(&qword_1EDF6A3D0);
    if (sub_18A5F105C((uint64_t)v5, 1, v22) == 1)
    {
      sub_18A60FCC4((uint64_t)v5, &qword_1EDF6A3D8);
      *(_BYTE *)(a1 + 128) = 0;
    }
    else
    {
      v23 = (char *)v5 + *(int *)(v22 + 48);
      v32 = (char *)v5 + *(int *)(v22 + 64);
      v24 = &v10[*(int *)(v6 + 48)];
      v25 = &v10[*(int *)(v6 + 64)];
      *(_QWORD *)v10 = *v5;
      v26 = v15;
      v27 = v12;
      v28 = type metadata accessor for TaskPriority();
      v29 = *(_QWORD *)(v28 - 8);
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v24, v23, v28);
      v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
      v30(v25, v32, v11);
      v31 = &v10[*(int *)(v6 + 48)];
      v30(v26, &v10[*(int *)(v6 + 64)], v11);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v11);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_18A65BFE4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_18A62384C;
  return v6(a1);
}

uint64_t sub_18A65C048()
{
  uint64_t result;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A4D0);
  swift_allocObject();
  result = TaskLocal.init(wrappedValue:)();
  qword_1EDF6A518 = result;
  return result;
}

uint64_t CKAsyncSerialQueue.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CKAsyncSerialQueue.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t CKAsyncSerialQueue.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_18A65C0F8()
{
  unint64_t result;

  result = qword_1EDF6BD70;
  if (!qword_1EDF6BD70)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKAsyncSerialQueue.OrderingPolicy, &type metadata for CKAsyncSerialQueue.OrderingPolicy);
    atomic_store(result, &qword_1EDF6BD70);
  }
  return result;
}

uint64_t sub_18A65C134()
{
  return CKAsyncSerialQueue.unownedExecutor.getter();
}

uint64_t type metadata accessor for CKAsyncSerialQueue()
{
  return objc_opt_self();
}

uint64_t method lookup function for CKAsyncSerialQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKAsyncSerialQueue.__allocating_init(ordering:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for CKAsyncSerialQueue.OrderingPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A65C1CC + 4 * byte_18A83BC05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A65C200 + 4 * byte_18A83BC00[v4]))();
}

uint64_t sub_18A65C200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A65C208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A65C210);
  return result;
}

uint64_t sub_18A65C21C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A65C224);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A65C228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A65C230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CKAsyncSerialQueue.OrderingPolicy()
{
  return &type metadata for CKAsyncSerialQueue.OrderingPolicy;
}

void sub_18A65C24C()
{
  sub_18A65C76C();
}

void sub_18A65C268()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_18A65EF9C();
  if ((v4 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v5 != v6)
    {
      sub_18A61A78C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  sub_18A65EF1C();
  if (v3)
  {
    sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
    v7 = (_QWORD *)sub_18A5F3974();
    v8 = j__malloc_size(v7);
    v7[2] = v2;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 32);
  }
  v9 = (char *)sub_18A5F4050();
  if ((v1 & 1) != 0)
  {
    sub_18A618FB0(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_18A651EE0((uint64_t)v9, v10);
  }
  sub_18A5F3AA0();
  sub_18A5F3824();
}

void sub_18A65C30C()
{
  sub_18A65C554();
}

void sub_18A65C328()
{
  sub_18A65C76C();
}

void sub_18A65C344()
{
  sub_18A65C76C();
}

void sub_18A65C360()
{
  sub_18A65C554();
}

void sub_18A65C37C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;

  sub_18A65EF9C();
  if ((v3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v4 != v5)
    {
      sub_18A61A78C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  sub_18A65EF1C();
  if (v2)
  {
    sub_18A5F101C(qword_1EDF699B8);
    v6 = (_QWORD *)sub_18A5F37B4();
    sub_18A65EF78(v6);
  }
  v7 = (char *)sub_18A5F4050();
  if ((v1 & 1) != 0)
  {
    sub_18A619014(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_18A6521DC();
  }
  sub_18A5F3AA0();
  sub_18A5F3814();
}

void sub_18A65C414()
{
  sub_18A65C554();
}

void sub_18A65C430()
{
  sub_18A65C76C();
}

void sub_18A65C44C()
{
  sub_18A65C554();
}

void sub_18A65C468()
{
  sub_18A65C76C();
}

void sub_18A65C484()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;

  sub_18A65EF9C();
  if ((v3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v4 != v5)
    {
      sub_18A61A78C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  sub_18A65EF1C();
  if (v2)
  {
    sub_18A5F101C(&qword_1EDF6B200);
    v6 = (_QWORD *)sub_18A5F37B4();
    sub_18A65EF78(v6);
  }
  v7 = (char *)sub_18A5F4050();
  if ((v1 & 1) != 0)
  {
    sub_18A619154(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_18A652324();
  }
  sub_18A5F3AA0();
  sub_18A5F3814();
}

void sub_18A65C51C()
{
  sub_18A65C554();
}

void sub_18A65C538()
{
  sub_18A65C554();
}

void sub_18A65C554()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;

  sub_18A65EF64();
  if ((v6 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v8 != v9)
    {
      sub_18A61A78C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v7 = v4;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_18A5F101C(v5);
    v12 = (_QWORD *)sub_18A5F3974();
    v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 4;
  v15 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v15, v10, v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  sub_18A5F3AA0();
  sub_18A5F3814();
}

size_t sub_18A65C608(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_18A5F101C(&qword_1EDF6BDA8);
  v10 = *(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (unint64_t)v13 + v16;
  v18 = a4 + v16;
  if ((v5 & 1) != 0)
  {
    sub_18A6191B4(v18, v8, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_18A6524D4(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

void sub_18A65C750()
{
  sub_18A65C76C();
}

void sub_18A65C76C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  sub_18A65EF64();
  if ((v6 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v8 != v9)
    {
      sub_18A61A78C();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v7 = v4;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    sub_18A5F101C(v5);
    v12 = (_QWORD *)sub_18A5F3974();
    j__malloc_size(v12);
    sub_18A61A960();
    v12[2] = v10;
    v12[3] = v13;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v12 + 4;
  v15 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v15, v10, v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  sub_18A5F3AA0();
  sub_18A5F3814();
}

void sub_18A65C814(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  Swift::Int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  Swift::Int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v2 = v1;
  v137 = sub_18A5F101C(&qword_1EDF6A3D0);
  v4 = *(_QWORD *)(v137 - 8);
  v5 = MEMORY[0x1E0C80A78](v137);
  v127 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v138 = (uint64_t)&v121 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v134 = (uint64_t)&v121 - v10;
  MEMORY[0x1E0C80A78](v9);
  v133 = (uint64_t)&v121 - v11;
  v12 = a1[1];
  v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12)
        sub_18A65D158(0, v12, 1, a1);
      return;
    }
    goto LABEL_141;
  }
  v14 = v13;
  v135 = a1;
  v123 = sub_18A651CC8(v12 / 2);
  v124 = v12;
  v129 = v15;
  v130 = v4;
  if (v12 <= 0)
  {
LABEL_105:
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v61 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_106:
    v113 = v17;
    if (v61 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease();
      if (v124 >= -1)
        goto LABEL_118;
      goto LABEL_145;
    }
    v114 = *v135;
    while (1)
    {
      v115 = v61 - 2;
      if (v61 < 2)
        break;
      if (!v114)
        goto LABEL_149;
      v116 = v113[2 * v115 + 4];
      v117 = v113[2 * v61 + 3];
      sub_18A65D388(v114 + *(_QWORD *)(v130 + 72) * v116, v114 + *(_QWORD *)(v130 + 72) * v113[2 * v61 + 2], v114 + *(_QWORD *)(v130 + 72) * v117, v129);
      if (v2)
        goto LABEL_103;
      if (v117 < v116)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A65D838();
        v113 = v120;
      }
      if (v115 >= v113[2])
        goto LABEL_137;
      v118 = &v113[2 * v115 + 4];
      *v118 = v116;
      v118[1] = v117;
      v119 = v113[2];
      if (v61 > v119)
        goto LABEL_138;
      memmove(&v113[2 * v61 + 2], &v113[2 * v61 + 4], 16 * (v119 - v61));
      v113[2] = v119 - 1;
      v61 = v119 - 1;
      if (v119 <= 2)
        goto LABEL_117;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    return;
  }
  v122 = v14;
  v16 = 0;
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = v12;
  while (1)
  {
    v19 = v16;
    v20 = v16 + 1;
    if (v16 + 1 >= v18)
    {
      v26 = v16 + 1;
    }
    else
    {
      v125 = v2;
      v21 = *v135;
      v22 = v4;
      v23 = *(_QWORD *)(v4 + 72);
      v24 = v133;
      sub_18A65EAB4(*v135 + v23 * v20, v133);
      v25 = v134;
      sub_18A65EAB4(v21 + v23 * v19, v134);
      LODWORD(v136) = static TaskPriority.> infix(_:_:)();
      sub_18A60FCC4(v25, &qword_1EDF6A3D0);
      sub_18A60FCC4(v24, &qword_1EDF6A3D0);
      v26 = v19 + 2;
      v132 = v21;
      v139 = v23;
      if (v19 + 2 >= v18)
      {
        v4 = v22;
        v2 = v125;
      }
      else
      {
        v27 = v18;
        v128 = v19;
        v28 = v23 * v20;
        v29 = v23 * v26;
        while (1)
        {
          v30 = v26;
          v31 = v133;
          sub_18A65EAB4(v21 + v29, v133);
          v32 = v134;
          sub_18A65EAB4(v21 + v28, v134);
          v33 = static TaskPriority.> infix(_:_:)();
          sub_18A60FCC4(v32, &qword_1EDF6A3D0);
          sub_18A60FCC4(v31, &qword_1EDF6A3D0);
          if (((v136 ^ v33) & 1) != 0)
            break;
          v26 = v30 + 1;
          v21 += v139;
          if (v30 + 1 >= v27)
          {
            v18 = v27;
            v26 = v27;
            v4 = v130;
            v2 = v125;
            v19 = v128;
            goto LABEL_13;
          }
        }
        v4 = v130;
        v26 = v30;
        v2 = v125;
        v19 = v128;
        v18 = v27;
      }
LABEL_13:
      if ((v136 & 1) != 0)
      {
        v34 = v139;
        if (v26 < v19)
          goto LABEL_142;
        if (v19 < v26)
        {
          v131 = v18;
          v125 = v2;
          v35 = 0;
          v36 = v19;
          v37 = v139 * (v26 - 1);
          v38 = v26 * v139;
          v39 = v36;
          v128 = v36;
          v40 = v36 * v139;
          v41 = v135;
          do
          {
            if (v39 != v26 + v35 - 1)
            {
              v42 = v132;
              if (!v132)
                goto LABEL_148;
              v43 = v132 + v40;
              v136 = v132 + v37;
              sub_18A65ED70(v132 + v40, v127, &qword_1EDF6A3D0);
              if (v40 < v37 || v43 >= v42 + v38)
              {
                swift_arrayInitWithTakeFrontToBack();
                v34 = v139;
              }
              else
              {
                v34 = v139;
                if (v40 != v37)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_18A65ED70(v127, v136, &qword_1EDF6A3D0);
              v41 = v135;
            }
            ++v39;
            --v35;
            v37 -= v34;
            v38 -= v34;
            v40 += v34;
          }
          while (v39 < v26 + v35);
          v2 = v125;
          v4 = v130;
          v18 = v131;
          v19 = v128;
          goto LABEL_31;
        }
      }
    }
    v41 = v135;
LABEL_31:
    if (v26 < v18)
    {
      if (__OFSUB__(v26, v19))
        goto LABEL_140;
      if (v26 - v19 < v122)
      {
        if (__OFADD__(v19, v122))
          goto LABEL_143;
        if (v19 + v122 >= v18)
          v45 = v18;
        else
          v45 = v19 + v122;
        if (v45 < v19)
          goto LABEL_144;
        if (v26 != v45)
        {
          v128 = v19;
          v121 = v17;
          v125 = v2;
          v126 = v45;
          v46 = *(_QWORD *)(v4 + 72);
          v47 = v46 * (v26 - 1);
          v131 = v46;
          v48 = v26 * v46;
          do
          {
            v49 = 0;
            v50 = v128;
            v136 = v26;
            v132 = v48;
            while (1)
            {
              v139 = v50;
              v51 = *v41;
              v52 = v48 + v49 + *v41;
              v53 = v133;
              sub_18A65EAB4(v52, v133);
              v54 = v47;
              v55 = v47 + v49 + v51;
              v56 = v134;
              sub_18A65EAB4(v55, v134);
              LOBYTE(v51) = static TaskPriority.> infix(_:_:)();
              sub_18A60FCC4(v56, &qword_1EDF6A3D0);
              sub_18A60FCC4(v53, &qword_1EDF6A3D0);
              if ((v51 & 1) == 0)
                break;
              v57 = *v41;
              if (!*v41)
                goto LABEL_146;
              v48 = v132;
              v47 = v54;
              v58 = v57 + v54 + v49;
              sub_18A65ED70(v57 + v132 + v49, v138, &qword_1EDF6A3D0);
              swift_arrayInitWithTakeFrontToBack();
              sub_18A65ED70(v138, v58, &qword_1EDF6A3D0);
              v49 -= v131;
              v50 = v139 + 1;
              v41 = v135;
              v59 = v136;
              if (v136 == v139 + 1)
                goto LABEL_47;
            }
            v59 = v136;
            v47 = v54;
            v48 = v132;
LABEL_47:
            v26 = v59 + 1;
            v47 += v131;
            v48 += v131;
          }
          while (v26 != v126);
          v26 = v126;
          v2 = v125;
          v17 = v121;
          v19 = v128;
        }
      }
    }
    if (v26 < v19)
      goto LABEL_139;
    v136 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_18A65D778();
      v17 = v111;
    }
    v60 = v17[2];
    v61 = v60 + 1;
    v16 = v136;
    if (v60 >= v17[3] >> 1)
    {
      sub_18A65D778();
      v16 = v136;
      v17 = v112;
    }
    v62 = v2;
    v17[2] = v61;
    v63 = v17 + 4;
    v64 = &v17[2 * v60 + 4];
    *v64 = v19;
    v64[1] = v16;
    if (v60)
      break;
    v61 = 1;
LABEL_97:
    v18 = v135[1];
    v2 = v62;
    v4 = v130;
    if (v16 >= v18)
      goto LABEL_106;
  }
  while (1)
  {
    v65 = v61 - 1;
    if (v61 >= 4)
    {
      v70 = &v63[2 * v61];
      v71 = *(v70 - 8);
      v72 = *(v70 - 7);
      v76 = __OFSUB__(v72, v71);
      v73 = v72 - v71;
      if (v76)
        goto LABEL_124;
      v75 = *(v70 - 6);
      v74 = *(v70 - 5);
      v76 = __OFSUB__(v74, v75);
      v68 = v74 - v75;
      v69 = v76;
      if (v76)
        goto LABEL_125;
      v77 = v61 - 2;
      v78 = &v63[2 * v61 - 4];
      v80 = *v78;
      v79 = v78[1];
      v76 = __OFSUB__(v79, v80);
      v81 = v79 - v80;
      if (v76)
        goto LABEL_126;
      v76 = __OFADD__(v68, v81);
      v82 = v68 + v81;
      if (v76)
        goto LABEL_128;
      if (v82 >= v73)
      {
        v100 = &v63[2 * v65];
        v102 = *v100;
        v101 = v100[1];
        v76 = __OFSUB__(v101, v102);
        v103 = v101 - v102;
        if (v76)
          goto LABEL_134;
        v93 = v68 < v103;
        goto LABEL_86;
      }
    }
    else
    {
      if (v61 != 3)
      {
        v94 = v17[4];
        v95 = v17[5];
        v76 = __OFSUB__(v95, v94);
        v87 = v95 - v94;
        v88 = v76;
        goto LABEL_80;
      }
      v67 = v17[4];
      v66 = v17[5];
      v76 = __OFSUB__(v66, v67);
      v68 = v66 - v67;
      v69 = v76;
    }
    if ((v69 & 1) != 0)
      goto LABEL_127;
    v77 = v61 - 2;
    v83 = &v63[2 * v61 - 4];
    v85 = *v83;
    v84 = v83[1];
    v86 = __OFSUB__(v84, v85);
    v87 = v84 - v85;
    v88 = v86;
    if (v86)
      goto LABEL_129;
    v89 = &v63[2 * v65];
    v91 = *v89;
    v90 = v89[1];
    v76 = __OFSUB__(v90, v91);
    v92 = v90 - v91;
    if (v76)
      goto LABEL_131;
    if (__OFADD__(v87, v92))
      goto LABEL_133;
    if (v87 + v92 >= v68)
    {
      v93 = v68 < v92;
LABEL_86:
      if (v93)
        v65 = v77;
      goto LABEL_88;
    }
LABEL_80:
    if ((v88 & 1) != 0)
      goto LABEL_130;
    v96 = &v63[2 * v65];
    v98 = *v96;
    v97 = v96[1];
    v76 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v76)
      goto LABEL_132;
    if (v99 < v87)
      goto LABEL_97;
LABEL_88:
    v104 = v17;
    v105 = v65 - 1;
    if (v65 - 1 >= v61)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!*v135)
      goto LABEL_147;
    v106 = &v63[2 * v105];
    v107 = *v106;
    v108 = &v63[2 * v65];
    v109 = v108[1];
    sub_18A65D388(*v135 + *(_QWORD *)(v130 + 72) * *v106, *v135 + *(_QWORD *)(v130 + 72) * *v108, *v135 + *(_QWORD *)(v130 + 72) * v109, v129);
    if (v62)
      break;
    if (v109 < v107)
      goto LABEL_121;
    if (v65 > v104[2])
      goto LABEL_122;
    *v106 = v107;
    v63[2 * v105 + 1] = v109;
    v110 = v104[2];
    if (v65 >= v110)
      goto LABEL_123;
    v17 = v104;
    v61 = v110 - 1;
    memmove(&v63[2 * v65], v108 + 2, 16 * (v110 - 1 - v65));
    v104[2] = v110 - 1;
    v16 = v136;
    if (v110 <= 2)
      goto LABEL_97;
  }
  v2 = v62;
LABEL_103:
  swift_bridgeObjectRelease();
  if (v124 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  *(_QWORD *)(v123 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_18A65D158(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v27 = a1;
  v31 = sub_18A5F101C(&qword_1EDF6A3D0);
  v7 = MEMORY[0x1E0C80A78](v31);
  v32 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v28 = (uint64_t)&v25 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - v12;
  v30 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v34 = v14 * (v30 - 1);
    v29 = v14;
    v33 = v14 * v30;
    v15 = &qword_1EDF6A3D0;
    while (2)
    {
      v16 = 0;
      v17 = v27;
      do
      {
        v18 = *a4;
        sub_18A65EAB4(v33 + v16 + *a4, (uint64_t)v13);
        v19 = v28;
        sub_18A65EAB4(v34 + v16 + v18, v28);
        LOBYTE(v18) = static TaskPriority.> infix(_:_:)();
        sub_18A60FCC4(v19, v15);
        sub_18A60FCC4((uint64_t)v13, v15);
        if ((v18 & 1) == 0)
          break;
        v20 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v21 = v15;
        v22 = a4;
        v23 = v20 + v34 + v16;
        v24 = v21;
        sub_18A65ED70(v20 + v33 + v16, v32, v21);
        swift_arrayInitWithTakeFrontToBack();
        sub_18A65ED70(v32, v23, v24);
        v16 -= v29;
        ++v17;
        a4 = v22;
        v15 = v24;
      }
      while (v30 != v17);
      v34 += v29;
      v33 += v29;
      if (++v30 != v26)
        continue;
      break;
    }
  }
}

void sub_18A65D388(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = sub_18A5F101C(&qword_1EDF6A3D0);
  v8 = MEMORY[0x1E0C80A78](v51);
  v50 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v49 = (uint64_t)&v44 - v10;
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v12 == -1)
    goto LABEL_76;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1)
    goto LABEL_77;
  v17 = v13 / v12;
  v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    sub_18A6191B4(a2, v15 / v12, a4);
    v19 = a4 + v18 * v12;
    if (v18 * v12 < 1 || a1 >= a2)
      goto LABEL_70;
    v47 = a4;
    v48 = -v12;
    v45 = a1;
    v46 = v12;
    while (1)
    {
      v30 = v48;
      v31 = v49;
      v32 = a3 + v48;
      v33 = v19 + v48;
      v34 = v19;
      sub_18A65EAB4(v19 + v48, v49);
      v35 = a2 + v30;
      v36 = a2 + v30;
      v37 = v50;
      sub_18A65EAB4(v36, v50);
      v38 = static TaskPriority.> infix(_:_:)();
      sub_18A60FCC4(v37, &qword_1EDF6A3D0);
      sub_18A60FCC4(v31, &qword_1EDF6A3D0);
      if ((v38 & 1) != 0)
        break;
      if (a3 < v34 || v32 >= v34)
      {
        swift_arrayInitWithTakeFrontToBack();
        v19 = v33;
        a4 = v47;
LABEL_65:
        v12 = v46;
        a3 = v32;
        goto LABEL_66;
      }
      a4 = v47;
      if (a3 == v34)
      {
        v19 = v33;
        goto LABEL_65;
      }
      a3 = v32;
      swift_arrayInitWithTakeBackToFront();
      v19 = v33;
      v12 = v46;
LABEL_66:
      if (v19 <= a4 || a2 <= v45)
        goto LABEL_70;
    }
    if (a3 < a2 || v32 >= a2)
    {
      swift_arrayInitWithTakeFrontToBack();
      a2 = v35;
      a4 = v47;
    }
    else
    {
      a4 = v47;
      if (a3 != a2)
      {
        a3 = v32;
        swift_arrayInitWithTakeBackToFront();
        a2 = v35;
        v12 = v46;
LABEL_63:
        v19 = v34;
        goto LABEL_66;
      }
      a2 = v35;
    }
    v12 = v46;
    a3 = v32;
    goto LABEL_63;
  }
  sub_18A6191B4(a1, v13 / v12, a4);
  v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    do
    {
      v21 = v19;
      v22 = v49;
      sub_18A65EAB4(a2, v49);
      v23 = v50;
      sub_18A65EAB4(a4, v50);
      v24 = static TaskPriority.> infix(_:_:)();
      sub_18A60FCC4(v23, &qword_1EDF6A3D0);
      sub_18A60FCC4(v22, &qword_1EDF6A3D0);
      if ((v24 & 1) != 0)
      {
        v25 = a2 + v12;
        if (a1 < a2 || a1 >= v25)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v25 = a2;
        a4 += v12;
      }
      v19 = v21;
      a1 += v12;
      v28 = a4 >= v21 || v25 >= a3;
      a2 = v25;
    }
    while (!v28);
  }
  a2 = a1;
LABEL_70:
  v42 = v19 - a4;
  if (v12 != -1 || v42 != 0x8000000000000000)
  {
    sub_18A6191B4(a4, v42 / v12, a2);
    return;
  }
LABEL_78:
  __break(1u);
}

void sub_18A65D778()
{
  char *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  sub_18A65EF9C();
  if ((v3 & 1) != 0)
  {
    sub_18A61A6FC();
    if (v5 != v6)
    {
      sub_18A61A78C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_18A5F3E40();
    }
  }
  else
  {
    v4 = v2;
  }
  v7 = *((_QWORD *)v0 + 2);
  if (v4 <= v7)
    v8 = *((_QWORD *)v0 + 2);
  else
    v8 = v4;
  if (v8)
  {
    sub_18A5F101C(&qword_1EDF6BDA0);
    v9 = (char *)sub_18A5F3974();
    j__malloc_size(v9);
    sub_18A61A960();
    *((_QWORD *)v9 + 2) = v7;
    *((_QWORD *)v9 + 3) = v10;
  }
  else
  {
    v9 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v11 = v9 + 32;
  v12 = v0 + 32;
  if ((v1 & 1) != 0)
  {
    if (v9 != v0 || &v12[16 * v7] <= v11)
      memmove(v11, v12, 16 * v7);
    *((_QWORD *)v0 + 2) = 0;
  }
  else
  {
    memcpy(v11, v12, 16 * v7);
  }
  swift_bridgeObjectRelease();
  sub_18A5F3824();
}

void sub_18A65D838()
{
  sub_18A65D778();
}

uint64_t sub_18A65D84C(Swift::Int a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  Swift::Int *v5;
  Swift::Int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v3 = v2;
  v4 = *v2;
  v5 = (Swift::Int *)(*v2 + 16);
  v6 = *v5;
  if (*v5 >= a1)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 80);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A340);
    v14 = swift_allocObject();
    v16 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(v14 + 16) = v6;
    *(_OWORD *)(v14 + 24) = v16;
    if ((uint64_t)v16 >= 1)
      sub_18A65DF20(v14 + 16, v14 + ((v15 + 40) & ~v15), v5, v4 + ((v15 + 40) & ~v15));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v11 = sub_18A5F101C(&qword_1EDF6A3D0);
    Deque._Storage._growCapacity(to:linearly:)(a1, a2 & 1);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v13 = *(_QWORD *)(v10 + 24);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A340);
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = sub_18A65DC60();
      *(_QWORD *)(v14 + 24) = v13;
      *(_QWORD *)(v14 + 32) = 0;
      if (v13 >= 1)
      {
        swift_retain();
        sub_18A65DB30(v14 + 16, v14 + ((v12 + 40) & ~v12), (_QWORD *)(v10 + 16), v10 + ((v12 + 40) & ~v12));
        *(_QWORD *)(v10 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      sub_18A5F101C((uint64_t *)&unk_1EDF6A340);
      v14 = swift_allocObject();
      v17 = sub_18A65DC60();
      v18 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v14 + 16) = v17;
      *(_QWORD *)(v14 + 24) = v18;
      *(_QWORD *)(v14 + 32) = 0;
      if (v18 >= 1)
        sub_18A65DD74(v14 + 16, v14 + ((v12 + 40) & ~v12), (_QWORD *)(v10 + 16), v10 + ((v12 + 40) & ~v12));
    }
  }
  result = swift_release();
  *v3 = v14;
  return result;
}

_QWORD *sub_18A65DA40(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result[1];
  v4 = result[2];
  v5 = v4 + v3;
  if (!__OFADD__(v4, v3))
  {
    v8 = result;
    if ((v3 & 0x8000000000000000) == 0)
    {
      v9 = __OFSUB__(v5, *result);
      if (v5 < *result || (v5 -= *result, !v9))
      {
LABEL_9:
        v10 = sub_18A5F101C(&qword_1EDF6A3D0);
        result = (_QWORD *)sub_18A65EAB4(a3, a2 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5);
        v11 = v8[1];
        v9 = __OFADD__(v11, 1);
        v12 = v11 + 1;
        if (!v9)
        {
          v8[1] = v12;
          return result;
        }
        goto LABEL_12;
      }
      __break(1u);
    }
    if (v5 < 0)
    {
      v9 = __OFADD__(v5, *result);
      v5 += *result;
      if (v9)
        goto LABEL_13;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_18A65DAF0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  BOOL v4;

  v4 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a2 < 0)
  {
LABEL_7:
    if ((result & 0x8000000000000000) == 0)
      return result;
    v4 = __OFADD__(result, *a3);
    result += *a3;
    if (!v4)
      return result;
LABEL_11:
    __break(1u);
    return result;
  }
  v4 = __OFSUB__(result, *a3);
  if (result >= *a3)
  {
    result -= *a3;
    if (v4)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

void sub_18A65DB30(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_21;
  }
  v8 = a3[1];
  if (v5 < v8)
  {
    v9 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      v10 = sub_18A5F101C(&qword_1EDF6A3D0);
      v11 = v5;
      v12 = a4;
      goto LABEL_6;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = sub_18A5F101C(&qword_1EDF6A3D0);
  v12 = 0;
  v9 = 0;
  v11 = v8;
LABEL_6:
  v13 = v5 < v8;
  v14 = v9 != 0;
  v15 = v13 && v14;
  if (v13 && v14)
    v16 = v12;
  else
    v16 = 0;
  if (v13 && v14)
    v17 = v9;
  else
    v17 = 0;
  if (v11 >= 1)
  {
    if (a4)
    {
      sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v4, v11, a2);
      goto LABEL_16;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = 0;
LABEL_16:
  if (!v15 || v17 <= 0)
    return;
  if (!v16)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v18 = sub_18A5F101C(&qword_1EDF6A3D0);
  sub_18A6191B4(v16, v17, a2 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v11);
}

uint64_t sub_18A65DC60()
{
  const void *v0;
  size_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;

  v1 = j__malloc_size(v0);
  result = sub_18A5F101C(&qword_1EDF6A3D0);
  v3 = *(_QWORD *)(result - 8);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    v5 = v1 - ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    if (v4 != -1 || v5 != 0x8000000000000000)
      return v5 / v4;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_18A65DCC8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result[2];
  v5 = *result - v4;
  if (__OFSUB__(*result, v4))
  {
    __break(1u);
  }
  else
  {
    v7 = result[1];
    if (v5 >= v7)
    {
      result = (_QWORD *)sub_18A5F101C(&qword_1EDF6A3D0);
      v8 = 0;
      v9 = 0;
      v10 = v7;
LABEL_6:
      *(_QWORD *)a3 = a2 + *(_QWORD *)(*(result - 1) + 72) * v4;
      *(_QWORD *)(a3 + 8) = v10;
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_BYTE *)(a3 + 32) = v5 >= v7;
      return result;
    }
    v9 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      result = (_QWORD *)sub_18A5F101C(&qword_1EDF6A3D0);
      v10 = v5;
      v8 = a2;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18A65DD74(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_27;
  }
  v8 = a3[1];
  if (v5 < v8)
  {
    v9 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      result = sub_18A5F101C(&qword_1EDF6A3D0);
      v11 = v5;
      v12 = a4;
      goto LABEL_6;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = sub_18A5F101C(&qword_1EDF6A3D0);
  v12 = 0;
  v9 = 0;
  v11 = v8;
LABEL_6:
  if (v11 < 1)
  {
    v11 = 0;
    goto LABEL_14;
  }
  if (!a4)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v13 = a4 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v4;
  v14 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * v11;
  v15 = a2 + v14;
  v16 = v13 + v14;
  if (v13 < v15 && v16 > a2)
    goto LABEL_30;
  result = swift_arrayInitWithCopy();
LABEL_14:
  if (v5 >= v8 || v9 < 1)
    return result;
  if (!v12)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72);
  v20 = a2 + v19 * v11;
  v21 = v19 * v9;
  v22 = v20 + v21;
  v23 = v12 + v21;
  if (v22 > v12 && v20 < v23)
    goto LABEL_30;
  return swift_arrayInitWithCopy();
}

uint64_t sub_18A65DF20(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_26;
  }
  v8 = a3[1];
  if (v5 < v8)
  {
    v9 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      result = sub_18A5F101C(&qword_1EDF6A3D0);
      v11 = v5;
      v12 = a4;
      goto LABEL_6;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = sub_18A5F101C(&qword_1EDF6A3D0);
  v12 = 0;
  v9 = 0;
  v11 = v8;
LABEL_6:
  if (v11 < 1)
    goto LABEL_14;
  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = a4 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v4;
  v14 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72);
  v15 = a2 + v14 * v4;
  v16 = v14 * v11;
  v17 = v15 + v16;
  v18 = v13 + v16;
  if (v13 < v17 && v15 < v18)
    goto LABEL_29;
  result = swift_arrayInitWithCopy();
LABEL_14:
  if (v5 < v8 && v9 >= 1)
  {
    if (v12)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * v9;
      v22 = a2 + v21;
      v23 = v12 + v21;
      if (v22 <= v12 || v23 <= a2)
        return swift_arrayInitWithCopy();
LABEL_29:
      result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_18A65E0C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;

  v1 = *v0;
  v2 = sub_18A5F101C(&qword_1EDF6A3D0);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  sub_18A5F101C((uint64_t *)&unk_1EDF6A340);
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  if ((uint64_t)v6 >= 1)
    sub_18A65DF20(v5 + 16, v5 + ((v4 + 40) & ~v4), (_QWORD *)(v1 + 16), v1 + ((v4 + 40) & ~v4));
  result = swift_release();
  *v0 = v5;
  return result;
}

uint64_t sub_18A65E17C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  char v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _BYTE v16[8];
  uint64_t v17;

  sub_18A65E28C(a1, a2, a3, a4, (uint64_t)&v11);
  v8 = v14 | (v13 == 0);
  if (v14 & 1 | (v13 == 0))
    v9 = 0;
  else
    v9 = v12;
  v15 = v11;
  sub_18A65ED70((uint64_t)&v15, (uint64_t)v16, &qword_1EDF6BD90);
  sub_18A65ED70((uint64_t)v16, (uint64_t)&v17, &qword_1EDF6BD90);
  if (v17)
  {
    sub_18A5F101C(&qword_1EDF6A3D0);
    swift_arrayDestroy();
  }
  if (!(v8 & 1 | (v9 == 0)))
  {
    sub_18A5F101C(&qword_1EDF6A3D0);
    swift_arrayDestroy();
  }
  return sub_18A65E350(a1, a2, a3, a4);
}

uint64_t sub_18A65E28C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  v6 = a3[2];
  v7 = v6 + result;
  v8 = *a3;
  if (v6 + result >= *a3)
    v9 = *a3;
  else
    v9 = 0;
  v10 = v6 + a2;
  if (v10 >= v8)
    v11 = *a3;
  else
    v11 = 0;
  v12 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    v14 = v7 - v9;
    v15 = v10 - v11;
    if (v12)
      v16 = v14 < v15;
    else
      v16 = 1;
    v17 = v16;
    if (v17 == 1)
    {
      result = sub_18A5F101C(&qword_1EDF6A3D0);
      v18 = 0;
      v15 = 0;
LABEL_18:
      *(_QWORD *)a5 = a4 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v14;
      *(_QWORD *)(a5 + 8) = v12;
      *(_QWORD *)(a5 + 16) = v18;
      *(_QWORD *)(a5 + 24) = v15;
      *(_BYTE *)(a5 + 32) = v17;
      return result;
    }
    v12 = v8 - v14;
    if (!__OFSUB__(v8, v14))
    {
      result = sub_18A5F101C(&qword_1EDF6A3D0);
      v18 = a4;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18A65E350(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v4 < 1)
    return result;
  v6 = result;
  v8 = a3[1];
  v7 = a3[2];
  v9 = *a3;
  if (v7 + result >= *a3)
    v10 = *a3;
  else
    v10 = 0;
  if (v7 + a2 >= v9)
    v11 = *a3;
  else
    v11 = 0;
  v12 = v8 - a2;
  if (__OFSUB__(v8, a2))
    goto LABEL_85;
  v14 = v7 + result - v10;
  v15 = v7 + a2 - v11;
  result = a3[2];
  if (v12 > v6)
  {
    result = sub_18A65DAF0(result, v4, a3);
    v12 = result;
    if (!v6)
      goto LABEL_69;
    if (v15 <= 0)
      v16 = v9;
    else
      v16 = v15;
    if (v14 <= 0)
      v17 = v9;
    else
      v17 = v14;
    if (v7 >= v17)
    {
      if (v16 < result)
      {
        if (v14 > 0)
        {
          v31 = sub_18A5F101C(&qword_1EDF6A3D0);
          sub_18A6191B4(a4, v14, a4 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v4);
          sub_18A65DAF0(0, v14, a3);
          sub_18A65DAF0(v4, v14, a3);
        }
        v14 = *a3 - v4;
        v32 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72);
        sub_18A6191B4(a4 + v32 * v14, v4, a4);
        sub_18A65DAF0(v14, v4, a3);
        result = sub_18A65DAF0(0, v4, a3);
        v19 = __OFSUB__(v6, v15);
        v6 -= v15;
        if (v19)
          goto LABEL_90;
        if (v6 < 1)
          goto LABEL_69;
        v14 = a3[2];
        v33 = a4 + v32 * v12;
        v34 = a4 + v14 * v32;
        goto LABEL_67;
      }
      if (__OFSUB__(0, v14))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      if (v14 > 0)
      {
        v15 -= v14;
        v43 = sub_18A5F101C(&qword_1EDF6A3D0);
        sub_18A6191B4(a4, v14, a4 + *(_QWORD *)(*(_QWORD *)(v43 - 8) + 72) * v15);
        sub_18A65DAF0(0, v14, a3);
        result = sub_18A65DAF0(v15, v14, a3);
      }
      v19 = __OFSUB__(v6, v14);
      v6 -= v14;
      if (v19)
        goto LABEL_93;
      goto LABEL_65;
    }
    if (v16 >= result)
    {
      if (v6 > 0)
      {
        v41 = sub_18A5F101C(&qword_1EDF6A3D0);
        sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v41 - 8) + 72) * v7, v6, a4 + *(_QWORD *)(*(_QWORD *)(v41 - 8) + 72) * v12);
        v42 = v7;
LABEL_68:
        sub_18A65DAF0(v42, v6, a3);
        result = sub_18A65DAF0(v12, v6, a3);
        goto LABEL_69;
      }
      goto LABEL_69;
    }
    if (v15 > 0)
    {
      v14 = v9 - v4;
      v18 = sub_18A5F101C(&qword_1EDF6A3D0);
      sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * (v9 - v4), v15, a4);
      sub_18A65DAF0(v9 - v4, v15, a3);
      result = sub_18A65DAF0(0, v15, a3);
    }
    v19 = __OFSUB__(v6, v15);
    v6 -= v15;
    if (!v19)
    {
LABEL_65:
      if (v6 >= 1)
      {
        v14 = a3[2];
        v44 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72);
        v33 = a4 + v44 * v12;
        v34 = a4 + v44 * v14;
LABEL_67:
        sub_18A6191B4(v34, v6, v33);
        v42 = v14;
        goto LABEL_68;
      }
LABEL_69:
      a3[2] = v12;
      v45 = a3[1];
      v19 = __OFSUB__(v45, v4);
      v46 = v45 - v4;
      if (!v19)
        goto LABEL_82;
      __break(1u);
      goto LABEL_72;
    }
    __break(1u);
  }
  result = sub_18A65DAF0(result, v8, a3);
  v20 = v8 - v4;
  if (__OFSUB__(v8, v4))
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v8 = v4;
  v21 = v20 + v7;
  if (v21 >= v9)
    v22 = v9;
  else
    v22 = 0;
  if (v12)
  {
    v23 = result;
    v24 = v21 - v22;
    if (v21 - v22 <= 0)
      v25 = v9;
    else
      v25 = v21 - v22;
    if (result <= 0)
      v26 = v9;
    else
      v26 = result;
    if (v15 >= v26)
    {
      v35 = v9 - v15;
      v36 = __OFSUB__(v9, v15);
      if (v25 >= v14)
      {
        if (v36)
        {
LABEL_94:
          __break(1u);
          return result;
        }
        if (v35 > 0)
        {
          v48 = sub_18A5F101C(&qword_1EDF6A3D0);
          sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v48 - 8) + 72) * v15, v9 - v15, a4 + *(_QWORD *)(*(_QWORD *)(v48 - 8) + 72) * v14);
          sub_18A65DAF0(v15, v9 - v15, a3);
          result = sub_18A65DAF0(v14, v9 - v15, a3);
          v14 = result;
        }
        if (v23 >= 1)
        {
          v49 = sub_18A5F101C(&qword_1EDF6A3D0);
          sub_18A6191B4(a4, v23, a4 + *(_QWORD *)(*(_QWORD *)(v49 - 8) + 72) * v14);
          sub_18A65DAF0(0, v23, a3);
          v30 = v14;
          goto LABEL_79;
        }
      }
      else
      {
        if (v36)
        {
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        if (v35 > 0)
        {
          v37 = sub_18A5F101C(&qword_1EDF6A3D0);
          sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72) * v15, v9 - v15, a4 + *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72) * v14);
          sub_18A65DAF0(v15, v9 - v15, a3);
          v14 = sub_18A65DAF0(v14, v9 - v15, a3);
        }
        v38 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72);
        sub_18A6191B4(a4, v8, a4 + v38 * v14);
        v39 = sub_18A65DAF0(0, v8, a3);
        result = sub_18A65DAF0(v14, v8, a3);
        if (v24 >= 1)
        {
          sub_18A6191B4(a4 + v39 * v38, v24, a4);
          sub_18A65DAF0(v39, v24, a3);
          v30 = 0;
          v40 = v24;
LABEL_80:
          result = sub_18A65DAF0(v30, v40, a3);
        }
      }
    }
    else
    {
      if (v25 >= v14)
      {
LABEL_72:
        if (v12 <= 0)
          goto LABEL_81;
        v47 = sub_18A5F101C(&qword_1EDF6A3D0);
        sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72) * v15, v12, a4 + *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72) * v14);
        sub_18A65DAF0(v15, v12, a3);
        v30 = v14;
        v40 = v12;
        goto LABEL_80;
      }
      v27 = v9 - v14;
      if (__OFSUB__(v9, v14))
      {
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      if (v27 > 0)
      {
        v28 = sub_18A5F101C(&qword_1EDF6A3D0);
        sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v15, v9 - v14, a4 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v14);
        v15 = sub_18A65DAF0(v15, v9 - v14, a3);
        result = sub_18A65DAF0(v14, v9 - v14, a3);
      }
      v19 = __OFSUB__(v12, v27);
      v23 = v12 - v27;
      if (v19)
        goto LABEL_89;
      if (v23 >= 1)
      {
        v29 = sub_18A5F101C(&qword_1EDF6A3D0);
        sub_18A6191B4(a4 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v15, v23, a4);
        sub_18A65DAF0(v15, v23, a3);
        v30 = 0;
LABEL_79:
        v40 = v23;
        goto LABEL_80;
      }
    }
  }
LABEL_81:
  v50 = a3[1];
  v19 = __OFSUB__(v50, v8);
  v46 = v50 - v8;
  if (v19)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
LABEL_82:
  a3[1] = v46;
  return result;
}

void sub_18A65E984(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a1[2];
  v7 = sub_18A5F101C(&qword_1EDF6A3D0);
  sub_18A65ED70(a2 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v6, a3, &qword_1EDF6A3D0);
  v8 = a1[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    v11 = a1[1];
    if (v10 >= *a1)
      v10 = 0;
    a1[2] = v10;
    if (!__OFSUB__(v11, 1))
    {
      a1[1] = v11 - 1;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_18A65EA1C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A65EA48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = swift_task_alloc();
  v6 = (_QWORD *)sub_18A5F3D3C(v5);
  v7 = sub_18A65EF2C(v6);
  return sub_18A65B9FC(v7, v1, v2, v4, v3);
}

uint64_t sub_18A65EAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6A3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_18A65EAFC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x18D76E7C4](a4, v6), a1);
  }
  sub_18A5F379C();
}

void sub_18A65EB38(uint64_t a1)
{
  uint64_t v1;

  sub_18A65B31C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_18A65EB40()
{
  sub_18A65C484();
}

size_t sub_18A65EB54(uint64_t a1)
{
  return sub_18A65C608(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_18A65EB68()
{
  JUMPOUT(0x18D76D0D8);
}

void sub_18A65EB7C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = a1[2];
  v3 = a1[1] + v2;
  if (*a1 >= v3)
  {
    if (v3 < v2)
    {
      __break(1u);
    }
    else if (!__OFSUB__(v3, v2))
    {
      v4[0] = a2 + *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * v2;
      v4[1] = v3 - v2;
      sub_18A65C814(v4);
      return;
    }
    __break(1u);
  }
}

uint64_t sub_18A65EC18(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  v5 = a5;
  if (a5)
    v5 = a5 + *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * a3;
  if (a1)
  {
    if (a2)
    {
      if (a4 - a3 < a2)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if (v5)
      {
        if (a2 < 0)
          goto LABEL_18;
        v10 = *(_QWORD *)(*(_QWORD *)(sub_18A5F101C(&qword_1EDF6A3D0) - 8) + 72) * a2;
        v11 = v5 + v10;
        v12 = a1 + v10;
        if (v11 > a1 && v12 > v5)
          goto LABEL_18;
        swift_arrayInitWithCopy();
      }
    }
  }
  else
  {
    a2 = 0;
  }
  result = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

void sub_18A65ED70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_18A5F101C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_18A5F379C();
}

uint64_t sub_18A65EDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6A3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_18A65EDF8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_BYTE *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc();
  v5 = (_QWORD *)sub_18A5F3D3C(v4);
  v6 = sub_18A65EF2C(v5);
  return sub_18A65B168(v6, v1, v3, v2);
}

void sub_18A65EE58()
{
  uint64_t v0;

  sub_18A65B948(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_18A65EE64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(int **)(v0 + 24);
  v2 = swift_task_alloc();
  v3 = (_QWORD *)sub_18A5F3D3C(v2);
  v4 = sub_18A65EF2C(v3);
  return sub_18A65BFE4(v4, v1);
}

uint64_t sub_18A65EEC4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A65EED8()
{
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

void sub_18A65EF0C()
{
  uint64_t v0;

  sub_18A65BD74(*(_QWORD *)(v0 + 128));
}

uint64_t sub_18A65EF14()
{
  return swift_task_alloc();
}

uint64_t sub_18A65EF2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A65EF3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *a1 = v2;
  a1[1] = v1;
  v4 = *(_QWORD *)(v2 + 120);
  result = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v3 + 16) = 126;
  *(_QWORD *)(v3 + 24) = v4;
  return result;
}

uint64_t sub_18A65EF54(__n128 *a1, __n128 a2)
{
  unint64_t v2;
  uint64_t v3;

  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return sub_18A67511C((uint64_t)a1, v3);
}

size_t sub_18A65EF78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_18A65EFBC()
{
  return TaskLocal.get()();
}

void CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = sub_18A5F3F90();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    swift_retain();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setPerShareParticipantCompletionBlock_);
    _Block_release(v6);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerShareParticipantCompletionBlock_);
  }
}

void CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A60A50C, MEMORY[0x1E0C809B0], 1107296256, v9, v10);
    sub_18A60A614(a1);
    swift_retain();
    v8 = swift_release();
    sub_18A5F37C8(v8, sel_setFetchShareParticipantsCompletionBlock_);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setFetchShareParticipantsCompletionBlock_);
  }
}

void CKFetchShareParticipantsOperation.perShareParticipantResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perShareParticipantCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A614F28;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A65F1E0(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);

  CKFetchShareParticipantsOperation.perShareParticipantResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A65F570;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A65F244(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A65F564;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18A65F2C4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t *, uint64_t *))
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = a1;
  v5 = a2;
  v6 = a3 & 1;
  return a4(&v7, &v5);
}

uint64_t sub_18A65F304()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A65F328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A65F338()
{
  return swift_release();
}

void CKFetchShareParticipantsOperation.perShareParticipantResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchShareParticipantsOperation.perShareParticipantResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A65F370(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_fetchShareParticipantsCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60A3E4;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A65F400(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A65F464(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18A65F4E4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A65F538(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

uint64_t sub_18A65F564(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_18A65F2C4(a1, a2, a3 & 1, *(uint64_t (**)(uint64_t *, uint64_t *))(v3 + 16));
}

uint64_t sub_18A65F570(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_18A65F5C8(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_18A65F5EC + 4 * byte_18A83BD10[a2 >> 62]))();
}

BOOL sub_18A65F5EC(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2) == 0;
}

id sub_18A65F614()
{
  id v0;
  unsigned __int8 *v1;
  os_unfair_lock_s *v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D03788]), sel_init);
  objc_msgSend(v0, sel_set_allowsExpensiveAccess_, 1);
  if (qword_1EDF6AAB8 != -1)
    swift_once();
  v1 = (unsigned __int8 *)off_1EDF6BDD8;
  v2 = (os_unfair_lock_s *)((char *)off_1EDF6BDD8 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)off_1EDF6BDD8 + 5);
  LODWORD(v1) = v1[16];
  os_unfair_lock_unlock(v2);
  if ((_DWORD)v1 == 1)
  {
    objc_msgSend(v0, sel_setNetworkingDelegate_, objc_msgSend((id)objc_opt_self(), sel_testNetworkingDelegate));
    swift_unknownObjectRelease();
  }
  return v0;
}

uint64_t sub_18A65F6F0()
{
  uint64_t result;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A820);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 0;
  off_1EDF6BDD8 = (_UNKNOWN *)result;
  return result;
}

uint64_t static AssetStreamHandle.useNetworkingDelegateLock.getter()
{
  if (qword_1EDF6AAB8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static AssetStreamHandle.makeAssetStreamHandle(from:with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;

  *(_QWORD *)(v6 + 32) = v5;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v12;
  *v12 = v6;
  v12[1] = sub_18A65F7FC;
  return sub_18A65F8F4(a1, a2, a3, a4, a5);
}

uint64_t sub_18A65F7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v8;
  _QWORD *v11;

  v8 = (_QWORD *)*v4;
  v11 = (_QWORD *)*v4;
  sub_18A663A84(&v11);
  if (v3)
  {
    sub_18A663A04();
    __asm { BR              X0 }
  }
  v8[6] = a3;
  v8[7] = a2;
  v8[8] = a1;
  sub_18A5F3840();
  sub_18A663A04();
  return swift_task_switch();
}

uint64_t sub_18A65F87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  char *v6;
  id v7;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(objc_class **)(v0 + 32);
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal];
  *(_QWORD *)v6 = v1;
  *((_QWORD *)v6 + 1) = v2;
  *((_QWORD *)v6 + 2) = v3;
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v4;
  v7 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

uint64_t sub_18A65F8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A65F90C()
{
  _QWORD *v0;
  _QWORD *v2;
  uint64_t v3;

  if ((sub_18A65F5C8(v0[10], v0[11]) & 1) != 0)
  {
    type metadata accessor for CKError(0);
    v0[8] = 8;
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_18A663A04();
    __asm { BR              X0 }
  }
  v2 = (_QWORD *)swift_task_alloc();
  v0[14] = v2;
  *v2 = v0;
  v2[1] = sub_18A65F9FC;
  sub_18A663A04();
  return sub_18A661880(v3);
}

uint64_t sub_18A65F9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 120) = a1;
  *(_QWORD *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 136) = v2;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v4 + 8))();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A65FA68()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 136);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_18A6636B4();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    sub_18A60FBA4(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    sub_18A5F37AC();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 88);
    sub_18A5F37AC();
    v5 = sub_18A661BE4(*(_QWORD *)(v0 + 48), v3, v2);
    sub_18A5F4910();
    swift_bridgeObjectRelease();
    sub_18A5F37E0();
    swift_bridgeObjectRelease();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    swift_bridgeObjectRetain();
    return v8(v5, v6, v7);
  }
}

uint64_t sub_18A65FC34(uint64_t a1, void *a2, void *a3, const void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = type metadata accessor for URL();
  v4[2] = v8;
  v4[3] = *(_QWORD *)(v8 - 8);
  v9 = swift_task_alloc();
  v4[4] = v9;
  v4[5] = _Block_copy(a4);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a2;
  v11 = a3;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v4[6] = v12;
  v4[7] = v14;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  v4[8] = v17;
  swift_getObjCClassMetadata();
  v18 = (_QWORD *)swift_task_alloc();
  v4[9] = v18;
  *v18 = v4;
  v18[1] = sub_18A65FD48;
  return static AssetStreamHandle.makeAssetStreamHandle(from:with:for:)(v9, v12, v14, v15, v17);
}

uint64_t sub_18A65FD48(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v5;
  unint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  void *v9;
  _QWORD *v11;

  v3 = v1;
  v11 = *(_QWORD **)v2;
  v5 = v11;
  sub_18A663A84(&v11);
  v6 = v5[7];
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))v5[5];
  v8 = v5[6];
  (*(void (**)(_QWORD, _QWORD))(v5[3] + 8))(v5[4], v5[2]);
  swift_bridgeObjectRelease();
  sub_18A60FBA4(v8, v6);
  if (v3)
  {
    v9 = (void *)_convertErrorToNSError(_:)();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v9);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](v7, a1, 0);
    _Block_release(v7);

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18A65FE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  sub_18A5F1010((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_1EDF6BEC8;
  v9[5] = v8;
  sub_18A663238((uint64_t)v6, (uint64_t)&unk_1EDF6BED8, (uint64_t)v9);
  return swift_release();
}

objc_class *AssetStreamHandle.__allocating_init(from:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return AssetStreamHandle.init(from:)(a1, a2);
}

objc_class *AssetStreamHandle.init(from:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  objc_class *ObjectType;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  objc_super v14;

  v4 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = v4;
  sub_18A612FA0(a1, a2);
  v9 = sub_18A660024(a1, a2);
  if (v3)
  {
    sub_18A663AD0();

    sub_18A663AB8();
  }
  else
  {
    v12 = (uint64_t *)&v8[OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal];
    *v12 = v9;
    v12[1] = v10;
    v12[2] = v11;

    v14.receiver = v8;
    v14.super_class = ObjectType;
    ObjectType = (objc_class *)objc_msgSendSuper2(&v14, sel_init);
    sub_18A663AD0();
  }
  return ObjectType;
}

uint64_t sub_18A660024(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for JSONDecoder();
  sub_18A610420();
  JSONDecoder.init()();
  sub_18A661268();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_18A60FBA4(a1, a2);
  result = swift_release();
  if (!v2)
    return v6;
  return result;
}

uint64_t AssetStreamHandle.serializedData()()
{
  uint64_t v0;

  type metadata accessor for JSONEncoder();
  sub_18A610420();
  JSONEncoder.init()();
  sub_18A660210();
  v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

{
  return MEMORY[0x1E0D10A48]();
}

unint64_t sub_18A660210()
{
  unint64_t result;

  result = qword_1EDF6BDF8;
  if (!qword_1EDF6BDF8)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BF5C, &type metadata for AssetStreamHandleInternal);
    atomic_store(result, (unint64_t *)&qword_1EDF6BDF8);
  }
  return result;
}

void AssetStreamHandle.makeAVPlayerItem(with:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A660318(a1, a2, *(_QWORD *)(v2 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal), *(_QWORD *)(v2 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 8), *(_QWORD *)(v2 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 16));
}

void sub_18A660318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSURL *v33;
  id v34;
  unint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  ValueMetadata *v55;
  unint64_t v56;

  v45 = a4;
  v46 = a5;
  v43 = a2;
  v44 = a3;
  v7 = sub_18A663AA4();
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  MEMORY[0x1E0C80A78](v7);
  sub_18A5F4280();
  v51 = v8;
  v47 = sub_18A663A78();
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v9);
  sub_18A5F4280();
  v48 = v10;
  sub_18A663A6C();
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v11);
  sub_18A6639EC();
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  sub_18A5F3E5C();
  v16 = v15 - v14;
  sub_18A5F101C(&qword_1EDF6B8C0);
  sub_18A5F3AC8();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v42 - v21;
  v23 = type metadata accessor for URL();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  sub_18A5F3E5C();
  v27 = v26 - v25;
  sub_18A6635EC(v5, (uint64_t)v22);
  if (sub_18A5F105C((uint64_t)v22, 1, v23) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v27, v22, v23);
    v29 = v51;
    goto LABEL_5;
  }
  v42[1] = v6;
  sub_18A6638F4();
  UUID.init()();
  sub_18A62F924(&qword_1EDF6BF10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  URL.init(string:)();
  sub_18A5F37E0();
  if (sub_18A5F105C((uint64_t)v20, 1, v23) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v27, v20, v23);
    sub_18A60FCC4((uint64_t)v22, &qword_1EDF6B8C0);
    v29 = v51;
LABEL_5:
    v30 = v46;
    v31 = v43;
    v32 = objc_allocWithZone(MEMORY[0x1E0C8B3C0]);
    swift_bridgeObjectRetain();
    v34 = sub_18A662FC4(v27, v31, v33);
    v55 = &type metadata for AssetStreamHandleInternal;
    v35 = sub_18A66242C();
    v52 = v44;
    v53 = v45;
    v56 = v35;
    v54 = v30;
    v36 = objc_allocWithZone((Class)type metadata accessor for LoadingRequestHandler());
    sub_18A5F4724();
    swift_bridgeObjectRetain();
    v37 = (void *)LoadingRequestHandler.init(streamHandle:type:)();
    v38 = objc_msgSend(v34, sel_resourceLoader);
    sub_18A663634();
    v39 = v37;
    static DispatchQoS.unspecified.getter();
    v52 = MEMORY[0x1E0DEE9D8];
    sub_18A62F924(&qword_1EDF6BF20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    sub_18A5F101C(&qword_1EDF6BF28);
    sub_18A663670();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v29, *MEMORY[0x1E0DEF8D0], v50);
    sub_18A663958();
    v40 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    objc_msgSend(v38, sel_setDelegate_queue_, v39, v40);

    type metadata accessor for PlayerItem();
    v41 = v39;
    dispatch thunk of static PlayerItem.makePlayerItem(with:delegate:)();

    sub_18A5F37E8();
    return;
  }
  __break(1u);
}

void AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_18A660828(a1, a2, a3, a4, *(_QWORD *)(v4 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal), *(_QWORD *)(v4 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 8), *(_QWORD *)(v4 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal + 16));
}

void sub_18A660828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSURL *v35;
  id v36;
  unint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  ValueMetadata *v59;
  unint64_t v60;

  v47 = a6;
  v48 = a7;
  v45 = a2;
  v46 = a5;
  v55 = a3;
  v11 = sub_18A663AA4();
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  MEMORY[0x1E0C80A78](v11);
  sub_18A5F4280();
  v54 = v12;
  v50 = sub_18A663A78();
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v13);
  sub_18A5F4280();
  v51 = v14;
  sub_18A663A6C();
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v15);
  sub_18A5F4280();
  v49 = v16;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  sub_18A5F3E5C();
  v21 = v20 - v19;
  sub_18A5F101C(&qword_1EDF6B8C0);
  sub_18A5F3AC8();
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)v44 - v26;
  v28 = type metadata accessor for URL();
  sub_18A5F3DB0();
  MEMORY[0x1E0C80A78](v29);
  sub_18A6639EC();
  sub_18A6635EC(v7, (uint64_t)v27);
  if (sub_18A5F105C((uint64_t)v27, 1, v28) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v8, v27, v28);
    goto LABEL_5;
  }
  v44[1] = a4;
  sub_18A6638F4();
  UUID.init()();
  sub_18A62F924(&qword_1EDF6BF10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
  URL.init(string:)();
  sub_18A5F37E0();
  if (sub_18A5F105C((uint64_t)v25, 1, v28) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v8, v25, v28);
    sub_18A60FCC4((uint64_t)v27, &qword_1EDF6B8C0);
LABEL_5:
    v32 = v47;
    v31 = v48;
    v33 = v45;
    v34 = objc_allocWithZone(MEMORY[0x1E0C8B3C0]);
    swift_bridgeObjectRetain();
    v36 = sub_18A662FC4(v8, v33, v35);
    v59 = &type metadata for AssetStreamHandleInternal;
    v37 = sub_18A66242C();
    v56 = v46;
    v57 = v32;
    v60 = v37;
    v58 = v31;
    v38 = objc_allocWithZone((Class)type metadata accessor for LoadingRequestHandler());
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v39 = (void *)LoadingRequestHandler.init(streamHandle:type:)();
    v40 = objc_msgSend(v36, sel_resourceLoader);
    sub_18A663634();
    v41 = v39;
    static DispatchQoS.unspecified.getter();
    v56 = MEMORY[0x1E0DEE9D8];
    sub_18A62F924(&qword_1EDF6BF20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    sub_18A5F101C(&qword_1EDF6BF28);
    sub_18A663670();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v54, *MEMORY[0x1E0DEF8D0], v53);
    sub_18A663958();
    v42 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    objc_msgSend(v40, sel_setDelegate_queue_, v41, v42);

    v43 = objc_allocWithZone((Class)type metadata accessor for AssetExportSession());
    swift_bridgeObjectRetain();
    AssetExportSession.init(avAsset:presetName:delegate:)();
    sub_18A5F37E8();
    return;
  }
  __break(1u);
}

id AssetStreamHandle.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AssetStreamHandle.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_18A660DA4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000019 && a2 == 0x800000018A83FB80)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_18A660E28()
{
  return 0xD000000000000019;
}

uint64_t sub_18A660E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A660DA4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18A660E74()
{
  return sub_18A60793C();
}

uint64_t sub_18A660E8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _sSo18CKDeviceCapabilityC8CloudKitE20supportsSecureCodingSbvgZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18A660EB4()
{
  sub_18A661064();
  return CodingKey.description.getter();
}

uint64_t sub_18A660EDC()
{
  sub_18A661064();
  return CodingKey.debugDescription.getter();
}

id AssetStreamHandle.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t AssetStreamHandle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_18A5F101C(&qword_1EDF6BE00);
  sub_18A5F3DB0();
  MEMORY[0x1E0C80A78](v5);
  sub_18A5F3908();
  sub_18A608B00(a1, a1[3]);
  sub_18A661064();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18A660210();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
}

unint64_t sub_18A661064()
{
  unint64_t result;

  result = qword_1EDF6BE08;
  if (!qword_1EDF6BE08)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BF0C, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BE08);
  }
  return result;
}

void *AssetStreamHandle.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AssetStreamHandle.init(from:)(a1);
}

void *AssetStreamHandle.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;
  char *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_super v11;
  __int128 v12;
  uint64_t v13;
  objc_class *ObjectType;

  v3 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v10 = sub_18A5F101C(&qword_1EDF6BE10);
  MEMORY[0x1E0C80A78](v10);
  sub_18A5F3E5C();
  v5 = sub_18A608B00(a1, a1[3]);
  sub_18A661064();
  v6 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    sub_18A608B60((uint64_t)a1);
    sub_18A663AB8();
  }
  else
  {
    sub_18A661268();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v8 = v13;
    v9 = &v6[OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal];
    *(_OWORD *)v9 = v12;
    *((_QWORD *)v9 + 2) = v8;

    v11.receiver = v6;
    v11.super_class = ObjectType;
    v5 = objc_msgSendSuper2(&v11, sel_init);
    sub_18A6639DC();
    sub_18A608DCC();
  }
  return v5;
}

unint64_t sub_18A661268()
{
  unint64_t result;

  result = qword_1EDF6BE18;
  if (!qword_1EDF6BE18)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BEE4, &type metadata for AssetStreamHandleInternal);
    atomic_store(result, (unint64_t *)&qword_1EDF6BE18);
  }
  return result;
}

void *sub_18A6612A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *result;

  result = AssetStreamHandle.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_18A6612CC(_QWORD *a1)
{
  return AssetStreamHandle.encode(to:)(a1);
}

void AssetStreamHandle.size.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  BOOL v10;

  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal);
  if (v6 >> 62)
    goto LABEL_13;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_18A5F4724();
  if (v7)
  {
    while (v7 >= 1)
    {
      sub_18A6639BC();
      while (1)
      {
        if (v3)
          sub_18A623A6C();
        v8 = sub_18A5F3D34(v6 + 8 * v2);
        sub_18A6638E4(v8);
        v9 = v5 - v4;
        if (__OFSUB__(v5, v4))
          break;
        v10 = __OFADD__(v1, v9);
        v1 += v9;
        if (v10)
          goto LABEL_12;
        if (v7 == ++v2)
          goto LABEL_14;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      sub_18A5F4724();
      v7 = sub_18A623AB0();
      if (!v7)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    sub_18A5F4514();
    sub_18A5F3800();
  }
}

void sub_18A6613E0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  uint64_t v9;
  BOOL v10;

  if (a1 >> 62)
    goto LABEL_13;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_18A5F4724();
  if (v7)
  {
    while (v7 >= 1)
    {
      sub_18A6639BC();
      while (1)
      {
        if (v3)
          sub_18A623A6C();
        v8 = sub_18A5F3D34(a1 + 8 * v2);
        sub_18A6638E4(v8);
        v9 = v5 - v4;
        if (__OFSUB__(v5, v4))
          break;
        v10 = __OFADD__(v1, v9);
        v1 += v9;
        if (v10)
          goto LABEL_12;
        if (v7 == ++v2)
          goto LABEL_14;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      sub_18A5F4724();
      v7 = sub_18A623AB0();
      if (!v7)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    sub_18A5F4514();
    sub_18A5F3800();
  }
}

uint64_t AssetStreamHandle.range.getter()
{
  uint64_t v0;

  sub_18A6614C0(*(_QWORD *)(v0 + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal));
  return 0;
}

{
  return MEMORY[0x1E0D10A70]();
}

uint64_t sub_18A6614C0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  id v9;
  uint64_t v10;
  BOOL v11;

  if (a1 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = sub_18A5F4724();
  if (v7)
  {
    while (v7 >= 1)
    {
      sub_18A6639BC();
      while (1)
      {
        if (v3)
          sub_18A623A6C();
        v9 = sub_18A5F3D34(a1 + 8 * v2);
        sub_18A6638E4(v9);
        v10 = v5 - v4;
        if (__OFSUB__(v5, v4))
          break;
        v11 = __OFADD__(v1, v10);
        v1 += v10;
        if (v11)
          goto LABEL_13;
        if (v7 == ++v2)
        {
          sub_18A5F4514();
          if ((v1 & 0x8000000000000000) == 0)
            return 0;
          __break(1u);
          break;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      sub_18A5F4724();
      result = sub_18A623AB0();
      v7 = result;
      if (!result)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_18A5F4514();
    return 0;
  }
  return result;
}

uint64_t AssetStreamHandle.inputStream(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_18A5F101C(&qword_1EDF6BE28);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = sub_18A5F3CBC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6615E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  sub_18A663A18();
  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal;
  v7 = *(_OWORD *)v3;
  v4 = *(_QWORD *)(v3 + 16);
  v5 = swift_task_alloc();
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v1;
  sub_18A663A34(v5, *MEMORY[0x1E0DF0A50]);
  sub_18A663980();
  swift_task_dealloc();
  sub_18A663AB0();
  return sub_18A6638C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A661684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = sub_18A5F101C(&qword_1EDF6BE28);
  v6[8] = v7;
  v6[9] = *(_QWORD *)(v7 - 8);
  v6[10] = sub_18A5F3CBC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6616D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  sub_18A663A18();
  v1 = *(_QWORD *)(v0 + 56);
  v6 = *(_OWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc();
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  sub_18A663A34(v4, *MEMORY[0x1E0DF0A50]);
  sub_18A663980();
  swift_task_dealloc();
  sub_18A663AB0();
  return sub_18A6638C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AssetStreamHandle.readAll(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_18A5F4194();
}

uint64_t sub_18A661778()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC8CloudKit17AssetStreamHandle_assetStreamHandleInternal;
  v2 = *(_OWORD *)v1;
  v3 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 32) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  sub_18A66242C();
  *v4 = v0;
  v4[1] = sub_18A6617FC;
  return StreamHandle.readAll(in:)();
}

uint64_t sub_18A6617FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(v6 + 72) = v2;
  swift_task_dealloc();
  if (!v2)
    return sub_18A5F4630(a1, a2, *(uint64_t (**)(void))(v6 + 8));
  sub_18A5F3840();
  return swift_task_switch();
}

uint64_t sub_18A661874()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A661880(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[4] = a1;
  v2 = type metadata accessor for URL();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v3 = type metadata accessor for URLRequest();
  v1[8] = v3;
  v1[9] = *(_QWORD *)(v3 - 8);
  v1[10] = swift_task_alloc();
  return swift_task_switch();
}

id sub_18A661908()
{
  _QWORD *v0;
  id result;
  _QWORD *v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 16))(v0[7], v0[4], v0[5]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  result = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
  v0[11] = result;
  if (result)
  {
    type metadata accessor for AssetStreamHandle();
    v0[12] = sub_18A65F614();
    v2 = (_QWORD *)swift_task_alloc();
    v0[13] = v2;
    *v2 = v0;
    v2[1] = sub_18A6619CC;
    return (id)C2RequestManager.data(for:options:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18A6619CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  v5 = (_QWORD *)*v4;
  v5[14] = a1;
  v5[15] = a2;
  v5[16] = a3;
  v5[17] = v3;
  swift_task_dealloc();
  v7 = v5 + 11;
  v6 = (void *)v5[11];

  sub_18A5F3840();
  return sub_18A5F4708();
}

void sub_18A661A40()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  objc_opt_self();
  v1 = (void *)swift_dynamicCastObjCClass();
  if (v1)
  {
    if (objc_msgSend(v1, sel_statusCode) == (id)200)
    {
      v2 = (void *)v0[16];
      (*(void (**)(_QWORD, _QWORD))(v0[9] + 8))(v0[10], v0[8]);

      sub_18A663AB0();
      sub_18A663978();
      sub_18A663918();
      __asm { BR              X2 }
    }
  }
  v4 = v0[15];
  v5 = (void *)v0[16];
  v6 = v0[14];
  v7 = v0[9];
  v10 = v0[10];
  v8 = v0[8];
  type metadata accessor for CKError(0);
  v0[3] = 4;
  sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  sub_18A60FBA4(v6, v4);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v8);
  sub_18A663AC4();
  sub_18A663978();
  sub_18A663918();
  __asm { BR              X0 }
}

uint64_t sub_18A661BA0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  sub_18A663AC4();
  sub_18A663978();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A661BE4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  result = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    result = swift_bridgeObjectRetain();
    v8 = 0;
    for (i = 32; ; i += 56)
    {
      v10 = *(_OWORD *)(a1 + i + 32);
      v13[1] = *(_OWORD *)(a1 + i + 16);
      v13[2] = v10;
      v13[0] = *(_OWORD *)(a1 + i);
      v14 = *(_QWORD *)(a1 + i + 48);
      v11 = v8 + v10;
      if (__OFADD__(v8, (_QWORD)v10))
        break;
      if (v11 < v8)
        goto LABEL_13;
      objc_allocWithZone((Class)type metadata accessor for ChunkStreamHandle(0));
      sub_18A6636F0((uint64_t)v13);
      sub_18A6636F0((uint64_t)v13);
      sub_18A612FA0(a2, a3);
      sub_18A63CBC4((uint64_t)v13, a2, a3, v8, v11);
      if (v3)
      {
        sub_18A63DE8C((uint64_t)v13);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      MEMORY[0x18D76C9DC]();
      if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      result = sub_18A63DE8C((uint64_t)v13);
      v8 = v11;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t sub_18A661D80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6E61486B6E756863 && a2 == 0xEC00000073656C64;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7079547465737361 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_18A661E90(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7079547465737361;
  else
    return 0x6E61486B6E756863;
}

uint64_t sub_18A661ED4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_18A5F101C(&qword_1EDF6BE68);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_18A5F3908();
  sub_18A608B00(a1, a1[3]);
  sub_18A662E54();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18A5F101C(&qword_1EDF6BE78);
  sub_18A662E90(&qword_1EDF6BE80, &qword_1EDF6BE88, (uint64_t)&unk_18A83AD34, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
    KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
}

uint64_t sub_18A66202C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_18A5F101C(&qword_1EDF6BE90);
  sub_18A5F3DB0();
  MEMORY[0x1E0C80A78](v3);
  sub_18A5F3908();
  v4 = a1[3];
  sub_18A608B00(a1, v4);
  sub_18A662E54();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_18A608DCC();
  }
  else
  {
    sub_18A5F101C(&qword_1EDF6BE78);
    sub_18A662E90(&qword_1EDF6BE98, &qword_1EDF6BEA0, (uint64_t)&unk_18A83AD5C, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v4 = v6;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_18A663934();
    swift_bridgeObjectRetain();
    sub_18A608B60((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_18A5F394C();
  }
  return v4;
}

uint64_t sub_18A6621C0()
{
  char *v0;

  return sub_18A661E90(*v0);
}

uint64_t sub_18A6621C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A661D80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18A6621EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_18A612A90();
  *a1 = result;
  return result;
}

uint64_t sub_18A662210()
{
  sub_18A662E54();
  return CodingKey.description.getter();
}

uint64_t sub_18A662238()
{
  sub_18A662E54();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_18A662260@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_18A66202C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_18A66228C(_QWORD *a1)
{
  return sub_18A661ED4(a1);
}

uint64_t sub_18A6622A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a5;
  v23 = a6;
  v10 = sub_18A5F101C(&qword_1EDF6BEF0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority();
  sub_18A5F1010((uint64_t)v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v18 = (*(unsigned __int8 *)(v11 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = 0;
  *((_QWORD *)v19 + 4) = a2;
  *((_QWORD *)v19 + 5) = a3;
  v20 = v22;
  *((_QWORD *)v19 + 6) = a4;
  *((_QWORD *)v19 + 7) = v20;
  *((_QWORD *)v19 + 8) = v23;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v19[v18], v13, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18A670ABC((uint64_t)v16, (uint64_t)&unk_1EDF6BF00, (uint64_t)v19);
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

unint64_t sub_18A66242C()
{
  unint64_t result;

  result = qword_1EDF6BE38;
  if (!qword_1EDF6BE38)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BEA4, &type metadata for AssetStreamHandleInternal);
    atomic_store(result, (unint64_t *)&qword_1EDF6BE38);
  }
  return result;
}

uint64_t type metadata accessor for AssetStreamHandle()
{
  return objc_opt_self();
}

{
  return MEMORY[0x1E0D10A80]();
}

uint64_t method lookup function for AssetStreamHandle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetStreamHandle.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18A662504 + 4 * byte_18A83BD14[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18A662524 + 4 * byte_18A83BD19[v4]))();
}

_BYTE *sub_18A662504(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18A662524(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18A66252C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18A662534(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18A66253C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18A662544(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.CodingKeys()
{
  return &type metadata for AssetStreamHandle.CodingKeys;
}

uint64_t destroy for AssetStreamHandleInternal()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s8CloudKit25AssetStreamHandleInternalVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_18A5F3898();
  sub_18A5F379C();
}

_QWORD *assignWithCopy for AssetStreamHandleInternal(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AssetStreamHandleInternal(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AssetStreamHandleInternal()
{
  return &type metadata for AssetStreamHandleInternal;
}

unint64_t sub_18A66267C()
{
  unint64_t result;

  result = qword_1EDF6BE40[0];
  if (!qword_1EDF6BE40[0])
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BE7C, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, qword_1EDF6BE40);
  }
  return result;
}

uint64_t sub_18A6626B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[8] = a8;
  v8[9] = v11;
  v8[6] = a4;
  v8[7] = a7;
  v9 = sub_18A5F101C(&qword_1EDF6BF08);
  v8[10] = v9;
  v8[11] = *(_QWORD *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return swift_task_switch();
}

void sub_18A662724()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  char v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v1[6];
  v24 = MEMORY[0x1E0DEE9D8];
  if (v3 >> 62)
  {
    sub_18A5F3898();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_18A5F3898();
  if (!v4)
    goto LABEL_17;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v0 = 0;
  v6 = v1[7];
  v5 = v1[8];
  v7 = v1[6] + 32;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v8 = (char *)MEMORY[0x18D76CEB0](v0, v1[6]);
    else
      v8 = (char *)*(id *)(v7 + 8 * v0);
    v9 = *(_QWORD *)&v8[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range + 8];
    if (v9 <= v1[7]
      || (v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range], v10 >= v1[8])
      || v6 == v5
      || v10 == v9)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v2 = *(void **)(v24 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v0;
  }
  while (v4 != v0);
  swift_bridgeObjectRelease();
  v11 = v24;
LABEL_18:
  v1[13] = v11;
  if (v11 < 0 || (v11 & 0x4000000000000000) != 0)
  {
    sub_18A5F3898();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F37AC();
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 16);
  }
  v1[14] = v12;
  if (!v12)
  {
LABEL_30:
    sub_18A5F37AC();
    sub_18A663944();
    sub_18A5F101C(&qword_1EDF6BEF0);
    sub_18A6639A0();
    sub_18A663978();
    sub_18A663918();
    __asm { BR              X0 }
  }
  if (v12 < 1)
    goto LABEL_35;
  v13 = 0;
  while (1)
  {
    v14 = sub_18A6639CC(v13);
    v17 = v16 ? sub_18A5F3D34(v15 + 8 * v14) : (id)MEMORY[0x18D76CEB0](v14);
    sub_18A663A5C((uint64_t)v17);
    if (!v0)
      break;
    sub_18A5F3A2C();
    sub_18A663994();

    v13 = sub_18A6639AC();
    if (v16)
      goto LABEL_30;
  }
  sub_18A5F3EF4();
  if (v19 == v20)
  {
    v21 = (_QWORD *)swift_task_alloc();
    v1[17] = v21;
    sub_18A5F4060(v21, (uint64_t)sub_18A662984);
    sub_18A663918();
    sub_18A63D798(v22, v23);
    return;
  }
LABEL_36:
  __break(1u);
}

