uint64_t sub_18A662984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 144) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 152) = a2;
    *(_QWORD *)(v6 + 160) = a1;
  }
  sub_18A5F3840();
  return sub_18A5F4708();
}

void sub_18A6629F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  sub_18A663A18();
  v1 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(void **)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(void **)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 24) = v2;
  sub_18A612FA0(v1, v2);
  sub_18A5F101C(&qword_1EDF6BEF0);
  AsyncThrowingStream.Continuation.yield(_:)();

  sub_18A60FBA4(v1, v2);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v0 + 120) + 1;
  if (v7 == *(_QWORD *)(v0 + 112))
  {
LABEL_9:
    swift_release();
    sub_18A663944();
    sub_18A5F101C(&qword_1EDF6BEF0);
    sub_18A6639A0();
    sub_18A663978();
    (*(void (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 144);
    while (1)
    {
      v9 = sub_18A6639CC(v7);
      v12 = v11 ? sub_18A5F3D34(v10 + 8 * v9) : (id)MEMORY[0x18D76CEB0](v9);
      *(_QWORD *)(v0 + 128) = v12;
      static Task<>.checkCancellation()();
      if (!v8)
        break;
      sub_18A5F3A2C();
      sub_18A663994();

      v8 = 0;
      v7 = sub_18A6639AC();
      if (v11)
        goto LABEL_9;
    }
    sub_18A5F3EF4();
    if (v13 != v14)
    {
      __break(1u);
    }
    else
    {
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v15;
      v16 = sub_18A5F4060(v15, (uint64_t)sub_18A662984);
      sub_18A63D798(v16, v17);
    }
  }
}

void sub_18A662B70()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 144);
  do
  {
    sub_18A5F3A2C();
    sub_18A663994();

    v3 = sub_18A6639AC();
    if (v4)
    {
      swift_release();
      sub_18A663944();
      sub_18A5F101C(&qword_1EDF6BEF0);
      sub_18A6639A0();
      sub_18A663978();
      sub_18A663A04();
      __asm { BR              X0 }
    }
    v5 = sub_18A6639CC(v3);
    if (v4)
      v7 = sub_18A5F3D34(v6 + 8 * v5);
    else
      v7 = (id)MEMORY[0x18D76CEB0](v5);
    sub_18A663A5C((uint64_t)v7);
  }
  while (v2);
  sub_18A5F3EF4();
  if (v8 != v9)
  {
    __break(1u);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v10;
    sub_18A5F4060(v10, (uint64_t)sub_18A662984);
    sub_18A663A04();
    sub_18A63D798(v11, v12);
  }
}

void sub_18A662C54()
{
  JUMPOUT(0x18D76CB68);
}

void sub_18A662C78()
{
  unint64_t *v0;

  sub_18A6613E0(*v0);
}

uint64_t sub_18A662C80()
{
  unint64_t *v0;

  sub_18A6614C0(*v0);
  return 0;
}

uint64_t sub_18A662C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8 = *v3;
  v9 = v3[1];
  v10 = v3[2];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v11;
  *v11 = v4;
  v11[1] = sub_18A61F768;
  return sub_18A661684(a1, a2, a3, v8, v9, v10);
}

uint64_t sub_18A662D20()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A662D98;
  return StreamHandle.readAll(in:)();
}

uint64_t sub_18A662D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_18A5F40D8();
  if (!v2)
  {
    v6 = a1;
    v7 = a2;
  }
  return sub_18A5F4630(v6, v7, *(uint64_t (**)(void))(v3 + 8));
}

unint64_t sub_18A662DD8()
{
  unint64_t result;

  result = qword_1EDF6BE58;
  if (!qword_1EDF6BE58)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BDEC, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BE58);
  }
  return result;
}

unint64_t sub_18A662E18()
{
  unint64_t result;

  result = qword_1EDF6BE60;
  if (!qword_1EDF6BE60)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BE14, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BE60);
  }
  return result;
}

unint64_t sub_18A662E54()
{
  unint64_t result;

  result = qword_1EDF6BE70;
  if (!qword_1EDF6BE70)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C03C, &type metadata for AssetStreamHandleInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BE70);
  }
  return result;
}

uint64_t sub_18A662E90(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = sub_18A619E8C(&qword_1EDF6BE78);
    sub_18A62F924(a2, type metadata accessor for ChunkStreamHandle, a3);
    v11 = v10;
    result = MEMORY[0x18D76E7C4](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18A662F14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_18A662F50()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A6405B8;
  v2 = sub_18A663A90();
  return v3(v2);
}

id sub_18A662FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSURL *a3@<X8>)
{
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  NSDictionary v9;
  id v10;
  uint64_t v11;

  v4 = v3;
  URL._bridgeToObjectiveC()(a3);
  v8 = v7;
  if (a2)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v4, sel_initWithURL_options_, v8, v9.super.isa);

  v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  return v10;
}

uint64_t sub_18A663080(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_18A6638C4;
  return v6();
}

void sub_18A6630D8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A6638C4;
  sub_18A663A90();
  sub_18A663A04();
  __asm { BR              X4 }
}

uint64_t sub_18A663140(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_18A6638C4;
  return v7();
}

uint64_t sub_18A663198()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6631C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A6638C4;
  v2 = sub_18A663A44();
  return v3(v2);
}

uint64_t sub_18A663238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  if (sub_18A5F105C(a1, 1, v6) == 1)
  {
    sub_18A60FCC4(a1, (uint64_t *)&unk_1EDF6A688);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_18A66337C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_18A6633E0;
  return v6(a1);
}

uint64_t sub_18A6633E0()
{
  uint64_t v0;

  sub_18A5F40D8();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A663408()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A66342C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_18A61F768;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EDF6BEE0 + dword_1EDF6BEE0))(a1, v4);
}

uint64_t sub_18A66349C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_18A5F101C(&qword_1EDF6BEF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_18A663524()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_18A5F101C(&qword_1EDF6BEF0);
  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[8];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_18A6638C4;
  v7 = sub_18A663A44();
  return sub_18A6626B8(v7, v8, v9, v10, v2, v3, v4, v5);
}

void sub_18A6635D4()
{
  sub_18A662C54();
}

uint64_t sub_18A6635DC(uint64_t a1)
{
  uint64_t *v1;

  return sub_18A6622A8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_18A6635EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C(&qword_1EDF6B8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_18A663634()
{
  unint64_t result;

  result = qword_1EDF6BF18;
  if (!qword_1EDF6BF18)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDF6BF18);
  }
  return result;
}

unint64_t sub_18A663670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6BF30;
  if (!qword_1EDF6BF30)
  {
    v1 = sub_18A619E8C(&qword_1EDF6BF28);
    result = MEMORY[0x18D76E7C4](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, &qword_1EDF6BF30);
  }
  return result;
}

unint64_t sub_18A6636B4()
{
  unint64_t result;

  result = qword_1EDF6BF40;
  if (!qword_1EDF6BF40)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83B9D0, &type metadata for AssetInfo);
    atomic_store(result, (unint64_t *)&qword_1EDF6BF40);
  }
  return result;
}

uint64_t sub_18A6636F0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandleInternal.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A663784 + 4 * byte_18A83BD23[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A6637B8 + 4 * byte_18A83BD1E[v4]))();
}

uint64_t sub_18A6637B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A6637C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A6637C8);
  return result;
}

uint64_t sub_18A6637D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A6637DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A6637E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A6637E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandleInternal.CodingKeys()
{
  return &type metadata for AssetStreamHandleInternal.CodingKeys;
}

unint64_t sub_18A663808()
{
  unint64_t result;

  result = qword_1EDF6BF48;
  if (!qword_1EDF6BF48)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C014, &type metadata for AssetStreamHandleInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BF48);
  }
  return result;
}

unint64_t sub_18A663848()
{
  unint64_t result;

  result = qword_1EDF6BF50;
  if (!qword_1EDF6BF50)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BF84, &type metadata for AssetStreamHandleInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDF6BF50);
  }
  return result;
}

unint64_t sub_18A663888()
{
  unint64_t result;

  result = qword_1EDF6BF58;
  if (!qword_1EDF6BF58)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83BFAC, &type metadata for AssetStreamHandleInternal.CodingKeys);
    atomic_store(result, &qword_1EDF6BF58);
  }
  return result;
}

uint64_t sub_18A6638C8(uint64_t (*a1)(void))
{
  return a1();
}

void sub_18A6638E4(id a1)
{

}

void sub_18A6638F4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0x6D61657274736B63;
  *(_QWORD *)(v0 - 112) = 0xEB000000002F2F3ALL;
}

uint64_t sub_18A663934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_18A663944()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = 0;
}

uint64_t sub_18A663958()
{
  return 0x712D65646F636564;
}

uint64_t sub_18A663978()
{
  return swift_task_dealloc();
}

uint64_t sub_18A663980()
{
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t sub_18A663994()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_18A6639A0()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_18A6639AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120) + 1;
}

uint64_t sub_18A6639CC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = result;
  return result;
}

uint64_t sub_18A6639DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_18A663A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_18A663A44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A663A5C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return static Task<>.checkCancellation()();
}

uint64_t sub_18A663A6C()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_18A663A78()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t sub_18A663A84@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_task_dealloc();
}

uint64_t sub_18A663A90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A663AA4()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t sub_18A663AB0()
{
  return swift_task_dealloc();
}

uint64_t sub_18A663AB8()
{
  return swift_deallocPartialClassInstance();
}

uint64_t sub_18A663AC4()
{
  return swift_task_dealloc();
}

uint64_t sub_18A663AD0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A60FBA4(v1, v0);
}

void CKScheduler.registerActivityIdentifier(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(a1, a2, 0, a3, a4);
}

void CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];

  v9 = (void *)MEMORY[0x18D76C7CC]();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a5;
  v12[4] = sub_18A663CE4;
  v12[5] = v10;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = sub_18A663EDC;
  v12[3] = &unk_1E1F59F18;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_registerActivityIdentifier_replaceExistingHandler_handler_, v9, a3 & 1, v11);
  _Block_release(v11);

}

uint64_t sub_18A663BC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v16;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  sub_18A5F1010((uint64_t)v11, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a1;
  v13[7] = a2;
  v13[8] = a3;
  swift_retain();
  v14 = a1;
  swift_retain();
  sub_18A663DDC((uint64_t)v11, (uint64_t)&unk_1EDF6BF68, (uint64_t)v13);
  swift_release();
  return sub_18A5F5124((uint64_t)v11);
}

uint64_t sub_18A663CC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A663CE4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_18A663BC8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_18A663CEC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v8[2] = a7;
  v8[3] = a8;
  v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v10 = (_QWORD *)swift_task_alloc();
  v8[4] = v10;
  *v10 = v8;
  v10[1] = sub_18A663D54;
  return v12(a6);
}

uint64_t sub_18A663D54(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18A663DB0()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 40));
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A663DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  sub_18A66407C(a1, 0, 0, 0, 1, 0, 0);
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  return swift_task_create();
}

void sub_18A663EDC(uint64_t a1, void *a2, void *aBlock)
{
  void (*v4)(void);
  void *v5;
  id v6;

  v4 = *(void (**)(void))(a1 + 32);
  v5 = _Block_copy(aBlock);
  *(_QWORD *)(swift_allocObject() + 16) = v5;
  swift_retain();
  v6 = a2;
  v4();
  swift_release();
  swift_release();

}

uint64_t sub_18A663F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A663F80()
{
  return swift_release();
}

uint64_t sub_18A663F88()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18A663FAC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A663FE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_18A61F768;
  return sub_18A663CEC(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18A66407C(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unsigned __int8 v18;
  uint64_t v19;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78]();
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18A6641AC(a1, (uint64_t)v15);
  v16 = type metadata accessor for TaskPriority();
  if (sub_18A5F105C((uint64_t)v15, 1, v16) == 1)
  {
    sub_18A5F5124((uint64_t)v15);
    result = 0;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    result = v18;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0)
LABEL_6:
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0)
    result |= 0x2000uLL;
  if ((a7 & 1) != 0)
    return result | 0x4000;
  return result;
}

uint64_t sub_18A6641AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_18A6641F8(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR____TtC8CloudKit28CloudAssetsAssetStreamHandle_assetStreamHandle];
  v5 = type metadata accessor for AssetStreamHandle();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v3;
  v9.super_class = v1;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

id static CloudAssetsAssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id result;
  _OWORD v17[5];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = a7;
  v19 = a8;
  v17[3] = a10;
  v17[4] = a9;
  v17[1] = a12;
  v17[2] = a11;
  v12 = type metadata accessor for AssetStreamHandle();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v20;
  result = (id)static AssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)();
  if (!v15)
    return sub_18A6641F8((uint64_t)v14);
  return result;
}

void CloudAssetsAssetStreamHandle.makeAVPlayerItem(with:options:)()
{
  AssetStreamHandle.makeAVPlayerItem(with:options:)();
  sub_18A5F379C();
}

void CloudAssetsAssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)()
{
  AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)();
  sub_18A5F379C();
}

objc_class *CloudAssetsAssetStreamHandle.__allocating_init(from:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return CloudAssetsAssetStreamHandle.init(from:)(a1, a2);
}

objc_class *CloudAssetsAssetStreamHandle.init(from:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  objc_class *ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  objc_super v14;

  v4 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v8 = type metadata accessor for AssetStreamHandle();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v4;
  sub_18A612FA0(a1, a2);
  AssetStreamHandle.init(from:)();
  if (v3)
  {
    sub_18A5F4294();

    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))((uint64_t)v12 + OBJC_IVAR____TtC8CloudKit28CloudAssetsAssetStreamHandle_assetStreamHandle, v11, v8);

    v14.receiver = v12;
    v14.super_class = ObjectType;
    ObjectType = (objc_class *)objc_msgSendSuper2(&v14, sel_init);
    sub_18A5F4294();
  }
  return ObjectType;
}

uint64_t CloudAssetsAssetStreamHandle.serializedData()()
{
  return AssetStreamHandle.serializedData()();
}

id CloudAssetsAssetStreamHandle.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CloudAssetsAssetStreamHandle.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CloudAssetsAssetStreamHandle.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CloudAssetsAssetStreamHandle.size.getter()
{
  AssetStreamHandle.size.getter();
  sub_18A5F379C();
}

uint64_t CloudAssetsAssetStreamHandle.range.getter()
{
  return AssetStreamHandle.range.getter();
}

uint64_t CloudAssetsAssetStreamHandle.inputStream(for:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A6405B8;
  return AssetStreamHandle.inputStream(for:)();
}

uint64_t CloudAssetsAssetStreamHandle.readAll(in:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for AssetStreamHandle();
  *v1 = v0;
  v1[1] = sub_18A664E50;
  return StreamHandle.readAll(in:)();
}

uint64_t sub_18A664E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_18A5F40D8();
  if (!v2)
  {
    v6 = a1;
    v7 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v7);
}

uint64_t sub_18A664E98()
{
  return type metadata accessor for CloudAssetsAssetStreamHandle();
}

uint64_t type metadata accessor for CloudAssetsAssetStreamHandle()
{
  uint64_t result;

  result = qword_1EDF6BF88;
  if (!qword_1EDF6BF88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18A664ED8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AssetStreamHandle();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for CloudAssetsAssetStreamHandle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CloudAssetsAssetStreamHandle.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

id CKSyncEngine.State.needsToFetchDatabaseChanges.setter(char a1)
{
  uint64_t v1;

  return sub_18A667234(a1, sel_setNeedsToFetchDatabaseChanges_, *(void **)(v1 + 16));
}

void CKSyncEngineFailedZoneSave.failedZoneSaveStruct()(_QWORD *a1@<X8>)
{
  sub_18A664F90((const char **)&selRef_recordZone, a1);
}

void CKSyncEngineFailedRecordSave.failedRecordSaveStruct()(_QWORD *a1@<X8>)
{
  sub_18A664F90((const char **)&selRef_record, a1);
}

void sub_18A664F90(const char **a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = sub_18A5F3888((uint64_t)a1, *a1);
  v4 = sub_18A5F3888((uint64_t)v3, sel_error);
  v5 = related decl 'e' for CKErrorCode.init(_:)(v4);
  *a2 = v3;
  a2[1] = v5;
  sub_18A5F3824();
}

void CKSyncEnginePendingRecordZoneChange.changeStruct()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  char v4;
  uint64_t v5;
  id v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = sub_18A5F3D50(a1, sel_type);
  if (!v3)
  {
    v4 = 0;
LABEL_5:
    *(_QWORD *)a2 = sub_18A5F3D50((uint64_t)v3, sel_recordID);
    *(_BYTE *)(a2 + 8) = v4;
    sub_18A5F40C8();
    return;
  }
  if (v3 == (id)1)
  {
    v4 = 1;
    goto LABEL_5;
  }
  sub_18A667314();
  _StringGuts.grow(_:)(42);
  sub_18A667364();
  sub_18A5F3CCC();
  v6 = sub_18A5F3D50(v5, sel_description);
  sub_18A610418();
  sub_18A6292D4();
  sub_18A5F443C(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  sub_18A5F460C();
  sub_18A5F3DC0();
  __break(1u);
}

id CKSyncEngine.State.stateObject.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void CKSyncEngine.State.__allocating_init()()
{
  uint64_t v0;

  v0 = sub_18A5F37B4();
  *(_QWORD *)(v0 + 16) = objc_msgSend((id)objc_opt_self(), sel_emptyState);
  sub_18A5F379C();
}

uint64_t CKSyncEngine.State.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = objc_msgSend((id)objc_opt_self(), sel_emptyState);
  return v0;
}

uint64_t CKSyncEngine.State.__allocating_init(_:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  CKSyncEngine.State.init(_:)(a1);
  return v2;
}

uint64_t CKSyncEngine.State.init(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  id v7;

  v3 = v1;
  v4 = *a1;
  v5 = a1[1];
  v6 = objc_allocWithZone((Class)CKSyncEngineState);
  v7 = sub_18A666764(v4, v5);
  if (v2)
    swift_deallocPartialClassInstance();
  else
    *(_QWORD *)(v3 + 16) = v7;
  return v3;
}

void CKSyncEngine.State.__allocating_init(_:)(uint64_t a1)
{
  *(_QWORD *)(sub_18A5F37B4() + 16) = a1;
  sub_18A5F379C();
}

uint64_t CKSyncEngine.State.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void CKSyncEngine.State.pendingRecordZoneChanges.getter()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  char v5;
  char v6;
  _BYTE v7[16];

  sub_18A5F3B04((uint64_t)objc_msgSend(*(id *)(v1 + 16), sel_pendingRecordZoneChanges), (unint64_t *)&unk_1EDF6A450);
  sub_18A5F3C9C();
  sub_18A623D94();
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_12:
    sub_18A5F37E0();
LABEL_13:
    sub_18A623AB8();
    return;
  }
  sub_18A5F4640();
  v2 = sub_18A623AB0();
  sub_18A5F37E0();
  if (!v2)
    goto LABEL_12;
LABEL_3:
  sub_18A66734C();
  sub_18A610060();
  if ((v2 & 0x8000000000000000) == 0)
  {
    do
    {
      if ((v0 & 0xC000000000000001) != 0)
        sub_18A5F398C();
      v3 = sub_18A5F3D34(v0);
      CKSyncEnginePendingRecordZoneChange.changeStruct()((uint64_t)v3, (uint64_t)v7);

      sub_18A66728C();
      if (v5)
      {
        sub_18A6672D4(v4);
        sub_18A610060();
      }
      sub_18A667270();
    }
    while (!v6);
    sub_18A5F37E0();
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_18A665354()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_18A66537C(v0);
}

#error "18A66541C: call analysis failed (funcsize=42)"

CKSyncEnginePendingRecordZoneChange __swiftcall CKSyncEngine.PendingRecordZoneChange.changeObject()()
{
  uint64_t v0;
  objc_class *v1;
  CKRecordID *v2;
  int64_t v3;
  CKSyncEnginePendingRecordZoneChange result;

  v1 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)CKSyncEnginePendingRecordZoneChange), sel_initWithRecordID_type_, *(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8));
  result._type = v3;
  result._recordID = v2;
  result.super.isa = v1;
  return result;
}

void CKSyncEngine.State.pendingDatabaseChanges.getter()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  char v5;
  char v6;
  _BYTE v7[16];

  sub_18A5F3B04((uint64_t)objc_msgSend(*(id *)(v1 + 16), sel_pendingDatabaseChanges), (unint64_t *)&unk_1EDF6A490);
  sub_18A5F3C9C();
  sub_18A623D94();
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_12:
    sub_18A5F37E0();
LABEL_13:
    sub_18A623AB8();
    return;
  }
  sub_18A5F4640();
  v2 = sub_18A623AB0();
  sub_18A5F37E0();
  if (!v2)
    goto LABEL_12;
LABEL_3:
  sub_18A66734C();
  sub_18A6100D0();
  if ((v2 & 0x8000000000000000) == 0)
  {
    do
    {
      if ((v0 & 0xC000000000000001) != 0)
        sub_18A5F398C();
      v3 = sub_18A5F3D34(v0);
      CKSyncEnginePendingDatabaseChange.changeStruct()((uint64_t)v3, (uint64_t)v7);

      sub_18A66728C();
      if (v5)
      {
        sub_18A6672D4(v4);
        sub_18A6100D0();
      }
      sub_18A667270();
    }
    while (!v6);
    sub_18A5F37E0();
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_18A665578()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_18A6655A0(v0);
}

#error "18A66566C: call analysis failed (funcsize=49)"

void CKSyncEnginePendingDatabaseChange.changeStruct()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  char v5;
  void *v6;
  uint64_t v7;
  id v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  id v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = sub_18A5F3D50(a1, sel_type);
  if (v3 == (id)1)
  {
    v4 = sub_18A5F3D50(1, sel_zoneID);
    v5 = 1;
LABEL_6:
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = v5;
    sub_18A5F40C8();
    return;
  }
  if (v3)
  {
    sub_18A667314();
    _StringGuts.grow(_:)(39);
    sub_18A667364();
    sub_18A5F3CCC();
    v8 = sub_18A5F3D50(v7, sel_description);
    sub_18A610418();
    sub_18A6292D4();
    sub_18A5F443C(v9, v10, v11, v12, v13, v14, v15, v16, v27, v28, v29);
    sub_18A5F460C();
  }
  else
  {
    objc_opt_self();
    v6 = (void *)swift_dynamicCastObjCClass();
    if (v6)
    {
      v4 = objc_msgSend(v6, sel_zone);
      v5 = 0;
      goto LABEL_6;
    }
    sub_18A667314();
    _StringGuts.grow(_:)(43);
    sub_18A667364();
    sub_18A5F3CCC();
    v18 = sub_18A5F3D50(v17, sel_description);
    sub_18A610418();
    sub_18A6292D4();
    sub_18A5F443C(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    sub_18A5F460C();
  }
  sub_18A5F3DC0();
  __break(1u);
}

CKSyncEnginePendingDatabaseChange __swiftcall CKSyncEngine.PendingDatabaseChange.changeObject()()
{
  uint64_t *v0;
  uint64_t v1;
  __objc2_class **v2;
  char **v3;
  objc_class *v4;
  CKRecordZoneID *v5;
  int64_t v6;
  CKSyncEnginePendingDatabaseChange result;

  v1 = *v0;
  v2 = off_1E1F54490;
  if (*((_BYTE *)v0 + 8))
  {
    v3 = &selRef_initWithZoneID_;
  }
  else
  {
    v2 = off_1E1F54498;
    v3 = &selRef_initWithZone_;
  }
  v4 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)*v2), *v3, v1);
  result._type = v6;
  result._zoneID = v5;
  result.super.isa = v4;
  return result;
}

id CKSyncEngine.State.hasPendingUntrackedChanges.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_hasPendingUntrackedChanges);
}

id CKSyncEngine.State.hasPendingUntrackedChanges.setter(char a1)
{
  uint64_t v1;

  return sub_18A667234(a1, sel_setHasPendingUntrackedChanges_, *(void **)(v1 + 16));
}

void CKSyncEngine.State.hasPendingUntrackedChanges.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = objc_msgSend((id)sub_18A6672EC(a1), sel_hasPendingUntrackedChanges);
  sub_18A5F379C();
}

id sub_18A665890(uint64_t a1, uint64_t a2)
{
  return sub_18A665CEC(a1, a2, (SEL *)&selRef_setHasPendingUntrackedChanges_);
}

void CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter()
{
  unint64_t v0;
  uint64_t v1;

  sub_18A5F3B04((uint64_t)objc_msgSend(*(id *)(v1 + 16), sel_zoneIDsWithUnfetchedServerChanges), (unint64_t *)&qword_1ECD967B0);
  sub_18A5F3C9C();
  sub_18A623D94();
  if ((v0 & 0x8000000000000000) != 0 || (v0 & 0x4000000000000000) != 0)
  {
    sub_18A6669E8(v0);
    sub_18A5F37E0();
  }
  sub_18A5F379C();
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
  sub_18A665924(pendingRecordZoneChanges._rawValue, &selRef_addPendingRecordZoneChanges_);
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
  sub_18A665924(pendingRecordZoneChanges._rawValue, &selRef_removePendingRecordZoneChanges_);
}

#error "18A6659B0: call analysis failed (funcsize=37)"

Swift::Void __swiftcall CKSyncEngine.State.add(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
  sub_18A6659D8(pendingDatabaseChanges._rawValue, &selRef_addPendingDatabaseChanges_);
}

Swift::Void __swiftcall CKSyncEngine.State.remove(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
  sub_18A6659D8(pendingDatabaseChanges._rawValue, &selRef_removePendingDatabaseChanges_);
}

#error "18A665A88: call analysis failed (funcsize=42)"

void sub_18A665A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  void *v13;
  uint64_t v14;
  id v15;

  sub_18A5F44DC();
  v12 = v11;
  v13 = *(void **)(v9 + 16);
  v14 = *(_QWORD *)(v10 + 16);
  if (v14)
  {
    sub_18A66724C();
    do
    {
      v15 = sub_18A667260();
      sub_18A5F415C(v15);
      sub_18A5F3A40();
      sub_18A5F4710();
      sub_18A5F41DC();
      v10 = sub_18A623AA8();
      --v14;
    }
    while (v14);
  }
  sub_18A5F3B04(v10, (unint64_t *)&unk_1EDF6A450);
  sub_18A623E94();
  sub_18A667240();
  objc_msgSend(v13, sel_markRecordZoneChanges_inFlight_, a9, v12 & 1);
  sub_18A5F44F8(a9);
}

uint64_t sub_18A665B40(uint64_t a1)
{
  return sub_18A665924(a1, &selRef_removeInFlightRecordChanges_);
}

id CKSyncEngine.State.needsToFetchDatabaseChanges.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_needsToFetchDatabaseChanges);
}

void CKSyncEngine.State.needsToFetchDatabaseChanges.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = objc_msgSend((id)sub_18A6672EC(a1), sel_needsToFetchDatabaseChanges);
  sub_18A5F379C();
}

id sub_18A665BA0(uint64_t a1, uint64_t a2)
{
  return sub_18A665CEC(a1, a2, (SEL *)&selRef_setNeedsToFetchDatabaseChanges_);
}

id CKSyncEngine.State.serverChangeTokenForDatabase.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_serverChangeTokenForDatabase);
}

void sub_18A665BD0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  CKSyncEngine.State.serverChangeTokenForDatabase.setter(v1);
}

void CKSyncEngine.State.serverChangeTokenForDatabase.setter(void *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 16), sel_setServerChangeTokenForDatabase_, a1);
  sub_18A667258(a1);
}

void CKSyncEngine.State.serverChangeTokenForDatabase.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, sel_serverChangeTokenForDatabase);
  sub_18A5F379C();
}

void sub_18A665C70(uint64_t a1, uint64_t a2)
{
  sub_18A66604C(a1, a2, (SEL *)&selRef_setServerChangeTokenForDatabase_);
}

id CKSyncEngine.State.needsToSaveDatabaseSubscription.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_needsToSaveDatabaseSubscription);
}

id CKSyncEngine.State.needsToSaveDatabaseSubscription.setter(char a1)
{
  uint64_t v1;

  return sub_18A667234(a1, sel_setNeedsToSaveDatabaseSubscription_, *(void **)(v1 + 16));
}

void CKSyncEngine.State.needsToSaveDatabaseSubscription.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = objc_msgSend((id)sub_18A6672EC(a1), sel_needsToSaveDatabaseSubscription);
  sub_18A5F379C();
}

id sub_18A665CE0(uint64_t a1, uint64_t a2)
{
  return sub_18A665CEC(a1, a2, (SEL *)&selRef_setNeedsToSaveDatabaseSubscription_);
}

id sub_18A665CEC(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(*(id *)a1, *a3, *(unsigned __int8 *)(a1 + 8));
}

void CKSyncEngine.State.existingDatabaseSubscriptionID.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_existingDatabaseSubscriptionID);
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_18A5F3824();
}

void sub_18A665D60(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  CKSyncEngine.State.existingDatabaseSubscriptionID.setter(v1, v2);
}

void CKSyncEngine.State.existingDatabaseSubscriptionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v3 = *(void **)(v2 + 16);
  if (a2)
  {
    v4 = (void *)MEMORY[0x18D76C7CC]();
    sub_18A5F3944();
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v3, sel_setExistingDatabaseSubscriptionID_, v4);
  sub_18A5F384C(v4);
}

void CKSyncEngine.State.existingDatabaseSubscriptionID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKSyncEngine.State.existingDatabaseSubscriptionID.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

void sub_18A665E20(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    sub_18A5F3FAC();
    sub_18A66738C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18A66738C();
    sub_18A5F3824();
  }
}

Swift::Void __swiftcall CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(Swift::Bool _, Swift::OpaquePointer a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  id v9;

  if (!((unint64_t)a2._rawValue >> 62))
  {
    v5 = *(_QWORD *)(((unint64_t)a2._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A5F3FAC();
    if (v5)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    return;
  }
  sub_18A5F3FAC();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5)
    goto LABEL_8;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = *(void **)(v2 + 16);
    v8 = _;
    do
    {
      if (((unint64_t)a2._rawValue & 0xC000000000000001) != 0)
        sub_18A5F398C();
      v9 = sub_18A5F3D34((uint64_t)a2._rawValue + 8 * v6++);
      objc_msgSend(v7, sel_setNeedsToFetchChanges_forRecordZoneID_, v8, v9);

    }
    while (v5 != v6);
    goto LABEL_8;
  }
  __break(1u);
}

CKServerChangeToken_optional __swiftcall CKSyncEngine.State.serverChangeToken(for:)(CKRecordZoneID *a1)
{
  uint64_t v1;
  objc_class *v2;
  NSData *v3;
  Swift::Bool v4;
  CKServerChangeToken_optional result;

  v2 = (objc_class *)objc_msgSend(*(id *)(v1 + 16), sel_serverChangeTokenForZoneID_, a1);
  result.value._data = v3;
  result.value.super.isa = v2;
  result.is_nil = v4;
  return result;
}

Swift::Void __swiftcall CKSyncEngine.State.setServerChangeToken(_:for:)(CKServerChangeToken_optional _, CKRecordZoneID *a2)
{
  uint64_t v2;

  objc_msgSend(*(id *)(v2 + 16), sel_setServerChangeToken_forZoneID_, _.value.super.isa, _.value._data);
}

id CKSyncEngine.State.lastKnownUserRecordID.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_lastKnownUserRecordID);
}

void sub_18A665FA0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  CKSyncEngine.State.lastKnownUserRecordID.setter(v1);
}

void CKSyncEngine.State.lastKnownUserRecordID.setter(void *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 16), sel_setLastKnownUserRecordID_, a1);
  sub_18A667258(a1);
}

void CKSyncEngine.State.lastKnownUserRecordID.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, sel_lastKnownUserRecordID);
  sub_18A5F379C();
}

void sub_18A666040(uint64_t a1, uint64_t a2)
{
  sub_18A66604C(a1, a2, (SEL *)&selRef_setLastKnownUserRecordID_);
}

void sub_18A66604C(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;

  v3 = *(void **)a1;
  objc_msgSend(*(id *)(a1 + 8), *a3, *(_QWORD *)a1);
  sub_18A667258(v3);
}

void sub_18A66607C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = (id)MEMORY[0x18D76C7CC]();
  sub_18A5F37E0();
  objc_msgSend(v1, sel_setLoggingID_, v2);

}

void CKSyncEngine.State.Serialization.data.getter()
{
  uint64_t v0;

  sub_18A612FA0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  sub_18A5F379C();
}

uint64_t CKSyncEngine.State.Serialization.init(deprecatedData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_18A6660FC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_18A666170()
{
  return 1635017060;
}

uint64_t sub_18A666184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_18A6660FC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_18A6661AC()
{
  sub_18A666CC4();
  return CodingKey.description.getter();
}

uint64_t sub_18A6661D4()
{
  sub_18A666CC4();
  return CodingKey.debugDescription.getter();
}

void CKSyncEngine.State.Serialization.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_18A5F101C(&qword_1EDF694B0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_18A5F3908();
  sub_18A608B00(a1, a1[3]);
  sub_18A666CC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_18A63D734();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_18A5F39F4();
}

void CKSyncEngine.State.Serialization.init(from:)(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = sub_18A5F101C(&qword_1EDF694A8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  sub_18A5F3908();
  sub_18A608B00(a1, a1[3]);
  sub_18A666CC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_18A63DDB0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
    *a2 = v8;
  }
  sub_18A608B60((uint64_t)a1);
  sub_18A5F39F4();
}

void sub_18A6663D4(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  CKSyncEngine.State.Serialization.init(from:)(a1, a2);
}

void sub_18A6663E8(_QWORD *a1)
{
  CKSyncEngine.State.Serialization.encode(to:)(a1);
}

uint64_t CKSyncEngine.State.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CKSyncEngine.State.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t static CKSyncEngine.PendingRecordZoneChange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = *(void **)a1;
  v3 = *(void **)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    return v6 & 1;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  sub_18A5F3B04(a1, &qword_1EDF6A970);
  v4 = v3;
  v5 = v2;
  v6 = static NSObject.== infix(_:_:)();

  return v6 & 1;
}

uint64_t static CKSyncEngine.PendingDatabaseChange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  int v4;
  void *v5;
  int v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  int v11;

  v3 = *(void **)a1;
  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = *(void **)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  if (v4 != 1)
  {
    v7 = objc_msgSend(v3, sel_zoneID);
    v8 = v7;
    if (!v6)
      goto LABEL_3;
LABEL_5:
    v9 = v5;
    goto LABEL_6;
  }
  v7 = v3;
  v8 = v7;
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  v9 = sub_18A5F3888((uint64_t)v7, sel_zoneID);
LABEL_6:
  v10 = v9;
  sub_18A5F3B04((uint64_t)v9, (unint64_t *)&qword_1ECD967B0);
  v11 = static NSObject.== infix(_:_:)();

  return v11 & (v4 ^ v6 ^ 1u);
}

uint64_t _s8CloudKit12CKSyncEngineC23PendingRecordZoneChangeO11descriptionSSvg_0()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    v9 = 0x286574656C6564;
  else
    v9 = 0x2865766173;
  v1 = *(id *)v0;
  v2 = objc_msgSend(v1, sel_description);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  sub_18A5F460C();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);

  return v9;
}

void _s8CloudKit12CKSyncEngineC23PendingRecordZoneChangeO4hash4intoys6HasherVz_tF_0()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)v0;
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  v2 = v1;
  NSObject.hash(into:)();
  sub_18A5F384C(v2);
}

void _s8CloudKit12CKSyncEngineC23PendingRecordZoneChangeO9hashValueSivg_0()
{
  void **v0;
  void *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  id v10;
  uint64_t v11;
  char v12;

  v1 = *v0;
  v2 = Hasher.init(_seed:)();
  sub_18A5F3A20(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  v10 = v1;
  sub_18A64A160();

  Hasher._finalize()();
  sub_18A64A3C0();
}

void sub_18A66671C()
{
  void **v0;
  void *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  id v10;
  uint64_t v11;
  char v12;

  v1 = *v0;
  v2 = Hasher.init(_seed:)();
  sub_18A5F3A20(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  v10 = v1;
  sub_18A64A160();

  Hasher._finalize()();
  sub_18A64A3C0();
}

id sub_18A666764(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  Class isa;
  id v7;
  id v8;
  id v9;
  id v11[2];

  v3 = v2;
  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11[0] = 0;
  v7 = objc_msgSend(v3, sel_initWithData_error_, isa, v11);

  if (v7)
  {
    v8 = v11[0];
  }
  else
  {
    v9 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_18A60FBA4(a1, a2);
  return v7;
}

_QWORD *sub_18A666840(uint64_t a1)
{
  unint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_18A5F101C(&qword_1EDF6B200);
  v3 = (_QWORD *)sub_18A5F37B4();
  v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  sub_18A6AAE30(&v8, (uint64_t)(v3 + 4), v1, a1);
  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_18A6668F4(uint64_t a1)
{
  return sub_18A66690C(a1, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_18A6AB2CC);
}

uint64_t sub_18A666900(uint64_t a1)
{
  return sub_18A66690C(a1, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))sub_18A6AB2E8);
}

uint64_t sub_18A66690C(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = __CocoaSet.count.getter();
    if (v5)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v5 <= 0)
  {
    v2 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_18A5F101C(&qword_1EDF6A388);
    v6 = (_QWORD *)sub_18A5F3974();
    sub_18A6672A8(v6);
  }
  swift_bridgeObjectRetain();
  v7 = a2(&v9, v2 + 32, v5, a1);
  result = sub_18A62F4F8();
  if (v7 == v5)
    return v2;
  __break(1u);
  return result;
}

_QWORD *sub_18A6669E8(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  unint64_t v5;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_8;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      sub_18A5F101C(&qword_1EDF6A388);
      v3 = (_QWORD *)sub_18A5F3974();
      v4 = j__malloc_size(v3);
      v3[2] = v2;
      v3[3] = (2 * ((uint64_t)(v4 - 32) / 8)) | 1;
    }
    sub_18A5F3FAC();
    sub_18A653550((uint64_t)(v3 + 4), v2, v1);
    v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_8:
    sub_18A5F4640();
    v2 = sub_18A623AB0();
    sub_18A5F37E0();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

void sub_18A666AB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  _QWORD *v9;

  v5 = a4 >> 1;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (a4 >> 1 == a3)
      goto LABEL_8;
    sub_18A667304();
    if (!(v7 ^ v8 | v6))
    {
      sub_18A5F101C(&qword_1EDF6A830);
      v9 = (_QWORD *)sub_18A5F3974();
      sub_18A667324(v9);
    }
    if (v5 != v4)
    {
      sub_18A651F80();
LABEL_8:
      sub_18A5F3814();
      return;
    }
  }
  __break(1u);
}

void sub_18A666B3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  _QWORD *v9;

  v5 = a4 >> 1;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (a4 >> 1 == a3)
      goto LABEL_8;
    sub_18A667304();
    if (!(v7 ^ v8 | v6))
    {
      sub_18A5F101C(qword_1EDF69508);
      v9 = (_QWORD *)sub_18A5F3974();
      sub_18A667324(v9);
    }
    if (v5 != v4)
    {
      sub_18A652580();
LABEL_8:
      sub_18A5F3814();
      return;
    }
  }
  __break(1u);
}

void sub_18A666BC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  _QWORD *v11;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    sub_18A667304();
    if (!(v9 ^ v10 | v8))
    {
      sub_18A5F101C(&qword_1EDF6A388);
      v11 = (_QWORD *)sub_18A5F3974();
      sub_18A6672A8(v11);
    }
    if (v6 != v4)
    {
      sub_18A6520A0(v5 + 8 * v4, v7);
LABEL_8:
      sub_18A5F3814();
      return;
    }
  }
  __break(1u);
}

void sub_18A666C4C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  sub_18A627C00(v6, a2, a3);
  v6[4] = v7;
  sub_18A5F3824();
}

void sub_18A666C98(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t sub_18A666CC4()
{
  unint64_t result;

  result = qword_1EDF69498;
  if (!qword_1EDF69498)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C394, &_s5StateC13SerializationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69498);
  }
  return result;
}

unint64_t sub_18A666D04()
{
  unint64_t result;

  result = qword_1EDF6A088;
  if (!qword_1EDF6A088)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKSyncEngine.PendingRecordZoneChange, &type metadata for CKSyncEngine.PendingRecordZoneChange);
    atomic_store(result, (unint64_t *)&qword_1EDF6A088);
  }
  return result;
}

unint64_t sub_18A666D44()
{
  unint64_t result;

  result = qword_1EDF6BF98;
  if (!qword_1EDF6BF98)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKSyncEngine.PendingDatabaseChange, &type metadata for CKSyncEngine.PendingDatabaseChange);
    atomic_store(result, (unint64_t *)&qword_1EDF6BF98);
  }
  return result;
}

void sub_18A666D80()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A5F3FFC();
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  *v0 = v1;
  sub_18A5F379C();
}

void sub_18A666DA4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A5F3FFC();
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  *v0 = v1;
  sub_18A5F379C();
}

void sub_18A666DC8()
{
  _BYTE *v0;

  sub_18A5F3FFC();
  *v0 = CKSyncEngine.State.hasPendingUntrackedChanges.getter() & 1;
  sub_18A5F379C();
}

void sub_18A666DEC(char *a1)
{
  CKSyncEngine.State.hasPendingUntrackedChanges.setter(*a1);
  sub_18A5F379C();
}

void sub_18A666E0C()
{
  _BYTE *v0;

  sub_18A5F3FFC();
  *v0 = CKSyncEngine.State.needsToFetchDatabaseChanges.getter() & 1;
  sub_18A5F379C();
}

void sub_18A666E30(char *a1)
{
  CKSyncEngine.State.needsToFetchDatabaseChanges.setter(*a1);
  sub_18A5F379C();
}

void sub_18A666E50()
{
  id *v0;

  sub_18A5F3FFC();
  *v0 = CKSyncEngine.State.serverChangeTokenForDatabase.getter();
  sub_18A5F379C();
}

void sub_18A666E74()
{
  _BYTE *v0;

  sub_18A5F3FFC();
  *v0 = CKSyncEngine.State.needsToSaveDatabaseSubscription.getter() & 1;
  sub_18A5F379C();
}

void sub_18A666E98(char *a1)
{
  CKSyncEngine.State.needsToSaveDatabaseSubscription.setter(*a1);
  sub_18A5F379C();
}

void sub_18A666EB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A5F3FFC();
  CKSyncEngine.State.existingDatabaseSubscriptionID.getter();
  *v0 = v1;
  v0[1] = v2;
  sub_18A5F379C();
}

void sub_18A666EDC()
{
  id *v0;

  sub_18A5F3FFC();
  *v0 = CKSyncEngine.State.lastKnownUserRecordID.getter();
  sub_18A5F379C();
}

uint64_t type metadata accessor for CKSyncEngine.State()
{
  return objc_opt_self();
}

uint64_t method lookup function for CKSyncEngine.State()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKSyncEngine.State.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of CKSyncEngine.State.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for CKSyncEngine.State.Serialization()
{
  sub_18A5F3994();
}

void type metadata accessor for CKSyncEngine.PendingRecordZoneChange()
{
  sub_18A5F3994();
}

uint64_t _s21PendingDatabaseChangeOwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t _s21PendingDatabaseChangeOwca(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t _s21PendingDatabaseChangeOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t _s23PendingRecordZoneChangeOwet_0(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s23PendingRecordZoneChangeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_18A6670A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18A6670A8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

void type metadata accessor for CKSyncEngine.PendingDatabaseChange()
{
  sub_18A5F3994();
}

uint64_t _s5StateC13SerializationV10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18A667100 + 4 * byte_18A83C0D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18A667120 + 4 * byte_18A83C0D5[v4]))();
}

_BYTE *sub_18A667100(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18A667120(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18A667128(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18A667130(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18A667138(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18A667140(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s5StateC13SerializationV10CodingKeysOMa()
{
  return &_s5StateC13SerializationV10CodingKeysON;
}

unint64_t sub_18A667160()
{
  unint64_t result;

  result = qword_1EDF6BFA0;
  if (!qword_1EDF6BFA0)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C36C, &_s5StateC13SerializationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF6BFA0);
  }
  return result;
}

unint64_t sub_18A6671A0()
{
  unint64_t result;

  result = qword_1EDF69440;
  if (!qword_1EDF69440)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C2DC, &_s5StateC13SerializationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF69440);
  }
  return result;
}

unint64_t sub_18A6671E0()
{
  unint64_t result;

  result = qword_1EDF694A0;
  if (!qword_1EDF694A0)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C304, &_s5StateC13SerializationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDF694A0);
  }
  return result;
}

id sub_18A667234@<X0>(char a1@<W0>, const char *a2@<X1>, void *a3@<X8>)
{
  return objc_msgSend(a3, a2, a1 & 1);
}

uint64_t sub_18A667240()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A66724C()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

void sub_18A667258(id a1)
{

}

id sub_18A667260()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 1160));
}

void sub_18A667270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v1;
  v5 = v0 + 16 * v4;
  *(_QWORD *)(v5 + 32) = v2;
  *(_BYTE *)(v5 + 40) = v3;
}

size_t sub_18A6672A8(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = (2 * ((uint64_t)(result - 32) / 8)) | 1;
  return result;
}

BOOL sub_18A6672D4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_18A6672EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + 16);
  *a1 = result;
  return result;
}

id sub_18A6672FC(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return objc_msgSend(a1, a2, a9);
}

size_t sub_18A667324(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 16);
  return result;
}

uint64_t sub_18A66734C()
{
  return 0;
}

uint64_t sub_18A667364()
{
  return swift_bridgeObjectRelease();
}

id sub_18A667380(void *a1)
{
  uint64_t v1;
  SEL *v2;

  return objc_msgSend(a1, *v2, v1);
}

void sub_18A66738C()
{
  uint64_t v0;
  uint64_t v1;

  CKSyncEngine.State.existingDatabaseSubscriptionID.setter(v1, v0);
}

void CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_systemSharingUIDidSaveShareBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A614F28;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66740C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);

  CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A6679A0;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A667470(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A6679A4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter((uint64_t)v4, v3);
}

void CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  const void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A5F3964();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setSystemSharingUIDidSaveShareBlock_);
    _Block_release(v3);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setSystemSharingUIDidSaveShareBlock_);
  }
}

uint64_t sub_18A6675A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18A6675C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A6675D8()
{
  return swift_release();
}

void CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A667610(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_systemSharingUIDidStopSharingBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60C230;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A6676A0(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);

  CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A6679A0;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A667704(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A6679E8;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter((uint64_t)v4, v3);
}

void CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  const void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    sub_18A5F3938((uint64_t)sub_18A6678D0, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    sub_18A5F3964();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setSystemSharingUIDidStopSharingBlock_);
    _Block_release(v3);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setSystemSharingUIDidStopSharingBlock_);
  }
}

uint64_t sub_18A667838()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A66785C(uint64_t a1, id a2, void (*a3)(uint64_t, id, uint64_t))
{
  id v6;

  if (a2)
  {
    v6 = a2;
    a3(a1, a2, 1);

  }
  else
  {
    a3(a1, 0, 0);
  }
}

void sub_18A6678C8(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_18A66785C(a1, a2, *(void (**)(uint64_t, id, uint64_t))(v2 + 16));
}

void sub_18A6678D0(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

void CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A667974(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

uint64_t sub_18A6679A4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_18A65F2C4(a1, a2, a3 & 1, *(uint64_t (**)(uint64_t *, uint64_t *))(v3 + 16));
}

void sub_18A6679EC()
{
  qword_1EDF6BFA8 = 4;
}

uint64_t static CKShareParticipantAcceptanceStatus.unsubscribed.getter()
{
  return sub_18A643474(&qword_1EDF6AAC0, (uint64_t)&qword_1EDF6BFA8);
}

void sub_18A667A18()
{
  qword_1EDF6BFB0 = 2;
}

uint64_t static CKShareParticipantRole.administrator.getter()
{
  return sub_18A643474(&qword_1EDF6AAC8, (uint64_t)&qword_1EDF6BFB0);
}

void sub_18A667A44()
{
  qword_1EDF6BFB8 = 4;
}

uint64_t static CKShareParticipantPermission.derived.getter()
{
  return sub_18A643474(qword_1EDF6AAD0, (uint64_t)&qword_1EDF6BFB8);
}

void CKShareParticipant.participantID.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_participantID);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18A5F3824();
}

void sub_18A667ABC()
{
  swift_bridgeObjectRetain();
  CKShareParticipant.participantID.setter();
}

void CKShareParticipant.participantID.setter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  id v8;
  id v9;

  MEMORY[0x18D76C7CC]();
  v0 = sub_18A5F4930();
  sub_18A5F47D8(v0, sel_setParticipantID_, v1, v2, v3, v4, v5, v6, v7, (uint64_t)v8);

}

void CKShareParticipant.participantID.modify(uint64_t *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, sel_participantID);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  sub_18A5F3824();
}

void sub_18A667B90(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_18A5F3F14();
  }
  sub_18A5F3F14();
}

#error "18A667BE8: call analysis failed (funcsize=4)"

void sub_18A667C04(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  CKShareParticipant.participantID.getter();
  *a1 = v2;
  a1[1] = v3;
}

void CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_18A5F44DC();
  a21 = v22;
  a22 = v23;
  v25 = v24;
  v27 = v26;
  v29 = *v28;
  v30 = *((_BYTE *)v28 + 8);
  sub_18A66CE28(0, (unint64_t *)&qword_1ECD967B0);
  sub_18A66CE20((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  v31 = Dictionary.init(dictionaryLiteral:)();
  if (v25)
  {
    v32 = v25;
  }
  else
  {
    sub_18A66CBD0();
    static SyncEngine.defaultOperationGroup()();
    v32 = v33;
  }
  sub_18A5F40AC();
  v34 = v32;
  v35 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_18A5F3D48();
  v36 = v25;
  sub_18A66BCA0(v34);
  if (v37 && (sub_18A66CC20(), (sub_18A669988() & 1) == 0))
  {
    sub_18A5F460C();
    swift_bridgeObjectRelease();

    sub_18A5F3944();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18A66CBD0();
    a9 = v29;
    a10 = v30;
    sub_18A5F40AC();
    sub_18A6756FC((uint64_t)&a9);
    v39 = v38;
    v41 = v40;
    sub_18A5F3944();
    swift_bridgeObjectRelease();
    sub_18A66BCF8(v39, v41, v34);
    sub_18A5F460C();
    swift_bridgeObjectRelease();

    sub_18A5F3944();
  }
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = v30;
  *(_QWORD *)(v27 + 16) = v34;
  *(_QWORD *)(v27 + 24) = v35;
  *(_QWORD *)(v27 + 32) = v31;
  *(_BYTE *)(v27 + 40) = 1;
  *(_QWORD *)(v27 + 48) = 0;
  *(_BYTE *)(v27 + 56) = 0;
  sub_18A5F3CFC();
}

void CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  if (a2)
  {
    sub_18A5F40AC();
    v7 = a2;
  }
  else
  {
    sub_18A66CBD0();
    sub_18A5F40AC();
    static SyncEngine.defaultOperationGroup()();
  }
  v8 = v7;
  v9 = a2;
  sub_18A66BCA0(v8);
  if (v10 && (sub_18A66CB3C() & 1) == 0)
  {

    sub_18A5F3944();
    sub_18A5F3A8C();
  }
  else
  {
    sub_18A66CBD0();
    v11 = sub_18A5F40AC();
    v19 = sub_18A66CDC4(v11, v12, v13, v14, v15, v16, v17, v18, v5);
    sub_18A675860((uint64_t)v19);
    sub_18A5F3944();
    sub_18A5F3A8C();
    sub_18A66CD10();

    sub_18A5F3944();
  }
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v8;
}

id CKSyncEngineFetchChangesOptions.optionsStruct()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unsigned __int8 v24;
  id v25;
  id result;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v5 = sub_18A5F3888(a1, sel_scope);
  CKSyncEngineFetchChangesScope.scopeEnum()((uint64_t)v5, (uint64_t)&v33);

  v31 = v33;
  LOBYTE(v32) = v34;
  v7 = sub_18A628E2C(v6, sel_operationGroup);
  CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)((uint64_t)&v31, (uint64_t)v7, v8, v9, v10, v11, v12, v13, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42);
  v15 = sub_18A628E2C(v14, sel_prioritizedZoneIDs);
  sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = swift_bridgeObjectRelease();
  v18 = sub_18A628E2C(v17, sel_zoneConfigurations);
  sub_18A5F3DF8((uint64_t)v18, &qword_1EDF6A320);
  sub_18A627CA0((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v21 = sub_18A668AD8(v20, v19);
  swift_bridgeObjectRelease();
  v22 = swift_bridgeObjectRelease();
  v23 = sub_18A628E2C(v22, sel_defaultZoneConfiguration);
  v24 = objc_msgSend(v23, sel_shouldFetchAssetContents);
  v25 = objc_msgSend(v23, sel_resultsLimit);

  result = objc_msgSend(v3, sel_forceFetchChanges);
  v27 = v36;
  v28 = v37;
  *(_QWORD *)a2 = v35;
  *(_BYTE *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v25;
  *(_BYTE *)(a2 + 56) = (_BYTE)result;
  return result;
}

void CKSyncEngineSendChangesOptions.optionsStruct()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = v2;
  v5 = sub_18A5F3888(a1, sel_scope);
  CKSyncEngineSendChangesScope.scopeEnum()((uint64_t)v5, (uint64_t)&v8);

  LOBYTE(v7) = v9;
  CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)((uint64_t)&v6, objc_msgSend(v3, sel_operationGroup, v8, v7), a2);
}

CKSyncEngineSendChangesContext __swiftcall CKSyncEngine.SendChangesContext.contextObject()()
{
  unsigned __int8 *v0;
  objc_class *v1;
  int64_t v2;
  CKSyncEngineSendChangesOptions *v3;
  objc_class *v4;
  CKSyncEngineSendChangesContext result;

  v1 = (objc_class *)*v0;
  CKSyncEngine.SendChangesOptions.optionsObject()();
  sub_18A66CD90(objc_allocWithZone((Class)CKSyncEngineSendChangesContext), sel_initWithReason_options_);
  sub_18A623D94();
  v4 = v1;
  result._options = v3;
  result._reason = v2;
  result.super.isa = v4;
  return result;
}

CKSyncEngineFetchChangesContext __swiftcall CKSyncEngine.FetchChangesContext.contextObject()()
{
  CKSyncEngineFetchChangesOptions **v0;
  objc_class *v1;
  int64_t v2;
  CKSyncEngineFetchChangesOptions *v3;
  objc_class *v4;
  CKSyncEngineFetchChangesContext result;

  v1 = (objc_class *)*(unsigned __int8 *)v0;
  CKSyncEngine.FetchChangesOptions.optionsObject()(v0[1]);
  sub_18A66CD90(objc_allocWithZone((Class)CKSyncEngineFetchChangesContext), sel_initWithReason_options_);
  sub_18A623D94();
  v4 = v1;
  result._options = v3;
  result._reason = v2;
  result.super.isa = v4;
  return result;
}

uint64_t sub_18A668238(unint64_t a1)
{
  return sub_18A66833C(a1, (unint64_t *)&unk_1EDF6A790, (uint64_t)off_1E1F53D60, &qword_1EDF6A660, (void (*)(id *, id))sub_18A69C238);
}

uint64_t sub_18A66825C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  Swift::UInt v5;
  uint64_t v6;
  Swift::UInt v8;
  uint64_t v9;

  type metadata accessor for Scope(0);
  sub_18A66CA7C();
  v2 = Set.init(minimumCapacity:)();
  v9 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(a1 + 8 * i + 32);
      sub_18A69C120(&v8, v5);
    }
    sub_18A5F37E0();
    return v9;
  }
  else
  {
    v6 = v2;
    sub_18A5F37E0();
  }
  return v6;
}

uint64_t sub_18A6682F4(unint64_t a1)
{
  return sub_18A66833C(a1, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (void (*)(id *, id))sub_18A69C3A8);
}

uint64_t sub_18A668318(unint64_t a1)
{
  return sub_18A66833C(a1, (unint64_t *)&unk_1EDF6A8F0, (uint64_t)off_1E1F54288, (unint64_t *)&qword_1EDF6A400, (void (*)(id *, id))sub_18A69C518);
}

uint64_t sub_18A66833C(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  id v15;
  uint64_t v16;

  v9 = a1 >> 62;
  if (a1 >> 62)
  {
    sub_18A5F3FAC();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18A5F37E0();
  }
  sub_18A66CD30();
  sub_18A627CA0(a4, a2);
  result = Set.init(minimumCapacity:)();
  v11 = result;
  v16 = result;
  if (!v9)
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_5;
LABEL_12:
    sub_18A5F37E0();
    return v11;
  }
  sub_18A5F3FAC();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  result = sub_18A5F37E0();
  if (!v12)
    goto LABEL_12;
LABEL_5:
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        sub_18A66CAEC();
      v14 = sub_18A66CB30();
      a5(&v15, v14);

    }
    sub_18A5F37E0();
    return v16;
  }
  __break(1u);
  return result;
}

void sub_18A66847C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = Set.init(minimumCapacity:)();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      sub_18A5F3D48();
      sub_18A69C780(v6, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    sub_18A5F37E0();
  }
  else
  {
    sub_18A5F37E0();
  }
  sub_18A634F78();
}

void sub_18A668510(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char v5;
  id v6;
  id v7[3];

  sub_18A66CA40();
  v7[2] = (id)Set.init(minimumCapacity:)();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (char *)(a1 + 40);
    do
    {
      v4 = (void *)*((_QWORD *)v3 - 1);
      v5 = *v3;
      v3 += 16;
      v6 = v4;
      sub_18A69C8E8((uint64_t)v7, v4, v5);

      --v2;
    }
    while (v2);
    sub_18A5F37E0();
  }
  else
  {
    sub_18A5F37E0();
  }
  sub_18A634F78();
}

void CKSyncEngineFetchChangesContext.contextStruct()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  char v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = sub_18A5F3888(a1, sel_reason);
  if (!v3)
  {
    v4 = 0;
LABEL_5:
    v5 = sub_18A5F3888((uint64_t)v3, sel_options);
    CKSyncEngineFetchChangesOptions.optionsStruct()((uint64_t)v5, (uint64_t)&v13);

    v6 = v13;
    v7 = v14;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v19;
    *(_BYTE *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 40) = v8;
    *(_BYTE *)(a2 + 48) = v9;
    *(_QWORD *)(a2 + 56) = v10;
    *(_BYTE *)(a2 + 64) = v11;
    return;
  }
  if (v3 == (id)1)
  {
    v4 = 1;
    goto LABEL_5;
  }
  sub_18A66CD78();
  sub_18A66CD84(v12, 0x800000018A83FE30);
  type metadata accessor for CKSyncEngineSyncReason(0);
  _print_unlocked<A, B>(_:_:)();
  sub_18A66CC88();
  __break(1u);
}

void CKSyncEngineSendChangesContext.contextStruct()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  char v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_18A5F3888(a1, sel_reason);
  if (!v3)
  {
    v4 = 0;
LABEL_5:
    v5 = sub_18A5F3888((uint64_t)v3, sel_options);
    CKSyncEngineSendChangesOptions.optionsStruct()((uint64_t)v5, (uint64_t)&v10);

    v6 = v10;
    v7 = v11;
    v8 = v12;
    *(_BYTE *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v8;
    return;
  }
  if (v3 == (id)1)
  {
    v4 = 1;
    goto LABEL_5;
  }
  sub_18A66CD78();
  sub_18A66CD84(v9, 0x800000018A83FE30);
  type metadata accessor for CKSyncEngineSyncReason(0);
  _print_unlocked<A, B>(_:_:)();
  sub_18A66CC88();
  __break(1u);
}

uint64_t sub_18A6687F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  v5 = *(_QWORD *)(a5 + 16);
  if (!v5)
    return 0;
  for (i = (uint64_t *)(a5 + 56); ; i += 4)
  {
    v11 = *(i - 1);
    v12 = *i;
    v13 = *(i - 3) == a1 && *(i - 2) == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v14 = v11 == a3 && v12 == a4;
      if (v14 || (sub_18A5F3CDC() & 1) != 0)
        break;
    }
    if (!--v5)
      return 0;
  }
  return 1;
}

uint64_t sub_18A66889C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t i;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v5 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v3 = v6;
    v6 = v6 || v5 == v2;
    if (v6)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6688FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_18A5F3CDC();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_18A5F3CDC() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6689A8(uint64_t a1, unint64_t a2)
{
  return sub_18A6689BC(a1, a2, (char)&qword_1ECD967B0);
}

uint64_t sub_18A6689BC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  LOBYTE(v3) = a3;
  if (a2 >> 62)
    goto LABEL_17;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_18A5F3FAC();
  if (v5)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
        sub_18A5F398C();
      sub_18A66CE0C();
      sub_18A66CD30();
      sub_18A66CBC8();
      sub_18A66CD20();
      if ((v3 & 1) != 0)
        break;
      if (v5 != 1)
      {
        v7 = 5;
        while (1)
        {
          v3 = v7 - 4;
          if ((a2 & 0xC000000000000001) != 0)
            sub_18A66CAEC();
          sub_18A66CDF8();
          v8 = v7 - 3;
          if (__OFADD__(v3, 1))
            break;
          sub_18A66CBC8();
          sub_18A66CD20();
          if ((v3 & 1) == 0)
          {
            ++v7;
            if (v8 != v5)
              continue;
          }
          goto LABEL_8;
        }
        __break(1u);
LABEL_17:
        sub_18A5F3FAC();
        v5 = _CocoaArrayWrapper.endIndex.getter();
        if (v5)
          continue;
      }
      goto LABEL_7;
    }
    LOBYTE(v3) = 1;
  }
  else
  {
LABEL_7:
    LOBYTE(v3) = 0;
  }
LABEL_8:
  sub_18A5F37E0();
  return v3 & 1;
}

uint64_t sub_18A668AD8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  id v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  int64_t v15;
  id v16;
  unsigned __int8 v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  Swift::Int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  id v34;
  uint64_t result;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  _QWORD v41[5];
  _QWORD *v42;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v37 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    sub_18A66BC68(a2, v41);
    v6 = v41[0];
    v37 = v41[1];
    v3 = v41[2];
    v4 = v41[3];
    v5 = v41[4];
  }
  swift_bridgeObjectRetain();
  v36 = (unint64_t)(v3 + 64) >> 6;
  v38 = v6;
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_7;
LABEL_5:
  if (v5)
  {
    v7 = (v5 - 1) & v5;
    v8 = __clz(__rbit64(v5)) | (v4 << 6);
    v9 = v4;
    goto LABEL_26;
  }
  v11 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v11 >= v36)
      goto LABEL_37;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v9 = v4 + 1;
    if (!v12)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v36)
        goto LABEL_37;
      v12 = *(_QWORD *)(v37 + 8 * v9);
      if (!v12)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v36)
          goto LABEL_37;
        v12 = *(_QWORD *)(v37 + 8 * v9);
        if (!v12)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v36)
            goto LABEL_37;
          v12 = *(_QWORD *)(v37 + 8 * v9);
          if (!v12)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v36)
              goto LABEL_37;
            v12 = *(_QWORD *)(v37 + 8 * v9);
            if (!v12)
            {
              v13 = v4 + 6;
              while (v13 < v36)
              {
                v12 = *(_QWORD *)(v37 + 8 * v13++);
                if (v12)
                {
                  v9 = v13 - 1;
                  goto LABEL_25;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_25:
    v7 = (v12 - 1) & v12;
    v8 = __clz(__rbit64(v12)) + (v9 << 6);
LABEL_26:
    v14 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v8);
    v10 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v8);
    v40 = v14;
    if (v10)
    {
      while (1)
      {
        v39 = v7;
        v15 = v9;
        v16 = v10;
        v17 = objc_msgSend(v40, sel_shouldFetchAssetContents);
        v18 = objc_msgSend(v40, sel_resultsLimit);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v42 = a1;
        sub_18A62E990();
        v22 = a1[2];
        v23 = (v21 & 1) == 0;
        v24 = v22 + v23;
        if (__OFADD__(v22, v23))
          break;
        v25 = v20;
        v26 = v21;
        sub_18A5F101C(&qword_1EDF6B2B0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
        {
          sub_18A62E990();
          if ((v26 & 1) != (v28 & 1))
            goto LABEL_41;
          v25 = v27;
        }
        a1 = v42;
        if ((v26 & 1) != 0)
        {
          v29 = v42[7] + 16 * v25;
          *(_BYTE *)v29 = v17;
          *(_QWORD *)(v29 + 8) = v18;
        }
        else
        {
          v42[(v25 >> 6) + 8] |= 1 << v25;
          *(_QWORD *)(a1[6] + 8 * v25) = v16;
          v30 = a1[7] + 16 * v25;
          *(_BYTE *)v30 = v17;
          *(_QWORD *)(v30 + 8) = v18;
          v31 = a1[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_39;
          a1[2] = v33;
          v34 = v16;
        }

        swift_bridgeObjectRelease();
        v4 = v15;
        v6 = v38;
        v5 = v39;
        if ((v38 & 0x8000000000000000) == 0)
          goto LABEL_5;
LABEL_7:
        if (__CocoaDictionary.Iterator.next()())
        {
          sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v10 = v42;
          swift_unknownObjectRelease();
          sub_18A60B8D0(0, &qword_1EDF6A320);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v40 = v42;
          swift_unknownObjectRelease();
          v9 = v4;
          v7 = v5;
          if (v10)
            continue;
        }
        goto LABEL_37;
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_37:
    sub_18A62F4F8();
    return (uint64_t)a1;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_18A668F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void sub_18A668F24()
{
  swift_bridgeObjectRetain();
  CKSyncEngine.FetchChangesOptions.scope.setter();
}

void CKSyncEngine.FetchChangesOptions.scope.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_18A66CD00();
  *(_QWORD *)v1 = v0;
  *(_BYTE *)(v1 + 8) = v2;
  sub_18A668FF0();
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.FetchChangesOptions.scope.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A66CAC0;
}

void sub_18A668FA8(id *a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v1 = *a1;
  CKSyncEngine.FetchChangesOptions.operationGroup.setter(v1, v2, v3, v4, v5, v6, v7, v8);
}

void CKSyncEngine.FetchChangesOptions.operationGroup.setter(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  id v10;

  sub_18A66CD60(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
  sub_18A668FF0();
  sub_18A667258(v10);
}

uint64_t sub_18A668FF0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = *v0;
  v2 = (void *)v0[2];
  sub_18A5F3FAC();
  v3 = v2;
  sub_18A5F40AC();
  swift_bridgeObjectRetain();
  sub_18A66BCA0(v3);
  if (v4 && (sub_18A66CB3C() & 1) == 0)
  {
    sub_18A5F3FE4();
    sub_18A5F3944();

    sub_18A5F37E0();
  }
  else
  {
    sub_18A66CBD0();
    v5 = sub_18A5F3FAC();
    v13 = sub_18A66CDC4(v5, v6, v7, v8, v9, v10, v11, v12, v1);
    sub_18A6756FC((uint64_t)v13);
    sub_18A5F37E0();
    sub_18A5F3A8C();
    sub_18A66CD10();
    sub_18A5F3FE4();
    sub_18A5F3944();

  }
  return swift_bridgeObjectRelease();
}

uint64_t (*CKSyncEngine.FetchChangesOptions.operationGroup.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A6690D8;
}

uint64_t sub_18A6690D8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_18A668FF0();
  return result;
}

uint64_t CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.getter()
{
  return swift_bridgeObjectRetain();
}

void CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  sub_18A5F379C();
}

uint64_t (*CKSyncEngine.FetchChangesOptions.prioritizedZoneIDs.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.FetchChangesOptions.zoneConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

void CKSyncEngine.FetchChangesOptions.zoneConfigurations.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  sub_18A5F379C();
}

uint64_t (*CKSyncEngine.FetchChangesOptions.zoneConfigurations.modify())()
{
  return nullsub_3;
}

void CKSyncEngine.FetchChangesOptions.ZoneConfiguration.init()(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
}

void CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v1 + 40) = *(_BYTE *)result;
  *(_QWORD *)(v1 + 48) = v2;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.ZoneConfiguration.shouldFetchAssetContents.modify())()
{
  return nullsub_3;
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.resultsLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.resultsLimit.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.ZoneConfiguration.resultsLimit.modify())()
{
  return nullsub_3;
}

CKSyncEngineFetchChangesZoneConfiguration __swiftcall CKSyncEngine.FetchChangesOptions.ZoneConfiguration.configurationObject()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  BOOL v4;
  unint64_t v5;
  objc_class *v6;
  CKSyncEngineFetchChangesZoneConfiguration result;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesZoneConfiguration), sel_init);
  objc_msgSend(v3, sel_setShouldFetchAssetContents_, v1);
  objc_msgSend(v3, sel_setResultsLimit_, v2);
  v6 = (objc_class *)v3;
  result._resultsLimit = v5;
  result.super.isa = v6;
  result._shouldFetchAssetContents = v4;
  return result;
}

CKSyncEngineFetchChangesScope __swiftcall CKSyncEngine.FetchChangesOptions.Scope.scopeObject()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  objc_class *v6;
  NSSet *v7;
  NSSet *v8;
  CKSyncEngineFetchChangesScope result;

  if (*(_BYTE *)(v1 + 8))
  {
    if (*(_BYTE *)(v1 + 8) != 1)
    {
      v6 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesScope), sel_init);
      goto _$s8CloudKit12CKSyncEngineC19FetchChangesOptionsV5ScopeO11scopeObjectSo0cdefH0CyF;
    }
    v2 = sub_18A5F3FAC();
    v3 = sub_18A66833C(v2, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (void (*)(id *, id))sub_18A69C3A8);
    v4 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
    sub_18A66B5D0(v3, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (SEL *)&selRef_initWithZoneIDs_);
  }
  else
  {
    sub_18A5F3DF8(v0, &qword_1EDF6BFC0);
    v5 = sub_18A5F3FAC();
    sub_18A66833C(v5, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (void (*)(id *, id))sub_18A69C3A8);
    sub_18A66A2A0();
  }
  sub_18A5F3814();
_$s8CloudKit12CKSyncEngineC19FetchChangesOptionsV5ScopeO11scopeObjectSo0cdefH0CyF:
  result._excludedZoneIDs = v8;
  result._zoneIDs = v7;
  result.super.isa = v6;
  return result;
}

Swift::Bool __swiftcall CKSyncEngine.FetchChangesOptions.Scope.contains(_:)(CKRecordZoneID *a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;

  v2 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 8))
  {
    if (*(_BYTE *)(v1 + 8) == 1)
      v3 = sub_18A6689BC((uint64_t)a1, v2, (char)&qword_1ECD967B0);
    else
      v3 = 1;
  }
  else
  {
    v3 = sub_18A6689BC((uint64_t)a1, v2, (char)&qword_1ECD967B0) ^ 1;
  }
  return v3 & 1;
}

uint64_t CKSyncEngine.FetchChangesOptions.forceFetchChanges.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t CKSyncEngine.FetchChangesOptions.forceFetchChanges.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*CKSyncEngine.FetchChangesOptions.forceFetchChanges.modify())()
{
  return nullsub_3;
}

void __swiftcall CKSyncEngine.FetchChangesOptions.optionsObject()(CKSyncEngineFetchChangesOptions *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  void *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  Swift::Int v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  Class v50;
  id v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  _QWORD v58[5];

  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 16);
  v53 = *(unsigned __int8 *)(v2 + 40);
  v54 = *(_QWORD *)(v2 + 48);
  v55 = *(_QWORD *)(v2 + 32);
  v5 = *(unsigned __int8 *)(v2 + 56);
  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_BYTE *)(v2 + 8) != 1)
    {
      v9 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesScope), sel_init);
      goto LABEL_7;
    }
    sub_18A66CCC0();
    v6 = sub_18A66833C(v3, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (void (*)(id *, id))sub_18A69C3A8);
    v7 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
    v8 = sub_18A66B5D0(v6, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (SEL *)&selRef_initWithZoneIDs_);
  }
  else
  {
    sub_18A5F3DF8(v1, &qword_1EDF6BFC0);
    sub_18A66CCC0();
    sub_18A66833C(v3, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (void (*)(id *, id))sub_18A69C3A8);
    sub_18A66A2A0();
  }
  v9 = v8;
  sub_18A5F460C();
LABEL_7:
  v10 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesOptions), sel_initWithScope_, v9);

  objc_msgSend(v10, sel_setOperationGroup_, v4);
  objc_msgSend(v10, sel_setForceFetchChanges_, v5);
  sub_18A60B8D0(0, (unint64_t *)&qword_1ECD967B0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v52 = v10;
  sub_18A66CCF8(v10, sel_setPrioritizedZoneIDs_);

  sub_18A5F3DF8(v12, &qword_1EDF6A320);
  sub_18A627CA0((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  sub_18A5F3D48();
  v13 = Dictionary.init(dictionaryLiteral:)();
  sub_18A66BC68(v55, v58);
  v14 = v58[0];
  v15 = v58[3];
  v16 = v58[4];
  v56 = v58[1];
  v57 = (unint64_t)(v58[2] + 64) >> 6;
  sub_18A5F3D48();
  if (!v16)
    goto LABEL_9;
LABEL_8:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v18 = v17 | (v15 << 6);
  while (1)
  {
    v26 = *(void **)(*(_QWORD *)(v14 + 48) + 8 * v18);
    v27 = (unsigned __int8 *)(*(_QWORD *)(v14 + 56) + 16 * v18);
    v28 = *v27;
    v29 = *((_QWORD *)v27 + 1);
    v30 = objc_allocWithZone((Class)CKSyncEngineFetchChangesZoneConfiguration);
    v31 = v26;
    v32 = sub_18A628E2C((uint64_t)v31, sel_init);
    objc_msgSend(v32, sel_setShouldFetchAssetContents_, v28);
    objc_msgSend(v32, sel_setResultsLimit_, v29);
    if ((v13 & 0xC000000000000001) != 0)
    {
      if (v13 >= 0)
        v13 &= 0xFFFFFFFFFFFFFF8uLL;
      v33 = __CocoaSet.count.getter();
      if (__OFADD__(v33, 1))
        goto LABEL_48;
      sub_18A66BAD0(v13, v33 + 1, &qword_1EDF6BFE8);
      v13 = v34;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_18A62E990();
    v38 = *(_QWORD *)(v13 + 16);
    v39 = (v37 & 1) == 0;
    v40 = v38 + v39;
    if (__OFADD__(v38, v39))
      break;
    v41 = v36;
    v42 = v37;
    sub_18A5F101C(&qword_1EDF6BFC8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v40))
    {
      sub_18A62E990();
      if ((v42 & 1) != (v44 & 1))
        goto LABEL_51;
      v41 = v43;
    }
    if ((v42 & 1) != 0)
    {
      v45 = *(_QWORD *)(v13 + 56);
      v46 = *(void **)(v45 + 8 * v41);
      *(_QWORD *)(v45 + 8 * v41) = v32;

    }
    else
    {
      *(_QWORD *)(v13 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v41) = v31;
      *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v41) = v32;
      v47 = *(_QWORD *)(v13 + 16);
      v23 = __OFADD__(v47, 1);
      v48 = v47 + 1;
      if (v23)
        goto LABEL_49;
      *(_QWORD *)(v13 + 16) = v48;
      v49 = v31;
    }

    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_8;
LABEL_9:
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_50;
    if (v19 >= v57)
      goto LABEL_46;
    v20 = *(_QWORD *)(v56 + 8 * v19);
    v21 = v15 + 1;
    if (!v20)
    {
      sub_18A66CD9C();
      if (v22 == v23)
        goto LABEL_46;
      sub_18A66CE14();
      if (!v20)
      {
        sub_18A66CD9C();
        if (v22 == v23)
          goto LABEL_46;
        sub_18A66CE14();
        if (!v20)
        {
          sub_18A66CD9C();
          if (v22 == v23)
            goto LABEL_46;
          sub_18A66CE14();
          if (!v20)
          {
            sub_18A66CD9C();
            if (v22 == v23)
              goto LABEL_46;
            sub_18A66CE14();
            if (!v20)
            {
              v21 = v24 + 5;
              if (v24 + 5 >= v57)
                goto LABEL_46;
              v20 = *(_QWORD *)(v56 + 8 * v21);
              if (!v20)
              {
                v25 = v15 + 7;
                while (v25 < v57)
                {
                  v20 = *(_QWORD *)(v56 + 8 * v25++);
                  if (v20)
                  {
                    v21 = v25 - 1;
                    goto LABEL_30;
                  }
                }
LABEL_46:
                swift_release();
                swift_bridgeObjectRelease();
                v50 = Dictionary._bridgeToObjectiveC()().super.isa;
                sub_18A5F37A4();
                sub_18A66CCF8(v52, sel_setZoneConfigurations_);

                v51 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesZoneConfiguration), sel_init);
                objc_msgSend(v51, sel_setShouldFetchAssetContents_, v53);
                objc_msgSend(v51, sel_setResultsLimit_, v54);
                sub_18A66CCF8(v52, sel_setDefaultZoneConfiguration_);

                return;
              }
            }
          }
        }
      }
    }
LABEL_30:
    v16 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
    v15 = v21;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_18A669988()
{
  Swift::String_optional v0;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v3;
  char v5;
  Swift::String_optional v6;
  void *v7;
  _BOOL8 v8;

  swift_bridgeObjectRetain();
  sub_18A5F3FAC();
  v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    while (1)
    {
      v3 = String.Iterator.next()();
      if (!v3.value._object)
        break;
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        sub_18A5F37E0();
        sub_18A5F37A4();
      }
      else
      {
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_18A5F37E0();
        sub_18A5F37A4();
        if ((v5 & 1) == 0)
        {
          sub_18A628F58();
          sub_18A66CDB4();
          return 0;
        }
      }
      v6 = String.Iterator.next()();
      countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object)
        goto LABEL_12;
    }
    sub_18A5F37E0();
    sub_18A628F58();
    sub_18A66CDB4();
    return 1;
  }
  else
  {
LABEL_12:
    sub_18A628F58();
    v7 = String.Iterator.next()().value._object;
    sub_18A66CDB4();
    v8 = v7 == 0;
    sub_18A5F37A4();
  }
  return v8;
}

uint64_t CKSyncEngine.FetchChangesContext.options.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  id v9;

  v2 = *(_BYTE *)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_BYTE *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  v9 = v4;
  sub_18A5F3FAC();
  return swift_bridgeObjectRetain();
}

void sub_18A669B20()
{
  swift_bridgeObjectRetain();
  CKSyncEngine.SendChangesOptions.scope.setter();
}

void CKSyncEngine.SendChangesOptions.scope.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_18A66CD00();
  *(_QWORD *)v1 = v0;
  *(_BYTE *)(v1 + 8) = v2;
  sub_18A669BEC();
  sub_18A5F3824();
}

uint64_t (*CKSyncEngine.SendChangesOptions.scope.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A66CAC4;
}

void sub_18A669BA4(id *a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v1 = *a1;
  CKSyncEngine.SendChangesOptions.operationGroup.setter(v1, v2, v3, v4, v5, v6, v7, v8);
}

void CKSyncEngine.SendChangesOptions.operationGroup.setter(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  id v10;

  sub_18A66CD60(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
  sub_18A669BEC();
  sub_18A667258(v10);
}

uint64_t sub_18A669BEC()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 8);
  v3 = (void *)v0[2];
  sub_18A5F3FAC();
  v4 = v3;
  sub_18A66BCA0(v4);
  if (v5 && (sub_18A66CC20(), (sub_18A669988() & 1) == 0))
  {

    sub_18A5F37E0();
  }
  else
  {
    sub_18A66CBD0();
    v11 = v1;
    v12 = v2;
    sub_18A5F3FAC();
    sub_18A675860((uint64_t)&v11);
    v7 = v6;
    v9 = v8;
    sub_18A5F37E0();
    sub_18A5F460C();
    sub_18A66BCF8(v7, v9, v4);

  }
  return swift_bridgeObjectRelease();
}

uint64_t (*CKSyncEngine.SendChangesOptions.operationGroup.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_18A669CC8;
}

uint64_t sub_18A669CC8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_18A669BEC();
  return result;
}

Swift::Bool __swiftcall CKSyncEngine.SendChangesOptions.Scope.contains(_:)(CKRecordID a1)
{
  Swift::Bool result;

  __asm { BR              X10 }
  return result;
}

void sub_18A669D20(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, sel_zoneID);
  sub_18A66CC50((uint64_t)v1, v2, (char)&qword_1ECD967B0);

  sub_18A5F3824();
}

void CKSyncEngine.SendChangesOptions.Scope.contains(_:)()
{
  __asm { BR              X11 }
}

void sub_18A669DFC(void *a1@<X8>)
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_zoneID);
  sub_18A66CC50((uint64_t)v2, v3, (char)&qword_1ECD967B0);

  sub_18A5F3824();
}

BOOL CKSyncEngine.SendChangesOptions.Scope.contains(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  CKRecordZoneID *v4;
  CKRecordZoneID *v5;
  Swift::Bool v6;
  uint64_t v8;

  v3 = *(void **)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v4 = v3;
  }
  else
  {
    LOBYTE(v8) = *(_BYTE *)(v1 + 8);
    v4 = (CKRecordZoneID *)objc_msgSend(v3, sel_zoneID, *(_QWORD *)v1, v8);
  }
  v5 = v4;
  v6 = CKSyncEngine.SendChangesOptions.Scope.contains(_:)(v4);

  return v6;
}

Swift::Bool __swiftcall CKSyncEngine.SendChangesOptions.Scope.contains(_:)(CKRecordZoneID *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A5F44DC();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_18A669F64 + *((int *)qword_18A66A290 + *(unsigned __int8 *)(v1 + 8))))(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_18A669F74()
{
  unint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (v0 >> 62)
  {
    sub_18A5F3FAC();
    v3 = sub_18A623AB0();
    if (!v3)
      goto LABEL_15;
  }
  else
  {
    v3 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    sub_18A5F3FAC();
    if (!v3)
      goto LABEL_15;
  }
  if ((v0 & 0xC000000000000001) != 0)
    sub_18A5F398C();
  v4 = sub_18A66CE0C();
  sub_18A5F3DF8((uint64_t)v4, (unint64_t *)&qword_1ECD967B0);
  sub_18A66CBC8();
  sub_18A66CD28();
  if ((v2 & 1) != 0)
    goto LABEL_14;
  if (v3 == 1)
  {
LABEL_13:
    v1 = 1;
    goto LABEL_15;
  }
  v5 = *(id *)(v0 + 40);
  sub_18A66CBC8();
  sub_18A66CD28();
  if ((v2 & 1) != 0)
  {
LABEL_14:
    v1 = 0;
    goto LABEL_15;
  }
  if (v3 == 2)
    goto LABEL_13;
  v6 = 6;
  do
  {
    v7 = v6 - 4;
    sub_18A66CDF8();
    v8 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
      JUMPOUT(0x18A66A21CLL);
    }
    sub_18A66CBC8();
    sub_18A66CD20();
    if ((((_BYTE)v6 - 4) & 1) != 0)
      break;
    ++v6;
  }
  while (v8 != v3);
  v1 = v7 ^ 1;
LABEL_15:
  sub_18A5F37E0();
  return v1 & 1;
}

void sub_18A66A2A0()
{
  id v0;
  Class isa;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18A66CE28(0, (unint64_t *)&qword_1ECD967B0);
  sub_18A66CE20((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  isa = Set._bridgeToObjectiveC()().super.isa;
  sub_18A5F37E0();
  objc_msgSend(v0, sel_initWithExcludedZoneIDs_, isa);

  sub_18A5F3814();
}

CKSyncEngineSendChangesOptions __swiftcall CKSyncEngine.SendChangesOptions.optionsObject()()
{
  CKSyncEngineSendChangesOptions result;

  __asm { BR              X10 }
  return result;
}

void sub_18A66A370(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3DF8(a1, &qword_1EDF6BFD0);
  sub_18A66CCC0();
  sub_18A66833C((unint64_t)v1, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (void (*)(id *, id))sub_18A69C3A8);
  sub_18A66A2A0();
  v3 = v2;
  sub_18A5F3944();
  objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesOptions), sel_initWithScope_, v3);
  sub_18A6292B4();
  sub_18A66CCF8(v1, sel_setOperationGroup_);
  sub_18A5F3814();
}

id CKSyncEngine.SendChangesContext.options.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  id v4;

  v2 = *(_BYTE *)(v1 + 16);
  v4 = *(id *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  return v4;
}

_BYTE *CKSyncEngine.SendChangesContext.init(reason:options:)@<X0>(_BYTE *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 24) = v5;
  return result;
}

BOOL static CKSyncEngine.SyncReason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CKSyncEngine.SyncReason.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  sub_18A5F379C();
}

Swift::Int CKSyncEngine.SyncReason.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CKSyncEngine.FetchChangesOptions.description.getter()
{
  uint64_t v0;
  int v1;
  Swift::String v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v11;

  v1 = *(unsigned __int8 *)(v0 + 56);
  sub_18A66BCA0(*(void **)(v0 + 16));
  if (v2._object)
  {
    sub_18A66CB90(v2);
    sub_18A5F3944();
    v3 = v11;
  }
  else
  {
    v3 = 0;
  }
  v4 = v1 == 0;
  if (v1)
    v5 = (void *)0xE800000000000000;
  else
    v5 = (void *)0xE000000000000000;
  if (v4)
    v6 = 0;
  else
    v6 = 0x313D6563726F6620;
  _StringGuts.grow(_:)(18);
  sub_18A667364();
  sub_18A66CDE4();
  sub_18A5F3FAC();
  CKSyncEngine.FetchChangesOptions.Scope.description.getter();
  String.append(_:)(v7);
  sub_18A5F37E0();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = v6;
  v8._object = v5;
  String.append(_:)(v8);
  sub_18A5F3FE4();
  sub_18A614610(v3);
  sub_18A5F3944();
  v9._countAndFlagsBits = 15913;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 0;
}

void static CKSyncEngine.FetchChangesOptions.Scope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)a2;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a2 + 8))
      goto LABEL_14;
LABEL_6:
    sub_18A5F3898();
    v4 = sub_18A5F3FAC();
    sub_18A64E938(v4, v2);
    sub_18A5F37A4();
LABEL_13:
    sub_18A5F37E0();
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v3 != 1)
      goto LABEL_14;
    goto LABEL_6;
  }
  if (v3 == 2 && v2 == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_18A5F3824();
}

unint64_t CKSyncEngine.FetchChangesOptions.ZoneConfiguration.description.getter()
{
  _BYTE *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (*v0)
    v1 = 0;
  else
    v1 = 0xD000000000000014;
  if (*v0)
    v2 = 0xE000000000000000;
  else
    v2 = 0x800000018A83FE70;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  sub_18A5F37E0();
  sub_18A5F485C();
  return 0xD000000000000012;
}

uint64_t CKSyncEngine.SendChangesOptions.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v5;

  sub_18A66BCA0(*(void **)(v0 + 16));
  if (v1._object)
  {
    sub_18A66CB90(v1);
    sub_18A5F3944();
    v2 = v5;
  }
  else
  {
    v2 = 0;
  }
  sub_18A66CDE4();
  sub_18A5F3FAC();
  CKSyncEngine.SendChangesOptions.Scope.description.getter();
  String.append(_:)(v3);
  sub_18A5F37E0();
  sub_18A5F3FE4();
  sub_18A614610(v2);
  sub_18A5F3944();
  sub_18A5F485C();
  return v5;
}

void static CKSyncEngine.SendChangesOptions.Scope.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_18A66A8D4(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  if (!a1)
  {
    sub_18A5F3898();
    v2 = sub_18A5F3FAC();
    sub_18A64E938(v2, v1);
    sub_18A5F37A4();
    sub_18A5F37E0();
  }
  sub_18A5F3824();
}

unint64_t CKSyncEngine.SendChangesContext.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  void *v2;
  uint64_t v3;
  id v4;
  Swift::String v5;

  v1 = *v0;
  v2 = (void *)*((_QWORD *)v0 + 3);
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  if (v1)
    v3 = 0x6C61756E616DLL;
  else
    v3 = 0x656C756465686373;
  sub_18A614610(v3);
  sub_18A5F3944();
  sub_18A66CBE8();
  sub_18A5F3FAC();
  v4 = v2;
  v5._countAndFlagsBits = CKSyncEngine.SendChangesOptions.description.getter();
  String.append(_:)(v5);

  sub_18A5F37E0();
  sub_18A5F460C();
  sub_18A5F485C();
  return 0xD00000000000001BLL;
}

unint64_t CKSyncEngine.FetchChangesContext.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  Swift::String v7;

  v1 = *v0;
  v2 = (void *)*((_QWORD *)v0 + 3);
  _StringGuts.grow(_:)(25);
  sub_18A628F58();
  if (v1)
    v3 = 0x6C61756E616DLL;
  else
    v3 = 0x656C756465686373;
  if (v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE900000000000064;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  sub_18A5F3FE4();
  sub_18A66CBE8();
  sub_18A5F3FAC();
  v6 = v2;
  sub_18A5F40AC();
  sub_18A5F3D48();
  v7._countAndFlagsBits = CKSyncEngine.FetchChangesOptions.description.getter();
  String.append(_:)(v7);
  sub_18A5F460C();
  sub_18A5F3944();

  sub_18A5F37E0();
  sub_18A5F3A8C();
  sub_18A5F485C();
  return 0xD00000000000001CLL;
}

uint64_t CKSyncEngine.SyncReason.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61756E616DLL;
  else
    return 0x656C756465686373;
}

void CKSyncEngine.SendChangesOptions.Scope.description.getter()
{
  __asm { BR              X10 }
}

#error "18A66ADEC: call analysis failed (funcsize=56)"

void CKSyncEngine.FetchChangesOptions.Scope.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  if (!*(_BYTE *)(v0 + 8))
  {
    sub_18A66CCAC();
    sub_18A667364();
    sub_18A5F444C();
    if (v11)
    {
      sub_18A5F3FAC();
      v12 = sub_18A623AB0();
      sub_18A5F37E0();
    }
    else
    {
      v12 = *(_QWORD *)(v10 + 16);
    }
    v13 = MEMORY[0x1E0DEE9D8];
    if (v12)
    {
      sub_18A66CAD4();
      if (v12 < 0)
        goto LABEL_35;
      sub_18A66CBD8();
      do
      {
        if (v2)
          sub_18A66CAEC();
        v14 = objc_msgSend(sub_18A66CB30(), sel_ckShortDescription);
        sub_18A66CCDC();
        sub_18A5F4374();

        sub_18A5F4654();
        if (v8)
        {
          sub_18A5F3F20();
          v13 = v34;
        }
        sub_18A66CAF8();
      }
      while (!v9);
    }
    sub_18A5F101C(&qword_1EDF6A770);
    sub_18A66CC9C();
    sub_18A5F3C08();
    v25 = sub_18A66CB20();
    sub_18A66CB10(v25, v26, v27, v28, v29, v30, v31, v32, v33, v13, v35);
    sub_18A5F3944();
    v23 = 41;
    v24 = 0xE100000000000000;
    goto LABEL_30;
  }
  if (*(_BYTE *)(v0 + 8) != 1)
    goto LABEL_31;
  sub_18A5F4074();
  if (v4)
  {
    sub_18A5F3FAC();
    v5 = sub_18A623AB0();
    sub_18A5F37E0();
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 16);
  }
  v6 = MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_28;
  sub_18A66CAD4();
  if ((v5 & 0x8000000000000000) == 0)
  {
    sub_18A66CBD8();
    do
    {
      if (v2)
        sub_18A66CAEC();
      v7 = objc_msgSend(sub_18A66CB30(), sel_ckShortDescription);
      sub_18A66CCDC();
      sub_18A5F4374();

      sub_18A5F4654();
      if (v8)
      {
        sub_18A5F3F20();
        v6 = v34;
      }
      sub_18A66CAF8();
    }
    while (!v9);
LABEL_28:
    sub_18A5F101C(&qword_1EDF6A770);
    sub_18A66CC9C();
    sub_18A5F3C08();
    v15 = sub_18A66CB20();
    sub_18A66CB10(v15, v16, v17, v18, v19, v20, v21, v22, v33, v6, v35);
    sub_18A5F3944();
    v23 = 10537;
    v24 = 0xE200000000000000;
LABEL_30:
    String.append(_:)(*(Swift::String *)&v23);
LABEL_31:
    sub_18A623AB8();
    return;
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

void CKSyncEngineFetchChangesScope.scopeEnum()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  sub_18A66CDBC(a1, (SEL *)&selRef_zoneIDs, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8);
  if (v3)
  {
    v4 = sub_18A6668F4(v3);
    sub_18A5F3944();
    v5 = 1;
  }
  else
  {
    v6 = sub_18A5F3888(0, sel_excludedZoneIDs);
    v7 = sub_18A66CD40();
    sub_18A66CE50((unint64_t *)&qword_1ECD967B8);
    v8 = sub_18A66CC44();

    LOBYTE(v6) = sub_18A66B574(v8);
    v9 = sub_18A5F3A8C();
    if ((v6 & 1) != 0)
    {
      v4 = 0;
      v5 = 2;
    }
    else
    {
      v10 = sub_18A5F3888(v9, sel_excludedZoneIDs);
      sub_18A66CC44();
      sub_18A6292B4();
      v4 = sub_18A6668F4(v7);
      sub_18A5F3944();
      v5 = 0;
    }
  }
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  sub_18A5F3800();
}

void CKSyncEngineFetchChangesZoneConfiguration.configurationStruct()(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  char v4;
  id v5;

  v3 = objc_msgSend(v1, sel_shouldFetchAssetContents);
  v4 = (char)v3;
  v5 = sub_18A5F3888((uint64_t)v3, sel_resultsLimit);
  *(_BYTE *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_18A5F3824();
}

Swift::Void __swiftcall CKSyncEngineFetchChangesOptions.updateOperationGroupName()()
{
  sub_18A66B414((void (*)(uint64_t *__return_ptr))CKSyncEngineFetchChangesScope.scopeEnum(), (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_18A6756FC);
}

void CKSyncEngineSendChangesScope.scopeEnum()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  sub_18A66CDBC(a1, (SEL *)&selRef_recordIDs, (unint64_t *)&unk_1EDF6A8F0, (uint64_t)off_1E1F54288, (unint64_t *)&qword_1EDF6A400);
  if (v3)
  {
    v4 = sub_18A666900(v3);
    sub_18A5F3944();
    v5 = 2;
  }
  else
  {
    sub_18A66CDBC(0, (SEL *)&selRef_zoneIDs, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8);
    if (v6)
    {
      v4 = sub_18A6668F4(v6);
      sub_18A5F3944();
      v5 = 1;
    }
    else
    {
      v7 = sub_18A5F3888(0, sel_excludedZoneIDs);
      v8 = sub_18A66CD40();
      sub_18A66CE50((unint64_t *)&qword_1ECD967B8);
      v9 = sub_18A66CC44();

      LOBYTE(v7) = sub_18A66B574(v9);
      v10 = sub_18A5F3A8C();
      if ((v7 & 1) != 0)
      {
        v4 = 0;
        v5 = 3;
      }
      else
      {
        v11 = sub_18A5F3888(v10, sel_excludedZoneIDs);
        sub_18A66CC44();
        sub_18A6292B4();
        v4 = sub_18A6668F4(v8);
        sub_18A5F3944();
        v5 = 0;
      }
    }
  }
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  sub_18A5F3800();
}

void static CKSyncEngineSendChangesOptions.defaultOperationGroup()()
{
  sub_18A66CBD0();
  static SyncEngine.defaultOperationGroup()();
  sub_18A5F379C();
}

Swift::Void __swiftcall CKSyncEngineSendChangesOptions.updateOperationGroupName()()
{
  sub_18A66B414((void (*)(uint64_t *__return_ptr))CKSyncEngineSendChangesScope.scopeEnum(), (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_18A675860);
}

void sub_18A66B414(void (*a1)(uint64_t *__return_ptr), uint64_t (*a2)(uint64_t *, uint64_t, uint64_t))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v4 = sub_18A5F3888((uint64_t)a1, sel_operationGroup);
  sub_18A66BDC0(v4);
  v6 = v5;
  v8 = v7;
  if (v7 && (v5 = sub_18A669988(), (v5 & 1) == 0))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = sub_18A5F3888(v5, sel_operationGroup);
    v9 = sub_18A66CBD0();
    v10 = sub_18A5F3888(v9, sel_scope);
    a1(&v17);

    v15 = v17;
    v16 = v18;
    v11 = a2(&v15, v6, v8);
    v13 = v12;
    sub_18A5F3944();
    sub_18A5F460C();
    sub_18A66BCF8(v11, v13, v14);

  }
}

BOOL sub_18A66B574(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xC000000000000001) != 0)
    v1 = __CocoaSet.count.getter();
  else
    v1 = *(_QWORD *)(a1 + 16);
  return v1 == 0;
}

id sub_18A66B5AC(uint64_t a1)
{
  return sub_18A66B5D0(a1, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8, (SEL *)&selRef_initWithZoneIDs_);
}

id sub_18A66B5D0(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, SEL *a5)
{
  void *v5;
  NSSet v9;
  id v10;

  if (a1)
  {
    sub_18A5F3DF8(a1, a2);
    sub_18A66CE20(a4, a2);
    v9.super.isa = Set._bridgeToObjectiveC()().super.isa;
    sub_18A5F3944();
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v5, *a5, v9.super.isa);

  return v10;
}

void sub_18A66B668()
{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  sub_18A5F44DC();
  v1 = v0;
  v3 = v2;
  v4 = *v0;
  sub_18A5F101C(v5);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v34 = v0;
    v35 = v4 + 64;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 64;
    swift_retain();
    v13 = 0;
    if (!v10)
      goto LABEL_7;
LABEL_6:
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
    {
      v20 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * i);
      v21 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * i);
      if ((v3 & 1) == 0)
      {
        v22 = v20;
        v23 = v21;
      }
      v24 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) == 0)
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          v31 = v27 == v30;
          if (v27 == v30)
            v27 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v27);
          if (v32 != -1)
          {
            v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v28) = v20;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v28) = v21;
      ++*(_QWORD *)(v7 + 16);
      if (v10)
        goto LABEL_6;
LABEL_7:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v11)
        break;
      v17 = (_QWORD *)(v4 + 64);
      v18 = *(_QWORD *)(v35 + 8 * v16);
      ++v13;
      if (!v18)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v11)
          goto LABEL_32;
        v18 = *(_QWORD *)(v35 + 8 * v13);
        if (!v18)
        {
          v19 = v16 + 2;
          if (v19 >= v11)
          {
LABEL_32:
            sub_18A61A878();
            v1 = v34;
            if ((v3 & 1) == 0)
              goto LABEL_39;
            goto LABEL_35;
          }
          v18 = *(_QWORD *)(v35 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v13 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v13 >= v11)
                goto LABEL_32;
              v18 = *(_QWORD *)(v35 + 8 * v13);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          v13 = v19;
        }
      }
LABEL_18:
      v10 = (v18 - 1) & v18;
    }
    sub_18A61A878();
    v1 = v34;
    v17 = (_QWORD *)(v4 + 64);
    if ((v3 & 1) == 0)
      goto LABEL_39;
LABEL_35:
    v33 = 1 << *(_BYTE *)(v4 + 32);
    if (v33 >= 64)
      sub_18A6217B0(0, (unint64_t)(v33 + 63) >> 6, v17);
    else
      *v17 = -1 << v33;
    *(_QWORD *)(v4 + 16) = 0;
  }
LABEL_39:
  sub_18A61A878();
  *v1 = v7;
  sub_18A5F3CFC();
}

void sub_18A66B8F4(uint64_t a1, uint64_t a2)
{
  sub_18A66B92C(a1, a2, &qword_1EDF6BFF8, &qword_1EDF6B578);
}

void sub_18A66B910(uint64_t a1, uint64_t a2)
{
  sub_18A66B92C(a1, a2, &qword_1EDF6C000, (unint64_t *)&unk_1EDF6A8F0);
}

void sub_18A66B92C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  sub_18A66CE00(a1, a2, a3);
  v13 = sub_18A66CE44();
  __CocoaDictionary.makeIterator()();
  if (!__CocoaDictionary.Iterator.next()())
  {
LABEL_16:
    sub_18A61A878();
LABEL_18:
    sub_18A66CC04();
    return;
  }
  sub_18A66CDD8();
  sub_18A66CE28(0, a4);
  while (1)
  {
    sub_18A612F00();
    sub_18A60B8D0(0, (unint64_t *)&unk_1EDF6ADD0);
    sub_18A612F00();
    if (*(_QWORD *)(v13 + 24) <= *(_QWORD *)(v13 + 16))
      sub_18A66CCE4();
    sub_18A66CE84();
    sub_18A66CC58();
    if (v5)
      break;
    sub_18A66CE70();
LABEL_15:
    sub_18A66CB64(v6);
    __CocoaDictionary.Iterator.next()();
    sub_18A66CDD8();
    if (!v12)
      goto LABEL_16;
  }
  sub_18A66CE5C();
  while (++v9 != v10 || (v8 & 1) == 0)
  {
    v11 = v9 == v10;
    if (v9 == v10)
      v9 = 0;
    v8 |= v11;
    if (*(_QWORD *)(v7 + 8 * v9) != -1)
    {
      sub_18A66CE30();
      goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_18A66BAB4(uint64_t a1, uint64_t a2)
{
  sub_18A66BAD0(a1, a2, &qword_1EDF6BFF0);
}

void sub_18A66BAD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  if (!a2)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  sub_18A66CE00(a1, a2, a3);
  v12 = sub_18A66CE44();
  __CocoaDictionary.makeIterator()();
  if (!__CocoaDictionary.Iterator.next()())
  {
LABEL_16:
    swift_release();
LABEL_18:
    sub_18A66CC04();
    return;
  }
  sub_18A66CDD8();
  sub_18A5F3DF8(v3, (unint64_t *)&qword_1ECD967B0);
  while (1)
  {
    sub_18A612F00();
    sub_18A66CD50();
    sub_18A612F00();
    if (*(_QWORD *)(v12 + 24) <= *(_QWORD *)(v12 + 16))
      sub_18A66CCE4();
    sub_18A66CE84();
    sub_18A66CC58();
    if (v4)
      break;
    sub_18A66CE70();
LABEL_15:
    sub_18A66CB64(v5);
    __CocoaDictionary.Iterator.next()();
    sub_18A66CDD8();
    if (!v11)
      goto LABEL_16;
  }
  sub_18A66CE5C();
  while (++v8 != v9 || (v7 & 1) == 0)
  {
    v10 = v8 == v9;
    if (v8 == v9)
      v8 = 0;
    v7 |= v10;
    if (*(_QWORD *)(v6 + 8 * v8) != -1)
    {
      sub_18A66CE30();
      goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_18A66BC48(uint64_t a1, uint64_t a2)
{
  sub_18A66BAD0(a1, a2, &qword_1EDF6BFE0);
}

uint64_t sub_18A66BC68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void sub_18A66BCA0(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(a1, sel_name);
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_18A5F3824();
}

void sub_18A66BCF8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x18D76C7CC]();
  sub_18A5F37A4();
  objc_msgSend(a3, sel_setName_, v4);

}

void sub_18A66BD44(void *a1, SEL *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  id v7;
  void *v8;

  v7 = objc_msgSend(a1, *a2);
  if (v7)
  {
    v8 = v7;
    sub_18A66CD50();
    sub_18A627CA0(a5, a3);
    static Set._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_18A5F3814();
}

void sub_18A66BDC0(void *a1)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(a1, sel_name);
  sub_18A623D94();
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_18A5F3824();
}

unint64_t sub_18A66BE24()
{
  unint64_t result;

  result = qword_1EDF6BFD8;
  if (!qword_1EDF6BFD8)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKSyncEngine.SyncReason, &type metadata for CKSyncEngine.SyncReason);
    atomic_store(result, (unint64_t *)&qword_1EDF6BFD8);
  }
  return result;
}

uint64_t _s19FetchChangesOptionsVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s19FetchChangesOptionsVwcp(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  v5 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s19FetchChangesOptionsVwca(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  id v7;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v7 = v5;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 _s19FetchChangesOptionsVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s19FetchChangesOptionsVwta(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t _s19FetchChangesOptionsVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesOptionsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CKSyncEngine.FetchChangesOptions()
{
  sub_18A5F3994();
}

uint64_t _s19FetchChangesOptionsV17ZoneConfigurationVwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[16])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesOptionsV17ZoneConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for CKSyncEngine.FetchChangesOptions.ZoneConfiguration()
{
  sub_18A5F3994();
}

uint64_t _s19FetchChangesOptionsV5ScopeOwet(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesOptionsV5ScopeOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_18A66C224(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_18A66C23C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope()
{
  sub_18A5F3994();
}

uint64_t _s19FetchChangesContextVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s19FetchChangesContextVwcp(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v3;
  v5 = *(void **)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s19FetchChangesContextVwca(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  id v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a2 + 24);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = v5;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t _s19FetchChangesContextVwta(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t _s19FetchChangesContextVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19FetchChangesContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CKSyncEngine.FetchChangesContext()
{
  sub_18A5F3994();
}

void _s18SendChangesOptionsVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

void _s18SendChangesOptionsVwCP_0(uint64_t a1, uint64_t a2)
{
  char v2;
  void *v3;
  id v4;

  v2 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  v4 = v3;
  sub_18A5F379C();
}

uint64_t _s18SendChangesOptionsVwca(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  id v7;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v7 = v5;

  return a1;
}

uint64_t _s18SendChangesOptionsVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t _s18SendChangesOptionsVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SendChangesOptionsVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CKSyncEngine.SendChangesOptions()
{
  sub_18A5F3994();
}

uint64_t _s18SendChangesOptionsV5ScopeOwCP(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void _s19FetchChangesOptionsV5ScopeOwca_0(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v2;
  swift_bridgeObjectRetain();
  sub_18A5F37A4();
  sub_18A5F379C();
}

uint64_t _s18SendChangesOptionsV5ScopeOwta(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18SendChangesOptionsV5ScopeOwet(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SendChangesOptionsV5ScopeOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_18A66C7AC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_18A66C7C4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for CKSyncEngine.SendChangesOptions.Scope()
{
  sub_18A5F3994();
}

uint64_t _s18SendChangesContextVwcp(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t _s18SendChangesContextVwca(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  id v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a2 + 24);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = v5;

  return a1;
}

uint64_t _s18SendChangesContextVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t _s18SendChangesContextVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s18SendChangesContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CKSyncEngine.SendChangesContext()
{
  sub_18A5F3994();
}

uint64_t _s10SyncReasonOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A66C9C4 + 4 * byte_18A83C3FD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A66C9F8 + 4 * byte_18A83C3F8[v4]))();
}

uint64_t sub_18A66C9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A66CA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A66CA08);
  return result;
}

uint64_t sub_18A66CA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A66CA1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A66CA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A66CA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CKSyncEngine.SyncReason()
{
  sub_18A5F3994();
}

unint64_t sub_18A66CA40()
{
  unint64_t result;

  result = qword_1EDF6A080;
  if (!qword_1EDF6A080)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKSyncEngine.PendingRecordZoneChange, &type metadata for CKSyncEngine.PendingRecordZoneChange);
    atomic_store(result, (unint64_t *)&qword_1EDF6A080);
  }
  return result;
}

unint64_t sub_18A66CA7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDF6A668;
  if (!qword_1EDF6A668)
  {
    type metadata accessor for Scope(255);
    result = MEMORY[0x18D76E7C4](&unk_18A839188, v1);
    atomic_store(result, (unint64_t *)&qword_1EDF6A668);
  }
  return result;
}

void sub_18A66CAD4()
{
  sub_18A60FC4C();
}

void sub_18A66CAEC()
{
  JUMPOUT(0x18D76CEB0);
}

void sub_18A66CAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v3;
  v5 = v0 + 16 * v4;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
}

void sub_18A66CB10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;
  Swift::String v13;

  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t sub_18A66CB20()
{
  return swift_bridgeObjectRelease();
}

id sub_18A66CB30()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_18A66CB3C()
{
  return sub_18A669988();
}

void sub_18A66CB64(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(a1 + v2) |= v3;
  *(_QWORD *)(v5[6] + 8 * v1) = v4;
  *(_QWORD *)(v5[7] + 8 * v1) = v6;
  ++v5[2];
}

void sub_18A66CB90(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t _s8CloudKit12CKSyncEngineC19FetchChangesOptionsV5scopeAE5ScopeOvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A66CBC8()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18A66CBD0()
{
  return type metadata accessor for SyncEngine();
}

void sub_18A66CBE8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x736E6F6974706F20;
  v0._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v0);
}

uint64_t sub_18A66CC20()
{
  return 0x6E45636E79534B43;
}

uint64_t sub_18A66CC44()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A66CC50(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v3;

  return sub_18A6689BC(a1, v3, a3);
}

id sub_18A66CC7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  *a2 = v2;
  return v2;
}

uint64_t sub_18A66CC88()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

unint64_t sub_18A66CC9C()
{
  return sub_18A63DD6C();
}

id _s8CloudKit12CKSyncEngineC19FetchChangesOptionsV14operationGroupSo011CKOperationI0Cvg_0()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void sub_18A66CCAC()
{
  _StringGuts.grow(_:)(16);
}

uint64_t sub_18A66CCC0()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18A66CCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id *, id))
{
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;

  return sub_18A66833C(v5, v6, v7, v8, a5);
}

uint64_t sub_18A66CCDC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_18A66CCE4()
{
  sub_18A66B668();
}

id sub_18A66CCF8(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_18A66CD00()
{
  return swift_bridgeObjectRelease();
}

void sub_18A66CD10()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  sub_18A66BCF8(v0, v2, v1);
}

void sub_18A66CD20()
{
  void *v0;

}

void sub_18A66CD28()
{
  void *v0;

}

uint64_t sub_18A66CD30()
{
  unint64_t *v0;

  return sub_18A60B8D0(0, v0);
}

uint64_t sub_18A66CD40()
{
  unint64_t *v0;

  return sub_18A60B8D0(0, v0);
}

uint64_t sub_18A66CD50()
{
  unint64_t *v0;

  return sub_18A60B8D0(0, v0);
}

void sub_18A66CD60(id obj, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  objc_storeStrong((id *)(v10 + 16), obj);
}

void sub_18A66CD70()
{
  void *v0;

}

void sub_18A66CD78()
{
  _StringGuts.grow(_:)(23);
}

void sub_18A66CD84(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD000000000000015;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

id sub_18A66CD90(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v2, v3);
}

void _s8CloudKit12CKSyncEngineC19FetchChangesContextV6reasonAC10SyncReasonOvg_0(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_18A66CDB4()
{
  return swift_bridgeObjectRelease();
}

void sub_18A66CDBC(uint64_t a1, SEL *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  void *v5;

  sub_18A66BD44(v5, a2, a3, a4, a5);
}

uint64_t *sub_18A66CDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

id sub_18A66CDF8()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1);
}

uint64_t sub_18A66CE00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18A5F101C(a3);
}

id sub_18A66CE0C()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

void sub_18A66CE20(unint64_t *a1, unint64_t *a2)
{
  sub_18A627CA0(a1, a2);
}

uint64_t sub_18A66CE28(uint64_t a1, unint64_t *a2)
{
  return sub_18A60B8D0(a1, a2);
}

uint64_t sub_18A66CE44()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

void sub_18A66CE50(unint64_t *a1)
{
  unint64_t *v1;

  sub_18A627CA0(a1, v1);
}

Swift::Int sub_18A66CE84()
{
  uint64_t v0;

  return NSObject._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
}

void CKAcceptSharesOperation.perShareResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v5 = sub_18A5F3F90();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v8, v9);
    swift_retain();
    v7 = swift_release();
    sub_18A5F37C8(v7, sel_setPerShareCompletionBlock_);
    _Block_release(v6);
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerShareCompletionBlock_);
  }
}

void CKAcceptSharesOperation.acceptSharesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  if (a1)
  {
    v6 = sub_18A5F3F90();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = sub_18A5F3938((uint64_t)sub_18A60A50C, MEMORY[0x1E0C809B0], 1107296256, v9, v10);
    sub_18A60A614(a1);
    swift_retain();
    v8 = swift_release();
    sub_18A5F37C8(v8, sel_setAcceptSharesCompletionBlock_);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setAcceptSharesCompletionBlock_);
  }
}

void CKAcceptSharesOperation.perShareResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perShareCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A614F28;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66D0A8(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t);

  CKAcceptSharesOperation.perShareResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A65F570;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A66D10C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A65F564;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKAcceptSharesOperation.perShareResultBlock.setter((uint64_t)v4, v3);
}

void sub_18A66D18C(uint64_t a1, void *a2, id a3, void (*a4)(uint64_t, void *, uint64_t))
{
  id v8;
  id v9;
  void *v10;

  if (a2)
  {
    v9 = a2;
    a4(a1, a2, 0);

  }
  else if (a3)
  {
    v8 = a3;
    a4(a1, a3, 1);

  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18A63D9E0(MEMORY[0x1E0DEE9D8]);
    sub_18A615B0C();
    _BridgedStoredNSError.init(_:userInfo:)();
    a4(a1, v10, 1);

  }
}

uint64_t sub_18A66D2A4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_18A66D2C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_18A66D18C(a1, a2, a3, *(void (**)(uint64_t, void *, uint64_t))(v3 + 16));
}

uint64_t sub_18A66D2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A66D2E0()
{
  return swift_release();
}

void CKAcceptSharesOperation.perShareResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKAcceptSharesOperation.perShareResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A66D318(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKAcceptSharesOperation.perShareResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKAcceptSharesOperation.acceptSharesResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_acceptSharesCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37BC();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60A3E4;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66D3A8(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKAcceptSharesOperation.acceptSharesResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A66D40C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_18A60A614(v1);
  CKAcceptSharesOperation.acceptSharesResultBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18A66D48C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void CKAcceptSharesOperation.acceptSharesResultBlock.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CKAcceptSharesOperation.acceptSharesResultBlock.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_18A5F379C();
}

uint64_t sub_18A66D4E0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKAcceptSharesOperation.acceptSharesResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void sub_18A66D534()
{
  uint64_t v0;

  v0 = sub_18A5F3ED0();
  sub_18A66DDC8(v0);
  sub_18A5F4238();
  sub_18A5F48E8();
}

void sub_18A66D55C()
{
  sub_18A5F3ED0();
  sub_18A66DDB8();
  sub_18A5F4238();
  sub_18A5F48E8();
}

Swift::Int sub_18A66D584()
{
  return sub_18A66D5E0();
}

void sub_18A66D590()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = sub_18A5F3ED0();
  sub_18A5F3A20(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  sub_18A5F4238();
  sub_18A5F48E8();
}

void sub_18A66D5B8()
{
  sub_18A66DDD4();
  sub_18A66DDB8();
  sub_18A5F4238();
  sub_18A5F48E8();
}

Swift::Int sub_18A66D5E0()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_18A66D65C()
{
  uint64_t v0;

  v0 = sub_18A66DDD4();
  sub_18A66DDC8(v0);
  sub_18A5F4238();
  sub_18A5F48E8();
}

void sub_18A66D684()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = sub_18A66DDD4();
  sub_18A5F3A20(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  sub_18A5F4238();
  sub_18A5F48E8();
}

uint64_t sub_18A66D6AC(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&unk_1E1F57BF0, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_18A66D700(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4449656E6F7ALL;
  else
    return 0x614E64726F636572;
}

void sub_18A66D738(char *a1, char *a2)
{
  sub_18A60F920(*a1, *a2);
}

Swift::Int sub_18A66D744()
{
  return sub_18A66D584();
}

uint64_t sub_18A66D74C()
{
  return sub_18A64CE84();
}

Swift::Int sub_18A66D754()
{
  return sub_18A66D5E0();
}

uint64_t sub_18A66D75C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_18A66D6AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_18A66D788@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_18A66D700(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18A66D7B0()
{
  char *v0;

  return sub_18A66D700(*v0);
}

uint64_t sub_18A66D7B8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_18A66D6FC(a1);
  *a2 = result;
  return result;
}

void sub_18A66D7DC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_18A66D7E8()
{
  sub_18A66D9D4();
  return CodingKey.description.getter();
}

uint64_t sub_18A66D810()
{
  sub_18A66D9D4();
  return CodingKey.debugDescription.getter();
}

uint64_t CKRecordID.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  id v6;
  id v8;

  v3 = v1;
  v5 = sub_18A5F101C(&qword_1EDF6C008);
  MEMORY[0x1E0C80A78](v5);
  sub_18A608B00(a1, a1[3]);
  sub_18A66D9D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v6 = objc_msgSend(v3, sel_recordName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    sub_18A5F39C8();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v3, sel_zoneID);
    sub_18A60C4D4();
    sub_18A66DBA4(&qword_1EDF6C018, (uint64_t)&protocol conformance descriptor for CKRecordZoneID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();

    return sub_18A5F39C8();
  }
}

unint64_t sub_18A66D9D4()
{
  unint64_t result;

  result = qword_1EDF6C010;
  if (!qword_1EDF6C010)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C85C, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1EDF6C010);
  }
  return result;
}

_QWORD *CKRecordID.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v9;
  CKRecordZoneID *v10;

  v3 = sub_18A5F101C(&qword_1EDF6C020);
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_18A608B00(a1, a1[3]);
  sub_18A66D9D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    v7 = v6;
    sub_18A60C4D4();
    sub_18A66DBA4(&qword_1EDF6C028, (uint64_t)&protocol conformance descriptor for CKRecordZoneID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    v4 = (_QWORD *)CKRecordID.init(recordName:zoneID:)(v9, v10);
    sub_18A5F47E4();
  }
  sub_18A608B60((uint64_t)a1);
  return v4;
}

uint64_t sub_18A66DBA4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_18A60C4D4();
    result = MEMORY[0x18D76E7C4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_18A66DBE4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = CKRecordID.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_18A66DC0C(_QWORD *a1)
{
  return CKRecordID.encode(to:)(a1);
}

uint64_t _s10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A66DC78 + 4 * byte_18A83C6FD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A66DCAC + 4 * byte_18A83C6F8[v4]))();
}

uint64_t sub_18A66DCAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A66DCB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A66DCBCLL);
  return result;
}

uint64_t sub_18A66DCC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A66DCD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A66DCD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A66DCDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

unint64_t sub_18A66DCFC()
{
  unint64_t result;

  result = qword_1EDF6C030;
  if (!qword_1EDF6C030)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C834, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1EDF6C030);
  }
  return result;
}

unint64_t sub_18A66DD3C()
{
  unint64_t result;

  result = qword_1EDF6C038;
  if (!qword_1EDF6C038)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C76C, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1EDF6C038);
  }
  return result;
}

unint64_t sub_18A66DD7C()
{
  unint64_t result;

  result = qword_1EDF6C040;
  if (!qword_1EDF6C040)
  {
    result = MEMORY[0x18D76E7C4](&unk_18A83C794, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1EDF6C040);
  }
  return result;
}

void sub_18A66DDB8()
{
  unsigned __int8 v0;

  Hasher._combine(_:)(v0 + 1);
}

void sub_18A66DDC8(uint64_t a1, ...)
{
  char v1;
  va_list va;

  va_start(va, a1);
  sub_18A64CDD8((uint64_t)va, v1);
}

uint64_t sub_18A66DDD4()
{
  return Hasher.init(_seed:)();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID *zoneID)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  void *v6;
  objc_class *v7;
  NSString *v8;
  CKRecordZoneID *v9;
  objc_class *v10;
  CKRecordID result;

  object = recordName._object;
  countAndFlagsBits = recordName._countAndFlagsBits;
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v6 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v7 = (objc_class *)objc_msgSend(v5, sel_initWithRecordName_zoneID_, v6, zoneID);

  v10 = v7;
  result._zoneID = v9;
  result._recordName = v8;
  result.super.isa = v10;
  return result;
}

void sub_18A66DE58(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  a3(*a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  sub_18A5F379C();
}

void __swiftcall CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(CKModifyRecordsOperation *__return_ptr retstr, Swift::OpaquePointer_optional recordsToSave, Swift::OpaquePointer_optional recordIDsToDelete)
{
  uint64_t v3;
  void *rawValue;
  id v5;
  void *v6;
  id v7;
  NSArray v8;
  id v9;
  NSArray v10;

  v3 = *(_QWORD *)&recordsToSave.is_nil;
  rawValue = recordsToSave.value._rawValue;
  v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v6 = v5;
  if (rawValue)
  {
    sub_18A5F50F0(0, &qword_1EDF6A338);
    v7 = v6;
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v5;
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setRecordsToSave_, v8.super.isa);

  if (v3)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.isa = 0;
  }
  objc_msgSend(v6, sel_setRecordIDsToDelete_, v10.super.isa);

}

void CKModifyRecordsOperation.perRecordSaveBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F3F90();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A5F3964();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setPerRecordSaveBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerRecordSaveBlock_);
  }
}

void CKModifyRecordsOperation.perRecordDeleteBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F3F90();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A6678D0, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A5F3964();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setPerRecordDeleteBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerRecordDeleteBlock_);
  }
}

void CKModifyRecordsOperation.modifyRecordsResultBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F3F90();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A66E7C8, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A60A614((uint64_t)v2);
    swift_retain();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setModifyRecordsCompletionBlock_);
    sub_18A5F3838();
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setModifyRecordsCompletionBlock_);
  }
}

void CKModifyRecordsOperation.perRecordSaveBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perRecordSaveBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A61B4CC;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66E230(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKModifyRecordsOperation.perRecordSaveBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A66EC18;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A66E294(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A6679A4;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifyRecordsOperation.perRecordSaveBlock.setter((uint64_t)v4);
}

uint64_t sub_18A66E314()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A66E338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A66E348()
{
  return swift_release();
}

void CKModifyRecordsOperation.perRecordSaveBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordsOperation.perRecordSaveBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66E37C(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordsOperation.perRecordSaveBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifyRecordsOperation.perRecordDeleteBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perRecordDeleteBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60C230;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66E410(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKModifyRecordsOperation.perRecordDeleteBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A66EC18;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A66E474(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A6679E8;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifyRecordsOperation.perRecordDeleteBlock.setter((uint64_t)v4);
}

void CKModifyRecordsOperation.perRecordDeleteBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordsOperation.perRecordDeleteBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66E520(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordsOperation.perRecordDeleteBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_modifyRecordsCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A66E598(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, _QWORD *);

  CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BCD8;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A66E5FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
  }
  sub_18A60A614(v1);
  CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter();
}

void CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A5F4578();
  if (v0)
  {
    sub_18A5F3938((uint64_t)sub_18A66E7C8, MEMORY[0x1E0C809B0], 1107296256, v1, v2);
    sub_18A5F3964();
    v0 = sub_18A5F438C();
  }
  sub_18A5F37C8(v0, sel_setModifyRecordsCompletionBlock_);
  sub_18A5F3AA8();
  sub_18A5F3838();
  sub_18A5F3DE4();
}

void sub_18A66E6FC(objc_class *a1, Class a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v8;
  id v9;

  isa = a1;
  if (a1)
  {
    sub_18A5F50F0(0, &qword_1EDF6A338);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    a2 = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a3)
    v8 = _convertErrorToNSError(_:)();
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);

}

uint64_t sub_18A66E7C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void *);
  id v8;

  v6 = a2;
  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A5F50F0(0, &qword_1EDF6A338);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66E8BC(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKModifyRecordsOperation.modifyRecordsResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_modifyRecordsCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A66ECA0;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66E950(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKModifyRecordsOperation.modifyRecordsResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A60A65C;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A66E9B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A60A62C;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter((uint64_t)v4);
}

void sub_18A66EA34(void *a1, char a2, void (*a3)(_QWORD, _QWORD, void *))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    a3(0, 0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    a3(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0);
  }
}

uint64_t sub_18A66EB78()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A66EB9C(objc_class *a1, objc_class *a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A66E6FC(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A66EBA4(void *a1, char a2)
{
  uint64_t v2;

  sub_18A66EA34(a1, a2 & 1, *(void (**)(_QWORD, _QWORD, void *))(v2 + 16));
}

void CKModifyRecordsOperation.modifyRecordsResultBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordsOperation.modifyRecordsResultBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66EBDC(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordsOperation.modifyRecordsResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void sub_18A66EC1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  sub_18A5F379C();
}

void sub_18A66ECA4(uint64_t a1, void (*a2)(_QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  sub_18A5F379C();
}

void sub_18A66ECD0(uint64_t a1, char a2, void (*a3)(uint64_t *))
{
  uint64_t v3;
  char v4;

  v3 = a1;
  v4 = a2 & 1;
  a3(&v3);
  sub_18A5F45D8();
}

void __swiftcall CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(CKModifyRecordZonesOperation *__return_ptr retstr, Swift::OpaquePointer_optional recordZonesToSave, Swift::OpaquePointer_optional recordZoneIDsToDelete)
{
  uint64_t v3;
  void *rawValue;
  id v5;
  void *v6;
  id v7;
  NSArray v8;
  id v9;
  NSArray v10;

  v3 = *(_QWORD *)&recordZonesToSave.is_nil;
  rawValue = recordZonesToSave.value._rawValue;
  v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v6 = v5;
  if (rawValue)
  {
    sub_18A5F50F0(0, &qword_1EDF6A910);
    v7 = v6;
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v5;
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setRecordZonesToSave_, v8.super.isa);

  if (v3)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.isa = 0;
  }
  objc_msgSend(v6, sel_setRecordZoneIDsToDelete_, v10.super.isa);

}

void CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F3F90();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A6150D0, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A5F3964();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setPerRecordZoneSaveBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerRecordZoneSaveBlock_);
  }
}

void CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F3F90();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A6678D0, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A5F3964();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setPerRecordZoneDeleteBlock_);
    sub_18A5F3838();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setPerRecordZoneDeleteBlock_);
  }
}

void CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_18A5F4578();
    v3 = sub_18A5F3F90();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    sub_18A5F3938((uint64_t)sub_18A66F63C, MEMORY[0x1E0C809B0], 1107296256, v5, v6);
    sub_18A60A614((uint64_t)v2);
    swift_retain();
    v4 = sub_18A5F438C();
    sub_18A5F37C8(v4, sel_setModifyRecordZonesCompletionBlock_);
    sub_18A5F3838();
    objc_msgSend(v2, sel_setCanDropItemResultsEarly_, 1);
    sub_18A5F3AA8();
    sub_18A5F3AA8();
    sub_18A5F3DE4();
  }
  else
  {
    sub_18A5F41A0(v2, sel_setModifyRecordZonesCompletionBlock_);
  }
}

void CKModifyRecordZonesOperation.perRecordZoneSaveBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perRecordZoneSaveBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A614F28;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66F0A4(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKModifyRecordZonesOperation.perRecordZoneSaveBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A66EC18;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A66F108(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A6679A4;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter((uint64_t)v4);
}

uint64_t sub_18A66F188()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A66F1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A66F1BC()
{
  return swift_release();
}

void CKModifyRecordZonesOperation.perRecordZoneSaveBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordZonesOperation.perRecordZoneSaveBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66F1F0(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_perRecordZoneDeleteBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A60C230;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66F284(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A66EC18;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void sub_18A66F2E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A6679E8;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter((uint64_t)v4);
}

void CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66F394(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A615B60, sub_18A615B5C);
}

void CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_modifyRecordZonesCompletionBlock);
  if (v1)
    *(_QWORD *)(sub_18A5F37B4() + 16) = v1;
  sub_18A5F379C();
}

void sub_18A66F40C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *, _QWORD *);

  CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A64BCD8;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = v2;
}

void sub_18A66F470(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
  }
  sub_18A60A614(v1);
  CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter();
}

void CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A5F4578();
  if (v0)
  {
    sub_18A5F3938((uint64_t)sub_18A66F63C, MEMORY[0x1E0C809B0], 1107296256, v1, v2);
    sub_18A5F3964();
    v0 = sub_18A5F438C();
  }
  sub_18A5F37C8(v0, sel_setModifyRecordZonesCompletionBlock_);
  sub_18A5F3AA8();
  sub_18A5F3838();
  sub_18A5F3DE4();
}

void sub_18A66F570(objc_class *a1, Class a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v8;
  id v9;

  isa = a1;
  if (a1)
  {
    sub_18A5F50F0(0, &qword_1EDF6A910);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    a2 = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a3)
    v8 = _convertErrorToNSError(_:)();
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, isa, a2);

}

uint64_t sub_18A66F63C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void *);
  id v8;

  v6 = a2;
  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18A5F50F0(0, &qword_1EDF6A910);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66F730(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_modifyRecordZonesCompletionBlock);
  if (v1)
  {
    v2 = v1;
    v3 = sub_18A5F37B4();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = sub_18A5F3F90();
    *(_QWORD *)(v4 + 16) = sub_18A66FB14;
    *(_QWORD *)(v4 + 24) = v3;
  }
  sub_18A5F379C();
}

void sub_18A66F7C4(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.getter();
  if (v2)
  {
    v4 = v2;
    v5 = v3;
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v5;
    v6 = sub_18A657008;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (void (*)(uint64_t))v2;
}

void sub_18A66F828(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, char);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_18A66FA8C;
  }
  else
  {
    v4 = 0;
  }
  sub_18A60A614(v1);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter((uint64_t)v4);
}

void sub_18A66F8A8(void *a1, char a2, void (*a3)(_QWORD, _QWORD, void *))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  if (qword_1ECD96788 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1ECD96770);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    MEMORY[0x18D76E86C](v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    a3(0, 0, a1);
    sub_18A60A664(a1, 1);
  }
  else
  {
    a3(MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0);
  }
}

uint64_t sub_18A66F9EC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_18A66FA10(objc_class *a1, objc_class *a2, uint64_t a3)
{
  uint64_t v3;

  sub_18A66F570(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_18A66FA18(void *a1, char a2)
{
  uint64_t v2;

  sub_18A66F8A8(a1, a2 & 1, *(void (**)(_QWORD, _QWORD, void *))(v2 + 16));
}

void CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F3980(a1);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.getter();
  *v1 = v2;
  v1[1] = v3;
  sub_18A5F379C();
}

uint64_t sub_18A66FA50(_QWORD *a1, char a2)
{
  return sub_18A60AE4C(a1, a2, (uint64_t)CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter, (void (*)(_QWORD, uint64_t))sub_18A60A614, (uint64_t (*)(uint64_t, uint64_t))sub_18A60A578);
}

void sub_18A66FA8C(uint64_t a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *);
  uint64_t v4;
  char v5;

  v3 = *(void (**)(uint64_t *))(v2 + 16);
  v4 = a1;
  v5 = a2 & 1;
  v3(&v4);
  sub_18A5F45D8();
}

uint64_t CKSubscription.subscriptionID.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_subscriptionID);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_18A66FB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  id v14;
  _QWORD *v15;

  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a5;
  v6 = *(_QWORD *)(a4 + 8);
  v7 = *(_BYTE *)(a4 + 16);
  *(_BYTE *)(v5 + 73) = v7;
  v9 = *(void **)(a4 + 24);
  v8 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(v5 + 112) = v6;
  *(_QWORD *)(v5 + 120) = v9;
  v10 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(v5 + 128) = v8;
  *(_QWORD *)(v5 + 136) = v10;
  v11 = *(_BYTE *)(a4 + 48);
  *(_BYTE *)(v5 + 74) = v11;
  v12 = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(v5 + 144) = v12;
  v13 = *(_BYTE *)(a4 + 64);
  *(_BYTE *)(v5 + 75) = v13;
  *(_QWORD *)(v5 + 16) = v6;
  *(_BYTE *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 40) = v8;
  *(_QWORD *)(v5 + 48) = v10;
  *(_BYTE *)(v5 + 56) = v11;
  *(_QWORD *)(v5 + 64) = v12;
  *(_BYTE *)(v5 + 72) = v13;
  swift_bridgeObjectRetain();
  v14 = v9;
  sub_18A5F3FAC();
  sub_18A5F40AC();
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 152) = v15;
  *v15 = v5;
  v15[1] = sub_18A66FC30;
  return CKSyncEngine.objcEngine.getter();
}

uint64_t sub_18A66FC30(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc();
  return sub_18A5F3AE0();
}

uint64_t sub_18A66FC84()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  __n128 *v17;
  __n128 v18;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  __n128 v34;
  void *v35;
  void *v36;
  unint64_t v37;
  char v38;

  if (!*(_QWORD *)(v0 + 160))
  {
    v12 = *(_BYTE *)(v0 + 75);
    v13 = *(_BYTE *)(v0 + 74);
    v15 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 144);
    v16 = *(_BYTE *)(v0 + 73);
    v17 = *(__n128 **)(v0 + 96);
    v18 = *(__n128 *)(v0 + 120);
    v17->n128_u64[0] = *(_QWORD *)(v0 + 112);
    v17->n128_u8[8] = v16;
    v17[1] = v18;
    v17[2].n128_u64[0] = v15;
    v17[2].n128_u8[8] = v13;
    v17[3].n128_u64[0] = v14;
    v17[3].n128_u8[8] = v12;
    return (*(uint64_t (**)(__n128))(v0 + 8))(v18);
  }
  CKSyncEngine.actor.getter();
  swift_retain();
  swift_release();
  CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  v4 = v3;
  swift_release();
  v5 = sub_18A61FB60(v4, (unint64_t *)(v0 + 16));
  *(_QWORD *)(v0 + 168) = v5;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0DEE9D8];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v0 + 176) = v7;
  if (!v7)
  {
    swift_bridgeObjectRelease();
    if (v6 >> 62)
    {
      sub_18A5F3FAC();
      v20 = (void *)_CocoaArrayWrapper.endIndex.getter();
      sub_18A5F37E0();
      if (v20)
        goto LABEL_10;
    }
    else
    {
      v20 = *(void **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v20)
      {
LABEL_10:
        v21 = *(_QWORD *)(v0 + 16);
        if (!*(_BYTE *)(v0 + 24))
        {
          sub_18A5F40AC();
          v36 = (void *)sub_18A6682F4(MEMORY[0x1E0DEE9D8]);
          v28 = sub_18A6682F4(v21);
          sub_18A6759EC(v28);
          sub_18A623E30();
          sub_18A670A64();
          sub_18A5F3944();
          *(_QWORD *)(v0 + 16) = v6;
          *(_BYTE *)(v0 + 24) = 0;
          sub_18A5F47F4();
          v29 = v36;
          sub_18A5F3A4C();
          sub_18A5F40AC();
          sub_18A623B14();
          sub_18A623C48();
          if (!v30 || (sub_18A5F46E0() & 1) != 0)
          {
            sub_18A5F3920();
            v37 = v6;
            v38 = 0;
            goto LABEL_20;
          }
LABEL_25:
          v2 = *(void **)(v0 + 160);
          sub_18A5F394C();
          goto LABEL_26;
        }
        if (*(_BYTE *)(v0 + 24) == 1)
        {
          v22 = sub_18A5F40AC();
          v35 = (void *)sub_18A6682F4(v22);
          sub_18A6217CC();
          sub_18A5F37E0();
          sub_18A623E30();
          sub_18A670A64();
          sub_18A5F3944();
          *(_QWORD *)(v0 + 16) = v6;
          *(_BYTE *)(v0 + 24) = 1;
          sub_18A5F47F4();
          v23 = v35;
          sub_18A5F3A4C();
          sub_18A5F40AC();
          sub_18A623B14();
          sub_18A623C48();
          if (!v24 || (sub_18A5F46E0() & 1) != 0)
          {
            sub_18A5F3920();
            v37 = v6;
            v38 = 1;
LABEL_20:
            sub_18A5F3FAC();
            sub_18A623A04((uint64_t)&v37);
            sub_18A623984();
            swift_release();
LABEL_24:
            sub_18A623B40();
LABEL_26:
            sub_18A5F37E0();

            sub_18A5F3FE4();
            sub_18A5F3944();

LABEL_32:
            v34 = sub_18A5F3F38();
            return (*(uint64_t (**)(__n128))(v0 + 8))(v34);
          }
          goto LABEL_25;
        }
        *(_QWORD *)(v0 + 16) = v6;
        *(_BYTE *)(v0 + 24) = 0;
        sub_18A5F47F4();
        v31 = v20;
        sub_18A5F3A4C();
        sub_18A5F40AC();
        sub_18A623B14();
        sub_18A623C48();
        if (!v32 || (sub_18A5F46E0() & 1) != 0)
        {
          sub_18A5F3920();
          v37 = v6;
          v38 = 0;
          sub_18A5F3FAC();
          sub_18A623A04((uint64_t)&v37);
          sub_18A623984();
          sub_18A5F37E0();
          goto LABEL_24;
        }
        v33 = *(void **)(v0 + 160);
        sub_18A5F394C();
        swift_bridgeObjectRelease();

        sub_18A5F3FE4();
LABEL_31:
        swift_bridgeObjectRelease();

        goto LABEL_32;
      }
    }
    v33 = *(void **)(v0 + 160);
    goto LABEL_31;
  }
  v8 = OBJC_IVAR___CKSyncEngine_delegateAdapter;
  v9 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 184) = OBJC_IVAR___CKSyncEngine_delegateAdapter;
  *(_QWORD *)(v0 + 192) = v9;
  v10 = *(_QWORD *)(v0 + 168);
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x18D76CEB0](0);
    v8 = *(_QWORD *)(v0 + 184);
  }
  else
  {
    v11 = *(id *)(v10 + 32);
  }
  *(_QWORD *)(v0 + 200) = v11;
  *(_QWORD *)(v0 + 208) = 1;
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 160) + v8);
  swift_retain();
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v25;
  v26 = sub_18A670AA4(v25, (uint64_t)sub_18A67004C);
  return sub_18A61F380(v26, v27);
}

uint64_t sub_18A67004C(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 76) = a1;
  swift_task_dealloc();
  swift_release();
  return sub_18A5F3AE0();
}

void sub_18A6700A8()
{
  uint64_t v0;
  void *isUniquelyReferenced_nonNull_native;
  void *v2;
  id v3;
  void *v4;
  char AssetContents;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v46;
  void *v47;
  unint64_t v48;
  char v49;

  if ((*(_BYTE *)(v0 + 76) & 1) == 0)
  {
    MEMORY[0x18D76C9DC](*(id *)(v0 + 200));
    if (*(_QWORD *)((*(_QWORD *)(v0 + 80) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v3 = objc_msgSend(*(id *)(v0 + 160), sel_dataSource);
  v4 = *(void **)(v0 + 200);
  if (!v3)
  {

    goto LABEL_9;
  }
  AssetContents = CKSyncEngineDataSourceShouldFetchAssetContents(v3, *(void **)(v0 + 160), v4);
  v6 = *(void **)(v0 + 200);
  if ((AssetContents & 1) != 0)
  {

    swift_unknownObjectRelease();
LABEL_9:
    v7 = *(_QWORD **)(v0 + 192);
LABEL_20:
    v27 = *(_QWORD *)(v0 + 208);
    if (v27 == *(_QWORD *)(v0 + 176))
    {
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v0 + 80);
      if (v28 >> 62)
      {
        sub_18A5F3FAC();
        v29 = (void *)_CocoaArrayWrapper.endIndex.getter();
        sub_18A5F37E0();
        if (v29)
          goto LABEL_23;
      }
      else
      {
        v29 = *(void **)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v29)
        {
LABEL_23:
          v30 = *(_QWORD *)(v0 + 16);
          if (!*(_BYTE *)(v0 + 24))
          {
            sub_18A5F40AC();
            v47 = (void *)sub_18A6682F4(v28);
            v39 = sub_18A6682F4(v30);
            sub_18A6759EC(v39);
            sub_18A623E30();
            sub_18A670A64();
            sub_18A5F3944();
            *(_QWORD *)(v0 + 16) = v28;
            *(_BYTE *)(v0 + 24) = 0;
            sub_18A5F47F4();
            v40 = v47;
            sub_18A5F3A4C();
            sub_18A5F40AC();
            sub_18A623B14();
            sub_18A623C48();
            if (!v41 || (sub_18A5F46E0() & 1) != 0)
            {
              sub_18A5F3920();
              v48 = v28;
              v49 = 0;
              goto LABEL_36;
            }
LABEL_41:
            v2 = *(void **)(v0 + 160);
            sub_18A5F394C();
            goto LABEL_42;
          }
          if (*(_BYTE *)(v0 + 24) == 1)
          {
            v31 = sub_18A5F40AC();
            v46 = (void *)sub_18A6682F4(v31);
            sub_18A6217CC();
            sub_18A5F37E0();
            sub_18A623E30();
            sub_18A670A64();
            sub_18A5F3944();
            *(_QWORD *)(v0 + 16) = v28;
            *(_BYTE *)(v0 + 24) = 1;
            sub_18A5F47F4();
            v32 = v46;
            sub_18A5F3A4C();
            sub_18A5F40AC();
            sub_18A623B14();
            sub_18A623C48();
            if (!v33 || (sub_18A5F46E0() & 1) != 0)
            {
              sub_18A5F3920();
              v48 = v28;
              v49 = 1;
LABEL_36:
              sub_18A5F3FAC();
              sub_18A623A04((uint64_t)&v48);
              sub_18A623984();
              swift_release();
LABEL_40:
              sub_18A623B40();
LABEL_42:
              sub_18A5F37E0();

              sub_18A5F3FE4();
              sub_18A5F3944();

              goto LABEL_47;
            }
            goto LABEL_41;
          }
          *(_QWORD *)(v0 + 16) = v28;
          *(_BYTE *)(v0 + 24) = 0;
          sub_18A5F47F4();
          v42 = v29;
          sub_18A5F3A4C();
          sub_18A5F40AC();
          sub_18A623B14();
          sub_18A623C48();
          if (!v43 || (sub_18A5F46E0() & 1) != 0)
          {
            sub_18A5F3920();
            v48 = v28;
            v49 = 0;
            sub_18A5F3FAC();
            sub_18A623A04((uint64_t)&v48);
            sub_18A623984();
            sub_18A5F37E0();
            goto LABEL_40;
          }
          v44 = *(void **)(v0 + 160);
          sub_18A5F394C();
          sub_18A5F37E0();

          sub_18A5F3FE4();
LABEL_46:
          swift_bridgeObjectRelease();

LABEL_47:
          sub_18A5F3F38();
          sub_18A663918();
          __asm { BR              X0 }
        }
      }
      v44 = *(void **)(v0 + 160);
      goto LABEL_46;
    }
    *(_QWORD *)(v0 + 192) = v7;
    v34 = *(_QWORD *)(v0 + 168);
    if ((v34 & 0xC000000000000001) != 0)
      v35 = (id)MEMORY[0x18D76CEB0](v27);
    else
      v35 = *(id *)(v34 + 8 * v27 + 32);
    *(_QWORD *)(v0 + 200) = v35;
    *(_QWORD *)(v0 + 208) = v27 + 1;
    if (!__OFADD__(v27, 1))
    {
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 160) + *(_QWORD *)(v0 + 184));
      swift_retain();
      v36 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v36;
      sub_18A670AA4(v36, (uint64_t)sub_18A67004C);
      sub_18A663918();
      sub_18A61F380(v37, v38);
      return;
    }
    __break(1u);
    goto LABEL_49;
  }
  v8 = *(_QWORD *)(v0 + 192);
  v9 = v6;
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 48) = 0x8000000000000000;
  sub_18A62E990();
  v12 = *(_QWORD *)(v8 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF6B2B0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v14))
  {
    isUniquelyReferenced_nonNull_native = (void *)sub_18A60C4D4();
    v7 = *(_QWORD **)(v0 + 88);
    sub_18A62E990();
    if ((v16 & 1) != (v18 & 1))
    {
      sub_18A663918();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      return;
    }
    v15 = v17;
  }
  else
  {
    v7 = *(_QWORD **)(v0 + 88);
  }
  *(_QWORD *)(v0 + 48) = v7;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_19:
    v26 = *(void **)(v0 + 200);
    *(_BYTE *)(v7[7] + 16 * v15) = 0;
    swift_unknownObjectRelease();

    goto LABEL_20;
  }
  v19 = *(_QWORD *)(v0 + 200);
  v7[(v15 >> 6) + 8] |= 1 << v15;
  *(_QWORD *)(v7[6] + 8 * v15) = v19;
  v20 = v7[7] + 16 * v15;
  *(_BYTE *)v20 = 1;
  *(_QWORD *)(v20 + 8) = 0;
  v21 = v7[2];
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    v24 = *(void **)(v0 + 200);
    v7[2] = v23;
    v25 = v24;
    goto LABEL_19;
  }
LABEL_50:
  __break(1u);
}

uint64_t sub_18A67055C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18A62384C;
  return CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)(a1, a2, a3);
}

uint64_t CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(v3 + 16) = *(_BYTE *)a2;
  *(_QWORD *)(v3 + 24) = v6;
  *(_BYTE *)(v3 + 32) = v7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v3 + 56) = v8;
  *(_BYTE *)(v3 + 64) = v9;
  *(_QWORD *)(v3 + 72) = v10;
  *(_BYTE *)(v3 + 80) = v11;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 88) = v12;
  *v12 = v3;
  v12[1] = sub_18A67066C;
  return sub_18A66FB6C(a1, v13, v14, v3 + 16, a3);
}

uint64_t sub_18A67066C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t dispatch thunk of CKSyncEngineDelegate.handleEvent(_:syncEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A65EFA8();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A670A70(v1, (uint64_t)sub_18A61F768);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.nextRecordZoneChangeBatch(_:syncEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_18A64A1F4();
  sub_18A670A4C();
  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A62384C;
  sub_18A670A34();
  return sub_18A5F447C(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_18A64A1F4();
  sub_18A670A4C();
  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A62384C;
  sub_18A670A34();
  return sub_18A5F447C(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A65EFA8();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A670A70(v1, (uint64_t)sub_18A670A30);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6707C4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A67083C;
  return CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)();
}

uint64_t sub_18A67083C(uint64_t a1)
{
  uint64_t v1;

  sub_18A5F40D8();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t dispatch thunk of CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_18A64A1F4();
  sub_18A670A4C();
  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A670A30;
  sub_18A670A34();
  return sub_18A5F447C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A6708B8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A67083C;
  return CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)();
}

uint64_t dispatch thunk of CKSyncEngineDelegatePrivate.relatedBundleIDs(zoneIDs:recordIDs:syncEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_18A64A1F4();
  sub_18A670A4C();
  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A670A30;
  sub_18A670A34();
  return sub_18A5F447C(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of CKSyncEngineDelegateInternal.didHandleSchedulerActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_18A670988()
{
  return swift_initClassMetadata2();
}

uint64_t sub_18A6709E0()
{
  uint64_t v0;

  sub_18A6235D0(v0 + 112);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_18A670A0C()
{
  sub_18A6709E0();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for DelegateContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18A61A548(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelegateContainer);
}

uint64_t sub_18A670A64()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A670A70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_18A670A90()
{
  return swift_task_alloc();
}

uint64_t sub_18A670AA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_18A670ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_18A623B70();
  v7 = sub_18A5F105C(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_18A6A6C74(v7, (uint64_t *)&unk_1EDF6A688);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    sub_18A6A7A1C();
    dispatch thunk of Actor.unownedExecutor.getter();
    sub_18A6A7A14();
  }
  v8 = sub_18A5F37B4();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  swift_task_create();
  sub_18A6A6FB8();
}

uint64_t sub_18A670BD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4;
      v4 += 2;
      v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_18A670C84(unint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void (*v17)(BOOL, unint64_t, uint64_t);
  unint64_t v18;
  uint64_t v20;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_14;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v20 = MEMORY[0x1E0DEE9D8];
      result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a4)(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0)
        break;
      v17 = (void (*)(BOOL, unint64_t, uint64_t))a4;
      v8 = 0;
      v9 = v20;
      v18 = v5 & 0xC000000000000001;
      v10 = v5;
      while (v6 != v8)
      {
        if (v18)
        {
          v11 = sub_18A6A7988();
          v12 = (id)MEMORY[0x18D76CEB0](v11);
        }
        else
        {
          v12 = *(id *)(v5 + 8 * v8 + 32);
        }
        v13 = v12;
        a4 = *(_QWORD *)(v20 + 16);
        v14 = *(_QWORD *)(v20 + 24);
        v15 = a2;
        if (a4 >= v14 >> 1)
          v17(v14 > 1, a4 + 1, 1);
        ++v8;
        *(_QWORD *)(v20 + 16) = a4 + 1;
        v16 = v20 + 16 * a4;
        *(_QWORD *)(v16 + 32) = v13;
        *(_QWORD *)(v16 + 40) = v15;
        v5 = v10;
        if (v6 == v8)
        {

          return v9;
        }
      }
      __break(1u);
LABEL_14:
      sub_18A6239CC();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:

    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void static SyncEngine.unregisterActivities(database:activityNameSuffix:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;

  v0 = sub_18A6A78F0();
  v2 = v1;
  sub_18A6A81BC();
  sub_18A6A78F0();
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedScheduler);
  v4 = (void *)MEMORY[0x18D76C7CC](v0, v2);
  sub_18A5F3FE4();
  objc_msgSend(v3, sel_unregisterActivityIdentifier_, v4);

  v6 = sub_18A5F3AD8(v5, sel_sharedScheduler);
  v7 = sub_18A6406BC();
  v8 = (id)MEMORY[0x18D76C7CC](v7);
  sub_18A5F37E0();
  objc_msgSend(v6, sel_unregisterActivityIdentifier_, v8);

}

uint64_t sub_18A670F0C(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31[2];
  unint64_t v32;
  char v33;
  uint64_t v34;

  v3 = a1;
  v34 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_53;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v25 = v3;
    v5 = 0;
    v29 = v3 & 0xFFFFFFFFFFFFFF8;
    v30 = v3 & 0xC000000000000001;
    v27 = a2;
    v28 = v3 + 32;
    v26 = i;
    while (1)
    {
      if (v30)
      {
        v6 = (id)MEMORY[0x18D76CEB0](v5, v25);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v29 + 16))
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        v6 = *(id *)(v28 + 8 * v5);
      }
      v7 = v6;
      if (__OFADD__(v5++, 1))
        goto LABEL_50;
      sub_18A6A44BC(a2, (uint64_t)v31);
      sub_18A6A44BC(v31, (uint64_t)&v32);
      if (!v33)
        break;
      if (v33 != 1)
        goto LABEL_39;
      v9 = v32;
      if (v32 >> 62)
      {
        sub_18A6A44F8((uint64_t)v31);
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10)
        {
LABEL_44:
          sub_18A6A4520((uint64_t)v31);
          sub_18A6A4520((uint64_t)v31);

          goto LABEL_40;
        }
      }
      else
      {
        v10 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        sub_18A6A44F8((uint64_t)v31);
        swift_bridgeObjectRetain();
        if (!v10)
          goto LABEL_44;
      }
      if ((v9 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x18D76CEB0](0, v9);
      else
        v11 = *(id *)(v9 + 32);
      v12 = v11;
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      v3 = static NSObject.== infix(_:_:)();

      if ((v3 & 1) != 0)
        goto LABEL_38;
      if (v10 != 1)
      {
        v13 = 5;
        do
        {
          v14 = (v9 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x18D76CEB0](v13 - 4, v9)
              : *(id *)(v9 + 8 * v13);
          v3 = (uint64_t)v14;
          a2 = (uint64_t *)(v13 - 3);
          if (__OFADD__(v13 - 4, 1))
            goto LABEL_51;
          v15 = static NSObject.== infix(_:_:)();

          if ((v15 & 1) != 0)
            goto LABEL_38;
          ++v13;
        }
        while (a2 != (uint64_t *)v10);
      }
LABEL_29:
      sub_18A6A4520((uint64_t)v31);
      sub_18A6A4520((uint64_t)v31);

      i = v26;
      a2 = v27;
LABEL_40:
      if (v5 == i)
      {
        v23 = v34;
        goto LABEL_55;
      }
    }
    v16 = v32;
    if (v32 >> 62)
    {
      sub_18A6A44F8((uint64_t)v31);
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      if (!v17)
        goto LABEL_38;
    }
    else
    {
      v17 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_18A6A44F8((uint64_t)v31);
      swift_bridgeObjectRetain();
      if (!v17)
        goto LABEL_38;
    }
    if ((v16 & 0xC000000000000001) != 0)
      v18 = (id)MEMORY[0x18D76CEB0](0, v16);
    else
      v18 = *(id *)(v16 + 32);
    v19 = v18;
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) != 0)
      goto LABEL_29;
    if (v17 == 1)
    {
LABEL_38:
      sub_18A6A4520((uint64_t)v31);
      sub_18A6A4520((uint64_t)v31);
      i = v26;
      a2 = v27;
LABEL_39:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_40;
    }
    v20 = 5;
    while (1)
    {
      v21 = (v16 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x18D76CEB0](v20 - 4, v16)
          : *(id *)(v16 + 8 * v20);
      v3 = (uint64_t)v21;
      a2 = (uint64_t *)(v20 - 3);
      if (__OFADD__(v20 - 4, 1))
        break;
      v22 = static NSObject.== infix(_:_:)();

      if ((v22 & 1) != 0)
        goto LABEL_29;
      ++v20;
      if (a2 == (uint64_t *)v17)
        goto LABEL_38;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    ;
  }
  v23 = MEMORY[0x1E0DEE9D8];
LABEL_55:
  swift_bridgeObjectRelease();
  sub_18A61A4FC((uint64_t)a2);
  return v23;
}

uint64_t sub_18A6712F8(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = a1;
  v24 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_33;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v18 = v3;
      v5 = 0;
      v21 = v3 & 0xFFFFFFFFFFFFFF8;
      v22 = v3 & 0xC000000000000001;
      v19 = v4;
      v23 = a2 & 0xC000000000000001;
      v20 = v3 + 32;
      while (1)
      {
        if (v22)
        {
          v6 = (id)MEMORY[0x18D76CEB0](v5, v18);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v21 + 16))
            goto LABEL_31;
          v6 = *(id *)(v20 + 8 * v5);
        }
        v7 = v6;
        if (__OFADD__(v5++, 1))
          goto LABEL_32;
        if (a2 >> 62)
        {
          swift_bridgeObjectRetain();
          v9 = _CocoaArrayWrapper.endIndex.getter();
          if (!v9)
          {
LABEL_26:

            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
        }
        else
        {
          v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v9)
            goto LABEL_26;
        }
        v10 = v23 ? (id)MEMORY[0x18D76CEB0](0, a2) : *(id *)(a2 + 32);
        v3 = (uint64_t)v10;
        sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
        v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) == 0)
          break;
LABEL_13:
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_23:
        v4 = v19;
LABEL_27:
        if (v5 == v4)
        {
          v16 = v24;
          goto LABEL_35;
        }
      }
      if (v9 == 1)
        break;
      v12 = 5;
      while (1)
      {
        v3 = v12 - 4;
        v13 = v23 ? (id)MEMORY[0x18D76CEB0](v12 - 4, a2) : *(id *)(a2 + 8 * v12);
        v14 = v13;
        v15 = v12 - 3;
        if (__OFADD__(v3, 1))
          break;
        v3 = static NSObject.== infix(_:_:)();

        if ((v3 & 1) != 0)
          goto LABEL_13;
        ++v12;
        if (v15 == v9)
          goto LABEL_22;
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        goto LABEL_34;
    }
LABEL_22:

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_34:
  v16 = MEMORY[0x1E0DEE9D8];
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_18A67157C(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  id v11;
  char v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1;
  v28 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v5 = (uint64_t *)(a2 + 208);
  swift_beginAccess();
  if (v4)
  {
    v6 = 0;
    v22 = v3;
    v23 = v3 & 0xC000000000000001;
    v26 = v3 + 32;
    v27 = v3 & 0xFFFFFFFFFFFFFF8;
    v3 &= 0xC000000000000001;
    v24 = (uint64_t *)(a2 + 208);
    v25 = v4;
    while (1)
    {
      if (v3)
      {
        v7 = (id)MEMORY[0x18D76CEB0](v6, v22);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v27 + 16))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          v4 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_3;
        }
        v7 = *(id *)(v26 + 8 * v6);
      }
      v8 = v7;
      if (__OFADD__(v6++, 1))
        goto LABEL_27;
      v10 = *v5;
      if ((*v5 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v11 = v8;
        v12 = __CocoaSet.contains(_:)();
        swift_bridgeObjectRelease();

        if ((v12 & 1) == 0)
          goto LABEL_20;

      }
      else
      {
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_20;
        v13 = *(_QWORD *)(v10 + 40);
        swift_bridgeObjectRetain();
        v14 = NSObject._rawHashValue(seed:)(v13);
        v15 = -1 << *(_BYTE *)(v10 + 32);
        v16 = v14 & ~v15;
        if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          goto LABEL_19;
        sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v16);
        a2 = static NSObject.== infix(_:_:)();

        if ((a2 & 1) == 0)
        {
          v18 = ~v15;
          while (1)
          {
            v16 = (v16 + 1) & v18;
            if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
              break;
            a2 = (uint64_t)*(id *)(*(_QWORD *)(v10 + 48) + 8 * v16);
            v19 = static NSObject.== infix(_:_:)();

            if ((v19 & 1) != 0)
              goto LABEL_18;
          }
LABEL_19:
          swift_bridgeObjectRelease();
          v5 = v24;
          v4 = v25;
          v3 = v23;
LABEL_20:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          a2 = *(_QWORD *)(v28 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_21;
        }
LABEL_18:

        swift_bridgeObjectRelease();
        v5 = v24;
        v4 = v25;
        v3 = v23;
      }
LABEL_21:
      if (v6 == v4)
      {
        v20 = v28;
        goto LABEL_25;
      }
    }
  }
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_25:
  swift_release();
  swift_bridgeObjectRelease();
  return v20;
}

void sub_18A671824(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  void *v8;
  int v9;
  id v10;
  void *v11;
  CKRecordZoneID *v12;
  CKRecordZoneID *v13;
  Swift::Bool v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 40;
    v5 = MEMORY[0x1E0DEE9D8];
    v17 = a1 + 40;
    do
    {
      v18 = v5;
      v6 = (unsigned __int8 *)(v4 + 16 * v3);
      v7 = v3;
      while (1)
      {
        if (v7 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v8 = (void *)*((_QWORD *)v6 - 1);
        v9 = *v6;
        v10 = v8;
        v11 = v10;
        v12 = (CKRecordZoneID *)(v9 == 1
                               ? v10
                               : objc_msgSend(v10, sel_zoneID));
        v13 = v12;
        v14 = CKSyncEngine.SendChangesOptions.Scope.contains(_:)(v12);

        if (v14)
          break;
        ++v7;

        v6 += 16;
        if (v2 == v7)
          goto LABEL_16;
      }
      v5 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18A6100D0();
        v5 = v18;
      }
      v15 = *(_QWORD *)(v5 + 16);
      if (v15 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_18A6100D0();
        v5 = v18;
      }
      v3 = v7 + 1;
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v8;
      *(_BYTE *)(v16 + 40) = v9;
      v4 = v17;
    }
    while (v2 - 1 != v7);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_18A6719DC(unint64_t a1, uint64_t a2, char a3)
{
  id v5;
  id v6;
  uint64_t v7;

  if (a1 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x18D76CEB0](0, a1);
      }
      else
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          __break(1u);
          JUMPOUT(0x18A671EF4);
        }
        v5 = *(id *)(a1 + 32);
      }
      v6 = objc_msgSend(v5, sel_recordID);
      __asm { BR              X8 }
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v7 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_18A671F68(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v6 = a1;
  v19 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = v6 & 0xC000000000000001;
      v16 = v6;
      v17 = v6 & 0xFFFFFFFFFFFFFF8;
      v15 = v7;
      while (v9)
      {
        v10 = (id)MEMORY[0x18D76CEB0](v8, v6);
LABEL_7:
        v11 = v10;
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v18 = v10;
        sub_18A680478((uint64_t)&v18, a2, a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          return a3;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v7 = v15;
          v6 = v16;
        }
        else
        {

        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(_QWORD *)(v17 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_19;
    }
    v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_19:
  a3 = MEMORY[0x1E0DEE9D8];
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a3;
}

void sub_18A67211C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_18A6A80DC((uint64_t)a2);
    sub_18A5F379C();
  }
  else
  {
    j__swift_continuation_throwingResume();
  }
}

uint64_t sub_18A672154(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  sub_18A5F101C(&qword_1EDF6A9D8);
  swift_allocError();
  *v3 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_18A6721A8(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

void sub_18A6721B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  sub_18A60FCFC((uint64_t)&v2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), (uint64_t *)&unk_1EDF6C7E8);
  swift_continuation_throwingResume();
  sub_18A5F45D8();
}

uint64_t sub_18A6721F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 40);
  *v3 = a2;
  v3[1] = a3;
  return swift_continuation_throwingResume();
}

void sub_18A672208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18A672214(a1, a2, a3);
}

void sub_18A672214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_18A623B70();
  v6 = sub_18A5F105C(a1, 1, v5);
  if ((_DWORD)v6 == 1)
  {
    sub_18A6A6C74(v6, (uint64_t *)&unk_1EDF6A688);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    sub_18A6A7A1C();
    sub_18A6A797C();
    dispatch thunk of Actor.unownedExecutor.getter();
    sub_18A6A7A14();
  }
  swift_task_create();
  sub_18A6A6FB8();
}

uint64_t sub_18A672310(uint64_t a1, unint64_t a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t *a5, uint64_t isUniquelyReferenced_nonNull_native, unint64_t a7)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  char v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  id v43;
  uint64_t result;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;

  v51 = a5;
  v52 = a3;
  v53 = a4;
  v9 = a2;
  if (a2 >> 62)
  {
LABEL_21:
    sub_18A6239CC();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();

    return a1;
  }
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_18A6239CC();
  if (!v11)
    goto LABEL_17;
LABEL_3:
  v46 = (unint64_t *)isUniquelyReferenced_nonNull_native;
  v47 = a7;
  v49 = v9;
  v50 = v9 & 0xC000000000000001;
  v12 = 4;
  while (1)
  {
    a7 = v12 - 4;
    if (v50)
    {
      v13 = sub_18A6A726C();
      v14 = (id)MEMORY[0x18D76CEB0](v13);
    }
    else
    {
      v14 = *(id *)(v9 + 8 * v12);
    }
    if (__OFADD__(a7, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v54 = v12 - 3;
    v9 = (unint64_t)v14;
    v15 = v52;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_18A6A82C8(isUniquelyReferenced_nonNull_native, v16, v17, v18, v19, v20, v21, v22, v45, (uint64_t)v46, v47, v48, v49, v50, (uint64_t)v51, (uint64_t)v52, v53);
    sub_18A6A77D8();
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      goto LABEL_19;
    a7 = v23;
    v28 = v24;
    sub_18A5F101C(v51);
    v29 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v27);
    if (v29)
      break;
LABEL_12:
    if ((v28 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = *(_QWORD *)(a1 + 56);

      *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * a7) = v15;
    }
    else
    {
      sub_18A6A7F6C(a1 + 8 * (a7 >> 6));
      *(_QWORD *)(v39 + 8 * a7) = v9;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * a7) = v15;
      v40 = *(_QWORD *)(a1 + 16);
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_20;
      *(_QWORD *)(a1 + 16) = v42;
      v43 = (id)v9;
    }

    swift_bridgeObjectRelease();
    ++v12;
    v9 = v49;
    if (v54 == v11)
      goto LABEL_17;
  }
  v37 = sub_18A6A82C8(v29, v30, v31, v32, v33, v34, v35, v36, v45, (uint64_t)v46, v47, v48, v49, v50, (uint64_t)v51, (uint64_t)v52, v53);
  if ((v28 & 1) == (v38 & 1))
  {
    a7 = v37;
    goto LABEL_12;
  }
  sub_18A5F50F0(0, v46);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_18A672508(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v2 = *(void **)(a2 + 32);
  v3 = v2;
  return v2;
}

uint64_t sub_18A67253C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;

  result = sub_18A6A3580(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  else
    return sub_18A6A3504(result, v3, 0, a1);
}

uint64_t sub_18A6725A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  *(_QWORD *)(v5 + 128) = *v4;
  return swift_task_switch();
}

uint64_t sub_18A6725C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t (*v23)(void);
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = sub_18A6A6ECC();
  sub_18A6A5D54(v2);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v15 = *(_QWORD *)(v1 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v16 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v18)
      {
        *(_QWORD *)(v15 + 120) = v17;
        v19 = sub_18A65EF14();
        v20 = sub_18A6A56D8(v19);
        sub_18A6A5964(v20);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v21 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v21, (uint64_t)sub_18A67281C);
        sub_18A6A57AC();
        return sub_18A6A682C();
      }
      __break(1u);
    }
    else
    {
      sub_18A6A632C();
      if ((v22 & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v0)
        {
          sub_18A6A5B20();
          v23 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A65EEC4(v23);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v24 = (__n128 *)sub_18A6A5E38();
    v25 = sub_18A65EF54(v24, (__n128)xmmword_18A83AC30);
    v26 = (__n128 *)sub_18A6A5710(v25);
    sub_18A6A5798(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v35 = swift_task_alloc();
    v36 = (_QWORD *)sub_18A6A71A8(v35);
    sub_18A6A7F08(v36);
    sub_18A6A7128();
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A65EED8();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  v6 = sub_18A6A64D4();
  if (sub_18A6A5AB4(v6))
  {
    v7 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v7);
    sub_18A6A587C(&dword_18A5C5000, v8, v9, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }
  sub_18A6A6EBC();
  v10 = sub_18A6A5950();
  v11 = (_QWORD *)sub_18A6A6EB0(v10);
  v12 = sub_18A6A59D8(v11);
  return sub_18A6A6818(v12, v13);
}

uint64_t sub_18A67281C()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A5FDC();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A672868()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;

  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  sub_18A6A714C();
  if (v1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A5B20();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A65EEC4(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A5E38();
    v5 = sub_18A65EF54(v4, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A5710(v5);
    sub_18A6A5798(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v15 = swift_task_alloc();
    v16 = (_QWORD *)sub_18A6A71A8(v15);
    sub_18A6A7F08(v16);
    sub_18A6A7128();
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A65EED8();
  }
}

uint64_t sub_18A672984()
{
  sub_18A6A55B0();
  sub_18A6A5C78();
  sub_18A6A5B54();
  sub_18A623CE4();
  return sub_18A5F3EA4();
}

uint64_t sub_18A6729CC(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 112) = a3;
  *(_QWORD *)(v4 + 120) = v3;
  *(_QWORD *)(v4 + 104) = a2;
  *(_BYTE *)(v4 + 208) = a1;
  *(_QWORD *)(v4 + 128) = *v3;
  return swift_task_switch();
}

uint64_t sub_18A6729F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)(void);
  __n128 *v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;

  sub_18A6A7784();
  v11 = *(_QWORD *)(v9 + 120);
  v12 = sub_18A65B10C();
  sub_18A6A65F0(v11);
  v14 = v13;
  sub_18A5F37A4();
  if ((v14 & 1) == 0)
  {
    v22 = *(_QWORD *)(v9 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v23 || (*(_BYTE *)(v22 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v25)
      {
        v26 = *(_BYTE *)(v9 + 208);
        *(_QWORD *)(v22 + 120) = v24;
        v27 = sub_18A65EF14();
        *(_QWORD *)(v9 + 152) = v27;
        *(_BYTE *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = v22;
        *(_QWORD *)(v27 + 32) = v10;
        v28 = sub_18A65EF14();
        *(_QWORD *)(v9 + 160) = v28;
        *(_BYTE *)(v28 + 16) = v26;
        *(_QWORD *)(v28 + 24) = v22;
        *(_QWORD *)(v28 + 32) = v10;
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v29 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v9 + 168) = v29;
        *v29 = v9;
        v29[1] = sub_18A672D44;
        sub_18A6A57AC();
        return sub_18A6A57F4();
      }
      __break(1u);
    }
    else
    {
      *(_BYTE *)(v22 + 128) = 1;
      if ((*(_BYTE *)(v9 + 208) & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v14)
        {
          sub_18A6A5B20();
          v30 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A6A65BC(v30);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v31 = (__n128 *)sub_18A6A6FE0();
    *(_QWORD *)(v9 + 96) = sub_18A6A5CB0(v31, (__n128)xmmword_18A83AC30);
    v32 = (__n128 *)sub_18A6A58B4();
    sub_18A6A8184(v32, v33, v34, v35, v36, v37, v38, v39, v40);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    *(_QWORD *)(v9 + 192) = swift_task_alloc();
    v41 = sub_18A5F101C(&qword_1EDF6A290);
    sub_18A6A6DB4(v41, (uint64_t)sub_18A672F24);
    sub_18A6A72A4();
    sub_18A6A5890();
    return sub_18A6A5554();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v15 = sub_18A5F3BA0();
  sub_18A5F4224(v15, (uint64_t)qword_1EDF6A630);
  sub_18A6A64D4();
  if (sub_18A6A5E30(v12))
  {
    v16 = (_WORD *)sub_18A5F3830();
    sub_18A6A79BC(v16);
    sub_18A6A5BA8(&dword_18A5C5000, v17, v18, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }

  v19 = sub_18A6A59F0();
  v20 = (_QWORD *)sub_18A6A6EB0(v19);
  *v20 = v9;
  v20[1] = sub_18A672CDC;
  return sub_18A6A57E8(v9 + 80, a9);
}

uint64_t sub_18A672CDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A64A154(v2);
  *(_QWORD *)(v0 + 144) = v1;
  swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A672D2C()
{
  uint64_t v0;

  return sub_18A5F43FC(*(_QWORD *)(v0 + 80), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A672D38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A672D44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  sub_18A64A154(&v4);
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A672DB0()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A672DE0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  __n128 *v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;

  sub_18A6A7784();
  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  if (*(_BYTE *)(v0 + 208) == 1 && (v2 = *(_QWORD *)(v0 + 176), static Task<>.checkCancellation()(), v2))
  {
    sub_18A6A5B20();
    v3 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A6A65BC(v3);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v5 = (__n128 *)sub_18A6A6FE0();
    *(_QWORD *)(v0 + 96) = sub_18A6A5CB0(v5, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A58B4();
    sub_18A6A8184(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    *(_QWORD *)(v0 + 192) = swift_task_alloc();
    v15 = sub_18A5F101C(&qword_1EDF6A290);
    sub_18A6A6DB4(v15, (uint64_t)sub_18A672F24);
    sub_18A6A72A4();
    sub_18A6A5890();
    return sub_18A6A5554();
  }
}

uint64_t sub_18A672F24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A64A154(v2);
  *(_QWORD *)(v0 + 200) = v1;
  swift_task_dealloc();
  sub_18A6A7114();
  sub_18A6A5B54();
  sub_18A623CE4();
  return sub_18A5F3EA4();
}

uint64_t sub_18A672F80()
{
  uint64_t (*v0)(void);

  sub_18A6A5B20();
  sub_18A6A7694();
  return v0();
}

uint64_t sub_18A672FB0()
{
  uint64_t v0;

  sub_18A6A5B20();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A672FD8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  *(_QWORD *)(v5 + 128) = *v4;
  return swift_task_switch();
}

uint64_t sub_18A673000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t (*v23)(void);
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;

  sub_18A6A5CD4();
  v2 = sub_18A6A6ECC();
  sub_18A6A5D54(v2);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v15 = *(_QWORD *)(v1 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v16 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v18)
      {
        *(_QWORD *)(v15 + 120) = v17;
        v19 = sub_18A65EF14();
        v20 = sub_18A6A56D8(v19);
        sub_18A6A5964(v20);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v21 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v21, (uint64_t)sub_18A67325C);
        sub_18A6A57AC();
        return sub_18A6A5760();
      }
      __break(1u);
    }
    else
    {
      sub_18A6A632C();
      if ((v22 & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v0)
        {
          sub_18A6A5B20();
          v23 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A623BBC(v23);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v24 = (__n128 *)sub_18A6A5E38();
    v25 = sub_18A65EF54(v24, (__n128)xmmword_18A83AC30);
    v26 = (__n128 *)sub_18A6A5710(v25);
    sub_18A6A5798(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v35 = swift_task_alloc();
    sub_18A6A6C58(v35);
    v36 = sub_18A5F101C(&qword_1EDF6A3A8);
    sub_18A6A5920(v36, (uint64_t)sub_18A672984);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  v6 = sub_18A6A64D4();
  if (sub_18A6A5AB4(v6))
  {
    v7 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v7);
    sub_18A6A587C(&dword_18A5C5000, v8, v9, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }
  sub_18A6A6EBC();
  v10 = sub_18A6A5950();
  v11 = (_QWORD *)sub_18A6A6EB0(v10);
  v12 = sub_18A6A59D8(v11);
  return sub_18A6A5748(v12, v13);
}

uint64_t sub_18A67325C()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A5FDC();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A6732A8()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A5CD4();
  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  sub_18A6A714C();
  if (v1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A5B20();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A623BBC(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A5E38();
    v5 = sub_18A65EF54(v4, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A5710(v5);
    sub_18A6A5798(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v15 = swift_task_alloc();
    sub_18A6A6C58(v15);
    v16 = sub_18A5F101C(&qword_1EDF6A3A8);
    sub_18A6A5920(v16, (uint64_t)sub_18A672984);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
}

uint64_t sub_18A6733CC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  *(_QWORD *)(v5 + 128) = *v4;
  return swift_task_switch();
}

uint64_t sub_18A6733F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t (*v23)(void);
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;

  sub_18A6A5CD4();
  v2 = sub_18A6A6ECC();
  sub_18A6A5D54(v2);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v15 = *(_QWORD *)(v1 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v16 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v18)
      {
        *(_QWORD *)(v15 + 120) = v17;
        v19 = sub_18A65EF14();
        v20 = sub_18A6A56D8(v19);
        sub_18A6A5964(v20);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v21 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v21, (uint64_t)sub_18A673650);
        sub_18A6A57AC();
        return sub_18A6A5760();
      }
      __break(1u);
    }
    else
    {
      sub_18A6A632C();
      if ((v22 & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v0)
        {
          sub_18A6A5B20();
          v23 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A623BBC(v23);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v24 = (__n128 *)sub_18A6A5E38();
    v25 = sub_18A65EF54(v24, (__n128)xmmword_18A83AC30);
    v26 = (__n128 *)sub_18A6A5710(v25);
    sub_18A6A5798(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v35 = swift_task_alloc();
    sub_18A6A6C58(v35);
    v36 = sub_18A5F101C((uint64_t *)&unk_1EDF6A398);
    sub_18A6A5920(v36, (uint64_t)sub_18A672984);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  v6 = sub_18A6A64D4();
  if (sub_18A6A5AB4(v6))
  {
    v7 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v7);
    sub_18A6A587C(&dword_18A5C5000, v8, v9, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }
  sub_18A6A6EBC();
  v10 = sub_18A6A5950();
  v11 = (_QWORD *)sub_18A6A6EB0(v10);
  v12 = sub_18A6A59D8(v11);
  return sub_18A6A5748(v12, v13);
}

uint64_t sub_18A673650()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A5FDC();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A67369C()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A5CD4();
  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  sub_18A6A714C();
  if (v1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A5B20();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A623BBC(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A5E38();
    v5 = sub_18A65EF54(v4, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A5710(v5);
    sub_18A6A5798(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v15 = swift_task_alloc();
    sub_18A6A6C58(v15);
    v16 = sub_18A5F101C((uint64_t *)&unk_1EDF6A398);
    sub_18A6A5920(v16, (uint64_t)sub_18A672984);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
}

uint64_t sub_18A6737C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  *(_QWORD *)(v5 + 128) = *v4;
  return swift_task_switch();
}

uint64_t sub_18A6737E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t (*v23)(void);
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;

  sub_18A6A5CD4();
  v2 = sub_18A6A6ECC();
  sub_18A6A5D54(v2);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v15 = *(_QWORD *)(v1 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v16 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v18)
      {
        *(_QWORD *)(v15 + 120) = v17;
        v19 = sub_18A65EF14();
        v20 = sub_18A6A56D8(v19);
        sub_18A6A5964(v20);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v21 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v21, (uint64_t)sub_18A673A44);
        sub_18A6A57AC();
        return sub_18A6A5760();
      }
      __break(1u);
    }
    else
    {
      sub_18A6A632C();
      if ((v22 & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v0)
        {
          sub_18A6A5B20();
          v23 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A623BBC(v23);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v24 = (__n128 *)sub_18A6A5E38();
    v25 = sub_18A65EF54(v24, (__n128)xmmword_18A83AC30);
    v26 = (__n128 *)sub_18A6A5710(v25);
    sub_18A6A5798(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v35 = swift_task_alloc();
    sub_18A6A6C58(v35);
    v36 = sub_18A5F101C((uint64_t *)&unk_1EDF6A420);
    sub_18A6A5920(v36, (uint64_t)sub_18A672984);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  v6 = sub_18A6A64D4();
  if (sub_18A6A5AB4(v6))
  {
    v7 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v7);
    sub_18A6A587C(&dword_18A5C5000, v8, v9, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }
  sub_18A6A6EBC();
  v10 = sub_18A6A5950();
  v11 = (_QWORD *)sub_18A6A6EB0(v10);
  v12 = sub_18A6A59D8(v11);
  return sub_18A6A5748(v12, v13);
}

uint64_t sub_18A673A44()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A5FDC();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A673A90()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A5CD4();
  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  sub_18A6A714C();
  if (v1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A5B20();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A623BBC(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A5E38();
    v5 = sub_18A65EF54(v4, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A5710(v5);
    sub_18A6A5798(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v15 = swift_task_alloc();
    sub_18A6A6C58(v15);
    v16 = sub_18A5F101C((uint64_t *)&unk_1EDF6A420);
    sub_18A6A5920(v16, (uint64_t)sub_18A672984);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
}

uint64_t sub_18A673BB4(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 112) = v3;
  *(_QWORD *)(v4 + 96) = a2;
  *(_BYTE *)(v4 + 201) = a1;
  *(_QWORD *)(v4 + 120) = *v3;
  return swift_task_switch();
}

uint64_t sub_18A673BDC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(void);
  __n128 *v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  _QWORD *v32;

  sub_18A6A5CD4();
  v2 = sub_18A6A7DC0();
  sub_18A6A65F0(v0);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + 112);
    sub_18A5F46AC();
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 136) + 24);
    v13 = *(_QWORD *)(v1 + 112);
    if (v12 || (*(_BYTE *)(v13 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v15)
      {
        *(_QWORD *)(v13 + 120) = v14;
        v16 = sub_18A65EF14();
        v17 = sub_18A6A56D8(v16);
        sub_18A6A5964(v17);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v18 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v18, (uint64_t)sub_18A673ECC);
        sub_18A6A57AC();
        return sub_18A6A5760();
      }
      __break(1u);
    }
    else
    {
      *(_BYTE *)(v13 + 128) = 1;
      if ((*(_BYTE *)(v1 + 201) & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v4)
        {
          sub_18A6A6734();
          return sub_18A6A5748(0, *(uint64_t (**)(void))(v1 + 8));
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A6DCC();
    sub_18A6A5B18();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v21 = (__n128 *)sub_18A6A6FE0();
    *(_QWORD *)(v1 + 88) = sub_18A6A5CB0(v21, (__n128)xmmword_18A83AC30);
    v22 = (__n128 *)sub_18A6A58B4();
    sub_18A6A5800(v22, v23, v24, v25, v26, v27, v28, v29, v30);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v31 = swift_task_alloc();
    v32 = (_QWORD *)sub_18A6A71A8(v31);
    *v32 = v1;
    v32[1] = sub_18A674088;
    sub_18A6A7128();
    sub_18A6A5B70();
    sub_18A6A5890();
    return sub_18A6A5508();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  sub_18A6A64D4();
  if (sub_18A6A5E30(v2))
  {
    v6 = (_WORD *)sub_18A5F3830();
    sub_18A6A79BC(v6);
    sub_18A6A5BA8(&dword_18A5C5000, v7, v8, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }

  v9 = (_QWORD *)sub_18A6A59F0();
  *(_QWORD *)(v1 + 128) = v9;
  v10 = sub_18A6A7740(v9);
  return sub_18A6A5748(v10, v19);
}

uint64_t sub_18A673E78()
{
  sub_18A6A67AC();
  return sub_18A5F3A94();
}

uint64_t sub_18A673EB8()
{
  return sub_18A6A5934();
}

uint64_t sub_18A673EC0(uint64_t a1)
{
  uint64_t v1;

  return sub_18A6A7354(a1, *(uint64_t (**)(_QWORD))(v1 + 8));
}

uint64_t sub_18A673ECC()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A7E3C();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A673F18()
{
  uint64_t v0;

  sub_18A6A7D94();
  sub_18A663AB0();
  return sub_18A623BC8(0, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A673F48()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;

  sub_18A6A5CD4();
  if (*(_BYTE *)(*(_QWORD *)(v1 + 112) + 128) != 1)
    __break(1u);
  if (*(_BYTE *)(v1 + 201) == 1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A6734();
    return sub_18A6A5748(0, *(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A6DCC();
    sub_18A6A5B18();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v3 = (__n128 *)sub_18A6A6FE0();
    *(_QWORD *)(v1 + 88) = sub_18A6A5CB0(v3, (__n128)xmmword_18A83AC30);
    v4 = (__n128 *)sub_18A6A58B4();
    sub_18A6A5800(v4, v5, v6, v7, v8, v9, v10, v11, v12);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v13 = swift_task_alloc();
    v14 = (_QWORD *)sub_18A6A71A8(v13);
    *v14 = v1;
    v14[1] = sub_18A674088;
    sub_18A6A7128();
    sub_18A6A5B70();
    sub_18A6A5890();
    return sub_18A6A5508();
  }
}

uint64_t sub_18A674088()
{
  sub_18A6A55B0();
  sub_18A6A7114();
  sub_18A6A5B54();
  sub_18A623CE4();
  return sub_18A5F3EA4();
}

uint64_t sub_18A6740D4()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_18A6A6734();
  sub_18A6A7694();
  return sub_18A623BC8(v0, v1);
}

uint64_t sub_18A6740FC()
{
  uint64_t v0;

  sub_18A6A6734();
  return sub_18A623BC8(0, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A674128(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  *(_QWORD *)(v5 + 128) = *v4;
  return swift_task_switch();
}

uint64_t sub_18A674150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t (*v23)(void);
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = sub_18A6A6ECC();
  sub_18A6A5D54(v2);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v15 = *(_QWORD *)(v1 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v16 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v18)
      {
        *(_QWORD *)(v15 + 120) = v17;
        v19 = sub_18A65EF14();
        v20 = sub_18A6A56D8(v19);
        sub_18A6A5964(v20);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v21 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v21, (uint64_t)sub_18A6743A0);
        sub_18A6A57AC();
        return sub_18A6A682C();
      }
      __break(1u);
    }
    else
    {
      sub_18A6A632C();
      if ((v22 & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v0)
        {
          sub_18A6A5B20();
          v23 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A65EEC4(v23);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v24 = (__n128 *)sub_18A6A5E38();
    v25 = sub_18A65EF54(v24, (__n128)xmmword_18A83AC30);
    v26 = (__n128 *)sub_18A6A5710(v25);
    sub_18A6A5798(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v35 = swift_task_alloc();
    v36 = (_QWORD *)sub_18A6A71A8(v35);
    sub_18A6A7F08(v36);
    sub_18A6A7128();
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A65EED8();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  v6 = sub_18A6A64D4();
  if (sub_18A6A5AB4(v6))
  {
    v7 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v7);
    sub_18A6A587C(&dword_18A5C5000, v8, v9, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }
  sub_18A6A6EBC();
  v10 = sub_18A6A5950();
  v11 = (_QWORD *)sub_18A6A6EB0(v10);
  v12 = sub_18A6A59D8(v11);
  return sub_18A6A6818(v12, v13);
}

uint64_t sub_18A6743A0()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A5FDC();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A6743EC()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;

  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  sub_18A6A714C();
  if (v1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A5B20();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A65EEC4(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A5E38();
    v5 = sub_18A65EF54(v4, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A5710(v5);
    sub_18A6A5798(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v15 = swift_task_alloc();
    v16 = (_QWORD *)sub_18A6A71A8(v15);
    sub_18A6A7F08(v16);
    sub_18A6A7128();
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A65EED8();
  }
}

uint64_t sub_18A674504(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  *(_QWORD *)(v5 + 128) = *v4;
  return swift_task_switch();
}

uint64_t sub_18A67452C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t (*v23)(void);
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;

  sub_18A6A5CD4();
  v2 = sub_18A6A6ECC();
  sub_18A6A5D54(v2);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v15 = *(_QWORD *)(v1 + 120);
    sub_18A5F46AC();
    sub_18A6A5F3C();
    if (v16 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v18)
      {
        *(_QWORD *)(v15 + 120) = v17;
        v19 = sub_18A65EF14();
        v20 = sub_18A6A56D8(v19);
        sub_18A6A5964(v20);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v21 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v21, (uint64_t)sub_18A6747BC);
        sub_18A6A57AC();
        return sub_18A6A5760();
      }
      __break(1u);
    }
    else
    {
      sub_18A6A632C();
      if ((v22 & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v0)
        {
          sub_18A6A5B20();
          v23 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A623BBC(v23);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v24 = (__n128 *)sub_18A6A5E38();
    v25 = sub_18A65EF54(v24, (__n128)xmmword_18A83AC30);
    v26 = (__n128 *)sub_18A6A5710(v25);
    sub_18A6A5798(v26, v27, v28, v29, v30, v31, v32, v33, v34);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v35 = swift_task_alloc();
    sub_18A6A6C58(v35);
    v36 = sub_18A5F101C((uint64_t *)&unk_1EDF6A268);
    sub_18A6A5920(v36, (uint64_t)sub_18A674958);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  v6 = sub_18A6A64D4();
  if (sub_18A6A5AB4(v6))
  {
    v7 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v7);
    sub_18A6A587C(&dword_18A5C5000, v8, v9, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }
  sub_18A6A6EBC();
  v10 = sub_18A6A5950();
  v11 = (_QWORD *)sub_18A6A6EB0(v10);
  v12 = sub_18A6A59D8(v11);
  return sub_18A6A5748(v12, v13);
}

uint64_t sub_18A674788()
{
  uint64_t v0;

  sub_18A6239A4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6747BC()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A5FDC();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A674808()
{
  uint64_t v0;

  sub_18A6A7D94();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A674834()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A5CD4();
  sub_18A6A5F1C();
  if (!v1)
    __break(1u);
  sub_18A6A714C();
  if (v1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A5B20();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A623BBC(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A58F0();
    sub_18A65EFBC();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A5E38();
    v5 = sub_18A65EF54(v4, (__n128)xmmword_18A83AC30);
    v6 = (__n128 *)sub_18A6A5710(v5);
    sub_18A6A5798(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    v15 = swift_task_alloc();
    sub_18A6A6C58(v15);
    v16 = sub_18A5F101C((uint64_t *)&unk_1EDF6A268);
    sub_18A6A5920(v16, (uint64_t)sub_18A674958);
    sub_18A6A5B70();
    sub_18A6A5574();
    return sub_18A6A5508();
  }
}

uint64_t sub_18A674958()
{
  sub_18A6A55B0();
  sub_18A6A5C78();
  sub_18A6A5B54();
  sub_18A623CE4();
  return sub_18A5F3EA4();
}

uint64_t sub_18A6749A0()
{
  uint64_t (*v0)(void);

  sub_18A6A5B20();
  v0 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A5F3E50(v0);
}

uint64_t sub_18A6749C4()
{
  uint64_t v0;

  sub_18A6A5B20();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6749EC(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 112) = v3;
  *(_QWORD *)(v4 + 96) = a2;
  *(_BYTE *)(v4 + 201) = a1;
  *(_QWORD *)(v4 + 120) = *v3;
  return swift_task_switch();
}

uint64_t sub_18A674A14()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void);
  __n128 *v22;
  __n128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;

  sub_18A6A7784();
  v2 = sub_18A6A7DC0();
  sub_18A6A65F0(v0);
  v4 = v3;
  sub_18A5F37A4();
  if ((v4 & 1) == 0)
  {
    v13 = *(_QWORD *)(v1 + 112);
    sub_18A5F46AC();
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 136) + 24);
    v15 = *(_QWORD *)(v1 + 112);
    if (v14 || (*(_BYTE *)(v15 + 128) & 1) != 0)
    {
      sub_18A6A680C();
      if (!v17)
      {
        *(_QWORD *)(v15 + 120) = v16;
        v18 = sub_18A65EF14();
        v19 = sub_18A6A56D8(v18);
        sub_18A6A5964(v19);
        sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
        v20 = (_QWORD *)swift_task_alloc();
        sub_18A6A6A14(v20, (uint64_t)sub_18A674D1C);
        sub_18A6A57AC();
        return sub_18A6A57F4();
      }
      __break(1u);
    }
    else
    {
      *(_BYTE *)(v15 + 128) = 1;
      if ((*(_BYTE *)(v1 + 201) & 1) != 0)
      {
        sub_18A6A5FE8();
        if (v4)
        {
          sub_18A6A6734();
          v21 = (uint64_t (*)(void))sub_18A6A5B7C();
          return sub_18A6A65BC(v21);
        }
      }
      if (qword_1EDF6A4E0 == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    sub_18A6A6DCC();
    sub_18A6A5B18();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v22 = (__n128 *)sub_18A6A6FE0();
    *(_QWORD *)(v1 + 88) = sub_18A6A5CB0(v22, (__n128)xmmword_18A83AC30);
    v23 = (__n128 *)sub_18A6A58B4();
    sub_18A6A5800(v23, v24, v25, v26, v27, v28, v29, v30, v31);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    *(_QWORD *)(v1 + 184) = swift_task_alloc();
    v32 = sub_18A5F101C(&qword_1EDF6C400);
    sub_18A6A6DB4(v32, (uint64_t)sub_18A674EB0);
    sub_18A6A72A4();
    sub_18A6A5890();
    return sub_18A6A5554();
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v5 = sub_18A5F3BA0();
  sub_18A5F4224(v5, (uint64_t)qword_1EDF6A630);
  sub_18A6A64D4();
  if (sub_18A6A5E30(v2))
  {
    v6 = (_WORD *)sub_18A5F3830();
    sub_18A6A79BC(v6);
    sub_18A6A5BA8(&dword_18A5C5000, v7, v8, "BUG IN CLOUDKIT: CKAsyncSerialQueue Someone wants to run something on the same queue recursively! Please file a radar.");
    sub_18A5F392C();
  }

  v9 = (_QWORD *)sub_18A6A59F0();
  *(_QWORD *)(v1 + 128) = v9;
  v10 = sub_18A6A7740(v9);
  return sub_18A6A57E8(v10, v11);
}

uint64_t sub_18A674CD0()
{
  sub_18A6A67AC();
  return sub_18A5F3A94();
}

uint64_t sub_18A674D10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A674D1C()
{
  uint64_t v0;

  sub_18A6A5590();
  if (!v0)
  {
    sub_18A6A7E3C();
    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

uint64_t sub_18A674D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;

  sub_18A6A7784();
  if (*(_BYTE *)(*(_QWORD *)(v1 + 112) + 128) != 1)
    __break(1u);
  if (*(_BYTE *)(v1 + 201) == 1 && (sub_18A6A6764(), v0))
  {
    sub_18A6A6734();
    v2 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A6A65BC(v2);
  }
  else
  {
    if (qword_1EDF6A4E0 != -1)
      swift_once();
    sub_18A6A6DCC();
    sub_18A6A5B18();
    sub_18A5F101C(&qword_1EDF6A4C8);
    v4 = (__n128 *)sub_18A6A6FE0();
    *(_QWORD *)(v1 + 88) = sub_18A6A5CB0(v4, (__n128)xmmword_18A83AC30);
    v5 = (__n128 *)sub_18A6A58B4();
    sub_18A6A5800(v5, v6, v7, v8, v9, v10, v11, v12, v13);
    sub_18A62F924(&qword_1EDF6A520, (uint64_t (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue, (uint64_t)&protocol conformance descriptor for CKAsyncSerialQueue);
    *(_QWORD *)(v1 + 184) = swift_task_alloc();
    v14 = sub_18A5F101C(&qword_1EDF6C400);
    sub_18A6A6DB4(v14, (uint64_t)sub_18A674EB0);
    sub_18A6A72A4();
    sub_18A6A5890();
    return sub_18A6A5554();
  }
}

uint64_t sub_18A674EB0()
{
  sub_18A6A55B0();
  sub_18A6A7114();
  sub_18A6A5B54();
  sub_18A623CE4();
  return sub_18A5F3EA4();
}

uint64_t sub_18A674EFC()
{
  uint64_t v0;

  sub_18A6A6734();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A674F24(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = static Hasher._hash(seed:_:)() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_18A6A70A0();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(_QWORD *)(v5 + 8 * v6) == a1)
            break;
          sub_18A6A70A0();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
  sub_18A5F379C();
}

uint64_t sub_18A674FC0(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t sub_18A67511C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(a1 + 8 * i + 32);
      sub_18A69C688(&v8, v5);
    }
    sub_18A5F37E0();
    return v9;
  }
  else
  {
    v6 = a2;
    sub_18A5F37E0();
  }
  return v6;
}

#error "18A675208: call analysis failed (funcsize=55)"

uint64_t sub_18A67526C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_18A69C780(&v17, v15, v16);
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_18A6753EC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_18A6A545C;
  return v6(a1);
}

uint64_t sub_18A675450(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_18A6754B8;
  return v4(v1 + 16);
}

uint64_t sub_18A6754B8()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A14();
  sub_18A623FAC();
  *(_QWORD *)(v1 + 32) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A675504()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A675510(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_18A675578;
  return v4(v1 + 32);
}

uint64_t sub_18A675578()
{
  sub_18A6A6714();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6755B4()
{
  return sub_18A6A5934();
}

uint64_t sub_18A6755BC(uint64_t a1)
{
  uint64_t v1;

  return sub_18A6A7354(a1, *(uint64_t (**)(_QWORD))(v1 + 8));
}

uint64_t sub_18A6755C8(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_18A675630;
  return v4(v1 + 32);
}

uint64_t sub_18A675630()
{
  sub_18A6A6714();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A67566C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static SyncEngine.defaultOperationGroup()()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), sel_init);
  v1 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), sel_init);
  objc_msgSend(v1, sel_setQualityOfService_, 17);
  objc_msgSend(v1, sel_setRequestOriginator_, 3);
  sub_18A623D9C(v0, sel_setDefaultConfiguration_);

  sub_18A5F379C();
}

void sub_18A6756FC(uint64_t a1)
{
  unint64_t v1;
  BOOL v2;
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(a1 + 8);
  sub_18A66CBD0();
  v2 = sub_18A6A845C();
  sub_18A5F101C(&qword_1EDF6A830);
  v3 = (__n128 *)sub_18A5F37B4();
  v4 = sub_18A6A67CC(v3, (__n128)xmmword_18A83C9C0);
  strcpy((char *)&v4[3], "FetchChanges");
  v4[3].n128_u8[13] = 0;
  v4[3].n128_u16[7] = -5120;
  if (!(_DWORD)v1)
  {
    v5 = 0x646564756C637845;
    goto LABEL_5;
  }
  if ((_DWORD)v1 == 1)
  {
    v5 = 0x6369666963657053;
LABEL_5:
    v1 = 3;
    sub_18A6A6C08(1, 3);
    v6[2] = 3;
    v6[8] = v5;
    v6[9] = 0xED000073656E6F5ALL;
    v7 = v6[3];
    goto LABEL_7;
  }
  v7 = 4;
LABEL_7:
  if (v1 >= v7 >> 1)
    sub_18A6A6C08(v7 > 1, v1 + 1);
  v8 = 0xE600000000000000;
  if (v2)
    v8 = 0xE900000000000063;
  sub_18A6A7C8C(v8);
  sub_18A5F101C(&qword_1EDF6A770);
  sub_18A63DD6C();
  sub_18A6A6D40();
  sub_18A5F37E0();
  sub_18A6A68D0();
  sub_18A60A0E0();
}

void sub_18A675860(uint64_t a1)
{
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  sub_18A66CBD0();
  sub_18A6A845C();
  sub_18A5F101C(&qword_1EDF6A830);
  v2 = (__n128 *)sub_18A5F37B4();
  v3 = sub_18A6A67CC(v2, (__n128)xmmword_18A83C9C0);
  v3[3].n128_u64[0] = 0x6E616843646E6553;
  v3[3].n128_u64[1] = 0xEB00000000736567;
  __asm { BR              X9 }
}

uint64_t sub_18A675910()
{
  char v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;

  sub_18A6A6C08(1, 3);
  v1[2] = 3;
  v1[8] = 0x6369666963657053;
  v1[9] = 0xEF7364726F636552;
  v2 = v1[3];
  if (v2 >> 1 <= 3)
    sub_18A6A6C08(v2 > 1, 4);
  v3 = 0xE600000000000000;
  if ((v0 & 1) != 0)
    v3 = 0xE900000000000063;
  sub_18A6A7C8C(v3);
  sub_18A5F101C(&qword_1EDF6A770);
  sub_18A63DD6C();
  sub_18A6A6D40();
  sub_18A5F37E0();
  return sub_18A6A68D0();
}

void sub_18A6759EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A6A4AD4((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
    sub_18A6A726C();
    Set.Iterator.init(_cocoa:)();
    v1 = v46;
    v41 = v47;
    v2 = v48;
    v3 = v49;
    v4 = v50;
  }
  else
  {
    v3 = 0;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v41 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
  }
  v37 = v2;
  v39 = v1 & 0x7FFFFFFFFFFFFFFFLL;
  v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v3 << 6);
      v11 = v3;
      goto LABEL_29;
    }
    if (__OFADD__(v3, 1))
      break;
    if (v3 + 1 >= v8)
      goto LABEL_32;
    sub_18A6A7BFC();
    v11 = v20;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v8)
        goto LABEL_32;
      if (!*(_QWORD *)(v41 + 8 * v11))
      {
        v11 = v20 + 2;
        if (v20 + 2 >= v8)
          goto LABEL_32;
        if (!*(_QWORD *)(v41 + 8 * v11))
        {
          v11 = v20 + 3;
          if (v20 + 3 >= v8)
            goto LABEL_32;
          if (!*(_QWORD *)(v41 + 8 * v11))
          {
            v11 = v20 + 4;
            if (v20 + 4 >= v8)
              goto LABEL_32;
            if (!*(_QWORD *)(v41 + 8 * v11))
            {
              v22 = v3 + 6;
              while (v22 < v8)
              {
                sub_18A6A7BFC();
                v22 = v23 + 1;
                if (v24)
                {
                  v11 = v22 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_18A62F4F8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    sub_18A623BAC();
    v9 = v26 & v25;
    v10 = v27 + (v11 << 6);
LABEL_29:
    v28 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    LODWORD(v13) = (_DWORD)v28;
    if (!v28)
      goto LABEL_32;
    while (1)
    {
      v29 = sub_18A6A7E8C((int)&v45, (int)v13, v14, v15, v16, v17, v18, v19, v37, v39, v41, v43, (uint64_t)v45, v46, v47, v48, v49, v50, v51,
              v52,
              v53,
              v54);
      sub_18A6A74FC(v29, v30, v31, v32, v33, v34, v35, v36, v38, v40, v42, v44, v45);
      v3 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v12 = __CocoaSet.Iterator.next()();
      if (v12)
      {
        v43 = v12;
        sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
        sub_18A6A68DC();
        sub_18A612F00();
        v13 = v45;
        sub_18A61A798();
        v11 = v3;
        v9 = v4;
        if (v13)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_18A675C78()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = MEMORY[0x18D76E914](v0 + 112);
  if (result)
  {
    v2 = result;
    swift_getObjectType();
    result = sub_18A610534(v2);
    if (!result)
    {
      _StringGuts.grow(_:)(62);
      sub_18A629038(60, 0x800000018A8408B0);
      swift_getObjectType();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      result = sub_18A6A5E60();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_18A675D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  Swift::String v5;
  __int128 v6[2];
  uint64_t v7;
  uint64_t v8;

  result = MEMORY[0x18D76E914](v1 + 112);
  if (result)
  {
    v4 = result;
    v8 = result;
    swift_unknownObjectRetain();
    sub_18A5F101C(&qword_1EDF6A378);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_unknownObjectRelease();
      return sub_18A610568(v6, a1);
    }
    else
    {
      v7 = 0;
      memset(v6, 0, sizeof(v6));
      sub_18A6A4B10((uint64_t)v6, (uint64_t *)&unk_1EDF6A750);
      *(_QWORD *)&v6[0] = 0;
      *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v5._object = (void *)0x800000018A8408B0;
      v5._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v5);
      swift_getObjectType();
      v8 = v4;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_18A675E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v5[40];

  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  v5[0] = 0;
  type metadata accessor for CKAsyncSerialQueue();
  swift_allocObject();
  CKAsyncSerialQueue.init(ordering:)(v5);
  *(_QWORD *)(v1 + 120) = v3;
  sub_18A610C74(a1, (uint64_t)v5);
  sub_18A5F101C(&qword_1EDF6A378);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  sub_18A608B60(a1);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_18A675F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[2];

  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  LOBYTE(v7[0]) = 0;
  type metadata accessor for CKAsyncSerialQueue();
  sub_18A6A64F0();
  CKAsyncSerialQueue.init(ordering:)((char *)v7);
  *(_QWORD *)(v2 + 120) = v5;
  v7[0] = a1;
  v7[1] = a2;
  sub_18A6A72EC();
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  sub_18A6A8438();
  swift_unknownObjectWeakAssign();
  sub_18A61A798();
  return v2;
}

uint64_t sub_18A675FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch();
}

uint64_t sub_18A676010()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A6CE0();
  *(_QWORD *)(v0 + 40) = sub_18A675C78();
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F4C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = swift_task_alloc();
  v12 = (_QWORD *)sub_18A6A7F14(v11);
  sub_18A6A7EFC(v12);
  sub_18A6A6E6C();
  return sub_18A6725A0(v13, v14, v15, v16);
}

uint64_t sub_18A67608C()
{
  uint64_t v0;

  sub_18A6A58D0();
  if (!v0)
    sub_18A6A7480();
  return sub_18A5F3A94();
}

uint64_t sub_18A6760D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch();
}

uint64_t sub_18A6760F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 40) = sub_18A675C78();
  *(_QWORD *)(v0 + 48) = v1;
  v2 = sub_18A65EF14();
  *(_QWORD *)(v0 + 88) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 32) = v0 + 40;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v3;
  *v3 = v0;
  v3[1] = sub_18A67618C;
  return sub_18A6729CC(0, (uint64_t)&unk_1EDF6C628, v2);
}

uint64_t sub_18A67618C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  sub_18A6A5BE8();
  sub_18A64A154(v4);
  *(_QWORD *)(v2 + 104) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_QWORD *)(v2 + 112) = a1;
    swift_task_dealloc();
  }
  return sub_18A5F3EA4();
}

uint64_t sub_18A6761F4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return sub_18A623BC8(*(_QWORD *)(v0 + 112), *(uint64_t (**)(void))(v0 + 8));
}

void sub_18A676220()
{
  swift_task_dealloc();
  sub_18A6A64FC();
  sub_18A6A6098((uint64_t)"BUG IN CLOUDKIT: Error running CKSyncEngine delegate callback: ");
  sub_18A6A6BCC();
  sub_18A6A7B4C();
  sub_18A6A6CB4();
  sub_18A6A5E60();
  sub_18A6A65DC();
}

uint64_t sub_18A67629C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch();
}

uint64_t sub_18A6762B8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A6CE0();
  *(_QWORD *)(v0 + 40) = sub_18A675C78();
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F4C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = swift_task_alloc();
  v12 = (_QWORD *)sub_18A6A7F14(v11);
  sub_18A6A7EFC(v12);
  sub_18A6A6E6C();
  return sub_18A6737C0(v13, v14, v15, v16);
}

uint64_t sub_18A676334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch();
}

uint64_t sub_18A676350()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A6CE0();
  *(_QWORD *)(v0 + 40) = sub_18A675C78();
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F4C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = swift_task_alloc();
  v12 = (_QWORD *)sub_18A6A7F14(v11);
  sub_18A6A7EFC(v12);
  sub_18A6A6E6C();
  return sub_18A674128(v13, v14, v15, v16);
}

uint64_t sub_18A6763CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch();
}

uint64_t sub_18A6763E8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_18A6A6CE0();
  *(_QWORD *)(v0 + 40) = sub_18A675C78();
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F4C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = swift_task_alloc();
  v12 = (_QWORD *)sub_18A6A7F14(v11);
  sub_18A6A7EFC(v12);
  sub_18A6A6E6C();
  return sub_18A674504(v13, v14, v15, v16);
}

uint64_t sub_18A676464()
{
  uint64_t v0;

  sub_18A6A58D0();
  if (!v0)
    sub_18A6A7480();
  return sub_18A5F3A94();
}

uint64_t sub_18A6764AC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A6764D4()
{
  swift_task_dealloc();
  sub_18A6A64FC();
  sub_18A6A6098((uint64_t)"BUG IN CLOUDKIT: Error running CKSyncEngine delegate callback: ");
  sub_18A6A6BCC();
  sub_18A6A7B4C();
  sub_18A6A6CB4();
  sub_18A6A5E60();
  sub_18A6A65DC();
}

uint64_t sub_18A676550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_18A67656C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 88);
  sub_18A675D58(v0 + 16);
  v1 = sub_18A65EF14();
  *(_QWORD *)(v0 + 112) = v1;
  *(_OWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 32) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_18A6765FC;
  return sub_18A6749EC(0, (uint64_t)&unk_1EDF6C3E0, v1);
}

uint64_t sub_18A6765FC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  sub_18A6A5BE8();
  sub_18A64A154(v4);
  *(_QWORD *)(v2 + 128) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_BYTE *)(v2 + 136) = a1;
    swift_task_dealloc();
  }
  return sub_18A5F3EA4();
}

uint64_t sub_18A676664()
{
  uint64_t v0;

  sub_18A6A4B10(v0 + 16, (uint64_t *)&unk_1EDF6A750);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_BYTE *)(v0 + 136) & 1);
}

void sub_18A6766A4()
{
  swift_task_dealloc();
  sub_18A6A64FC();
  sub_18A6A6098((uint64_t)"BUG IN CLOUDKIT: Error running CKSyncEngine delegate callback: ");
  sub_18A6A6BCC();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  sub_18A6A6CB4();
  sub_18A6A5E60();
  sub_18A6A65DC();
}

uint64_t sub_18A676728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a2;
  v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  v5[2] = a4;
  return swift_task_switch();
}

uint64_t sub_18A676748()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  *(_BYTE *)(v0 + 72) = 1;
  v1 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F78(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_18A6A54C4;
  sub_18A6A5B70();
  sub_18A6A5D64();
  return sub_18A6A5A5C();
}

uint64_t sub_18A676810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a1;
  v4[6] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return swift_task_switch();
}

uint64_t sub_18A67682C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  *(_BYTE *)(v0 + 72) = 1;
  v1 = sub_18A65EF14();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 32) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  sub_18A5F101C(&qword_1EDF6A290);
  *v2 = v0;
  v2[1] = sub_18A67690C;
  sub_18A6A72A4();
  sub_18A6A5D64();
  return sub_18A6A66B0();
}

uint64_t sub_18A67690C()
{
  _QWORD *v0;
  uint64_t (*v1)(void);

  sub_18A5F4328();
  sub_18A5F416C(v0);
  sub_18A663AB0();
  sub_18A6A7694();
  return v1();
}

uint64_t sub_18A67694C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a2;
  v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  v5[2] = a4;
  return swift_task_switch();
}

uint64_t sub_18A67696C()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  *(_BYTE *)(v0 + 72) = 1;
  v1 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F78(v1);
  *(_QWORD *)(v0 + 64) = swift_task_alloc();
  v2 = sub_18A5F101C((uint64_t *)&unk_1EDF6A420);
  sub_18A6A84DC(v2, (uint64_t)sub_18A6A54C4);
  sub_18A6A5B70();
  sub_18A6A5D64();
  return sub_18A6A5A5C();
}

uint64_t sub_18A676A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a2;
  v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  v5[2] = a4;
  return swift_task_switch();
}

uint64_t sub_18A676A4C()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  *(_BYTE *)(v0 + 72) = 1;
  v1 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F78(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_18A6A54C4;
  sub_18A6A5B70();
  sub_18A6A5D64();
  return sub_18A6A5A5C();
}

uint64_t sub_18A676B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a2;
  v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  v5[2] = a4;
  return swift_task_switch();
}

uint64_t sub_18A676B30()
{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  *(_BYTE *)(v0 + 72) = 1;
  v1 = (__n128 *)sub_18A65EF14();
  sub_18A6A5F78(v1);
  *(_QWORD *)(v0 + 64) = swift_task_alloc();
  v2 = sub_18A5F101C((uint64_t *)&unk_1EDF6A268);
  sub_18A6A84DC(v2, (uint64_t)sub_18A676BF0);
  sub_18A6A5B70();
  sub_18A6A5D64();
  return sub_18A6A5A5C();
}

uint64_t sub_18A676BF0()
{
  uint64_t (*v0)(void);

  sub_18A623A14();
  sub_18A6239A4();
  sub_18A663AB0();
  v0 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A5F3E50(v0);
}

uint64_t sub_18A676C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_18A676C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1EDF6A3C0 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 32);
  *(_BYTE *)(v0 + 57) = 1;
  v2 = sub_18A65EF14();
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  sub_18A5F101C(&qword_1EDF6C400);
  *v3 = v0;
  v3[1] = sub_18A676D1C;
  sub_18A6A72A4();
  sub_18A6A5D64();
  return sub_18A6A66B0();
}

uint64_t sub_18A676D1C()
{
  _QWORD *v0;
  uint64_t (*v1)(void);

  sub_18A5F4328();
  sub_18A5F416C(v0);
  sub_18A663AB0();
  sub_18A6A7694();
  return v1();
}

uint64_t sub_18A676D5C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  int *v9;

  v5[2] = a4;
  v5[3] = a5;
  v9 = (int *)((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v5[4] = v7;
  *v7 = v5;
  v7[1] = sub_18A676DD4;
  return ((uint64_t (*)(uint64_t, _QWORD *))v9)(a1, v5 + 2);
}

uint64_t sub_18A676DD4()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A676E10(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int *v7;

  v4[2] = a3;
  v4[3] = a4;
  v7 = (int *)((char *)a1 + *a1);
  v5 = (_QWORD *)swift_task_alloc();
  v4[5] = v5;
  *v5 = v4;
  v5[1] = sub_18A676E8C;
  return ((uint64_t (*)(_QWORD *, _QWORD *))v7)(v4 + 4, v4 + 2);
}

uint64_t sub_18A676E8C()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A676EC8()
{
  uint64_t v0;

  return sub_18A5F43FC(*(_QWORD *)(v0 + 32), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A676ED4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  int *v9;

  v5[2] = a4;
  v5[3] = a5;
  v9 = (int *)((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v5[4] = v7;
  *v7 = v5;
  v7[1] = sub_18A676F4C;
  return ((uint64_t (*)(uint64_t, _QWORD *))v9)(a1, v5 + 2);
}

uint64_t sub_18A676F4C()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A676F8C(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a1 + *a1);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_18A677004;
  return v7(v3 + 24, a3);
}

uint64_t sub_18A677004()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A677040()
{
  return sub_18A6A5934();
}

uint64_t sub_18A677048()
{
  uint64_t result;
  uint64_t v1;

  sub_18A5F101C(&qword_1EDF6A658);
  result = swift_allocObject();
  v1 = result;
  *(_OWORD *)(result + 16) = xmmword_18A83C9D0;
  *(_OWORD *)(result + 32) = xmmword_18A83C9E0;
  if (qword_1EDF6A7A0 != -1)
    result = swift_once();
  *(_QWORD *)(v1 + 48) = qword_1EDF6A618;
  qword_1EDF75400 = v1;
  return result;
}

uint64_t sub_18A6770CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  xpc_object_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  const __CFString *v88;
  Swift::String v89;
  void *v90;
  void *v91;
  NSObject *v92;
  uint64_t v93;
  _BYTE v94[48];
  __int128 v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  void *v97;
  uint64_t (*v98)(char, char);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  sub_18A612EB8();
  v100 = v1;
  v101 = v2;
  v3 = v0;
  v5 = v4;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78]();
  sub_18A5F3E5C();
  v8 = (v7 - v6);
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_unknownObjectWeakInit();
  type metadata accessor for CKAsyncSerialQueue();
  sub_18A6A64F0();
  sub_18A6A6C88();
  *(_QWORD *)(v0 + 176) = v9;
  *(_QWORD *)(v0 + 184) = 1;
  sub_18A6A64F0();
  sub_18A6A6C88();
  v10 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 200) = v11;
  *(_QWORD *)(v0 + 208) = v10;
  *(_QWORD *)(v0 + 216) = 10;
  *(_QWORD *)(v0 + 232) = MEMORY[0x1E0DEE9E0];
  sub_18A6A64F0();
  sub_18A6A6C88();
  *(_QWORD *)(v0 + 240) = v12;
  *(_QWORD *)(v0 + 248) = 0;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A820);
  v13 = sub_18A5F37B4();
  *(_DWORD *)(v13 + 20) = 0;
  *(_BYTE *)(v13 + 16) = 0;
  *(_QWORD *)(v0 + 256) = v13;
  *(_WORD *)(v0 + 264) = 0;
  *(_BYTE *)(v0 + 266) = 0;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_QWORD *)(v0 + 320) = 0;
  LOBYTE(v95) = 1;
  sub_18A6A64F0();
  sub_18A6A6C88();
  *(_QWORD *)(v0 + 328) = v14;
  *(_QWORD *)(v0 + 360) = 0;
  *(_QWORD *)(v0 + 384) = 0;
  v15 = v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_lastForegroundTriggeredFetchDate;
  sub_18A5F40B4();
  sub_18A6A663C(v15, 1);
  sub_18A6A663C(v3 + OBJC_IVAR____TtC8CloudKit10SyncEngine_earliestStartDateForSchedulerActivities, 1);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8CloudKit10SyncEngine_priority) = 2;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8CloudKit10SyncEngine_scheduleSyncTask) = 0;
  static Date.distantPast.getter();
  v16 = OBJC_IVAR____TtC8CloudKit10SyncEngine_loggingIDLock;
  sub_18A5F101C(&qword_1EDF6A7C8);
  v17 = sub_18A5F37B4();
  *(_DWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0x6E776F6E6B6E5520;
  *(_QWORD *)(v17 + 24) = 0xE800000000000000;
  *(_QWORD *)(v3 + v16) = v17;
  v18 = OBJC_IVAR____TtC8CloudKit10SyncEngine_notificationObserverTasks;
  sub_18A5F101C(&qword_1EDF6A7D0);
  v19 = sub_18A5F37B4();
  *(_DWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + v18) = v19;
  swift_weakAssign();
  swift_unknownObjectWeakAssign();
  v20 = *(void **)v5;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)v5;
  v21 = v20;
  v22 = objc_msgSend(v21, sel_container);
  if (!v22)
  {
    *(_QWORD *)&v95 = 0;
    *((_QWORD *)&v95 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(192);
    sub_18A6A5DFC(0xD0000000000000BELL, (uint64_t)"BUG IN CLIENT OF CLOUDKIT: Trying to initialize a CKSyncEngine for a CKDatabase with a nil container. This usually means that you don't have a strong reference to your CKContainer. database=");
    v85 = sub_18A64A4A0(v84, sel_description);
    sub_18A610418();
    sub_18A6292D4();
    sub_18A64A280();
    sub_18A5F460C();
    goto LABEL_31;
  }
  *(_QWORD *)(v3 + 144) = v22;
  v23 = qword_1EDF6A528;
  v24 = v22;
  if (v23 != -1)
    swift_once();
  v25 = qword_1EDF75400;
  v26 = sub_18A5F3898();
  v27 = sub_18A64A4A0(v26, sel_databaseScope);
  v28 = sub_18A66889C((uint64_t)v27, v25);
  sub_18A5F37A4();
  if ((v28 & 1) == 0)
  {
    *(_QWORD *)&v95 = 0;
    *((_QWORD *)&v95 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(73);
    sub_18A629038(62, 0x800000018A840E30);
    v87 = sub_18A64A4A0(v86, sel_databaseScope);
    v88 = (id)CKDatabaseScopeString((unint64_t)v87);
    sub_18A610418();
    sub_18A6292D4();
    sub_18A64A280();
    sub_18A5F460C();
    v89._countAndFlagsBits = 0x7361626174616420;
    v89._object = (void *)0xE900000000000065;
    String.append(_:)(v89);
LABEL_31:
    sub_18A6A74BC();
    sub_18A6A5E60();
    sub_18A6A7F8C();
  }
  sub_18A5F101C(&qword_1EDF6A738);
  sub_18A6A66C4();
  v29 = sub_18A6A68DC();
  *(_QWORD *)(v3 + 152) = sub_18A6A7E78(v29);
  if (*(_QWORD *)(v5 + 64))
  {
    sub_18A5F101C(&qword_1EDF6A360);
    sub_18A6A66C4();
    v30 = sub_18A6A68DC();
    v31 = sub_18A6A7E78(v30);
  }
  else
  {
    v31 = 0;
  }
  *(_QWORD *)(v3 + 160) = v31;
  sub_18A60FC98(v5 + 128, (uint64_t)&v95, (uint64_t *)&unk_1EDF6A750);
  if (v97)
  {
    sub_18A610568(&v95, (uint64_t)v94);
    sub_18A610C74((uint64_t)v94, (uint64_t)&v93);
    sub_18A5F101C(&qword_1EDF6C858);
    sub_18A6A66C4();
    v32 = sub_18A675E9C((uint64_t)&v93);
    sub_18A608B60((uint64_t)v94);
  }
  else
  {
    v32 = 0;
  }
  *(_QWORD *)(v3 + 168) = v32;
  if (*(_BYTE *)(v5 + 120) == 1)
  {
    *(_QWORD *)&v95 = sub_18A69F974(0x51615uLL);
    v33 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  v35 = (uint64_t *)(v3 + OBJC_IVAR____TtC8CloudKit10SyncEngine_activityNameSuffix);
  *v35 = v33;
  v35[1] = v34;
  v36 = *(_QWORD *)(v5 + 96);
  sub_18A5F46AC();
  v37 = *(void **)(v36 + 16);
  v91 = v24;
  v92 = v8;
  v90 = v21;
  if (v37)
    v38 = xpc_copy(v37);
  else
    v38 = 0;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A740);
  v39 = sub_18A5F37B4();
  *(_QWORD *)(v39 + 16) = v38;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8CloudKit10SyncEngine_xpcActivityCriteriaWrapper) = v39;
  v40 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v3 + 368) = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v3 + 376) = v40;
  v41 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v3 + 336) = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v3 + 344) = v41;
  *(_BYTE *)(v3 + 192) = *(_BYTE *)(v5 + 121);
  v42 = *(void **)(v5 + 112);
  *(_BYTE *)(v3 + 392) = *(_BYTE *)(v5 + 122);
  *(_BYTE *)(v3 + 193) = *(_BYTE *)(v5 + 168);
  *(_BYTE *)(v3 + 352) = *(_BYTE *)(v5 + 104);
  v43 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v3 + 224) = v42;
  if (v43 >> 60 == 15)
  {
    type metadata accessor for CKSyncEngine.State();
    v44 = sub_18A5F37B4();
    v45 = (void *)objc_opt_self();
    v46 = v42;
    sub_18A6291A0();
    sub_18A5F40AC();
    *(_QWORD *)(v44 + 16) = objc_msgSend(v45, sel_emptyState);
  }
  else
  {
    *(_QWORD *)&v95 = *(_QWORD *)(v5 + 8);
    *((_QWORD *)&v95 + 1) = v43;
    type metadata accessor for CKSyncEngine.State();
    sub_18A5F37B4();
    sub_18A6A82D4();
    v47 = v42;
    sub_18A6291A0();
    sub_18A5F40AC();
    sub_18A6A82D4();
    v44 = CKSyncEngine.State.init(_:)((uint64_t *)&v95);
    sub_18A6A82E0();
  }
  *(_QWORD *)(v3 + 128) = v44;
  v48 = *(_BYTE *)(v5 + 40);
  v49 = sub_18A5F37B4();
  *(_DWORD *)(v49 + 20) = 0;
  *(_BYTE *)(v49 + 16) = v48;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8CloudKit10SyncEngine_isAutomaticSyncEnabledLock) = v49;
  objc_msgSend(*(id *)(v44 + 16), sel_moveInFlightChangesToPending);
  sub_18A677CF4();
  sub_18A5F37B4();
  sub_18A6A5DE4();
  v50 = sub_18A623E28();
  sub_18A6A73E0(v50, v51, (uint64_t)&unk_1EDF6C800);
  sub_18A6A54D0();
  v52 = sub_18A677F88();
  if (v52)
  {
    v53 = (void *)v52;
    v54 = sub_18A5F37B4();
    sub_18A6A5DE4();
    sub_18A634FA4();
    sub_18A69A92C((uint64_t)v53, 0, (uint64_t)&unk_1EDF6C850, v54);

    sub_18A6A54D0();
  }
  if (objc_msgSend(v90, sel_scope) == (id)3)
  {
    sub_18A5F37B4();
    sub_18A6A5DE4();
    v55 = sub_18A623E28();
    sub_18A6A73E0(v55, v56, (uint64_t)&unk_1EDF6C840);
    sub_18A6A54D0();
  }
  v57 = *(void **)(*(_QWORD *)(v3 + 128) + 16);
  v58 = sub_18A5F37B4();
  sub_18A6A5DE4();
  v98 = sub_18A6A5230;
  v99 = v58;
  *(_QWORD *)&v95 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v95 + 1) = 1107296256;
  v96 = sub_18A6786FC;
  v97 = &unk_1E1F5F490;
  v59 = _Block_copy(&v95);
  v60 = v57;
  sub_18A5F438C();
  sub_18A623D9C(v60, sel_setChangeHandler_);
  _Block_release(v59);

  v61 = objc_msgSend((id)objc_opt_self(), sel_sharedScheduler);
  v62 = sub_18A68F8C4();
  v64 = v63;
  v65 = sub_18A5F37B4();
  sub_18A6A5DE4();
  swift_retain();
  CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(v62, v64, 1, (uint64_t)&unk_1EDF6C810, v65);

  sub_18A5F394C();
  v66 = sub_18A6A54D0();
  v67 = sub_18A5F3CA8(v66, sel_sharedScheduler);
  v68 = sub_18A68FC84();
  v70 = v69;
  v71 = sub_18A5F37B4();
  sub_18A6A5DE4();
  sub_18A623E28();
  CKScheduler.registerActivityIdentifier(_:replaceExistingHandler:handler:)(v68, v70, 1, (uint64_t)&unk_1EDF6C820, v71);

  sub_18A5F3A8C();
  sub_18A6A54D0();
  v72 = sub_18A623B70();
  sub_18A6239F8((uint64_t)v92, v73, v74, v72);
  v75 = (_QWORD *)sub_18A5F37B4();
  v75[2] = 0;
  v75[3] = 0;
  v75[4] = v3;
  v76 = sub_18A64A54C();
  sub_18A6A8290(v76, (uint64_t)&unk_1EDF6C830);
  swift_release();
  if (qword_1EDF6A540 != -1)
    swift_once();
  v77 = sub_18A5F3BA0();
  sub_18A60990C(v77, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v78 = sub_18A6A7910();
  if (sub_18A6A562C(v78))
  {
    v79 = (uint8_t *)sub_18A5F3830();
    *(_QWORD *)&v95 = sub_18A5F3830();
    *(_DWORD *)v79 = 136315138;
    sub_18A64A54C();
    sub_18A6A5BBC();
    v81 = v80;
    sub_18A5F3AA0();
    v93 = sub_18A6A5844(v81, v82, (uint64_t *)&v95);
    sub_18A6A578C();
    sub_18A6A54D0();
    sub_18A5F38AC();
    sub_18A63E290(&dword_18A5C5000, v92, (os_log_type_t)v70, "%s initialized sync engine", v79);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A64A2FC();
  sub_18A6A54D0();

  sub_18A608F0C(v5);
  return v3;
}

void sub_18A677CF4()
{
  unint64_t v0;
  id v1;
  id v2;

  if (qword_1EDF6A628 != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)(qword_1EDF753F8 + 16));
  if (qword_1EDF6A6B0 != -1)
    swift_once();
  v0 = qword_1EDF75410;
  v1 = sub_18A66CCF8((id)qword_1EDF75410, sel_addObject_);
  v2 = sub_18A5F3888((uint64_t)v1, sel_allObjects);
  sub_18A66CBD0();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F3890();
  static SyncEngine.populateLoggingIDs(for:)(v0);
  sub_18A5F37A4();
  os_unfair_lock_unlock((os_unfair_lock_t)(qword_1EDF753F8 + 16));
}

uint64_t sub_18A677DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

#error "18A677EBC: call analysis failed (funcsize=83)"

uint64_t sub_18A677F58()
{
  sub_18A689B84();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A677F88()
{
  if ((CKCurrentProcessIsDaemon() & 1) == 0)
    sub_18A6A78C4();
  return 0;
}

uint64_t sub_18A677FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

#error "18A6780AC: call analysis failed (funcsize=92)"

uint64_t sub_18A67816C()
{
  sub_18A6A7D68();
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A67819C()
{
  uint64_t v0;

  swift_release();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6781C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_task_switch();
}

uint64_t sub_18A6781DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;

  sub_18A6A5538();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  v25 = Notification.object.getter();
  if (!*(_QWORD *)(v22 + 40))
  {
    sub_18A6A7278(v25, &qword_1EDF6A278);
    return sub_18A6A55EC(*(uint64_t (**)(void))(v22 + 8));
  }
  sub_18A5F3B04(v25, &qword_1EDF6C860);
  if ((swift_dynamicCast() & 1) == 0)
    return sub_18A6A55EC(*(uint64_t (**)(void))(v22 + 8));
  v26 = *(NSObject **)(v22 + 48);
  *(_QWORD *)(v22 + 72) = v26;
  sub_18A5F46AC();
  v27 = sub_18A6A73F4();
  *(_QWORD *)(v22 + 80) = v27;
  if (!v27)
  {

    return sub_18A6A55EC(*(uint64_t (**)(void))(v22 + 8));
  }
  if (qword_1EDF6A540 != -1)
    swift_once();
  v28 = sub_18A5F3BA0();
  sub_18A60990C(v28, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v29 = sub_18A6A8168();
  if (sub_18A6A6A68(v26))
  {
    v30 = (uint8_t *)sub_18A5F3830();
    a11 = sub_18A5F3830();
    *(_DWORD *)v30 = 136315138;
    sub_18A64A54C();
    sub_18A6A5BBC();
    sub_18A6A5730();
    *(_QWORD *)(v22 + 48) = sub_18A6A57C4(12, v31, &a11);
    sub_18A62FE8C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18A643358();
    sub_18A6A54D0();
    sub_18A63E290(&dword_18A5C5000, v26, v29, "%s received CKAcceptSharesOperationDidAcceptShare notification", v30);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  sub_18A623CE4();
  return sub_18A6A63E4();
}

uint64_t sub_18A6783CC()
{
  uint64_t v0;

  sub_18A695EC8(*(void **)(v0 + 72));
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6783FC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  swift_release();

  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A678428(char a1, char a2)
{
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78]();
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for TaskPriority();
    sub_18A5F1010((uint64_t)v5, 1, 1, v8);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = v7;
    *(_BYTE *)(v9 + 40) = a1 & 1;
    *(_BYTE *)(v9 + 41) = a2 & 1;
    sub_18A670ABC((uint64_t)v5, (uint64_t)&unk_1EDF6C870, v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_18A67851C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 41) = a6;
  *(_BYTE *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 24) = a4;
  return swift_task_switch();
}

uint64_t sub_18A67853C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  char v34;

  sub_18A6A5538();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v25 = sub_18A5F3BA0();
  v26 = sub_18A60990C(v25, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  sub_18A6A5910();
  v27 = sub_18A6A58AC();
  if (sub_18A6A5810(v26))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A7A08();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = v29;
    sub_18A5F37AC();
    *(_QWORD *)(v22 + 16) = sub_18A6A5948(v30, v31, &a11);
    sub_18A6A5D8C();
    sub_18A610384();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v26, v27, "%s calling Swift changeHandler", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A5F4804();

  v32 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v22 + 32) = v32;
  *v32 = v22;
  v32[1] = sub_18A6786C8;
  sub_18A663918();
  return sub_18A68C524(v33, v34);
}

uint64_t sub_18A6786C8()
{
  uint64_t v0;

  sub_18A6239A4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6786FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_18A678744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t sub_18A67875C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_18A5F46AC();
  v1 = sub_18A6A73F4();
  *(_QWORD *)(v0 + 56) = v1;
  if (!v1)
    return sub_18A623BC8(1, *(uint64_t (**)(void))(v0 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_18A6787D8;
  v3 = sub_18A6A5E14(*(_QWORD *)(v0 + 40));
  return sub_18A68FFA4(v3);
}

uint64_t sub_18A6787D8(uint64_t a1)
{
  sub_18A6A5A8C(a1);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A678804()
{
  uint64_t v0;

  swift_release();
  return sub_18A623BC8(*(_QWORD *)(v0 + 72), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A678830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t sub_18A678848()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_18A5F46AC();
  v1 = sub_18A6A73F4();
  *(_QWORD *)(v0 + 56) = v1;
  if (!v1)
    return sub_18A623BC8(1, *(uint64_t (**)(void))(v0 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_18A6788C4;
  v3 = sub_18A6A5E14(*(_QWORD *)(v0 + 40));
  return sub_18A6913A4(v3);
}

uint64_t sub_18A6788C4(uint64_t a1)
{
  sub_18A6A5A8C(a1);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6788F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 32) = a4;
  sub_18A5F101C(&qword_1EDF6A680);
  *(_QWORD *)(v4 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A678950()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A68CE64();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_18A6789A0;
  return sub_18A6997E0();
}

uint64_t sub_18A6789A0()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6789DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v22;
  sub_18A68FCB8();
  if ((v27 & 1) != 0)
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v28 = sub_18A5F3BA0();
    v29 = sub_18A60990C(v28, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A63E2B8();
    v30 = sub_18A6A6C48();
    if (sub_18A6A5900(v30))
    {
      v31 = (uint8_t *)sub_18A5F3830();
      a11 = sub_18A5F3830();
      *(_DWORD *)v31 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v33 = v32;
      sub_18A5F37AC();
      v35 = sub_18A6A5844(v33, v34, &a11);
      sub_18A6A770C(v35);
      sub_18A6A5D8C();
      sub_18A5F38AC();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v29, v24, "%s automatic syncing is enabled. Preparing and scheduling initial sync.", v31);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 56) = v42;
    *v42 = v22;
    v42[1] = sub_18A678C78;
    return sub_18A6A63C8();
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v36 = sub_18A5F3BA0();
    sub_18A60990C(v36, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v37 = sub_18A6A6C48();
    if (sub_18A6A5810(v23))
    {
      v38 = (uint8_t *)sub_18A5F3830();
      a11 = sub_18A5F3830();
      sub_18A6A76FC(4.8149e-34);
      sub_18A5F3E6C();
      sub_18A699D34();
      v40 = v39;
      sub_18A5F37AC();
      *(_QWORD *)(v22 + 16) = sub_18A6A57C4(v40, v41, &a11);
      sub_18A6A5860();
      sub_18A643358();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v23, v37, "%s automatic syncing is disabled.", v38);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    swift_task_dealloc();
    return sub_18A6A55EC(*(uint64_t (**)(void))(v22 + 8));
  }
}

uint64_t sub_18A678C78()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A678CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = sub_18A5F40B4();
  sub_18A6239F8(v1, v3, v4, v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_18A678D10;
  v6 = sub_18A6A5E14(*(_QWORD *)(v0 + 40));
  return sub_18A694D38(v6);
}

uint64_t sub_18A678D10()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_18A5F4328();
  v1 = *v0;
  v3 = sub_18A5F416C(v2);
  sub_18A6A6C74(v3, &qword_1EDF6A680);
  swift_task_dealloc();
  return sub_18A6A5B88(*(uint64_t (**)(void))(v1 + 8));
}

void SyncEngine.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  id *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  sub_18A5F44DC();
  a21 = v25;
  a22 = v26;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v27 = sub_18A5F3BA0();
  sub_18A60990C(v27, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v28 = sub_18A6A7910();
  if (sub_18A6A5660(v28))
  {
    v29 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A815C();
    sub_18A6A5824(4.8149e-34);
    sub_18A6A5BBC();
    sub_18A6A5730();
    sub_18A6A57C4(12, v30, &a10);
    sub_18A6A5870();
    sub_18A6A54D0();
    sub_18A643358();
    sub_18A63E290(&dword_18A5C5000, v23, v24, "%s deallocating sync engine actor", v29);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A6A54D0();
  sub_18A69AE84();
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_18A6A4B10((uint64_t)(v22 + 34), &qword_1EDF6A278);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  sub_18A6A7F58((uint64_t)v22 + OBJC_IVAR____TtC8CloudKit10SyncEngine_lastForegroundTriggeredFetchDate);
  sub_18A6A7F58((uint64_t)v22 + OBJC_IVAR____TtC8CloudKit10SyncEngine_earliestStartDateForSchedulerActivities);
  swift_bridgeObjectRelease();
  sub_18A6A7120();
  sub_18A6A7120();
  sub_18A6A7120();
  v31 = (char *)v22 + OBJC_IVAR____TtC8CloudKit10SyncEngine_stateTelemetrySubmissionDate;
  v32 = sub_18A5F40B4();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  sub_18A6A7120();
  sub_18A6A7120();
  swift_defaultActor_destroy();
  sub_18A5F3CFC();
}

#error "18A679010: call analysis failed (funcsize=6)"

void sub_18A679020()
{
  sub_18A5F46AC();
  sub_18A6A8048();
}

void sub_18A679044(uint64_t a1)
{
  uint64_t v1;

  sub_18A5F40A4();
  *(_QWORD *)(v1 + 184) = a1;
  sub_18A5F42C8();
}

void sub_18A679074()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

uint64_t SyncEngine.repeatZoneModificationsUntilNoneLeft.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 193);
}

uint64_t sub_18A6790B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 56) = *((_BYTE *)a1 + 8);
  *(_QWORD *)(v2 + 32) = a1[2];
  return sub_18A5F4434();
}

uint64_t sub_18A6790D8()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, char, uint64_t, char, uint64_t, uint64_t);

  v1 = *(void **)(v0 + 32);
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, uint64_t, char, uint64_t, uint64_t))((char *)&dword_1EDF6B238
                                                                                                + dword_1EDF6B238);
  swift_bridgeObjectRetain();
  v2 = v1;
  sub_18A5F3E6C();
  v3 = (_QWORD *)sub_18A6A563C();
  *(_QWORD *)(v0 + 40) = v3;
  *v3 = v0;
  v3[1] = sub_18A679168;
  return v5((uint64_t)v5, (uint64_t)"engine/send-changes", 19, 2, *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16));
}

uint64_t sub_18A679168()
{
  sub_18A6A678C();
  return sub_18A5F3A94();
}

uint64_t sub_18A6791A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A6791B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 + 64) = *(_BYTE *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 65) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 24);
  return sub_18A5F4434();
}

uint64_t sub_18A6791E4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 65);
  v4 = *(_BYTE *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = sub_18A5F37B4();
  *(_QWORD *)(v0 + 40) = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_BYTE *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v1;
  *(_BYTE *)(v6 + 40) = v3;
  *(_QWORD *)(v6 + 48) = v2;
  sub_18A64A54C();
  sub_18A5F3898();
  v7 = v2;
  v8 = (_QWORD *)sub_18A6A6F6C();
  *(_QWORD *)(v0 + 48) = v8;
  *v8 = v0;
  v8[1] = sub_18A679290;
  return sub_18A6A7184((uint64_t)&unk_1EDF6C5F8, v6);
}

uint64_t sub_18A679290()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  sub_18A64A154(&v4);
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return sub_18A5F3A94();
  swift_release();
  return sub_18A5F4680((uint64_t (*)(void))v1[1]);
}

uint64_t sub_18A6792F0()
{
  uint64_t v0;

  swift_release();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A67931C(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  *(_BYTE *)(v5 + 16) = a2 & 1;
  *(_QWORD *)(v5 + 24) = a3;
  *(_BYTE *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 48) = v6;
  *v6 = v5;
  v6[1] = sub_18A679380;
  return sub_18A6793C8(v5 + 16);
}

uint64_t sub_18A679380()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5DBC();
  if (!v0)
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6793BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A6793C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 + 81) = *(_BYTE *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 248) = v1;
  *(_QWORD *)(v2 + 256) = v3;
  *(_BYTE *)(v2 + 82) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v2 + 264) = *(_QWORD *)(a1 + 24);
  return sub_18A5F4434();
}

#error "18A67954C: call analysis failed (funcsize=147)"

uint64_t sub_18A67966C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6796A4()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A69A518(*(id *)(v0 + 264));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v1;
  sub_18A6A67FC(v1, (uint64_t)sub_18A6796F4);
  return sub_18A68C2A4();
}

uint64_t sub_18A6796F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;
  _QWORD *v6;
  uint64_t v7;

  sub_18A6A5BE8();
  sub_18A64A154(v3);
  *(_QWORD *)(v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
    return sub_18A5F3EA4();
  v5 = *(id *)(v1 + 264);
  v6 = (_QWORD *)sub_18A6433B4();
  *(_QWORD *)(v1 + 304) = v6;
  *v6 = v2;
  v6[1] = sub_18A679770;
  v7 = sub_18A6A5854();
  return sub_18A6A69E0(v7);
}

uint64_t sub_18A679770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_18A6A5778();
  sub_18A5F4328();
  sub_18A64A154(v3);
  *(_QWORD *)(v0 + 312) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_18A6A5560();
  v5 = *(unsigned __int8 *)(v0 + 82);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(void **)(v0 + 264);
  v8 = *(_BYTE *)(v0 + 81);

  *(_BYTE *)(v0 + 160) = v8;
  v9 = v0 + 160;
  *(_QWORD *)(v9 + 8) = v7;
  *(_BYTE *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v6;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 160) = v10;
  *v10 = v2;
  v10[1] = sub_18A679810;
  sub_18A6A5854();
  sub_18A663A04();
  return sub_18A679FF4(v11);
}

uint64_t sub_18A679810()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  sub_18A5F4328();
  sub_18A64A154(v3);
  v0[41] = v1;
  swift_task_dealloc();
  if (v1)
    return sub_18A5F3A94();
  v0[42] = 0;
  v5 = (_QWORD *)swift_task_alloc();
  v0[43] = v5;
  *v5 = v2;
  v5[1] = sub_18A679888;
  return sub_18A6A7174();
}

uint64_t sub_18A679888()
{
  sub_18A6A7D54();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6798BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;
  const void *v6;

  v1 = *(unsigned __int8 *)(v0 + 82);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(void **)(v0 + 264);
  *(_QWORD *)(v0 + 88) = *(unsigned __int8 *)(v0 + 81);
  *(_QWORD *)(v0 + 96) = v2;
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 112) = v3;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_BYTE *)(v0 + 152) = -80;
  swift_bridgeObjectRetain();
  v4 = v3;
  v5 = (_QWORD *)sub_18A6A563C();
  *(_QWORD *)(v0 + 352) = v5;
  *v5 = v0;
  v5[1] = sub_18A679944;
  v6 = (const void *)sub_18A6A6C7C();
  return sub_18A69AF2C(v6);
}

uint64_t sub_18A679944()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

#error "18A679C84: call analysis failed (funcsize=243)"

uint64_t sub_18A679DAC()
{
  uint64_t v0;
  void *v1;

  sub_18A623A14();
  v1 = *(void **)(v0 + 368);
  sub_18A6239A4();

  sub_18A6A5670();
  return sub_18A5F3A94();
}

uint64_t sub_18A679DE8()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 336) = *(_QWORD *)(v0 + 368);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v1;
  sub_18A6A67FC(v1, (uint64_t)sub_18A679888);
  return sub_18A6A6014();
}

uint64_t sub_18A679E30()
{
  uint64_t v0;
  _QWORD *v1;
  int v2;
  void *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  sub_18A6A5778();
  sub_18A6A6518();
  v3 = (void *)sub_18A6A82A8();
  v4 = sub_18A6A7228(v3);
  sub_18A6A6620();
  if (v2 == 1)
  {
    v5 = (_QWORD *)swift_task_alloc();
    v1[47] = v5;
    *v5 = v1;
    v5[1] = sub_18A679DAC;
    v6 = sub_18A6A5854();
    return sub_18A6A5D78(v6);
  }
  else
  {
    sub_18A6A60BC();

    v1[42] = v0;
    v8 = (_QWORD *)swift_task_alloc();
    v1[43] = v8;
    sub_18A6A67FC(v8, (uint64_t)sub_18A679888);
    return sub_18A6A58BC();
  }
}

uint64_t sub_18A679EC4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  sub_18A6A5778();

  sub_18A6A6518();
  v3 = (void *)sub_18A6A82A8();
  v4 = sub_18A6A7228(v3);
  sub_18A6A6620();
  if (v2 == 1)
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 376) = v5;
    *v5 = v1;
    v5[1] = sub_18A679DAC;
    v6 = sub_18A6A5854();
    return sub_18A6A5D78(v6);
  }
  else
  {
    sub_18A6A60BC();

    *(_QWORD *)(v1 + 336) = v0;
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 344) = v8;
    sub_18A6A67FC(v8, (uint64_t)sub_18A679888);
    return sub_18A6A58BC();
  }
}

uint64_t sub_18A679F60()
{
  uint64_t v0;
  _QWORD *v1;
  int v2;
  void *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  sub_18A6A5778();
  sub_18A6A6518();
  v3 = (void *)sub_18A6A82A8();
  v4 = sub_18A6A7228(v3);
  sub_18A6A6620();
  if (v2 == 1)
  {
    v5 = (_QWORD *)swift_task_alloc();
    v1[47] = v5;
    *v5 = v1;
    v5[1] = sub_18A679DAC;
    v6 = sub_18A6A5854();
    return sub_18A6A5D78(v6);
  }
  else
  {
    sub_18A6A60BC();

    v1[42] = v0;
    v8 = (_QWORD *)swift_task_alloc();
    v1[43] = v8;
    sub_18A6A67FC(v8, (uint64_t)sub_18A679888);
    return sub_18A6A58BC();
  }
}

uint64_t sub_18A679FF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 656) = v1;
  *(_QWORD *)(v2 + 664) = *v1;
  *(_BYTE *)(v2 + 760) = *(_BYTE *)a1;
  *(_QWORD *)(v2 + 672) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v2 + 761) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v2 + 680) = *(_QWORD *)(a1 + 24);
  return sub_18A5F4434();
}

uint64_t sub_18A67A030()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  sub_18A623E50();
  v1 = *(_BYTE *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_BYTE *)(v2 + 193);
  *(_QWORD *)(v0 + 688) = *(_QWORD *)(v2 + 176);
  *(_BYTE *)(v0 + 762) = v3;
  *(_QWORD *)(v0 + 696) = MEMORY[0x1E0DEE9E0];
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_BYTE *)(v0 + 761);
  v6 = *(_QWORD *)(v0 + 672);
  v7 = sub_18A64A278();
  *(_QWORD *)(v0 + 704) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  *(_BYTE *)(v7 + 24) = v1;
  *(_QWORD *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 712) = v8;
  *v8 = v0;
  v8[1] = sub_18A67A0E8;
  sub_18A6A7A64();
  sub_18A623D08();
  return sub_18A6733CC(v9, v10, v11, v12);
}

uint64_t sub_18A67A0E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A64A154(v2);
  *(_QWORD *)(v0 + 720) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  return sub_18A5F3A94();
}

void sub_18A67A148()
{
  __n128 *v0;
  unsigned __int8 *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 *v6;
  void **v7;
  _QWORD *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  char v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  int64_t v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  void *v68;
  char v69;
  unint64_t v70;
  unsigned __int8 v71;
  unint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unint64_t v95;
  __n128 *v96;
  uint64_t v97;
  __n128 *v98;
  unint64_t v99;
  int64_t v100;
  __n128 *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;

  sub_18A6A6AA8();
  v1 = &v0[47].n128_u8[8];
  if (!v0[33].n128_u64[0])
  {
    v26 = v0;
    v25 = (_QWORD *)v0[43].n128_u64[1];
LABEL_77:
    v26[45].n128_u64[1] = (unint64_t)v25;
    v70 = v26[42].n128_u64[1];
    v71 = v26[47].n128_u8[9];
    v72 = v26[42].n128_u64[0];
    v73 = *v1;
    v74 = v26[41].n128_u64[0];
    v75 = sub_18A64A278();
    v26[46].n128_u64[0] = v75;
    *(_QWORD *)(v75 + 16) = v74;
    *(_BYTE *)(v75 + 24) = v73;
    *(_QWORD *)(v75 + 32) = v72;
    *(_BYTE *)(v75 + 40) = v71;
    *(_QWORD *)(v75 + 48) = v70;
    v76 = (_QWORD *)swift_task_alloc();
    v26[46].n128_u64[1] = (unint64_t)v76;
    *v76 = v26;
    v76[1] = sub_18A67A944;
    sub_18A6A7A64();
    sub_18A6A7438();
    sub_18A672FD8(v77, v78, v79, v80);
    return;
  }
  v93 = v0[33].n128_i64[0];
  v94 = &v0[47].n128_u8[8];
  v2 = v0[33].n128_u64[1];
  v95 = v0[34].n128_u64[1];
  v3 = *(_QWORD *)(v2 + 16);
  v4 = (_QWORD *)v0[43].n128_u64[1];
  v98 = v0;
  if (v3)
  {
    v5 = (uint64_t)&v0[28];
    v102 = &v0[37].n128_u64[1];
    v6 = v0 + 38;
    sub_18A66CCC0();
    sub_18A5F3898();
    v7 = (void **)(v2 + 40);
    v8 = v4;
    do
    {
      v104 = v3;
      v9 = *v7;
      v10 = *(v7 - 1);
      v11 = v9;
      *v102 = (unint64_t)sub_18A6A6ED4((uint64_t)v11, sel_zoneID);
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      sub_18A6A4AD4((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
      AnyHashable.init<A>(_:)();
      v12 = v11;
      v13 = sub_18A6A6C50();
      v6->n128_u64[0] = (unint64_t)v8;
      sub_18A62E960(v5);
      sub_18A6A641C();
      if (v16)
        goto LABEL_81;
      v17 = v14;
      v18 = v15;
      sub_18A5F101C(&qword_1EDF6A0B0);
      if (sub_18A6A7F34(v13))
      {
        v19 = sub_18A62E960(v5);
        if ((v18 & 1) != (v20 & 1))
        {
LABEL_50:
          sub_18A6A6120();
          return;
        }
        v17 = v19;
      }
      v21 = (_QWORD *)v6->n128_u64[0];
      if ((v18 & 1) != 0)
      {
        v22 = v21[7];

        *(_QWORD *)(v22 + 8 * v17) = v12;
        v8 = v21;
      }
      else
      {
        sub_18A6A6840((uint64_t)&v21[v17 >> 6]);
        sub_18A62F8E8(v5, v21[6] + 40 * v17);
        *(_QWORD *)(v21[7] + 8 * v17) = v12;
        v23 = v21[2];
        v16 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v16)
          goto LABEL_84;
        v8 = v21;
        v21[2] = v24;
      }
      sub_18A6A6600();
      sub_18A61C6E8(v5);

      v7 += 2;
      --v3;
    }
    while (v104 != 1);
    sub_18A610384();
    v0 = v98;
    v25 = v8;
  }
  else
  {
    sub_18A629140();
    sub_18A5F3898();
    v25 = v4;
  }
  v96 = v0 + 4;
  v97 = (uint64_t)&v0[1];
  v27 = (uint64_t)&v0[23];
  v92 = &v0[15].n128_u64[1];
  v101 = v0 + 39;
  v28 = &v0[39].n128_u64[1];
  sub_18A610384();
  sub_18A5F37A4();
  sub_18A66BC64(&v0[30].n128_u64[1], v95);
  v103 = v0[30].n128_u64[1];
  v99 = v0[31].n128_u64[0];
  v105 = v0[32].n128_u64[0];
  v29 = v0[32].n128_i64[1];
  v100 = (v0[31].n128_u64[1] + 64) >> 6;
  sub_18A66CCC0();
  sub_18A6542A4();
  if (!v29)
    goto LABEL_18;
LABEL_17:
  sub_18A6A7BB0();
  v31 = v30 | (v105 << 6);
  while (1)
  {
    v37 = *(void **)(*(_QWORD *)(v103 + 48) + 8 * v31);
    v38 = *(void **)(*(_QWORD *)(v103 + 56) + 8 * v31);
    v101->n128_u64[0] = (unint64_t)v37;
    sub_18A6A7E50(0, (unint64_t *)&qword_1ECD967B0);
    sub_18A6A7E58((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
    v39 = v37;
    v40 = v38;
    AnyHashable.init<A>(_:)();
    v41 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v28 = (unint64_t)v25;
    sub_18A62E960(v27);
    sub_18A6A641C();
    if (v16)
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      return;
    }
    v45 = v43;
    v46 = v44;
    sub_18A5F101C(&qword_1EDF6A0B0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v25))
    {
      v47 = sub_18A62E960(v27);
      if ((v46 & 1) != (v48 & 1))
        goto LABEL_50;
      v45 = v47;
    }
    v25 = (_QWORD *)*v28;
    if ((v46 & 1) != 0)
    {
      v49 = v25[7];

      *(_QWORD *)(v49 + 8 * v45) = v41;
    }
    else
    {
      sub_18A6A6840((uint64_t)&v25[v45 >> 6]);
      sub_18A62F8E8(v27, v25[6] + 40 * v45);
      *(_QWORD *)(v25[7] + 8 * v45) = v41;
      v50 = v25[2];
      v16 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v16)
        goto LABEL_82;
      v25[2] = v51;
    }
    sub_18A6A6600();
    sub_18A61C6E8(v27);

    if (v29)
      goto LABEL_17;
LABEL_18:
    if (__OFADD__(v105, 1))
      goto LABEL_83;
    if ((uint64_t)(v105 + 1) >= v100)
      break;
    sub_18A6A7BA4();
    if (!v33)
    {
      sub_18A6A7B98();
      if (v34 == v16)
        break;
      sub_18A6A7B80();
      if (!v33)
      {
        sub_18A6A7B98();
        if (v34 == v16)
          break;
        sub_18A6A7B80();
        if (!v33)
        {
          sub_18A6A7B98();
          if (v34 == v16)
            break;
          sub_18A6A7B80();
          if (!v33)
          {
            sub_18A6A7B98();
            if (v34 == v16)
              break;
            sub_18A6A7B80();
            if (!v33)
            {
              v32 = v35 + 5;
              if (v35 + 5 >= v100)
                break;
              v33 = *(_QWORD *)(v99 + 8 * v32);
              if (!v33)
              {
                v36 = v105 + 7;
                do
                {
                  if (v36 >= v100)
                    goto LABEL_51;
                  sub_18A6A7B58();
                }
                while (!v33);
                v32 = v36 - 1;
              }
            }
          }
        }
      }
    }
    v29 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v32 << 6);
    v105 = v32;
  }
LABEL_51:
  v52 = v94[2];
  swift_release();
  sub_18A667364();
  sub_18A6A4B40(v93);
  sub_18A5F460C();
  if (v52 != 1)
  {
LABEL_76:
    v26 = v98;
    v1 = v94;
    goto LABEL_77;
  }
  v53 = v98[45].n128_i64[0];
  sub_18A66BC64(v92, v25);
  v54 = v98[15].n128_i64[1];
  v106 = v98[16].n128_i64[0];
  v55 = v98[17].n128_i64[0];
  v56 = v98[17].n128_u64[1];
  v57 = (v98[16].n128_u64[1] + 64) >> 6;
  sub_18A66CCC0();
  while (1)
  {
    if (v56)
    {
      v58 = __clz(__rbit64(v56));
      v56 &= v56 - 1;
      v59 = v58 | (v55 << 6);
      goto LABEL_73;
    }
    if (__OFADD__(v55, 1))
      goto LABEL_85;
    if (v55 + 1 >= v57)
      goto LABEL_79;
    sub_18A6A7BA4();
    if (!v62)
    {
      if (v61 + 1 >= v57)
        goto LABEL_79;
      sub_18A6A84A8();
      if (!v62)
      {
        if (v63 + 2 >= v57)
          goto LABEL_79;
        sub_18A6A84A8();
        if (!v62)
        {
          if (v64 + 3 >= v57)
            goto LABEL_79;
          sub_18A6A84A8();
          if (!v62)
          {
            if (v65 + 4 >= v57)
              goto LABEL_79;
            sub_18A6A84A8();
            if (!v62)
            {
              v60 = v66 + 5;
              if (v66 + 5 >= v57)
                goto LABEL_79;
              v62 = *(_QWORD *)(v106 + 8 * v60);
              if (!v62)
                break;
            }
          }
        }
      }
    }
LABEL_72:
    v56 = (v62 - 1) & v62;
    v59 = __clz(__rbit64(v62)) + (v60 << 6);
    v55 = v60;
LABEL_73:
    sub_18A6A74CC(*(_QWORD *)(v54 + 48));
    v68 = *(void **)(*(_QWORD *)(v54 + 56) + 8 * v59);
    v98[6].n128_u64[1] = (unint64_t)v68;
    sub_18A6A7A24(v68, *v96, v96[1]);
    v69 = sub_18A67B1D8((void *)v98[3].n128_u64[1]);
    sub_18A6A4B10(v97, &qword_1EDF6C5A8);
    if (v53)
    {
      sub_18A6A6158();
      return;
    }
    if ((v69 & 1) != 0)
    {
      sub_18A5F38AC();
      sub_18A5F3AA0();
      goto LABEL_76;
    }
  }
  v67 = v55 + 7;
  while (v67 < v57)
  {
    sub_18A6A7B58();
    if (v62)
    {
      v60 = v67 - 1;
      goto LABEL_72;
    }
  }
LABEL_79:
  sub_18A5F38AC();
  sub_18A5F3AA0();
  v94[2] = 1;
  v98[43].n128_u64[1] = (unint64_t)v25;
  v81 = v98[42].n128_i64[1];
  v82 = v98[47].n128_i8[9];
  v83 = v98[42].n128_i64[0];
  v84 = *v94;
  v85 = v98[41].n128_i64[0];
  v86 = sub_18A64A278();
  v98[44].n128_u64[0] = v86;
  *(_QWORD *)(v86 + 16) = v85;
  *(_BYTE *)(v86 + 24) = v84;
  *(_QWORD *)(v86 + 32) = v83;
  *(_BYTE *)(v86 + 40) = v82;
  *(_QWORD *)(v86 + 48) = v81;
  v87 = (_QWORD *)swift_task_alloc();
  v98[44].n128_u64[1] = (unint64_t)v87;
  *v87 = v98;
  v87[1] = sub_18A67A0E8;
  sub_18A6A7A64();
  sub_18A6A613C(v88, v89, v90, v91);
}

uint64_t sub_18A67A910()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A67A944()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A64A154(v2);
  *(_QWORD *)(v0 + 752) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  return sub_18A5F3A94();
}

void sub_18A67A9A4()
{
  __n128 *v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  char v77;
  uint64_t (*v78)(void);
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unint64_t v94;
  __n128 *v95;
  uint64_t v96;
  __n128 *v97;
  unint64_t v98;
  int64_t v99;
  __n128 *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;

  sub_18A6A6AA8();
  v97 = v0;
  if (!v0[35].n128_u64[0])
  {
    v23 = (_QWORD *)v0[45].n128_u64[1];
    goto LABEL_15;
  }
  v93 = v0[35].n128_i64[0];
  v1 = v0[35].n128_u64[1];
  v94 = v0[36].n128_u64[1];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = (_QWORD *)v0[45].n128_u64[1];
  if (v2)
  {
    v4 = (uint64_t)&v0[18];
    v102 = &v0[38].n128_u64[1];
    sub_18A66CCC0();
    sub_18A5F3898();
    v5 = (void **)(v1 + 40);
    v6 = v3;
    do
    {
      v7 = *v5;
      v8 = *(v5 - 1);
      v9 = v7;
      v0[40].n128_u64[0] = (unint64_t)sub_18A6A6ED4((uint64_t)v9, sel_recordID);
      sub_18A6A7E50(0, (unint64_t *)&unk_1EDF6A8F0);
      sub_18A6A7E58((unint64_t *)&qword_1EDF6A400, (unint64_t *)&unk_1EDF6A8F0);
      AnyHashable.init<A>(_:)();
      v10 = v9;
      v11 = v6;
      v12 = sub_18A6A64B4();
      *v102 = (unint64_t)v11;
      sub_18A62E960(v4);
      sub_18A6A641C();
      if (v15)
        goto LABEL_82;
      v16 = v13;
      v17 = v14;
      sub_18A5F101C(&qword_1EDF6A0B0);
      if (sub_18A6A7F40(v12))
      {
        v18 = sub_18A62E960(v4);
        if ((v17 & 1) != (v19 & 1))
        {
LABEL_51:
          sub_18A6A6120();
          return;
        }
        v16 = v18;
      }
      v6 = (_QWORD *)*v102;
      if ((v17 & 1) != 0)
      {
        v20 = v6[7];
        sub_18A6A8344();
        *(_QWORD *)(v20 + 8 * v16) = v10;
      }
      else
      {
        sub_18A6A6840((uint64_t)&v6[v16 >> 6]);
        sub_18A62F8E8(v4, v6[6] + 40 * v16);
        *(_QWORD *)(v6[7] + 8 * v16) = v10;
        v21 = v6[2];
        v15 = __OFADD__(v21, 1);
        v22 = v21 + 1;
        if (v15)
          goto LABEL_85;
        v6[2] = v22;
      }
      sub_18A6A6600();
      sub_18A61C6E8(v4);

      v5 += 2;
      --v2;
    }
    while (v2);
    sub_18A5F3FE4();
    v23 = v6;
  }
  else
  {
    sub_18A6239CC();
    sub_18A5F3898();
    v23 = v3;
  }
  v95 = v0 + 10;
  v96 = (uint64_t)&v0[7];
  v91 = v0 + 13;
  v92 = &v0[47].n128_u8[8];
  v25 = (uint64_t)&v0[25].n128_i64[1];
  v100 = v0 + 37;
  v26 = &v0[40].n128_u64[1];
  sub_18A5F3FE4();
  sub_18A5F37A4();
  sub_18A66BC64(&v0[20].n128_u64[1], v94);
  v101 = v0[20].n128_u64[1];
  v98 = v0[21].n128_u64[0];
  v103 = v0[22].n128_u64[0];
  v27 = v0[22].n128_u64[1];
  v99 = (v0[21].n128_u64[1] + 64) >> 6;
  sub_18A66CCC0();
  sub_18A6A6020();
  if (!v27)
    goto LABEL_20;
LABEL_19:
  sub_18A6A6F58();
  v29 = v28 | (v103 << 6);
  while (1)
  {
    v41 = *(void **)(*(_QWORD *)(v101 + 48) + 8 * v29);
    v100->n128_u64[0] = (unint64_t)v41;
    sub_18A6A7E50(0, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A6A7E58((unint64_t *)&qword_1EDF6A400, (unint64_t *)&unk_1EDF6A8F0);
    v42 = sub_18A6A7234();
    v43 = sub_18A6A8468();
    AnyHashable.init<A>(_:)();
    v44 = v43;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v26 = (unint64_t)v23;
    sub_18A62E960(v25);
    sub_18A6A641C();
    if (v15)
    {
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      return;
    }
    v48 = v46;
    v49 = v47;
    sub_18A5F101C(&qword_1EDF6A0B0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v23))
    {
      v50 = sub_18A62E960(v25);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_51;
      v48 = v50;
    }
    v23 = (_QWORD *)*v26;
    if ((v49 & 1) != 0)
    {
      v52 = v23[7];
      sub_18A6A8344();
      *(_QWORD *)(v52 + 8 * v48) = v44;
    }
    else
    {
      sub_18A6A6840((uint64_t)&v23[v48 >> 6]);
      sub_18A62F8E8(v25, v23[6] + 40 * v48);
      *(_QWORD *)(v23[7] + 8 * v48) = v44;
      v53 = v23[2];
      v15 = __OFADD__(v53, 1);
      v54 = v53 + 1;
      if (v15)
        goto LABEL_83;
      v23[2] = v54;
    }
    sub_18A6A6600();
    sub_18A61C6E8(v25);

    if (v27)
      goto LABEL_19;
LABEL_20:
    if (__OFADD__(v103, 1))
      goto LABEL_84;
    if ((uint64_t)(v103 + 1) >= v99)
      goto LABEL_52;
    sub_18A6A7BA4();
    if (!v30)
    {
      sub_18A6A7B8C();
      if (v31 == v15)
        goto LABEL_52;
      sub_18A6A81D0();
      if (!v32)
      {
        sub_18A6A7B8C();
        if (v31 == v15)
          goto LABEL_52;
        sub_18A6A81D0();
        if (!v33)
        {
          sub_18A6A7B8C();
          if (v31 == v15)
            goto LABEL_52;
          sub_18A6A81D0();
          if (!v34)
          {
            sub_18A6A7B8C();
            if (v31 == v15)
              goto LABEL_52;
            sub_18A6A81D0();
            if (!v36)
            {
              if (v35 + 5 >= v99)
                goto LABEL_52;
              if (!*(_QWORD *)(v98 + 8 * (v35 + 5)))
                break;
            }
          }
        }
      }
    }
LABEL_40:
    sub_18A6A7B38();
    v29 = v40 + (v39 << 6);
    v103 = v39;
  }
  v37 = v103 + 7;
  while (v37 < v99)
  {
    sub_18A6A7B58();
    if (v38)
      goto LABEL_40;
  }
LABEL_52:
  swift_release();
  sub_18A667364();
  sub_18A6A4B40(v93);
  sub_18A5F37A4();
  if (!v23[2])
    goto LABEL_80;
  if (*(_BYTE *)(v97[41].n128_u64[0] + 192) != 1)
  {
LABEL_15:
    if (v23[2])
    {
      sub_18A6A9260();
      related decl 'e' for CKErrorCode.init(partialErrors:description:)(v24, 0xD000000000000016, 0x800000018A840BE0);
      sub_18A6A81DC();
      sub_18A643358();
      sub_18A6A6174((uint64_t (*)(void))v97->n128_u64[1]);
    }
    else
    {
      sub_18A643358();
      v78 = (uint64_t (*)(void))sub_18A6A5838();
      sub_18A6A6174(v78);
    }
    return;
  }
  v55 = v97[47].n128_i64[0];
  sub_18A66BC64(v91, v23);
  v56 = v97[13].n128_i64[0];
  v104 = v97[13].n128_i64[1];
  v57 = v97[14].n128_i64[1];
  v58 = v97[15].n128_i64[0];
  v59 = (v97[14].n128_u64[0] + 64) >> 6;
  sub_18A66CCC0();
  while (1)
  {
    if (v58)
    {
      sub_18A6A6F58();
      v61 = v60 | (v57 << 6);
      goto LABEL_74;
    }
    if (__OFADD__(v57, 1))
      goto LABEL_86;
    if (v57 + 1 >= v59)
      goto LABEL_79;
    sub_18A6A7BA4();
    if (!v63)
    {
      if (v62 + 1 >= v59)
        goto LABEL_79;
      sub_18A6A80F4();
      if (!v65)
      {
        if (v64 + 2 >= v59)
          goto LABEL_79;
        sub_18A6A80F4();
        if (!v67)
        {
          if (v66 + 3 >= v59)
            goto LABEL_79;
          sub_18A6A80F4();
          if (!v69)
          {
            if (v68 + 4 >= v59)
              goto LABEL_79;
            sub_18A6A80F4();
            if (!v71)
            {
              if (v70 + 5 >= v59)
                goto LABEL_79;
              if (!*(_QWORD *)(v104 + 8 * (v70 + 5)))
                break;
            }
          }
        }
      }
    }
LABEL_73:
    sub_18A6A7B38();
    v61 = v75 + (v74 << 6);
    v57 = v74;
LABEL_74:
    sub_18A6A74CC(*(_QWORD *)(v56 + 48));
    v76 = *(void **)(*(_QWORD *)(v56 + 56) + 8 * v61);
    v97[12].n128_u64[1] = (unint64_t)v76;
    sub_18A6A7A24(v76, *v95, v95[1]);
    v77 = sub_18A67B1D8((void *)v97[9].n128_u64[1]);
    sub_18A6A4B10(v96, &qword_1EDF6C5A8);
    if (v55)
    {
      sub_18A6A6158();
      return;
    }
    if ((v77 & 1) != 0)
    {
      sub_18A643358();
      sub_18A6A6FD0();
      goto LABEL_15;
    }
  }
  v72 = v57 + 7;
  while (v72 < v59)
  {
    sub_18A6A7B58();
    if (v73)
      goto LABEL_73;
  }
LABEL_79:
  sub_18A643358();
  sub_18A6A6FD0();
LABEL_80:
  v79 = v97[41].n128_i64[0];
  v80 = *(_BYTE *)(v79 + 193);
  v97[43].n128_u64[0] = *(_QWORD *)(v79 + 176);
  v92[2] = v80;
  v97[43].n128_u64[1] = (unint64_t)v23;
  v81 = v97[42].n128_i64[1];
  v82 = v97[47].n128_i8[9];
  v83 = v97[42].n128_i64[0];
  v84 = *v92;
  v85 = sub_18A64A278();
  v97[44].n128_u64[0] = v85;
  *(_QWORD *)(v85 + 16) = v79;
  *(_BYTE *)(v85 + 24) = v84;
  *(_QWORD *)(v85 + 32) = v83;
  *(_BYTE *)(v85 + 40) = v82;
  *(_QWORD *)(v85 + 48) = v81;
  v86 = (_QWORD *)swift_task_alloc();
  v97[44].n128_u64[1] = (unint64_t)v86;
  *v86 = v97;
  v86[1] = sub_18A67A0E8;
  sub_18A6A7A64();
  sub_18A6A613C(v87, v88, v89, v90);
}

uint64_t sub_18A67B0F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A67B124(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;

  *(_BYTE *)(v6 + 16) = a3 & 1;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v8;
  *v8 = v6;
  v8[1] = sub_18A67B19C;
  return sub_18A67B944(a1, v6 + 16);
}

uint64_t sub_18A67B19C()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5DBC();
  if (!v0)
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A67B1D8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t result;
  Swift::String v41;
  _QWORD v42[2];
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v57[5];

  v2 = type metadata accessor for CancellationError();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57[0] = a1;
  type metadata accessor for CKError(0);
  v7 = v6;
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  v9 = v8;
  _BridgedStoredNSError.code.getter();
  v10 = 1;
  if (v56 > 0x24)
    goto LABEL_33;
  if (((1 << v56) & 0x1000A002DALL) != 0)
    return v10;
  if (v56 != 2)
  {
LABEL_33:
    if (v56 - 110 > 5 || ((1 << (v56 - 110)) & 0x23) == 0)
      return 0;
    return v10;
  }
  related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)a1);
  if (!v11)
  {
    if (qword_1EDF6A540 != -1)
LABEL_44:
      swift_once();
    v32 = type metadata accessor for Logger();
    sub_18A60990C(v32, (uint64_t)qword_1EDF6A630);
    v33 = a1;
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v36 = 138412290;
      v38 = v33;
      v39 = _swift_stdlib_bridgeErrorToNSError();
      v57[0] = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v37 = v39;

      _os_log_impl(&dword_18A5C5000, v34, v35, "BUG IN CLOUDKIT: Could not get partial errors from CKError.partialFailure: %@", v36, 0xCu);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      v10 = 1;
      swift_arrayDestroy();
      MEMORY[0x18D76E86C](v37, -1, -1);
      MEMORY[0x18D76E86C](v36, -1, -1);

    }
    else
    {

      return 1;
    }
    return v10;
  }
  v12 = v11;
  v43 = v2;
  v46 = v9;
  v48 = v3;
  sub_18A66BC64(v57, v11);
  v13 = v57[0];
  v49 = v57[1];
  v14 = v57[3];
  v15 = v57[4];
  v50 = (unint64_t)(v57[2] + 64) >> 6;
  v47 = *MEMORY[0x1E0CB2D50];
  v42[1] = v12;
  swift_bridgeObjectRetain();
  v45 = xmmword_18A83AC30;
  v44 = 0x800000018A840940;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_44;
      }
      if (v18 >= v50)
        goto LABEL_38;
      v19 = *(_QWORD *)(v49 + 8 * v18);
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v50)
          goto LABEL_38;
        v19 = *(_QWORD *)(v49 + 8 * v20);
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v50)
            goto LABEL_38;
          v19 = *(_QWORD *)(v49 + 8 * v20);
          if (!v19)
          {
            v20 = v14 + 4;
            if (v14 + 4 >= v50)
              goto LABEL_38;
            v19 = *(_QWORD *)(v49 + 8 * v20);
            if (!v19)
            {
              v20 = v14 + 5;
              if (v14 + 5 >= v50)
                goto LABEL_38;
              v19 = *(_QWORD *)(v49 + 8 * v20);
              if (!v19)
              {
                v20 = v14 + 6;
                if (v14 + 6 >= v50)
                  goto LABEL_38;
                v19 = *(_QWORD *)(v49 + 8 * v20);
                if (!v19)
                {
                  v21 = v14 + 7;
                  while (v21 < v50)
                  {
                    v19 = *(_QWORD *)(v49 + 8 * v21++);
                    if (v19)
                    {
                      v20 = v21 - 1;
                      goto LABEL_25;
                    }
                  }
LABEL_38:
                  swift_bridgeObjectRelease();
                  swift_release();
                  return 0;
                }
              }
            }
          }
        }
      }
LABEL_25:
      v15 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
      v14 = v20;
    }
    v22 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v17);
    v53 = v22;
    v23 = v22;
    v24 = v22;
    sub_18A5F101C(&qword_1EDF6A9D8);
    if (!swift_dynamicCast())
      break;

    v25 = v55;
LABEL_30:
    v31 = sub_18A67B1D8(v25);

    if ((v31 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
    }
  }
  v51 = v15;
  a1 = v7;

  v53 = v22;
  v26 = v22;
  v27 = v5;
  v28 = v43;
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v45;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v30;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = v44;
    Dictionary.init(dictionaryLiteral:)();
    v52 = 20;
    sub_18A6A89EC();
    swift_bridgeObjectRelease();
    _BridgedStoredNSError.init(_:userInfo:)();

    v25 = v55;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v28);

    v5 = v27;
    v7 = a1;
    v15 = v51;
    goto LABEL_30;
  }

  v53 = 0;
  v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  v41._countAndFlagsBits = 0xD000000000000024;
  v41._object = (void *)0x800000018A840910;
  String.append(_:)(v41);
  swift_getErrorValue();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18A67B8CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;

  *(_BYTE *)(v6 + 16) = a3 & 1;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v8;
  *v8 = v6;
  v8[1] = sub_18A67B19C;
  return sub_18A67D870(a1, v6 + 16);
}

uint64_t sub_18A67B944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v2;
  v5 = sub_18A6A7040();
  *(_QWORD *)(v3 + 320) = v5;
  *(_QWORD *)(v3 + 328) = *(_QWORD *)(v5 - 8);
  v6 = sub_18A5F3CBC();
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v3 + 152) = *(_BYTE *)a2;
  *(_QWORD *)(v3 + 336) = v6;
  *(_QWORD *)(v3 + 344) = v9;
  *(_QWORD *)(v3 + 160) = v7;
  *(_BYTE *)(v3 + 168) = v8;
  *(_QWORD *)(v3 + 176) = v9;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 352) = v10;
  *v10 = v3;
  v10[1] = sub_18A67B9CC;
  v11 = sub_18A6A5854();
  return sub_18A67D4D4(v11);
}

uint64_t sub_18A67B9CC()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 360) = v0;
  sub_18A6A5DDC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A67BA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26)
{
  NSObject *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id *v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  void *v57;
  id v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v66;
  uint64_t (*v67)(void);
  NSObject *v68;
  uint64_t v69;

  sub_18A6A567C();
  a25 = v28;
  a26 = v29;
  a24 = v27;
  v30 = v27[45];
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v32 = v27[39];
    v33 = sub_18A5F3BA0();
    sub_18A60990C(v33, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A66CCC0();
    sub_18A63E2B8();
    v34 = sub_18A6A58AC();
    if (sub_18A6A5A4C(v34))
    {
      v35 = sub_18A5F3830();
      a15 = sub_18A5F3830();
      *(_DWORD *)v35 = 136315394;
      v68 = v26;
      sub_18A5F3E6C();
      sub_18A699D34();
      v37 = v36;
      sub_18A5F37AC();
      v27[35] = sub_18A6A5E28(v37, v38, &a15);
      sub_18A6A5940();
      sub_18A5F4804();
      sub_18A5F3A8C();
      *(_WORD *)(v35 + 12) = 2080;
      v39 = sub_18A629140();
      v40 = MEMORY[0x18D76CA0C](v39, &type metadata for CKSyncEngine.PendingDatabaseChange);
      sub_18A610384();
      v27[36] = sub_18A6A67F4(v40, v41, &a15);
      sub_18A6A5740();
      sub_18A654258();
      sub_18A5F3944();
      sub_18A6A5608(&dword_18A5C5000, v68, (os_log_type_t)v32, "%s will send database changes %s", (uint8_t *)v35);
      sub_18A6A56D0();
      sub_18A5F392C();
    }

    sub_18A654258();
    sub_18A5F4804();
    v49 = v27[45];
    v50 = MEMORY[0x1E0DEE9D8];
    v69 = MEMORY[0x1E0DEE9D8];
    a15 = MEMORY[0x1E0DEE9D8];
    sub_18A5F40AC();
    v51 = (id *)(v49 + 40);
    do
    {
      v52 = *(_BYTE *)v51;
      *(v51 - 1);
      if ((v52 & 1) != 0)
      {
        MEMORY[0x18D76C9DC]();
        if (*(_QWORD *)((a15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      else
      {
        MEMORY[0x18D76C9DC]();
        v53 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(_QWORD *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v53 >> 1)
        {
          sub_18A6A7574(v53);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      sub_18A6A7000();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v51 += 2;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    v54 = a15;
    v27[46] = v69;
    v27[47] = v54;
    v27[48] = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), sel_init);
    v55 = *(_QWORD *)(v30 + 16);
    if (v55)
    {
      a15 = v50;
      specialized ContiguousArray.reserveCapacity(_:)();
      v56 = (_BYTE *)(v49 + 40);
      do
      {
        v57 = (void *)*((_QWORD *)v56 - 1);
        if (*v56 == 1)
          v58 = v57;
        else
          v59 = objc_msgSend(v57, sel_zoneID);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        sub_18A6A82B0();
        specialized ContiguousArray._endMutation()();
        v56 += 16;
        --v55;
      }
      while (v55);
      v60 = a15;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v60 = MEMORY[0x1E0DEE9D8];
    }
    v61 = sub_18A6682F4(v60);
    v27[49] = sub_18A6668F4(v61);
    sub_18A5F37A4();
    v62 = (_QWORD *)swift_task_alloc();
    v27[50] = v62;
    *v62 = v27;
    v62[1] = sub_18A67BF28;
    sub_18A6A5854();
    sub_18A6A6AD4();
    return sub_18A696970(v63, v64);
  }
  else
  {
    sub_18A643358();
    if (qword_1EDF6A540 != -1)
      swift_once();
    v42 = sub_18A5F3BA0();
    v43 = sub_18A60990C(v42, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v44 = sub_18A6A58AC();
    if (sub_18A6A5810(v43))
    {
      v45 = (uint8_t *)sub_18A5F3830();
      a15 = sub_18A5F3830();
      *(_DWORD *)v45 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v47 = v46;
      sub_18A5F37AC();
      v27[37] = sub_18A6A67F4(v47, v48, &a15);
      sub_18A6A578C();
      sub_18A5F4804();
      sub_18A5F3944();
      sub_18A63E290(&dword_18A5C5000, v43, v44, "%s no more pending database changes", v45);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    v66 = (_OWORD *)v27[38];
    *v66 = 0u;
    v66[1] = 0u;
    swift_task_dealloc();
    v67 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A6A56B4(v67);
  }
}

uint64_t sub_18A67BF28()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 408) = v0;
  sub_18A6A5DDC();
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

uint64_t sub_18A67BF6C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  sub_18A6A5778();
  v1 = *(_QWORD *)(v0 + 408);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      sub_18A612BCC(0, 1, *(_QWORD *)(v0 + 408));
      sub_18A6239CC();
      sub_18A5F37A4();
      sub_18A6A7938();
    }
    else
    {
      sub_18A5F37A4();
    }
  }
  v2 = *(void **)(v0 + 384);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 248) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 256) = v3;
  v4 = sub_18A6A58B4();
  *(_QWORD *)(v0 + 416) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 368);
  sub_18A6A6DDC((uint64_t)&dword_1EDF6BBC8);
  v5 = v2;
  v6 = (_QWORD *)sub_18A6A68C0();
  *(_QWORD *)(v0 + 424) = v6;
  *v6 = v0;
  v6[1] = sub_18A67C03C;
  sub_18A6A7A88();
  sub_18A663A04();
  return v12(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_18A67C03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A6A5BE8();
  sub_18A6A6DF8();
  *(_QWORD *)(v1 + 432) = v2;
  *(_QWORD *)(v1 + 440) = v3;
  *(_QWORD *)(v1 + 448) = v0;
  sub_18A6A5DDC();
  if (!v0)
  {

    sub_18A5F37E0();
    sub_18A663AB0();
  }
  return sub_18A5F3EA4();
}

void sub_18A67C0B0()
{
  _QWORD *v0;
  unint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char v32;
  BOOL v33;
  uint64_t *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  id *v54;
  id v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::OpaquePointer v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  char v82;
  char v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  unint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  id *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  id *v136;
  _QWORD *v137;
  void *v138;

  v3 = v0;
  v4 = 0;
  v120 = v3 + 27;
  v119 = (void **)(v3 + 28);
  v124 = (id *)(v3 + 29);
  v5 = v3 + 31;
  v6 = v3 + 32;
  v7 = v3[54];
  v133 = v7 + 64;
  sub_18A6A7158();
  v126 = v9 & v8;
  sub_18A6A7ED4();
  v121 = v10 & 0xFFFFFFFFFFFFFF8;
  v131 = v10 & 0xC000000000000001;
  v128 = v10 + 32;
  v11 = MEMORY[0x1E0DEE9D8];
  v123 = v10 >> 62;
  v137 = v3;
  v125 = v3 + 31;
LABEL_2:
  v127 = v11;
  if (v126)
  {
LABEL_3:
    sub_18A6A7EC0();
    v13 = v12 | (v4 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    if (__OFADD__(v4, 1))
      goto LABEL_93;
    sub_18A6A7134();
    if (v14 == v15)
      break;
    sub_18A6A7EA8();
    v4 = v16;
    if (v17)
      goto LABEL_19;
    v4 = v16 + 1;
    if (v16 + 1 >= (uint64_t)v136)
      break;
    if (*(_QWORD *)(v133 + 8 * v4))
      goto LABEL_19;
    v4 = v16 + 2;
    if (v16 + 2 >= (uint64_t)v136)
      break;
    if (*(_QWORD *)(v133 + 8 * v4))
      goto LABEL_19;
    sub_18A6A7134();
    if (v14 == v15)
      break;
    sub_18A6A7EA8();
    if (!v19)
    {
      while (1)
      {
        v4 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_95;
        if (v4 >= (uint64_t)v136)
          goto LABEL_43;
        ++v18;
        if (*(_QWORD *)(v133 + 8 * v4))
          goto LABEL_19;
      }
    }
    v4 = v18;
LABEL_19:
    sub_18A6A7BDC();
    v13 = v20 + (v4 << 6);
LABEL_20:
    v1 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
    v21 = *(_QWORD *)(v7 + 56) + 16 * v13;
    v2 = *(void **)v21;
    if ((*(_BYTE *)(v21 + 8) & 1) != 0)
    {
      if (!v123)
      {
        v24 = *(_QWORD *)(v121 + 16);
        sub_18A6A7328();
        sub_18A634B64(v2);
        v25 = (id)v1;
        sub_18A5F3898();
        if (v24)
          goto LABEL_27;
LABEL_89:
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(67);
        sub_18A6A7668();
        sub_18A6A5DFC(v72 + 47, (uint64_t)"BUG IN CLOUDKIT: Couldn't find zone to save in batch for zone ID ");
        v73 = objc_msgSend((id)v1, sel_description);
        sub_18A61044C();
        sub_18A6A8470();
        sub_18A6A7648();
        sub_18A5F37E0();
        sub_18A6A74BC();
LABEL_90:
        sub_18A6A5E60();
        sub_18A6A75F0();
        return;
      }
      sub_18A6A7328();
      sub_18A5F3898();
      sub_18A634B64(v2);
      v41 = (id)v1;
      sub_18A5F3898();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      sub_18A5F37A4();
      if (!v24)
        goto LABEL_89;
LABEL_27:
      sub_18A5F50F0(0, &qword_1EDF6A970);
      v26 = 0;
      v118 = v4;
      v130 = v24;
      while (1)
      {
        v27 = v131 ? (uint64_t *)MEMORY[0x18D76CEB0](v26, v3[46]) : (uint64_t *)*(id *)(v128 + 8 * v26);
        v5 = v27;
        v28 = v26 + 1;
        if (__OFADD__(v26, 1))
          break;
        v29 = v7;
        v30 = v6;
        v31 = sub_18A6A6ED4((uint64_t)v27, sel_zoneID);
        v32 = static NSObject.== infix(_:_:)();

        if ((v32 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          sub_18A6A7328();
          v34 = v5;
          sub_18A6A834C();
          sub_18A6A6F1C();
          v35 = sub_18A6A7AD0();
          v36 = v127;
          if ((sub_18A6A6BDC() & 1) == 0)
          {
            sub_18A61857C();
            v36 = v42;
          }
          v5 = v125;
          v37 = v36;
          v38 = *(_QWORD *)(v36 + 16);
          v39 = v37;
          if (v38 >= *(_QWORD *)(v37 + 24) >> 1)
          {
            sub_18A61857C();
            v39 = v43;
          }
          *(_QWORD *)(v39 + 16) = v38 + 1;
          v40 = v39 + 16 * v38;
          v11 = v39;
          *(_QWORD *)(v40 + 32) = v34;
          *(_QWORD *)(v40 + 40) = v35;

          sub_18A6A68C8(v2);
          sub_18A6A68C8(v2);
          v3 = v137;
          v6 = v30;
          v7 = v29;
          v4 = v118;
          goto LABEL_2;
        }

        ++v26;
        v33 = v28 == v130;
        v3 = v137;
        v6 = v30;
        v7 = v29;
        if (v33)
          goto LABEL_89;
      }
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    sub_18A6A7490(v2);
    sub_18A6A7490(v2);
    v1 = (unint64_t)(id)v1;
    MEMORY[0x18D76C9DC]();
    sub_18A6A77E8();
    if (v23)
    {
      sub_18A6A6E10(v22);
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    sub_18A6A7384();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    sub_18A6A7488(v2);
    if (v126)
      goto LABEL_3;
  }
LABEL_43:
  v44 = (id *)v3[46];
  swift_release();
  sub_18A5F37A4();
  v45 = 0;
  v2 = (void *)v3[55];
  v6 = (char *)v2 + 64;
  v129 = v3[41];
  sub_18A6A5C50();
  v47 = v46 >> 6;
  v136 = (id *)MEMORY[0x1E0DEE9E0];
  sub_18A6A608C();
  v122 = v48;
  v49 = v124;
  v132 = v47;
  while (v4)
  {
    sub_18A6A76C0();
LABEL_60:
    sub_18A6A7E04();
    if (v33)
    {
      v1 = *v52;
      v54 = (id *)v120;
      *v120 = *v52;
      sub_18A6499C8((id)v1, 1);
      sub_18A6A68A8();
      sub_18A6A68A8();
      sub_18A6A795C();
      sub_18A5F101C(&qword_1EDF6A9D8);
      sub_18A5F42A0();
      sub_18A6A6F44();
      if ((sub_18A6A5E20() & 1) != 0)
      {
        sub_18A6A6114();
        v134 = *v119;
      }
      else
      {

        v137[29] = v1;
        v55 = (id)v1;
        if (!sub_18A6A5E20())
        {

          sub_18A6A6D58();
          v74 = sub_18A6A5F0C();
          sub_18A6A5DFC(v74, (uint64_t)"Unable to convert error to CKError: ");
          swift_getErrorValue();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          sub_18A6A5EFC();
          goto LABEL_90;
        }
        v117 = v137[42];
        v56 = v137[40];
        sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18A83AC30;
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18A6A7DE8(v58, v59);
        *(_QWORD *)(inited + 56) = v122;
        Dictionary.init(dictionaryLiteral:)();
        v137[34] = 20;
        sub_18A6A89EC();
        sub_18A5F37E0();
        sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
        sub_18A6A75D0();
        sub_18A6A6114();
        v134 = (void *)v137[33];
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v117, v56);
        v54 = v49;
      }

      v44 = v136;
      sub_18A6A7A80();
      v6 = v5;
      sub_18A62E990();
      sub_18A6A7F98();
      if (v15)
        goto LABEL_97;
      v62 = v60;
      v63 = v61;
      sub_18A5F101C((uint64_t *)&unk_1EDF692C8);
      v49 = v124;
      v47 = v132;
      if (sub_18A6A723C())
      {
        v44 = v136;
        sub_18A62E990();
        sub_18A62FB34();
        if (!v33)
        {
          sub_18A5F3B04(v64, (unint64_t *)&qword_1ECD967B0);
          sub_18A6A75F0();
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          return;
        }
        v62 = v64;
      }
      if ((v63 & 1) != 0)
      {
        v44 = (id *)v136[7];

        v44[v62] = v134;
      }
      else
      {
        sub_18A6A6F00((uint64_t)&v136[v62 >> 6]);
        *(_QWORD *)(v66 + 8 * v62) = v6;
        *(_QWORD *)(*(_QWORD *)(v65 + 56) + 8 * v62) = v134;
        v67 = *(_QWORD *)(v65 + 16);
        v15 = __OFADD__(v67, 1);
        v68 = v67 + 1;
        if (v15)
          goto LABEL_161;
        *(_QWORD *)(v65 + 16) = v68;
        v69 = v6;
      }

      sub_18A6A6600();
      sub_18A60A664((id)v1, 1);
      sub_18A6A6114();
      v5 = v125;
      v6 = (char *)v2 + 64;
    }
    else
    {
      v1 = v44;
      MEMORY[0x18D76C9DC]();
      sub_18A6A77E8();
      if (v23)
      {
        sub_18A6A6E10(v53);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v44 = (id *)v5;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

    }
  }
  v50 = v45 + 1;
  if (__OFADD__(v45, 1))
    goto LABEL_94;
  if (v50 < v47)
  {
    ++v45;
    if (!*((_QWORD *)v6 + v50))
    {
      v45 = v50 + 1;
      if (v50 + 1 >= v47)
        goto LABEL_78;
      if (!*((_QWORD *)v6 + v45))
      {
        v45 = v50 + 2;
        if (v50 + 2 >= v47)
          goto LABEL_78;
        if (!*((_QWORD *)v6 + v45))
        {
          v51 = v50 + 3;
          if (v51 >= v47)
            goto LABEL_78;
          if (!*((_QWORD *)v6 + v51))
          {
            while (1)
            {
              v45 = v51 + 1;
              if (__OFADD__(v51, 1))
                goto LABEL_96;
              if (v45 >= v47)
                goto LABEL_78;
              ++v51;
              if (*((_QWORD *)v6 + v45))
                goto LABEL_59;
            }
          }
          v45 = v51;
        }
      }
    }
LABEL_59:
    sub_18A6A7524();
    goto LABEL_60;
  }
LABEL_78:
  swift_release();
  v137[58] = 0;
  v137[59] = v127;
  v137[57] = v136;
  v1 = v137[32];
  if (!(v1 >> 62))
  {
    v70 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6291A0();
    if (v70)
      goto LABEL_80;
LABEL_99:
    sub_18A5F3A8C();
    v71 = (void *)MEMORY[0x1E0DEE9D8];
    goto LABEL_100;
  }
LABEL_98:
  sub_18A6291A0();
  v70 = sub_18A623AB0();
  if (!v70)
    goto LABEL_99;
LABEL_80:
  v138 = (void *)MEMORY[0x1E0DEE9D8];
  sub_18A6A60D8();
  if (v70 < 0)
    goto LABEL_162;
  v2 = 0;
  v71 = v138;
  v6 = (void *)(v1 & 0xC000000000000001);
  do
  {
    if (v6)
      sub_18A6A7334();
    sub_18A5F3D34(v1);
    sub_18A6A7D2C();
    if (v23)
    {
      sub_18A6A6608();
      v71 = v138;
    }
    sub_18A6A730C();
  }
  while (!v33);
  sub_18A5F3A8C();
  v5 = v125;
LABEL_100:
  v75 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
    sub_18A6239CC();
    v76 = sub_18A623AB0();
    if (!v76)
      goto LABEL_112;
LABEL_102:
    sub_18A6A60D8();
    if (v76 < 0)
      goto LABEL_163;
    sub_18A6A8354();
    do
    {
      if (v6)
        sub_18A6A6654();
      v5 = (uint64_t *)sub_18A5F3D34(v75 + 8 * (_QWORD)v2);
      sub_18A6A6704();
      if (v23)
        sub_18A6A6608();
      sub_18A6A6498();
    }
    while (!v33);
    sub_18A5F3FE4();
  }
  else
  {
    v76 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6239CC();
    if (v76)
      goto LABEL_102;
LABEL_112:
    sub_18A5F3FE4();
    v70 = MEMORY[0x1E0DEE9D8];
  }
  sub_18A6A79F8();
  v77._rawValue = v71;
  v78 = *(_QWORD *)(v127 + 16);
  if (v78)
  {
    v5 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    v79 = MEMORY[0x1E0DEE9D8];
    do
    {
      v80 = (id)*(v5 - 1);
      v81 = sub_18A6A7234();
      sub_18A6A7390();
      v83 = v82;

      v84 = v6;
      if ((v83 & 1) != 0)
      {
        if ((sub_18A6A64B4() & 1) == 0)
        {
          sub_18A6A5D24();
          v79 = v90;
        }
        v87 = *(_QWORD *)(v79 + 16);
        sub_18A6A7080();
        if (v23)
        {
          sub_18A6A5BF8();
          v79 = v91;
        }
        *(_QWORD *)(v79 + 16) = v2;
        v86 = v79 + 16 * v87;
      }
      else
      {
        if ((sub_18A6A6BDC() & 1) == 0)
        {
          sub_18A6A5C88();
          v77._rawValue = v88;
        }
        v85 = *((_QWORD *)v77._rawValue + 2);
        sub_18A6A7080();
        if (v23)
        {
          sub_18A6A5C10();
          v77._rawValue = v89;
        }
        *((_QWORD *)v77._rawValue + 2) = v2;
        v86 = (uint64_t)v77._rawValue + 16 * v85;
      }
      sub_18A6A7CB4(v86);

      v5 += 2;
      --v78;
    }
    while (v78);
    swift_bridgeObjectRelease();
  }
  else
  {
    v79 = MEMORY[0x1E0DEE9D8];
  }
  sub_18A6A75C4();
  v135 = v92;
  sub_18A6A673C();
  v94 = v93 >> 6;
  swift_bridgeObjectRetain();
  v95 = 0;
  if (!v5)
    goto LABEL_131;
  while (2)
  {
    sub_18A6A7AD8();
LABEL_145:
    sub_18A6A7BF0(v96);
    sub_18A6A7234();
    sub_18A6A7390();
    v105 = v104;
    v6;
    if ((v105 & 1) != 0)
    {
      if ((sub_18A6A64B4() & 1) == 0)
      {
        sub_18A6A5D24();
        v79 = v109;
      }
      v106 = *(_QWORD *)(v79 + 16);
      sub_18A6A7080();
      if (v23)
      {
        sub_18A6A5BF8();
        v79 = v110;
      }
      *(_QWORD *)(v79 + 16) = v2;
      v107 = v79 + 16 * v106;
    }
    else
    {
      if ((sub_18A6A6BDC() & 1) == 0)
      {
        sub_18A6A5C88();
        v77._rawValue = v111;
      }
      v108 = *((_QWORD *)v77._rawValue + 2);
      sub_18A6A7080();
      if (v23)
      {
        sub_18A6A5C10();
        v77._rawValue = v112;
      }
      *((_QWORD *)v77._rawValue + 2) = v2;
      v107 = (uint64_t)v77._rawValue + 16 * v108;
    }
    sub_18A6A61F8(v107);

    if (v5)
      continue;
    break;
  }
LABEL_131:
  v97 = v95 + 1;
  if (__OFADD__(v95, 1))
  {
    __break(1u);
    goto LABEL_160;
  }
  if (v97 >= v94)
    goto LABEL_158;
  ++v95;
  if (*(_QWORD *)(v135 + 8 * v97))
    goto LABEL_144;
  v95 = v97 + 1;
  if (v97 + 1 >= v94)
    goto LABEL_158;
  sub_18A6A7E9C();
  if (v99)
    goto LABEL_144;
  v95 = v98 + 2;
  if (v98 + 2 >= v94)
    goto LABEL_158;
  sub_18A6A7E9C();
  if (v101)
  {
LABEL_144:
    sub_18A6A753C();
    goto LABEL_145;
  }
  if (v100 + 3 >= v94)
  {
LABEL_158:
    sub_18A64A254();
    sub_18A6A7C80();
    sub_18A5F3A8C();
    CKSyncEngine.State.remove(pendingDatabaseChanges:)(v77);
    sub_18A5F3FE4();
    v114 = v137[31];
    v113 = v137[32];
    v137[60] = v113;
    v137[61] = v114;
    v137[2] = v113;
    v137[3] = v127;
    v137[4] = v114;
    v137[5] = v136;
    *((_OWORD *)v137 + 3) = 0u;
    *((_OWORD *)v137 + 4) = 0u;
    *((_BYTE *)v137 + 80) = 64;
    swift_bridgeObjectRetain();
    sub_18A6239CC();
    sub_18A5F3898();
    sub_18A61039C();
    v115 = (_QWORD *)sub_18A6A79C8();
    v137[62] = v115;
    *v115 = v137;
    v115[1] = sub_18A67CE18;
    sub_18A6A5854();
    sub_18A6A75F0();
    sub_18A69AF2C(v116);
    return;
  }
  sub_18A6A7EA8();
  if (v103)
  {
    v95 = v102;
    goto LABEL_144;
  }
  while (1)
  {
    v95 = v102 + 1;
    if (__OFADD__(v102, 1))
      break;
    if (v95 >= v94)
      goto LABEL_158;
    ++v102;
    if (*(_QWORD *)(v135 + 8 * v95))
      goto LABEL_144;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
}

uint64_t sub_18A67CE18()
{
  sub_18A6A5778();
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37E0();
  sub_18A5F3944();
  sub_18A5F37A4();
  sub_18A5F3FE4();
  return sub_18A6A5560();
}

uint64_t sub_18A67CE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD *v9;
  uint64_t (*v10)(void);

  sub_18A623E50();
  v2 = *(_QWORD *)(v0 + 480);
  v1 = *(_QWORD *)(v0 + 488);
  v3 = *(void **)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(void **)(v0 + 384);
  if (v3)
  {
    v7 = v3;
    sub_18A5F3FE4();
    sub_18A5F3944();
    sub_18A5F37E0();
    sub_18A5F37A4();
    swift_willThrow();

    sub_18A6A73B0();
    return sub_18A6A5B90(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v9 = *(_QWORD **)(v0 + 304);

    *v9 = v2;
    v9[1] = v4;
    v9[2] = v1;
    v9[3] = v5;
    swift_task_dealloc();
    v10 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A6A5B90(v10);
  }
}

void sub_18A67CEFC()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  unint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  Swift::OpaquePointer v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;

  sub_18A6A567C();
  v2 = *(void **)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 376);

  sub_18A6A5B54();
  v4 = v2;
  v5 = (id)related decl 'e' for CKErrorCode.init(_:)(v2);
  v6 = sub_18A62FE04();
  v65 = sub_18A6A7EB4(v6, v7, v8, v9);
  sub_18A5F3A8C();
  v10 = v5;
  v11 = (void *)MEMORY[0x1E0DEE9E0];
  v12 = sub_18A672310(MEMORY[0x1E0DEE9E0], v3, v10, (uint64_t (*)(uint64_t))sub_18A62E990, (uint64_t *)&unk_1EDF692C8, (uint64_t)&qword_1ECD967B0, (unint64_t)off_1E1F542B8);

  sub_18A5F37A4();
  sub_18A5F394C();
  *(_QWORD *)(v0 + 464) = v10;
  *(_QWORD *)(v0 + 472) = v65;
  v67 = v12;
  v68 = v0;
  *(_QWORD *)(v0 + 456) = v12;
  v13 = *(_QWORD *)(v0 + 256);
  if (v13 >> 62)
  {
    sub_18A6239CC();
    v14 = sub_18A623AB0();
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6239CC();
  }
  v15 = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    v69 = (unint64_t *)MEMORY[0x1E0DEE9D8];
    sub_18A6A5E84();
    if (v14 < 0)
      goto LABEL_73;
    v11 = 0;
    v16 = v69;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v17 = (id)MEMORY[0x18D76CEB0](v11, v13);
      else
        v17 = sub_18A5F3D34(v13 + 8 * (_QWORD)v11);
      v1 = (unint64_t)v17;
      v19 = v69[2];
      v18 = v69[3];
      if (v19 >= v18 >> 1)
      {
        sub_18A6A7574(v18);
        sub_18A6100D0();
      }
      v11 = (char *)v11 + 1;
      v69[2] = v19 + 1;
      v20 = &v69[2 * v19];
      v20[4] = v1;
      *((_BYTE *)v20 + 40) = 0;
    }
    while ((void *)v14 != v11);
    sub_18A5F3FE4();
  }
  else
  {
    sub_18A5F3FE4();
    v16 = (unint64_t *)MEMORY[0x1E0DEE9D8];
  }
  v21 = *(_QWORD *)(v68 + 248);
  if (v21 >> 62)
  {
    sub_18A6239CC();
    v22 = sub_18A623AB0();
    if (v22)
      goto LABEL_16;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6239CC();
    if (v22)
    {
LABEL_16:
      sub_18A6A5E84();
      if (v22 < 0)
        goto LABEL_74;
      sub_18A6A7994();
      do
      {
        if (v15)
          sub_18A6A6654();
        sub_18A5F3D34(v21 + 8 * v1);
        sub_18A6A6704();
        if (v23)
          sub_18A6A5F98();
        sub_18A6A6498();
      }
      while (!v24);
      sub_18A5F3FE4();
      goto LABEL_28;
    }
  }
  sub_18A5F3FE4();
  v11 = (void *)MEMORY[0x1E0DEE9D8];
LABEL_28:
  sub_18A6A79F8();
  v25._rawValue = v16;
  v26 = *(_QWORD *)(v65 + 16);
  if (v26)
  {
    v27 = (void **)(swift_bridgeObjectRetain() + 40);
    v28 = MEMORY[0x1E0DEE9D8];
    do
    {
      v29 = *v27;
      v30 = *(v27 - 1);
      v31 = v29;
      sub_18A6A83FC();
      sub_18A6A6910();
      v32 = v30;
      if ((v29 & 1) != 0)
      {
        if ((sub_18A6A64B4() & 1) == 0)
        {
          sub_18A6A5D24();
          v28 = v38;
        }
        v35 = *(_QWORD *)(v28 + 16);
        sub_18A6A7C3C();
        if (v23)
        {
          sub_18A6A5BF8();
          v28 = v39;
        }
        *(_QWORD *)(v28 + 16) = v29;
        v34 = v28 + 16 * v35;
      }
      else
      {
        if ((sub_18A6A6BDC() & 1) == 0)
        {
          sub_18A6A5C88();
          v25._rawValue = v36;
        }
        v33 = *((_QWORD *)v25._rawValue + 2);
        sub_18A6A7C3C();
        if (v23)
        {
          sub_18A6A5C10();
          v25._rawValue = v37;
        }
        *((_QWORD *)v25._rawValue + 2) = v29;
        v34 = (uint64_t)v25._rawValue + 16 * v33;
      }
      sub_18A6A7CB4(v34);

      v27 += 2;
      --v26;
    }
    while (v26);
    sub_18A628F58();
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }
  sub_18A6A75C4();
  v66 = v40;
  sub_18A6A5C50();
  v42 = v41 >> 6;
  swift_bridgeObjectRetain();
  v43 = 0;
  while (1)
  {
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_72;
    }
    if (v43 + 1 >= v42)
      goto LABEL_70;
    sub_18A6A7BFC();
    v43 = v44;
    if (!v45)
    {
      v43 = v44 + 1;
      if (v44 + 1 >= v42)
        goto LABEL_70;
      if (!*(_QWORD *)(v66 + 8 * v43))
      {
        v43 = v44 + 2;
        if (v44 + 2 >= v42)
          goto LABEL_70;
        if (!*(_QWORD *)(v66 + 8 * v43))
          break;
      }
    }
LABEL_58:
    sub_18A6A750C();
    v49 = *(void **)(*(_QWORD *)(v67 + 56) + 8 * v48);
    v50 = *(id *)(*(_QWORD *)(v67 + 48) + 8 * v48);
    v51 = v49;
    sub_18A6A83FC();
    v53 = v52;
    v50;
    if ((v53 & 1) != 0)
    {
      if ((sub_18A6A64B4() & 1) == 0)
      {
        sub_18A6A5D24();
        v28 = v57;
      }
      v54 = *(_QWORD *)(v28 + 16);
      sub_18A6A7C3C();
      if (v23)
      {
        sub_18A6A5BF8();
        v28 = v58;
      }
      *(_QWORD *)(v28 + 16) = v53;
      v55 = v28 + 16 * v54;
    }
    else
    {
      if ((sub_18A6A6BDC() & 1) == 0)
      {
        sub_18A6A5C88();
        v25._rawValue = v59;
      }
      v56 = *((_QWORD *)v25._rawValue + 2);
      sub_18A6A7C3C();
      if (v23)
      {
        sub_18A6A5C10();
        v25._rawValue = v60;
      }
      *((_QWORD *)v25._rawValue + 2) = v53;
      v55 = (uint64_t)v25._rawValue + 16 * v56;
    }
    sub_18A6A61F8(v55);

  }
  if (v44 + 3 >= v42)
  {
LABEL_70:
    sub_18A61A878();
    sub_18A6A7C80();
    sub_18A5F3A8C();
    CKSyncEngine.State.remove(pendingDatabaseChanges:)(v25);
    sub_18A5F3FE4();
    v62 = *(_QWORD *)(v68 + 248);
    v61 = *(_QWORD *)(v68 + 256);
    *(_QWORD *)(v68 + 480) = v61;
    *(_QWORD *)(v68 + 488) = v62;
    *(_QWORD *)(v68 + 16) = v61;
    sub_18A6A7C08();
    *(_BYTE *)(v68 + 80) = 64;
    swift_bridgeObjectRetain();
    sub_18A5F3FAC();
    sub_18A5F3898();
    sub_18A5F40AC();
    v63 = (_QWORD *)sub_18A6A68C0();
    *(_QWORD *)(v68 + 496) = v63;
    *v63 = v68;
    v63[1] = sub_18A67CE18;
    v64 = (const void *)sub_18A6A7410();
    sub_18A6A5AC4(v64);
    return;
  }
  sub_18A6A7BFC();
  if (v47)
  {
    v43 = v46;
    goto LABEL_58;
  }
  while (1)
  {
    v43 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v43 >= v42)
      goto LABEL_70;
    ++v46;
    if (*(_QWORD *)(v66 + 8 * v43))
      goto LABEL_58;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

uint64_t sub_18A67D424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_18A67D48C;
  return CKDatabase.modifyRecordZones(saving:deleting:)(a2, a3);
}

uint64_t sub_18A67D48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v2 = sub_18A6239A4();
  v4 = *(uint64_t (**)(void))(v1 + 8);
  if (!v0)
    v2 = sub_18A629170();
  return sub_18A5F4630(v2, v3, v4);
}

uint64_t sub_18A67D4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 40) = v1;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 56) = *(_BYTE *)(a1 + 16);
  return sub_18A5F4434();
}

void sub_18A67D4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  void *v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_18A6A567C();
  v20 = *(_QWORD *)(v18 + 40);
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  v52 = v21;
  v22 = (void *)MEMORY[0x18D76E914](v20 + 120);
  if (!v22)
    goto LABEL_33;
  v23 = v22;
  v24 = objc_msgSend(v22, sel_dataSource);
  if (!v24)
  {

    goto LABEL_33;
  }
  v25 = v24;
  if ((objc_msgSend(v24, sel_respondsToSelector_, sel_recordZonesToSaveForSyncEngine_) & 1) == 0)
    goto LABEL_12;
  v26 = (void *)swift_unknownObjectRetain();
  v27 = sub_18A66CCF8(v26, sel_recordZonesToSaveForSyncEngine_);
  if (!v27)
  {
    sub_18A623E08();
LABEL_12:
    v30 = 0;
    goto LABEL_14;
  }
  sub_18A5F3B04((uint64_t)v27, &qword_1EDF6A910);
  sub_18A5F3C9C();
  sub_18A6A79B4();
  sub_18A623E08();
  if (v19 >> 62)
  {
    sub_18A6239CC();
    v28 = sub_18A6A8420();
    sub_18A5F3FE4();
    sub_18A6239CC();
    v29 = sub_18A6A8420();
    sub_18A5F3FE4();
  }
  else
  {
    v28 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v29 = v28;
  }
  LODWORD(a10) = v28 != 0;
  if (!v29)
  {
    sub_18A5F3FE4();
    sub_18A6A79F8();
    v30 = v28 != 0;
LABEL_14:
    if ((objc_msgSend(v25, sel_respondsToSelector_, sel_recordZoneIDsToDeleteForSyncEngine_) & 1) != 0)
    {
      v31 = (void *)swift_unknownObjectRetain();
      v32 = sub_18A66CCF8(v31, sel_recordZoneIDsToDeleteForSyncEngine_);
      if (v32)
      {
        sub_18A5F3B04((uint64_t)v32, (unint64_t *)&qword_1ECD967B0);
        sub_18A5F3C9C();
        sub_18A6A79B4();
        sub_18A623E08();
        if (v19 >> 62)
        {
          sub_18A6239CC();
          v36 = sub_18A623AB0();
          sub_18A5F3FE4();
          if (v36)
            v34 = 1;
          else
            v34 = v30;
          sub_18A6239CC();
          v33 = sub_18A623AB0();
          sub_18A5F3FE4();
          if (v33)
          {
LABEL_21:
            sub_18A6A5E84();
            if ((v33 & 0x8000000000000000) == 0)
            {
              sub_18A6A7994();
              sub_18A6A6654();
            }
            goto LABEL_36;
          }
        }
        else
        {
          v33 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v33)
            v34 = 1;
          else
            v34 = v30;
          if (v33)
            goto LABEL_21;
        }
        sub_18A5F3FE4();
        sub_18A6A79F8();

        sub_18A623E08();
        if ((v34 & 1) == 0)
          goto LABEL_33;
LABEL_24:
        v35 = 100;
LABEL_34:
        sub_18A5F3FAC();
        v38 = sub_18A629170();
        sub_18A671824(v38);
        v40 = sub_18A60FAF4(v35, v39);
        sub_18A6A0900(v40, v41, v42, v43, (uint64_t (*)(uint64_t))sub_18A666B3C);
        sub_18A6A6AD4();
        v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, v52, a14, a15, a16, a17, a18);
        return;
      }
      sub_18A612EF8();

      if (v30)
        goto LABEL_24;
    }
    else
    {

      sub_18A623E08();
      if (v30)
        goto LABEL_24;
    }
LABEL_33:
    v37 = *(_QWORD *)(v18 + 40);
    sub_18A5F46AC();
    v35 = *(_QWORD *)(v37 + 184);
    goto LABEL_34;
  }
  sub_18A6A5E84();
  if ((v29 & 0x8000000000000000) == 0)
  {
    sub_18A6A7994();
    sub_18A6A6654();
  }
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_18A67D870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 352) = v2;
  v5 = sub_18A6A7040();
  *(_QWORD *)(v3 + 360) = v5;
  *(_QWORD *)(v3 + 368) = *(_QWORD *)(v5 - 8);
  v6 = sub_18A5F3CBC();
  *(_BYTE *)(v3 + 81) = *(_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 376) = v6;
  *(_QWORD *)(v3 + 384) = v7;
  *(_BYTE *)(v3 + 82) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(v3 + 392) = *(_QWORD *)(a2 + 24);
  sub_18A6A5670();
  return sub_18A5F3A94();
}

uint64_t sub_18A67D8D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 352) + 128);
  *(_QWORD *)(v1 + 400) = v2;
  v3 = *(void **)(v2 + 16);
  v4 = sub_18A5F3888(a1, sel_hasPendingUntrackedChanges);
  *(_BYTE *)(v1 + 83) = v4;
  if (v4)
    sub_18A6A6F74(v3, sel_setHasPendingUntrackedChanges_);
  v5 = *(_BYTE *)(v1 + 82);
  *(_BYTE *)(v1 + 152) = *(_BYTE *)(v1 + 81);
  v6 = *(_QWORD *)(v1 + 392);
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(v1 + 384);
  *(_BYTE *)(v1 + 168) = v5;
  *(_QWORD *)(v1 + 176) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 408) = v7;
  *v7 = v1;
  v7[1] = sub_18A67D988;
  return sub_18A67FAA4(v1 + 208, v1 + 152);
}

uint64_t sub_18A67D988()
{
  sub_18A6A676C();
  return sub_18A5F3A94();
}

#error "18A67DEE8: call analysis failed (funcsize=540)"

uint64_t sub_18A67E294()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 464) = v0;
  sub_18A6A5DDC();
  sub_18A5F37A4();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

uint64_t sub_18A67E2D8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t);

  sub_18A64A1F4();
  v1 = *(_QWORD *)(v0 + 464);
  v2 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), sel_init);
  *(_QWORD *)(v0 + 472) = v2;
  if (v1)
  {
    v3 = *(_QWORD **)(v0 + 464);
    if (v3[2])
    {
      sub_18A612BCC(0, 1, *(_QWORD *)(v0 + 464));
      v4 = v3[4];
      v5 = v3[5];
      sub_18A6239CC();
      sub_18A5F37E0();
      sub_18A6A33D0(v4, v5, v2);
    }
    else
    {
      sub_18A5F37E0();
    }
  }
  v6 = *(_BYTE *)(v0 + 84) & 1;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 232) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 240) = v7;
  v8 = sub_18A65EF14();
  *(_QWORD *)(v0 + 480) = v8;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v0 + 424);
  *(_BYTE *)(v8 + 32) = v6;
  v13 = (uint64_t (*)(uint64_t))((char *)&dword_1EDF6BBC0 + dword_1EDF6BBC0);
  v9 = v2;
  v10 = (_QWORD *)sub_18A6A68C0();
  *(_QWORD *)(v0 + 488) = v10;
  *v10 = v0;
  v10[1] = sub_18A67E3EC;
  v11 = sub_18A6A7A88();
  return v13(v11);
}

uint64_t sub_18A67E3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_18A5F4328();
  sub_18A6A6DF8();
  *(_QWORD *)(v0 + 496) = v2;
  *(_QWORD *)(v0 + 504) = v3;
  *(_QWORD *)(v0 + 512) = v1;
  sub_18A6A5DDC();
  if (!v1)
  {

    sub_18A663AB0();
  }
  return sub_18A5F3A94();
}

void sub_18A67E454()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  char v14;
  BOOL v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  unint64_t *v40;
  char v41;
  unint64_t v42;
  char v43;
  id *v44;
  id v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  void *v74;
  char v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  const void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  id *v129;
  uint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  id v137;
  _QWORD *v138;
  int64_t v139;
  uint64_t v140;
  int64_t v141;
  _QWORD *v142;
  uint64_t v143;

  v3 = 0;
  v4 = v0 + 29;
  v5 = (uint64_t)(v0 + 30);
  v130 = v0 + 34;
  v131 = v0 + 33;
  v129 = (id *)(v0 + 35);
  v6 = v0[62];
  v7 = v6 + 64;
  sub_18A6A7158();
  v10 = v9 & v8;
  sub_18A6A7ED4();
  v132 = v11 & 0xC000000000000001;
  v135 = (_QWORD *)(v11 + 32);
  v134 = MEMORY[0x1E0DEE9D8];
  v142 = v0;
  v136 = v0 + 30;
  while (v10)
  {
    sub_18A6A6888();
LABEL_20:
    v20 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v12);
    v21 = *(_QWORD *)(v6 + 56) + 16 * v12;
    v1 = *(_QWORD *)v21;
    if ((*(_BYTE *)(v21 + 8) & 1) != 0)
    {
      if (!v0[55])
      {
        sub_18A6A739C();
        sub_18A634B64((id)v1);
        v66 = v20;
LABEL_86:
        sub_18A60FB60(71);
        sub_18A6A7668();
        sub_18A6A78CC(v63 + 51, (uint64_t)"BUG IN CLOUDKIT: Couldn't find record to save in batch for record ID ");
        v65 = sub_18A64A4A0(v64, sel_description);
        sub_18A61044C();
        sub_18A6A8470();
        sub_18A6A7648();
        sub_18A5F37E0();
        sub_18A6A74BC();
LABEL_87:
        sub_18A6A5E60();
        sub_18A6A7810();
        return;
      }
      v123 = v3;
      v125 = v7;
      v126 = v6;
      v127 = v4;
      v2 = v0[53];
      sub_18A5F50F0(0, &qword_1EDF6A970);
      sub_18A629140();
      sub_18A6A739C();
      sub_18A629140();
      sub_18A634B64((id)v1);
      v137 = v20;
      v5 = 0;
      while (1)
      {
        if (v132)
          v23 = (id)MEMORY[0x18D76CEB0](v5, v142[53]);
        else
          v23 = (id)v135[v5];
        v3 = (int64_t)v23;
        v24 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_91;
        }
        v25 = sub_18A6A6ED4((uint64_t)v23, sel_recordID);
        v2 = static NSObject.== infix(_:_:)();

        if ((v2 & 1) != 0)
          break;
        v6 = v142[55];

        ++v5;
        if (v24 == v6)
        {
          sub_18A654258();
          goto LABEL_86;
        }
      }
      sub_18A654258();
      sub_18A6A739C();
      v26 = (id)v3;
      related decl 'e' for CKErrorCode.init(_:)((void *)v1);
      sub_18A6A6F1C();
      v27 = sub_18A6A7AD0();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v28 = v134;
      else
        sub_18A6185C4();
      v5 = (uint64_t)v136;
      v29 = *(_QWORD *)(v28 + 16);
      if (v29 >= *(_QWORD *)(v28 + 24) >> 1)
        sub_18A6185C4();
      *(_QWORD *)(v28 + 16) = v29 + 1;
      v134 = v28;
      v30 = v28 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v26;
      *(_QWORD *)(v30 + 40) = v27;

      sub_18A6A68C8((id)v1);
      sub_18A6A68C8((id)v1);
      v0 = v142;
      v6 = v126;
      v4 = v127;
      v3 = v123;
      v7 = v125;
    }
    else
    {
      sub_18A6A7490((id)v1);
      sub_18A6A7490((id)v1);
      v22 = v20;
      MEMORY[0x18D76C9DC]();
      v2 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v2 >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_18A6A7564();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      sub_18A6A7488((id)v1);
    }
  }
  if (__OFADD__(v3, 1))
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  sub_18A6A7134();
  if (v14 == v15)
    goto LABEL_39;
  v3 = v13;
  if (*(_QWORD *)(v7 + 8 * v13))
    goto LABEL_19;
  v3 = v13 + 1;
  if (v13 + 1 >= v139)
    goto LABEL_39;
  if (*(_QWORD *)(v7 + 8 * v3))
    goto LABEL_19;
  v3 = v13 + 2;
  if (v13 + 2 >= v139)
    goto LABEL_39;
  if (*(_QWORD *)(v7 + 8 * v3))
  {
LABEL_19:
    sub_18A623BAC();
    v10 = v18 & v17;
    v12 = v19 + (v3 << 6);
    goto LABEL_20;
  }
  sub_18A6A7134();
  if (v14 == v15)
  {
LABEL_39:
    swift_release();
    v6 = v0[63];
    v128 = v0[46];
    sub_18A5F51F4(v0[53]);
    v2 = 0;
    v31 = v6 + 64;
    sub_18A6A70F8();
    v34 = v33 & v32;
    v3 = (unint64_t)(63 - v35) >> 6;
    v36 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    sub_18A6A608C();
    v124 = v37;
    v133 = v3;
LABEL_40:
    v135 = v36;
    if (v34)
    {
LABEL_41:
      sub_18A6A7EC0();
      goto LABEL_56;
    }
    while (1)
    {
      v38 = v2 + 1;
      if (__OFADD__(v2, 1))
        goto LABEL_92;
      if (v38 >= v3)
        goto LABEL_75;
      ++v2;
      if (!*(_QWORD *)(v31 + 8 * v38))
      {
        v2 = v38 + 1;
        if (v38 + 1 >= v3)
          goto LABEL_75;
        if (!*(_QWORD *)(v31 + 8 * v2))
        {
          v2 = v38 + 2;
          if (v38 + 2 >= v3)
            goto LABEL_75;
          if (!*(_QWORD *)(v31 + 8 * v2))
          {
            v39 = v38 + 3;
            if (v39 >= v3)
            {
LABEL_75:
              swift_release();
              v142[67] = v134;
              v142[66] = 0;
              v142[65] = v36;
              v1 = v142[29];
              if (v1 >> 62)
                goto LABEL_96;
              v60 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
              sub_18A6291A0();
              if (v60)
                goto LABEL_77;
LABEL_97:
              sub_18A5F3A8C();
              v61 = MEMORY[0x1E0DEE9D8];
              goto LABEL_98;
            }
            if (!*(_QWORD *)(v31 + 8 * v39))
            {
              while (1)
              {
                v2 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_94;
                if (v2 >= v3)
                  goto LABEL_75;
                ++v39;
                if (*(_QWORD *)(v31 + 8 * v2))
                  goto LABEL_55;
              }
            }
            v2 = v39;
          }
        }
      }
LABEL_55:
      sub_18A6A7BDC();
LABEL_56:
      sub_18A6A7E04();
      if (v41)
      {
        v1 = *v40;
        v44 = (id *)v131;
        *v131 = *v40;
        sub_18A6499C8((id)v1, 1);
        sub_18A6A68A8();
        sub_18A6A68A8();
        sub_18A6A795C();
        sub_18A5F101C(&qword_1EDF6A9D8);
        sub_18A5F42A0();
        if ((sub_18A6A5E20() & 1) != 0)
        {
          sub_18A6A6114();
          v140 = *v130;
          goto LABEL_65;
        }

        v142[35] = v1;
        v45 = (id)v1;
        if (!sub_18A6A5E20())
        {

          sub_18A60FB60(38);
          v67 = sub_18A6A5F0C();
          sub_18A6A78CC(v67, (uint64_t)"Unable to convert error to CKError: ");
          swift_getErrorValue();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          sub_18A6A5EFC();
          goto LABEL_87;
        }
        v121 = v142[47];
        v122 = v142[45];
        sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18A83AC30;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(_QWORD *)(inited + 40) = v47;
        sub_18A6A7668();
        *(_QWORD *)(inited + 48) = v48;
        *(_QWORD *)(inited + 56) = v124;
        Dictionary.init(dictionaryLiteral:)();
        v142[40] = 20;
        sub_18A6A89EC();
        sub_18A5F460C();
        sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
        sub_18A6A75D0();
        sub_18A6A6114();
        v140 = v142[39];
        (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v121, v122);
        v44 = v129;
LABEL_65:

        v5 = sub_18A6A7A80();
        v49 = (void *)v3;
        sub_18A62E9C4();
        sub_18A6A7F98();
        if (v15)
          goto LABEL_95;
        v52 = v50;
        v53 = v51;
        sub_18A5F101C(&qword_1EDF69350);
        v4 = v135;
        v5 = (uint64_t)v136;
        if (sub_18A6A723C())
        {
          sub_18A62E9C4();
          sub_18A62FB34();
          if (!v41)
          {
            sub_18A5F3B04(v54, (unint64_t *)&unk_1EDF6A8F0);
            sub_18A6A7810();
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            return;
          }
          v52 = v54;
        }
        if ((v53 & 1) != 0)
        {
          v4 = (_QWORD *)v135[7];

          v4[v52] = v140;
          v55 = v135;
          goto LABEL_74;
        }
        sub_18A6A7F6C((uint64_t)&v135[v52 >> 6]);
        *(_QWORD *)(v56 + 8 * v52) = v49;
        *(_QWORD *)(v135[7] + 8 * v52) = v140;
        v57 = v135[2];
        v15 = __OFADD__(v57, 1);
        v58 = v57 + 1;
        if (v15)
        {
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
          return;
        }
        v55 = v135;
        v135[2] = v58;
        v59 = v49;
LABEL_74:

        sub_18A6A6600();
        sub_18A60A664((id)v1, 1);
        sub_18A6A6114();
        v31 = v6 + 64;
        v3 = v133;
        v36 = v55;
        goto LABEL_40;
      }
      v1 = v4;
      MEMORY[0x18D76C9DC]();
      sub_18A6A77E8();
      if (v43)
      {
        sub_18A6A6E10(v42);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v4 = (_QWORD *)v5;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      if (v34)
        goto LABEL_41;
    }
  }
  if (*(_QWORD *)(v7 + 8 * v16))
  {
    v3 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v139)
      goto LABEL_39;
    ++v16;
    if (*(_QWORD *)(v7 + 8 * v3))
      goto LABEL_19;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  sub_18A6291A0();
  v60 = sub_18A623AB0();
  if (!v60)
    goto LABEL_97;
LABEL_77:
  v143 = MEMORY[0x1E0DEE9D8];
  sub_18A6A60E4();
  if (v60 < 0)
    goto LABEL_165;
  v2 = 0;
  v61 = v143;
  v6 = v1 & 0xC000000000000001;
  do
  {
    if (v6)
      sub_18A6A7334();
    v62 = sub_18A5F3D34(v1);
    v3 = (int64_t)objc_msgSend(v62, sel_recordID);

    sub_18A6A7D2C();
    if (v43)
    {
      sub_18A6A6D10();
      v61 = v143;
    }
    sub_18A6A730C();
    v5 = (uint64_t)v136;
  }
  while (!v41);
  sub_18A5F3A8C();
LABEL_98:
  v68 = *(_QWORD *)v5;
  if (*(_QWORD *)v5 >> 62)
  {
    sub_18A6239CC();
    v69 = sub_18A623AB0();
    if (!v69)
      goto LABEL_110;
LABEL_100:
    sub_18A6A60E4();
    if (v69 < 0)
      goto LABEL_166;
    sub_18A6A8354();
    do
    {
      if (v6)
        sub_18A6A6654();
      v3 = (int64_t)sub_18A5F3D34(v68 + 8 * v2);
      sub_18A6A6704();
      if (v43)
        sub_18A6A6D10();
      sub_18A6A6498();
    }
    while (!v41);
    sub_18A5F3FE4();
  }
  else
  {
    v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6239CC();
    if (v69)
      goto LABEL_100;
LABEL_110:
    sub_18A5F3FE4();
    v60 = MEMORY[0x1E0DEE9D8];
  }
  sub_18A64E1C0(v60);
  v70 = v61;
  v71 = *(_QWORD *)(v134 + 16);
  if (v71)
  {
    v72 = (void **)(swift_bridgeObjectRetain() + 40);
    v73 = MEMORY[0x1E0DEE9D8];
    do
    {
      v74 = *v72;
      v60 = *(v72 - 1);
      v2 = v74;
      sub_18A697558();
      LOBYTE(v74) = v75;

      v77 = sub_18A64A4A0(v76, sel_recordID);
      if ((v74 & 1) != 0)
      {
        if ((sub_18A6A64B4() & 1) == 0)
        {
          sub_18A6A5D3C();
          v73 = v83;
        }
        v80 = *(_QWORD *)(v73 + 16);
        v3 = v80 + 1;
        if (v80 >= *(_QWORD *)(v73 + 24) >> 1)
        {
          sub_18A6A5E08();
          v73 = v84;
        }
        *(_QWORD *)(v73 + 16) = v3;
        v79 = v73 + 16 * v80;
      }
      else
      {
        if ((sub_18A6A6BDC() & 1) == 0)
        {
          sub_18A6A6C20();
          v70 = v81;
        }
        v78 = *(_QWORD *)(v70 + 16);
        v3 = v78 + 1;
        if (v78 >= *(_QWORD *)(v70 + 24) >> 1)
        {
          sub_18A6A6C20();
          v70 = v82;
        }
        *(_QWORD *)(v70 + 16) = v3;
        v79 = v70 + 16 * v78;
      }
      *(_QWORD *)(v79 + 32) = v77;
      *(_BYTE *)(v79 + 40) = 0;

      v72 += 2;
      --v71;
    }
    while (v71);
    swift_bridgeObjectRelease();
  }
  else
  {
    v73 = MEMORY[0x1E0DEE9D8];
  }
  v85 = v135;
  v138 = v135 + 8;
  sub_18A6A673C();
  v141 = v86 >> 6;
  sub_18A5F3D48();
  v87 = 0;
  v88 = v142;
  if (!v3)
    goto LABEL_129;
  while (2)
  {
    sub_18A6A7AD8();
LABEL_145:
    v96 = v85;
    sub_18A6A7BF0(v89);
    sub_18A6A7234();
    sub_18A6A7390();
    v98 = v97;
    v88;
    if ((v98 & 1) != 0)
    {
      if ((sub_18A6A64B4() & 1) == 0)
      {
        sub_18A6A5D3C();
        v73 = v102;
      }
      v88 = v142;
      v99 = *(_QWORD *)(v73 + 16);
      sub_18A6A7080();
      if (v43)
      {
        sub_18A6A5E08();
        v73 = v103;
      }
      *(_QWORD *)(v73 + 16) = v2;
      v100 = v73 + 16 * v99;
    }
    else
    {
      if ((sub_18A6A6BDC() & 1) == 0)
      {
        sub_18A6A6C20();
        v70 = v104;
      }
      v88 = v142;
      v101 = *(_QWORD *)(v70 + 16);
      sub_18A6A7080();
      if (v43)
      {
        sub_18A6A6C20();
        v70 = v105;
      }
      *(_QWORD *)(v70 + 16) = v2;
      v100 = v70 + 16 * v101;
    }
    sub_18A6A61F8(v100);

    v85 = v96;
    if (v3)
      continue;
    break;
  }
LABEL_129:
  if (__OFADD__(v87, 1))
  {
    __break(1u);
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
  sub_18A6A7134();
  if (v14 == v15)
    goto LABEL_158;
  v87 = v90;
  if (v138[v90])
    goto LABEL_144;
  v87 = v90 + 1;
  if (v90 + 1 >= v141)
    goto LABEL_158;
  sub_18A6A7E9C();
  if (v92)
    goto LABEL_144;
  v87 = v91 + 2;
  if (v91 + 2 >= v141)
    goto LABEL_158;
  sub_18A6A7E9C();
  if (v93)
  {
LABEL_144:
    sub_18A6A753C();
    goto LABEL_145;
  }
  sub_18A6A7134();
  if (v14 != v15)
  {
    sub_18A6A7EA8();
    if (!v95)
    {
      while (1)
      {
        v87 = v94 + 1;
        if (__OFADD__(v94, 1))
          goto LABEL_163;
        if (v87 >= v141)
          goto LABEL_158;
        ++v94;
        if (v138[v87])
          goto LABEL_144;
      }
    }
    v87 = v94;
    goto LABEL_144;
  }
LABEL_158:
  v106 = v88[50];
  sub_18A6A6FD0();
  sub_18A665A98(v73, 0, v107, v108, v109, v110, v111, v112, v120);
  sub_18A5F3A8C();
  sub_18A665B40(v70);
  sub_18A5F3FE4();
  v113 = *(void **)(v106 + 16);
  if (objc_msgSend(v113, sel_hasInFlightUntrackedChanges))
  {
    sub_18A697558();
    v115 = v114;
    sub_18A6A6F74(v113, sel_setHasInFlightUntrackedChanges_);
    if ((v115 & 1) != 0)
      sub_18A6A5E58(v113, sel_setHasPendingUntrackedChanges_);
  }
  v116 = v88[29];
  v117 = v88[30];
  v88[68] = v116;
  v88[69] = v117;
  v88[2] = v116;
  v88[3] = v134;
  v88[4] = v117;
  v88[5] = v85;
  *((_OWORD *)v88 + 3) = 0u;
  *((_OWORD *)v88 + 4) = 0u;
  *((_BYTE *)v88 + 80) = 80;
  swift_bridgeObjectRetain();
  sub_18A6239CC();
  sub_18A5F3898();
  sub_18A6291A0();
  v118 = (_QWORD *)sub_18A6A79C8();
  v88[70] = v118;
  *v118 = v88;
  v118[1] = sub_18A67F250;
  sub_18A6A5854();
  sub_18A6A7810();
  sub_18A69AF2C(v119);
}

uint64_t sub_18A67F250()
{
  sub_18A6A5778();
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37E0();
  sub_18A5F3944();
  sub_18A5F37A4();
  sub_18A5F3FE4();
  return sub_18A6A5560();
}

uint64_t sub_18A67F2B0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t (*v8)(void);
  _QWORD *v9;

  sub_18A64A1F4();
  v1 = (void *)v0[66];
  v2 = v0[69];
  v3 = v0[68];
  v4 = v0[67];
  v5 = v0[65];
  v6 = (void *)v0[59];
  if (v1)
  {
    v7 = v1;
    sub_18A5F3FE4();
    sub_18A5F3944();
    sub_18A5F37E0();
    sub_18A5F37A4();
    swift_willThrow();

    sub_18A6A7430();
    v8 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v9 = (_QWORD *)v0[43];

    *v9 = v3;
    v9[1] = v4;
    v9[2] = v2;
    v9[3] = v5;
    sub_18A6A7430();
    v8 = (uint64_t (*)(void))sub_18A6A5838();
  }
  return v8();
}

uint64_t sub_18A67F350()
{
  uint64_t v0;

  sub_18A6A7430();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

#error "18A67F960: call analysis failed (funcsize=423)"

uint64_t sub_18A67FA30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_18A6A54AC;
  return CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)(a2, a3, 0, a4);
}

uint64_t sub_18A67FAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v2;
  *(_BYTE *)(v3 + 33) = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v3 + 34) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v3 + 88) = v4;
  *(_QWORD *)(v3 + 96) = v5;
  return sub_18A5F4434();
}

uint64_t sub_18A67FAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  char v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t (*v44)(void);

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = sub_18A6A71B4();
  *(_QWORD *)(v22 + 104) = v26;
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)(v22 + 88);
    v29 = *(void **)(v22 + 96);
    v30 = *(_BYTE *)(v22 + 34);
    v31 = *(_BYTE *)(v22 + 33);
    v32 = sub_18A5F37B4();
    *(_QWORD *)(v22 + 112) = v32;
    *(_BYTE *)(v32 + 16) = v31;
    *(_QWORD *)(v32 + 24) = v28;
    *(_BYTE *)(v32 + 32) = v30;
    *(_QWORD *)(v32 + 40) = v29;
    *(_QWORD *)(v32 + 48) = v27;
    v44 = (uint64_t (*)(void))((char *)&dword_1EDF6C0D8 + dword_1EDF6C0D8);
    sub_18A634FA4();
    sub_18A5F40AC();
    v33 = v29;
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 120) = v34;
    *v34 = v22;
    v34[1] = sub_18A67FCE0;
    return sub_18A6A63AC(v22 + 16, (uint64_t)&unk_1EDF6C0D0, v32, v44);
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v36 = sub_18A5F3BA0();
    v37 = sub_18A60990C(v36, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v38 = sub_18A6A6454();
    if (sub_18A6A55D0(v38))
    {
      v39 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v39 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v40 = sub_18A5F37AC();
      *(_QWORD *)(v22 + 40) = sub_18A6A5704(v40, v41, &a11);
      sub_18A6A578C();
      sub_18A5F394C();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v37, v23, "%s not getting next record zone change batch for deallocated engine", v39);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    v42 = *(_QWORD *)(v22 + 72);
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    v43 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v43);
  }
}

uint64_t sub_18A67FCE0()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

#error "18A680264: call analysis failed (funcsize=363)"

uint64_t sub_18A680348(uint64_t a1, _OWORD *a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 64) = a6;
  *(_QWORD *)(v7 + 72) = a7;
  *(_BYTE *)(v7 + 105) = a5;
  *(_BYTE *)(v7 + 104) = a3;
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a4;
  *(_OWORD *)(v7 + 80) = *a2;
  return swift_task_switch();
}

uint64_t sub_18A680374()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(_BYTE *)(v0 + 105);
    v4 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    v5 = *(_BYTE *)(v0 + 104) & 1;
    v6 = sub_18A5F42C0();
    *(_BYTE *)(v0 + 16) = v5;
    *(_QWORD *)(v0 + 24) = v4;
    *(_BYTE *)(v0 + 32) = v2;
    *(_QWORD *)(v0 + 40) = v3;
    v7 = (_QWORD *)sub_18A5F3C20();
    *(_QWORD *)(v0 + 96) = v7;
    *v7 = v0;
    v7[1] = sub_18A68044C;
    return v10(*(_QWORD *)(v0 + 48), v0 + 16, *(_QWORD *)(v0 + 72), v6, v1);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 0;
    return sub_18A6A6E60(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_18A68044C()
{
  uint64_t v0;

  sub_18A623A14();
  sub_18A6239A4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A680478(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X11 }
}

uint64_t sub_18A6804C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t v20;
  void *v21;
  id v22;
  char v23;

  v22 = objc_msgSend(v21, sel_zoneID);
  v23 = sub_18A6689A8((uint64_t)v22, v20);

  return v23 & 1;
}

BOOL sub_18A6806B8(void *a1)
{
  return objc_msgSend(a1, sel_specialContainerType) == (id)29;
}

void sub_18A6806DC()
{
  sub_18A5F46AC();
  sub_18A6A8048();
}

void sub_18A680700(uint64_t a1)
{
  uint64_t v1;

  sub_18A5F40A4();
  *(_QWORD *)(v1 + 216) = a1;
  sub_18A5F42C8();
}

void sub_18A680730()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

uint64_t sub_18A680764(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 80) = v1;
  v3 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 57) = *(_OWORD *)((char *)a1 + 41);
  return sub_18A5F4434();
}

uint64_t sub_18A680790()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  sub_18A61A4B0(v0 + 16);
  sub_18A6A6DDC((uint64_t)&dword_1EDF6B240);
  sub_18A64A54C();
  v1 = (_QWORD *)sub_18A6A60C4();
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_18A680808;
  return sub_18A5F4134(v3);
}

uint64_t sub_18A680808()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A64A154(v2);
  *(_QWORD *)(v0 + 96) = v1;
  swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A68085C(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = a1;
  v2[12] = v1;
  sub_18A6A6990(v2 + 2, a1);
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A680894()
{
  _QWORD *v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (const void *)v0[11];
  v1 = v0[12];
  v3 = sub_18A5F37B4();
  v0[13] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  sub_18A6A6990((void *)(v3 + 24), v2);
  sub_18A64A54C();
  sub_18A621764((uint64_t)(v0 + 2));
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = v4;
  *v4 = v0;
  v4[1] = sub_18A680928;
  v5 = sub_18A6A5E14((uint64_t)&unk_1EDF6C548);
  return sub_18A6A7184(v5, v3);
}

uint64_t sub_18A680928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_18A5F4328();
  sub_18A64A154(v3);
  *(_QWORD *)(v0 + 120) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_18A5F3A94();
  swift_release();
  return sub_18A5F4680(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_18A680980()
{
  uint64_t v0;

  swift_release();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6809AC(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;

  memcpy((void *)(v2 + 16), a2, 0x41uLL);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v3;
  *v3 = v2;
  v3[1] = sub_18A680A08;
  return sub_18A680EA8(v2 + 16);
}

uint64_t sub_18A680A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A6A7D40();
  sub_18A623FAC();
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

void sub_18A680A50(void *a1, void *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 88);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_18A680AAC(v6, a2, a1);
  os_unfair_lock_unlock(v7);
}

void sub_18A680AAC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;

  if (a3)
  {
    v4 = a2;
    sub_18A69E6DC((uint64_t)a3, (uint64_t)v4, (uint64_t (*)(uint64_t))sub_18A69F7A4);
  }
  else
  {
    v5 = a2;
    v4 = (id)sub_18A69E214();

  }
}

void *sub_18A680B18()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(void **)(v1 + 16);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_18A680B54(void *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  id *v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(v1 + 96);
  v3 = (id *)&v2[4];
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_18A680BB0(v3, a1);
  os_unfair_lock_unlock(v4);

}

id sub_18A680BB0(id *a1, void *a2)
{

  *a1 = a2;
  return a2;
}

void *sub_18A680BF0()
{
  uint64_t v0;
  void *result;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_18A680B18();
  if (!result)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = (os_unfair_lock_s *)(v2 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
    v4 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v3);
    if (*(_QWORD *)(v4 + 16))
    {
      sub_18A6A94D4(v4);
      v6 = v5;
      swift_bridgeObjectRelease();
      return (void *)related decl 'e' for CKErrorCode.init(partialErrors:description:)(v6, 0xD000000000000023, 0x800000018A840B10);
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

void *sub_18A680C80(void *a1)
{
  uint64_t v1;
  void *result;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  result = sub_18A680B18();
  if (!result)
  {
    v4 = *(os_unfair_lock_s **)(v1 + 88);
    v5 = (uint64_t *)&v4[4];
    v6 = v4 + 6;
    os_unfair_lock_lock(v4 + 6);
    sub_18A680CF8(v5, a1, &v7);
    os_unfair_lock_unlock(v6);
    return (void *)v7;
  }
  return result;
}

void sub_18A680CF8(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  void *v8;
  id v9;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v5 = a2;
    sub_18A62E990();
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v6);
      v9 = v8;
    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_18A680D64(char *a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = a1[16];
  v6 = *((_QWORD *)a1 + 5);
  v7 = a1[48];
  v8 = *((_QWORD *)a1 + 7);
  v9 = a1[64];
  sub_18A5F101C((uint64_t *)&unk_1EDF6A3B0);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 88) = v10;
  sub_18A5F101C(&qword_1EDF6A3C8);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v1 + 96) = v11;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_BYTE *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 56) = v6;
  *(_BYTE *)(v1 + 64) = v7;
  *(_QWORD *)(v1 + 72) = v8;
  *(_BYTE *)(v1 + 80) = v9;
  return v1;
}

uint64_t sub_18A680E34()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_18A680E8C()
{
  sub_18A680E34();
  return swift_deallocClassInstance();
}

uint64_t sub_18A680EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v2 + 81) = *(_BYTE *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 320) = v1;
  *(_QWORD *)(v2 + 328) = v3;
  *(_BYTE *)(v2 + 82) = *(_BYTE *)(a1 + 16);
  *(_OWORD *)(v2 + 336) = *(_OWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 83) = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 352) = v4;
  *(_QWORD *)(v2 + 360) = v5;
  *(_BYTE *)(v2 + 84) = *(_BYTE *)(a1 + 64);
  return sub_18A5F4434();
}

uint64_t sub_18A680EF4()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(void);
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  if (qword_1EDF6A540 != -1)
    swift_once();
  v1 = *(void **)(v0 + 336);
  v2 = *(NSObject **)(v0 + 320);
  v3 = sub_18A5F3BA0();
  *(_QWORD *)(v0 + 368) = sub_18A60990C(v3, (uint64_t)qword_1EDF6A630);
  sub_18A66CCC0();
  v4 = v1;
  sub_18A66CCC0();
  sub_18A66CCC0();
  sub_18A5F3A58();
  v5 = v4;
  sub_18A63E2B8();
  v6 = sub_18A6A7910();
  if (sub_18A6A6294(v2))
  {
    v41 = *(_BYTE *)(v0 + 83);
    v42 = *(_QWORD *)(v0 + 360);
    v39 = *(_QWORD *)(v0 + 344);
    v40 = *(_QWORD *)(v0 + 352);
    v38 = *(_QWORD *)(v0 + 336);
    HIDWORD(v37) = *(unsigned __int8 *)(v0 + 82);
    HIDWORD(v35) = *(unsigned __int8 *)(v0 + 81);
    v36 = *(_QWORD *)(v0 + 328);
    v7 = (uint8_t *)sub_18A5F3830();
    v45 = sub_18A5F3830();
    *(_DWORD *)v7 = 136315394;
    sub_18A5F3E6C();
    sub_18A699D34();
    v9 = v8;
    sub_18A5F37AC();
    *(_QWORD *)(v0 + 304) = sub_18A6A57C4(v9, v10, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18A5F4804();
    sub_18A643358();
    sub_18A6A7D7C();
    v46[0] = BYTE4(v35);
    v47 = v36;
    v48 = BYTE4(v37);
    v11 = (void *)v38;
    v49 = v38;
    v50 = v39;
    v51 = v40;
    v52 = v41;
    v53 = v42;
    v12 = sub_18A6A70D8();
    *(_QWORD *)(v0 + 312) = sub_18A6A72B8(v12, v13, v14, v15, v16, v17, v18, v19, v34, v35, v36, v37, v38, v39, v40);
    sub_18A6A6F14();
    sub_18A654258();
    sub_18A654258();

    sub_18A654258();
    sub_18A5F37A4();
    sub_18A6A5608(&dword_18A5C5000, v2, v6, "%s fetching changes with context: %s", v7);
    sub_18A6A55E0();
    sub_18A5F392C();
  }
  v20 = *(void **)(v0 + 336);

  sub_18A654258();
  sub_18A654258();

  sub_18A654258();
  sub_18A6A54D0();
  sub_18A6A5FE8();
  if (v2)
  {
    v21 = (uint64_t (*)(void))sub_18A6A5B7C();
    return sub_18A6A625C(v21);
  }
  else
  {
    v23 = *(_BYTE *)(v0 + 84);
    v24 = *(_QWORD *)(v0 + 352);
    v43 = *(unsigned __int8 *)(v0 + 83);
    v44 = *(_QWORD *)(v0 + 360);
    v25 = *(void **)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 344);
    v27 = *(unsigned __int8 *)(v0 + 82);
    v29 = *(_QWORD *)(v0 + 328);
    v46[0] = *(_BYTE *)(v0 + 81);
    v28 = v46[0];
    v47 = v29;
    v48 = v27;
    v49 = (uint64_t)v25;
    v50 = v26;
    v51 = v24;
    v52 = v43;
    v53 = v44;
    v54 = v23;
    type metadata accessor for SyncEngine.FetchChangesPageIterationState();
    sub_18A5F37B4();
    *(_QWORD *)(v0 + 376) = sub_18A680D64(v46);
    sub_18A66CCC0();
    v30 = v25;
    sub_18A66CCC0();
    sub_18A66CCC0();
    v31 = v30;
    sub_18A69A518(v31);
    *(_QWORD *)(v0 + 16) = v28;
    *(_QWORD *)(v0 + 24) = v29;
    *(_QWORD *)(v0 + 32) = v27;
    *(_QWORD *)(v0 + 40) = v31;
    *(_QWORD *)(v0 + 48) = v26;
    *(_QWORD *)(v0 + 56) = v24;
    *(_QWORD *)(v0 + 64) = v43;
    *(_QWORD *)(v0 + 72) = v44;
    *(_BYTE *)(v0 + 80) = v23 | 0x60;
    sub_18A6A6020();
    v32 = v31;
    sub_18A6239CC();
    sub_18A5F40AC();
    v33 = (_QWORD *)sub_18A6A68C0();
    *(_QWORD *)(v0 + 384) = v33;
    sub_18A6A5B28(v33, (uint64_t)sub_18A68129C);
    return sub_18A69AF2C((const void *)(v0 + 16));
  }
}

uint64_t sub_18A68129C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6812D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32,uint64_t a33,uint64_t a34)
{
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  char v39;
  char v40;
  id v41;
  id v42;
  os_log_type_t v43;
  _BOOL4 v44;
  void *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v60;

  sub_18A6A7768();
  a33 = v35;
  a34 = v36;
  a32 = v34;
  v37 = v34[46];
  v38 = (void *)v34[42];
  sub_18A691BE8();
  v40 = v39;
  sub_18A5F3A58();
  sub_18A66CCC0();
  v41 = v38;
  sub_18A66CCC0();
  sub_18A66CCC0();
  v42 = v41;
  sub_18A6A5910();
  v43 = sub_18A6A58AC();
  v44 = sub_18A6A7D0C(v43);
  v45 = (void *)v34[42];
  if ((v40 & 1) != 0)
  {
    if (v44)
    {
      v46 = (uint8_t *)sub_18A5F3830();
      a23 = sub_18A5F3830();
      *(_DWORD *)v46 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v48 = v47;
      sub_18A5F37AC();
      v34[36] = sub_18A6A5948(v48, v49, &a23);
      sub_18A6A6058();
      sub_18A5F4804();
      sub_18A610384();
      sub_18A6A6598();
      v34[37] = sub_18A6A8240(v50, v51);
      sub_18A6A65D4();
      sub_18A654258();
      sub_18A654258();

      sub_18A654258();
      sub_18A5F37A4();
      sub_18A6A5608(&dword_18A5C5000, v37, v43, "%s fetching changes for scope: %s", v46);
      sub_18A6A55E0();
      sub_18A5F392C();
    }

    sub_18A654258();
    sub_18A654258();

    sub_18A6A54D0();
    sub_18A654258();
    v58 = (_QWORD *)swift_task_alloc();
    v34[49] = v58;
    sub_18A6A5B28(v58, (uint64_t)sub_18A68166C);
    sub_18A6A5E68();
    return sub_18A68C2A4();
  }
  else
  {
    if (v44)
    {
      v52 = (uint8_t *)sub_18A5F3830();
      a23 = sub_18A5F3830();
      *(_DWORD *)v52 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v54 = v53;
      sub_18A5F37AC();
      v34[32] = sub_18A6A5948(v54, v55, &a23);
      sub_18A6A6058();
      sub_18A5F4804();
      sub_18A610384();
      sub_18A6A6598();
      v34[33] = sub_18A6A8240(v56, v57);
      sub_18A6A65D4();
      sub_18A654258();
      sub_18A654258();

      sub_18A654258();
      sub_18A5F37A4();
      sub_18A6A5608(&dword_18A5C5000, v37, v43, "%s no need to fetch changes for scope: %s", v52);
      sub_18A6A55E0();
      sub_18A5F392C();
    }

    sub_18A654258();
    sub_18A654258();

    sub_18A6A54D0();
    sub_18A654258();
    v34[60] = 0;
    v60 = (_QWORD *)swift_task_alloc();
    v34[61] = v60;
    sub_18A6A5B28(v60, (uint64_t)sub_18A681CCC);
    sub_18A6A5E68();
    return sub_18A68C974();
  }
}

uint64_t sub_18A68166C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;
  _QWORD *v6;
  uint64_t v7;

  sub_18A6A5BE8();
  sub_18A64A154(v3);
  *(_QWORD *)(v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
    return sub_18A5F3EA4();
  v5 = *(id *)(v1 + 336);
  v6 = (_QWORD *)sub_18A6433B4();
  *(_QWORD *)(v1 + 408) = v6;
  *v6 = v2;
  v6[1] = sub_18A6816E8;
  v7 = sub_18A6A5854();
  return sub_18A6A69E0(v7);
}

uint64_t sub_18A6816E8()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A676C();
  if (!v1)

  return sub_18A5F3A94();
}

uint64_t sub_18A681738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  void *v51;
  id v52;
  _QWORD *v53;

  sub_18A6A6A8C();
  a23 = v27;
  a24 = v28;
  a22 = v25;
  v29 = *(_QWORD *)(*(_QWORD *)(v25 + 320) + 128);
  if ((*(_BYTE *)(v25 + 84) & 1) != 0 || (sub_18A68FCB8(), (v30 & 1) == 0) || sub_18A6923E8())
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v31 = sub_18A6A584C();
    if (sub_18A6A562C(v31))
    {
      v32 = (uint8_t *)sub_18A5F3830();
      a13 = sub_18A5F3830();
      *(_DWORD *)v32 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v34 = v33;
      sub_18A5F37AC();
      *(_QWORD *)(v25 + 280) = sub_18A6A5948(v34, v35, &a13);
      sub_18A6A5D8C();
      sub_18A5F4804();
      sub_18A610384();
      sub_18A63E290(&dword_18A5C5000, v24, v26, "%s fetching database changes at least once", v32);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A6A5E58(*(id *)(v29 + 16), sel_setNeedsToFetchDatabaseChanges_);
  }
  v36 = *(_BYTE *)(v25 + 84);
  v37 = *(_BYTE *)(v25 + 83);
  v39 = *(_QWORD *)(v25 + 352);
  v38 = *(_QWORD *)(v25 + 360);
  v40 = *(_BYTE *)(v25 + 82);
  *(_QWORD *)(v25 + 160) = *(_QWORD *)(v25 + 328);
  *(_BYTE *)(v25 + 168) = v40;
  *(_OWORD *)(v25 + 176) = *(_OWORD *)(v25 + 336);
  *(_QWORD *)(v25 + 192) = v39;
  *(_BYTE *)(v25 + 200) = v37;
  *(_QWORD *)(v25 + 208) = v38;
  *(_BYTE *)(v25 + 216) = v36;
  sub_18A691BE8();
  v41 = *(_QWORD *)(v25 + 376);
  if ((v42 & 1) != 0)
  {
    v43 = *(_QWORD *)(v25 + 320);
    *(_QWORD *)(v25 + 424) = *(_QWORD *)(v43 + 200);
    v44 = sub_18A6A58B4();
    *(_QWORD *)(v25 + 432) = v44;
    *(_QWORD *)(v44 + 16) = v43;
    *(_QWORD *)(v44 + 24) = v41;
    v45 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v25 + 440) = v45;
    *v45 = v25;
    v45[1] = sub_18A681990;
    sub_18A6A61C0();
    return sub_18A673BB4(v46, v47, v48);
  }
  else
  {
    v50 = sub_18A680BF0();
    v51 = v50;
    if (v50)
    {
      v52 = v50;
      sub_18A6A60B0();

    }
    *(_QWORD *)(v25 + 480) = v51;
    v53 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v25 + 488) = v53;
    sub_18A6A5B28(v53, (uint64_t)sub_18A681CCC);
    sub_18A6A61C0();
    return sub_18A68C974();
  }
}

uint64_t sub_18A681990()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_18A5F4328();
  sub_18A6A6DF8();
  *(_BYTE *)(v0 + 85) = v2;
  *(_QWORD *)(v0 + 448) = v1;
  sub_18A6A5DDC();
  if (!v1)
    swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A6819F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[47];
  v2 = v0[40];
  v3 = sub_18A6A58B4();
  v0[57] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[58] = v4;
  *v4 = v0;
  v4[1] = sub_18A681A6C;
  return sub_18A673BB4(1, (uint64_t)&unk_1EDF6C518, v3);
}

uint64_t sub_18A681A6C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  sub_18A6A5BE8();
  sub_18A64A154(v4);
  *(_QWORD *)(v2 + 472) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_BYTE *)(v2 + 86) = a1 & 1;
    swift_task_dealloc();
  }
  return sub_18A5F3EA4();
}

uint64_t sub_18A681ADC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  swift_task_dealloc();
  v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 448));
  v4 = sub_18A6A6B34(v3);
  sub_18A6A60B0();

  *(_QWORD *)(v2 + 480) = v0;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 488) = v5;
  sub_18A6A5B28(v5, (uint64_t)sub_18A681CCC);
  return sub_18A6A5A7C();
}

uint64_t sub_18A681B40()
{
  void *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v12;
  void *v13;
  id v14;
  _QWORD *v15;

  if ((*(_BYTE *)(v1 + 85) & 1) == 0 && !*(_BYTE *)(v1 + 86))
    goto LABEL_5;
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(v1 + 328);
  v2 = *(_BYTE *)(v1 + 84);
  v3 = *(_BYTE *)(v1 + 83);
  v5 = *(_QWORD *)(v1 + 352);
  v4 = *(_QWORD *)(v1 + 360);
  *(_BYTE *)(v1 + 168) = *(_BYTE *)(v1 + 82);
  *(_OWORD *)(v1 + 176) = *(_OWORD *)(v1 + 336);
  *(_QWORD *)(v1 + 192) = v5;
  *(_BYTE *)(v1 + 200) = v3;
  *(_QWORD *)(v1 + 208) = v4;
  *(_BYTE *)(v1 + 216) = v2;
  sub_18A691BE8();
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(v1 + 376);
    v8 = *(_QWORD *)(v1 + 320);
    *(_QWORD *)(v1 + 424) = *(_QWORD *)(v8 + 200);
    v9 = sub_18A6A58B4();
    *(_QWORD *)(v1 + 432) = v9;
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 440) = v10;
    *v10 = v1;
    v10[1] = sub_18A681990;
    return sub_18A673BB4(1, (uint64_t)&unk_1EDF6C500, v9);
  }
  else
  {
LABEL_5:
    v12 = sub_18A680BF0();
    v13 = v12;
    if (v12)
    {
      v14 = v12;
      sub_18A6A60B0();

    }
    *(_QWORD *)(v1 + 480) = v13;
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 488) = v15;
    sub_18A6A5B28(v15, (uint64_t)sub_18A681CCC);
    return sub_18A6A7174();
  }
}

uint64_t sub_18A681C68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  swift_task_dealloc();
  v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 472));
  v4 = sub_18A6A6B34(v3);
  sub_18A6A60B0();

  *(_QWORD *)(v2 + 480) = v0;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 488) = v5;
  sub_18A6A5B28(v5, (uint64_t)sub_18A681CCC);
  return sub_18A6A5A7C();
}

uint64_t sub_18A681CCC()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A681D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  _QWORD *v10;

  sub_18A6A5778();
  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(unsigned __int8 *)(v0 + 83);
  v5 = *(void **)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v6 = *(unsigned __int8 *)(v0 + 82);
  v7 = *(_QWORD *)(v0 + 328);
  v8 = *(_BYTE *)(v0 + 84) | 0x90;
  *(_QWORD *)(v0 + 88) = *(unsigned __int8 *)(v0 + 81);
  *(_QWORD *)(v0 + 96) = v7;
  *(_QWORD *)(v0 + 104) = v6;
  *(_QWORD *)(v0 + 112) = v5;
  *(_QWORD *)(v0 + 120) = v4;
  *(_QWORD *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 136) = v3;
  *(_QWORD *)(v0 + 144) = v1;
  *(_BYTE *)(v0 + 152) = v8;
  swift_bridgeObjectRetain();
  v9 = v5;
  sub_18A5F3FAC();
  sub_18A5F3898();
  v10 = (_QWORD *)sub_18A6A6F6C();
  *(_QWORD *)(v0 + 496) = v10;
  sub_18A6A5B28(v10, (uint64_t)sub_18A681D9C);
  return sub_18A6A5FFC((const void *)(v0 + 88));
}

uint64_t sub_18A681D9C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A681DD4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  void *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  void *v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  NSObject *v65;
  void *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v1 = *(void **)(v0 + 480);
  v2 = *(void **)(v0 + 352);
  v3 = *(void **)(v0 + 336);
  if (v1)
  {
    v4 = v1;
    sub_18A5F3A58();
    sub_18A66CCC0();
    v5 = v3;
    sub_18A66CCC0();
    sub_18A66CCC0();
    v6 = v4;
    sub_18A6A7854();
    v7 = v2;
    Logger.logObject.getter();
    v8 = sub_18A6A837C();
    if (sub_18A6A6294(v5))
    {
      HIDWORD(v62) = *(unsigned __int8 *)(v0 + 84);
      LODWORD(v58) = *(unsigned __int8 *)(v0 + 83);
      v60 = *(_QWORD *)(v0 + 360);
      v9 = *(void **)(v0 + 336);
      v55 = *(_QWORD *)(v0 + 344);
      v57 = *(_QWORD *)(v0 + 352);
      HIDWORD(v51) = *(unsigned __int8 *)(v0 + 81);
      LODWORD(v52) = *(unsigned __int8 *)(v0 + 82);
      v10 = *(_QWORD *)(v0 + 328);
      v11 = sub_18A5F3830();
      v64 = (_QWORD *)sub_18A5F3830();
      v67 = sub_18A5F3830();
      *(_DWORD *)v11 = 136315650;
      sub_18A5F3E6C();
      sub_18A699D34();
      v66 = v7;
      v13 = v12;
      sub_18A5F37AC();
      *(_QWORD *)(v0 + 232) = sub_18A6A57C4(v13, v14, &v67);
      sub_18A6A726C();
      sub_18A6A68EC();
      sub_18A643358();
      sub_18A5F4804();
      *(_WORD *)(v11 + 12) = 2080;
      v68 = BYTE4(v51);
      v69 = v10;
      v70 = v52;
      v15 = (void *)v57;
      v71 = v9;
      v72 = v55;
      v73 = v57;
      v74 = v58;
      v75 = v60;
      v16 = sub_18A6A70D8();
      *(_QWORD *)(v0 + 240) = sub_18A6A72B8(v16, v17, v18, v19, v20, v21, v22, v23, v51, v52, v55, v57, v58, v60, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A5F37A4();
      sub_18A654258();

      sub_18A654258();
      sub_18A654258();
      sub_18A6A75A4();
      v24 = v66;
      v25 = sub_18A6A6F24();
      *(_QWORD *)(v0 + 248) = v25;
      sub_18A6A5740();
      *v64 = v25;

      sub_18A6A61B8(&dword_18A5C5000, v5, v8, "%s error fetching changes with context %s: %@", (uint8_t *)v11);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    v43 = *(void **)(v0 + 352);
    v44 = *(void **)(v0 + 336);
    sub_18A6A54D0();

    sub_18A654258();
    sub_18A654258();

    sub_18A654258();
    if (*(_BYTE *)(v0 + 81) == 1)
    {
      v45 = v7;
      v46 = (_QWORD *)sub_18A6A6668();
      *(_QWORD *)(v0 + 504) = v46;
      *v46 = v0;
      v46[1] = sub_18A6823A4;
      v47 = sub_18A6A5E14(*(_QWORD *)(v0 + 480));
      return sub_18A6948C0(v47);
    }
    else
    {
      sub_18A6A6CF0();
      sub_18A6A5980();

      sub_18A6A5980();
      sub_18A6A5980();
      sub_18A5F3AA0();

      return sub_18A6A625C(*(uint64_t (**)(void))(v0 + 8));
    }
  }
  else
  {
    sub_18A5F3A58();
    sub_18A66CCC0();
    v26 = v3;
    sub_18A66CCC0();
    sub_18A66CCC0();
    v27 = v26;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.default.getter();
    if (sub_18A6A6E08(v28))
    {
      HIDWORD(v62) = *(unsigned __int8 *)(v0 + 83);
      v63 = *(_QWORD *)(v0 + 360);
      v30 = *(void **)(v0 + 336);
      v59 = *(_QWORD *)(v0 + 344);
      v61 = *(_QWORD *)(v0 + 352);
      LODWORD(v56) = *(unsigned __int8 *)(v0 + 82);
      LODWORD(v54) = *(unsigned __int8 *)(v0 + 81);
      v53 = *(_QWORD *)(v0 + 328);
      v31 = (uint8_t *)sub_18A5F3830();
      v67 = sub_18A5F3830();
      *(_DWORD *)v31 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v65 = v28;
      v33 = v32;
      sub_18A5F37AC();
      *(_QWORD *)(v0 + 272) = sub_18A6A5948(v33, v34, &v67);
      sub_18A6A6510();
      sub_18A610384();
      sub_18A5F4804();
      sub_18A6A7D88();
      v68 = v54;
      v69 = v53;
      v70 = v56;
      v71 = v30;
      v72 = v59;
      v73 = v61;
      v74 = BYTE4(v62);
      v75 = v63;
      v35 = sub_18A6A70D8();
      *(_QWORD *)(v0 + 224) = sub_18A6A72B8(v35, v36, v37, v38, v39, v40, v41, v42, v51, v53, v54, v56, v59, v61, v62);
      sub_18A6A6F14();
      sub_18A5F37A4();
      sub_18A654258();

      sub_18A654258();
      sub_18A654258();
      sub_18A6A5608(&dword_18A5C5000, v65, v29, "%s finished fetching changes with context %s", v31);
      sub_18A6A56D0();
      sub_18A5F392C();
    }
    v49 = *(void **)(v0 + 336);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    sub_18A6A54D0();

    swift_bridgeObjectRelease_n();
    v50 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A6A625C(v50);
  }
}

uint64_t sub_18A6823A4()
{
  uint64_t v0;
  void *v1;

  sub_18A623A14();
  v1 = *(void **)(v0 + 480);
  sub_18A6239A4();

  sub_18A6A5670();
  return sub_18A5F3A94();
}

uint64_t sub_18A6823E4()
{
  void *v0;
  uint64_t v1;
  void *v2;

  sub_18A623E50();
  sub_18A6A6CF0();
  sub_18A6A5980();

  sub_18A6A5980();
  sub_18A6A5980();
  sub_18A5F3AA0();

  return sub_18A6A5B90(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A682440()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 400));
  v4 = sub_18A6A6B34(v3);
  sub_18A6A60B0();

  *(_QWORD *)(v2 + 480) = v0;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 488) = v5;
  sub_18A6A5B28(v5, (uint64_t)sub_18A681CCC);
  return sub_18A6A5A7C();
}

uint64_t sub_18A68249C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 416));
  v4 = sub_18A6A6B34(v3);
  sub_18A6A60B0();

  *(_QWORD *)(v2 + 480) = v0;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 488) = v5;
  sub_18A6A5B28(v5, (uint64_t)sub_18A681CCC);
  return sub_18A6A5A7C();
}

uint64_t sub_18A682500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_18A682558;
  return sub_18A682688(a3);
}

uint64_t sub_18A682558(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_18A5F416C(&v7);
  if (v1)
    return sub_18A623874(*(uint64_t (**)(void))(v5 + 8));
  *(_BYTE *)(v4 + 32) = a1 & 1;
  sub_18A5F3840();
  return sub_18A5F3EA4();
}

uint64_t sub_18A6825BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_18A682614;
  return sub_18A683580(a3);
}

uint64_t sub_18A682614(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_18A5F416C(&v7);
  if (v1)
    return sub_18A623874(*(uint64_t (**)(void))(v5 + 8));
  *(_BYTE *)(v4 + 32) = a1 & 1;
  sub_18A5F3840();
  return sub_18A5F3EA4();
}

uint64_t sub_18A682678()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return sub_18A65B2E4();
}

uint64_t sub_18A682688(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[29] = a1;
  v2[30] = v1;
  v3 = sub_18A5F40B4();
  v2[31] = v3;
  v2[32] = *(_QWORD *)(v3 - 8);
  v2[33] = sub_18A5F3CBC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6826CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  unint64_t Changes;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(void);
  uint64_t v64;

  sub_18A6A567C();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = *(_QWORD *)(*(_QWORD *)(v26 + 240) + 128);
  *(_QWORD *)(v26 + 272) = v29;
  v30 = objc_msgSend(*(id *)(v29 + 16), sel_needsToFetchDatabaseChanges);
  *(_BYTE *)(v26 + 81) = v30;
  if (v30)
  {
    v31 = *(_QWORD *)(v26 + 232);
    v32 = *(NSObject **)(v26 + 240);
    *(v26 + 280) = v32[17];
    *(_QWORD *)(v26 + 288) = *(_QWORD *)(v31 + 40);
    if (qword_1EDF6A540 != -1)
    {
      swift_once();
      v32 = *(NSObject **)(v26 + 240);
    }
    v33 = sub_18A5F3BA0();
    v34 = sub_18A60990C(v33, (uint64_t)qword_1EDF6A630);
    *(_QWORD *)(v26 + 296) = v34;
    sub_18A5F3A58();
    sub_18A5F3A58();
    sub_18A63E2B8();
    v35 = sub_18A6A584C();
    if (sub_18A6A5660(v35))
    {
      v64 = *(_QWORD *)(v26 + 288);
      v36 = *(_QWORD *)(v26 + 232);
      v37 = (uint8_t *)sub_18A5F3830();
      a15 = sub_18A5F3830();
      *(_DWORD *)v37 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v38 = sub_18A5F37AC();
      *(_QWORD *)(v26 + 208) = sub_18A6A5704(v38, v39, &a15);
      sub_18A6A65D4();
      sub_18A5F4804();
      sub_18A5F394C();
      sub_18A6A7D7C();
      v40 = *(_QWORD *)(v36 + 24);
      v41 = *(_BYTE *)(v36 + 32);
      v42 = *(_BYTE *)(v36 + 64);
      v43 = *(_QWORD *)(v36 + 72);
      v44 = *(_BYTE *)(v36 + 80);
      v45 = *(_OWORD *)(v36 + 48);
      *(_BYTE *)(v26 + 16) = *(_BYTE *)(v36 + 16);
      *(_QWORD *)(v26 + 24) = v40;
      *(_BYTE *)(v26 + 32) = v41;
      *(_QWORD *)(v26 + 40) = v64;
      *(_OWORD *)(v26 + 48) = v45;
      *(_BYTE *)(v26 + 64) = v42;
      *(_QWORD *)(v26 + 72) = v43;
      *(_BYTE *)(v26 + 80) = v44;
      Changes = CKSyncEngine.FetchChangesContext.description.getter();
      *(_QWORD *)(v26 + 224) = sub_18A6A6B90(Changes, v47, v48, v49, v50, v51, v52, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A6A54D0();
      sub_18A5F37A4();
      sub_18A6A5608(&dword_18A5C5000, v32, (os_log_type_t)v34, "%s will fetch next database changes for context %s", v37);
      sub_18A6A55E0();
      sub_18A5F392C();
    }
    sub_18A6A7BC4();
    sub_18A6A54D0();
    sub_18A5F4804();
    sub_18A6A64DC(*(void **)(v26 + 288));
    v57 = (_QWORD *)sub_18A6433B4();
    *(_QWORD *)(v26 + 304) = v57;
    *v57 = v26;
    v57[1] = sub_18A682920;
    v58 = sub_18A6A700C();
    return sub_18A6A5AFC(v58, v59, v60, v61, v62, v63);
  }
  else
  {
    sub_18A6A7BCC();
    v54 = sub_18A6A7684();
    return sub_18A6A5AE0(v54, v55);
  }
}

uint64_t sub_18A682920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_18A5F4328();
  sub_18A6A6DF8();
  *(_QWORD *)(v0 + 312) = v2;
  *(_QWORD *)(v0 + 320) = v3;
  *(_BYTE *)(v0 + 82) = v4;
  *(_QWORD *)(v0 + 328) = v5;
  *(_QWORD *)(v0 + 336) = v1;
  sub_18A6A5DDC();
  if (!v1)

  return sub_18A5F3A94();
}

#error "18A682BDC: call analysis failed (funcsize=262)"

uint64_t sub_18A682DEC()
{
  sub_18A6A7D54();
  sub_18A6239A4();
  sub_18A5F37A4();
  sub_18A5F37E0();
  return sub_18A5F3EA4();
}

#error "18A682F44: call analysis failed (funcsize=182)"

#error "18A6832F8: call analysis failed (funcsize=161)"

uint64_t sub_18A68341C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_18A683434()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v0[4] = objc_msgSend(*(id *)(v0[3] + 16), sel_serverChangeTokenForDatabase);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_18A6834AC;
  v2 = sub_18A6A5854();
  return CKDatabase.databaseChanges(since:resultsLimit:)(v2, 0, 1);
}

uint64_t sub_18A6834AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v12;

  sub_18A614630();
  v12 = *v7;
  v10 = v12;
  sub_18A64A154(&v12);
  *(_QWORD *)(v10 + 48) = v5;
  swift_task_dealloc();
  if (v5)
  {
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {

    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v7[1])(v6, v4, a3, a4 & 1);
  }
}

uint64_t sub_18A683548()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A683580(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2[94] = v1;
  v2[93] = a1;
  v3 = sub_18A6A7040();
  v2[95] = v3;
  v2[96] = *(_QWORD *)(v3 - 8);
  v2[97] = sub_18A5F3CBC();
  v4 = (_QWORD *)swift_task_alloc();
  v2[98] = v4;
  v5 = sub_18A6A6E7C(v4);
  return sub_18A68833C(v5, v6);
}

uint64_t sub_18A6835F4()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

#error "18A683928: call analysis failed (funcsize=328)"

uint64_t sub_18A683B9C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

#error "18A683CD8: call analysis failed (funcsize=82)"

uint64_t sub_18A683D24()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 912) = v0;
  sub_18A6A5DDC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A683D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v25;

  sub_18A623E50();
  v11 = v10[114];
  if (v11)
  {
    if (*(_QWORD *)(v11 + 16))
    {
      sub_18A6239CC();
      sub_18A5F37A4();
      sub_18A6A7938();
    }
    else
    {
      sub_18A5F37A4();
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
    v12 = sub_18A6669E8(MEMORY[0x1E0DEE9D8]);
  v13 = (void *)v10[112];
  v14 = (void *)v10[100];
  v10[70] = 0;
  v10[71] = v12;
  sub_18A6A6DDC((uint64_t)&dword_1EDF6BBB0);
  sub_18A5F40AC();
  sub_18A5F3FAC();
  v15 = v13;
  v16 = v14;
  v17 = (_QWORD *)sub_18A6A68C0();
  v10[115] = v17;
  *v17 = v10;
  v17[1] = sub_18A683E4C;
  sub_18A623D08();
  return v24(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t sub_18A683E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  sub_18A6A5778();
  v3 = v2;
  sub_18A6A78A4();
  sub_18A64A154(v4);
  *(_QWORD *)(v1 + 928) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = *(void **)(v1 + 800);

    sub_18A5F37A4();
    *(_QWORD *)(v1 + 936) = v3;
  }
  return sub_18A6A5560();
}

void sub_18A683EC8()
{
  Class v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  Class v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  objc_class *v35;
  objc_class *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_class *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  __n128 *inited;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  objc_class *v62;
  uint64_t v63;
  Class v64;
  Class v65;
  id *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::Int *v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t *v78;
  void **v79;
  unint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  objc_class *v85;
  NSObject *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  int64_t v92;
  int64_t v93;
  char v94;
  id v95;
  unint64_t v96;
  id *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  char v108;
  Swift::Bool v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  unint64_t *v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  objc_class *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *(*v150)(uint64_t *__return_ptr, uint64_t, _QWORD);
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  Class isa;
  objc_class *v156;
  objc_class *v157;
  uint64_t (*v158)();
  const void *v159;
  NSObject *v160;
  uint64_t v161;
  objc_class *v162;
  objc_class *v163;
  objc_class *v164;
  Class v165;
  unint64_t v166;
  objc_class *v167;
  id v168;
  char v169;
  objc_class *v170;
  objc_class *v171;
  NSObject *v172;
  os_log_type_t v173;
  uint64_t v174;
  _QWORD *v175;
  NSObject *v176;
  objc_class *v177;
  unint64_t v178;
  objc_class *v179;
  objc_class *v180;
  objc_class *v181;
  void *v182;
  void *v183;
  Class v184;
  id v185;
  os_log_type_t v186;
  uint8_t *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  id v191;
  uint64_t v192;
  os_log_type_t v193;
  int v194;
  uint8_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  Class v199;
  Class v200;
  Class v201;
  objc_class *v202;
  uint64_t v203;
  uint64_t (*v204)(void);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  objc_class **v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  _QWORD *v249;
  uint64_t v250;
  Class *v251;
  uint64_t v252;
  id *v253;
  NSObject *v254;
  unint64_t *v255;
  unint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  objc_class *v259;
  uint64_t v260;
  void *v261;
  objc_class *rawValue;
  uint64_t *v263;
  unint64_t *v264;
  uint64_t v265;
  int64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  Swift::OpaquePointer v273[3];

  sub_18A6A6358();
  v4 = v2;
  v5 = 0;
  v236 = (uint64_t)(v2 + 40);
  sub_18A6A7864();
  v219 = v7;
  v221 = v8;
  v238 = (uint64_t)(v2 + 70);
  v251 = (Class *)(v2 + 72);
  v252 = v9;
  v253 = (id *)(v2 + 74);
  v241 = v2 + 75;
  v217 = (uint64_t)(v2 + 77);
  v249 = v2 + 78;
  v250 = (uint64_t)(v2 + 73);
  v264 = v2 + 79;
  v234 = (uint64_t)(v2 + 81);
  v235 = (uint64_t)(v2 + 80);
  v263 = v2 + 82;
  v10 = v2[117];
  v11 = v2[116];
  v12 = (unint64_t *)MEMORY[0x1E0DEE9D8];
  v2[118] = 0;
  v2[85] = v12;
  v2[84] = v12;
  v13 = *(_QWORD *)(v10 + 64);
  v257 = v10 + 64;
  v14 = -1 << *(_BYTE *)(v10 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v233 = *MEMORY[0x1E0CB2D50];
  v240 = v11;
  *(_QWORD *)&v6 = 136315650;
  v248 = v6;
  v228 = 0x800000018A840B10;
  v231 = xmmword_18A83AC30;
  v230 = 0x800000018A840940;
  v223 = (uint64_t)(v2 + 83);
  v244 = (objc_class **)(v2 + 84);
  v239 = (uint64_t)(v2 + 85);
  v215 = (uint64_t)(v2 + 87);
  v211 = (uint64_t)(v2 + 86);
  v213 = (uint64_t)(v2 + 88);
  v258 = v2[111];
  v229 = v2[96];
  LODWORD(v17) = v11 != 0;
  v247 = MEMORY[0x1E0DEE9B8] + 8;
  v254 = v2;
  v237 = (uint64_t)(v2 + 76);
  while (2)
  {
    v4[119].isa = (Class)v12;
    v255 = v12;
LABEL_6:
    HIDWORD(v246) = (_DWORD)v17;
    BYTE2(v4[12].isa) = v17 & 1;
    if (v16)
    {
LABEL_7:
      sub_18A6A8004();
      v268 = v18;
      goto LABEL_23;
    }
    while (1)
    {
      v19 = __OFADD__(v5++, 1);
      if (v19)
      {
        __break(1u);
        goto LABEL_143;
      }
      sub_18A6A7FF8();
      if (v20 == v19)
      {
LABEL_113:
        swift_release();
        v154 = v12[2];
        isa = v4[85].isa;
        v4[120].isa = isa;
        if (v154)
        {
          v156 = *v244;
          goto LABEL_117;
        }
        v156 = *v244;
        if (*((_QWORD *)isa + 2) || *((_QWORD *)v156 + 2))
        {
LABEL_117:
          v4[121].isa = v156;
          v4[13].isa = (Class)v12;
          v4[14].isa = isa;
          v4[15].isa = v156;
          *(_OWORD *)&v4[16].isa = 0u;
          *(_OWORD *)&v4[18].isa = 0u;
          v4[20].isa = 0;
          LOBYTE(v4[21].isa) = 48;
          sub_18A61039C();
          sub_18A5F3898();
          sub_18A5F3D48();
          v157 = (objc_class *)sub_18A6A60C4();
          v4[122].isa = v157;
          v158 = sub_18A6852B4;
LABEL_118:
          *(_QWORD *)v157 = v4;
          *((_QWORD *)v157 + 1) = v158;
          v159 = (const void *)sub_18A6A5854();
          sub_18A6A62CC(v159);
          return;
        }
        sub_18A687D64((unint64_t)v4[101].isa);
        v86 = v4[70].isa;
        v160 = v4[71].isa;
        sub_18A64A54C();
        sub_18A623E28();
        v161 = sub_18A6A7250();
        v163 = v162;
        sub_18A61A878();
        sub_18A5F3AA0();
        v4[123].isa = (Class)v161;
        v4[124].isa = v163;
        v164 = (objc_class *)*((_QWORD *)v163 + 2);
        v4[125].isa = v164;
        if (v164)
        {
          v86 = ((char *)v4[94].isa + 208);
          sub_18A6A79D0();
          sub_18A5F3E6C();
          sub_18A5F46AC();
          v4[126].isa = 0;
          v165 = v4[124].isa;
          if (!*((_QWORD *)v165 + 2))
          {
LABEL_127:
            __break(1u);
LABEL_128:

            v273[0]._rawValue = 0;
            v273[1]._rawValue = (void *)0xE000000000000000;
            sub_18A6A6D58();
            v178 = sub_18A6A5F0C();
            sub_18A6A5DFC(v178, (uint64_t)"Unable to convert error to CKError: ");
            swift_getErrorValue();
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            sub_18A6A5EFC();
            sub_18A6A5B5C();
            sub_18A6A6998();
            return;
          }
          v166 = 0;
          v86 = "BUG IN CLOUDKIT: CKSyncEngine finished fetching changes for a zone that it never started: %@";
          v160 = &unk_1EDF6A900;
          while (1)
          {
            v167 = (objc_class *)*((_QWORD *)v165 + v166 + 4);
            v4[127].isa = v167;
            v168 = sub_18A6A76A0(v167);
            sub_18A5F3898();
            v169 = sub_18A6A7760(v168);
            sub_18A5F37A4();
            v170 = (objc_class *)v168;
            v171 = v170;
            if ((v169 & 1) != 0)
            {
              v179 = (objc_class *)sub_18A680C80(v170);
              v4[128].isa = v179;
              v4[22].isa = v171;
              v4[23].isa = v179;
              *(_OWORD *)&v4[24].isa = 0u;
              *(_OWORD *)&v4[26].isa = 0u;
              *(_OWORD *)&v4[28].isa = 0u;
              LOBYTE(v4[30].isa) = 0x80;
              v180 = v171;
              v181 = v179;
              v157 = (objc_class *)sub_18A6A79C8();
              v4[129].isa = v157;
              v158 = sub_18A685820;
              goto LABEL_118;
            }
            v172 = v4[105].isa;
            Logger.logObject.getter();
            v173 = sub_18A6A68E4();
            if (sub_18A6A5810(v172))
            {
              v174 = sub_18A5F3830();
              v175 = (_QWORD *)sub_18A5F3830();
              *(_DWORD *)v174 = 138412290;
              *(_QWORD *)(v174 + 4) = v171;
              *v175 = v171;
              sub_18A63E290(&dword_18A5C5000, v172, v173, "BUG IN CLOUDKIT: CKSyncEngine finished fetching changes for a zone that it never started: %@", (uint8_t *)v174);
              sub_18A6A72EC();
              sub_18A5F38D8();
              sub_18A5F392C();
            }

            v176 = v172;
            v177 = v171;

            v3 = (unint64_t)v4[126].isa;
            v17 = v4[125].isa;

            if ((id)(v3 + 1) == v17)
              break;
            v166 = (unint64_t)v4[126].isa + 1;
            v4[126].isa = (Class)v166;
            v165 = v4[124].isa;
            if (v166 >= *((_QWORD *)v165 + 2))
              goto LABEL_127;
          }
          swift_release();
          sub_18A5F37AC();
        }
        if (BYTE2(v4[12].isa) == 1)
        {
          v182 = sub_18A680BF0();
          if (!v182)
            goto LABEL_147;
          v183 = v182;
          v184 = v4[94].isa;
          swift_bridgeObjectRelease();
          sub_18A5F3A58();
          v185 = v183;
          sub_18A6A6F3C();
          v186 = sub_18A6A7920();
          if (sub_18A6A562C(v186))
          {
            v187 = (uint8_t *)sub_18A5F3830();
            v188 = (_QWORD *)sub_18A5F3830();
            v273[0]._rawValue = (void *)sub_18A5F3830();
            *(_DWORD *)v187 = 136315394;
            sub_18A5F3E6C();
            sub_18A699D34();
            v189 = sub_18A5F37AC();
            v254[87].isa = (Class)sub_18A6A5704(v189, v190, (uint64_t *)v273);
            sub_18A6A6058();
            sub_18A5F4804();
            sub_18A5F394C();
            v191 = sub_18A6A6928();
            v192 = _swift_stdlib_bridgeErrorToNSError();
            v254[88].isa = (Class)v192;
            sub_18A6A5740();
            *v188 = v192;

            sub_18A6A5608(&dword_18A5C5000, v160, (os_log_type_t)v17, "%s error fetching record zone changes: %@", v187);
            sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
            sub_18A5F38D8();
            sub_18A5F392C();
          }

          sub_18A5F4804();
          v199 = v4[118].isa;
          v200 = v4[112].isa;
          v201 = v4[100].isa;
          v202 = v184;
          sub_18A6A8050();

          sub_18A61A878();
          sub_18A5F394C();
          sub_18A5F3A8C();

          swift_bridgeObjectRelease();
          sub_18A5F438C();
          sub_18A6A760C();
          sub_18A6A75E8();
          sub_18A6A75E0();
          sub_18A6A75D8();
          goto LABEL_141;
        }
        sub_18A6A7658();
        sub_18A5F3A58();
        Logger.logObject.getter();
        v193 = sub_18A6A58AC();
        sub_18A6A5B4C(v86);
        sub_18A6A656C();
        if (v194)
        {
          v195 = (uint8_t *)sub_18A6A6D60();
          v273[0]._rawValue = (void *)sub_18A5F3830();
          *(_DWORD *)v195 = 136315138;
          sub_18A5F3E6C();
          sub_18A699D34();
          v197 = v196;
          sub_18A5F37AC();
          v4[86].isa = (Class)sub_18A6A5E28(v197, v198, (uint64_t *)v273);
          sub_18A6A5D8C();
          sub_18A5F4804();
          sub_18A5F3A8C();
          sub_18A63E290(&dword_18A5C5000, v86, v193, "%s finished fetch record zone changes request", v195);
          sub_18A5F38D8();
          sub_18A5F392C();
        }
LABEL_139:

        sub_18A6A76E8();
        sub_18A64A2FC();
        sub_18A5F4804();

        sub_18A643358();
        sub_18A5F3A8C();

        sub_18A5F3944();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_141:
        sub_18A6A72E4();
        v203 = sub_18A6A6DA4();
        sub_18A6A6304(v203, v204);
        return;
      }
      if (!*(_QWORD *)(v257 + 8 * v5))
      {
        sub_18A6A7208();
        if (v20 == v19)
          goto LABEL_113;
        sub_18A6A71D0();
        if (!v22)
        {
          sub_18A6A7208();
          if (v20 == v19)
            goto LABEL_113;
          sub_18A6A71D0();
          if (!v23)
          {
            sub_18A6A7208();
            if (v20 == v19)
              goto LABEL_113;
            sub_18A6A71D0();
            if (!v24)
            {
              while (1)
              {
                v5 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_144;
                sub_18A6A7FF8();
                if (v20 == v19)
                  goto LABEL_113;
                v21 = v63 + 1;
                if (*(_QWORD *)(v257 + 8 * v5))
                  goto LABEL_22;
              }
            }
          }
        }
        v5 = v21;
      }
LABEL_22:
      sub_18A6A7FAC();
      v268 = v25;
LABEL_23:
      v269 = v5;
      sub_18A6A7CA0();
      v27 = *(NSObject **)v26;
      v3 = *(_QWORD *)(v26 + 8);
      v28 = *(void **)(v26 + 24);
      v271 = *(_QWORD *)(v26 + 16);
      v272 = v3;
      v270 = *(unsigned __int8 *)(v26 + 32);
      v267 = v28;
      if ((*(_BYTE *)(v26 + 33) & 1) == 0)
        break;
      v29 = v4[94].isa;
      v30 = (void *)sub_18A6A7FE4();
      v1 = v31;
      sub_18A6A4658(v30, v32, v33, v34, v31, 1);
      sub_18A6A6B18();
      v0 = v0;
      sub_18A6A6B18();
      related decl 'e' for CKErrorCode.init(_:)(v27);
      sub_18A5F3A58();
      v35 = v0;
      v3 = (unint64_t)sub_18A6A8468();
      v36 = v29;
      sub_18A6A7854();
      v37 = sub_18A6A737C();
      v38 = static os_log_type_t.error.getter();
      if (sub_18A6A6E08(v37))
      {
        v39 = sub_18A5F3830();
        v40 = (_QWORD *)sub_18A5F3830();
        v273[0]._rawValue = (void *)sub_18A5F3830();
        *(_DWORD *)v39 = v248;
        sub_18A5F3E6C();
        sub_18A699D34();
        v42 = v41;
        sub_18A5F37AC();
        v44 = sub_18A6A67F4(v42, v43, (uint64_t *)v273);
        sub_18A6A6EDC(v44, v249);
        sub_18A6A65D4();
        sub_18A5F4804();
        sub_18A5F3944();
        *(_WORD *)(v39 + 12) = 2112;
        *v251 = v0;
        v45 = v0;
        sub_18A6A7048();
        *v40 = v0;

        sub_18A6A6918();
        v46 = sub_18A6A7918();
        sub_18A6A8390(v46);
        sub_18A6A5740();
        v40[1] = v46;

        sub_18A6A61B8(&dword_18A5C5000, v37, v38, "%s error fetching changes for zone %@: %@", (uint8_t *)v39);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        sub_18A6A56D0();
        sub_18A5F392C();
      }

      sub_18A5F4804();
      *v264 = v3;
      sub_18A5F42A0();
      sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
      v47 = v263;
      _BridgedStoredNSError.code.getter();
      v48 = *v263;
      v49 = *v263 == 28 || v48 == 26;
      v5 = v269;
      if (v49)
      {
        objc_msgSend((id)sub_18A6A779C(), sel_setServerChangeToken_forZoneID_, 0, v0);
      }
      else if (v48 == 21)
      {
        objc_msgSend((id)sub_18A6A779C(), sel_setServerChangeToken_forZoneID_, 0, v0);
        LOBYTE(v17) = 1;
        goto LABEL_35;
      }
      LOBYTE(v17) = 0;
LABEL_35:
      v50 = (uint64_t)v4[94].isa;
      v51 = (id)v3;
      sub_18A6A7410();
      sub_18A697558();
      sub_18A6A7CEC();
      if ((v50 & 1) == 0)
      {
        v260 = (uint64_t)v4[111].isa;
        sub_18A5F101C(&qword_1EDF6A388);
        inited = (__n128 *)swift_initStackObject();
        sub_18A6A7F60(inited, v53, v54, v55, v56, v57, v58, v59, v205, v207, v209, v211, v213, v215, v217, v219, v221, v223, v225,
          v226,
          v227,
          v228,
          v229,
          v230,
          v231,
          *((uint64_t *)&v231 + 1),
          v232,
          v233,
          v234,
          v235,
          v236,
          v237,
          v238,
          v239,
          v240,
          (uint64_t)v241,
          v242,
          v243,
          (uint64_t)v244,
          v245,
          v246,
          v247,
          v248,
          *((uint64_t *)&v248 + 1),
          (uint64_t)v249,
          v250,
          (uint64_t)v251,
          v252,
          v60);
        *(_QWORD *)(v61 + 32) = v0;
        sub_18A6A6AF0(v61);
        v1 = (uint64_t)v27;
        v62 = v0;
        v50 = v260;
        CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(0, v273[0]);
        v5 = v269;
        v47 = v263;
        swift_bridgeObjectRelease();
      }
      if ((v17 & 1) == 0)
      {
        v261 = (void *)v3;
        v64 = v4[70].isa;
        v65 = v4[71].isa;
        v66 = (id *)((char *)v65 + 32);
        v3 = *((_QWORD *)v65 + 2);
        if (v64)
        {
          swift_retain();
          sub_18A6A5818();
          sub_18A6A129C(v67, v68, v69, v70);
          v1 = v71;
          sub_18A64A254();
          if ((v1 & 1) == 0)
          {
LABEL_58:
            v4 = v254;
            goto LABEL_59;
          }
LABEL_55:
          v4 = v254;
        }
        else
        {
          if (!v3)
            goto LABEL_55;
          sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
          v72 = *v66;
          sub_18A6A6630();
          sub_18A64A228();
          if ((v66 & 1) != 0)
            goto LABEL_58;
          if (v3 == 1)
            goto LABEL_55;
          v73 = *((id *)v65 + 5);
          sub_18A6A6630();
          sub_18A64A228();
          if ((v66 & 1) != 0)
            goto LABEL_58;
          if (v3 == 2)
            goto LABEL_55;
          v74 = *((id *)v65 + 6);
          sub_18A6A6630();
          sub_18A64A228();
          if ((v66 & 1) != 0)
            goto LABEL_58;
          if (v3 == 3)
            goto LABEL_55;
          v76 = *((id *)v65 + 7);
          sub_18A6A6630();
          sub_18A64A228();
          if ((v66 & 1) != 0)
            goto LABEL_58;
          v79 = (void **)((char *)v65 + 64);
          v80 = v3 - 4;
          v4 = v254;
          while (v80)
          {
            v81 = *v79++;
            v82 = v81;
            v3 = sub_18A6A6630();

            --v80;
            if ((v3 & 1) != 0)
              goto LABEL_59;
          }
        }
        v75 = (void *)sub_18A61A770();
        sub_18A6A0C74(v75);
LABEL_59:
        v77 = (uint64_t)v4[93].isa;
        v78 = v47;
        sub_18A680A50(v261, v0);

        sub_18A6A642C();
        LODWORD(v17) = 1;
        sub_18A6A6850(v27, v77, (uint64_t)v0, (void *)v3, v1);

        v12 = v255;
        v16 = v268;
        goto LABEL_6;
      }

      sub_18A6A642C();
      sub_18A6A6850(v27, v50, (uint64_t)v0, (void *)v3, v1);
      if (v268)
        goto LABEL_7;
    }
    v265 = -1 << LOBYTE(v27[4].isa);
    sub_18A6A7EE8();
    v84 = v83;
    swift_bridgeObjectRetain_n();
    v85 = v0;
    v86 = v27 + 8;
    v259 = v85;
    v87 = (void *)sub_18A6A7FE4();
    sub_18A6A4658(v87, v88, v89, v90, v84, 0);
    v266 = (unint64_t)(63 - v265) >> 6;
    sub_18A6239CC();
    sub_18A6A6020();
    v17 = v28;
    v92 = 0;
    rawValue = (objc_class *)MEMORY[0x1E0DEE9E0];
    v242 = (uint64_t)v17;
    v243 = (uint64_t)&v27[8];
    while (v1)
    {
      sub_18A6A6888();
LABEL_79:
      v4 = v27;
      sub_18A6A7E18();
      if ((v94 & 1) != 0)
      {
        v256 = v12;
        v97 = v253;
        *v253 = v27;
        sub_18A634B64(v27);
        sub_18A634B64(v27);
        sub_18A6A6858();
        v98 = sub_18A6A6858();
        sub_18A5F101C(&qword_1EDF6A9D8);
        sub_18A5F42A0();
        sub_18A6A5818();
        if ((sub_18A6A5E20() & 1) != 0)
        {
          sub_18A615B4C(v27);
          v245 = *v241;
        }
        else
        {
          v86 = v254;

          v254[76].isa = (Class)v27;
          sub_18A6A71DC();
          if (!sub_18A6A5E20())
            goto LABEL_128;
          v226 = (uint64_t)v254[95].isa;
          v227 = (uint64_t)v254[97].isa;
          sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
          v99 = swift_initStackObject();
          *(_OWORD *)(v99 + 16) = v231;
          *(_QWORD *)(v99 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(_QWORD *)(v99 + 40) = v100;
          sub_18A6A7668();
          *(_QWORD *)(v99 + 48) = v101;
          *(_QWORD *)(v99 + 56) = v230;
          Dictionary.init(dictionaryLiteral:)();
          v254[81].isa = (Class)20;
          sub_18A6A89EC();
          sub_18A5F394C();
          sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
          sub_18A6A75D0();
          sub_18A6A68C8(v27);
          v245 = (uint64_t)v254[80].isa;
          (*(void (**)(uint64_t, uint64_t))(v229 + 8))(v227, v226);
          v97 = (id *)v237;
        }

        v102 = sub_18A6A7A80();
        sub_18A6A7E60();
        sub_18A6A77D8();
        v107 = v105 + v106;
        if (__OFADD__(v105, v106))
          goto LABEL_145;
        v3 = v103;
        v108 = v104;
        sub_18A5F101C(&qword_1EDF69350);
        v109 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v102, v107);
        rawValue = (objc_class *)v273[0]._rawValue;
        v12 = v256;
        v86 = v27 + 8;
        if (v109)
        {
          sub_18A62E9C4();
          if ((v108 & 1) != (v111 & 1))
          {
            sub_18A5F3B04(v110, (unint64_t *)&unk_1EDF6A8F0);
            sub_18A6A62E8();
            return;
          }
          v3 = v110;
        }
        if ((v108 & 1) != 0)
        {
          v112 = *((_QWORD *)v273[0]._rawValue + 7);

          *(_QWORD *)(v112 + 8 * v3) = v245;
        }
        else
        {
          sub_18A6A6F00((uint64_t)v273[0]._rawValue + 8 * (v3 >> 6));
          *(_QWORD *)(v114 + 8 * v3) = v98;
          *(_QWORD *)(*(_QWORD *)(v113 + 56) + 8 * v3) = v245;
          v115 = *(_QWORD *)(v113 + 16);
          v19 = __OFADD__(v115, 1);
          v116 = v115 + 1;
          if (v19)
            goto LABEL_146;
          *(_QWORD *)(v113 + 16) = v116;
          v117 = v98;
        }

        sub_18A6A6600();
        sub_18A615B4C(v27);
        sub_18A6A68C8(v27);
        v17 = (id)v242;
      }
      else
      {
        v95 = sub_18A6A71E4();
        if ((sub_18A6A6C50() & 1) == 0)
        {
          sub_18A6A8304(0, v12[2] + 1);
          v12 = v118;
        }
        v3 = v12[2];
        v96 = v12[3];
        if (v3 >= v96 >> 1)
        {
          sub_18A6A8304(v96 > 1, v3 + 1);
          v12 = v119;
        }
        v12[2] = v3 + 1;
        v12[v3 + 4] = (unint64_t)v27;

        sub_18A6A7488(v27);
      }
    }
    v19 = __OFADD__(v92++, 1);
    if (v19)
    {
      __break(1u);
      goto LABEL_139;
    }
    if (v92 >= v266)
      goto LABEL_102;
    if (v86[v92].isa)
    {
LABEL_78:
      sub_18A6A77F8();
      goto LABEL_79;
    }
    v93 = v92 + 1;
    if (v92 + 1 >= v266)
      goto LABEL_102;
    if (v86[v93].isa)
      goto LABEL_77;
    v93 = v92 + 2;
    if (v92 + 2 >= v266)
      goto LABEL_102;
    if (v86[v93].isa)
    {
LABEL_77:
      v92 = v93;
      goto LABEL_78;
    }
    v93 = v92 + 3;
    if (v92 + 3 >= v266)
    {
LABEL_102:
      v5 = v269;
      sub_18A64A2FC();
      swift_bridgeObjectRetain();
      sub_18A64E438();
      swift_bridgeObjectRetain();
      sub_18A64E4F4();
      v0 = rawValue;
      v4 = v254;
      if (*((_QWORD *)rawValue + 2))
      {
        sub_18A6A94E8((uint64_t)rawValue);
        sub_18A5F37E0();
        v120 = sub_18A6A7DD4();
        v122 = (void *)related decl 'e' for CKErrorCode.init(partialErrors:description:)(v120, v121, v228);
        sub_18A680A50(v122, v259);

        if ((v270 & 1) != 0)
        {
          sub_18A6A6AFC(v123, v124, v125, v126, v270);

          sub_18A5F460C();
          sub_18A5F37A4();
          sub_18A5F38AC();
          LODWORD(v17) = 1;
LABEL_112:

          v16 = v268;
          continue;
        }
        HIDWORD(v246) = 1;
      }
      else
      {
        sub_18A5F37E0();
        v127 = objc_msgSend(*(id *)(v258 + 16), sel_setServerChangeToken_forZoneID_, v17, v259);
        if ((v270 & 1) != 0)
        {
          sub_18A6A6AFC((uint64_t)v127, v128, v129, v130, v270);

          sub_18A5F460C();
          sub_18A5F37A4();
          sub_18A5F38AC();
LABEL_111:
          LODWORD(v17) = HIDWORD(v246);
          goto LABEL_112;
        }
      }
      v0 = v254[111].isa;
      sub_18A5F101C(&qword_1EDF6A388);
      v131 = (__n128 *)swift_initStackObject();
      sub_18A6A7F60(v131, v132, v133, v134, v135, v136, v137, v138, v205, v207, v209, v211, v213, v215, v217, v219, v221, v223, v225,
        v226,
        v227,
        v228,
        v229,
        v230,
        v231,
        *((uint64_t *)&v231 + 1),
        v232,
        v233,
        v234,
        v235,
        v236,
        v237,
        v238,
        v239,
        v240,
        (uint64_t)v241,
        v242,
        v243,
        (uint64_t)v244,
        v245,
        v246,
        v247,
        v248,
        *((uint64_t *)&v248 + 1),
        (uint64_t)v249,
        v250,
        (uint64_t)v251,
        v252,
        v139);
      *(_QWORD *)(v140 + 32) = v259;
      sub_18A6A6AF0(v140);
      v141 = v259;
      sub_18A6A73FC();
      sub_18A5F3FE4();
      v254[83].isa = v259;
      v142 = (_QWORD *)sub_18A65EF14();
      sub_18A6A8074(v142, v143, v144, v145, v146, v147, v148, v149, v206, v208, v210, v212, v214, v216, v218, v220, v222, v224);
      sub_18A6A7280();
      v1 = v240;
      sub_18A6A0D8C(v150, v151, v152);
      v3 = v153;
      sub_18A663978();
      if ((v3 & 1) != 0)
        sub_18A6A0C74(v259);
      sub_18A5F37A4();
      sub_18A5F38AC();

      sub_18A5F460C();
      sub_18A6A46A4(v27, v272, v271, v267, v270, 0);
      goto LABEL_111;
    }
    break;
  }
  if (v86[v93].isa)
    goto LABEL_77;
  while (1)
  {
    v92 = v93 + 1;
    if (__OFADD__(v93, 1))
      break;
    if (v92 >= v266)
      goto LABEL_102;
    ++v93;
    if (v86[v92].isa)
      goto LABEL_78;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:

  __break(1u);
}

uint64_t sub_18A6852B4()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37A4();
  sub_18A5F37E0();
  sub_18A5F3944();
  return sub_18A5F4708();
}

#error "18A685788: call analysis failed (funcsize=282)"

uint64_t sub_18A685820()
{
  uint64_t v0;
  void *v1;
  void *v2;

  sub_18A623A14();
  v1 = *(void **)(v0 + 1024);
  v2 = *(void **)(v0 + 1016);
  sub_18A6239A4();

  sub_18A6A5670();
  return sub_18A5F3EA4();
}

#error "18A685CAC: call analysis failed (funcsize=270)"

void sub_18A685D48()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **rawValue;
  void **v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  BOOL v51;
  void *v52;
  void *v53;
  char v54;
  void *v55;
  __n128 *inited;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id *v73;
  uint64_t v74;
  char v75;
  char v76;
  id v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  uint64_t *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int64_t v97;
  void *v98;
  int64_t v99;
  int64_t v100;
  char v101;
  id v102;
  unint64_t v103;
  id *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  Swift::Int v115;
  char v116;
  Swift::Bool v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __n128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 v147;
  uint64_t v148;
  id v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *(*v158)(uint64_t *__return_ptr, uint64_t, _QWORD);
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  const void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  id v175;
  char v176;
  id v177;
  void *v178;
  NSObject *v179;
  os_log_type_t v180;
  uint64_t v181;
  _QWORD *v182;
  NSObject *v183;
  void *v184;
  unint64_t v185;
  void *v186;
  id v187;
  id v188;
  _QWORD *v189;
  NSObject *v190;
  NSObject *v191;
  NSObject *v192;
  os_log_type_t v193;
  uint8_t *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  os_log_type_t v200;
  int v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t (*v210)(void);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  id *v249;
  id v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  __int128 v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  id *v259;
  char *v260;
  _BYTE *v261;
  uint64_t *v262;
  unint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  Swift::OpaquePointer v274[3];

  sub_18A6A6358();
  v241 = (uint64_t)(v0 + 320);
  sub_18A6A7864();
  v223 = v1;
  v225 = v2;
  v3 = (unint64_t)(v0 + 560);
  v257 = v0 + 576;
  v258 = v4;
  v256 = (uint64_t)(v0 + 584);
  v259 = (id *)(v0 + 592);
  v245 = (uint64_t)(v0 + 608);
  v246 = (uint64_t *)(v0 + 600);
  v221 = (uint64_t)(v0 + 616);
  v5 = (void *)*((_QWORD *)v0 + 116);
  v255 = v0 + 624;
  v6 = (unint64_t *)(v0 + 632);
  v239 = (uint64_t)(v0 + 648);
  v240 = (uint64_t)(v0 + 640);
  v262 = (uint64_t *)(v0 + 656);
  v229 = (uint64_t)(v0 + 664);
  v7 = *((_QWORD *)v0 + 101);
  v247 = (uint64_t *)(v0 + 672);
  v244 = (uint64_t)(v0 + 680);
  v8 = (void *)*((_QWORD *)v0 + 100);
  v219 = (uint64_t)(v0 + 696);
  v215 = (uint64_t)(v0 + 688);
  v217 = (uint64_t)(v0 + 704);

  sub_18A5F3944();
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  v10 = v9;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A2D8);
  sub_18A6A4AD4((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  v227 = v10;
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = (char *)Dictionary.init(dictionaryLiteral:)();
  sub_18A6A65F8();
  rawValue = (void **)related decl 'e' for CKErrorCode.init(_:)(v5);
  v14 = rawValue;
  sub_18A680B54(rawValue);
  v242 = (uint64_t)(v0 + 560);
  sub_18A68782C(v7);
  sub_18A6A6AC4();
  v243 = 0;
  v15 = 0;
  *((_QWORD *)v0 + 118) = v14;
  *((_QWORD *)v0 + 85) = v11;
  *((_QWORD *)v0 + 84) = v11;
  v260 = v12 + 64;
  v16 = *((_QWORD *)v0 + 116) != 0;
  v237 = *MEMORY[0x1E0CB2D50];
  v238 = *((_QWORD *)v0 + 96);
  *(_QWORD *)&v17 = 136315650;
  v254 = v17;
  v253 = MEMORY[0x1E0DEE9B8] + 8;
  sub_18A6A608C();
  v233 = v18;
  v235 = xmmword_18A83AC30;
  sub_18A6A608C();
  v234 = v20;
  v273 = v0;
  v263 = (unint64_t *)(v0 + 632);
  while (2)
  {
    *((_QWORD *)v273 + 119) = v11;
    v264 = v11;
LABEL_3:
    HIDWORD(v251) = v16;
    v273[98] = v16 & 1;
    if (v19)
    {
LABEL_4:
      sub_18A6A8004();
      v267 = v21;
      goto LABEL_20;
    }
    while (1)
    {
      v22 = __OFADD__(v15++, 1);
      if (v22)
      {
        __break(1u);
        goto LABEL_140;
      }
      sub_18A6A7FF8();
      if (v23 == v22)
      {
LABEL_110:
        swift_release();
        v163 = *(_QWORD *)(v11 + 16);
        v164 = *((_QWORD *)v273 + 85);
        *((_QWORD *)v273 + 120) = v164;
        if (v163)
        {
          v165 = *v247;
          goto LABEL_114;
        }
        v165 = *v247;
        if (*(_QWORD *)(v164 + 16) || *(_QWORD *)(v165 + 16))
        {
LABEL_114:
          *((_QWORD *)v273 + 121) = v165;
          *((_QWORD *)v273 + 13) = v11;
          *((_QWORD *)v273 + 14) = v164;
          *((_QWORD *)v273 + 15) = v165;
          *((_OWORD *)v273 + 8) = 0u;
          *((_OWORD *)v273 + 9) = 0u;
          *((_QWORD *)v273 + 20) = 0;
          v273[168] = 48;
          sub_18A6291A0();
          sub_18A5F3898();
          sub_18A5F3D48();
          v166 = (_QWORD *)sub_18A6A60C4();
          *((_QWORD *)v273 + 122) = v166;
          *v166 = v273;
          v166[1] = sub_18A6852B4;
LABEL_115:
          v167 = (const void *)sub_18A6A5854();
          sub_18A6A62CC(v167);
          return;
        }
        v30 = v273;
        sub_18A687D64(*((_QWORD *)v273 + 101));
        v7 = *((_QWORD *)v273 + 70);
        sub_18A64A54C();
        sub_18A623E28();
        v168 = sub_18A6A7250();
        v170 = v169;
        sub_18A61A878();
        sub_18A5F3AA0();
        *((_QWORD *)v273 + 123) = v168;
        *((_QWORD *)v273 + 124) = v170;
        v171 = *(_QWORD *)(v170 + 16);
        *((_QWORD *)v273 + 125) = v171;
        if (v171)
        {
          sub_18A6A79D0();
          sub_18A5F3E6C();
          sub_18A5F46AC();
          *((_QWORD *)v273 + 126) = 0;
          v172 = *((_QWORD *)v273 + 124);
          if (!*(_QWORD *)(v172 + 16))
          {
LABEL_124:
            __break(1u);
LABEL_125:

            v274[0]._rawValue = 0;
            v274[1]._rawValue = (void *)0xE000000000000000;
            sub_18A6A6D58();
            v185 = sub_18A6A5F0C();
            sub_18A6A5DFC(v185, (uint64_t)"Unable to convert error to CKError: ");
            swift_getErrorValue();
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            sub_18A6A5EFC();
            sub_18A6A5B5C();
            sub_18A6A6998();
            return;
          }
          v173 = 0;
          v7 = (unint64_t)"BUG IN CLOUDKIT: CKSyncEngine finished fetching changes for a zone that it never started: %@";
          while (1)
          {
            v174 = *(void **)(v172 + 8 * v173 + 32);
            *((_QWORD *)v273 + 127) = v174;
            v175 = sub_18A6A76A0(v174);
            sub_18A5F3898();
            v176 = sub_18A6A7760(v175);
            sub_18A5F37A4();
            v177 = v175;
            v178 = v177;
            if ((v176 & 1) != 0)
            {
              v186 = sub_18A680C80(v177);
              *((_QWORD *)v273 + 128) = v186;
              *((_QWORD *)v273 + 22) = v178;
              *((_QWORD *)v273 + 23) = v186;
              *((_OWORD *)v273 + 12) = 0u;
              *((_OWORD *)v273 + 13) = 0u;
              *((_OWORD *)v273 + 14) = 0u;
              v273[240] = 0x80;
              v187 = v178;
              v188 = v186;
              v189 = (_QWORD *)sub_18A6A79C8();
              *((_QWORD *)v273 + 129) = v189;
              *v189 = v273;
              v189[1] = sub_18A685820;
              goto LABEL_115;
            }
            v179 = *((_QWORD *)v273 + 105);
            Logger.logObject.getter();
            v180 = sub_18A6A68E4();
            if (sub_18A6A5810(v179))
            {
              v181 = sub_18A5F3830();
              v182 = (_QWORD *)sub_18A5F3830();
              *(_DWORD *)v181 = 138412290;
              *(_QWORD *)(v181 + 4) = v178;
              *v182 = v178;
              sub_18A63E290(&dword_18A5C5000, v179, v180, "BUG IN CLOUDKIT: CKSyncEngine finished fetching changes for a zone that it never started: %@", (uint8_t *)v181);
              sub_18A6A72EC();
              sub_18A5F38D8();
              sub_18A5F392C();
            }

            v183 = v179;
            v184 = v178;

            v30 = (_BYTE *)*((_QWORD *)v273 + 126);
            v11 = *((_QWORD *)v273 + 125);

            if (v30 + 1 == (_BYTE *)v11)
              break;
            v173 = *((_QWORD *)v273 + 126) + 1;
            *((_QWORD *)v273 + 126) = v173;
            v172 = *((_QWORD *)v273 + 124);
            if (v173 >= *(_QWORD *)(v172 + 16))
              goto LABEL_124;
          }
          swift_release();
          sub_18A5F37AC();
        }
        if (v273[98] == 1)
        {
          v190 = sub_18A680BF0();
          if (!v190)
            goto LABEL_144;
          v191 = v190;
          sub_18A6A6954();
          sub_18A5F3A58();
          v192 = v191;
          sub_18A6A6F3C();
          v193 = sub_18A6A7920();
          if (sub_18A6A562C(v193))
          {
            v194 = (uint8_t *)sub_18A5F3830();
            v195 = (_QWORD *)sub_18A5F3830();
            v274[0]._rawValue = (void *)sub_18A5F3830();
            *(_DWORD *)v194 = 136315394;
            sub_18A5F3E6C();
            sub_18A699D34();
            v196 = sub_18A5F37AC();
            *((_QWORD *)v273 + 87) = sub_18A6A5704(v196, v197, (uint64_t *)v274);
            sub_18A6A6058();
            sub_18A5F4804();
            sub_18A5F394C();
            v198 = sub_18A6A6928();
            v199 = _swift_stdlib_bridgeErrorToNSError();
            *((_QWORD *)v273 + 88) = v199;
            sub_18A6A5740();
            *v195 = v199;

            sub_18A6A5608(&dword_18A5C5000, v191, (os_log_type_t)v11, "%s error fetching record zone changes: %@", v194);
            sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
            sub_18A5F38D8();
            sub_18A5F392C();
          }

          sub_18A5F4804();
          v206 = (void *)*((_QWORD *)v273 + 118);
          v207 = (void *)*((_QWORD *)v273 + 112);
          v208 = (void *)*((_QWORD *)v273 + 100);
          sub_18A6A8330();
          sub_18A6A8050();

          sub_18A61A878();
          sub_18A5F394C();
          sub_18A5F3A8C();

          swift_bridgeObjectRelease();
          sub_18A5F438C();
          sub_18A6A760C();
          sub_18A6A75E8();
          sub_18A6A75E0();
          sub_18A6A75D8();
          goto LABEL_138;
        }
        sub_18A6A7658();
        sub_18A5F3A58();
        Logger.logObject.getter();
        v200 = sub_18A6A58AC();
        sub_18A6A5B4C(v7);
        sub_18A6A656C();
        if (v201)
        {
          v202 = (uint8_t *)sub_18A6A6D60();
          v274[0]._rawValue = (void *)sub_18A5F3830();
          *(_DWORD *)v202 = 136315138;
          sub_18A5F3E6C();
          sub_18A699D34();
          v204 = v203;
          sub_18A5F37AC();
          *((_QWORD *)v273 + 86) = sub_18A6A5E28(v204, v205, (uint64_t *)v274);
          sub_18A6A5D8C();
          sub_18A5F4804();
          sub_18A5F3A8C();
          sub_18A63E290(&dword_18A5C5000, v7, v200, "%s finished fetch record zone changes request", v202);
          sub_18A5F38D8();
          sub_18A5F392C();
        }
LABEL_136:

        sub_18A6A76E8();
        sub_18A64A2FC();
        sub_18A5F4804();

        sub_18A643358();
        sub_18A5F3A8C();

        sub_18A5F3944();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_138:
        sub_18A6A72E4();
        v209 = sub_18A6A6DA4();
        sub_18A6A6304(v209, v210);
        return;
      }
      if (!*(_QWORD *)&v260[8 * v15])
      {
        sub_18A6A7208();
        if (v23 == v22)
          goto LABEL_110;
        sub_18A6A71D0();
        if (!v25)
        {
          sub_18A6A7208();
          if (v23 == v22)
            goto LABEL_110;
          sub_18A6A71D0();
          if (!v26)
          {
            sub_18A6A7208();
            if (v23 == v22)
              goto LABEL_110;
            sub_18A6A71D0();
            if (!v27)
            {
              while (1)
              {
                v15 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_141;
                sub_18A6A7FF8();
                if (v23 == v22)
                  goto LABEL_110;
                v24 = v70 + 1;
                if (*(_QWORD *)&v260[8 * v15])
                  goto LABEL_19;
              }
            }
          }
        }
        v15 = v24;
      }
LABEL_19:
      sub_18A6A7FAC();
      v267 = v28;
LABEL_20:
      v268 = v15;
      sub_18A6A7CA0();
      v30 = *(_BYTE **)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(unsigned __int8 *)(v29 + 32);
      v270 = *(_BYTE **)v29;
      v271 = *(_QWORD *)(v29 + 16);
      v272 = v31;
      v269 = *(unsigned __int8 *)(v29 + 32);
      v266 = *(void **)(v29 + 24);
      if ((*(_BYTE *)(v29 + 33) & 1) == 0)
        break;
      v12 = v273;
      rawValue = *(void ***)(v29 + 16);
      sub_18A6A4658(v30, v31, (uint64_t)rawValue, *(void **)(v29 + 24), v32, 1);
      sub_18A6A6BB0();
      v7 = (unint64_t)(id)v7;
      sub_18A6A6BB0();
      related decl 'e' for CKErrorCode.init(_:)(v30);
      sub_18A5F3A58();
      v33 = (id)v7;
      sub_18A6A8468();
      v34 = sub_18A6A7234();
      v35 = (id)v7;
      v36 = sub_18A6A6F3C();
      v37 = static os_log_type_t.error.getter();
      if (sub_18A6A6E08(v36))
      {
        v38 = (uint8_t *)sub_18A5F3830();
        v39 = (_QWORD *)sub_18A5F3830();
        v274[0]._rawValue = (void *)sub_18A5F3830();
        *(_DWORD *)v38 = v254;
        sub_18A5F3E6C();
        sub_18A699D34();
        v40 = v34;
        v42 = v41;
        sub_18A5F37AC();
        v44 = sub_18A6A67F4(v42, v43, (uint64_t *)v274);
        sub_18A6A6EDC(v44, v255);
        sub_18A6A65D4();
        sub_18A5F4804();
        sub_18A5F3944();
        sub_18A6A7454(2112);
        *v257 = v40;
        v45 = v40;
        sub_18A6A7048();
        *v39 = v40;

        sub_18A6A75A4();
        v46 = (id)v7;
        v47 = sub_18A6A7918();
        sub_18A6A770C(v47);
        sub_18A6A5740();
        v39[1] = v47;

        sub_18A6A61B8(&dword_18A5C5000, v36, v37, "%s error fetching changes for zone %@: %@", v38);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        sub_18A6A56D0();
        sub_18A5F392C();
      }

      sub_18A5F4804();
      v11 = v264;
      *v6 = v7;
      sub_18A5F42A0();
      v49 = v48;
      sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
      sub_18A6A8450();
      v50 = *v262;
      v51 = *v262 == 28 || v50 == 26;
      v15 = v268;
      if (v51)
      {
        v52 = (void *)sub_18A6A779C();
        sub_18A6A80D0(v52, sel_setServerChangeToken_forZoneID_);
      }
      else if (v50 == 21)
      {
        v53 = (void *)sub_18A6A779C();
        sub_18A6A80D0(v53, sel_setServerChangeToken_forZoneID_);
        v54 = 1;
        goto LABEL_32;
      }
      v54 = 0;
LABEL_32:
      sub_18A6A8330();
      sub_18A6A5854();
      sub_18A697558();
      sub_18A6A7CEC();
      if ((v49 & 1) == 0)
      {
        v12 = (char *)v7;
        v55 = (void *)*((_QWORD *)v273 + 111);
        sub_18A5F101C(&qword_1EDF6A388);
        inited = (__n128 *)swift_initStackObject();
        sub_18A6A7F60(inited, v57, v58, v59, v60, v61, v62, v63, v211, v213, v215, v217, v219, v221, v223, v225, v227, v229, v231,
          v232,
          v233,
          v234,
          v235,
          *((uint64_t *)&v235 + 1),
          v236,
          v237,
          v238,
          v239,
          v240,
          v241,
          v242,
          v243,
          v244,
          v245,
          (uint64_t)v246,
          (uint64_t)v247,
          v248,
          (uint64_t)v249,
          (uint64_t)v250,
          v251,
          (uint64_t)v252,
          v253,
          v254,
          *((uint64_t *)&v254 + 1),
          (uint64_t)v255,
          v256,
          (uint64_t)v257,
          v258,
          v64);
        *(_QWORD *)(v65 + 32) = v34;
        sub_18A6A6AF0(v65);
        rawValue = (void **)v274[0]._rawValue;
        v66 = v34;
        v49 = v55;
        v7 = (unint64_t)v12;
        CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(0, v274[0]);
        sub_18A5F3944();
      }
      if ((v54 & 1) == 0)
      {
        v12 = (char *)v7;
        v71 = *((_QWORD *)v273 + 70);
        v72 = *((_QWORD *)v273 + 71);
        v73 = (id *)(v72 + 32);
        v74 = *(_QWORD *)(v72 + 16);
        if (v71)
        {
          rawValue = (void **)(v71 + 16);
          sub_18A634FA4();
          sub_18A6A129C((uint64_t)v34, v72 + 32, v74, (Swift::Int *)(v71 + 16));
          v76 = v75;
          sub_18A5F438C();
          if ((v76 & 1) == 0)
          {
LABEL_55:
            v11 = v264;
            v7 = (unint64_t)v12;
            goto LABEL_56;
          }
LABEL_52:
          v11 = v264;
          v7 = (unint64_t)v12;
        }
        else
        {
          if (!v74)
            goto LABEL_52;
          v77 = *v73;
          sub_18A6A646C();
          sub_18A66CD70();
          if ((v73 & 1) != 0)
            goto LABEL_55;
          if (v74 == 1)
            goto LABEL_52;
          v78 = *(id *)(v72 + 40);
          sub_18A6A646C();
          sub_18A66CD70();
          if ((v73 & 1) != 0)
            goto LABEL_55;
          if (v74 == 2)
            goto LABEL_52;
          v79 = *(id *)(v72 + 48);
          sub_18A6A646C();
          sub_18A66CD70();
          if ((v73 & 1) != 0)
            goto LABEL_55;
          if (v74 == 3)
            goto LABEL_52;
          v80 = *(id *)(v72 + 56);
          sub_18A6A646C();
          sub_18A66CD70();
          if ((v73 & 1) != 0)
            goto LABEL_55;
          rawValue = (void **)(v72 + 64);
          v87 = v74 - 4;
          v11 = v264;
          v7 = (unint64_t)v12;
          while (v87)
          {
            v88 = *rawValue++;
            v89 = v88;
            v90 = static NSObject.== infix(_:_:)();

            v7 = (unint64_t)v12;
            --v87;
            if ((v90 & 1) != 0)
              goto LABEL_56;
          }
        }
        sub_18A6A7F4C(v34);
LABEL_56:
        v81 = (void *)*((_QWORD *)v273 + 93);
        v82 = v262;
        v83 = (void *)sub_18A6A5854();
        sub_18A680A50(v83, v34);

        v16 = 1;
        v84 = (void *)sub_18A6A74DC();
        v3 = v269;
        sub_18A6A6850(v84, v85, v86, v266, v269);

        sub_18A6A6850(v81, v7, (uint64_t)rawValue, v266, v269);
        v19 = v267;
        v6 = v263;
        goto LABEL_3;
      }

      v67 = (void *)sub_18A6A74DC();
      v3 = (unint64_t)v266;
      sub_18A6A6850(v67, v68, v69, v266, v269);

      sub_18A6A6850(v49, v7, (uint64_t)rawValue, v266, v269);
      if (v267)
        goto LABEL_4;
    }
    v261 = v30 + 64;
    v91 = -1 << v30[32];
    sub_18A6A7EE8();
    v93 = v92;
    v94 = v32;
    v96 = v95;
    swift_bridgeObjectRetain_n();
    v250 = (id)v7;
    sub_18A6A4658(v30, v31, v93, v96, v94, 0);
    v97 = (unint64_t)(63 - v91) >> 6;
    sub_18A6A6020();
    sub_18A5F3D48();
    v3 = v96;
    v99 = 0;
    v252 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v11 = v264;
    v249 = (id *)v3;
    while (rawValue)
    {
      sub_18A6A6888();
LABEL_76:
      sub_18A6A7E18();
      if ((v101 & 1) != 0)
      {
        v265 = v11;
        v104 = v259;
        *v259 = v12;
        sub_18A634B64(v12);
        sub_18A634B64(v12);
        sub_18A6A6858();
        v105 = sub_18A6A6858();
        sub_18A5F101C(&qword_1EDF6A9D8);
        sub_18A5F42A0();
        sub_18A6A7000();
        if ((sub_18A6A5E20() & 1) != 0)
        {
          sub_18A615B4C(v12);
          v248 = *v246;
        }
        else
        {
          v3 = (unint64_t)v273;

          *((_QWORD *)v273 + 76) = v12;
          sub_18A6A71DC();
          if (!sub_18A6A5E20())
            goto LABEL_125;
          v232 = *((_QWORD *)v273 + 97);
          v106 = *((_QWORD *)v273 + 95);
          sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
          v107 = swift_initStackObject();
          *(_OWORD *)(v107 + 16) = v235;
          *(_QWORD *)(v107 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(_QWORD *)(v107 + 40) = v108;
          sub_18A6A7668();
          *(_QWORD *)(v107 + 48) = v109;
          *(_QWORD *)(v107 + 56) = v234;
          Dictionary.init(dictionaryLiteral:)();
          *((_QWORD *)v273 + 81) = 20;
          sub_18A6A89EC();
          sub_18A5F3A8C();
          sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
          sub_18A6A7280();
          _BridgedStoredNSError.init(_:userInfo:)();
          sub_18A6A68C8(v12);
          v248 = *((_QWORD *)v273 + 80);
          (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v232, v106);
          v104 = (id *)v245;
        }

        v110 = sub_18A6A7A80();
        sub_18A6A7E60();
        sub_18A6A77D8();
        v115 = v113 + v114;
        if (__OFADD__(v113, v114))
          goto LABEL_142;
        v7 = v111;
        v116 = v112;
        sub_18A5F101C(&qword_1EDF69350);
        v117 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v110, v115);
        v252 = v274[0]._rawValue;
        v11 = v265;
        v3 = (unint64_t)v249;
        if (v117)
        {
          sub_18A62E9C4();
          if ((v116 & 1) != (v119 & 1))
          {
            sub_18A5F3B04(v118, (unint64_t *)&unk_1EDF6A8F0);
            sub_18A6A62E8();
            return;
          }
          v7 = v118;
        }
        if ((v116 & 1) != 0)
        {
          v120 = *((_QWORD *)v274[0]._rawValue + 7);

          *(_QWORD *)(v120 + 8 * v7) = v248;
        }
        else
        {
          sub_18A6A6F00((uint64_t)v274[0]._rawValue + 8 * (v7 >> 6));
          *(_QWORD *)(v122 + 8 * v7) = v105;
          *(_QWORD *)(*(_QWORD *)(v121 + 56) + 8 * v7) = v248;
          v123 = *(_QWORD *)(v121 + 16);
          v22 = __OFADD__(v123, 1);
          v124 = v123 + 1;
          if (v22)
            goto LABEL_143;
          *(_QWORD *)(v121 + 16) = v124;
          v125 = v105;
        }

        sub_18A6A6600();
        sub_18A615B4C(v12);
        sub_18A6A68C8(v12);
        v30 = v270;
      }
      else
      {
        v102 = sub_18A6A71E4();
        if ((sub_18A6A64B4() & 1) == 0)
        {
          sub_18A6A82F8(0, *(_QWORD *)(v11 + 16) + 1);
          v11 = v126;
        }
        v7 = *(_QWORD *)(v11 + 16);
        v103 = *(_QWORD *)(v11 + 24);
        if (v7 >= v103 >> 1)
        {
          sub_18A6A82F8(v103 > 1, v7 + 1);
          v11 = v127;
        }
        *(_QWORD *)(v11 + 16) = v7 + 1;
        *(_QWORD *)(v11 + 8 * v7 + 32) = v12;

        sub_18A6A7488(v12);
      }
    }
    v22 = __OFADD__(v99++, 1);
    if (v22)
    {
      __break(1u);
      goto LABEL_136;
    }
    if (v99 >= v97)
      goto LABEL_99;
    if (*(_QWORD *)&v261[8 * v99])
    {
LABEL_75:
      sub_18A6A77F8();
      goto LABEL_76;
    }
    v100 = v99 + 1;
    if (v99 + 1 >= v97)
      goto LABEL_99;
    if (*(_QWORD *)&v261[8 * v100])
      goto LABEL_74;
    v100 = v99 + 2;
    if (v99 + 2 >= v97)
      goto LABEL_99;
    if (*(_QWORD *)&v261[8 * v100])
    {
LABEL_74:
      v99 = v100;
      goto LABEL_75;
    }
    v100 = v99 + 3;
    if (v99 + 3 >= v97)
    {
LABEL_99:
      v15 = v268;
      sub_18A5F438C();
      swift_bridgeObjectRetain();
      sub_18A64E438();
      swift_bridgeObjectRetain();
      sub_18A64E4F4();
      v7 = (unint64_t)v252;
      v6 = v263;
      if (v252[2])
      {
        sub_18A6A94E8((uint64_t)v252);
        sub_18A5F37E0();
        v128 = sub_18A6A7DD4();
        v130 = (void *)related decl 'e' for CKErrorCode.init(partialErrors:description:)(v128, v129, v233);
        sub_18A680A50(v130, v250);

        if ((v269 & 1) != 0)
        {
          sub_18A6A6BE4(v131, v132, v133, v134, v269);

          sub_18A5F460C();
          sub_18A5F37A4();
          sub_18A5F3FE4();
          v16 = 1;
LABEL_109:

          v19 = v267;
          continue;
        }
        HIDWORD(v251) = 1;
      }
      else
      {
        sub_18A5F37E0();
        v135 = objc_msgSend((id)sub_18A6A779C(), sel_setServerChangeToken_forZoneID_, v3, v250);
        if ((v269 & 1) != 0)
        {
          sub_18A6A6BE4((uint64_t)v135, v136, v137, v138, v269);

          sub_18A5F460C();
          sub_18A5F37A4();
          sub_18A5F3FE4();
LABEL_108:
          v16 = HIDWORD(v251);
          goto LABEL_109;
        }
      }
      v3 = (unint64_t)v273;
      sub_18A5F101C(&qword_1EDF6A388);
      v139 = (__n128 *)swift_initStackObject();
      sub_18A6A7F60(v139, v140, v141, v142, v143, v144, v145, v146, v211, v213, v215, v217, v219, v221, v223, v225, v227, v229, v231,
        v232,
        v233,
        v234,
        v235,
        *((uint64_t *)&v235 + 1),
        v236,
        v237,
        v238,
        v239,
        v240,
        v241,
        v242,
        v243,
        v244,
        v245,
        (uint64_t)v246,
        (uint64_t)v247,
        v248,
        (uint64_t)v249,
        (uint64_t)v250,
        v251,
        (uint64_t)v252,
        v253,
        v254,
        *((uint64_t *)&v254 + 1),
        (uint64_t)v255,
        v256,
        (uint64_t)v257,
        v258,
        v147);
      *(_QWORD *)(v148 + 32) = v250;
      sub_18A6A6AF0(v148);
      v149 = v250;
      sub_18A6A73FC();
      sub_18A5F3FE4();
      *((_QWORD *)v273 + 83) = v250;
      v150 = (_QWORD *)sub_18A65EF14();
      sub_18A6A8074(v150, v151, v152, v153, v154, v155, v156, v157, v212, v214, v216, v218, v220, v222, v224, v226, v228, v230);
      sub_18A6A7280();
      rawValue = (void **)v243;
      sub_18A6A0D8C(v158, v159, v160);
      v162 = v161;
      sub_18A663978();
      if ((v162 & 1) != 0)
        sub_18A6A7F4C(v250);
      sub_18A5F460C();
      sub_18A5F37A4();

      v7 = v271;
      sub_18A5F37E0();
      sub_18A6A46A4(v270, v272, v271, v266, v269, 0);
      goto LABEL_108;
    }
    break;
  }
  if (*(_QWORD *)&v261[8 * v100])
    goto LABEL_74;
  while (1)
  {
    v99 = v100 + 1;
    if (__OFADD__(v100, 1))
      break;
    if (v99 >= v97)
      goto LABEL_99;
    ++v100;
    if (*(_QWORD *)&v261[8 * v99])
      goto LABEL_75;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:

  __break(1u);
}

uint64_t sub_18A687208(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v27;
  int64_t v28;

  v27 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v28 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
LABEL_4:
  while (v4)
  {
    v7 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v8 = v7 | (v6 << 6);
LABEL_22:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v14 = *v12;
    v13 = v12[1];
    v15 = *v1;
    v16 = (_QWORD *)v1[1];
    v17 = v16[2];
    if (*v1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_18A6A113C(v14, v13, (uint64_t)(v16 + 4), v17, (_QWORD *)(v15 + 16));
      v19 = v18;
      swift_release();
      if ((v19 & 1) != 0)
        goto LABEL_33;
LABEL_34:
      result = swift_bridgeObjectRelease();
    }
    else
    {
      if (!v17)
        goto LABEL_32;
      result = v16[4];
      if (result != v14 || v16[5] != v13)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v17 == 1)
            goto LABEL_32;
          result = v16[6];
          if (result != v14 || v16[7] != v13)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
            {
              if (v17 == 2)
                goto LABEL_32;
              result = v16[8];
              if (result != v14 || v16[9] != v13)
              {
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) == 0)
                {
                  v23 = v17 - 3;
                  if (!v23)
                    goto LABEL_32;
                  result = v16[10];
                  if (result != v14 || v16[11] != v13)
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) == 0)
                    {
                      v25 = v16 + 13;
                      while (--v23)
                      {
                        result = *(v25 - 1);
                        if (result != v14 || *v25 != v13)
                        {
                          v25 += 2;
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0)
                            continue;
                        }
                        goto LABEL_4;
                      }
LABEL_32:
                      swift_bridgeObjectRetain();
LABEL_33:
                      sub_18A6A0B0C(v14, v13);
                      goto LABEL_34;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_62;
  }
  if (v9 >= v28)
    return swift_release();
  v10 = *(_QWORD *)(v27 + 8 * v9);
  ++v6;
  if (v10)
    goto LABEL_21;
  v6 = v9 + 1;
  if (v9 + 1 >= v28)
    return swift_release();
  v10 = *(_QWORD *)(v27 + 8 * v6);
  if (v10)
    goto LABEL_21;
  v6 = v9 + 2;
  if (v9 + 2 >= v28)
    return swift_release();
  v10 = *(_QWORD *)(v27 + 8 * v6);
  if (v10)
    goto LABEL_21;
  v6 = v9 + 3;
  if (v9 + 3 >= v28)
    return swift_release();
  v10 = *(_QWORD *)(v27 + 8 * v6);
  if (v10)
  {
LABEL_21:
    v4 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v6 << 6);
    goto LABEL_22;
  }
  v11 = v9 + 4;
  if (v11 >= v28)
    return swift_release();
  v10 = *(_QWORD *)(v27 + 8 * v11);
  if (v10)
  {
    v6 = v11;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v28)
      return swift_release();
    v10 = *(_QWORD *)(v27 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_21;
  }
LABEL_62:
  __break(1u);
  return result;
}

void sub_18A6874FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  id v13;
  char v14;
  char v15;
  void *v16;
  id v17;
  id v18;
  char v19;
  id v20;
  char v21;
  id v22;
  char v23;
  id v24;
  char v25;
  uint64_t v26;
  void **v27;
  void *v28;
  id v29;
  char v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int isUniquelyReferenced_native;
  uint64_t v42;
  uint64_t v43;

  v5 = v4;
  v6 = a4 >> 1;
  if (a4 >> 1 == a3)
    return;
  v7 = a3;
  swift_unknownObjectRetain();
  v43 = v6;
  while (v7 < v6)
  {
    v8 = *(void **)(a2 + 8 * v7);
    v9 = *v5;
    v10 = v5[1];
    v11 = (void **)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 16);
    if (*v5)
    {
      v13 = v8;
      swift_retain();
      sub_18A6A129C((uint64_t)v13, (uint64_t)v11, v12, (Swift::Int *)(v9 + 16));
      v15 = v14;
      swift_release();
      if ((v15 & 1) == 0)
        goto LABEL_39;
    }
    else if (v12)
    {
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      v16 = *v11;
      v17 = v8;
      v18 = v16;
      v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) != 0)
        goto LABEL_39;
      if (v12 != 1)
      {
        v20 = *(id *)(v10 + 40);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_39;
        if (v12 != 2)
        {
          v22 = *(id *)(v10 + 48);
          v23 = static NSObject.== infix(_:_:)();

          if ((v23 & 1) != 0)
            goto LABEL_39;
          if (v12 != 3)
          {
            v24 = *(id *)(v10 + 56);
            v25 = static NSObject.== infix(_:_:)();

            if ((v25 & 1) != 0)
              goto LABEL_39;
            v26 = v12 - 4;
            v27 = (void **)(v10 + 64);
            while (v26)
            {
              v28 = *v27++;
              v29 = v28;
              v30 = static NSObject.== infix(_:_:)();

              --v26;
              if ((v30 & 1) != 0)
                goto LABEL_39;
            }
          }
        }
      }
    }
    else
    {
      v31 = v8;
    }
    v32 = v8;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v34 = *v5;
    v33 = v5[1];
    v35 = *(_QWORD *)(v33 + 16);
    if (*v5)
    {
      swift_beginAccess();
      if (MEMORY[0x18D76C580](*(_QWORD *)(v34 + 16) & 0x3FLL) >= (uint64_t)v35)
      {
        isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
        v42 = *v5;
        if (!isUniquelyReferenced_native)
        {
          if (!v42)
            goto LABEL_44;
          v42 = _HashTable.copy()();
          swift_release();
          *v5 = v42;
        }
        if (!v42)
          goto LABEL_43;
        _HashTable.UnsafeHandle.subscript.setter();
      }
      else
      {
        v36 = *(_QWORD *)(v34 + 24) & 0x3FLL;
        if (v35 > 0xF || v36 != 0)
          goto LABEL_30;
        swift_release();
        *v5 = 0;
      }
    }
    else if (v35 > 0xF)
    {
      v36 = 0;
LABEL_30:
      v38 = MEMORY[0x18D76C5A4](v35);
      if (v36 <= v38)
        v39 = v38;
      else
        v39 = v36;
      v40 = sub_18A6A0EB4(v33, v39, 0, v36, (void (*)(uint64_t, uint64_t, uint64_t))sub_18A6A104C);
      swift_release();
      *v5 = v40;
    }
LABEL_39:
    ++v7;

    v6 = v43;
    if (v7 == v43)
    {
      swift_unknownObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_18A68782C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  char v14;
  id v15;
  char v16;
  id v17;
  char v18;
  id v19;
  char v20;
  uint64_t v21;
  void **v22;
  void *v23;
  id v24;
  char v25;

  v2 = v1;
  if (a1 >> 62)
    goto LABEL_29;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x18D76CEB0](v4, a1);
      }
      else
      {
        if (v4 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_28;
        v5 = *(id *)(a1 + 32 + 8 * v4);
      }
      v6 = v5;
      if (__OFADD__(v4++, 1))
        break;
      v9 = *v2;
      v8 = v2[1];
      v10 = *(_QWORD *)(v8 + 16);
      if (*v2)
      {
        swift_retain();
        sub_18A6A129C((uint64_t)v6, v8 + 32, v10, (Swift::Int *)(v9 + 16));
        v12 = v11;
        swift_release();
        if ((v12 & 1) == 0)
          goto LABEL_16;
LABEL_15:
        sub_18A6A0C74(v6);
        goto LABEL_16;
      }
      if (!v10)
        goto LABEL_15;
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      v13 = *(id *)(v8 + 32);
      v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) == 0)
      {
        if (v10 != 1)
        {
          v15 = *(id *)(v8 + 40);
          v16 = static NSObject.== infix(_:_:)();

          if ((v16 & 1) != 0)
            goto LABEL_16;
          if (v10 != 2)
          {
            v17 = *(id *)(v8 + 48);
            v18 = static NSObject.== infix(_:_:)();

            if ((v18 & 1) != 0)
              goto LABEL_16;
            if (v10 != 3)
            {
              v19 = *(id *)(v8 + 56);
              v20 = static NSObject.== infix(_:_:)();

              if ((v20 & 1) != 0)
                goto LABEL_16;
              v21 = v10 - 4;
              v22 = (void **)(v8 + 64);
              while (v21)
              {
                v23 = *v22++;
                v24 = v23;
                v25 = static NSObject.== infix(_:_:)();

                --v21;
                if ((v25 & 1) != 0)
                  goto LABEL_16;
              }
            }
          }
        }
        goto LABEL_15;
      }
LABEL_16:

      if (v4 == v3)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

void sub_18A687A74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v2 = sub_18A6A0214();
  sub_18A6A021C(&v30, a1, 0, 1, v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v30;
  if (v30 != v5)
  {
    if ((v30 & 0x8000000000000000) != 0)
      goto LABEL_55;
    if (v5 >= v30)
    {
      v7 = swift_bridgeObjectRetain();
      v8 = (_QWORD *)sub_18A6A0900(v7, a1 + 32, 0, (2 * v6) | 1, (uint64_t (*)(uint64_t))sub_18A666AB4);
      v31 = v4;
      v32 = v8;
      sub_18A6A0848(v6, a1);
      v29 = v11;
      if (v9 == v10 >> 1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      v12 = v9;
      v13 = v10 >> 1;
      swift_retain();
      while (1)
      {
        if (v12 >= v13)
        {
          __break(1u);
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        v14 = (uint64_t *)(v29 + 16 * v12);
        v16 = *v14;
        v15 = v14[1];
        v17 = v31;
        v18 = v8[2];
        if (!v31)
          break;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_18A6A113C(v16, v15, (uint64_t)(v8 + 4), v18, (_QWORD *)(v17 + 16));
        v20 = v19;
        swift_release();
        if ((v20 & 1) != 0)
          goto LABEL_19;
        swift_bridgeObjectRelease();
LABEL_20:
        if (++v12 == v13)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return;
        }
      }
      if (v18)
      {
        v21 = v8[4] == v16 && v8[5] == v15;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_20;
        if (v18 != 1)
        {
          v22 = v8[6] == v16 && v8[7] == v15;
          if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_20;
          if (v18 != 2)
          {
            v23 = v8[8] == v16 && v8[9] == v15;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_20;
            if (v18 != 3)
            {
              v24 = v8[10] == v16 && v8[11] == v15;
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_20;
              v25 = v18 - 4;
              if (v18 != 4)
              {
                v26 = v8[12] == v16 && v8[13] == v15;
                if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_20;
                v27 = v8 + 15;
                while (--v25)
                {
                  if (*(v27 - 1) != v16 || *v27 != v15)
                  {
                    v27 += 2;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      continue;
                  }
                  goto LABEL_20;
                }
              }
            }
          }
        }
      }
      swift_bridgeObjectRetain();
LABEL_19:
      sub_18A6A0B0C(v16, v15);
      swift_bridgeObjectRelease();
      v8 = v32;
      goto LABEL_20;
    }
LABEL_56:
    __break(1u);
  }
}

void sub_18A687D64(unint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30[3];

  v2 = (unint64_t *)sub_18A6A0214();
  sub_18A6A0450(v30, a1, 0, 1, v2);
  v4 = v3;
  v5 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = v30[0];
    if (v30[0] == v6)
    {
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRelease();
      return;
    }
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v30[0] & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v7 = v30[0];
  if (v30[0] == v6)
  {
    v28 = swift_bridgeObjectRetain();
    sub_18A6669E8(v28);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  if (v30[0] < 0)
    goto LABEL_32;
  swift_bridgeObjectRetain();
  v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v29 < 0)
  {
LABEL_37:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_6:
  if (v8 < v7)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((a1 & 0xC000000000000001) != 0 && v7)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v9);
      v9 = v10;
    }
    while (v7 != v10);
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.subscript.getter();
    v12 = v15;
    v14 = v16;
    v13 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
    v12 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v13 = (2 * v7) | 1;
    swift_bridgeObjectRetain();
    v14 = 0;
  }
  v18 = sub_18A6A0900(v11, v12, v14, v13, (uint64_t (*)(uint64_t))sub_18A666BC4);
  v30[1] = v4;
  v30[2] = v18;
  if (v6 < v7)
    goto LABEL_34;
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (v19 < v6)
    goto LABEL_35;
  if ((a1 & 0xC000000000000001) == 0)
    goto LABEL_23;
  if (v7 >= v6)
    goto LABEL_36;
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  v20 = v7;
  do
  {
    v21 = v20 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v20);
    v20 = v21;
  }
  while (v6 != v21);
LABEL_23:
  if (v5)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.subscript.getter();
    v23 = v25;
    v7 = v26;
    v24 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = a1 & 0xFFFFFFFFFFFFFF8;
    v23 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v24 = (2 * v6) | 1;
    swift_bridgeObjectRetain();
  }
  sub_18A6874FC(v22, v23, v7, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_18A6880B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  id v15;
  char v16;
  id v17;
  id v18;
  char v19;
  id v20;
  char v21;
  id v22;
  char v23;
  uint64_t v24;
  void **v25;
  void *v26;
  id v27;
  char v29;
  void **v30;

  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
LABEL_26:
    sub_18A6669E8(MEMORY[0x1E0DEE9D8]);
  v7 = *(_QWORD *)(a4 + 16);
  if (v7)
  {
    v8 = a4 + 32;
    v30 = (void **)(a2 + 32);
    swift_retain();
    swift_retain();
    v9 = 0;
    while (1)
    {
      if (v9 >= *(_QWORD *)(a4 + 16))
      {
        __break(1u);
        goto LABEL_26;
      }
      v10 = *(void **)(v8 + 8 * v9);
      v11 = *(_QWORD *)(a2 + 16);
      if (a1)
      {
        v12 = v10;
        swift_retain();
        sub_18A6A129C(v12, (uint64_t)v30, v11, (Swift::Int *)(a1 + 16));
        LOBYTE(v12) = v13;
        swift_release();
        if ((v12 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
        if (!v11)
        {
          v17 = v10;
          goto LABEL_13;
        }
        sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
        v14 = *v30;
        v10;
        v15 = v14;
        v16 = static NSObject.== infix(_:_:)();

        v8 = a4 + 32;
        if ((v16 & 1) == 0)
        {
          if (v11 == 1)
            goto LABEL_13;
          v18 = *(id *)(a2 + 40);
          v19 = static NSObject.== infix(_:_:)();

          v8 = a4 + 32;
          if ((v19 & 1) == 0)
          {
            if (v11 == 2)
              goto LABEL_13;
            v20 = *(id *)(a2 + 48);
            v21 = static NSObject.== infix(_:_:)();

            v8 = a4 + 32;
            if ((v21 & 1) == 0)
            {
              if (v11 == 3)
                goto LABEL_13;
              v22 = *(id *)(a2 + 56);
              v23 = static NSObject.== infix(_:_:)();

              v8 = a4 + 32;
              if ((v23 & 1) == 0)
              {
                v24 = v11 - 4;
                v25 = (void **)(a2 + 64);
                while (v24)
                {
                  v26 = *v25++;
                  v27 = v26;
                  v29 = static NSObject.== infix(_:_:)();

                  v8 = a4 + 32;
                  --v24;
                  if ((v29 & 1) != 0)
                    goto LABEL_10;
                }
                goto LABEL_13;
              }
            }
          }
        }
      }
LABEL_10:
      sub_18A6A09E0(v10);
LABEL_13:

      if (++v9 == v7)
      {
        swift_release_n();
        swift_release_n();
        return 0;
      }
    }
  }
  swift_release();
  swift_release();
  return 0;
}

uint64_t sub_18A68833C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[55] = a2;
  v3[56] = v2;
  v3[54] = a1;
  return sub_18A5F4434();
}

uint64_t sub_18A688354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = sub_18A6A71B4();
  *(_QWORD *)(v22 + 456) = v26;
  if (v26)
  {
    v27 = v26;
    v28 = (const void *)(*(_QWORD *)(v22 + 440) + 16);
    v29 = (void *)sub_18A6A726C();
    sub_18A6A6990(v29, v30);
    v31 = sub_18A5F37B4();
    *(_QWORD *)(v22 + 464) = v31;
    sub_18A6A6990((void *)(v31 + 16), v28);
    *(_QWORD *)(v31 + 88) = v27;
    sub_18A621764(v22 + 16);
    v41 = (uint64_t (*)(void))((char *)&dword_1EDF6C490 + dword_1EDF6C490);
    sub_18A6A73A8();
    v32 = (_QWORD *)sub_18A6A563C();
    *(_QWORD *)(v22 + 472) = v32;
    *v32 = v22;
    v32[1] = sub_18A68855C;
    return sub_18A6A63AC(v22 + 152, (uint64_t)&unk_1EDF6C488, v31, v41);
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v34 = sub_18A5F3BA0();
    v35 = sub_18A60990C(v34, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v36 = sub_18A6A6454();
    if (sub_18A6A55D0(v36))
    {
      v37 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v37 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v38 = sub_18A5F37AC();
      *(_QWORD *)(v22 + 400) = sub_18A6A5704(v38, v39, &a11);
      sub_18A6A578C();
      sub_18A5F394C();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v35, v23, "%s not fetching changes for deallocated engine", v37);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    v40 = *(_QWORD *)(v22 + 432);
    *(_BYTE *)(v40 + 80) = 0;
    *(_OWORD *)(v40 + 48) = 0u;
    *(_OWORD *)(v40 + 64) = 0u;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    *(_OWORD *)v40 = 0u;
    return sub_18A6A55EC(*(uint64_t (**)(void))(v22 + 8));
  }
}

uint64_t sub_18A68855C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

void sub_18A688598()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  __int128 *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t Changes;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  id v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  Swift::Int v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  Swift::Int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  char v67;
  Swift::Int v68;
  id v69;
  Swift::Int v70;
  Swift::Int v71;
  uint64_t v72;
  uint64_t v73;
  Swift::Int v74;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  int v93;
  __int128 *v94;
  uint64_t v95;
  char v96;
  CKFetchRecordZoneChangesConfiguration *v97;
  id v98;
  __int128 *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  _BOOL8 v108;
  Swift::Int v109;
  unint64_t v110;
  char v111;
  Swift::Bool v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[3];
  Swift::Int_optional v147;
  Swift::OpaquePointer_optional v148;
  CKServerChangeToken_optional v149;

  v2 = (const void *)(v0 + 16);
  v3 = (__int128 *)(v0 + 88);
  *(_OWORD *)(v0 + 88) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 129) = *(_OWORD *)(v0 + 193);
  v133 = *(unsigned __int8 *)(v0 + 160);
  v131 = *(_OWORD *)(v0 + 168);
  v127 = *(_QWORD *)(v0 + 184);
  v128 = *(_QWORD *)(v0 + 152);
  v130 = *(unsigned __int8 *)(v0 + 192);
  v126 = *(_QWORD *)(v0 + 200);
  v129 = *(unsigned __int8 *)(v0 + 208);
  if (qword_1EDF6A540 != -1)
    goto LABEL_116;
LABEL_2:
  v4 = sub_18A5F3BA0();
  v5 = sub_18A60990C(v4, (uint64_t)qword_1EDF6A630);
  sub_18A621764((uint64_t)v2);
  sub_18A5F3E6C();
  sub_18A6A8140();
  sub_18A621764((uint64_t)v2);
  sub_18A5F3E6C();
  sub_18A6A8140();
  sub_18A6A5CC0();
  v6 = sub_18A6A6880();
  if (sub_18A6A562C(v6))
  {
    v7 = sub_18A5F3830();
    v143 = sub_18A5F3830();
    *(_DWORD *)v7 = 136315650;
    sub_18A5F3E6C();
    sub_18A699D34();
    v9 = v8;
    sub_18A5F37AC();
    *(_QWORD *)(v0 + 408) = sub_18A6A5E28(v9, v10, &v143);
    sub_18A6A65D4();
    sub_18A5F3A8C();
    sub_18A5F4804();
    *(_WORD *)(v7 + 12) = 2080;
    sub_18A6A6990(&v144, v2);
    Changes = CKSyncEngine.FetchChangesContext.description.getter();
    *(_QWORD *)(v0 + 416) = sub_18A6A8204(Changes, v12);
    sub_18A6A6510();
    sub_18A5F37A4();
    sub_18A6A7954();
    sub_18A6A7954();
    *(_WORD *)(v7 + 22) = 2080;
    v13 = v3[1];
    v144 = *v3;
    v145 = v13;
    v146[0] = v3[2];
    *(_OWORD *)((char *)v146 + 9) = *(__int128 *)((char *)v3 + 41);
    v14 = CKSyncEngine.FetchChangesOptions.description.getter();
    *(_QWORD *)(v0 + 424) = sub_18A6A8204(v14, v15);
    sub_18A6A6F14();
    sub_18A5F37A4();
    sub_18A6A7264();
    sub_18A6A7264();
    sub_18A6A61B8(&dword_18A5C5000, v5, (os_log_type_t)v1, "%s next fetch changes options for context %s: %s", (uint8_t *)v7);
    sub_18A6A75BC();
    sub_18A5F392C();
  }
  sub_18A5F4804();
  sub_18A6A7954();
  sub_18A6A7954();
  sub_18A6A7264();
  sub_18A6A7264();

  v124 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + 128);
  CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  sub_18A6A8140();
  v16 = sub_18A6406BC();
  v18 = sub_18A670F0C(v16, v17);
  swift_bridgeObjectRetain();
  v19 = sub_18A5F3898();
  *(_QWORD *)&v144 = sub_18A6712F8(v19, v18);
  sub_18A64E2A0(v18);
  sub_18A687D64(v144);
  v21 = v20;
  v142 = v22;
  v135 = sub_18A672508(v20, v22);
  if (!v135)
  {
    v120 = *(_QWORD *)(v0 + 432);
    swift_release();
    sub_18A6A7264();
    sub_18A5F37AC();
    sub_18A6A6ACC();
    *(_BYTE *)(v120 + 80) = 0;
    *(_OWORD *)(v120 + 48) = 0u;
    *(_OWORD *)(v120 + 64) = 0u;
    *(_OWORD *)(v120 + 16) = 0u;
    *(_OWORD *)(v120 + 32) = 0u;
    *(_OWORD *)v120 = 0u;
LABEL_105:
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v2 = (const void *)(v0 + 216);
  v3 = (__int128 *)(v0 + 328);
  v23 = *(unsigned __int8 *)(v0 + 128);
  v123 = *(_QWORD *)(v0 + 136);
  v134 = *(_QWORD *)(v0 + 120);
  HIDWORD(v125) = v23;
  if (*(_QWORD *)(v134 + 16))
  {
    v24 = v135;
    sub_18A6A81F8();
    if ((v26 & 1) != 0)
      v23 = *(unsigned __int8 *)(*(_QWORD *)(v134 + 56) + 16 * v25);

  }
  LODWORD(v125) = v23;
  v27 = *(_QWORD *)(v0 + 448);
  v143 = MEMORY[0x1E0DEE9D8];
  v138 = (uint64_t *)(v27 + 216);
  v28 = sub_18A5F46AC();
  v36 = MEMORY[0x1E0DEE9E0];
  while (2)
  {
    v139 = v36 & 0xC000000000000001;
    if (v36 < 0)
      v37 = v36;
    else
      v37 = v36 & 0xFFFFFFFFFFFFFF8;
    v136 = v36;
    v137 = v37;
    while (1)
    {
      if (v139)
      {
        sub_18A61039C();
        v38 = __CocoaSet.count.getter();
        v28 = sub_18A5F394C();
      }
      else
      {
        v38 = *(_QWORD *)(v36 + 16);
      }
      if (v38 >= *v138 || (v39 = (void *)v142, (v1 = *(_QWORD *)(v142 + 16)) == 0))
      {
        sub_18A6A7C5C(v28, v29, v30, v31, v32, v33, v34, v35, v123, v124, v125, v126, v127, v128, v129, v130, v131, *((uint64_t *)&v131 + 1), v132,
          v133,
          v134,
          v0 + 352,
          v135);
        sub_18A5F37AC();
        sub_18A61A878();
LABEL_104:
        v121 = *(_QWORD *)(v0 + 432);
        sub_18A6A6ACC();
        v122 = v143;
        *(_QWORD *)v121 = v128;
        *(_QWORD *)(v121 + 8) = v133;
        *(_OWORD *)(v121 + 16) = v131;
        *(_QWORD *)(v121 + 32) = v127;
        *(_QWORD *)(v121 + 40) = v130;
        *(_QWORD *)(v121 + 48) = v126;
        *(_QWORD *)(v121 + 56) = v129;
        *(_QWORD *)(v121 + 64) = v122;
        *(_QWORD *)(v121 + 72) = v36;
        *(_BYTE *)(v121 + 80) = v125;
        goto LABEL_105;
      }
      if (v21)
      {
        v41 = v21 + 16;
        v40 = *(_QWORD *)(v21 + 16);
        v3 = *(__int128 **)(v142 + 32);
        sub_18A6A71BC();
        v42 = v3;
        NSObject._rawHashValue(seed:)(v40);
        sub_18A6A7F80();
        v45 = __OFSUB__(v44, 1);
        v46 = v44 - 1;
        if (v45)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          swift_once();
          goto LABEL_2;
        }
        v140 = v1;
        v1 = v21;
        v47 = v21 + 32;
        v48 = v46 & v43;
        v3 = (__int128 *)_HashTable.UnsafeHandle._startIterator(bucket:)();
        v50 = v49;
        v52 = v51;

        *(_QWORD *)&v144 = v41;
        *((_QWORD *)&v144 + 1) = v47;
        *(_QWORD *)&v145 = v48;
        *((_QWORD *)&v145 + 1) = v3;
        *(_QWORD *)&v146[0] = v50;
        *((_QWORD *)&v146[0] + 1) = v52;
        LOBYTE(v146[1]) = 0;
        if (!v3)
        {
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          return;
        }
        v53 = 0;
        v54 = v41;
        while (1)
        {
          *(_QWORD *)(v0 + 216) = v54;
          *(_QWORD *)(v0 + 224) = v47;
          *(_QWORD *)(v0 + 232) = v48;
          *(_QWORD *)(v0 + 240) = v3;
          *(_QWORD *)(v0 + 248) = v50;
          *(_QWORD *)(v0 + 256) = v52;
          *(_BYTE *)(v0 + 264) = v53 & 1;
          v55 = _HashTable.BucketIterator.currentValue.getter();
          if ((v56 & 1) == 0 && !v55)
            break;
          sub_18A6A8374();
          v47 = *((_QWORD *)&v144 + 1);
          v54 = v144;
          v3 = (__int128 *)*((_QWORD *)&v145 + 1);
          v48 = v145;
          v52 = *((_QWORD *)&v146[0] + 1);
          v50 = *(_QWORD *)&v146[0];
          v53 = v146[1];
          if (!*((_QWORD *)&v145 + 1))
            goto LABEL_117;
        }
        sub_18A6A6660();
        sub_18A5F46AC();
        if ((*(_QWORD *)(v1 + 16) & 0x3FLL) == (*(_QWORD *)(v1 + 24) & 0x3FLL)
          || v140 > static _HashTable.minimumCapacity(forScale:)())
        {
          if ((swift_isUniquelyReferenced_native() & 1) == 0)
          {
            v57 = _HashTable.copy()();
            sub_18A6A6660();
            if (!v57)
              goto LABEL_122;
            v1 = v57;
          }
          v58 = (Swift::Int *)(v1 + 16);
          v3 = (__int128 *)(v1 + 32);
          *(_QWORD *)&v144 = v1 + 16;
          *((_QWORD *)&v144 + 1) = v1 + 32;
          *(_QWORD *)&v145 = v48;
          *((_QWORD *)&v145 + 1) = _HashTable.UnsafeHandle._startIterator(bucket:)();
          *(_QWORD *)&v146[0] = v59;
          *((_QWORD *)&v146[0] + 1) = v60;
          LOBYTE(v146[1]) = 0;
          sub_18A6A8374();
          v61 = *((_QWORD *)&v145 + 1);
          if (*((_QWORD *)&v145 + 1))
          {
            v62 = v146[1];
            v141 = v1;
            v1 = *((_QWORD *)&v146[0] + 1);
            v63 = *(_QWORD *)&v146[0];
            v36 = v145;
            v64 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
            swift_retain();
            v65 = v144;
            while (1)
            {
              *(_OWORD *)(v0 + 272) = v65;
              *(_QWORD *)(v0 + 288) = v36;
              *(_QWORD *)(v0 + 296) = v61;
              *(_QWORD *)(v0 + 304) = v63;
              *(_QWORD *)(v0 + 312) = v1;
              *(_BYTE *)(v0 + 320) = v62 & 1;
              v66 = _HashTable.BucketIterator.currentValue.getter();
              if ((v67 & 1) != 0)
                goto LABEL_120;
              if ((v66 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
                goto LABEL_110;
              }
              if (v66 >= *(_QWORD *)(v142 + 16))
                goto LABEL_107;
              v68 = *v58;
              v69 = *(id *)(v142 + 32 + 8 * v66);
              v70 = NSObject._rawHashValue(seed:)(v68);

              v71 = *v58;
              v72 = 1 << *v58;
              v73 = v72 - 1;
              if (__OFSUB__(v72, 1))
                goto LABEL_108;
              v74 = v73 & v70;
              if (v48 >= v64)
              {
                if (v74 < v64 || v48 < v74)
                  goto LABEL_59;
              }
              else if (v74 < v64 && v48 < v74)
              {
                goto LABEL_59;
              }
              v77 = _HashTable.BucketIterator.currentValue.getter();
              if ((v78 & 1) != 0)
                v79 = 0;
              else
                v79 = ((v73 & ((v77 - (*(uint64_t *)(v141 + 24) >> 6)) >> 63)) + v77 - (*(uint64_t *)(v141 + 24) >> 6)) ^ v73;
              v80 = (v71 & 0x3F) * v48;
              v81 = v80 >> 6;
              *((_QWORD *)v3 + (v80 >> 6)) = *((_QWORD *)v3 + (v80 >> 6)) & (((1 - v72) << v80) - 1) | (v79 << v80);
              v82 = 64 - (v80 & 0x3F);
              v83 = *v58 & 0x3F;
              if (v82 < v83)
              {
                v84 = v83 << v83;
                v45 = __OFADD__(v84, 64);
                v85 = v84 + 64;
                if (v45)
                  goto LABEL_109;
                if (v81 + 1 == (uint64_t)(v85 - 1) / 64)
                  v86 = 0;
                else
                  v86 = v81 + 1;
                *((_QWORD *)v3 + v86) = *((_QWORD *)v3 + v86) & (-1 << (*v58 - v82)) | (v79 >> v82);
              }
              v48 = v36;
LABEL_59:
              sub_18A6A8374();
              v65 = v144;
              v61 = *((_QWORD *)&v145 + 1);
              v36 = v145;
              v1 = *((_QWORD *)&v146[0] + 1);
              v63 = *(_QWORD *)&v146[0];
              v62 = v146[1];
              if (!*((_QWORD *)&v145 + 1))
              {
                sub_18A6A741C();
                v21 = v141;
                v2 = (const void *)(v0 + 216);
                goto LABEL_66;
              }
            }
          }
          sub_18A6A741C();
          sub_18A6A73A8();
          v21 = v1;
LABEL_66:
          v39 = (void *)v142;
          sub_18A623E28();
          sub_18A6A18DC(0, 1, v142, v58);
          sub_18A61A878();
          sub_18A6A6ACC();
          v37 = v137;
          if ((sub_18A6A8288() & 1) == 0)
            sub_18A6A8270();
          v36 = v136;
          v88 = *(_QWORD *)(v142 + 16);
          if (!v88)
            goto LABEL_113;
          sub_18A6A6040(v88);
          sub_18A6A71C4();
        }
        else
        {
          if ((sub_18A6A8288() & 1) == 0)
            sub_18A6A8270();
          v37 = v137;
          v89 = *(_QWORD *)(v142 + 16);
          if (!v89)
            goto LABEL_115;
          sub_18A6A6040(v89);
          sub_18A6A71C4();
          sub_18A5F46AC();
          v39 = (void *)(*(_QWORD *)(v1 + 24) & 0x3FLL);
          if (*(_QWORD *)(v142 + 16) > 0xFuLL || v39)
          {
            v90 = MEMORY[0x18D76C5A4]();
            v91 = (uint64_t)v39 <= v90 ? v90 : (uint64_t)v39;
            v21 = sub_18A6A0EB4(v142, v91, 0, (uint64_t)v39, (void (*)(uint64_t, uint64_t, uint64_t))sub_18A6A104C);
            sub_18A6A6660();
          }
          else
          {
            sub_18A6A6660();
            v21 = 0;
          }
          v36 = v136;
        }
      }
      else
      {
        if ((sub_18A6A8288() & 1) == 0)
          sub_18A6A8270();
        v87 = *(_QWORD *)(v142 + 16);
        if (!v87)
          goto LABEL_114;
        sub_18A6A6040(v87);
        sub_18A6A71C4();
        v21 = 0;
      }
      v92 = sub_18A680C80(v3);

      if (!v92)
        break;

    }
    v93 = HIDWORD(v125);
    if (*(_QWORD *)(v134 + 16))
    {
      v94 = v3;
      sub_18A6A81F8();
      v93 = HIDWORD(v125);
      if ((v96 & 1) != 0)
        v93 = *(unsigned __int8 *)(*(_QWORD *)(v134 + 56) + 16 * v95);

    }
    if ((_DWORD)v125 != v93)
    {
LABEL_110:
      swift_release();

      sub_18A6A6ACC();
      goto LABEL_104;
    }
    sub_18A5F50F0(0, &qword_1EDF6A9A0);
    v149.value.super.isa = (Class)sub_18A66CCF8(*(id *)(v124 + 16), sel_serverChangeTokenForZoneID_);
    v149.value._data = 0;
    v149.is_nil = 1;
    v147.value = 0;
    CKFetchRecordZoneChangesConfiguration.init(previousServerChangeToken:resultsLimit:desiredKeys:)(v97, v149, v147, v148);
    sub_18A6A802C(v98, sel_setResultsLimit_);
    v99 = v3;
    v100 = sub_18A6A6F1C();
    if (v139)
    {
      v101 = __CocoaSet.count.getter();
      if (__OFADD__(v101, 1))
        goto LABEL_119;
      sub_18A66BC48(v37, v101 + 1);
      v36 = v102;
    }
    v103 = v21;
    v104 = sub_18A6A6C50();
    *(_QWORD *)&v144 = v36;
    sub_18A6A8128();
    v107 = *(_QWORD *)(v36 + 16);
    v108 = (v106 & 1) == 0;
    v109 = v107 + v108;
    if (__OFADD__(v107, v108))
      goto LABEL_118;
    v110 = v105;
    v111 = v106;
    sub_18A5F101C((uint64_t *)&unk_1EDF6A2B0);
    v112 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v104, v109);
    v36 = v144;
    v21 = v103;
    if (!v112)
    {
LABEL_95:
      if ((v111 & 1) != 0)
      {
        v115 = *(_QWORD *)(v144 + 56);
        sub_18A6A8344();
        *(_QWORD *)(v115 + 8 * v110) = v100;
      }
      else
      {
        sub_18A6A6840(v144 + 8 * (v110 >> 6));
        *(_QWORD *)(*(_QWORD *)(v144 + 48) + 8 * v110) = v3;
        *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v110) = v100;
        v116 = *(_QWORD *)(v36 + 16);
        v45 = __OFADD__(v116, 1);
        v117 = v116 + 1;
        if (v45)
          goto LABEL_121;
        *(_QWORD *)(v36 + 16) = v117;
        v118 = v3;
      }
      v119 = sub_18A6A6600();
      MEMORY[0x18D76C9DC](v119);
      if (*(_QWORD *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_18A6A7564();
      sub_18A629170();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v2 = (const void *)(v0 + 216);
      continue;
    }
    break;
  }
  sub_18A6A8128();
  if ((v111 & 1) == (v114 & 1))
  {
    v110 = v113;
    goto LABEL_95;
  }
  sub_18A5F3B04(v113, (unint64_t *)&qword_1ECD967B0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18A6890CC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 160) = a3;
  *(_QWORD *)(v4 + 168) = a4;
  *(_QWORD *)(v4 + 152) = a1;
  *(_OWORD *)(v4 + 176) = *a2;
  return swift_task_switch();
}

uint64_t sub_18A6890F0()
{
  void *v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_18A64A1F4();
  if (*(_QWORD *)(v1 + 176))
  {
    sub_18A6A6CC8();
    sub_18A6A6990(v0, v2);
    v3 = (_QWORD *)sub_18A5F3C20();
    *(_QWORD *)(v1 + 192) = v3;
    v4 = sub_18A6A6A20(v3);
    return sub_18A5F447C(v4, v5, v6, v7, v8, v9);
  }
  else
  {
    v12 = *(_OWORD **)(v1 + 152);
    v11 = *(_QWORD *)(v1 + 160);
    v13 = *(_OWORD *)(v11 + 8);
    v14 = *(_OWORD *)(v11 + 24);
    v15 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)(v11 + 49);
    v12[1] = v14;
    v12[2] = v15;
    *v12 = v13;
    sub_18A621764(v11);
    return sub_18A5F4838(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_18A689184()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6891C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_BYTE *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_BYTE *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_BYTE *)(v0 + 144);
  v7 = *(_OWORD *)(v0 + 104);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 88);
  *(_BYTE *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 48) = v5;
  *(_BYTE *)(v1 + 56) = v6;
  return sub_18A60A0D8();
}

uint64_t sub_18A689200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v4 = type metadata accessor for UUID();
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = sub_18A5F3CBC();
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  v3[17] = sub_18A5F3CBC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A689264()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_18A623E50();
  v1 = v0[16];
  v2 = v0[17];
  v3 = v0[12];
  v4 = v0[11];
  v5 = sub_18A623B70();
  sub_18A6239F8(v2, v6, v7, v5);
  v8 = (_QWORD *)sub_18A5F37B4();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v4;
  v8[5] = v3;
  sub_18A623E28();
  sub_18A672214(v2, (uint64_t)&unk_1EDF6C470, (uint64_t)v8);
  v0[18] = v9;
  UUID.init()();
  sub_18A5F40A4();
  v10 = sub_18A634FA4();
  sub_18A69E670(v10, v1);
  sub_18A6A6B7C();
  v11 = (_QWORD *)swift_task_alloc();
  v0[19] = v11;
  sub_18A5F101C(&qword_1EDF6A9D8);
  *v11 = v0;
  v11[1] = sub_18A689374;
  sub_18A623D08();
  return Task.value.getter();
}

uint64_t sub_18A689374()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A64A154(v2);
  *(_QWORD *)(v0 + 160) = v1;
  swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A6893C4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);

  sub_18A623E50();
  sub_18A5F40A4();
  sub_18A69E0D4();
  sub_18A6A6B7C();
  sub_18A61A878();
  sub_18A5F37AC();
  v0 = sub_18A62FE04();
  v1(v0);
  sub_18A6A6C00();
  sub_18A6A73B0();
  v2 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A6A5B90(v2);
}

uint64_t sub_18A689438()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  sub_18A5F40A4();
  sub_18A69E0D4();
  sub_18A6A6B7C();
  sub_18A5F37AC();
  swift_willThrow();
  sub_18A5F438C();
  sub_18A6A83E0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_18A6A73B0();
  sub_18A6A83EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A6894D8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_18A68952C;
  return v7();
}

uint64_t sub_18A68952C()
{
  uint64_t v0;

  sub_18A6239A4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A689560()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A689574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t i;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_18A6A6358();
  v1 = *(_QWORD *)(v0 + 40);
  sub_18A5F46AC();
  v2 = *(_QWORD *)(v1 + 232);
  v3 = v2 + 64;
  sub_18A6A70F8();
  v6 = v5 & v4;
  v8 = (unint64_t)(63 - v7) >> 6;
  result = sub_18A5F3898();
  v10 = 0;
  v11 = MEMORY[0x1E0DEE9C0] + 8;
  v12 = MEMORY[0x1E0DEDB38];
  if (!v6)
    goto LABEL_3;
LABEL_2:
  sub_18A6A6F58();
  for (i = v13 | (v10 << 6); ; i = v19 + (v10 << 6))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * i);
    sub_18A6A73A8();
    v21 = sub_18A5F101C(&qword_1EDF6A9D8);
    MEMORY[0x18D76CB68](v20, v11, v21, v12);
    result = sub_18A6A6660();
    if (v6)
      goto LABEL_2;
LABEL_3:
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v15 >= v8)
      goto LABEL_21;
    ++v10;
    if (!*(_QWORD *)(v3 + 8 * v15))
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_21;
      if (!*(_QWORD *)(v3 + 8 * v10))
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_21;
        if (!*(_QWORD *)(v3 + 8 * v10))
        {
          v10 = v15 + 3;
          if (v15 + 3 >= v8)
            goto LABEL_21;
          if (!*(_QWORD *)(v3 + 8 * v10))
            break;
        }
      }
    }
LABEL_18:
    sub_18A623BAC();
    v6 = v18 & v17;
  }
  v16 = v15 + 4;
  if (v16 >= v8)
  {
LABEL_21:
    sub_18A5F37AC();
    return sub_18A6A6E60(*(uint64_t (**)(void))(v0 + 8));
  }
  if (*(_QWORD *)(v3 + 8 * v16))
  {
    v10 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      goto LABEL_21;
    ++v16;
    if (*(_QWORD *)(v3 + 8 * v10))
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_18A6896EC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 248) = a1;
  return sub_18A6A5E98();
}

void sub_18A6896F8()
{
  sub_18A6A7140();
  sub_18A6A788C();
  sub_18A5F379C();
}

void sub_18A689720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_18A5F44DC();
  a21 = v23;
  a22 = v24;
  v26 = v25;
  v27 = *(_QWORD *)(v22 + 256);
  sub_18A6A7140();
  *(_BYTE *)(v27 + 16) = v26;
  sub_18A6A788C();
  if (qword_1EDF6A540 != -1)
    swift_once();
  v28 = sub_18A5F3BA0();
  sub_18A60990C(v28, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  if (sub_18A6A5810(v29))
  {
    v31 = sub_18A5F3830();
    a10 = sub_18A5F3830();
    *(_DWORD *)v31 = 136315394;
    sub_18A6A79D0();
    sub_18A699D34();
    v33 = v32;
    sub_18A6A6FD0();
    sub_18A6A57C4(v33, v34, &a10);
    sub_18A6A65D4();
    sub_18A6A54D0();
    sub_18A643358();
    *(_WORD *)(v31 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_18A5C5000, v29, v30, "%s setting needsToReloadAccount=%{BOOL}d", (uint8_t *)v31, 0x12u);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A6A54D0();
  sub_18A5F3CFC();
}

void sub_18A6898A8(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_18A6896F8();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  sub_18A5F379C();
}

#error "18A6898F0: call analysis failed (funcsize=8)"

void sub_18A6898FC()
{
  sub_18A5F46AC();
  sub_18A6A8048();
}

void sub_18A689920(char a1)
{
  uint64_t v1;

  sub_18A5F40A4();
  *(_BYTE *)(v1 + 264) = a1;
  sub_18A5F42C8();
}

void sub_18A689950()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

void sub_18A689988()
{
  sub_18A5F46AC();
  sub_18A6A8048();
}

void sub_18A6899AC(char a1)
{
  uint64_t v1;

  sub_18A5F40A4();
  *(_BYTE *)(v1 + 265) = a1;
  sub_18A5F42C8();
}

void sub_18A6899DC()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

void sub_18A689A10()
{
  sub_18A5F46AC();
  sub_18A6A8048();
}

void sub_18A689A34(char a1)
{
  uint64_t v1;

  sub_18A5F40A4();
  *(_BYTE *)(v1 + 266) = a1;
  sub_18A5F42C8();
}

void sub_18A689A64()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

void sub_18A689A98(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_18A689AF4((uint64_t)v1);
}

void sub_18A689AC4()
{
  uint64_t v0;
  id v1;

  sub_18A5F46AC();
  v1 = *(id *)(v0 + 304);
  sub_18A5F42C8();
}

void sub_18A689AF4(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  sub_18A5F40A4();
  v3 = *(void **)(v1 + 304);
  *(_QWORD *)(v1 + 304) = a1;

  sub_18A5F42C8();
}

void sub_18A689B2C()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

void sub_18A689B60(void *a1)
{
  id v2;

  v2 = a1;
  sub_18A689AF4((uint64_t)a1);
}

void sub_18A689B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v2);
  sub_18A6A7A34();
  if (!*(_QWORD *)(v1 + 248))
  {
    v3 = sub_18A623B70();
    sub_18A6239F8(v0, v4, v5, v3);
    sub_18A62F924(&qword_1EDF6A4B8, (uint64_t (*)(uint64_t))type metadata accessor for SyncEngine, (uint64_t)&protocol conformance descriptor for SyncEngine);
    v7 = v6;
    v8 = (_QWORD *)sub_18A5F37B4();
    v8[2] = v1;
    v8[3] = v7;
    v8[4] = v1;
    v9 = sub_18A5F3A58();
    sub_18A6A8134(v9, (uint64_t)&unk_1EDF6C460);
    sub_18A6896EC(v10);
  }
}

uint64_t sub_18A689C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A689C98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  static Duration.seconds(_:)();
  sub_18A6A6B40();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_18A689CF8;
  sub_18A6A5F64();
  return sub_18A6A69D0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A689CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  sub_18A6A5778();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  sub_18A5F416C(&a14);
  if (v16)
    sub_18A6A5978();
  sub_18A6A5CA0();
  sub_18A623CE4();
  return sub_18A6A5560();
}

uint64_t sub_18A689D60()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A6896EC(0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  sub_18A6A6E30(v1, (uint64_t)sub_18A689DAC);
  return sub_18A689DE8();
}

uint64_t sub_18A689DAC()
{
  uint64_t v0;

  sub_18A6239A4();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A689DE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A689DFC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_18A689E58;
  return sub_18A6725A0((uint64_t)v1, 1, (uint64_t)&unk_1EDF6C0F8, *(_QWORD *)(v0 + 16));
}

uint64_t sub_18A689E58()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A5F4328();
  sub_18A5F416C(v1);
  if (v0)
    sub_18A6A5978();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

uint64_t sub_18A689EAC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A689EF4;
  return sub_18A689F28();
}

uint64_t sub_18A689EF4()
{
  uint64_t (*v0)(void);

  sub_18A6239A4();
  v0 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A5F3E50(v0);
}

uint64_t sub_18A689F28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 392) = v0;
  sub_18A5F101C(&qword_1EDF6A680);
  *(_QWORD *)(v1 + 400) = sub_18A5F3CBC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A689F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  _QWORD *v36;

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v26 = sub_18A5F3BA0();
  v27 = sub_18A60990C(v26, (uint64_t)qword_1EDF6A630);
  v22[51] = v27;
  sub_18A5F3A58();
  sub_18A6A5CC0();
  v28 = sub_18A6A584C();
  if (sub_18A6A562C(v28))
  {
    v29 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A7A08();
    *(_DWORD *)v29 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v31 = v30;
    sub_18A5F37AC();
    v33 = sub_18A6A5844(v31, v32, &a11);
    sub_18A6A770C(v33);
    sub_18A6A5D8C();
    sub_18A5F4804();
    sub_18A5F38AC();
    sub_18A63E290(&dword_18A5C5000, v27, v23, "%s updating account info", v29);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A5F4804();
  v22[52] = *(_QWORD *)(v22[49] + 144);
  if (__sTestOverridesAvailable)
  {
    v34 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v35 = v34;
    if (qword_1EDF6AAE8 != -1)
      v34 = (id)swift_once();
    sub_18A5F3888((uint64_t)v34, sel_postNotificationName_object_);

  }
  v36 = (_QWORD *)swift_task_alloc();
  v22[53] = v36;
  *v36 = v22;
  v36[1] = sub_18A68A170;
  sub_18A663918();
  return sub_18A68AFA4();
}

uint64_t sub_18A68A170()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

#error "18A68A1D0: call analysis failed (funcsize=70)"

uint64_t sub_18A68A2E0()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 432) = v1;
  return sub_18A5F3AE0();
}

uint64_t sub_18A68A324()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0[15] = v0 + 47;
  v0[10] = v0;
  v0[11] = sub_18A68A39C;
  v1 = sub_18A6A5ED0();
  v0[18] = MEMORY[0x1E0C809B0];
  v0[19] = 0x40000000;
  v2 = sub_18A6A69B4(v1, (uint64_t)sub_18A68AF98);
  sub_18A6A6614(v2, sel_accountInfoWithCompletionHandler_);
  return sub_18A6A6DEC();
}

uint64_t sub_18A68A39C()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A70BC();
  *(_QWORD *)(v0 + 440) = v1;
  return sub_18A5F3AE0();
}

uint64_t sub_18A68A3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  const __CFString *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  NSObject *v87;
  _QWORD *v88;
  os_log_type_t v89;

  sub_18A6A633C();
  a27 = v30;
  a28 = v31;
  a26 = v28;
  v32 = *(NSObject **)(v28 + 376);
  *(_QWORD *)(v28 + 448) = v32;
  sub_18A5F3A58();
  v33 = v32;
  v34 = sub_18A6A6F3C();
  v35 = static os_log_type_t.debug.getter();
  if (sub_18A6A6E08(v34))
  {
    v36 = sub_18A5F3830();
    v88 = (_QWORD *)sub_18A5F3830();
    a17 = sub_18A5F3830();
    *(_DWORD *)v36 = 136315394;
    sub_18A5F3E6C();
    sub_18A699D34();
    v38 = v37;
    sub_18A5F37AC();
    *(_QWORD *)(v28 + 352) = sub_18A6A6FD8(v38, v39, &a17);
    sub_18A6A5940();
    sub_18A5F3FE4();
    sub_18A5F4804();
    *(_WORD *)(v36 + 12) = 2112;
    *(_QWORD *)(v28 + 360) = v32;
    v40 = v32;
    sub_18A629254();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v88 = v32;

    sub_18A6A5608(&dword_18A5C5000, v34, v35, "%s received updated account info: %@", (uint8_t *)v36);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  v41 = (_BYTE *)(*(_QWORD *)(v28 + 392) + 264);
  sub_18A6A7988();
  v42 = sub_18A5F40A4();
  if (*v41 == 1 && (sub_18A5F3D50(v42, sel_deviceToDeviceEncryptionAvailability) & 2) != 0)
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v44 = sub_18A6A81A0();
    if (os_log_type_enabled(v29, v44))
    {
      v45 = (uint8_t *)sub_18A5F3830();
      a17 = sub_18A5F3830();
      sub_18A6A7C48(4.8149e-34);
      sub_18A5F3E6C();
      sub_18A699D34();
      v46 = sub_18A5F37AC();
      *(_QWORD *)(v28 + 344) = sub_18A6A5704(v46, v47, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A6A83C8();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v29, v44, "%s we were waiting for device to device encryption, and our patience was rewarded. Now we have it! Let's schedule a sync.", v45);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    *v41 = 0;
    v43 = 1;
  }
  else
  {
    v43 = 0;
  }
  v48 = (_BYTE *)(*(_QWORD *)(v28 + 392) + 265);
  sub_18A5F40A4();
  if (*v48 == 1 && (-[NSObject needsToVerifyTerms](v32, sel_needsToVerifyTerms) & 1) == 0)
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v49 = sub_18A6A68A0();
    if (sub_18A6A5810(v43))
    {
      v50 = (uint8_t *)sub_18A5F3830();
      a17 = sub_18A5F3830();
      sub_18A6A7C48(4.8149e-34);
      sub_18A5F3E6C();
      sub_18A699D34();
      v51 = sub_18A5F37AC();
      v53 = sub_18A6A5704(v51, v52, &a17);
      sub_18A6A8368(v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A6A83C8();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v43, v49, "%s we were waiting for the account to verify terms, and our patience was rewarded. Now we have it! Let's schedule a sync", v50);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    *v48 = 0;
    LODWORD(v43) = 1;
  }
  v54 = *(_QWORD *)(v28 + 392);
  sub_18A5F46AC();
  v55 = *(id *)(v54 + 304);
  if (v55)
  {
    v55 = objc_msgSend(v55, sel_accountStatus);
    v56 = v55;
  }
  else
  {
    v56 = 0;
  }
  if (v56 != sub_18A5F3D50((uint64_t)v55, sel_accountStatus))
  {
    sub_18A5F3A58();
    v57 = v32;
    v58 = Logger.logObject.getter();
    v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v89))
    {
      v87 = v58;
      v59 = sub_18A5F3830();
      a17 = sub_18A5F3830();
      *(_DWORD *)v59 = 136315650;
      sub_18A5F3E6C();
      sub_18A699D34();
      v61 = v60;
      sub_18A5F37AC();
      *(_QWORD *)(v28 + 312) = sub_18A6A57C4(v61, v62, &a17);
      sub_18A6A5940();
      sub_18A643358();
      sub_18A5F4804();
      *(_WORD *)(v59 + 12) = 2080;
      v63 = (id)CKStringFromAccountStatus((unint64_t)v56);
      sub_18A610418();
      sub_18A6A81EC();
      v65 = sub_18A6A5E28((uint64_t)v56, v64, &a17);
      sub_18A6A8390(v65);
      sub_18A6A5740();
      v66 = sub_18A5F3A8C();
      *(_WORD *)(v59 + 22) = 2080;
      v67 = sub_18A64A4A0(v66, sel_accountStatus);
      v68 = (id)CKStringFromAccountStatus((unint64_t)v67);
      sub_18A610418();
      sub_18A6A81EC();
      *(_QWORD *)(v28 + 328) = sub_18A6A5E28((uint64_t)v56, v69, &a17);
      sub_18A6A5740();
      swift_bridgeObjectRelease();

      sub_18A6A61B8(&dword_18A5C5000, v87, v89, "%s account status changed from (%s) to (%s)", (uint8_t *)v59);
      sub_18A6A75BC();
      sub_18A5F392C();
    }
    sub_18A5F4804();

  }
  v70 = v32;
  sub_18A689AF4((uint64_t)v32);
  if ((_DWORD)v43)
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v71 = sub_18A6A58AC();
    if (sub_18A6A55D0(v71))
    {
      v72 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A76FC(4.8149e-34);
      a17 = v73;
      sub_18A5F3E6C();
      sub_18A699D34();
      v75 = v74;
      sub_18A5F37AC();
      v77 = sub_18A6A57C4(v75, v76, &a17);
      sub_18A6A6D78(v77);
      sub_18A6A5860();
      sub_18A643358();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v32, (os_log_type_t)&selRef_CKStringForWellKnownCKErrors, "%s scheduling sync after receiving updated account info needed to sync", v72);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    v81 = *(_QWORD *)(v28 + 400);
    v82 = sub_18A5F40B4();
    sub_18A6239F8(v81, v83, v84, v82);
    v85 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v28 + 456) = v85;
    *v85 = v28;
    v85[1] = sub_18A68ABE0;
    v86 = sub_18A6A5E14(*(_QWORD *)(v28 + 400));
    return sub_18A6A6278(v86);
  }
  else
  {

    if (__sTestOverridesAvailable)
    {
      v78 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v79 = v78;
      if (qword_1EDF6AAF0 != -1)
        v78 = (id)swift_once();
      sub_18A5F3888((uint64_t)v78, sel_postNotificationName_object_);

    }
    sub_18A6A7BD4();
    return sub_18A6A5644(*(uint64_t (**)(void))(v28 + 8));
  }
}

uint64_t sub_18A68ABE0()
{
  uint64_t v0;

  sub_18A623A14();
  v0 = sub_18A6239A4();
  sub_18A6A6C74(v0, &qword_1EDF6A680);
  sub_18A623CE4();
  return sub_18A5F3A94();
}

uint64_t sub_18A68AC24()
{
  uint64_t v0;
  id v1;
  void *v2;

  if (__sTestOverridesAvailable)
  {
    v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v2 = v1;
    if (qword_1EDF6AAF0 != -1)
      v1 = (id)swift_once();
    sub_18A5F3888((uint64_t)v1, sel_postNotificationName_object_);

  }
  sub_18A6A7BD4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A68ACC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A61A8B8();
  sub_18A5F3FEC();
  v0[15] = v0 + 47;
  v0[10] = v0;
  v0[11] = sub_18A68A39C;
  v1 = sub_18A6A5ED0();
  v0[18] = MEMORY[0x1E0C809B0];
  v0[19] = 0x40000000;
  v2 = sub_18A6A69B4(v1, (uint64_t)sub_18A68AF98);
  sub_18A6A6614(v2, sel_accountInfoWithCompletionHandler_);
  return swift_continuation_await();
}

uint64_t sub_18A68AD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;

  sub_18A6A567C();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  sub_18A61A8B8();
  sub_18A634FA4();
  sub_18A5F42D4();
  sub_18A634FA4();
  sub_18A5F42D4();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.error.getter();
  if (sub_18A6A5810(v29))
  {
    v31 = sub_18A5F3830();
    v32 = (_QWORD *)sub_18A5F3830();
    a14 = sub_18A5F3830();
    *(_DWORD *)v31 = 136315394;
    sub_18A5F3E6C();
    sub_18A699D34();
    v34 = v33;
    sub_18A5F37AC();
    *(_QWORD *)(v26 + 368) = sub_18A6A5868(v34, v35, &a14);
    sub_18A6A68EC();
    sub_18A5F394C();
    sub_18A5F4804();
    *(_WORD *)(v31 + 12) = 2112;
    sub_18A6A6BA8();
    v36 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v26 + 296) = v36;
    sub_18A6A5740();
    *v32 = v36;
    sub_18A6A60BC();
    sub_18A6A60BC();
    sub_18A6A5608(&dword_18A5C5000, v29, v30, "%s error checking account info: %@", (uint8_t *)v31);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A5978();
  sub_18A6A54D0();
  sub_18A6A5978();
  sub_18A6A5978();

  if (__sTestOverridesAvailable)
  {
    v37 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v38 = v37;
    if (qword_1EDF6AAF0 != -1)
      v37 = (id)swift_once();
    sub_18A5F3888((uint64_t)v37, sel_postNotificationName_object_);

  }
  sub_18A6A7BD4();
  return sub_18A6A56B4(*(uint64_t (**)(void))(v26 + 8));
}

void sub_18A68AF98(uint64_t a1, void *a2, void *a3)
{
  sub_18A68C250(a1, a2, a3, (void (*)(_QWORD, void *))sub_18A6A54B0);
}

uint64_t sub_18A68AFA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 456) = v0;
  sub_18A5F101C(&qword_1EDF6A680);
  *(_QWORD *)(v1 + 464) = sub_18A5F3CBC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A68B014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  os_log_type_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_18A6A6A8C();
  a23 = v26;
  a24 = v27;
  a22 = v25;
  a13 = *MEMORY[0x1E0C80C00];
  if (qword_1EDF6A540 != -1)
    swift_once();
  v28 = sub_18A5F3BA0();
  v29 = sub_18A60990C(v28, (uint64_t)qword_1EDF6A630);
  v25[59] = v29;
  sub_18A5F3A58();
  sub_18A6A5910();
  v30 = sub_18A6A58AC();
  if (sub_18A6A5A4C(v30))
  {
    v31 = (uint8_t *)sub_18A5F3830();
    a12 = sub_18A5F3830();
    *(_DWORD *)v31 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v33 = v32;
    sub_18A5F37AC();
    v35 = sub_18A6A5844(v33, v34, &a12);
    sub_18A6A6D78(v35);
    sub_18A6A5D8C();
    sub_18A5F4804();
    sub_18A5F38AC();
    sub_18A63E290(&dword_18A5C5000, v29, v24, "%s checking if the user record ID signed in has changed", v31);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A5F4804();
  v36 = *(_QWORD *)(v25[57] + 128);
  v25[60] = v36;
  v37 = objc_msgSend(*(id *)(v36 + 16), sel_lastKnownUserRecordID);
  if (v37)
  {
    objc_msgSend(v37, sel_copy);
    sub_18A6A817C();
    _bridgeAnyObjectToAny(_:)();
    sub_18A6A7A14();
    v38 = (_OWORD *)sub_18A6A6F44();
    v40 = sub_18A612E68(v38, v39);
    sub_18A5F3B04((uint64_t)v40, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A612F00();
    v41 = v25[44];
  }
  else
  {
    v41 = 0;
  }
  v25[61] = v41;
  v25[7] = v25 + 42;
  v25[2] = v25;
  v25[3] = sub_18A68B298;
  v42 = sub_18A6A5ED0();
  v25[19] = MEMORY[0x1E0C809B0];
  v25[20] = 0x40000000;
  v43 = sub_18A6A69B4(v42, (uint64_t)sub_18A68AF98);
  sub_18A6A6614(v43, sel_fetchUserRecordIDWithCompletionHandler_);
  sub_18A6A61C0();
  return swift_continuation_await();
}

uint64_t sub_18A68B298()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 496) = v1;
  return sub_18A5F3AE0();
}

void sub_18A68B320()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  char v20;
  char v21;
  id v22;
  id v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  void *v27;
  NSObject *v28;
  unsigned int v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned __int8 v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  const void *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 336);
  v2 = *(id *)(v0 + 488);
  sub_18A5F3A58();
  v3 = v1;
  v4 = v2;
  v5 = v3;
  sub_18A6A72B0();
  v6 = sub_18A6A58AC();
  if (sub_18A6A7D0C(v6))
  {
    v53 = *(_QWORD *)(v0 + 488);
    v7 = (uint8_t *)sub_18A5F3830();
    v54 = (_QWORD *)sub_18A5F3830();
    v55[0] = sub_18A5F3830();
    *(_DWORD *)v7 = 136315650;
    sub_18A5F3E6C();
    sub_18A699D34();
    v9 = v8;
    sub_18A5F37AC();
    *(_QWORD *)(v0 + 416) = sub_18A6A5948(v9, v10, v55);
    sub_18A6A6058();
    sub_18A5F4804();
    sub_18A610384();
    sub_18A6A7454(2080);
    v12 = sub_18A5F3AD8(v11, sel_recordName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A5F4598();
    *(_QWORD *)(v0 + 424) = sub_18A6A5844((uint64_t)(v7 + 4), v13, v55);
    sub_18A6A5740();

    sub_18A5F38AC();
    sub_18A6A75A4();
    if (v53)
    {
      *(_QWORD *)(v0 + 440) = v4;
      v14 = v4;
    }
    else
    {
      *(_QWORD *)(v0 + 432) = 0;
    }
    sub_18A6A5860();
    *v54 = *(_QWORD *)(v0 + 488);

    sub_18A6A61B8(&dword_18A5C5000, v3, v6, "%s received a user record ID: %s. Existing lastKnownUserRecordID: %@", v7);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  v15 = sub_18A5F4804();
  v16 = v2;
  if (__sTestOverridesAvailable)
  {
    v17 = sub_18A5F3888(v15, sel_useMockNextKnownUserRecordID);
    v16 = v2;
    if ((_DWORD)v17)
    {
      v16 = sub_18A5F3888((uint64_t)v17, sel_mockNextKnownUserRecordID);

    }
  }

  *(_QWORD *)(v0 + 504) = v16;
  v19 = *(void **)(v0 + 488);
  if (!v19)
  {
    if (!v16)
    {
      v22 = 0;
LABEL_33:
      v52 = (void *)sub_18A6A7C1C();
      sub_18A6A5E58(v52, sel_setDidPerformInitialUserRecordIDFetch_);

      sub_18A663AB0();
      sub_18A6A61DC(*(uint64_t (**)(void))(v0 + 8));
      return;
    }
    goto LABEL_15;
  }
  if (v16)
  {
    sub_18A5F3B04(v18, (unint64_t *)&unk_1EDF6A8F0);
    v21 = v20;
    v22 = v19;
    v23 = v16;
    sub_18A629254();
    static NSObject.== infix(_:_:)();
    sub_18A66CD70();

    if ((v21 & 1) != 0)
      goto LABEL_33;
LABEL_15:
    sub_18A5F3D50(v18, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    sub_18A6A7A14();
    v24 = (_OWORD *)sub_18A6A68D0();
    v26 = sub_18A612E68(v24, v25);
    sub_18A5F3B04((uint64_t)v26, (unint64_t *)&unk_1EDF6A8F0);
    sub_18A612F00();
    v27 = *(void **)(v0 + 344);
    goto LABEL_17;
  }
  v27 = 0;
LABEL_17:
  *(_QWORD *)(v0 + 512) = v27;
  v28 = *(NSObject **)(v0 + 456);
  v29 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 480) + 16), sel_didPerformInitialUserRecordIDFetch);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v30 = sub_18A6A584C();
  v31 = sub_18A6A7094(v30);
  if (v29)
  {
    if (v31)
    {
      v32 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A7CCC(4.8149e-34);
      sub_18A5F3E6C();
      sub_18A699D34();
      v34 = v33;
      sub_18A5F37AC();
      *(_QWORD *)(v0 + 376) = sub_18A6A5844(v34, v35, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A5F4804();
      sub_18A5F38AC();
      sub_18A63E290(&dword_18A5C5000, v28, v30, "%s user record ID change detected, resetting sync engine state to prevent any pending syncs for a different user", v32);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    objc_msgSend((id)sub_18A6A7C1C(), sel_reset);
  }
  else
  {
    if (v31)
    {
      v36 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A7CCC(4.8149e-34);
      sub_18A5F3E6C();
      sub_18A699D34();
      v38 = v37;
      sub_18A5F37AC();
      v40 = sub_18A6A5E28(v38, v39, v55);
      sub_18A6A6EDC(v40, (_QWORD *)(v0 + 368));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A5F4804();
      sub_18A5F3A8C();
      sub_18A63E290(&dword_18A5C5000, v28, v30, "%s initial user record ID fetched", v36);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
  }
  v41 = *(void **)(*(_QWORD *)(v0 + 480) + 16);
  sub_18A6A5E58(v41, sel_setDidPerformInitialUserRecordIDFetch_);
  sub_18A66CCF8(v41, sel_setLastKnownUserRecordID_);
  if (v19)
  {
    if (v27)
      v42 = 2;
    else
      v42 = 1;
    v43 = *(void **)(v0 + 488);
    v44 = v43;
    v45 = v27;
    goto LABEL_31;
  }
  if (v27)
  {
    v45 = 0;
    v42 = 0;
    v43 = *(void **)(v0 + 488);
    v44 = v27;
LABEL_31:
    *(_BYTE *)(v0 + 145) = v42;
    *(_QWORD *)(v0 + 528) = v45;
    *(_QWORD *)(v0 + 520) = v44;
    *(_QWORD *)(v0 + 80) = v44;
    *(_QWORD *)(v0 + 88) = v45;
    *(_QWORD *)(v0 + 96) = v42;
    sub_18A6A83A8();
    *(_BYTE *)(v0 + 144) = 16;
    v46 = v27;
    v47 = v43;
    v48 = (void *)sub_18A62FE8C();
    sub_18A627C68(v48, v49, v42);
    v50 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 536) = v50;
    *v50 = v0;
    v50[1] = sub_18A68BA14;
    sub_18A6A5854();
    sub_18A6A6938();
    sub_18A69AF2C(v51);
    return;
  }
  sub_18A6A5E60();
  sub_18A6A6938();
}

uint64_t sub_18A68BA14()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A68BA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  _QWORD *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v23;
  a11 = *MEMORY[0x1E0C80C00];
  sub_18A5F3A58();
  Logger.logObject.getter();
  v27 = sub_18A6A58AC();
  if (sub_18A6A55D0(v27))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A815C();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v29 = sub_18A5F37AC();
    v23[45] = sub_18A6A5704(v29, v30, &a10);
    sub_18A6A578C();
    sub_18A5F394C();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v22, v24, "%s scheduling sync after receiving updated userRecordID", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  v31 = v23[58];
  v32 = sub_18A5F40B4();
  sub_18A6239F8(v31, v33, v34, v32);
  v35 = (_QWORD *)swift_task_alloc();
  v23[68] = v35;
  *v35 = v23;
  v35[1] = sub_18A68BBE8;
  sub_18A6A5E14(v23[58]);
  sub_18A663918();
  return sub_18A694D38(v36);
}

uint64_t sub_18A68BBE8()
{
  uint64_t v0;

  sub_18A623A14();
  v0 = sub_18A6239A4();
  sub_18A6A7278(v0, &qword_1EDF6A680);
  sub_18A6A5670();
  return sub_18A6A54D8();
}

uint64_t sub_18A68BC60()
{
  uint64_t v0;
  void *v1;
  void *v2;

  sub_18A6A5778();
  v1 = *(void **)(v0 + 512);
  v2 = *(void **)(v0 + 488);
  sub_18A6A787C();

  sub_18A6A787C();
  sub_18A663AB0();
  return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A68BCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  id v43;
  unsigned int v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  _QWORD *v62;
  const void *v63;
  _QWORD *v64;

  sub_18A6A633C();
  a27 = v30;
  a28 = v31;
  a26 = v29;
  a17 = *MEMORY[0x1E0C80C00];
  sub_18A61A8B8();
  sub_18A634FA4();
  sub_18A5F42D4();
  sub_18A634FA4();
  sub_18A5F42D4();
  Logger.logObject.getter();
  v32 = sub_18A6A584C();
  if (sub_18A6A6A68(v28))
  {
    v33 = sub_18A5F3830();
    v64 = (_QWORD *)sub_18A5F3830();
    a16 = sub_18A5F3830();
    *(_DWORD *)v33 = 136315394;
    sub_18A5F3E6C();
    sub_18A699D34();
    v35 = v34;
    sub_18A5F37AC();
    *(_QWORD *)(v29 + 400) = sub_18A6A57C4(v35, v36, &a16);
    sub_18A6A6F14();
    sub_18A5F4804();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2112;
    sub_18A5F42D4();
    v37 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v29 + 408) = v37;
    sub_18A6A5740();
    *v64 = v37;
    sub_18A5F3FEC();
    sub_18A5F3FEC();
    sub_18A6A5608(&dword_18A5C5000, v28, v32, "%s error updating user record ID: %@", (uint8_t *)v33);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();
  sub_18A6A5978();
  sub_18A6A5978();

  v38 = *(void **)(v29 + 496);
  *(_QWORD *)(v29 + 328) = v38;
  v39 = v38;
  sub_18A5F101C(&qword_1EDF6A9D8);
  sub_18A5F42A0();
  v41 = v40;
  sub_18A62FE04();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v42 = *(void **)(v29 + 320);
    *(_QWORD *)(v29 + 392) = v42;
    sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
    v43 = v42;
    sub_18A629254();
    _BridgedStoredNSError.code.getter();
    sub_18A5F3FEC();

  }
  else
  {
    sub_18A5F3FEC();
  }
  *(_QWORD *)(v29 + 504) = 0;
  if (*(_QWORD *)(v29 + 488))
  {
    *(_QWORD *)(v29 + 512) = 0;
    v44 = objc_msgSend(*(id *)(*(_QWORD *)(v29 + 480) + 16), sel_didPerformInitialUserRecordIDFetch);
    sub_18A5F3A58();
    Logger.logObject.getter();
    v45 = sub_18A6A584C();
    v46 = sub_18A6A7094(v45);
    if (v44)
    {
      if (v46)
      {
        v47 = (uint8_t *)sub_18A5F3830();
        a16 = sub_18A5F3830();
        *(_DWORD *)v47 = 136315138;
        sub_18A5F3E6C();
        sub_18A699D34();
        v49 = v48;
        sub_18A5F37AC();
        v51 = sub_18A6A57C4(v49, v50, &a16);
        sub_18A6A6EDC(v51, (_QWORD *)(v29 + 376));
        sub_18A6A5860();
        sub_18A5F4804();
        sub_18A643358();
        sub_18A63E290(&dword_18A5C5000, v41, v45, "%s user record ID change detected, resetting sync engine state to prevent any pending syncs for a different user", v47);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

      sub_18A5F4804();
      objc_msgSend((id)sub_18A6A7C1C(), sel_reset);
    }
    else
    {
      if (v46)
      {
        v54 = (uint8_t *)sub_18A5F3830();
        a16 = sub_18A5F3830();
        *(_DWORD *)v54 = 136315138;
        sub_18A5F3E6C();
        sub_18A699D34();
        v56 = v55;
        sub_18A5F37AC();
        v58 = sub_18A6A5E28(v56, v57, &a16);
        sub_18A6A770C(v58);
        sub_18A6A5D8C();
        sub_18A5F4804();
        sub_18A5F3A8C();
        sub_18A63E290(&dword_18A5C5000, v41, v45, "%s initial user record ID fetched", v54);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

      sub_18A5F4804();
    }
    v59 = *(void **)(*(_QWORD *)(v29 + 480) + 16);
    sub_18A6A5E58(v59, sel_setDidPerformInitialUserRecordIDFetch_);
    objc_msgSend(v59, sel_setLastKnownUserRecordID_, 0);
    v60 = *(void **)(v29 + 488);
    *(_QWORD *)(v29 + 528) = 0;
    *(_QWORD *)(v29 + 520) = v60;
    *(_QWORD *)(v29 + 80) = v60;
    *(_OWORD *)(v29 + 88) = xmmword_18A83B980;
    sub_18A6A83A8();
    *(_WORD *)(v29 + 144) = 272;
    v61 = v60;
    sub_18A627C68(v60, 0, 1u);
    v62 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v29 + 536) = v62;
    *v62 = v29;
    v62[1] = sub_18A68BA14;
    sub_18A6A5854();
    sub_18A6A762C();
    return sub_18A69AF2C(v63);
  }
  else
  {
    v52 = (void *)sub_18A6A7C1C();
    sub_18A6A5E58(v52, sel_setDidPerformInitialUserRecordIDFetch_);
    swift_task_dealloc();
    return sub_18A6A5644(*(uint64_t (**)(void))(v29 + 8));
  }
}

void sub_18A68C250(uint64_t a1, void *a2, void *a3, void (*a4)(_QWORD, void *))
{
  if (a3)
  {
    sub_18A6A80DC((uint64_t)a3);
    sub_18A5F45D8();
  }
  else if (a2)
  {
    a4(*(_QWORD *)(a1 + 32), a2);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_18A68C2A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A68C2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(void);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = v22[6];
  sub_18A5F46AC();
  v27 = *(void **)(v26 + 304);
  if (v27 && objc_msgSend(v27, sel_accountStatus) == (id)1)
  {
    v28 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v28);
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v30 = sub_18A5F3BA0();
    v31 = sub_18A60990C(v30, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5CC0();
    v32 = sub_18A6A584C();
    if (sub_18A6A562C(v32))
    {
      v33 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A7A08();
      *(_DWORD *)v33 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v35 = v34;
      sub_18A5F37AC();
      v37 = sub_18A6A5948(v35, v36, &a11);
      sub_18A6A6EDC(v37, v22 + 5);
      sub_18A6A5D8C();
      sub_18A5F4804();
      sub_18A610384();
      sub_18A63E290(&dword_18A5C5000, v31, v23, "%s will fetch account status because it's not available", v33);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    v38 = (_QWORD *)swift_task_alloc();
    v22[7] = v38;
    sub_18A6A7718(v38, (uint64_t)sub_18A68C464);
    return sub_18A6A63C8();
  }
}

uint64_t sub_18A68C464()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A68C498()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 48) + 304);
  if (v1)
    v2 = objc_msgSend(v1, sel_accountStatus);
  else
    v2 = 0;
  if (objc_msgSend((id)objc_opt_self(), sel_errorForAccountStatus_, v2))
    swift_willThrow();
  return sub_18A623874(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A68C518(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 312) = a1;
  return sub_18A6A5E98();
}

uint64_t sub_18A68C524(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 33) = a2;
  *(_BYTE *)(v3 + 32) = a1;
  return sub_18A5F4434();
}

uint64_t sub_18A68C540()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    sub_18A68C610();
    if ((*(_BYTE *)(v0 + 33) & 1) != 0)
      sub_18A6925C4();
    return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v2;
    sub_18A6A6E30(v2, (uint64_t)sub_18A68C5A8);
    return sub_18A6A6014();
  }
}

uint64_t sub_18A68C5A8()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A68C5DC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 33) == 1)
    sub_18A6925C4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A68C610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  sub_18A612EB8();
  v2 = v0;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v3);
  sub_18A6A7A4C();
  if (!*(_QWORD *)(v0 + 312))
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v4 = sub_18A5F3BA0();
    sub_18A60990C(v4, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (sub_18A6A5810(v5))
    {
      v7 = (uint8_t *)sub_18A5F3830();
      v19 = sub_18A5F3830();
      *(_DWORD *)v7 = 136315138;
      sub_18A64A54C();
      sub_18A6A5BBC();
      v9 = v8;
      sub_18A5F3AA0();
      v11 = sub_18A6A5844(v9, v10, &v19);
      sub_18A6A7C28(v11);
      sub_18A6A578C();
      sub_18A5F38AC();
      sub_18A6A54D0();
      sub_18A63E290(&dword_18A5C5000, v5, v6, "%s coalescing state update event", v7);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A6A54D0();

    v12 = sub_18A623B70();
    sub_18A6239F8(v1, v13, v14, v12);
    sub_18A62F924(&qword_1EDF6A4B8, (uint64_t (*)(uint64_t))type metadata accessor for SyncEngine, (uint64_t)&protocol conformance descriptor for SyncEngine);
    v16 = v15;
    v17 = (_QWORD *)sub_18A5F37B4();
    v17[2] = v2;
    v17[3] = v16;
    v17[4] = v2;
    sub_18A5F3A58();
    sub_18A670ABC(v1, (uint64_t)&unk_1EDF6C450, (uint64_t)v17);
    sub_18A68C518(v18);
  }
  sub_18A5F37E8();
}

uint64_t sub_18A68C7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A68C850()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  ContinuousClock.init()();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_18A68C8AC;
  sub_18A6A5F64();
  return sub_18A6A6008(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A68C8AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  sub_18A6A5778();
  sub_18A6A78A4();
  v3 = *v1;
  sub_18A5F416C(v4);
  v5 = *(_QWORD *)(v2 + 32);
  if (v0)
  {
    sub_18A6A5978();
    sub_18A6A5DF0(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    return sub_18A6A5560();
  }
  else
  {
    sub_18A6A5DF0(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 56) = v7;
    *v7 = v3;
    v7[1] = sub_18A689DAC;
    return sub_18A6A58BC();
  }
}

uint64_t sub_18A68C93C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  sub_18A6A6E30(v1, (uint64_t)sub_18A689DAC);
  return sub_18A6A6014();
}

uint64_t sub_18A68C974()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A68C988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  const void *v12;

  sub_18A6A5778();
  v1 = *(_QWORD *)(v0 + 168);
  v2 = sub_18A68C518(0);
  v3 = *(void **)(*(_QWORD *)(v1 + 128) + 16);
  if (*(_QWORD *)(v1 + 320) >= (uint64_t)sub_18A5F3D50(v2, sel_changeCount))
    return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
  *(_OWORD *)(v0 + 136) = xmmword_18A839950;
  *(_QWORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  v4 = sub_18A5F37B4();
  *(_QWORD *)(v0 + 176) = v4;
  *(_QWORD *)(v4 + 16) = v0 + 136;
  *(_QWORD *)(v4 + 24) = v0 + 152;
  v5 = sub_18A5F37B4();
  *(_QWORD *)(v0 + 88) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v5 + 16) = sub_18A6A4290;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v0 + 120) = sub_18A6A429C;
  *(_QWORD *)(v0 + 128) = v5;
  *(_QWORD *)(v0 + 96) = 1107296256;
  *(_QWORD *)(v0 + 104) = sub_18A68CC5C;
  *(_QWORD *)(v0 + 112) = &unk_1E1F5F268;
  v6 = _Block_copy((const void *)(v0 + 88));
  sub_18A634FA4();
  sub_18A6A6660();
  objc_msgSend(v3, sel_getDataRepresentation_, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = sub_18A5F438C();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else if ((*(_BYTE *)(v0 + 160) & 1) == 0)
  {
    v9 = *(_QWORD *)(v0 + 152);
    if (*(_QWORD *)(v1 + 320) < v9)
    {
      *(_QWORD *)(v1 + 320) = v9;
      result = *(_QWORD *)(v0 + 136);
      v10 = *(_QWORD *)(v0 + 144);
      *(_QWORD *)(v0 + 184) = result;
      *(_QWORD *)(v0 + 192) = v10;
      if (v10 >> 60 != 15)
      {
        *(_QWORD *)(v0 + 16) = result;
        *(_QWORD *)(v0 + 24) = v10;
        *(_OWORD *)(v0 + 32) = 0u;
        *(_OWORD *)(v0 + 48) = 0u;
        *(_OWORD *)(v0 + 64) = 0u;
        *(_BYTE *)(v0 + 80) = 0;
        sub_18A612FA0(result, v10);
        v11 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 200) = v11;
        *v11 = v0;
        v11[1] = sub_18A68CB78;
        v12 = (const void *)sub_18A6A5854();
        return sub_18A6A5FFC(v12);
      }
      goto LABEL_11;
    }
    sub_18A60FC24(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    sub_18A5F37AC();
    return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_18A68CB78()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

void sub_18A68CBB0()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  unint64_t v3;

  if (*(_QWORD *)(v0 + 144) >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v1 = (uint8_t *)Data.count.getter();
    sub_18A698E88(v1);
    v2 = sub_18A629170();
    sub_18A60FC24(v2, v3);
    sub_18A60FC24(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    sub_18A5F37AC();
    sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_18A68CC14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  v7 = *a4;
  v8 = a4[1];
  *a4 = a1;
  a4[1] = a2;
  sub_18A612FA0(a1, a2);
  result = sub_18A60FC24(v7, v8);
  *(_QWORD *)a5 = a3;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

uint64_t sub_18A68CC5C(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v4)(uint64_t, unint64_t, uint64_t);
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(void (**)(uint64_t, unint64_t, uint64_t))(a1 + 32);
  v5 = a2;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v4(v6, v8, a3);
  return sub_18A60FBA4(v6, v8);
}

uint64_t SyncEngine.useOpportunisticPushTopic.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 352);
}

void sub_18A68CCCC(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_18A68CD28((uint64_t)v1);
}

void sub_18A68CCF8()
{
  uint64_t v0;
  id v1;

  sub_18A5F46AC();
  v1 = *(id *)(v0 + 360);
  sub_18A5F42C8();
}

void sub_18A68CD28(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  sub_18A5F40A4();
  v3 = *(void **)(v1 + 360);
  *(_QWORD *)(v1 + 360) = a1;

  sub_18A5F42C8();
}

void sub_18A68CD60()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

uint64_t sub_18A68CD94(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 384) = a1;
  return sub_18A6A5E98();
}

void sub_18A68CDA0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 376))
  {
    sub_18A68CDDC();
    sub_18A6A8068();
  }
  swift_bridgeObjectRetain();
  sub_18A61A770();
  sub_18A5F379C();
}

void sub_18A68CDDC()
{
  uint64_t v0;
  const __CFString *v1;

  _StringGuts.grow(_:)(35);
  sub_18A628F58();
  v1 = (id)CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v0 + 136), sel_databaseScope, 0xD000000000000021, 0x800000018A840030));
  sub_18A610418();
  sub_18A6292D4();
  sub_18A64A280();
  sub_18A5F460C();
  sub_18A60A0E0();
}

void sub_18A68CE64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t IsDaemon;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t inited;
  int64_t v14;
  int64_t v15;
  char **v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD aBlock[6];

  v1 = v0;
  sub_18A68FCB8();
  if ((v2 & 1) == 0)
  {
    sub_18A68CD28(0);
    return;
  }
  v3 = *(NSObject **)(v0 + 336);
  v4 = *(_QWORD *)(v1 + 344);
  sub_18A5F3D48();
  IsDaemon = CKCurrentProcessIsDaemon();
  v6 = v4;
  if ((_DWORD)IsDaemon)
  {
    if (!v4)
    {
      if (qword_1EDF6A540 != -1)
        swift_once();
      v7 = sub_18A5F3BA0();
      sub_18A5F4224(v7, (uint64_t)qword_1EDF6A630);
      sub_18A6A68E4();
      if (sub_18A6A5E30(v3))
      {
        v8 = (_WORD *)sub_18A5F3830();
        sub_18A6A79BC(v8);
        sub_18A6A5BA8(&dword_18A5C5000, v9, v10, "BUG IN CLIENT OF CLOUDKIT: When using CKSyncEngine in a daemon, you must set apsMachServiceName in your configuration. Otherwise, your process won't be launched for push notifications.");
        sub_18A5F392C();
      }

      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v6 = v11;
      IsDaemon = swift_bridgeObjectRetain();
    }
  }
  else if (!v4)
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)CKNotificationListener), sel_init);
    goto LABEL_12;
  }
  sub_18A5F3B04(IsDaemon, (unint64_t *)&unk_1EDF6A460);
  sub_18A5F3D48();
  v12 = sub_18A68D2D0((uint64_t)v3, v6);
  objc_msgSend(v12, sel_setUseOpportunisticPushTopics_, *(unsigned __int8 *)(v1 + 352));
LABEL_12:
  v50 = v12;
  sub_18A68CD28((uint64_t)v12);
  sub_18A5F101C(&qword_1EDF6A478);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18A83C9D0;
  sub_18A68CDDC();
  v15 = v14;
  v17 = v16;
  *(_QWORD *)(inited + 32) = v14;
  *(_QWORD *)(inited + 40) = v16;
  v18 = *(_QWORD *)(v1 + 368);
  v19 = *(_QWORD *)(v1 + 376);
  *(_QWORD *)(inited + 48) = v18;
  *(_QWORD *)(inited + 56) = v19;
  sub_18A629140();
  CKSyncEngine.State.existingDatabaseSubscriptionID.getter();
  v21 = v20;
  v49 = v22;
  *(_QWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 72) = v20;
  v23 = sub_18A6542A4();
  sub_18A6A79A4(v23, v24, v25, MEMORY[0x1E0DEE9D8]);
  v27 = v26;
  v29 = *(_QWORD *)(v26 + 16);
  v28 = *(_QWORD *)(v26 + 24);
  v30 = v29 + 1;
  if (v29 < v28 >> 1)
    goto LABEL_13;
LABEL_45:
  sub_18A6A60CC(v28 > 1, v30);
  v27 = v46;
LABEL_13:
  *(_QWORD *)(v27 + 16) = v30;
  v31 = v27 + 16 * v29;
  *(_QWORD *)(v31 + 32) = v15;
  *(_QWORD *)(v31 + 40) = v17;
  if (v19)
  {
    v32 = *(_QWORD *)(v27 + 24);
    sub_18A629140();
    if (v30 >= v32 >> 1)
    {
      sub_18A6A60CC(v32 > 1, v29 + 2);
      v27 = v47;
    }
    *(_QWORD *)(v27 + 16) = v29 + 2;
    v33 = v27 + 16 * v30;
    *(_QWORD *)(v33 + 32) = v18;
    *(_QWORD *)(v33 + 40) = v19;
  }
  if (v21)
  {
    v34 = *(_QWORD *)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v30 = v34 + 1;
    sub_18A5F3898();
    if (v34 >= v29 >> 1)
    {
      sub_18A6A60CC(v29 > 1, v34 + 1);
      v27 = v48;
    }
    *(_QWORD *)(v27 + 16) = v30;
    v35 = v27 + 16 * v34;
    *(_QWORD *)(v35 + 32) = v49;
    *(_QWORD *)(v35 + 40) = v21;
  }
  sub_18A5F438C();
  sub_18A66847C(v27);
  v21 = v36;
  v37 = 0;
  v19 = v36 + 56;
  v38 = 1 << *(_BYTE *)(v36 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v18 = v39 & *(_QWORD *)(v36 + 56);
  v15 = (unint64_t)(v38 + 63) >> 6;
  v17 = &selRef_initWithClockValuesInIndexSet_withAtomState_forSiteIdentifier_;
  if (v18)
  {
LABEL_24:
    sub_18A6A76C0();
    goto LABEL_39;
  }
  while (1)
  {
    v28 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((uint64_t)v28 >= v15)
      goto LABEL_41;
    ++v37;
    if (!*(_QWORD *)(v19 + 8 * v28))
    {
      v37 = v28 + 1;
      if ((uint64_t)(v28 + 1) >= v15)
        goto LABEL_41;
      if (!*(_QWORD *)(v19 + 8 * v37))
      {
        v37 = v28 + 2;
        if ((uint64_t)(v28 + 2) >= v15)
          goto LABEL_41;
        if (!*(_QWORD *)(v19 + 8 * v37))
          break;
      }
    }
LABEL_38:
    sub_18A6A7524();
LABEL_39:
    v41 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v40);
    v42 = *v41;
    v43 = v41[1];
    sub_18A6291A0();
    v30 = MEMORY[0x18D76C7CC](v42, v43);
    sub_18A5F3A8C();
    v29 = *(_QWORD *)(v1 + 136);
    v44 = sub_18A5F37B4();
    sub_18A6A5DE4();
    aBlock[4] = sub_18A6A4234;
    aBlock[5] = v44;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_18A61AF98;
    aBlock[3] = &unk_1E1F55A20;
    v45 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v50, sel_registerForSubscriptionWithID_inDatabase_handler_, v30, v29, v45);
    _Block_release(v45);

    if (v18)
      goto LABEL_24;
  }
  v28 += 3;
  if ((uint64_t)v28 < v15)
  {
    if (!*(_QWORD *)(v19 + 8 * v28))
    {
      while (1)
      {
        v37 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_44;
        if (v37 >= v15)
          goto LABEL_41;
        ++v28;
        if (*(_QWORD *)(v19 + 8 * v37))
          goto LABEL_38;
      }
    }
    v37 = v28;
    goto LABEL_38;
  }
LABEL_41:

  sub_18A5F37AC();
  sub_18A628F58();
}

id sub_18A68D2D0(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)MEMORY[0x18D76C7CC](a1, a2);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

  return v6;
}

void sub_18A68D340(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = Strong;
    objc_opt_self();
    v7 = swift_dynamicCastObjCClass();
    if (v7)
    {
      v8 = v7;
      v9 = type metadata accessor for TaskPriority();
      sub_18A5F1010((uint64_t)v4, 1, 1, v9);
      v10 = (_QWORD *)swift_allocObject();
      v10[2] = 0;
      v10[3] = 0;
      v10[4] = v6;
      v10[5] = v8;
      v11 = a1;
      sub_18A670ABC((uint64_t)v4, (uint64_t)&unk_1EDF6C440, (uint64_t)v10);
    }
    else
    {
      if (qword_1EDF6A540 != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      sub_18A60990C(v12, (uint64_t)qword_1EDF6A630);
      v13 = a1;
      swift_retain_n();
      v14 = v13;
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v15, v16))
      {
        swift_release_n();

        return;
      }
      v17 = swift_slowAlloc();
      v18 = (_QWORD *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v27 = v25;
      *(_DWORD *)v17 = 136315394;
      swift_retain();
      sub_18A699D34();
      v20 = v19;
      v22 = v21;
      swift_release();
      v26 = sub_18A609924(v20, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v17 + 12) = 2112;
      v26 = (uint64_t)v14;
      v23 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v18 = v14;

      _os_log_impl(&dword_18A5C5000, v15, v16, "%s received notification in sync engine that is not a database notification: %@", (uint8_t *)v17, 0x16u);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      swift_arrayDestroy();
      MEMORY[0x18D76E86C](v18, -1, -1);
      v24 = v25;
      swift_arrayDestroy();
      MEMORY[0x18D76E86C](v24, -1, -1);
      MEMORY[0x18D76E86C](v17, -1, -1);

    }
    swift_release();
  }
}

uint64_t sub_18A68D678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_18A6A545C;
  return sub_18A68D6CC(a5);
}

uint64_t sub_18A68D6CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[22] = a1;
  v2[23] = v1;
  sub_18A5F101C(&qword_1EDF6A680);
  v2[24] = sub_18A5F3CBC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A68D73C()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  id v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  Swift::OpaquePointer v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = sub_18A6A71B4();
  *(_QWORD *)(v0 + 200) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(*(id *)(v0 + 176), sel_recordZoneID);
    *(_QWORD *)(v0 + 208) = v4;
    if (qword_1EDF6A540 != -1)
      swift_once();
    v5 = sub_18A5F3BA0();
    v6 = sub_18A60990C(v5, (uint64_t)qword_1EDF6A630);
    *(_QWORD *)(v0 + 216) = v6;
    sub_18A5F3A58();
    v7 = v4;
    v8 = sub_18A6A5910();
    v9 = static os_log_type_t.debug.getter();
    v53 = v3;
    if (os_log_type_enabled(v8, v9))
    {
      v10 = sub_18A5F3830();
      v52 = (_QWORD *)sub_18A5F3830();
      v54._rawValue = (void *)sub_18A5F3830();
      *(_DWORD *)v10 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v12 = v11;
      sub_18A5F37AC();
      *(_QWORD *)(v0 + 152) = sub_18A6A5E28(v12, v13, (uint64_t *)&v54);
      sub_18A6A5940();
      sub_18A5F4804();
      sub_18A5F3A8C();
      *(_WORD *)(v10 + 12) = 2112;
      if (v7)
      {
        *(_QWORD *)(v0 + 120) = v7;
        v14 = v7;
        sub_18A6A7CF4();
      }
      else
      {
        *(_QWORD *)(v0 + 144) = 0;
        sub_18A6A7CF4();
        v4 = 0;
      }
      *v52 = v4;

      sub_18A6A5608(&dword_18A5C5000, v8, v9, "%s received database notification (zone=%@", (uint8_t *)v10);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A6A5E58(*(id *)(*(_QWORD *)(*(_QWORD *)(v0 + 184) + 128) + 16), sel_setNeedsToFetchDatabaseChanges_);
    if (v7)
    {
      sub_18A5F101C(&qword_1EDF6A388);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18A83B0D0;
      *(_QWORD *)(inited + 32) = v7;
      v54._rawValue = (void *)inited;
      specialized Array._endMutation()();
      v25 = v7;
      CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(1, v54);
      sub_18A5F37E0();
      sub_18A6A7AA0();
      sub_18A6A7F28((unint64_t *)&qword_1ECD967B8);
      v26 = MEMORY[0x1E0DEE9D8];
      v27 = Dictionary.init(dictionaryLiteral:)();
      *(_QWORD *)(v0 + 224) = v27;
      sub_18A66CBD0();
      static SyncEngine.defaultOperationGroup()();
      *(_QWORD *)(v0 + 232) = v28;
      v29 = v28;
      sub_18A6291A0();
      sub_18A5F40AC();
      sub_18A66BCA0(v29);
      if (v30 && (sub_18A6A6C94(), (sub_18A669988() & 1) == 0))
      {
        sub_18A5F37A4();
      }
      else
      {
        v54._rawValue = 0;
        v55 = 2;
        sub_18A6756FC((uint64_t)&v54);
        v32 = v31;
        v34 = v33;
        sub_18A5F37A4();
        sub_18A66BCF8(v32, v34, v29);
      }
      sub_18A5F3944();
      sub_18A5F3A8C();

      sub_18A6A64CC();
      v41 = sub_18A5F37B4();
      *(_QWORD *)(v0 + 240) = v41;
      *(_BYTE *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 17) = *(_DWORD *)(v0 + 271);
      *(_DWORD *)(v41 + 20) = *(_DWORD *)(v0 + 274);
      *(_QWORD *)(v41 + 24) = 0;
      *(_BYTE *)(v41 + 32) = 2;
      *(_DWORD *)(v41 + 33) = *(_DWORD *)(v0 + 264);
      *(_DWORD *)(v41 + 36) = *(_DWORD *)(v0 + 267);
      *(_QWORD *)(v41 + 40) = v29;
      *(_QWORD *)(v41 + 48) = v26;
      *(_QWORD *)(v41 + 56) = v27;
      *(_BYTE *)(v41 + 64) = 1;
      v42 = *(_DWORD *)(v0 + 73);
      *(_DWORD *)(v41 + 68) = *(_DWORD *)(v0 + 76);
      *(_DWORD *)(v41 + 65) = v42;
      *(_QWORD *)(v41 + 72) = 0;
      *(_BYTE *)(v41 + 80) = 0;
      *(_QWORD *)(v41 + 88) = v53;
      v43 = v29;
      sub_18A6291A0();
      sub_18A5F40AC();
      swift_retain();
      v44 = (_QWORD *)sub_18A6A563C();
      *(_QWORD *)(v0 + 248) = v44;
      *v44 = v0;
      v44[1] = sub_18A68DE88;
      sub_18A6A6938();
      __asm { BR              X3 }
    }
    sub_18A5F3A58();
    Logger.logObject.getter();
    v35 = sub_18A6A6454();
    if (sub_18A6A55D0(v35))
    {
      v36 = (uint8_t *)sub_18A5F3830();
      v54._rawValue = (void *)sub_18A5F3830();
      *(_DWORD *)v36 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v38 = v37;
      sub_18A5F37AC();
      v40 = sub_18A6A5844(v38, v39, (uint64_t *)&v54);
      sub_18A6A6EDC(v40, (_QWORD *)(v0 + 136));
      sub_18A6A5870();
      sub_18A5F4804();
      sub_18A5F38AC();
      sub_18A63E290(&dword_18A5C5000, v6, v9, "%s scheduling sync after push notification", v36);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    v46 = *(_QWORD *)(v0 + 192);
    v47 = sub_18A5F40B4();
    sub_18A6239F8(v46, v48, v49, v47);
    v50 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v50;
    *v50 = v0;
    v50[1] = sub_18A68E338;
    sub_18A6A5E14(*(_QWORD *)(v0 + 192));
    sub_18A6A6938();
    return sub_18A694D38(v51);
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v15 = sub_18A5F3BA0();
    v16 = sub_18A60990C(v15, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v17 = sub_18A6A6454();
    if (sub_18A6A55D0(v17))
    {
      v18 = (uint8_t *)sub_18A5F3830();
      v54._rawValue = (void *)sub_18A5F3830();
      *(_DWORD *)v18 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v20 = v19;
      sub_18A5F37AC();
      v22 = sub_18A6A5844(v20, v21, (uint64_t *)&v54);
      sub_18A6A770C(v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A5F4804();
      sub_18A5F38AC();
      sub_18A63E290(&dword_18A5C5000, v16, v1, "%s not processing database notification for deallocated engine", v18);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A6A7B30();
    return sub_18A6A61DC(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_18A68DE88()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F3AA0();
  sub_18A6A5670();
  return sub_18A6A54D8();
}

#error "18A68DFFC: call analysis failed (funcsize=247)"

uint64_t sub_18A68E338()
{
  uint64_t v0;

  sub_18A623A14();
  v0 = sub_18A6239A4();
  sub_18A6A7278(v0, &qword_1EDF6A680);
  sub_18A6A5670();
  return sub_18A6A54D8();
}

uint64_t sub_18A68E3B0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  sub_18A6960C4();
  sub_18A5F3AA0();

  sub_18A6A7B30();
  return sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A68E418(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 160) = a3;
  *(_QWORD *)(v4 + 168) = a4;
  *(_QWORD *)(v4 + 152) = a1;
  *(_OWORD *)(v4 + 176) = *a2;
  return swift_task_switch();
}

uint64_t sub_18A68E43C()
{
  void *v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;

  sub_18A64A1F4();
  if (*(_QWORD *)(v1 + 176))
  {
    sub_18A6A6CC8();
    sub_18A6A6990(v0, v2);
    v3 = (_QWORD *)sub_18A5F3C20();
    *(_QWORD *)(v1 + 192) = v3;
    v4 = sub_18A6A6A20(v3);
    return sub_18A5F447C(v4, v5, v6, v7, v8, v9);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 152);
    *(_QWORD *)(v11 + 32) = 0;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    v12 = *(_QWORD *)(v1 + 152);
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_BYTE *)(v12 + 56) = 0;
    return sub_18A5F4838(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_18A68E4C8()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A68E504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(unsigned __int8 *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(unsigned __int8 *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_BYTE *)(v0 + 144);
  v7 = *(_OWORD *)(v0 + 104);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 32) = v3;
  v8 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v5;
  *(_BYTE *)(v8 + 56) = v6;
  return sub_18A60A0D8();
}

uint64_t sub_18A68E540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_18A5F4434();
}

uint64_t sub_18A68E554()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[2];
  v1 = v0[3];
  v3 = sub_18A6A58B4();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_18A68E5C4;
  sub_18A6A7A64();
  return sub_18A6725A0(v5, v6, v7, v8);
}

uint64_t sub_18A68E5C4()
{
  uint64_t v0;

  sub_18A6A678C();
  if (!v0)
    swift_task_dealloc();
  return sub_18A5F3A94();
}

uint64_t sub_18A68E610()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A68E63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_18A68E658()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD);

  v1 = *(_QWORD *)(v0[3] + 136);
  sub_18A6A69C0();
  v2 = (_QWORD *)sub_18A6A563C();
  v0[5] = v2;
  *v2 = v0;
  v2[1] = sub_18A68E6C8;
  return v4(v0[2], 0, v0[4], v1, v0[3]);
}

uint64_t sub_18A68E6C8()
{
  uint64_t v0;

  sub_18A6239A4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A68E6FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 376) = a1;
  *(_QWORD *)(v2 + 384) = v1;
  return sub_18A5F4434();
}

uint64_t sub_18A68E710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Swift::String v28;
  CKDatabaseSubscription *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  void *v42;
  uint64_t v43;
  _QWORD *v44;

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = *(_QWORD *)(v22[48] + 128);
  v22[49] = v26;
  v27 = objc_msgSend(*(id *)(v26 + 16), sel_needsToSaveDatabaseSubscription);
  if ((_DWORD)v27)
  {
    sub_18A5F3B04((uint64_t)v27, (unint64_t *)&unk_1EDF6A350);
    sub_18A68CDA0();
    CKDatabaseSubscription.init(subscriptionID:)(v29, v28);
    v31 = v30;
    v22[50] = v30;
    v32 = objc_msgSend(objc_allocWithZone((Class)CKNotificationInfo), sel_init);
    v22[51] = v32;
    sub_18A6A5E58(v32, sel_setShouldSendContentAvailable_);
    sub_18A623D9C(v31, sel_setNotificationInfo_);
    if (qword_1EDF6A540 != -1)
      swift_once();
    v33 = sub_18A5F3BA0();
    v34 = sub_18A60990C(v33, (uint64_t)qword_1EDF6A630);
    v22[52] = v34;
    sub_18A5F3A58();
    sub_18A6A5CC0();
    v35 = sub_18A6A6880();
    if (sub_18A6A562C(v35))
    {
      v36 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A7A08();
      *(_DWORD *)v36 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v38 = v37;
      sub_18A5F37AC();
      v22[46] = sub_18A6A6078(v38, v39, &a11);
      sub_18A6A5D8C();
      sub_18A5F4804();
      sub_18A5F37E0();
      sub_18A63E290(&dword_18A5C5000, v34, v23, "%s saving database subscription", v36);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    v42 = (void *)v22[47];
    v22[7] = v22 + 39;
    v22[2] = v22;
    v22[3] = sub_18A68E970;
    v43 = sub_18A6A5ED0();
    v22[26] = MEMORY[0x1E0C809B0];
    v44 = v22 + 26;
    v44[1] = 0x40000000;
    sub_18A6A69B4(v43, (uint64_t)sub_18A643834);
    objc_msgSend(v42, sel_saveSubscription_completionHandler_, v31, v44);
    return sub_18A6A6390();
  }
  else
  {
    v40 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v40);
  }
}

uint64_t sub_18A68E970()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A24();
  *(_QWORD *)(v0 + 424) = v1;
  return sub_18A5F3AE0();
}

uint64_t sub_18A68E9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = *(NSObject **)(v22 + 384);

  sub_18A5F3A58();
  Logger.logObject.getter();
  v27 = sub_18A6A58AC();
  if (sub_18A6A55D0(v27))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A6080();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v29 = sub_18A5F37AC();
    *(_QWORD *)(v22 + 360) = sub_18A6A5704(v29, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18A5F4804();
    swift_bridgeObjectRelease();
    sub_18A63E290(&dword_18A5C5000, v26, v23, "%s saved subscription", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A5F4804();
  v31 = sub_18A6A6F74(*(id *)(*(_QWORD *)(v22 + 392) + 16), sel_setNeedsToSaveDatabaseSubscription_);
  if ((sub_18A5F3888((uint64_t)v31, sel_needsToFetchDatabaseChanges) & 1) == 0)
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v32 = sub_18A6A58AC();
    if (sub_18A6A55D0(v32))
    {
      v33 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v33 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v34 = sub_18A5F37AC();
      *(_QWORD *)(v22 + 352) = sub_18A6A5704(v34, v35, &a11);
      sub_18A6A578C();
      sub_18A5F4804();
      sub_18A5F394C();
      sub_18A63E290(&dword_18A5C5000, v26, v23, "%s scheduling fetch changes after saving subscription", v33);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A6A5E58(*(id *)(*(_QWORD *)(v22 + 392) + 16), sel_setNeedsToFetchDatabaseChanges_);
    sub_18A6925C4();
  }
  *(_QWORD *)(v22 + 120) = v22 + 288;
  *(_QWORD *)(v22 + 80) = v22;
  *(_QWORD *)(v22 + 88) = sub_18A68EC4C;
  v36 = sub_18A6A5ED0();
  *(_QWORD *)(v22 + 248) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v22 + 256) = 0x40000000;
  v37 = sub_18A6A69B4(v36, (uint64_t)sub_18A68F624);
  sub_18A6A6614(v37, sel_fetchAllSubscriptionsWithCompletionHandler_);
  return sub_18A6A6390();
}

uint64_t sub_18A68EC4C()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A70BC();
  *(_QWORD *)(v0 + 432) = v1;
  return sub_18A5F3AE0();
}

uint64_t sub_18A68EC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  sub_18A6A567C();
  a25 = v31;
  a26 = v32;
  a24 = v27;
  v33 = *(_QWORD *)(v27 + 288);
  v34 = MEMORY[0x1E0DEE9D8];
  a15 = MEMORY[0x1E0DEE9D8];
  if (!((unint64_t)v33 >> 62))
  {
    v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v35)
      goto LABEL_3;
LABEL_18:
    sub_18A5F37E0();
    v38 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_47;
    goto LABEL_19;
  }
  if (v33 < 0)
    v26 = (uint64_t *)v33;
  else
    v26 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFF8);
  sub_18A5F3FAC();
  v35 = sub_18A623AB0();
  sub_18A5F37E0();
  if (!v35)
    goto LABEL_18;
LABEL_3:
  if (v35 < 1)
  {
    __break(1u);
    goto LABEL_49;
  }
  v36 = 0;
  v30 = v33 & 0xC000000000000001;
  do
  {
    if (v30)
      v37 = (id)MEMORY[0x18D76CEB0](v36, v33);
    else
      v37 = sub_18A5F3D34(v33 + 8 * v36);
    v28 = v37;
    if (objc_msgSend(v37, sel_subscriptionType) == (id)3)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v29 = *(_QWORD *)(a15 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      sub_18A6A83BC();
      specialized ContiguousArray._endMutation()();
    }
    else
    {

    }
    ++v36;
  }
  while (v35 != v36);
  sub_18A5F37E0();
  v38 = a15;
  if (a15 < 0)
    goto LABEL_47;
LABEL_19:
  if ((v38 & 0x4000000000000000) == 0)
  {
    v39 = *(_QWORD *)(v38 + 16);
    goto LABEL_21;
  }
LABEL_47:
  sub_18A5F40AC();
  v39 = _CocoaArrayWrapper.endIndex.getter();
  sub_18A61A878();
LABEL_21:
  v92 = v27;
  if (!v39)
  {
    sub_18A61A878();
    v33 = MEMORY[0x1E0DEE9D8];
    goto LABEL_31;
  }
  a15 = v34;
  v26 = &a15;
  sub_18A60FC4C();
  if (v39 < 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v40 = 0;
  v33 = a15;
  do
  {
    if ((v38 & 0xC000000000000001) != 0)
      sub_18A6A8414();
    v41 = sub_18A5F3D34(v38 + 8 * v40);
    v42 = objc_msgSend(v41, sel_subscriptionID);
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    a15 = v33;
    v46 = *(_QWORD *)(v33 + 16);
    if (v46 >= *(_QWORD *)(v33 + 24) >> 1)
    {
      sub_18A60FC4C();
      v33 = a15;
    }
    ++v40;
    *(_QWORD *)(v33 + 16) = v46 + 1;
    v47 = v33 + 16 * v46;
    *(_QWORD *)(v47 + 32) = v43;
    *(_QWORD *)(v47 + 40) = v45;
  }
  while (v39 != v40);
  sub_18A61A878();
  v27 = v92;
LABEL_31:
  v48 = *(_QWORD *)(v27 + 384);
  sub_18A5F101C(&qword_1EDF6A478);
  v49 = sub_18A6A5E38();
  *(_OWORD *)(v49 + 16) = xmmword_18A83C9C0;
  sub_18A68CDDC();
  v51 = v50;
  v53 = v52;
  *(_QWORD *)(v49 + 32) = v50;
  *(_QWORD *)(v49 + 40) = v52;
  v30 = *(_QWORD *)(v48 + 368);
  v26 = *(uint64_t **)(v48 + 376);
  *(_QWORD *)(v49 + 48) = v30;
  *(_QWORD *)(v49 + 56) = v26;
  sub_18A5F3898();
  v54 = sub_18A61039C();
  sub_18A6A79A4(v54, v55, v56, MEMORY[0x1E0DEE9D8]);
  v58 = v57;
  v60 = *(_QWORD *)(v57 + 16);
  v59 = *(_QWORD *)(v57 + 24);
  v34 = v60 + 1;
  if (v60 >= v59 >> 1)
  {
    sub_18A61A8AC(v59 > 1, v60 + 1);
    v58 = v90;
  }
  *(_QWORD *)(v58 + 16) = v34;
  v61 = v58 + 16 * v60;
  *(_QWORD *)(v61 + 32) = v51;
  *(_QWORD *)(v61 + 40) = v53;
  if (v26)
  {
    v29 = *(_QWORD *)(v58 + 24);
    v28 = (void *)(v60 + 2);
    sub_18A5F3898();
    if (v34 < v29 >> 1)
    {
LABEL_35:
      *(_QWORD *)(v58 + 16) = v28;
      v62 = v58 + 16 * v34;
      *(_QWORD *)(v62 + 32) = v30;
      *(_QWORD *)(v62 + 40) = v26;
      goto LABEL_36;
    }
LABEL_50:
    sub_18A61A8AC(v29 > 1, (uint64_t)v28);
    v58 = v91;
    goto LABEL_35;
  }
LABEL_36:
  sub_18A61A878();
  sub_18A66847C(v33);
  v64 = v63;
  sub_18A66847C(v58);
  v66 = sub_18A68F690(v65, v64);
  sub_18A5F37E0();
  v67 = sub_18A67253C((uint64_t)v66);
  if (v68)
  {
    v69 = v67;
    v70 = v68;
    if (v66[2].isa <= (Class)1)
    {
      sub_18A5F3A8C();
    }
    else
    {
      sub_18A5F3A58();
      sub_18A6291A0();
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.fault.getter();
      if (sub_18A6A6A68(v71))
      {
        v73 = sub_18A5F3830();
        a15 = sub_18A5F3830();
        *(_DWORD *)v73 = 136315394;
        sub_18A5F3E6C();
        sub_18A699D34();
        v75 = v74;
        sub_18A5F37AC();
        *(_QWORD *)(v27 + 336) = sub_18A6A5844(v75, v76, &a15);
        sub_18A6A6F14();
        sub_18A5F4804();
        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2080;
        sub_18A6291A0();
        v77 = Set.description.getter();
        sub_18A5F3A8C();
        *(_QWORD *)(v27 + 344) = sub_18A6A6FD8(v77, v78, &a15);
        sub_18A6A5740();
        sub_18A654258();
        swift_bridgeObjectRelease();
        sub_18A6A5608(&dword_18A5C5000, v71, v72, "%s found more than one existing database subscription: %s", (uint8_t *)v73);
        sub_18A6A55E0();
        sub_18A5F392C();
      }

      sub_18A654258();
      sub_18A5F4804();
    }
    sub_18A5F3A58();
    sub_18A66CCC0();
    Logger.logObject.getter();
    v80 = sub_18A6A8168();
    if (sub_18A6A5B4C(v66))
    {
      v81 = sub_18A5F3830();
      a15 = sub_18A5F3830();
      *(_DWORD *)v81 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v83 = v82;
      sub_18A5F37AC();
      *(_QWORD *)(v27 + 320) = sub_18A6A6078(v83, v84, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A5F4804();
      sub_18A5F37E0();
      *(_WORD *)(v81 + 12) = 2080;
      v85 = sub_18A61039C();
      v87 = sub_18A6A5704(v85, v86, &a15);
      sub_18A6A8368(v87);
      sub_18A6A5740();
      sub_18A6A5980();
      sub_18A6A5608(&dword_18A5C5000, v66, v80, "%s found an untracked existing database subscription: %s", (uint8_t *)v81);
      sub_18A6A55E0();
      sub_18A5F392C();
    }

    sub_18A654258();
    sub_18A5F4804();
    v79 = *(void **)(v27 + 400);
    CKSyncEngine.State.existingDatabaseSubscriptionID.setter(v69, v70);
    sub_18A68CE64();
  }
  else
  {
    v79 = *(void **)(v27 + 400);
    sub_18A5F3A8C();
  }

  v88 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A6A56B4(v88);
}

#error "18A68F3B0: call analysis failed (funcsize=96)"

#error "18A68F568: call analysis failed (funcsize=95)"

uint64_t sub_18A68F624(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_18A672154(v3, (uint64_t)a3);
  sub_18A5F50F0(0, (unint64_t *)&qword_1EDF6A9D0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_18A6721A8(v3, v5);
}

uint64_t sub_18A68F690(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_18A6A1D30(a1, a2);
  sub_18A6218AC();
  return a2;
}

uint64_t sub_18A68F6E0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(_QWORD *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return a2(a1);
}

void sub_18A68F700()
{
  sub_18A68F7C8();
}

void sub_18A68F70C()
{
  sub_18A68F814();
}

void sub_18A68F718()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

void sub_18A68F754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v7);
  sub_18A6639EC();
  v8 = sub_18A629254();
  sub_18A60FC98(v8, v9, &qword_1EDF6A680);
  a5(v5);
  sub_18A5F3814();
}

void sub_18A68F7BC()
{
  sub_18A68F7C8();
}

void sub_18A68F7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_18A5F46AC();
  v0 = sub_18A6406BC();
  sub_18A60FC98(v0, v1, v2);
  sub_18A5F42C8();
}

void sub_18A68F808()
{
  sub_18A68F814();
}

void sub_18A68F814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_18A5F40A4();
  v0 = sub_18A61A770();
  sub_18A6A51C0(v0, v1, v2);
  sub_18A64A4D4();
  sub_18A5F42C8();
}

void sub_18A68F85C()
{
  sub_18A5F40A4();
  sub_18A5F379C();
}

void SyncEngine.activityNameSuffix.getter()
{
  sub_18A5F3898();
  sub_18A61A770();
  sub_18A5F379C();
}

uint64_t sub_18A68F8C4()
{
  return sub_18A68F8F8();
}

uint64_t sub_18A68F8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  const __CFString *v18;
  Swift::String v19;
  uint64_t v20;
  id v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  _QWORD *v42;
  _QWORD v43[12];
  uint64_t v44;
  uint64_t v45;

  sub_18A612EB8();
  v44 = v1;
  v45 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (_QWORD *)type metadata accessor for UUID();
  v10 = *(v9 - 1);
  MEMORY[0x1E0C80A78]();
  sub_18A5F3908();
  v12 = sub_18A6A6ED4(v11, sel_container);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, sel_containerID);
    v15 = objc_msgSend(v14, sel_containerIdentifier);
    sub_18A61044C();
    sub_18A6A8170();
    v43[0] = v0;
    v43[1] = v9;
    sub_18A6A728C();
    v17 = sub_18A5F3CA8(v16, sel_environment);
    v18 = (id)CKContainerEnvironmentString((uint64_t)v17);
    sub_18A61044C();
    sub_18A6A8170();
    v19._countAndFlagsBits = v0;
    v19._object = v9;
    String.append(_:)(v19);
    sub_18A5F38AC();
    sub_18A6A728C();
    v21 = sub_18A6A6ED4(v20, sel_databaseScope);
    v22 = (id)CKDatabaseScopeString((unint64_t)v21);
    v23 = (void *)sub_18A61044C();
    v25 = v24;

    v26._countAndFlagsBits = (uint64_t)v23;
    v26._object = v25;
    String.append(_:)(v26);
    sub_18A643358();
    sub_18A6A728C();
    v27._countAndFlagsBits = sub_18A6A797C();
    String.append(_:)(v27);
    v28 = objc_msgSend(objc_msgSend(v13, sel_options), sel_accountOverrideInfo);
    sub_18A6A817C();
    if (v23)
    {
      sub_18A6A8430(v29, (SEL *)&selRef_email);
      if (v30._object)
      {
        sub_18A6A6060(v30);
        sub_18A5F394C();
        sub_18A6A6B6C();
        v30._countAndFlagsBits = sub_18A5F394C();
      }
      sub_18A6A8430(v30._countAndFlagsBits, (SEL *)&selRef_accountID);
      if (v31._object)
      {
        sub_18A6A6060(v31);
        sub_18A5F394C();
        sub_18A6A6B6C();
        v31._countAndFlagsBits = sub_18A5F394C();
      }
      sub_18A6A8430(v31._countAndFlagsBits, (SEL *)&selRef_altDSID);
      if (v32._object)
      {
        sub_18A6A6060(v32);
        sub_18A5F394C();
        sub_18A6A6B6C();
        sub_18A5F394C();
      }

    }
    if (v4)
    {
      v33._countAndFlagsBits = sub_18A629170();
      String.append(_:)(v33);
      v34._countAndFlagsBits = 46;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      sub_18A5F37E0();
    }

  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v35 = sub_18A5F3BA0();
    sub_18A60990C(v35, (uint64_t)qword_1EDF6A630);
    v36 = v8;
    v37 = sub_18A6A72B0();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)sub_18A5F3830();
      v42 = (_QWORD *)sub_18A5F3830();
      *(_DWORD *)v39 = 138412290;
      v43[0] = v6;
      v40 = v6;
      sub_18A6A578C();
      *v42 = v6;

      sub_18A63E290(&dword_18A5C5000, v37, v38, "No container when trying to get activity identifier for database %@", v39);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    UUID.init()();
    UUID.uuidString.getter();
    sub_18A6A8068();
    (*(void (**)(uint64_t, _QWORD *))(v10 + 8))(v0, v9);
  }
  return sub_18A61A770();
}

uint64_t sub_18A68FC84()
{
  sub_18A6A81BC();
  return sub_18A68F8F8();
}

void sub_18A68FCB8()
{
  sub_18A6A7140();
  sub_18A6A788C();
  sub_18A5F379C();
}

void sub_18A68FCE8()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  sub_18A612EB8();
  v3 = v0;
  v5 = v4;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v6);
  sub_18A6A7A4C();
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_isAutomaticSyncEnabledLock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 20));
  *(_BYTE *)(v7 + 16) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
  if (qword_1EDF6A540 != -1)
    swift_once();
  v8 = sub_18A5F3BA0();
  sub_18A60990C(v8, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v9 = sub_18A6A6C48();
  if (sub_18A6A5900(v9))
  {
    v10 = sub_18A5F3830();
    v19 = sub_18A5F3830();
    *(_DWORD *)v10 = 136315394;
    sub_18A64A54C();
    sub_18A6A5BBC();
    v12 = v11;
    sub_18A5F3AA0();
    sub_18A6A5844(v12, v13, &v19);
    sub_18A6A6058();
    sub_18A5F38AC();
    sub_18A6A54D0();
    *(_WORD *)(v10 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_18A5C5000, (os_log_t)v7, v2, "%s setting automaticallySync=%{BOOL}d", (uint8_t *)v10, 0x12u);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  v14 = sub_18A623B70();
  sub_18A6239F8(v1, v15, v16, v14);
  v17 = (_QWORD *)sub_18A5F37B4();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v3;
  v18 = sub_18A64A54C();
  sub_18A6A8290(v18, (uint64_t)&unk_1EDF6C168);
  swift_release();
  sub_18A5F37E8();
}

uint64_t sub_18A68FED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_18A68FEF0()
{
  uint64_t v0;

  sub_18A68CE64();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A68FF18(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_18A68FCB8();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  sub_18A5F379C();
}

void sub_18A68FF4C()
{
  sub_18A68FCE8();
  sub_18A5F379C();
}

void sub_18A68FF6C()
{
  sub_18A5F46AC();
  swift_unknownObjectRetain();
  sub_18A5F42C8();
}

uint64_t sub_18A68FFA4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return sub_18A5F4434();
}

uint64_t sub_18A68FFC0()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(void);

  v1 = *(void **)(v0 + 16);
  sub_18A6A69C0();
  v2 = v1;
  v3 = (_QWORD *)sub_18A6A6668();
  sub_18A6A84B4(v3, (uint64_t)sub_18A690020);
  v4 = sub_18A6A5E14((uint64_t)"engine/sync");
  return sub_18A6A6E54(v4, 11, 2, v5, v6, v7, v9);
}

uint64_t sub_18A690020()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A848C();
  sub_18A6239A4();
  return sub_18A623BC8(v0, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_18A690050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[21] = a3;
  v4[22] = a4;
  v4[19] = a1;
  v4[20] = a2;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  v4[23] = sub_18A5F3CBC();
  v5 = sub_18A6A847C();
  v4[24] = v5;
  v4[25] = *(_QWORD *)(v5 - 8);
  v4[26] = sub_18A5F3CBC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6900B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v26 = sub_18A5F3BA0();
  v27 = sub_18A60990C(v26, (uint64_t)qword_1EDF6A630);
  v22[27] = v27;
  sub_18A5F3A58();
  sub_18A6A5910();
  v28 = sub_18A6A58AC();
  if (sub_18A6A55D0(v28))
  {
    v29 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A6080();
    *(_DWORD *)v29 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = sub_18A5F37AC();
    v22[18] = sub_18A6A5704(v30, v31, &a11);
    sub_18A6A578C();
    sub_18A5F394C();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v27, v23, "%s will perform scheduled sync", v29);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A5F4804();

  ContinuousClock.init()();
  v32 = (_QWORD *)sub_18A5F3C20();
  v22[28] = v32;
  *v32 = v22;
  v32[1] = sub_18A69022C;
  sub_18A6A80BC();
  return sub_18A6A6374(v33, v34, v35, v36, v37, v38);
}

uint64_t sub_18A69022C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A6A5BE8();
  sub_18A5F416C(v1);
  if (v0)
    sub_18A6A5978();
  sub_18A6A5D14();
  sub_18A5F3840();
  return sub_18A5F4708();
}

id sub_18A690294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;

  static SyncEngine.defaultOperationGroup()();
  *(_QWORD *)(v0 + 232) = v1;
  sub_18A6A708C(0xD00000000000001BLL, 0x800000018A840CA0);
  result = sub_18A5F3888(v2, sel_defaultConfiguration);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, sel_setSchedulerActivity_, *(_QWORD *)(v0 + 168));

    sub_18A623CE4();
    return (id)sub_18A5F3A94();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18A690318()
{
  uint64_t v0;

  sub_18A69A518(*(void **)(v0 + 232));
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A69034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  _QWORD *v40;
  const void *v41;

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v23;
  sub_18A5F3A58();
  Logger.logObject.getter();
  v27 = sub_18A6A58AC();
  if (sub_18A6A55D0(v27))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A815C();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = v29;
    sub_18A5F37AC();
    *(_QWORD *)(v23 + 136) = sub_18A6A5844(v30, v31, &a10);
    sub_18A6A5870();
    sub_18A5F38AC();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v22, v24, "%s performing scheduled sync", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  sub_18A6A7AA0();
  sub_18A6A7F28((unint64_t *)&qword_1ECD967B8);
  v32 = sub_18A6A7854();
  v33 = MEMORY[0x1E0DEE9D8];
  sub_18A6A68D0();
  v34 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v23 + 240) = v34;
  v35 = v32;
  sub_18A5F3898();
  sub_18A5F3FAC();
  sub_18A6A8280();
  if (v36 && (sub_18A6A59F8() & 1) == 0)
  {
    v37 = *(void **)(v23 + 232);
    sub_18A5F3FE4();
  }
  else
  {
    v37 = *(void **)(v23 + 232);
    sub_18A66CBD0();
    a10 = 0;
    a11 = 2;
    sub_18A6A70EC((uint64_t)&a10);
    sub_18A5F3FE4();
    sub_18A6A6C64();
  }

  sub_18A6A64CC();
  sub_18A5F37A4();
  sub_18A5F37E0();
  v38 = *(void **)(v23 + 232);
  *(_BYTE *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_BYTE *)(v23 + 32) = 2;
  *(_QWORD *)(v23 + 40) = v38;
  *(_QWORD *)(v23 + 48) = v33;
  *(_QWORD *)(v23 + 56) = v34;
  *(_BYTE *)(v23 + 64) = 1;
  *(_QWORD *)(v23 + 72) = 0;
  *(_BYTE *)(v23 + 80) = 0;
  v39 = v38;
  sub_18A5F3898();
  sub_18A5F3FAC();
  v40 = (_QWORD *)sub_18A6A6F6C();
  *(_QWORD *)(v23 + 248) = v40;
  *v40 = v23;
  v40[1] = sub_18A690584;
  sub_18A6A6C7C();
  sub_18A663918();
  return sub_18A68085C(v41);
}

uint64_t sub_18A690584()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A14();
  sub_18A623FAC();
  *(_QWORD *)(v1 + 256) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6905D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = *(NSObject **)(v22 + 232);
  sub_18A654258();

  sub_18A654258();
  sub_18A654258();
  sub_18A5F3A58();
  Logger.logObject.getter();
  v27 = sub_18A6A58AC();
  if (sub_18A6A55D0(v27))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A815C();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = v29;
    sub_18A5F37AC();
    *(_QWORD *)(v22 + 128) = sub_18A6A5844(v30, v31, &a10);
    sub_18A6A5870();
    sub_18A5F38AC();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v26, v23, "%s finished fetching changes during sync, now sending changes", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  sub_18A66BCA0(*(id *)(v22 + 232));
  if (v32 && (sub_18A6A6190() & 1) == 0)
  {
    v33 = *(void **)(v22 + 232);
    sub_18A5F37E0();
  }
  else
  {
    v33 = *(void **)(v22 + 232);
    sub_18A66CBD0();
    a10 = 0;
    a11 = 3;
    sub_18A6A7E6C((uint64_t)&a10);
    v35 = v34;
    v37 = v36;
    sub_18A5F37E0();
    sub_18A6A708C(v35, v37);
  }

  sub_18A6A64CC();
  sub_18A6A7020();
  v39 = v38;
  v40 = (_QWORD *)sub_18A6A563C();
  *(_QWORD *)(v22 + 264) = v40;
  *v40 = v22;
  v40[1] = sub_18A6907A4;
  sub_18A6A6C7C();
  sub_18A663918();
  return sub_18A6791B4(v41);
}

uint64_t sub_18A6907A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623A14();
  sub_18A623FAC();
  *(_QWORD *)(v1 + 272) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6907F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v24;
  v27 = *(void **)(v24 + 232);
  sub_18A654258();

  *(_QWORD *)(v24 + 280) = 1;
  if (*(_QWORD *)(*(_QWORD *)(v24 + 160) + 168))
  {
    v28 = sub_18A5F37B4();
    sub_18A6A782C(v28);
    sub_18A6A5EA0();
    v29 = (_QWORD *)sub_18A6A60C4();
    *(_QWORD *)(v24 + 296) = v29;
    *v29 = v24;
    v29[1] = sub_18A690988;
    v30 = sub_18A6A6670((uint64_t)&unk_1EDF6C6A0);
    return sub_18A6A5698(v30, v31, v32);
  }
  else
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v34 = sub_18A6A58AC();
    if (sub_18A6A5A4C(v34))
    {
      v35 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v35 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v36 = sub_18A5F37AC();
      *(_QWORD *)(v24 + 120) = sub_18A6A5704(v36, v37, &a11);
      sub_18A6A578C();
      sub_18A5F394C();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v22, v23, "%s finished performing scheduled sync", v35);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A6A5CEC();
    sub_18A663AB0();
    v38 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v38);
  }
}

uint64_t sub_18A690988()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37AC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6909C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v23;
  sub_18A5F3A58();
  Logger.logObject.getter();
  v27 = sub_18A6A58AC();
  if (sub_18A6A55D0(v27))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A6080();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = v29;
    sub_18A5F37AC();
    *(_QWORD *)(v23 + 120) = sub_18A6A5844(v30, v31, &a11);
    sub_18A6A5870();
    sub_18A5F38AC();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v22, v24, "%s finished performing scheduled sync", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A5F4804();
  sub_18A6A5CEC();
  sub_18A663AB0();
  v32 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A623BBC(v32);
}

uint64_t sub_18A690AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t ShouldDefer;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  _BOOL4 v67;
  void *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  char *v78;

  sub_18A6A567C();
  a25 = v28;
  a26 = v29;
  a24 = v26;
  v30 = *(void **)(v26 + 232);
  sub_18A654258();
  sub_18A654258();

  sub_18A654258();
  v31 = (void *)_convertErrorToNSError(_:)();
  ShouldDefer = CKErrorShouldDefer(v31);

  if ((ShouldDefer & 1) != 0)
  {
    sub_18A6A81DC();
    v33 = *(void **)(v26 + 256);
    sub_18A6A77C8();
    v34 = v33;
    v35 = (void *)related decl 'e' for CKErrorCode.init(_:)(v33);
    v36 = sub_18A623B70();
    sub_18A6239F8((uint64_t)v30, v37, v38, v36);
    v39 = (_QWORD *)sub_18A5F37B4();
    v39[2] = 0;
    v39[3] = 0;
    v39[4] = ShouldDefer;
    v39[5] = v35;
    sub_18A623E28();
    v40 = v35;
    sub_18A6A811C((uint64_t)v40, (uint64_t)&unk_1EDF6C690);
    swift_release();
    v41 = v40;
    sub_18A629358();
    sub_18A6A81E4();
    sub_18A6A8278();
    sub_18A6A5978();
    sub_18A6A5978();

    sub_18A6A77B0();
    if (v33)
    {
      v42 = *(void **)(v26 + 168);
      v43 = sub_18A5F37B4();
      sub_18A6A782C(v43);
      v78 = (char *)&dword_1EDF6C3D0 + dword_1EDF6C3D0;
      v44 = v42;
      v45 = (_QWORD *)sub_18A6A60C4();
      *(_QWORD *)(v26 + 296) = v45;
      *v45 = v26;
      v45[1] = sub_18A690988;
      sub_18A6A6AD4();
      return v48(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, v78, a13, a14, a15, a16, a17, a18);
    }
    else
    {
      sub_18A5F3A58();
      Logger.logObject.getter();
      v66 = sub_18A6A584C();
      v67 = sub_18A6A562C(v66);
      v68 = *(void **)(v26 + 232);
      if (v67)
      {
        v69 = (uint8_t *)sub_18A5F3830();
        a13 = sub_18A5F3830();
        *(_DWORD *)v69 = 136315138;
        sub_18A5F3E6C();
        sub_18A699D34();
        v71 = v70;
        sub_18A5F37AC();
        *(_QWORD *)(v26 + 120) = sub_18A6A57C4(v71, v72, &a13);
        sub_18A6A5860();
        sub_18A5F4804();
        sub_18A643358();
        sub_18A63E290(&dword_18A5C5000, v40, (os_log_type_t)v39, "%s finished performing scheduled sync", v69);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

      sub_18A5F4804();
      sub_18A6A5CEC();
      sub_18A663AB0();
      v77 = (uint64_t (*)(void))sub_18A6A5838();
      return sub_18A6A56B4(v77);
    }
  }
  else
  {

    sub_18A5F3A58();
    Logger.logObject.getter();
    v55 = sub_18A6A584C();
    if (sub_18A6A562C(v55))
    {
      v56 = (uint8_t *)sub_18A5F3830();
      a13 = sub_18A5F3830();
      *(_DWORD *)v56 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v58 = v57;
      sub_18A5F37AC();
      *(_QWORD *)(v26 + 128) = sub_18A6A6078(v58, v59, &a13);
      sub_18A6A578C();
      sub_18A5F4804();
      sub_18A5F37E0();
      sub_18A63E290(&dword_18A5C5000, ShouldDefer, v27, "%s finished fetching changes during sync, now sending changes", v56);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A66BCA0(*(id *)(v26 + 232));
    if (v60 && (sub_18A6A6190() & 1) == 0)
    {
      v61 = *(void **)(v26 + 232);
      sub_18A5F37E0();
    }
    else
    {
      v61 = *(void **)(v26 + 232);
      sub_18A66CBD0();
      a13 = 0;
      LOBYTE(a14) = 3;
      sub_18A6A7E6C((uint64_t)&a13);
      v63 = v62;
      v65 = v64;
      sub_18A5F37E0();
      sub_18A6A708C(v63, v65);
    }
    sub_18A6A64CC();

    sub_18A6A7020();
    v74 = v73;
    v75 = (_QWORD *)sub_18A6A563C();
    *(_QWORD *)(v26 + 264) = v75;
    *v75 = v26;
    v75[1] = sub_18A6907A4;
    v76 = sub_18A6A6C7C();
    return sub_18A6A6400(v76);
  }
}

uint64_t sub_18A690F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  os_log_type_t v43;
  _BOOL4 v44;
  void *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v24;
  v27 = (void *)v24[29];

  sub_18A654258();
  v28 = (void *)v24[34];
  sub_18A6A77C8();
  v29 = v28;
  v30 = (void *)related decl 'e' for CKErrorCode.init(_:)(v28);
  v31 = sub_18A623B70();
  sub_18A6239F8((uint64_t)v22, v32, v33, v31);
  v34 = (_QWORD *)sub_18A5F37B4();
  v34[2] = 0;
  v34[3] = 0;
  v34[4] = v23;
  v34[5] = v30;
  sub_18A623E28();
  v35 = v30;
  sub_18A6A811C((uint64_t)v35, (uint64_t)&unk_1EDF6C690);
  swift_release();
  v36 = v35;
  sub_18A629358();
  sub_18A6A81E4();
  sub_18A6A8278();
  sub_18A6A5978();
  sub_18A6A5978();

  sub_18A6A77B0();
  if (v28)
  {
    v37 = sub_18A5F37B4();
    sub_18A6A782C(v37);
    sub_18A6A5EA0();
    v38 = (_QWORD *)sub_18A6A60C4();
    v24[37] = v38;
    *v38 = v24;
    v38[1] = sub_18A690988;
    v39 = sub_18A6A6670((uint64_t)&unk_1EDF6C6A0);
    return sub_18A6A5698(v39, v40, v41);
  }
  else
  {
    sub_18A5F3A58();
    Logger.logObject.getter();
    v43 = sub_18A6A58AC();
    v44 = sub_18A6A5A4C(v43);
    v45 = (void *)v24[29];
    if (v44)
    {
      v46 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v46 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v47 = sub_18A5F37AC();
      v24[15] = sub_18A6A5704(v47, v48, &a11);
      sub_18A6A578C();
      sub_18A5F4804();
      sub_18A5F394C();
      sub_18A63E290(&dword_18A5C5000, v22, (os_log_type_t)v35, "%s finished performing scheduled sync", v46);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A5F4804();
    sub_18A6A5CEC();
    sub_18A663AB0();
    v49 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v49);
  }
}

uint64_t sub_18A69111C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A69117C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  ContinuousClock.init()();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 56) = v1;
  sub_18A6A7718(v1, (uint64_t)sub_18A6911D0);
  sub_18A6A5F64();
  return sub_18A6A6008(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A6911D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  sub_18A6A5BE8();
  v3 = *v2;
  sub_18A5F416C(v4);
  if (v0)
  {
    sub_18A6A5978();
    sub_18A6A5D14();
    sub_18A5F3840();
    return sub_18A5F4708();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v1[5] + 8))(v1[6], v1[4]);
    v6 = (_QWORD *)swift_task_alloc();
    v1[8] = v6;
    *v6 = v3;
    v6[1] = sub_18A6912B8;
    v7 = sub_18A6A5854();
    return sub_18A6A717C(v7);
  }
}

uint64_t sub_18A691270()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_18A6912B8;
  v2 = sub_18A6A5854();
  return sub_18A6A717C(v2);
}

uint64_t sub_18A6912B8()
{
  uint64_t v0;

  sub_18A6A7D68();
  sub_18A6239A4();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6912E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  return swift_task_switch();
}

uint64_t sub_18A691304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  sub_18A60FC98(*(_QWORD *)(v0 + 64), v0 + 16, (uint64_t *)&unk_1EDF6A750);
  v2 = *(_QWORD *)(v0 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = (_QWORD *)sub_18A6A6F44();
    sub_18A608B00(v5, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v3, v2, v4);
    sub_18A608B60(v0 + 16);
  }
  else
  {
    sub_18A6A7278(v1, (uint64_t *)&unk_1EDF6A750);
  }
  **(_BYTE **)(v0 + 56) = v2 == 0;
  return sub_18A6A5B88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6913A4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return sub_18A5F4434();
}

uint64_t sub_18A6913C0()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(void);

  v1 = *(void **)(v0 + 16);
  sub_18A6A69C0();
  v2 = v1;
  v3 = (_QWORD *)sub_18A6A6668();
  sub_18A6A84B4(v3, (uint64_t)sub_18A6A54C8);
  v4 = sub_18A6A5E14((uint64_t)"engine/user-requested-backup");
  return sub_18A6A6E54(v4, 28, 2, v5, v6, v7, v9);
}

uint64_t sub_18A691420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  return sub_18A5F4434();
}

id sub_18A691438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id result;
  void *v43;
  id v44;
  _QWORD *v45;

  sub_18A6A567C();
  a25 = v28;
  a26 = v29;
  a24 = v26;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v30 = sub_18A5F3BA0();
  *(_QWORD *)(v26 + 104) = sub_18A60990C(v30, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  v31 = sub_18A6A5910();
  v32 = static os_log_type_t.default.getter();
  if (sub_18A6A55D0(v32))
  {
    v33 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A6080();
    *(_DWORD *)v33 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v34 = sub_18A5F37AC();
    *(_QWORD *)(v26 + 72) = sub_18A6A5704(v34, v35, &a11);
    sub_18A6A578C();
    sub_18A5F394C();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v31, v27, "%s performing user-requested-backup activity", v33);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A5F4804();

  a14 = 0;
  a15 = 3;
  CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)((uint64_t)&a14, 0, (uint64_t)&a11);
  v36 = a11;
  v37 = a12;
  v38 = a13;
  *(_QWORD *)(v26 + 112) = a11;
  *(_QWORD *)(v26 + 120) = v38;
  a11 = 0;
  a12 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  sub_18A667364();
  v39 = sub_18A6A78DC();
  sub_18A66BCF8(v39, v40, v38);
  result = sub_18A5F3D50(v41, sel_defaultConfiguration);
  if (result)
  {
    v43 = result;
    objc_msgSend(result, sel_setSchedulerActivity_, *(_QWORD *)(v26 + 96));

    *(_BYTE *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = v36;
    *(_BYTE *)(v26 + 32) = v37;
    *(_QWORD *)(v26 + 40) = v38;
    sub_18A5F40AC();
    v44 = v38;
    v45 = (_QWORD *)sub_18A6A6F6C();
    *(_QWORD *)(v26 + 128) = v45;
    *v45 = v26;
    v45[1] = sub_18A691648;
    return (id)sub_18A6A6400(v26 + 16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18A691648()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A623FAC();
  *(_QWORD *)(v1 + 136) = v0;
  swift_task_dealloc();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A69169C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t (*v39)(void);

  sub_18A6A5538();
  a21 = v25;
  a22 = v26;
  a20 = v23;
  sub_18A5F3A58();
  Logger.logObject.getter();
  v27 = sub_18A6A58AC();
  if (sub_18A6A55D0(v27))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A6080();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = v29;
    sub_18A5F37AC();
    *(_QWORD *)(v23 + 64) = sub_18A6A5844(v30, v31, &a11);
    sub_18A6A5870();
    sub_18A5F38AC();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v22, v24, "%s finished sending changes for user-requested-backup activity", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  *(_QWORD *)(v23 + 144) = 1;
  if (*(_QWORD *)(*(_QWORD *)(v23 + 88) + 168))
  {
    v32 = *(_QWORD *)(v23 + 96);
    v33 = sub_18A5F37B4();
    *(_QWORD *)(v23 + 152) = v33;
    *(_QWORD *)(v33 + 16) = v32;
    sub_18A6A5EA0();
    v34 = (_QWORD *)sub_18A6A60C4();
    *(_QWORD *)(v23 + 160) = v34;
    *v34 = v23;
    v34[1] = sub_18A691834;
    v35 = sub_18A6A6670((uint64_t)&unk_1EDF6C3C8);
    return sub_18A6A5698(v35, v36, v37);
  }
  else
  {
    sub_18A6A7F20();

    sub_18A654258();
    **(_QWORD **)(v23 + 80) = *(_QWORD *)(v23 + 144);
    v39 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v39);
  }
}

uint64_t sub_18A691834()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37AC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A69186C()
{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  sub_18A6A7F20();

  sub_18A654258();
  **(_QWORD **)(v1 + 80) = *(_QWORD *)(v1 + 144);
  v2 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A5F4680(v2);
}

uint64_t sub_18A6918A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  void *v27;
  id v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t (*v46)(void);
  _QWORD *v47;

  sub_18A6A5538();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  v25 = *(void **)(v22 + 136);
  v26 = *(NSObject **)(v22 + 88);
  sub_18A5F42D4();
  v27 = (void *)related decl 'e' for CKErrorCode.init(_:)(v25);
  sub_18A5F3A58();
  v28 = v27;
  sub_18A6A6F3C();
  v29 = sub_18A6A7920();
  if (sub_18A6A5B4C(v26))
  {
    v30 = (uint8_t *)sub_18A5F3830();
    v47 = (_QWORD *)sub_18A5F3830();
    a11 = sub_18A5F3830();
    *(_DWORD *)v30 = 136315394;
    sub_18A5F3E6C();
    sub_18A699D34();
    v32 = v31;
    sub_18A5F37AC();
    *(_QWORD *)(v22 + 48) = sub_18A6A5844(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18A5F4804();
    sub_18A5F38AC();
    v34 = sub_18A6A6928();
    v35 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v22 + 56) = v35;
    sub_18A6A5740();
    *v47 = v35;

    sub_18A6A5608(&dword_18A5C5000, v26, v29, "%s error sending changes for user-requested-backup activity: %@", v30);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A5F4804();
  v36 = v27;
  sub_18A629358();
  sub_18A6A81E4();
  v37 = sub_18A6A8278();

  sub_18A6A5978();
  v38 = 1;
  if (v37)
    v38 = 2;
  *(_QWORD *)(v22 + 144) = v38;
  if (*(_QWORD *)(*(_QWORD *)(v22 + 88) + 168))
  {
    v39 = *(_QWORD *)(v22 + 96);
    v40 = sub_18A5F37B4();
    *(_QWORD *)(v22 + 152) = v40;
    *(_QWORD *)(v40 + 16) = v39;
    sub_18A6A5EA0();
    v41 = (_QWORD *)sub_18A6A60C4();
    *(_QWORD *)(v22 + 160) = v41;
    *v41 = v22;
    v41[1] = sub_18A691834;
    v42 = sub_18A6A6670((uint64_t)&unk_1EDF6C3C8);
    return sub_18A6A5698(v42, v43, v44);
  }
  else
  {
    sub_18A6A7F20();

    sub_18A654258();
    **(_QWORD **)(v22 + 80) = *(_QWORD *)(v22 + 144);
    v46 = (uint64_t (*)(void))sub_18A6A5838();
    return sub_18A623BBC(v46);
  }
}

uint64_t sub_18A691B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  return swift_task_switch();
}

void sub_18A691B20()
{
  static SyncEngine.unregisterActivities(database:activityNameSuffix:)();
  sub_18A5F379C();
}

void sub_18A691B54()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + 128);
  if ((objc_msgSend(*(id *)(v1 + 16), sel_needsToFetchDatabaseChanges) & 1) == 0)
  {
    CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
    if (v2 >> 62)
      v3 = sub_18A6A7460();
    else
      v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A5F37A4();
    if (!v3 && !sub_18A6923E8())
    {
      sub_18A692558();
      if ((v4 & 1) == 0)
        objc_msgSend(*(id *)(v1 + 16), sel_needsToSaveDatabaseSubscription);
    }
  }
  sub_18A5F3824();
}

void sub_18A691BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  char v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  uint64_t v64;

  sub_18A612EB8();
  v2 = v0;
  v4 = v3;
  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v5);
  sub_18A6639EC();
  v6 = *(NSObject **)v4;
  v7 = *(unsigned __int8 *)(v4 + 8);
  v8 = *(unsigned __int8 *)(v4 + 56);
  sub_18A68FCB8();
  if ((v9 & 1) != 0 && (v8 & 1) == 0)
  {
    if (v7 == 1)
    {
      if ((unint64_t)v6 >> 62)
      {
        sub_18A6291A0();
        v57 = sub_18A623AB0();
        sub_18A5F3A8C();
        if (v57)
          goto LABEL_6;
      }
      else if (*(_QWORD *)(((unint64_t)v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_6;
      }
      if (qword_1EDF6A540 != -1)
        swift_once();
      v58 = sub_18A5F3BA0();
      sub_18A60990C(v58, (uint64_t)qword_1EDF6A630);
      sub_18A5F3A58();
      Logger.logObject.getter();
      v59 = sub_18A6A6880();
      if (!sub_18A6A5660(v59))
        goto LABEL_50;
      v32 = (uint8_t *)sub_18A5F3830();
      v60 = sub_18A5F3830();
      sub_18A6A7298(v60);
      sub_18A6A5824(4.8149e-34);
      sub_18A6A5BBC();
      sub_18A6A5730();
      v62 = sub_18A6A57C4(12, v61, &v64);
      sub_18A6A57CC(v62);
      sub_18A6A54D0();
      sub_18A643358();
      v36 = "%s asked to sync zero zones, so we don't need to fetch changes";
      goto LABEL_49;
    }
LABEL_6:
    v8 = *(NSObject **)(v2 + 128);
    if (-[objc_class needsToFetchDatabaseChanges](v8[2].isa, sel_needsToFetchDatabaseChanges))
    {
      if (qword_1EDF6A540 != -1)
        swift_once();
      v10 = sub_18A5F3BA0();
      sub_18A60990C(v10, (uint64_t)qword_1EDF6A630);
      sub_18A5F3A58();
      Logger.logObject.getter();
      v11 = sub_18A6A584C();
      if (sub_18A6A5660(v11))
      {
        v12 = (uint8_t *)sub_18A5F3830();
        v13 = sub_18A5F3830();
        sub_18A6A7298(v13);
        sub_18A6A5824(4.8149e-34);
        sub_18A6A5BBC();
        sub_18A6A5730();
        v15 = sub_18A6A57C4(12, v14, &v64);
        sub_18A6A57CC(v15);
        sub_18A6A54D0();
        sub_18A643358();
        sub_18A63E290(&dword_18A5C5000, v8, (os_log_type_t)v1, "%s need to fetch database changes, so we need to fetch changes for everything", v12);
        sub_18A5F38D8();
        sub_18A5F392C();
      }
LABEL_42:

LABEL_43:
      sub_18A6A54D0();
      goto LABEL_51;
    }
    if (sub_18A6923E8())
    {
      if (qword_1EDF6A540 != -1)
        swift_once();
      v16 = sub_18A5F3BA0();
      sub_18A60990C(v16, (uint64_t)qword_1EDF6A630);
      sub_18A5F3A58();
      sub_18A5F3A58();
      Logger.logObject.getter();
      v17 = sub_18A6A81A0();
      if (os_log_type_enabled(v6, v17))
      {
        v63 = v17;
        v18 = sub_18A5F3830();
        v64 = sub_18A5F3830();
        *(_DWORD *)v18 = 136315394;
        sub_18A64A54C();
        sub_18A6A5BBC();
        v20 = v19;
        sub_18A5F3AA0();
        sub_18A6A5948(v20, v21, &v64);
        sub_18A6A6058();
        sub_18A6A54D0();
        sub_18A610384();
        *(_WORD *)(v18 + 12) = 2080;
        v22 = -[objc_class lastFetchDatabaseChangesDate](v8[2].isa, sel_lastFetchDatabaseChangesDate);
        if (v22)
        {
          v23 = v22;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v24 = 0;
        }
        else
        {
          v24 = 1;
        }
        v49 = sub_18A5F40B4();
        sub_18A5F1010(v1, v24, 1, v49);
        sub_18A6A7948();
        v50 = String.init<A>(describing:)();
        sub_18A609924(v50, v51, &v64);
        sub_18A6A5940();
        sub_18A6A54D0();
        sub_18A5F460C();
        sub_18A6A5608(&dword_18A5C5000, v6, v63, "%s will fetch database and zone changes because our last fetch was too long ago: (%s", (uint8_t *)v18);
        sub_18A6A56D0();
        sub_18A5F392C();
      }

      sub_18A6A54D0();
      goto LABEL_43;
    }
    sub_18A6A7E84();
    if (v25 >> 62)
      v26 = sub_18A6A7460();
    else
      v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A5F37A4();
    if (v26)
    {
      if (v7 == 1)
      {
        sub_18A6A7E84();
        sub_18A6682F4(v27);
        v28 = sub_18A6A8438();
        v8 = sub_18A6A2490(v28, v29);
        sub_18A5F37A4();
        if ((v8 & 1) != 0)
        {
          if (qword_1EDF6A540 != -1)
            swift_once();
          v30 = sub_18A5F3BA0();
          sub_18A60990C(v30, (uint64_t)qword_1EDF6A630);
          sub_18A5F3A58();
          Logger.logObject.getter();
          v31 = sub_18A6A6880();
          if (sub_18A6A5660(v31))
          {
            v32 = (uint8_t *)sub_18A5F3830();
            v33 = sub_18A5F3830();
            sub_18A6A7298(v33);
            sub_18A6A5824(4.8149e-34);
            sub_18A6A5BBC();
            sub_18A6A5730();
            v35 = sub_18A6A57C4(12, v34, &v64);
            sub_18A6A57CC(v35);
            sub_18A6A54D0();
            sub_18A643358();
            v36 = "%s no intersection between desired zones to fetch changes and zones needing fetch changes";
            goto LABEL_49;
          }
LABEL_50:

          sub_18A6A54D0();
          goto LABEL_51;
        }
        if (qword_1EDF6A540 != -1)
          swift_once();
        v52 = sub_18A5F3BA0();
        sub_18A60990C(v52, (uint64_t)qword_1EDF6A630);
        sub_18A5F3A58();
        Logger.logObject.getter();
        v53 = sub_18A6A584C();
        if (!sub_18A6A5660(v53))
          goto LABEL_42;
        v44 = (uint8_t *)sub_18A5F3830();
        v54 = sub_18A5F3830();
        sub_18A6A7298(v54);
        sub_18A6A5824(4.8149e-34);
        sub_18A6A5BBC();
        sub_18A6A5730();
        v56 = sub_18A6A57C4(12, v55, &v64);
        sub_18A6A57CC(v56);
        sub_18A6A54D0();
        sub_18A643358();
        v48 = "%s found intersection between desired zones to fetch changes and zones needing fetch changes";
      }
      else
      {
        if (qword_1EDF6A540 != -1)
          swift_once();
        v42 = sub_18A5F3BA0();
        sub_18A60990C(v42, (uint64_t)qword_1EDF6A630);
        sub_18A5F3A58();
        Logger.logObject.getter();
        v43 = sub_18A6A584C();
        if (!sub_18A6A5660(v43))
          goto LABEL_42;
        v44 = (uint8_t *)sub_18A5F3830();
        v45 = sub_18A5F3830();
        sub_18A6A7298(v45);
        sub_18A6A5824(4.8149e-34);
        sub_18A6A5BBC();
        sub_18A6A5730();
        v47 = sub_18A6A57C4(12, v46, &v64);
        sub_18A6A57CC(v47);
        sub_18A6A54D0();
        sub_18A643358();
        v48 = "%s we have some zones needing fetch changes, and we're being asked to fetch all changes. LFG";
      }
      sub_18A63E290(&dword_18A5C5000, v8, (os_log_type_t)v1, v48, v44);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    if (qword_1EDF6A540 != -1)
      swift_once();
    v37 = sub_18A5F3BA0();
    sub_18A60990C(v37, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    Logger.logObject.getter();
    v38 = sub_18A6A6880();
    if (!sub_18A6A5660(v38))
      goto LABEL_50;
    v32 = (uint8_t *)sub_18A5F3830();
    v39 = sub_18A5F3830();
    sub_18A6A7298(v39);
    sub_18A6A5824(4.8149e-34);
    sub_18A6A5BBC();
    sub_18A6A5730();
    v41 = sub_18A6A57C4(12, v40, &v64);
    sub_18A6A57CC(v41);
    sub_18A6A54D0();
    sub_18A643358();
    v36 = "%s no zone IDs needing to be fetched, not fetching changes";
LABEL_49:
    sub_18A63E290(&dword_18A5C5000, v8, (os_log_type_t)v1, v36, v32);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
LABEL_51:
  sub_18A5F37E8();
}

BOOL sub_18A6923E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  char v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v22;

  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v3);
  sub_18A5F3908();
  v4 = sub_18A5F40B4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_18A6A73B8();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - v7;
  sub_18A6A26E0(v9, 0.0, 1800.0);
  v11 = v10;
  v12 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 128) + 16), sel_lastFetchDatabaseChangesDate);
  if (!v12)
  {
    sub_18A6A6648(v2, 1);
    goto LABEL_5;
  }
  v13 = v12;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v14(v2, v1, v4);
  sub_18A6A6648(v2, 0);
  sub_18A6A5EB4(v2);
  if (v15)
  {
LABEL_5:
    static Date.distantPast.getter();
    sub_18A6A4B10(v2, &qword_1EDF6A680);
    goto LABEL_6;
  }
  v14((uint64_t)v8, v2, v4);
LABEL_6:
  v16 = v11 + 86400.0;
  Date.timeIntervalSinceNow.getter();
  v18 = v17;
  v19 = sub_18A629170();
  v20(v19);
  return v16 <= -v18;
}

void sub_18A692558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(v0 + 128) + 16), sel_hasPendingUntrackedChanges) & 1) == 0)
  {
    CKSyncEngine.State.pendingRecordZoneChanges.getter();
    v2 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease();
    if (!v2)
    {
      CKSyncEngine.State.pendingDatabaseChanges.getter();
      swift_bridgeObjectRelease();
    }
  }
  sub_18A5F379C();
}

uint64_t sub_18A6925B0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_scheduleSyncTask) = a1;
  return sub_18A6A5E98();
}

void sub_18A6925C4()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  sub_18A612EB8();
  v3 = v0;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v4);
  sub_18A5F3E5C();
  v7 = v6 - v5;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v8 = sub_18A5F3BA0();
  sub_18A60990C(v8, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v9 = sub_18A6A68A0();
  if (sub_18A6A5900(v9))
  {
    v10 = (uint8_t *)sub_18A5F3830();
    v26 = sub_18A5F3830();
    *(_DWORD *)v10 = 136315138;
    sub_18A64A54C();
    sub_18A6A5BBC();
    v12 = v11;
    sub_18A5F3AA0();
    v14 = sub_18A6A67F4(v12, v13, &v26);
    sub_18A6A7C28(v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18A6A54D0();
    sub_18A63E290(&dword_18A5C5000, v1, v2, "%s will schedule sync", v10);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A6A54D0();

  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_scheduleSyncTask))
  {
    sub_18A5F3A58();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (sub_18A6A5810(v15))
    {
      v17 = (uint8_t *)sub_18A5F3830();
      v26 = sub_18A5F3830();
      *(_DWORD *)v17 = 136315138;
      sub_18A64A54C();
      sub_18A6A5BBC();
      sub_18A6A5730();
      sub_18A6A57C4(12, v18, &v26);
      sub_18A6A7048();
      sub_18A643358();
      sub_18A6A54D0();
      sub_18A63E290(&dword_18A5C5000, v15, v16, "%s self.scheduleSyncTask is nil. Creating a new Task", v17);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A6A54D0();

    v19 = sub_18A623B70();
    sub_18A6239F8(v7, v20, v21, v19);
    sub_18A62F924(&qword_1EDF6A4B8, (uint64_t (*)(uint64_t))type metadata accessor for SyncEngine, (uint64_t)&protocol conformance descriptor for SyncEngine);
    v23 = v22;
    v24 = (_QWORD *)sub_18A5F37B4();
    v24[2] = v3;
    v24[3] = v23;
    v24[4] = v3;
    sub_18A5F3A58();
    sub_18A670ABC(v7, (uint64_t)&unk_1EDF6C3B0, (uint64_t)v24);
    sub_18A6925B0(v25);
  }
  sub_18A5F37E8();
}

uint64_t sub_18A6928A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a4;
  sub_18A5F101C(&qword_1EDF6A680);
  v4[6] = swift_task_alloc();
  v5 = type metadata accessor for ContinuousClock();
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A692930()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  ContinuousClock.init()();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_18A69298C;
  sub_18A6A5F64();
  return sub_18A6A6008(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A69298C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A6A5778();
  sub_18A5F4328();
  sub_18A5F416C(v1);
  if (v0)
    sub_18A6A5978();
  sub_18A6A5CA0();
  sub_18A623CE4();
  return sub_18A6A5560();
}

uint64_t sub_18A6929F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  sub_18A6925B0(0);
  sub_18A5F46AC();
  v1 = sub_18A6A68D0();
  sub_18A60FC98(v1, v2, v3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = sub_18A692A78;
  v5 = sub_18A6A5E14(*(_QWORD *)(v0 + 48));
  return sub_18A694D38(v5);
}

uint64_t sub_18A692A78()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A7D40();
  v1 = sub_18A6239A4();
  sub_18A6A7278(v1, &qword_1EDF6A680);
  sub_18A663AB0();
  sub_18A663978();
  return sub_18A6A5B88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A692AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 368) = a6;
  *(_QWORD *)(v7 + 376) = v6;
  *(_BYTE *)(v7 + 536) = a5;
  *(_QWORD *)(v7 + 352) = a3;
  *(_QWORD *)(v7 + 360) = a4;
  *(_QWORD *)(v7 + 336) = a1;
  *(_QWORD *)(v7 + 344) = a2;
  v8 = sub_18A5F40B4();
  *(_QWORD *)(v7 + 384) = v8;
  *(_QWORD *)(v7 + 392) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 400) = sub_18A6A563C();
  *(_QWORD *)(v7 + 408) = sub_18A6A563C();
  *(_QWORD *)(v7 + 416) = sub_18A6A563C();
  *(_QWORD *)(v7 + 424) = sub_18A6A563C();
  *(_QWORD *)(v7 + 432) = sub_18A6A563C();
  *(_QWORD *)(v7 + 440) = sub_18A6A563C();
  *(_QWORD *)(v7 + 448) = sub_18A6A563C();
  sub_18A5F101C(&qword_1EDF6A680);
  *(_QWORD *)(v7 + 456) = sub_18A6A563C();
  *(_QWORD *)(v7 + 464) = sub_18A6A563C();
  *(_QWORD *)(v7 + 472) = sub_18A6A563C();
  *(_QWORD *)(v7 + 480) = sub_18A6A563C();
  *(_QWORD *)(v7 + 488) = sub_18A6A563C();
  *(_QWORD *)(v7 + 496) = sub_18A6A563C();
  *(_QWORD *)(v7 + 504) = sub_18A6A563C();
  *(_QWORD *)(v7 + 512) = sub_18A6A563C();
  sub_18A6A5670();
  return sub_18A5F3A94();
}

void sub_18A692BA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, _QWORD);
  double v18;
  uint64_t v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  if (__sTestOverridesAvailable)
  {
    v2 = v0[42];
    v1 = v0[43];
    v4 = sub_18A68F8C4() == v2 && v3 == v1;
    if (v4)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = sub_18A62FAFC();
      sub_18A5F37A4();
      if ((v5 & 1) == 0)
        goto LABEL_12;
    }
    v6 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v7 = v6;
    if (qword_1EDF6AAF8 != -1)
      v6 = (id)swift_once();
    sub_18A5F3888((uint64_t)v6, sel_postNotificationName_object_);

  }
LABEL_12:
  v8 = v0[63];
  v9 = v0[48];
  sub_18A60FC98(v0[44], v0[64], &qword_1EDF6A680);
  v10 = sub_18A6406BC();
  sub_18A60FC98(v10, v11, &qword_1EDF6A680);
  v12 = sub_18A5F105C(v8, 1, v9);
  v13 = sub_18A6A726C();
  sub_18A6A4B10(v13, v14);
  if (v12 == 1)
  {
    v15 = (v0[47] + OBJC_IVAR____TtC8CloudKit10SyncEngine_earliestStartDateForSchedulerActivities);
    sub_18A5F46AC();
    sub_18A6A6EC4((uint64_t)v15, v16, &qword_1EDF6A680);
    if (sub_18A6A64BC() == 1)
    {
      sub_18A6A7DCC(&qword_1EDF6A680, v0[62]);
    }
    else
    {
      v17 = *(void (**)(uint64_t, _QWORD, _QWORD))(v0[49] + 32);
      v17(v0[56], v0[62], v0[48]);
      Date.timeIntervalSinceNow.getter();
      if (v18 <= 0.0)
      {
        (*(void (**)(_QWORD, _QWORD))(v0[49] + 8))(v0[56], v0[48]);
      }
      else
      {
        sub_18A6A6320();
        if (!v4)
          swift_once();
        v19 = sub_18A5F3BA0();
        sub_18A60990C(v19, (uint64_t)qword_1EDF6A630);
        sub_18A5F3A58();
        sub_18A6A5910();
        v20 = sub_18A6A584C();
        v21 = sub_18A6A5B4C(v15);
        v22 = v0[64];
        if (v21)
        {
          v23 = (uint8_t *)sub_18A5F3830();
          v29 = sub_18A5F3830();
          *(_DWORD *)v23 = 136315138;
          sub_18A5F3E6C();
          sub_18A699D34();
          v25 = v24;
          sub_18A5F37AC();
          v0[41] = sub_18A6A6078(v25, v26, &v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_18A5F37E0();
          sub_18A5F4804();
          sub_18A63E290(&dword_18A5C5000, v15, v20, "%s setting earliestStartDate based on the last provided earliestStartDate", v23);
          sub_18A5F38D8();
          sub_18A5F392C();
        }

        sub_18A5F4804();
        sub_18A6A4B10(v22, &qword_1EDF6A680);
        v27 = v0[64];
        v17(v27, v0[56], v0[48]);
        sub_18A6A6648(v27, 0);
      }
    }
  }
  v28 = objc_msgSend((id)objc_opt_self(), sel_sharedScheduler);
  sub_18A6A7900();
}

uint64_t sub_18A6947AC()
{
  sub_18A623A14();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6947E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_18A6A6A8C();
  v17 = (void *)v16[66];
  v18 = (void *)v16[65];

  sub_18A6A6C74(v19, &qword_1EDF6A680);
  sub_18A6A6D84();
  v31 = v21;
  v32 = v20;
  v33 = v16[52];
  v34 = v16[51];
  v35 = v16[50];
  swift_task_dealloc();
  sub_18A663AB0();
  sub_18A663978();
  sub_18A6A5B54();
  sub_18A6A6C00();
  sub_18A6A73B0();
  sub_18A6A83EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18A6A61C0();
  return v22(v22, v23, v24, v25, v26, v27, v28, v29, v31, v32, v33, v34, v35, a14, a15, a16);
}

uint64_t sub_18A6948B4(uint64_t a1)
{
  return j__swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_18A6948C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  sub_18A5F101C(&qword_1EDF6A680);
  v2[7] = sub_18A6A563C();
  v2[8] = sub_18A6A563C();
  sub_18A6A5670();
  return sub_18A6A54D8();
}

uint64_t sub_18A69494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned __int16 v33;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  NSObject *v59;
  _QWORD *v60;

  sub_18A6A633C();
  a27 = v30;
  a28 = v31;
  a26 = v28;
  a17 = *MEMORY[0x1E0C80C00];
  v32 = (uint64_t *)(v28 + 40);
  sub_18A697558();
  if (v33 < 0x100u || (v33 & 1) == 0)
  {
    swift_task_dealloc();
    sub_18A663AB0();
    return sub_18A6A5644(*(uint64_t (**)(void))(v28 + 8));
  }
  else
  {
    v36 = *v32;
    if (*v32)
      v37 = (void *)_convertErrorToNSError(_:)();
    else
      v37 = 0;
    v38 = CKEarliestStartDateAfterError(v37);
    sub_18A6A79B4();
    if (v29)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v39 = 0;
    }
    else
    {
      v39 = 1;
    }
    v40 = *(_QWORD *)(v28 + 56);
    v41 = sub_18A5F40B4();
    sub_18A5F1010(v40, v39, 1, v41);
    v42 = sub_18A6A7000();
    sub_18A60FCFC(v42, v43, v44);
    if (qword_1EDF6A540 != -1)
      swift_once();
    v45 = *(NSObject **)(v28 + 40);
    v46 = sub_18A5F3BA0();
    sub_18A60990C(v46, (uint64_t)qword_1EDF6A630);
    v47 = v45;
    sub_18A5F3A58();
    v48 = v47;
    sub_18A63E2B8();
    v49 = sub_18A6A584C();
    if (sub_18A6A7094(v49))
    {
      v59 = v45;
      v50 = (uint8_t *)sub_18A5F3830();
      v60 = (_QWORD *)sub_18A5F3830();
      a16 = sub_18A5F3830();
      *(_DWORD *)v50 = 136315394;
      sub_18A5F3E6C();
      sub_18A699D34();
      v52 = v51;
      sub_18A5F37AC();
      v54 = sub_18A6A6FD8(v52, v53, &a16);
      sub_18A6A8368(v54);
      sub_18A6A6F50();
      sub_18A5F3FE4();
      sub_18A5F4804();
      sub_18A6A7454(2112);
      if (v36)
      {
        v55 = v48;
        v56 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v28 + 32) = v56;
        sub_18A6A5740();
      }
      else
      {
        *(_QWORD *)(v28 + 24) = 0;
        sub_18A6A5740();
        v56 = 0;
      }
      *v60 = v56;

      sub_18A6A5608(&dword_18A5C5000, v59, v49, "%s will resubmit scheduler activity after retryable error %@", v50);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    v57 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v28 + 72) = v57;
    *v57 = v28;
    v57[1] = sub_18A694C6C;
    v58 = sub_18A6A5E14(*(_QWORD *)(v28 + 64));
    return sub_18A6A6278(v58);
  }
}

uint64_t sub_18A694C6C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A694CD0()
{
  uint64_t v0;

  sub_18A6A4B10(*(_QWORD *)(v0 + 64), &qword_1EDF6A680);
  swift_task_dealloc();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A694D38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[12] = a1;
  v2[13] = v1;
  v3 = sub_18A5F40B4();
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = sub_18A6A563C();
  v2[17] = sub_18A6A563C();
  sub_18A5F101C(&qword_1EDF6A680);
  v2[18] = sub_18A6A563C();
  v2[19] = sub_18A6A563C();
  v2[20] = sub_18A6A563C();
  sub_18A6A5670();
  return sub_18A5F3A94();
}

#error "18A6950FC: call analysis failed (funcsize=489)"

uint64_t sub_18A695658()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 176) = v0;
  sub_18A6A5DDC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A695698()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[13];
  sub_18A68F8C4();
  v0[23] = v2;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_priority);
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = sub_18A69571C;
  v5 = sub_18A6A6F44();
  return sub_18A692AC0(v5, v6, v7, v3, 0, v8);
}

uint64_t sub_18A69571C()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37A4();
  sub_18A5F37E0();
  return sub_18A5F3EA4();
}

uint64_t sub_18A695768()
{
  uint64_t v0;

  sub_18A6A4B10(*(_QWORD *)(v0 + 160), &qword_1EDF6A680);
  sub_18A6A7674();
  sub_18A663AB0();
  sub_18A663978();
  sub_18A6A5B54();
  sub_18A6A6C00();
  return sub_18A6A5B88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6957B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[8] = v0;
  v1[9] = *v0;
  sub_18A5F101C(&qword_1EDF6A680);
  v1[10] = sub_18A6A563C();
  v1[11] = sub_18A6A563C();
  v2 = sub_18A5F40B4();
  v1[12] = v2;
  v1[13] = *(_QWORD *)(v2 - 8);
  v1[14] = sub_18A6A563C();
  v1[15] = sub_18A6A563C();
  v1[16] = sub_18A6A563C();
  sub_18A6A5670();
  return sub_18A5F3A94();
}

uint64_t sub_18A69584C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t (*v23)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v32)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  sub_18A623E50();
  v11 = v10[11];
  v12 = v10[8] + OBJC_IVAR____TtC8CloudKit10SyncEngine_lastForegroundTriggeredFetchDate;
  sub_18A5F46AC();
  sub_18A60FC98(v12, v11, &qword_1EDF6A680);
  sub_18A6A5EB4(v11);
  if (v13)
  {
    sub_18A6A4B10(v10[11], &qword_1EDF6A680);
  }
  else
  {
    v15 = v10[15];
    v14 = v10[16];
    v16 = v10[14];
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v10[13] + 32))(v14, v10[11], v10[12]);
    sub_18A6A26E0(v17, 55.0, 77.0);
    static Date.+ infix(_:_:)();
    sub_18A6A7E48();
    sub_18A62FE8C();
    v18 = static Date.< infix(_:_:)();
    sub_18A6A6DC4(v16);
    sub_18A6A6DC4(v15);
    sub_18A6A6DC4(v14);
    if ((v18 & 1) != 0)
      goto LABEL_7;
  }
  v19 = v10[12];
  v20 = v10[10];
  sub_18A6A5E58(*(id *)(*(_QWORD *)(v10[8] + 128) + 16), sel_setNeedsToFetchDatabaseChanges_);
  sub_18A6A7E48();
  sub_18A5F1010(v20, 0, 1, v19);
  sub_18A5F40A4();
  sub_18A6A51C0(v20, v12, &qword_1EDF6A680);
  sub_18A6A6B7C();
  sub_18A68FCB8();
  if ((v21 & 1) != 0)
  {
    v40 = (char *)&dword_1EDF6B1B8 + dword_1EDF6B1B8;
    swift_retain();
    v22 = (_QWORD *)sub_18A6A6668();
    v10[17] = v22;
    *v22 = v10;
    v22[1] = sub_18A695A20;
    sub_18A623D08();
    return v23(v23, v24, v25, v26, v27, v28, v29, v30, v40, a10);
  }
LABEL_7:
  sub_18A6A7554();
  sub_18A663AB0();
  sub_18A663978();
  sub_18A6A5B54();
  sub_18A6A6C00();
  sub_18A623D08();
  return v32(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10);
}

uint64_t sub_18A695A20()
{
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A695A60()
{
  uint64_t v0;

  sub_18A6A7554();
  sub_18A663AB0();
  sub_18A663978();
  sub_18A6A5B54();
  sub_18A6A6C00();
  return sub_18A6A5B88(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A695AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = a3;
  v4 = sub_18A6A847C();
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = sub_18A5F3CBC();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A695AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  sub_18A6A5538();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v25 = sub_18A5F3BA0();
  v26 = sub_18A60990C(v25, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  sub_18A6A5910();
  v27 = sub_18A6A58AC();
  if (sub_18A6A5810(v26))
  {
    v28 = (uint8_t *)sub_18A5F3830();
    sub_18A5F3830();
    sub_18A6A7A08();
    *(_DWORD *)v28 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v30 = v29;
    sub_18A5F37AC();
    *(_QWORD *)(v22 + 88) = sub_18A6A5948(v30, v31, &a11);
    sub_18A6A5D8C();
    sub_18A610384();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v26, v27, "%s will perform opportunistic fetch on application foreground", v28);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A5F4804();

  static Duration.seconds(_:)();
  sub_18A6A6B40();
  v32 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v22 + 136) = v32;
  *v32 = v22;
  v32[1] = sub_18A695C74;
  sub_18A6A80BC();
  return sub_18A6A6374(v33, v34, v35, v36, v37, v38);
}

uint64_t sub_18A695C74()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A6A5BE8();
  sub_18A5F416C(v1);
  if (v0)
    sub_18A6A5978();
  sub_18A6A5D14();
  sub_18A5F3840();
  return sub_18A5F4708();
}

uint64_t sub_18A695CDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  const void *v9;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  sub_18A64A1F4();
  v14 = v1;
  v15 = v2;
  v13 = v0;
  static SyncEngine.defaultOperationGroup()();
  v0[18] = v3;
  sub_18A6A708C(0xD000000000000026, 0x800000018A8409A0);
  sub_18A6A7AB0();
  sub_18A6A8148((unint64_t *)&qword_1ECD967B8);
  v4 = sub_18A6A6F1C();
  v0[19] = sub_18A6A7A70();
  v5 = v4;
  sub_18A5F3898();
  sub_18A5F3FAC();
  sub_18A6A8280();
  if (v6 && (sub_18A6A59F8() & 1) == 0)
  {
    sub_18A5F3FE4();
  }
  else
  {
    sub_18A66CBD0();
    v11 = 0;
    v12 = 2;
    sub_18A6A70EC((uint64_t)&v11);
    sub_18A5F3FE4();
    sub_18A6A6C64();
  }

  sub_18A6A64CC();
  sub_18A5F37A4();
  sub_18A5F37E0();
  sub_18A6A629C();
  v7 = v5;
  sub_18A5F3898();
  sub_18A5F3FAC();
  v8 = (_QWORD *)sub_18A6A68C0();
  v0[20] = v8;
  *v8 = v0;
  v8[1] = sub_18A695E24;
  v9 = (const void *)sub_18A6A7410();
  return sub_18A68085C(v9);
}

uint64_t sub_18A695E24()
{
  uint64_t v0;

  sub_18A6239A4();
  if (v0)
    sub_18A6A5978();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A695E74()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = *(void **)(v0 + 144);

  sub_18A654258();
  sub_18A654258();
  sub_18A654258();
  swift_task_dealloc();
  v2 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A5F4680(v2);
}

void sub_18A695EC8(void *a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  char v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v3 = v1;
  v4 = objc_msgSend(a1, sel_resolvedConfiguration);
  v5 = objc_msgSend(v4, sel_container);

  if (v5)
  {
    v23 = sub_18A5F3888(v6, sel_containerID);

    if (v23)
    {
      sub_18A5F3B04((uint64_t)v23, &qword_1EDF6A970);
      v8 = v7;
      v9 = objc_msgSend(*(id *)(v3 + 144), sel_containerID);
      static NSObject.== infix(_:_:)();
      sub_18A66CD70();
      if ((v8 & 1) == 0)
      {
        sub_18A6A647C(v23);
        return;
      }
      if (qword_1EDF6A540 != -1)
        swift_once();
      v10 = sub_18A5F3BA0();
      sub_18A60990C(v10, (uint64_t)qword_1EDF6A630);
      sub_18A5F3A58();
      Logger.logObject.getter();
      v11 = sub_18A6A6880();
      if (sub_18A6A5660(v11))
      {
        v12 = (uint8_t *)sub_18A5F3830();
        v24 = sub_18A5F3830();
        sub_18A6A5824(4.8149e-34);
        sub_18A6A5BBC();
        sub_18A6A5730();
        sub_18A6A57C4(12, v13, &v24);
        sub_18A6A5870();
        sub_18A6A54D0();
        sub_18A643358();
        sub_18A63E290(&dword_18A5C5000, v9, v2, "%s notified that a share was accepted for our container", v12);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

      sub_18A6A54D0();
      v14 = sub_18A6A5E58(*(id *)(*(_QWORD *)(v3 + 128) + 16), sel_setNeedsToFetchDatabaseChanges_);
      sub_18A6A8100(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  sub_18A623AB8();
}

void sub_18A6960C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *v1;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v3);
  sub_18A6A7A34();
  if (*((_BYTE *)v1 + 392) == 1 && !v1[48])
  {
    v4 = sub_18A623B70();
    sub_18A6239F8(v0, v5, v6, v4);
    sub_18A62F924(&qword_1EDF6A4B8, (uint64_t (*)(uint64_t))type metadata accessor for SyncEngine, (uint64_t)&protocol conformance descriptor for SyncEngine);
    v8 = v7;
    v9 = (_QWORD *)sub_18A5F37B4();
    v9[2] = v1;
    v9[3] = v8;
    v9[4] = v1;
    v9[5] = v2;
    v10 = sub_18A5F3A58();
    sub_18A6A8134(v10, (uint64_t)&unk_1EDF6C718);
    sub_18A68CD94(v11);
  }
  sub_18A5F3814();
}

uint64_t sub_18A696180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A6961E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  static Duration.seconds(_:)();
  sub_18A6A6B40();
  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 56) = v1;
  sub_18A6A7718(v1, (uint64_t)sub_18A696240);
  sub_18A6A5F64();
  return sub_18A6A69D0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A696240()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A6A5778();
  sub_18A5F4328();
  sub_18A5F416C(v1);
  if (v0)
    sub_18A6A5978();
  sub_18A6A5CA0();
  sub_18A623CE4();
  return sub_18A6A5560();
}

void sub_18A6962A4()
{
  uint64_t v0;
  void *v1;
  id v2;

  sub_18A68CD94(0);
  v1 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 64) = v1;
  v2 = objc_msgSend(v1, sel_processInfo);
  sub_18A6A78C4();
}

uint64_t sub_18A696308(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  uint64_t v15;
  _QWORD *v17;

  *(_QWORD *)(v15 + 72) = objc_msgSend(v14, sel_beginActivityWithOptions_reason_, 0xFFFFFFLL, a1);

  sub_18A6A6DDC((uint64_t)&dword_1EDF6B1D8);
  sub_18A5F3E6C();
  v17 = (_QWORD *)sub_18A6A563C();
  *(_QWORD *)(v15 + 80) = v17;
  *v17 = v15;
  v17[1] = sub_18A696384;
  return sub_18A5F4134(a9);
}

uint64_t sub_18A696384()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6963BC()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 64), sel_processInfo);
  sub_18A623D9C(v1, sel_endActivity_);

  sub_18A61A798();
  sub_18A663978();
  return sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A696418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 96) = a2;
  *(_QWORD *)(v3 + 104) = a3;
  return sub_18A5F4434();
}

uint64_t sub_18A69642C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  const void *v42;

  sub_18A6A6A8C();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (qword_1EDF6A540 != -1)
    swift_once();
  v27 = sub_18A5F3BA0();
  v28 = sub_18A60990C(v27, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  sub_18A6A5910();
  v29 = sub_18A6A58AC();
  if (sub_18A6A5810(v28))
  {
    v30 = (uint8_t *)sub_18A5F3830();
    a12 = sub_18A5F3830();
    *(_DWORD *)v30 = 136315138;
    sub_18A5F3E6C();
    sub_18A699D34();
    v32 = v31;
    sub_18A5F37AC();
    v24[11] = sub_18A6A5948(v32, v33, &a12);
    sub_18A6A5D8C();
    sub_18A610384();
    sub_18A5F4804();
    sub_18A63E290(&dword_18A5C5000, v28, v29, "%s performing push sync", v30);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  sub_18A5F4804();

  static SyncEngine.defaultOperationGroup()();
  v24[14] = v34;
  v35 = sub_18A6A78DC();
  sub_18A6A708C(v35, v36);
  sub_18A6A7AB0();
  sub_18A6A8148((unint64_t *)&qword_1ECD967B8);
  v37 = sub_18A6A6F1C();
  v24[15] = sub_18A6A7A70();
  v38 = v37;
  sub_18A5F3898();
  sub_18A5F3FAC();
  sub_18A6A8280();
  if (v39 && (sub_18A6A59F8() & 1) == 0)
  {
    sub_18A5F3FE4();
  }
  else
  {
    sub_18A66CBD0();
    a12 = 0;
    a13 = 2;
    sub_18A6A70EC((uint64_t)&a12);
    sub_18A5F3FE4();
    sub_18A6A6C64();
  }

  sub_18A6A64CC();
  sub_18A5F37A4();
  sub_18A5F37E0();
  sub_18A6A629C();
  v40 = v38;
  sub_18A5F3898();
  sub_18A5F3FAC();
  v41 = (_QWORD *)sub_18A6A68C0();
  v24[16] = v41;
  *v41 = v24;
  v41[1] = sub_18A696694;
  sub_18A6A7410();
  sub_18A6A61C0();
  return sub_18A68085C(v42);
}

uint64_t sub_18A696694()
{
  uint64_t v0;

  sub_18A6239A4();
  if (v0)
    sub_18A6A5978();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A6966E4()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = *(void **)(v0 + 112);

  sub_18A654258();
  sub_18A654258();
  sub_18A654258();
  v2 = (uint64_t (*)(void))sub_18A6A5838();
  return sub_18A5F4680(v2);
}

uint64_t sub_18A696730()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A696744()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;

  sub_18A6A5538();
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  v2 = v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    sub_18A6A7B64();
    v5 = 32;
    do
    {
      v6 = *(id *)(v2 + v5);
      sub_18A6A7B78();
      sub_18A6A7340();
      sub_18A6A797C();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      sub_18A6A7B70();
      v5 += 16;
      --v3;
    }
    while (v3);
    v7 = v23;
    sub_18A5F3FE4();
  }
  else
  {
    sub_18A5F3FE4();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v8 = sub_18A668318(v7);
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  v10 = v9;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    v12 = (_BYTE *)(v10 + 40);
    do
    {
      v13 = (void *)*((_QWORD *)v12 - 1);
      if (*v12 == 1)
        v14 = v13;
      else
        v15 = objc_msgSend(v13, sel_zoneID);
      sub_18A6A7B78();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      sub_18A6A7B70();
      v12 += 16;
      --v11;
    }
    while (v11);
    v16 = v4;
    sub_18A5F3A8C();
  }
  else
  {
    sub_18A5F3A8C();
    v16 = MEMORY[0x1E0DEE9D8];
  }
  v0[2] = sub_18A6682F4(v16);
  sub_18A6A7E84();
  v18 = sub_18A6682F4(v17);
  sub_18A6759EC(v18);
  v0[4] = sub_18A6668F4(v0[2]);
  sub_18A5F37A4();
  v0[5] = sub_18A666900(v8);
  sub_18A5F3FE4();
  v19 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v19;
  *v19 = v0;
  v19[1] = sub_18A696914;
  sub_18A6A6F44();
  sub_18A663918();
  return sub_18A696970(v20, v21);
}

uint64_t sub_18A696914()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 56) = v0;
  sub_18A6A5DDC();
  sub_18A5F37AC();
  sub_18A5F3AA0();
  return sub_18A5F3EA4();
}

uint64_t sub_18A696964()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56));
}

uint64_t sub_18A696970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return sub_18A5F4434();
}

uint64_t sub_18A696988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void);

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  v26 = sub_18A6A71B4();
  v22[6] = v26;
  if (v26)
  {
    v27 = v26;
    v28 = v22[4];
    v29 = v28 >> 62;
    if (v28 >> 62)
    {
      sub_18A6239CC();
      v52 = sub_18A623AB0();
      sub_18A5F3FE4();
      if (v52)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    v30 = v22[3];
    if (v30 >> 62)
      goto LABEL_28;
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      while (1)
      {
LABEL_6:
        v31 = swift_bridgeObjectRetain();
        v32 = sub_18A6682F4(v31);
        if (v29)
        {
          sub_18A5F3898();
          v29 = sub_18A6A8420();
          sub_18A5F37A4();
        }
        else
        {
          v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v39 = MEMORY[0x1E0DEE9D8];
        if (!v29)
          break;
        a11 = MEMORY[0x1E0DEE9D8];
        sub_18A6A7B64();
        if ((v29 & 0x8000000000000000) == 0)
        {
          a10 = v32;
          v40 = 0;
          v41 = v22[4] + 32;
          do
          {
            if ((v28 & 0xC000000000000001) != 0)
              v42 = (id)MEMORY[0x18D76CEB0](v40, v22[4]);
            else
              v42 = *(id *)(v41 + 8 * v40);
            ++v40;
            v43 = objc_msgSend(v42, sel_zoneID);
            sub_18A6A79B4();
            sub_18A6A7B78();
            sub_18A6A7340();
            sub_18A6A7988();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            sub_18A6A7B70();
          }
          while (v29 != v40);
          v39 = a11;
          break;
        }
        __break(1u);
LABEL_28:
        sub_18A5F3898();
        v53 = _CocoaArrayWrapper.endIndex.getter();
        sub_18A5F37A4();
        if (!v53)
          goto LABEL_29;
      }
      v44 = v22[5];
      v45 = sub_18A675190(v39, v32);
      v46 = sub_18A6668F4(v45);
      sub_18A5F37A4();
      if (*(_QWORD *)(v44 + 160))
      {
        v47 = v22[4];
        v48 = (_QWORD *)sub_18A5F37B4();
        v22[7] = v48;
        v48[2] = v46;
        v48[3] = v47;
        v48[4] = v27;
        v62 = (uint64_t (*)(void))((char *)&dword_1EDF6C618 + dword_1EDF6C618);
        sub_18A6239CC();
        sub_18A64A54C();
        v49 = (_QWORD *)sub_18A6A60C4();
        v22[8] = v49;
        *v49 = v22;
        v49[1] = sub_18A696CE0;
        v50 = sub_18A6A5E14((uint64_t)&unk_1EDF6C610);
        return sub_18A6A5698(v50, (uint64_t)v48, v62);
      }
      sub_18A5F3AA0();
    }
LABEL_29:
    swift_release();
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v33 = sub_18A5F3BA0();
    v34 = sub_18A60990C(v33, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v35 = sub_18A6A6454();
    if (sub_18A6A55D0(v35))
    {
      v36 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v36 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v37 = sub_18A5F37AC();
      v22[2] = sub_18A6A5704(v37, v38, &a11);
      sub_18A6A578C();
      sub_18A5F394C();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v34, v23, "%s not getting related bundle IDs for deallocated engine", v36);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

  }
  sub_18A663918();
  return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18A696CE0()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  *(_QWORD *)(v1 + 72) = v0;
  sub_18A6A5DDC();
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

uint64_t sub_18A696D2C()
{
  uint64_t v0;

  swift_release();
  return sub_18A623BC8(*(_QWORD *)(v0 + 72), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A696D58(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a3;
  *(_OWORD *)(v5 + 48) = *a2;
  return swift_task_switch();
}

uint64_t sub_18A696D7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  if (*(_QWORD *)(v0 + 48))
  {
    v1 = *(_QWORD *)(v0 + 56);
    sub_18A5F42C0();
    v5 = (uint64_t (*)(uint64_t))(**(int **)(v1 + 8) + *(_QWORD *)(v1 + 8));
    sub_18A6A68DC();
    v2 = (_QWORD *)sub_18A6A6F6C();
    *(_QWORD *)(v0 + 64) = v2;
    *v2 = v0;
    v2[1] = sub_18A696E20;
    v3 = sub_18A6A5E14(*(_QWORD *)(v0 + 24));
    return v5(v3);
  }
  else
  {
    **(_QWORD **)(v0 + 16) = 0;
    return sub_18A61A6C8(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_18A696E20(uint64_t a1)
{
  sub_18A6A5A8C(a1);
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A696E4C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 72);
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

void sub_18A696E80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t aBlock[3];
  void *ObjectType;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  sub_18A5F46AC();
  sub_18A60FC98(v0 + 272, (uint64_t)aBlock, &qword_1EDF6A278);
  v2 = ObjectType;
  sub_18A6A7F58((uint64_t)aBlock);
  if (!v2)
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v3 = sub_18A5F3BA0();
    sub_18A60990C(v3, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.info.getter();
    if (sub_18A6A5810(v4))
    {
      v6 = (uint8_t *)sub_18A5F3830();
      aBlock[0] = sub_18A5F3830();
      *(_DWORD *)v6 = 136315138;
      sub_18A623E28();
      sub_18A699D34();
      v8 = v7;
      sub_18A61A878();
      v18 = sub_18A6A5844(v8, v9, aBlock);
      sub_18A6A578C();
      sub_18A5F38AC();
      sub_18A6A54D0();
      sub_18A63E290(&dword_18A5C5000, v4, v5, "%s starting to listen for identity updates", v6);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A6A54D0();

    sub_18A5F40A4();
    *(_BYTE *)(v0 + 266) = 1;
    v10 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v16 = sub_18A6A3834;
    v17 = v1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_18A6973A8;
    ObjectType = &unk_1E1F5F120;
    v11 = _Block_copy(aBlock);
    sub_18A623E28();
    sub_18A6A6660();
    v12 = objc_msgSend(v10, sel_addObserverForName_object_queue_usingBlock_, CFSTR("CKIdentityUpdateNotification"), 0, 0, v11);
    _Block_release(v11);

    ObjectType = (void *)swift_getObjectType();
    aBlock[0] = (uint64_t)v12;
    sub_18A5F40A4();
    sub_18A6A8154((uint64_t)aBlock, v13, &qword_1EDF6A278);
    sub_18A64A4D4();
  }
  sub_18A6A68F4();
}

uint64_t sub_18A697114(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDF6A540 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  sub_18A60990C(v6, (uint64_t)qword_1EDF6A630);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v19 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_retain();
    sub_18A699D34();
    v12 = v11;
    v14 = v13;
    swift_release();
    v18 = sub_18A609924(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_18A5C5000, v7, v8, "%s received identity update while waiting", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D76E86C](v10, -1, -1);
    MEMORY[0x18D76E86C](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v15 = type metadata accessor for TaskPriority();
  sub_18A5F1010((uint64_t)v5, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a2;
  swift_retain();
  sub_18A670ABC((uint64_t)v5, (uint64_t)&unk_1EDF6C388, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_18A697364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_18A69737C()
{
  uint64_t v0;

  sub_18A69744C();
  sub_18A6925C4();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A6973A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_18A69744C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  sub_18A5F46AC();
  sub_18A60FC98(v0 + 272, (uint64_t)&v3, &qword_1EDF6A278);
  if (*((_QWORD *)&v4 + 1))
  {
    sub_18A612E68(&v3, &v5);
    sub_18A5F40A4();
    *(_BYTE *)(v0 + 266) = 0;
    v3 = 0u;
    v4 = 0u;
    sub_18A5F40A4();
    sub_18A6A8154((uint64_t)&v3, v1, &qword_1EDF6A278);
    sub_18A64A4D4();
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    sub_18A608B00(&v5, v6);
    _bridgeAnythingToObjectiveC<A>(_:)();
    sub_18A623D9C(v2, sel_removeObserver_);

    sub_18A61A798();
    sub_18A608B60((uint64_t)&v5);
  }
  else
  {
    sub_18A6A4B10((uint64_t)&v3, &qword_1EDF6A278);
  }
}

void sub_18A697558()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  void *v43;
  _QWORD v44[4];
  __int128 v45;
  _QWORD v46[2];
  _QWORD v47[3];
  uint64_t v48;
  unint64_t v49;

  sub_18A612EB8();
  v1 = v0;
  v2 = sub_18A6A7040();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  sub_18A6639EC();
  if (v1)
  {
    v46[0] = v1;
    sub_18A5F42A0();
    sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
    v4 = v1;
    v5 = v46;
    sub_18A62FE04();
    _BridgedStoredNSError.code.getter();
    if (v49 > 0x24)
      goto LABEL_6;
    if (((1 << v49) & 0x1000A002D8) != 0)
    {
LABEL_8:

      goto LABEL_47;
    }
    if (v49 != 2)
    {
      if (v49 != 20)
      {
LABEL_6:
        if (v49 - 110 <= 5)
          sub_18A6A7F80();
        goto LABEL_8;
      }
      goto LABEL_8;
    }
    related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v4);
    if (!v6)
    {
      if (qword_1EDF6A540 != -1)
        goto LABEL_49;
      goto LABEL_42;
    }
    v7 = v6;
    v42 = 0;
    sub_18A6A75C4();
    v38 = v8;
    sub_18A6A5EDC();
    v4 = (id)(v10 & v9);
    v39 = (unint64_t)(v11 + 63) >> 6;
    sub_18A6A608C();
    v40 = v12;
    v41 = v13;
    if (!v4)
      goto LABEL_14;
LABEL_12:
    sub_18A6A7BB0();
    v15 = v14 | (v42 << 6);
LABEL_13:
    sub_18A62F8E8(*(_QWORD *)(v7 + 48) + 40 * v15, (uint64_t)v44);
    *((_QWORD *)&v45 + 1) = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15);
    v16 = *((id *)&v45 + 1);
    while (1)
    {
      sub_18A60FCFC((uint64_t)v44, (uint64_t)v46, &qword_1EDF6A0A8);
      if (!v47[1])
      {
        sub_18A6A7B04((uint64_t)v47);
        sub_18A6A6ACC();
        goto LABEL_47;
      }
      v24 = v48;
      v44[0] = v48;
      sub_18A6A71DC();
      sub_18A6A71DC();
      sub_18A5F101C(&qword_1EDF6A9D8);
      if (sub_18A6A5E20())
      {
        sub_18A6A7FC8();
        v25 = v43;
      }
      else
      {
        sub_18A6A7E2C();
        v44[0] = v24;
        sub_18A6A71DC();
        if ((sub_18A6A5E20() & 1) == 0)
          goto LABEL_51;
        sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18A83AC30;
        v27 = sub_18A6A7FC0();
        sub_18A6A84C8(v27, v28);
        *(_QWORD *)(inited + 56) = v40;
        Dictionary.init(dictionaryLiteral:)();
        sub_18A6A89EC();
        sub_18A5F37A4();
        sub_18A6A83F4();
        sub_18A6A7FC8();
        v25 = v43;
        sub_18A6A72F4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      }
      sub_18A6A7E2C();
      v29 = v25;
      v5 = sub_18A697558(v25);
      sub_18A6A7FC8();

      if ((v5 & 1) != 0)
      {
        sub_18A6A7B04((uint64_t)v47);
        swift_release();
        sub_18A61C6E8((uint64_t)v46);
        goto LABEL_47;
      }
      sub_18A61C6E8((uint64_t)v46);
      v7 = v41;
      if (v4)
        goto LABEL_12;
LABEL_14:
      if (__OFADD__(v42, 1))
        break;
      sub_18A6A7B0C();
      if (v17 != v18)
      {
        sub_18A6A7B18();
        if (!v20)
        {
          sub_18A6A7B24(v19);
          if (v22 >= v39)
            goto LABEL_32;
          v20 = *(_QWORD *)(v38 + 8 * v22);
          if (!v20)
          {
            v42 = v22;
            if (v21 + 2 >= v39)
              goto LABEL_32;
            v20 = *(_QWORD *)(v38 + 8 * (v21 + 2));
            if (v20)
            {
              v19 = v21 + 2;
              goto LABEL_18;
            }
            v22 = v21 + 3;
            v42 = v21 + 2;
            if (v21 + 3 >= v39)
              goto LABEL_32;
            v20 = *(_QWORD *)(v38 + 8 * v22);
            if (!v20)
            {
              while (!__OFADD__(v22, 1))
              {
                sub_18A6A7B0C();
                if (v17 == v18)
                {
                  sub_18A6A7B24(v39 - 1);
                  goto LABEL_32;
                }
                sub_18A6A7B18();
                v22 = v23 + 1;
                if (v20)
                  goto LABEL_18;
              }
              __break(1u);
LABEL_51:
              sub_18A6A7E2C();
              v44[0] = 0;
              v44[1] = 0xE000000000000000;
              sub_18A6A6D58();
              v37 = sub_18A6A5F0C();
              sub_18A6A5DFC(v37, (uint64_t)"Unable to convert error to CKError: ");
              swift_getErrorValue();
              DefaultStringInterpolation.appendInterpolation<A>(_:)();
              sub_18A6A5EFC();
              sub_18A6A5B5C();
              sub_18A6A7F8C();
            }
          }
          v19 = v22;
        }
LABEL_18:
        v4 = (id)((v20 - 1) & v20);
        v15 = __clz(__rbit64(v20)) + (v19 << 6);
        sub_18A6A7B24(v19);
        goto LABEL_13;
      }
LABEL_32:
      v4 = 0;
      v45 = 0u;
      memset(v44, 0, sizeof(v44));
    }
    __break(1u);
LABEL_49:
    swift_once();
LABEL_42:
    v30 = sub_18A5F3BA0();
    sub_18A60990C(v30, (uint64_t)qword_1EDF6A630);
    v31 = sub_18A6A7AD0();
    sub_18A6A6F3C();
    v32 = sub_18A6A68E4();
    if (os_log_type_enabled(v5, v32))
    {
      v33 = (uint8_t *)sub_18A5F3830();
      v34 = (_QWORD *)sub_18A5F3830();
      *(_DWORD *)v33 = 138412290;
      v35 = v4;
      v36 = sub_18A6A6F24();
      v46[0] = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v34 = v36;

      sub_18A63E290(&dword_18A5C5000, v5, v32, "BUG IN CLOUDKIT: Could not get partial errors from CKError.partialFailure: %@", v33);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

  }
LABEL_47:
  sub_18A5F37E8();
}

#error "18A697BC4: call analysis failed (funcsize=27)"

void sub_18A697BF8()
{
  uint64_t v0;
  char *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t inited;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD v91[2];
  __int128 v92;
  uint64_t v93;
  NSObject *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102[3];
  uint64_t v103;

  sub_18A612EB8();
  v99 = v0;
  v3 = v2;
  v4 = sub_18A6A7040();
  v98 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_18A6639EC();
  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v91 - v9;
  v11 = sub_18A5F40B4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = ((char *)v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v91 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v91 - v19;
  if (!v3)
    goto LABEL_65;
  v97 = v4;
  v91[0] = v3;
  v21 = (void *)_convertErrorToNSError(_:)();
  v22 = CKEarliestStartDateAfterError(v21);

  if (v22)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18A6A74F4((uint64_t)v10, (uint64_t)v18);
    sub_18A6A663C((uint64_t)v10, 0);
    v23 = sub_18A5F105C((uint64_t)v10, 1, v11);
    v24 = v99;
    if ((_DWORD)v23 != 1)
    {
      sub_18A6A74F4((uint64_t)v20, (uint64_t)v10);
      if (qword_1EDF6A540 == -1)
        goto LABEL_5;
      goto LABEL_67;
    }
  }
  else
  {
    v23 = sub_18A6A663C((uint64_t)v10, 1);
    v24 = v99;
  }
  sub_18A6A6C74(v23, &qword_1EDF6A680);
  v34 = (void *)v91[0];
  while (1)
  {
    v102[0] = v34;
    sub_18A5F42A0();
    sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
    v96 = v38;
    _BridgedStoredNSError.code.getter();
    if (v103 == 115)
    {
      if (qword_1EDF6A540 != -1)
        swift_once();
      v83 = sub_18A5F3BA0();
      sub_18A60990C(v83, (uint64_t)qword_1EDF6A630);
      sub_18A5F3A58();
      Logger.logObject.getter();
      v84 = sub_18A6A584C();
      if (sub_18A6A5660(v84))
      {
        v85 = (uint8_t *)sub_18A5F3830();
        v102[0] = (id)sub_18A5F3830();
        sub_18A6A7050(4.8149e-34);
        sub_18A6A785C();
        v87 = v86;
        sub_18A6A6ACC();
        v89 = sub_18A6A5948(v87, v88, (uint64_t *)v102);
        sub_18A6A6B50(v89);
        sub_18A610384();
        sub_18A6A54D0();
        sub_18A63E290(&dword_18A5C5000, v15, (os_log_type_t)v1, "%s setting isWaitingForAccountToVerifyTerms from last error", v85);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

      sub_18A6A54D0();
      sub_18A5F40A4();
      *(_BYTE *)(v24 + 265) = 1;
      goto LABEL_65;
    }
    if (v103 == 9 || v103 == 36)
    {
      sub_18A5F46AC();
      if (*(_QWORD *)(v24 + 304))
      {
        if (qword_1EDF6A540 != -1)
          swift_once();
        v65 = sub_18A5F3BA0();
        v66 = sub_18A60990C(v65, (uint64_t)qword_1EDF6A630);
        v67 = v34;
        sub_18A5F3A58();
        v68 = v67;
        v69 = sub_18A6A72B0();
        v70 = static os_log_type_t.info.getter();
        if (sub_18A6A5B4C(v69))
        {
          v71 = sub_18A5F3830();
          v72 = (_QWORD *)sub_18A5F3830();
          v103 = sub_18A5F3830();
          *(_DWORD *)v71 = 136315394;
          sub_18A6A71BC();
          sub_18A6A785C();
          sub_18A6A7AC0();
          v101 = sub_18A6A57C4(v66, v73, &v103);
          sub_18A6A5940();
          sub_18A643358();
          sub_18A6A54D0();
          *(_WORD *)(v71 + 12) = 2112;
          v74 = v15;
          v75 = _swift_stdlib_bridgeErrorToNSError();
          v101 = v75;
          sub_18A6A5940();
          *v72 = v75;

          sub_18A6A5608(&dword_18A5C5000, v69, v70, "%s unsetting account info after account unavailability error: %@", (uint8_t *)v71);
          sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
          sub_18A5F38D8();
          sub_18A5F392C();
        }
        sub_18A6A54D0();

        sub_18A689AF4(0);
        goto LABEL_65;
      }
LABEL_62:

      goto LABEL_65;
    }
    if (v103 == 110)
      break;
    if (v103 == 111)
    {
      sub_18A696E80();
      goto LABEL_62;
    }
    if (v103 != 2)
      goto LABEL_62;
    related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v34);
    if (!v39)
      goto LABEL_62;
    v20 = v39;
    v34 = 0;
    sub_18A6A75C4();
    v94 = v40;
    sub_18A6A5EDC();
    v12 = v42 & v41;
    v95 = (void *)((unint64_t)(v43 + 63) >> 6);
    v15 = &qword_1EDF6A9D8;
    v93 = *MEMORY[0x1E0CB2D50];
    v92 = xmmword_18A83AC30;
    sub_18A6A608C();
    sub_18A6A7B24(v44);
    if (v12)
    {
LABEL_18:
      sub_18A6A76A8();
      goto LABEL_41;
    }
    while (!__OFADD__(v34, 1))
    {
      sub_18A6A7B0C();
      if (v46 == v47)
        goto LABEL_61;
      sub_18A6A7B18();
      v34 = (void *)v48;
      if (!v49)
      {
        v34 = (void *)(v48 + 1);
        sub_18A6A6FA8();
        if (v46 == v47)
          goto LABEL_61;
        sub_18A6A6F98();
        if (!v51)
        {
          v34 = (void *)(v50 + 2);
          sub_18A6A6FA8();
          if (v46 == v47)
            goto LABEL_61;
          sub_18A6A6F98();
          if (!v53)
          {
            v34 = (void *)(v52 + 3);
            sub_18A6A6FA8();
            if (v46 == v47)
              goto LABEL_61;
            sub_18A6A6F98();
            if (!v54)
            {
              sub_18A6A7B0C();
              if (v46 == v47)
              {
LABEL_61:
                swift_release();
                v34 = (void *)v91[0];
                goto LABEL_62;
              }
              sub_18A6A7B18();
              if (!v56)
              {
                while (1)
                {
                  v34 = (void *)(v55 + 1);
                  if (__OFADD__(v55, 1))
                    break;
                  sub_18A6A6FA8();
                  if (v46 == v47)
                    goto LABEL_61;
                  sub_18A6A6F98();
                  v55 = v57 + 1;
                  if (v58)
                    goto LABEL_40;
                }
                __break(1u);
                goto LABEL_69;
              }
              v34 = (void *)v55;
            }
          }
        }
      }
LABEL_40:
      sub_18A6A750C();
LABEL_41:
      v24 = *(_QWORD *)(*((_QWORD *)v20 + 7) + 8 * v45);
      v102[0] = (id)v24;
      sub_18A6A65F8();
      sub_18A6A65F8();
      sub_18A6A65F8();
      sub_18A6A72EC();
      if (sub_18A6A5E20())
      {
        sub_18A6A6AC4();
        v59 = (void *)v101;

      }
      else
      {
        v8 = v1;
        v60 = v15;
        sub_18A6A6F7C();
        v102[0] = (id)v24;
        sub_18A6A65F8();
        v61 = v97;
        if ((sub_18A6A5E20() & 1) == 0)
        {
          sub_18A6A6F7C();
          v102[0] = 0;
          v102[1] = (id)0xE000000000000000;
          sub_18A6A6D58();
          v90 = sub_18A6A5F0C();
          sub_18A6A5DFC(v90, (uint64_t)"Unable to convert error to CKError: ");
          swift_getErrorValue();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          sub_18A6A5EFC();
          sub_18A6A5B5C();
          sub_18A6A7F8C();
        }
        sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v92;
        v63 = sub_18A6A7FC0();
        sub_18A6A7DE8(v63, v64);
        *(_QWORD *)(inited + 56) = v91[1];
        Dictionary.init(dictionaryLiteral:)();
        v100 = 20;
        sub_18A6A89EC();
        sub_18A5F37E0();
        sub_18A6A83F4();
        sub_18A6A6AC4();
        v59 = (void *)v101;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v8, v61);
        sub_18A6A6F7C();
        v15 = v60;
        v1 = v8;
      }
      sub_18A697BF8(v59);

      sub_18A6A6AC4();
      if (v12)
        goto LABEL_18;
    }
    __break(1u);
LABEL_67:
    swift_once();
LABEL_5:
    v25 = sub_18A5F3BA0();
    sub_18A60990C(v25, (uint64_t)qword_1EDF6A630);
    v26 = *(_QWORD *)(v12 + 16);
    sub_18A6A74F4((uint64_t)v15, (uint64_t)v20);
    sub_18A5F3A58();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (sub_18A6A6294(v27))
    {
      v29 = sub_18A5F3830();
      v94 = v27;
      v30 = (uint8_t *)v29;
      v95 = (void *)sub_18A5F3830();
      v102[0] = v95;
      *(_DWORD *)v30 = 136315394;
      *(_QWORD *)&v92 = v30 + 4;
      sub_18A6A71BC();
      LODWORD(v93) = v28;
      sub_18A6A785C();
      sub_18A6A7AC0();
      v103 = sub_18A6A57C4(v28, v31, (uint64_t *)v102);
      v96 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A643358();
      sub_18A6A54D0();
      sub_18A6A7D88();
      sub_18A62F924(&qword_1EDF6C180, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
      v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v103 = sub_18A609924(v32, v33, (uint64_t *)v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18A5F37A4();
      sub_18A6A6DC4((uint64_t)v15);
      sub_18A6A5608(&dword_18A5C5000, v94, (os_log_type_t)v93, "%s setting earliestStartDate from last error %s", v30);
      sub_18A6A56D0();
      sub_18A5F392C();
    }
    sub_18A6A54D0();
    sub_18A6A6DC4((uint64_t)v15);

    v34 = (void *)v91[0];
    v35 = sub_18A6A7384();
    sub_18A6A74F4(v35, v36);
    sub_18A6A663C((uint64_t)v8, 0);
    sub_18A5F40A4();
    sub_18A6A8154((uint64_t)v8, v37, &qword_1EDF6A680);
    swift_endAccess();
    sub_18A6A6DC4((uint64_t)v20);
  }
  if (qword_1EDF6A540 != -1)
LABEL_69:
    swift_once();
  v76 = sub_18A5F3BA0();
  sub_18A60990C(v76, (uint64_t)qword_1EDF6A630);
  sub_18A5F3A58();
  Logger.logObject.getter();
  v77 = sub_18A6A584C();
  if (sub_18A6A5660(v77))
  {
    v78 = (uint8_t *)sub_18A5F3830();
    v102[0] = (id)sub_18A5F3830();
    sub_18A6A7050(4.8149e-34);
    sub_18A6A785C();
    v80 = v79;
    sub_18A6A6ACC();
    v82 = sub_18A6A5948(v80, v81, (uint64_t *)v102);
    sub_18A6A6B50(v82);
    sub_18A610384();
    sub_18A6A54D0();
    sub_18A63E290(&dword_18A5C5000, v15, (os_log_type_t)v1, "%s setting isWaitingForDeviceToDeviceEncryption from last error", v78);
    sub_18A5F38D8();
    sub_18A5F392C();
  }

  sub_18A6A54D0();
  sub_18A5F40A4();
  *(_BYTE *)(v24 + 264) = 1;
LABEL_65:
  sub_18A5F37E8();
}

void sub_18A69878C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t inited;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  void *v59;
  uint64_t v60;

  sub_18A612EB8();
  a19 = v21;
  a20 = v22;
  v23 = v20;
  v25 = v24;
  v26 = sub_18A6A7040();
  v57 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  sub_18A6639EC();
  if (v25)
  {
    sub_18A5F42A0();
    sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
    v27 = v25;
    _BridgedStoredNSError.code.getter();
    if (v60 == 14)
    {
      sub_18A6A5E58(*(id *)(*(_QWORD *)(v23 + 128) + 16), sel_setNeedsToFetchDatabaseChanges_);
    }
    else if (v60 == 2)
    {
      related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v27);
      if (v28)
      {
        v29 = 0;
        sub_18A6A75C4();
        v56 = v30;
        sub_18A6A5EDC();
        v33 = v32 & v31;
        v58 = (unint64_t)(v34 + 63) >> 6;
        sub_18A6A608C();
        v55 = v35;
        if (!v33)
          goto LABEL_7;
LABEL_6:
        for (v33 &= v33 - 1; ; v33 = v49 & v48)
        {
          sub_18A6A65F8();
          sub_18A6A65F8();
          sub_18A6A65F8();
          sub_18A5F101C(&qword_1EDF6A9D8);
          if (sub_18A6A5E20())
          {
            sub_18A6A6AC4();
            v50 = v59;
          }
          else
          {
            sub_18A6A6F7C();
            sub_18A6A65F8();
            if ((sub_18A6A5E20() & 1) == 0)
              goto LABEL_39;
            sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_18A83AC30;
            v52 = sub_18A6A7FC0();
            sub_18A6A84C8(v52, v53);
            *(_QWORD *)(inited + 56) = v55;
            Dictionary.init(dictionaryLiteral:)();
            sub_18A6A89EC();
            sub_18A5F37A4();
            sub_18A6A83F4();
            sub_18A6A6AC4();
            v50 = v59;
            sub_18A6A72F4(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
          }
          sub_18A6A6F7C();
          sub_18A69878C(v50);

          sub_18A6A6AC4();
          if (v33)
            goto LABEL_6;
LABEL_7:
          v36 = v29 + 1;
          if (__OFADD__(v29, 1))
          {
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            sub_18A6A6F7C();
            sub_18A6A6D58();
            v54 = sub_18A6A5F0C();
            sub_18A6A5DFC(v54, (uint64_t)"Unable to convert error to CKError: ");
            swift_getErrorValue();
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            sub_18A6A5EFC();
            sub_18A6A5B5C();
            sub_18A6A7F8C();
          }
          if (v36 >= v58)
            goto LABEL_35;
          ++v29;
          if (!*(_QWORD *)(v56 + 8 * v36))
          {
            v29 = v36 + 1;
            sub_18A6A8310();
            if (v37 == v38)
              goto LABEL_35;
            sub_18A6A82EC();
            if (!v40)
            {
              v29 = v39 + 2;
              sub_18A6A8310();
              if (v37 == v38)
                goto LABEL_35;
              sub_18A6A82EC();
              if (!v42)
              {
                v29 = v41 + 3;
                sub_18A6A8310();
                if (v37 == v38)
                  goto LABEL_35;
                sub_18A6A82EC();
                if (!v44)
                {
                  v45 = v43 + 4;
                  if (v45 >= v58)
                  {
LABEL_35:
                    sub_18A6A7B04((uint64_t)&a13);
                    sub_18A64A254();
                    goto LABEL_36;
                  }
                  if (!*(_QWORD *)(v56 + 8 * v45))
                  {
                    while (1)
                    {
                      v29 = v45 + 1;
                      if (__OFADD__(v45, 1))
                        goto LABEL_38;
                      sub_18A6A8310();
                      if (v37 == v38)
                        goto LABEL_35;
                      sub_18A6A82EC();
                      v45 = v46 + 1;
                      if (v47)
                        goto LABEL_26;
                    }
                  }
                  v29 = v45;
                }
              }
            }
          }
LABEL_26:
          sub_18A623BAC();
        }
      }
    }

  }
LABEL_36:
  sub_18A5F37E8();
}

BOOL sub_18A698B40()
{
  uint64_t v0;
  char v1;
  void *v3;

  sub_18A68FCB8();
  if ((v1 & 1) == 0)
    return 0;
  sub_18A5F46AC();
  if ((*(_BYTE *)(v0 + 266) & 1) != 0)
    return 0;
  sub_18A5F46AC();
  if ((*(_BYTE *)(v0 + 264) & 1) != 0)
    return 0;
  sub_18A5F46AC();
  if ((*(_BYTE *)(v0 + 265) & 1) != 0)
    return 0;
  sub_18A5F46AC();
  v3 = *(void **)(v0 + 304);
  if (!v3)
    return 0;
  objc_msgSend(v3, sel_accountStatus);
  sub_18A5F3890();
  return v0 == 1;
}

unint64_t static SyncEngine.coreAnalyticsEventNameState.getter()
{
  return sub_18A6A6628(35);
}

unint64_t static SyncEngine.coreAnalyticsEventNameConfiguration.getter()
{
  return sub_18A6A6628(43);
}

unint64_t static SyncEngine.coreAnalyticsKeyContainerIdentifier.getter()
{
  return sub_18A6A6628(19);
}

uint64_t static SyncEngine.coreAnalyticsKeyEnvironment.getter()
{
  return 0x6D6E6F7269766E65;
}

uint64_t static SyncEngine.coreAnalyticsKeyDatabaseScope.getter()
{
  return 0x6573616261746164;
}

uint64_t static SyncEngine.coreAnalyticsKeySizeBytes.getter()
{
  return 0x65747942657A6973;
}

unint64_t static SyncEngine.coreAnalyticsKeyPendingDatabaseChangesCount.getter()
{
  return sub_18A6A6628(22);
}

unint64_t static SyncEngine.coreAnalyticsKeyPendingRecordZoneChangesCount.getter()
{
  return sub_18A6A6628(24);
}

unint64_t static SyncEngine.coreAnalyticsKeyZoneChangeTokenCount.getter()
{
  return sub_18A6A6628(16);
}

unint64_t static SyncEngine.coreAnalyticsKeySecondsSinceFetchDatabaseChanges.getter()
{
  return sub_18A6A6628(32);
}

uint64_t static SyncEngine.coreAnalyticsKeyAPIType.getter()
{
  return 0x65707954697061;
}

unint64_t static SyncEngine.coreAnalyticsKeyHasSubscriptionID.getter()
{
  return sub_18A6A6628(17);
}

unint64_t static SyncEngine.coreAnalyticsKeyAutomaticallySync.getter()
{
  return sub_18A6A6628(17);
}

unint64_t sub_18A698DD0()
{
  unint64_t result;

  result = sub_18A69F974(0x3E8uLL);
  byte_1EDF75450 = result == 13;
  return result;
}

void sub_18A698DF8(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  id v4;

  v1 = sub_18A5F3D50(a1, sel_deviceContext);
  v2 = objc_msgSend(v1, sel_testDeviceReferenceProtocol);
  swift_unknownObjectRelease();

  if (!v2)
  {
    v4 = sub_18A5F3D50(v3, sel_containerID);
    objc_msgSend(v4, sel_isTestContainer);

  }
  sub_18A5F3824();
}

void sub_18A698E88(uint8_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _WORD *v19;

  v4 = sub_18A5F40B4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_18A6639EC();
  sub_18A698DF8(v6);
  if ((v7 & 1) != 0)
  {
    v8 = v1 + OBJC_IVAR____TtC8CloudKit10SyncEngine_stateTelemetrySubmissionDate;
    sub_18A5F46AC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v8, v4);
    Date.timeIntervalSinceNow.getter();
    v10 = v9;
    sub_18A6A72F4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    if (fabs(v10) > 60.0)
    {
      sub_18A6A7E48();
      sub_18A5F40A4();
      v11 = sub_18A6A7000();
      v12(v11);
      swift_endAccess();
      v13 = sub_18A6993B8((uint64_t)a1);
      sub_18A69908C(v13);
      v15 = v14;
      sub_18A5F37E0();
      if (v15)
        sub_18A6A78C4();
      if (qword_1EDF6A540 != -1)
        swift_once();
      v16 = sub_18A5F3BA0();
      v17 = sub_18A5F4224(v16, (uint64_t)qword_1EDF6A630);
      v18 = static os_log_type_t.fault.getter();
      if (sub_18A6A6294(v17))
      {
        v19 = (_WORD *)sub_18A5F3830();
        sub_18A6A6B84(v19);
        _os_log_impl(&dword_18A5C5000, v17, v18, "BUG IN CLOUDKIT: Unable to convert state telemetry payload to NSObjects", a1, 2u);
        sub_18A5F392C();
      }

    }
  }
}

void sub_18A69908C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27[32];
  _QWORD v28[2];
  _BYTE v29[32];
  _QWORD v30[6];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_18A5F101C(&qword_1EDF6A5E8);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  sub_18A66BC64(v30, a1);
  v3 = v30[0];
  v4 = v30[3];
  v5 = v30[4];
  v24 = (unint64_t)(v30[2] + 64) >> 6;
  v25 = v30[1];
  swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v6 = (v5 - 1) & v5;
  v7 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; v7 = __clz(__rbit64(v10)) + (i << 6))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v7);
    v14 = *v12;
    v13 = v12[1];
    sub_18A609B7C(*(_QWORD *)(v3 + 56) + 32 * v7, (uint64_t)v29);
    v28[0] = v14;
    v28[1] = v13;
    sub_18A609B7C((uint64_t)v29, (uint64_t)v27);
    swift_bridgeObjectRetain_n();
    sub_18A6A4B10((uint64_t)v28, &qword_1EDF6A650);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A670);
    sub_18A5F50F0(0, &qword_1EDF6A970);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();

      sub_18A62F4F8();
      swift_release();
      return;
    }
    v15 = sub_18A62E868(v14, v13);
    v16 = v15;
    if ((v17 & 1) != 0)
    {
      v18 = (uint64_t *)(v2[6] + 16 * v15);
      swift_bridgeObjectRelease();
      *v18 = v14;
      v18[1] = v13;
      v19 = v2[7];

      *(_QWORD *)(v19 + 8 * v16) = v26;
      goto LABEL_28;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v15;
    v20 = (uint64_t *)(v2[6] + 16 * v15);
    *v20 = v14;
    v20[1] = v13;
    *(_QWORD *)(v2[7] + 8 * v15) = v26;
    v21 = v2[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_33;
    v2[2] = v23;
LABEL_28:
    v4 = i;
    v5 = v6;
    if (v6)
      goto LABEL_5;
LABEL_6:
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_34;
    if (v9 >= v24)
      goto LABEL_31;
    v10 = *(_QWORD *)(v25 + 8 * v9);
    i = v4 + 1;
    if (!v10)
    {
      i = v4 + 2;
      if (v4 + 2 >= v24)
        goto LABEL_31;
      v10 = *(_QWORD *)(v25 + 8 * i);
      if (!v10)
      {
        i = v4 + 3;
        if (v4 + 3 >= v24)
          goto LABEL_31;
        v10 = *(_QWORD *)(v25 + 8 * i);
        if (!v10)
        {
          i = v4 + 4;
          if (v4 + 4 >= v24)
            goto LABEL_31;
          v10 = *(_QWORD *)(v25 + 8 * i);
          if (!v10)
          {
            i = v4 + 5;
            if (v4 + 5 >= v24)
              goto LABEL_31;
            v10 = *(_QWORD *)(v25 + 8 * i);
            if (!v10)
            {
              v11 = v4 + 6;
              while (v11 < v24)
              {
                v10 = *(_QWORD *)(v25 + 8 * v11++);
                if (v10)
                {
                  i = v11 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_18A62F4F8();
              return;
            }
          }
        }
      }
    }
LABEL_21:
    v6 = (v10 - 1) & v10;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_18A6993B8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  const __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFString *v34;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  id v53;

  v4 = v1;
  v52[1] = a1;
  v5 = sub_18A5F40B4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_18A5F3E5C();
  v9 = v8 - v7;
  sub_18A5F101C(&qword_1EDF6A680);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78](v10);
  sub_18A6A73B8();
  *(_QWORD *)&v12 = MEMORY[0x1E0C80A78](v11).n128_u64[0];
  v14 = (char *)v52 - v13;
  v53 = objc_msgSend(*(id *)(v4 + 144), sel_containerID, v12);
  sub_18A699C1C(v53);
  v52[0] = v15;
  v17 = v16;
  v18 = *(_QWORD *)(v4 + 128);
  v19 = objc_msgSend(*(id *)(v18 + 16), sel_lastFetchDatabaseChangesDate);
  if (v19)
  {
    v2 = v19;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  sub_18A5F1010(v3, v20, 1, v5);
  sub_18A60FCFC(v3, (uint64_t)v14, &qword_1EDF6A680);
  if (sub_18A5F105C((uint64_t)v14, 1, v5))
  {
    sub_18A6A4B10((uint64_t)v14, &qword_1EDF6A680);
    v21 = 0.0;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v9, v14, v5);
    sub_18A6A4B10((uint64_t)v14, &qword_1EDF6A680);
    Date.timeIntervalSinceNow.getter();
    v21 = v22;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  sub_18A5F101C((uint64_t *)&unk_1EDF6A7E8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18A83C9F0;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x800000018A8401B0;
  *(_QWORD *)(inited + 48) = v52[0];
  *(_QWORD *)(inited + 56) = v17;
  sub_18A6A8094();
  *(_QWORD *)(v24 + 72) = v26;
  *(_QWORD *)(v24 + 80) = v25;
  v27 = v26;
  v28 = sub_18A6A80A8(v24);
  v29 = v53;
  v30 = sub_18A6A7FDC(v28, sel_environment);
  v31 = (id)CKContainerEnvironmentString((uint64_t)v30);
  sub_18A61044C();
  sub_18A6292C8();
  *(_QWORD *)(inited + 96) = v2;
  *(_QWORD *)(inited + 104) = v3;
  sub_18A6A8034();
  *(_QWORD *)(inited + 120) = v27;
  *(_QWORD *)(inited + 128) = v32;
  sub_18A6A8018();
  *(_QWORD *)(inited + 136) = v33;
  v34 = (id)CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v4 + 136), sel_databaseScope));
  sub_18A61044C();
  sub_18A6292C8();
  *(_QWORD *)(inited + 144) = v2;
  *(_QWORD *)(inited + 152) = v3;
  *(_QWORD *)(inited + 168) = v27;
  *(_QWORD *)(inited + 176) = 0x65747942657A6973;
  *(_QWORD *)(inited + 184) = 0xE900000000000073;
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_18A5F3B04((uint64_t)isa, &qword_1EDF6A4A0);
  *(_QWORD *)(inited + 192) = isa;
  *(_QWORD *)(inited + 216) = v36;
  *(_QWORD *)(inited + 224) = 0xD000000000000016;
  sub_18A6A608C();
  *(_QWORD *)(inited + 232) = v37;
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  v39 = *(_QWORD *)(v38 + 16);
  swift_bridgeObjectRelease();
  v40 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 240) = v39;
  *(_QWORD *)(inited + 264) = v40;
  *(_QWORD *)(inited + 272) = 0xD000000000000018;
  sub_18A6A608C();
  *(_QWORD *)(inited + 280) = v41;
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  v43 = *(_QWORD *)(v42 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 288) = v43;
  *(_QWORD *)(inited + 312) = v40;
  *(_QWORD *)(inited + 320) = 0xD000000000000010;
  sub_18A6A608C();
  *(_QWORD *)(inited + 328) = v44;
  v45 = objc_msgSend(*(id *)(v18 + 16), sel_serverChangeTokensByZoneID);
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  sub_18A5F3B04(v46, &qword_1EDF6A488);
  sub_18A6A4AD4((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v48 = sub_18A68F6E0(v47, (uint64_t (*)(uint64_t))MEMORY[0x1E0DECB80]);
  sub_18A5F3944();
  *(_QWORD *)(inited + 336) = v48;
  *(_QWORD *)(inited + 360) = v40;
  *(_QWORD *)(inited + 368) = 0xD000000000000020;
  sub_18A6A608C();
  *(_QWORD *)(inited + 376) = v49;
  *(_QWORD *)(inited + 408) = MEMORY[0x1E0DEB070];
  *(double *)(inited + 384) = -v21;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A670);
  v50 = Dictionary.init(dictionaryLiteral:)();

  return v50;
}

uint64_t sub_18A6997E0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A6997F4(uint64_t a1)
{
  uint64_t v1;
  char v2;
  _QWORD *v3;

  sub_18A698DF8(a1);
  if ((v2 & 1) == 0)
    return sub_18A5F3E50(*(uint64_t (**)(void))(v1 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v3;
  sub_18A6A6E30(v3, (uint64_t)sub_18A69984C);
  return sub_18A69999C();
}

uint64_t sub_18A69984C()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A5E40();
  sub_18A6A5F2C();
  *(_QWORD *)(v1 + 32) = v0;
  sub_18A6A5DDC();
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

uint64_t sub_18A699888()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 32);
  sub_18A69908C((uint64_t)v1);
  v3 = v2;
  sub_18A5F37A4();
  if (v3)
    sub_18A6A78C4();
  if (qword_1EDF6A540 != -1)
    swift_once();
  v4 = sub_18A5F3BA0();
  sub_18A5F4224(v4, (uint64_t)qword_1EDF6A630);
  v5 = sub_18A6A68E4();
  if (sub_18A6A5AB4(v5))
  {
    v6 = (_WORD *)sub_18A5F3830();
    sub_18A6A6B84(v6);
    sub_18A6A587C(&dword_18A5C5000, v7, v8, "BUG IN CLOUDKIT: Unable to convert configuration telemetry payload to NSObjects");
    sub_18A5F392C();
  }

  return sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A69999C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 336) = v0;
  return sub_18A5F4434();
}

uint64_t sub_18A6999B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;

  sub_18A6A6358();
  v2 = *(_QWORD *)(v0 + 336);
  sub_18A699C1C(objc_msgSend(*(id *)(v2 + 144), sel_containerID));
  v4 = v3;
  v6 = v5;
  v7 = v2 + 120;
  v8 = (void *)MEMORY[0x18D76E914](v7);

  if (v8)
  {
    v9 = (void *)MEMORY[0x18D76E914](v7);
    if (!v9
      || (v10 = v9, v11 = objc_msgSend(v9, sel_dataSource), v10, !v11))
    {
      v29 = 0x76697463656A624FLL;
      v12 = 0xEB00000000432D65;
      goto LABEL_8;
    }
    sub_18A623E08();
    v12 = 0xEA00000000006563;
    v13 = 0x72756F5361746144;
  }
  else
  {
    v12 = 0xE500000000000000;
    v13 = 0x7466697753;
  }
  v29 = v13;
LABEL_8:
  v14 = *(_QWORD *)(v0 + 336);
  sub_18A5F101C((uint64_t *)&unk_1EDF6A7E8);
  v15 = sub_18A6A5E38();
  *(_OWORD *)(v15 + 16) = xmmword_18A83CA00;
  *(_QWORD *)(v15 + 32) = 0xD000000000000013;
  *(_QWORD *)(v15 + 40) = 0x800000018A8401B0;
  v16 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v15 + 48) = v4;
  *(_QWORD *)(v15 + 56) = v6;
  sub_18A6A8094();
  *(_QWORD *)(v17 + 72) = v16;
  *(_QWORD *)(v17 + 80) = v18;
  v19 = sub_18A6A80A8(v17);
  v20 = sub_18A5F3D50(v19, sel_environment);
  v21 = (id)CKContainerEnvironmentString((uint64_t)v20);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A6A8408();
  *(_QWORD *)(v15 + 96) = v6;
  *(_QWORD *)(v15 + 104) = v1;
  sub_18A6A8034();
  *(_QWORD *)(v15 + 120) = v16;
  *(_QWORD *)(v15 + 128) = v22;
  sub_18A6A8018();
  *(_QWORD *)(v15 + 136) = v23;
  v24 = (id)CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v14 + 136), sel_databaseScope));
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A6A8408();
  *(_QWORD *)(v15 + 144) = v6;
  *(_QWORD *)(v15 + 152) = v1;
  *(_QWORD *)(v15 + 168) = v16;
  *(_QWORD *)(v15 + 176) = 0xD000000000000011;
  sub_18A6A608C();
  *(_QWORD *)(v15 + 184) = v25;
  sub_18A68FCB8();
  v26 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v15 + 192) = v27 & 1;
  *(_QWORD *)(v15 + 216) = v26;
  *(_QWORD *)(v15 + 224) = 0xD000000000000011;
  *(_QWORD *)(v15 + 232) = 0x800000018A840260;
  *(_BYTE *)(v15 + 240) = *(_QWORD *)(v14 + 376) != 0;
  *(_QWORD *)(v15 + 264) = v26;
  *(_QWORD *)(v15 + 272) = 0x65707954697061;
  *(_QWORD *)(v15 + 312) = v16;
  *(_QWORD *)(v15 + 280) = 0xE700000000000000;
  *(_QWORD *)(v15 + 288) = v29;
  *(_QWORD *)(v15 + 296) = v12;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A670);
  sub_18A629254();
  Dictionary.init(dictionaryLiteral:)();
  sub_18A5F3890();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

void sub_18A699C1C(void *a1)
{
  uint64_t v1;
  id v2;

  v1 = (uint64_t)objc_msgSend(a1, sel_isAppleInternal);
  if ((v1 & 1) != 0)
    goto LABEL_5;
  if (qword_1EDF6AAE0 != -1)
    v1 = swift_once();
  if (byte_1EDF75450 == 1)
  {
LABEL_5:
    v2 = sub_18A5F3D50(v1, sel_containerIdentifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  sub_18A6406BC();
  sub_18A5F3824();
}

uint64_t sub_18A699CC8()
{
  uint64_t result;

  sub_18A5F101C((uint64_t *)&unk_1EDF6A7D8);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_1EDF753F8 = result;
  return result;
}

id sub_18A699CFC()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
  qword_1EDF75410 = (uint64_t)result;
  return result;
}

void sub_18A699D34()
{
  uint64_t v0;
  Swift::String v1;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_loggingIDLock) + 32));
  sub_18A5F3D48();
  sub_18A6A788C();
  _StringGuts.grow(_:)(17);
  sub_18A628F58();
  sub_18A64A280();
  sub_18A5F460C();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  sub_18A60A0E0();
}

void static SyncEngine.populateLoggingIDs(for:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __CFString *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_43:
    sub_18A6A6020();
    v3 = sub_18A623AB0();
    sub_18A643358();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v49 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_45;
    }
    v5 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        sub_18A6A7504();
      v6 = *(_QWORD *)(v1 + 8 * v5 + 32);
      sub_18A5F3E6C();
      ++v5;
      v7 = objc_msgSend(*(id *)(v6 + 144), sel_containerID);
      sub_18A5F37AC();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      sub_18A6A7000();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v3 != v5);
    v4 = v49;
  }
  v8 = sub_18A668238(v4);
  v48 = sub_18A68F6E0(v8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC0E0]);
  sub_18A5F37A4();
  v9 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    sub_18A60FF80();
    if ((v3 & 0x8000000000000000) == 0)
    {
      v10 = 0;
      v9 = v50;
      do
      {
        if ((v1 & 0xC000000000000001) != 0)
          sub_18A6A7504();
        v11 = *(_QWORD *)(v1 + 8 * v10 + 32);
        sub_18A6A73A8();
        v12 = objc_msgSend(*(id *)(v11 + 136), sel_databaseScope);
        sub_18A6A6660();
        v13 = *(_QWORD *)(v50 + 16);
        if (v13 >= *(_QWORD *)(v50 + 24) >> 1)
          sub_18A60FF80();
        ++v10;
        *(_QWORD *)(v50 + 16) = v13 + 1;
        *(_QWORD *)(v50 + 8 * v13 + 32) = v12;
      }
      while (v3 != v10);
      goto LABEL_18;
    }
LABEL_45:
    __break(1u);
    __break(1u);
    return;
  }
LABEL_18:
  v47 = *(_QWORD *)(sub_18A66825C(v9) + 16);
  swift_bridgeObjectRelease();
  if (v2)
  {
    sub_18A6A6020();
    v14 = sub_18A623AB0();
    if (v14)
      goto LABEL_20;
  }
  else
  {
    v14 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_18A6A6020();
    if (v14)
    {
LABEL_20:
      v15 = 0;
      v45 = v14;
      v46 = v1 & 0xC000000000000001;
      v43 = v1 + 32;
      v44 = v1 & 0xFFFFFFFFFFFFFF8;
      v42 = v1;
      while (1)
      {
        if (v46)
          sub_18A6A7504();
        if (v15 >= *(_QWORD *)(v44 + 16))
        {
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        v16 = *(_QWORD *)(v43 + 8 * v15);
        swift_retain();
        if (__OFADD__(v15++, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v2 = MEMORY[0x1E0DEE9D8];
        if (v48 >= 2)
        {
          v18 = objc_msgSend(*(id *)(v16 + 144), sel_containerID);
          v19 = objc_msgSend(v18, sel_containerIdentifier);

          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v22 = v21;

          sub_18A61807C(0, 1, 1, MEMORY[0x1E0DEE9D8]);
          v2 = v23;
          v25 = *(_QWORD *)(v23 + 16);
          v24 = *(_QWORD *)(v23 + 24);
          if (v25 >= v24 >> 1)
          {
            sub_18A6A60CC(v24 > 1, v25 + 1);
            v2 = v41;
          }
          *(_QWORD *)(v2 + 16) = v25 + 1;
          v26 = v2 + 16 * v25;
          *(_QWORD *)(v26 + 32) = v20;
          *(_QWORD *)(v26 + 40) = v22;
        }
        if (v47 >= 2)
          break;
        if (!*(_QWORD *)(v2 + 16))
        {
          _print_unlocked<A, B>(_:_:)();
          v28 = 0;
          v30 = 0xE000000000000000;
          sub_18A5F3898();
          sub_18A5F37A4();
          v1 = v42;
          if ((sub_18A6A6C50() & 1) == 0)
          {
LABEL_38:
            sub_18A6A60CC(0, *(_QWORD *)(v2 + 16) + 1);
            v2 = v39;
          }
LABEL_31:
          v32 = *(_QWORD *)(v2 + 16);
          v31 = *(_QWORD *)(v2 + 24);
          if (v32 >= v31 >> 1)
          {
            sub_18A6A60CC(v31 > 1, v32 + 1);
            v2 = v40;
          }
          *(_QWORD *)(v2 + 16) = v32 + 1;
          v33 = v2 + 16 * v32;
          *(_QWORD *)(v33 + 32) = v28;
          *(_QWORD *)(v33 + 40) = v30;
        }
        sub_18A61039C();
        sub_18A5F101C(&qword_1EDF6A770);
        sub_18A63DD6C();
        BidirectionalCollection<>.joined(separator:)();
        v35 = v34;
        sub_18A5F394C();
        v36 = (os_unfair_lock_s *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC8CloudKit10SyncEngine_loggingIDLock) + 32);
        os_unfair_lock_lock(v36);
        v37 = (_QWORD *)sub_18A6A7300();
        sub_18A69A420(v37, v38, v35);
        os_unfair_lock_unlock(v36);
        sub_18A5F394C();
        sub_18A634FA4();
        sub_18A66607C();
        sub_18A64A2FC();
        sub_18A5F438C();
        if (v15 == v45)
        {
          sub_18A643358();
          sub_18A6A68F4();
          return;
        }
      }
      v27 = (id)CKDatabaseScopeString((unint64_t)objc_msgSend(*(id *)(v16 + 136), sel_databaseScope));
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      if ((sub_18A6A6C50() & 1) == 0)
        goto LABEL_38;
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_18A69A420(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return swift_bridgeObjectRetain();
}

BOOL sub_18A69A468(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char v3;
  _BOOL8 result;

  result = 0;
  if (a2)
  {
    sub_18A6A6C94();
    if ((sub_18A669988() & 1) != 0)
    {
      sub_18A618024();
      v2 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
      v3 = sub_18A6688FC(0x6974616D6F747541, 0xE900000000000063, v2);
      sub_18A5F37E0();
      if ((v3 & 1) != 0)
        return 1;
    }
  }
  return result;
}

void sub_18A69A518(void *a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  int v6;
  id v7;
  uint64_t v8;
  id v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  id v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  os_log_type_t v45;
  id v46;
  id v47;
  uint64_t v48;

  v3 = v1;
  v4 = objc_msgSend(a1, sel_defaultConfiguration);
  if (v4)
  {
    v5 = v4;
    v6 = CKQualityOfServiceOrdering((uint64_t)objc_msgSend(v4, sel_qualityOfService));
    v7 = (id)CKQualityOfServiceOrdering(17);
    if (v6 < (int)v7)
    {
      if (qword_1EDF6A540 != -1)
        swift_once();
      v8 = sub_18A5F3BA0();
      sub_18A60990C(v8, (uint64_t)qword_1EDF6A630);
      sub_18A5F3A58();
      v9 = v5;
      Logger.logObject.getter();
      v10 = sub_18A6A68A0();
      if (sub_18A6A6294(v2))
      {
        v11 = sub_18A5F3830();
        v48 = sub_18A5F3830();
        *(_DWORD *)v11 = 136315650;
        sub_18A623E28();
        v45 = v10;
        sub_18A699D34();
        v13 = v12;
        sub_18A61A878();
        sub_18A6A5844(v13, v14, &v48);
        sub_18A6A6058();
        sub_18A6A54D0();
        sub_18A5F38AC();
        sub_18A6A7D7C();
        v15 = objc_msgSend(v9, sel_qualityOfService);
        v19 = CKStringForQOS((uint64_t)v15, v16, v17, v18);
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_18A6A5868(v20, v21, &v48);
        sub_18A6A6058();

        sub_18A5F394C();
        *(_WORD *)(v11 + 22) = 2080;
        v25 = CKStringForQOS(17, v22, v23, v24);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18A5F4598();
        sub_18A6A5844(v11 + 14, v26, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18A5F38AC();
        sub_18A6A61B8(&dword_18A5C5000, v2, v45, "%s overriding operation group QoS from %s to %s", (uint8_t *)v11);
        sub_18A6A75BC();
        sub_18A5F392C();
      }

      sub_18A6A54D0();
      v7 = objc_msgSend(v9, sel_setQualityOfService_, 17);
    }
    v41 = *(void **)(v3 + 224);
    if (v41)
    {
      v42 = v41;
      v43 = sub_18A5F3D50((uint64_t)v42, sel_assetDownloadStagingManager);

      if (!v43)
        sub_18A623D9C(v5, sel_setAssetDownloadStagingManager_);

    }
    if (sub_18A5F3D50((uint64_t)v7, sel_requestOriginator) != (id)3)
      objc_msgSend(v5, sel_setRequestOriginator_, 3);

    sub_18A623AB8();
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v27 = sub_18A5F3BA0();
    sub_18A60990C(v27, (uint64_t)qword_1EDF6A630);
    v46 = sub_18A6A6F1C();
    v28 = sub_18A6A5910();
    v29 = static os_log_type_t.fault.getter();
    if (sub_18A6A5A4C(v29))
    {
      v30 = (uint8_t *)sub_18A5F3830();
      v31 = (_QWORD *)sub_18A5F3830();
      *(_DWORD *)v30 = 138412290;
      v48 = (uint64_t)v46;
      v32 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v31 = v46;

      sub_18A63E290(&dword_18A5C5000, v28, (os_log_type_t)v3, "BUG IN CLOUDKIT: No configuration on operation group: %@", v30);
      sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
      sub_18A5F38D8();
      sub_18A5F392C();
    }

    sub_18A6A8100(v33, v34, v35, v36, v37, v38, v39, v40, v44, v46);
    sub_18A6A647C(v47);
  }
}

uint64_t sub_18A69A92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t *v19;
  os_unfair_lock_s *v20;

  v6 = v4;
  sub_18A5F101C((uint64_t *)&unk_1EDF6A688);
  sub_18A5F3AC8();
  MEMORY[0x1E0C80A78]();
  sub_18A6639EC();
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  sub_18A6A8438();
  v10 = NSNotificationCenter.notifications(named:object:)();

  v11 = sub_18A623B70();
  sub_18A6239F8(v5, v12, v13, v11);
  v14 = sub_18A5F37B4();
  sub_18A6A5DE4();
  v15 = (_QWORD *)sub_18A5F37B4();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v10;
  v15[5] = v14;
  v15[6] = a3;
  v15[7] = a4;
  sub_18A5F3E6C();
  sub_18A623E28();
  sub_18A670ABC(v5, (uint64_t)&unk_1EDF6C360, (uint64_t)v15);
  v17 = v16;
  v18 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC8CloudKit10SyncEngine_notificationObserverTasks);
  v19 = (uint64_t *)&v18[4];
  v20 = v18 + 6;
  os_unfair_lock_lock(v18 + 6);
  sub_18A69AE20(v19, v17);
  os_unfair_lock_unlock(v20);
  sub_18A5F37AC();
  return sub_18A6A6FD0();
}

uint64_t sub_18A69AA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v8 = type metadata accessor for Notification();
  v7[10] = v8;
  v7[11] = *(_QWORD *)(v8 - 8);
  v7[12] = swift_task_alloc();
  sub_18A5F101C(&qword_1EDF6A698);
  v7[13] = swift_task_alloc();
  v9 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v7[14] = v9;
  v7[15] = *(_QWORD *)(v9 - 8);
  v7[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_18A69AB24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  swift_retain();
  NSNotificationCenter.Notifications.makeAsyncIterator()();
  sub_18A629170();
  sub_18A5F46AC();
  sub_18A62F924(&qword_1EDF6A5E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1EE0], MEMORY[0x1E0CB1EE8]);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v2;
  *v2 = v0;
  v2[1] = sub_18A69ABD0;
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t sub_18A69ABD0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_18A5F4328();
  sub_18A5F416C(v2);
  if (v1)
    *(_QWORD *)(v0 + 152) = v1;
  sub_18A5F3840();
  return sub_18A5F3A94();
}

uint64_t sub_18A69AC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t Strong;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  sub_18A6A5EB4(v1);
  if (!v3)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), v1, v2);
    Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      v5 = (_QWORD *)sub_18A670A90();
      *(_QWORD *)(v0 + 160) = v5;
      *v5 = v0;
      v5[1] = sub_18A69AD38;
      v6 = sub_18A6A5E14(*(_QWORD *)(v0 + 96));
      return sub_18A6A5CC8(v6, v8);
    }
    sub_18A6A76D8();
  }
  sub_18A6A8444(*(_QWORD *)(v0 + 120));
  sub_18A663978();
  sub_18A663AB0();
  sub_18A6A5B54();
  return sub_18A5F4134(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A69ACDC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 152);
  sub_18A5F101C(&qword_1EDF6A9D8);
  sub_18A612F00();
  return swift_willThrowTypedImpl();
}

uint64_t sub_18A69AD38()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A69AD74()
{
  uint64_t v0;
  _QWORD *v1;

  sub_18A6A76D8();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = sub_18A69ADCC;
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t sub_18A69ADCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  sub_18A5F416C(&v4);
  if (v0)
    *(_QWORD *)(v2 + 152) = v0;
  sub_18A5F3840();
  return sub_18A5F3A94();
}

uint64_t sub_18A69AE20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_retain();
  sub_18A651DE0();
  v4 = *(_QWORD *)(*a1 + 16);
  result = sub_18A651E94(v4);
  v6 = *a1;
  *(_QWORD *)(v6 + 16) = v4 + 1;
  *(_QWORD *)(v6 + 8 * v4 + 32) = a2;
  *a1 = v6;
  return result;
}

uint64_t sub_18A69AE84()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_notificationObserverTasks);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(v1 + 16);
  sub_18A5F3FAC();
  os_unfair_lock_unlock(v2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    v6 = MEMORY[0x1E0DEE9C0] + 8;
    v7 = MEMORY[0x1E0DEDCE8];
    v8 = MEMORY[0x1E0DEDD18];
    do
    {
      v5 += 8;
      v9 = sub_18A634FA4();
      MEMORY[0x18D76CB68](v9, v6, v7, v8);
      sub_18A5F438C();
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A69AF2C(const void *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 184) = v1;
  sub_18A6A32A4(a1, (void *)(v2 + 16));
  sub_18A6A5670();
  return sub_18A5F3AE0();
}

#error "18A69B0A4: call analysis failed (funcsize=202)"

uint64_t sub_18A69B2E8()
{
  sub_18A623A14();
  sub_18A6239A4();
  sub_18A5F37AC();
  sub_18A623CE4();
  return sub_18A5F3A94();
}

uint64_t sub_18A69B324()
{
  uint64_t v0;

  swift_release();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A69B34C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 104) = a4;
  *(_QWORD *)(v5 + 112) = a5;
  *(_QWORD *)(v5 + 96) = a3;
  *(_OWORD *)(v5 + 120) = *a2;
  return swift_task_switch();
}

uint64_t sub_18A69B370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_18A6A5538();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (*(_QWORD *)(v22 + 120))
  {
    v26 = *(_QWORD *)(v22 + 128);
    v27 = *(const void **)(v22 + 96);
    sub_18A5F42C0();
    sub_18A6A32A4(v27, (void *)(v22 + 16));
    v44 = **(int **)(v26 + 8) + *(_QWORD *)(v26 + 8);
    sub_18A6A68DC();
    v28 = (_QWORD *)sub_18A6A6F6C();
    *(_QWORD *)(v22 + 136) = v28;
    *v28 = v22;
    v28[1] = sub_18A69B528;
    sub_18A6A5854();
    sub_18A663918();
    return v33(v29, v30, v31, v32, v33, v34, v35, v36, a9, v44, a11, a12, a13, a14);
  }
  else
  {
    if (qword_1EDF6A540 != -1)
      swift_once();
    v38 = sub_18A5F3BA0();
    v39 = sub_18A60990C(v38, (uint64_t)qword_1EDF6A630);
    sub_18A5F3A58();
    sub_18A6A5910();
    v40 = sub_18A6A6454();
    if (sub_18A6A55D0(v40))
    {
      v41 = (uint8_t *)sub_18A5F3830();
      sub_18A5F3830();
      sub_18A6A6080();
      *(_DWORD *)v41 = 136315138;
      sub_18A5F3E6C();
      sub_18A699D34();
      v42 = sub_18A5F37AC();
      *(_QWORD *)(v22 + 88) = sub_18A6A5704(v42, v43, &a11);
      sub_18A6A578C();
      sub_18A5F394C();
      sub_18A5F4804();
      sub_18A63E290(&dword_18A5C5000, v39, v23, "%s trying to post event, but the delegate may have been deallocated", v41);
      sub_18A5F38D8();
      sub_18A5F392C();
    }
    sub_18A5F4804();

    return sub_18A6A55EC(*(uint64_t (**)(void))(v22 + 8));
  }
}

uint64_t sub_18A69B528()
{
  sub_18A6239A4();
  sub_18A5F3840();
  return sub_18A5F3AE0();
}

uint64_t sub_18A69B564()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t SyncEngine.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A69B598()
{
  return SyncEngine.unownedExecutor.getter();
}

void sub_18A69B5B0()
{
  sub_18A699D34();
}

uint64_t sub_18A69B5D0()
{
  uint64_t result;

  result = MEMORY[0x18D76C7CC](0xD000000000000021, 0x800000018A840C30);
  qword_1EDF6C0A0 = result;
  return result;
}

id static NSNotificationName.CKSyncEngineWillUpdateAccountInfo.getter()
{
  return sub_18A69B6C0(&qword_1EDF6AAE8, (id *)&qword_1EDF6C0A0);
}

uint64_t sub_18A69B620()
{
  uint64_t result;

  result = MEMORY[0x18D76C7CC](0xD000000000000020, 0x800000018A840C00);
  qword_1EDF6C0A8 = result;
  return result;
}

id static NSNotificationName.CKSyncEngineDidUpdateAccountInfo.getter()
{
  return sub_18A69B6C0(&qword_1EDF6AAF0, (id *)&qword_1EDF6C0A8);
}

uint64_t sub_18A69B670()
{
  uint64_t result;

  result = MEMORY[0x18D76C7CC](0xD00000000000001CLL, 0x800000018A840C80);
  qword_1EDF6C0B0 = result;
  return result;
}

id static NSNotificationName.CKSyncEngineWillScheduleSync.getter()
{
  return sub_18A69B6C0(&qword_1EDF6AAF8, (id *)&qword_1EDF6C0B0);
}

id sub_18A69B6C0(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

id sub_18A69B6F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  void *v7;
  id v8;

  v7 = (void *)MEMORY[0x18D76C7CC]();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v4, sel_initWithIdentifier_container_priority_, v7, a3, a4);

  return v8;
}

uint64_t sub_18A69B768(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 56);
  v30 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  if ((v6 & v4) == 0)
    goto LABEL_8;
LABEL_7:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v32 = v3;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = result;
    v16 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_41;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v25 = ~v20;
      for (j = v21 + 1; ; j = v27 + 1)
      {
        v27 = j & v25;
        if (((*(_QWORD *)(v8 + (((j & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v22 + 16 * v27);
        v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_30;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    result = v15;
    v3 = v32;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v11 >= v31)
      return 1;
    v12 = *(_QWORD *)(v30 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      v13 = v3 + 2;
      if (v3 + 2 >= v31)
        return 1;
      v12 = *(_QWORD *)(v30 + 8 * v13);
      if (!v12)
      {
        v13 = v3 + 3;
        if (v3 + 3 >= v31)
          return 1;
        v12 = *(_QWORD *)(v30 + 8 * v13);
        if (!v12)
        {
          v13 = v3 + 4;
          if (v3 + 4 >= v31)
            return 1;
          v12 = *(_QWORD *)(v30 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v12 - 1) & v12;
    v32 = v13;
  }
  v14 = v3 + 5;
  if (v3 + 5 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v14);
  if (v12)
  {
    v13 = v3 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v31)
      return 1;
    v12 = *(_QWORD *)(v30 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_18A69BA0C(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = swift_task_alloc();
  v5 = (_QWORD *)sub_18A5F3D3C(v4);
  *v5 = v2;
  v5[1] = sub_18A6A5468;
  return v7(a1);
}

uint64_t sub_18A69BA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_18A69BB10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  sub_18A6A6358();
  v1 = v0[8];
  v2 = v0[9];
  sub_18A6A847C();
  sub_18A62F924(&qword_1EDF6A470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  dispatch thunk of Clock.now.getter();
  sub_18A62F924(&qword_1EDF6A3F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  MEMORY[0x18D76CF7C](v0 + 5, v1, v3);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v0[12] = v4;
  sub_18A6A83E0(v4);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_18A69BC10;
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

uint64_t sub_18A69BC10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_18A6A5778();
  sub_18A6A78A4();
  sub_18A64A154(v2);
  *(_QWORD *)(v1 + 112) = v0;
  swift_task_dealloc();
  sub_18A6A8110();
  if (v0)
  {
    sub_18A5F3840();
    return sub_18A6A5560();
  }
  else
  {
    swift_task_dealloc();
    sub_18A663AB0();
    sub_18A6A5838();
    sub_18A663A04();
    return v4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
}

uint64_t sub_18A69BC84()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_18A663AB0();
  return sub_18A5F3E50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_18A69BCB4()
{
  sub_18A6A7DFC();
  sub_18A623E74();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A69BCE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_18A623E50();
  sub_18A614630();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A6A6E7C(v1);
  sub_18A623D08();
  return sub_18A680348(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18A69BD50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  return sub_18A689EAC();
}

uint64_t type metadata accessor for SyncEngine()
{
  uint64_t result;

  result = qword_1EDF6A530;
  if (!qword_1EDF6A530)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_18A69BDDC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  result = sub_18A6A7D9C(a1, a2, a3, a4, a5);
  v8 = (_QWORD *)(v7 + 16 * result);
  *v8 = v9;
  v8[1] = v10;
  *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result) = v11;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v14;
  return result;
}

uint64_t sub_18A69BE10(unint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for URL();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = a5[7] + 16 * a1;
  *(_QWORD *)v13 = a3;
  *(_BYTE *)(v13 + 8) = a4 & 1;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

void sub_18A69BEB8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  sub_18A6A6840(a6 + 8 * (a1 >> 6));
  v8 = (_QWORD *)(v6[6] + 16 * v7);
  *v8 = v9;
  v8[1] = v10;
  v11 = v6[7] + 16 * v7;
  *(_QWORD *)v11 = v12;
  *(_BYTE *)(v11 + 8) = v13 & 1;
  v14 = v6[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    v6[2] = v16;
}

unint64_t sub_18A69BF0C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  result = sub_18A6A7D9C(a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * result) = v7;
  v9 = *(_QWORD *)(v6 + 56) + 16 * result;
  *(_QWORD *)v9 = v10;
  *(_BYTE *)(v9 + 8) = v11 & 1;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v14;
  return result;
}

unint64_t sub_18A69BF48(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

void sub_18A69BF8C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  sub_18A6A6840(a4 + 8 * (a1 >> 6));
  *(_QWORD *)(v4[6] + 8 * v5) = v6;
  *(_QWORD *)(v4[7] + 8 * v5) = v7;
  v8 = v4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    v4[2] = v10;
}

void sub_18A69BFD0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  sub_18A60FCFC(a3, a4[7] + 40 * a1, (uint64_t *)&unk_1EDF6A2D8);
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
}

uint64_t sub_18A69C044(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_18A69C0DC(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_18A69C120(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::UInt v12;
  unint64_t v13;
  char v14;
  uint64_t v15;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    v15 = *v2;
    *v2 = 0x8000000000000000;
    v12 = sub_18A629254();
    sub_18A69D630(v12, v13, v14);
    *v2 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

#error "18A69C364: call analysis failed (funcsize=88)"

#error "18A69C4D4: call analysis failed (funcsize=88)"

#error "18A69C644: call analysis failed (funcsize=88)"

uint64_t sub_18A69C688(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_18A69DC38(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_18A69C780(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = *v3;
  Hasher.init(_seed:)();
  sub_18A61039C();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_18A6A7D18();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (sub_18A62FAFC() & 1) != 0)
    {
LABEL_7:
      sub_18A5F460C();
      sub_18A5F394C();
      v15 = (_QWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      sub_18A6A7D18();
      if ((v19 & 1) == 0)
        break;
      v20 = (_QWORD *)(v12 + 16 * v10);
      v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (sub_18A62FAFC() & 1) != 0)
        goto LABEL_7;
    }
  }
  sub_18A5F394C();
  v22 = sub_18A6A70E4();
  v34 = *v3;
  *v3 = 0x8000000000000000;
  sub_18A5F3D48();
  v23 = sub_18A6A7948();
  sub_18A69DD58(v23, v24, v10, v22);
  sub_18A6A645C(v25, v26, v27, v28, v29, v30, v31, v32, v33, v34);
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_18A69C8E8(uint64_t a1, void *a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  char v18;
  id v19;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v8 = a3 & 1;
  v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  sub_18A6291A0();
  v10 = a2;
  NSObject.hash(into:)();

  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  v25 = a1;
  v24 = a2;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_9:
    sub_18A5F3A8C();
    v18 = sub_18A6A70E4();
    v26 = *v4;
    *v4 = 0x8000000000000000;
    v19 = v10;
    sub_18A69DEF0(v24, v8, v13, v18);
    *v4 = v26;
    swift_bridgeObjectRelease();
    *(_QWORD *)v25 = v24;
    *(_BYTE *)(v25 + 8) = v8 != 0;
    return 1;
  }
  v14 = ~v12;
  while ((*(_BYTE *)(*(_QWORD *)(v9 + 48) + 16 * v13 + 8) & 1) == 0)
  {
    if (!v8)
      goto LABEL_7;
LABEL_8:
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_9;
  }
  if (!v8)
    goto LABEL_8;
LABEL_7:
  sub_18A5F50F0(0, &qword_1EDF6A970);
  v15 = sub_18A6A7AD0();
  v16 = v10;
  v17 = v15;
  static NSObject.== infix(_:_:)();
  sub_18A6A7CEC();

  if ((&v26 & 1) == 0)
    goto LABEL_8;

  sub_18A5F3A8C();
  v21 = *(_QWORD *)(*v4 + 48) + 16 * v13;
  v22 = *(void **)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v25 = v22;
  *(_BYTE *)(v25 + 8) = v21;
  v23 = v22;
  return 0;
}

uint64_t sub_18A69CAD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  sub_18A5F101C(&qword_1EDF6B3D0);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_18A69CD4C()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  sub_18A5F44DC();
  v1 = v0;
  v2 = (_QWORD *)*v0;
  sub_18A5F101C(v3);
  v4 = static _SetStorage.resize(original:capacity:move:)();
  if (!v2[2])
  {
    sub_18A6A6FD0();
LABEL_34:
    *v1 = v4;
    sub_18A5F3CFC();
    return;
  }
  v30 = v0;
  sub_18A6A7F80();
  v6 = v2 + 7;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & v2[7];
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v4 + 56;
  sub_18A6A79D0();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = v18 + (v11 << 6))
  {
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(v2[6] + 8 * i);
    v21 = NSObject._rawHashValue(seed:)(v19);
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v10 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v25) = v20;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v9)
      goto LABEL_32;
    ++v11;
    if (!v6[v14])
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_32;
      if (!v6[v11])
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_32;
        if (!v6[v11])
          break;
      }
    }
LABEL_20:
    sub_18A623BAC();
    v8 = v17 & v16;
  }
  v15 = v14 + 3;
  if (v15 >= v9)
  {
LABEL_32:
    sub_18A6A54D0();
    v1 = v30;
    goto LABEL_34;
  }
  if (v6[v15])
  {
    v11 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v11 >= v9)
      goto LABEL_32;
    ++v15;
    if (v6[v11])
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_18A69CF80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_18A5F101C(&qword_1EDF6A4C0);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = static Hasher._hash(seed:_:)();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v26;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18A69D1DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_18A5F101C((uint64_t *)&unk_1EDF69270);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_18A69D484()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  id v19;

  v1 = v0;
  v2 = *v0;
  sub_18A5F101C(&qword_1EDF69348);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = swift_release();
    *v1 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = v2 + 56;
  v6 = -1;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  result = swift_retain();
  v10 = 0;
  if (!v7)
    goto LABEL_6;
LABEL_5:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(v2 + 48) + 16 * i;
    v17 = *(id *)v16;
    v18 = *(_BYTE *)(v16 + 8);
    v19 = *(id *)v16;
    result = sub_18A623354(v17, v18, v3);
    if (v7)
      goto LABEL_5;
LABEL_6:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      goto LABEL_22;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_22;
      v14 = *(_QWORD *)(v5 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_22;
        v14 = *(_QWORD *)(v5 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v7 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_22;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_18A69D630(Swift::UInt a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_18A6223A8();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18A621EC4();
      goto LABEL_14;
    }
    sub_18A69CAD8();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == a1)
    {
LABEL_13:
      type metadata accessor for Scope(0);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = a1;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
}

void sub_18A69D77C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_18A6225C8();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18A621FB4();
      goto LABEL_14;
    }
    sub_18A69CD4C();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A790);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void sub_18A69D910(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_18A6225D4();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18A621FC0();
      goto LABEL_14;
    }
    sub_18A69CD4C();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void sub_18A69DAA4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_18A6225E0();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18A621FCC();
      goto LABEL_14;
    }
    sub_18A69CD4C();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void sub_18A69DC38(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_18A6227D4();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18A6220C0();
      goto LABEL_14;
    }
    sub_18A69CF80();
  }
  v8 = *v3;
  v9 = static Hasher._hash(seed:_:)();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = a1;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
}

void sub_18A69DD58(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_18A6229CC();
  }
  else
  {
    if (v10 > v9)
    {
      sub_18A6221B0();
      goto LABEL_22;
    }
    sub_18A69D1DC();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  v14 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v19 = (_QWORD *)(v15 + 16 * a3);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v21 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v22 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * a3);
  *v22 = a1;
  v22[1] = a2;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
}

void sub_18A69DEF0(void *a1, char a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::UInt v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v8 = a2 & 1;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_18A622C20();
    }
    else
    {
      if (v10 > v9)
      {
        sub_18A6222A8();
        goto LABEL_16;
      }
      sub_18A69D484();
    }
    v11 = *v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v8);
    v12 = a1;
    NSObject.hash(into:)();

    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v11 + 32);
    a3 = v13 & ~v14;
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v15 = ~v14;
      do
      {
        v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
        v17 = *(void **)v16;
        if ((*(_BYTE *)(v16 + 8) & 1) != 0)
        {
          if ((_DWORD)v8)
            goto LABEL_14;
        }
        else if (!(_DWORD)v8)
        {
LABEL_14:
          sub_18A5F50F0(0, &qword_1EDF6A970);
          v18 = v17;
          v19 = v12;
          v20 = v18;
          v21 = static NSObject.== infix(_:_:)();

          if ((v21 & 1) != 0)
            goto LABEL_19;
        }
        a3 = (a3 + 1) & v15;
      }
      while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_16:
  v22 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = *(_QWORD *)(v22 + 48) + 16 * a3;
  *(_QWORD *)v23 = a1;
  *(_BYTE *)(v23 + 8) = (_DWORD)v8 != 0;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
LABEL_19:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v22 + 16) = v26;
  }
}

uint64_t sub_18A69E0D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  swift_bridgeObjectRetain();
  sub_18A62EAC8();
  v3 = v2;
  v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_18A5F101C(&qword_1EDF6A408);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(v14 + 48);
  v10 = type metadata accessor for UUID();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v3, v10);
  v12 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v3);
  sub_18A5F101C(&qword_1EDF6A430);
  sub_18A62F924((unint64_t *)&unk_1EDF6A410, v11, MEMORY[0x1E0CB09C8]);
  _NativeDictionary._delete(at:)();
  *v1 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_18A69E214()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  swift_bridgeObjectRetain();
  sub_18A62E990();
  v3 = v2;
  v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_18A5F101C((uint64_t *)&unk_1EDF692C8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);

  v9 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v3);
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  type metadata accessor for CKError(0);
  sub_18A6A4AD4((unint64_t *)&qword_1ECD967B8, (unint64_t *)&qword_1ECD967B0);
  _NativeDictionary._delete(at:)();
  *v1 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_18A69E34C()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_18A6A74A4();
  if (v2)
    goto LABEL_4;
  result = sub_18A6A72D0();
  if (!__OFADD__(result, 1))
  {
    sub_18A66B8F4(v1, result + 1);
    *v0 = v4;
LABEL_4:
    swift_isUniquelyReferenced_nonNull_native();
    sub_18A6A7614();
    sub_18A6A839C();
    sub_18A6A6870(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
    return sub_18A6A5A20();
  }
  __break(1u);
  return result;
}

uint64_t sub_18A69E3C0(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69E720);
}

uint64_t sub_18A69E3CC(uint64_t a1, char a2, uint64_t a3)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = a2 & 1;
  sub_18A6A6D08();
  sub_18A6A7064();
  sub_18A69E85C(a1, v5, a3, v6);
  sub_18A6A6870(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
  return sub_18A6A5D94();
}

uint64_t sub_18A69E418(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69E9C8);
}

uint64_t sub_18A69E424(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7 = a2 & 1;
  sub_18A6A6D08();
  sub_18A6A7064();
  v8 = a4(a1, v7, a3);
  sub_18A6A645C(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
  return sub_18A6A5D94();
}

uint64_t sub_18A69E474(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69EB04);
}

uint64_t sub_18A69E480(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69EC40);
}

uint64_t sub_18A69E48C(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69ED7C);
}

uint64_t sub_18A69E498(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69EEB8);
}

uint64_t sub_18A69E4A4()
{
  return sub_18A69E4CC();
}

uint64_t sub_18A69E4B8()
{
  return sub_18A69E4CC();
}

uint64_t sub_18A69E4CC()
{
  uint64_t *v0;
  uint64_t v2;

  sub_18A6A6D08();
  v2 = *v0;
  *v0 = 0x8000000000000000;
  sub_18A69EFF4();
  *v0 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A69E564(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18A69E424(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18A69F0F0);
}

uint64_t sub_18A69E570(uint64_t a1, uint64_t a2)
{
  return sub_18A69E6DC(a1, a2, (uint64_t (*)(uint64_t))sub_18A69F22C);
}

uint64_t sub_18A69E57C(char a1, void *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  sub_18A6A6D08();
  sub_18A6A6208();
  sub_18A69F340(a1, a2, v4);
  sub_18A6A6870(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return sub_18A6A5A20();
}

uint64_t sub_18A69E5BC()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_18A6A74A4();
  if (v2)
    goto LABEL_4;
  result = sub_18A6A72D0();
  if (!__OFADD__(result, 1))
  {
    sub_18A66BAB4(v1, result + 1);
    *v0 = v4;
LABEL_4:
    swift_isUniquelyReferenced_nonNull_native();
    sub_18A6A7614();
    sub_18A6A839C();
    sub_18A6A6870(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
    return sub_18A6A5A20();
  }
  __break(1u);
  return result;
}

uint64_t sub_18A69E630(uint64_t a1, void *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  sub_18A6A6D08();
  sub_18A6A6208();
  sub_18A69F540(a1, a2, v4);
  sub_18A6A6870(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return sub_18A6A5A20();
}

uint64_t sub_18A69E670(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_18A69F660(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A69E6DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  sub_18A6A6D08();
  sub_18A6A6208();
  v4 = sub_18A6A7948();
  v5 = a3(v4);
  sub_18A6A645C(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return sub_18A6A5D94();
}

void sub_18A69E720(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62E9F8();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C((uint64_t *)&unk_1EDF6C7D0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62E9F8();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, &qword_1EDF6B578);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A615B4C(*(id *)v22);
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69E85C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v27 = a1;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  sub_18A62EA2C();
  v16 = v13[2];
  v17 = (v15 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  v19 = v14;
  v20 = v15;
  sub_18A5F101C(&qword_1EDF6C7C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18))
    goto LABEL_5;
  sub_18A62EA2C();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v19 = v21;
LABEL_5:
  v23 = a2 & 1;
  v24 = *v5;
  if ((v20 & 1) != 0)
  {
    v25 = v24[7] + 16 * v19;
    sub_18A615B4C(*(id *)v25);
    *(_QWORD *)v25 = v27;
    *(_BYTE *)(v25 + 8) = v23 != 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    sub_18A69BE10(v19, (uint64_t)v12, v27, v23, v24);
  }
}

void sub_18A69E9C8(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62EA94();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF6C7B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62EA94();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, &qword_1EDF6C7C0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A615B4C(*(id *)v22);
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69EB04(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62E9C4();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF6A000);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62E9C4();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A615B4C(*(id *)v22);
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69EC40(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62E9C4();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF69478);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62E9C4();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A60A664(*(id *)v22, *(_BYTE *)(v22 + 8));
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69ED7C(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62E990();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF6A1A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62E990();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A615B4C(*(id *)v22);
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69EEB8(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62E990();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C((uint64_t *)&unk_1EDF6C7A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62E990();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A60A664(*(id *)v22, *(_BYTE *)(v22 + 8));
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69EFF4()
{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD);
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD);

  sub_18A5F44DC();
  v25 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_18A62E868(v10, v4);
  sub_18A6A641C();
  if (v13)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v14 = v11;
  v15 = v12;
  sub_18A6A72EC();
  if (sub_18A6A7F34(v3 & 1))
  {
    v16 = sub_18A6A7948();
    sub_18A62E868(v16, v17);
    sub_18A62FB34();
    if (!v19)
      goto LABEL_10;
    v14 = v18;
  }
  if ((v15 & 1) != 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v0 + 56) + 16 * v14;
    v25(*(_QWORD *)v20, *(unsigned __int8 *)(v20 + 8));
    *(_QWORD *)v20 = v9;
    *(_BYTE *)(v20 + 8) = (v7 & 1) != 0;
    sub_18A5F3CFC();
  }
  else
  {
    v21 = sub_18A6A7988();
    sub_18A69BEB8(v21, v22, v5, v9, v23, v24);
    sub_18A5F3CFC();
    swift_bridgeObjectRetain();
  }
}

void sub_18A69F0F0(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v5 = v4;
  v9 = *v4;
  sub_18A62E9C4();
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v10;
  v16 = v11;
  sub_18A5F101C(&qword_1EDF6A170);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v14))
    goto LABEL_5;
  sub_18A62E9C4();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = (_DWORD)v19 != 0;
    v22 = *(_QWORD *)(v20 + 56) + 16 * v15;
    sub_18A615B4C(*(id *)v22);
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_18A69BF0C(v15, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_18A69F22C(uint64_t a1, void *a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v4 = v3;
  v7 = *v3;
  sub_18A62E990();
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v9 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v8;
  v14 = v9;
  sub_18A5F101C(&qword_1EDF692D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
    goto LABEL_5;
  sub_18A62E990();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v13 = v15;
LABEL_5:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 + 56);

    *(_QWORD *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_18A69BF8C(v13, (uint64_t)a2, a1, v17);
    v19 = a2;
  }
}

void sub_18A69F340(char a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  id v18;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  sub_18A62E990();
  v10 = v7[2];
  v11 = (v9 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v8;
  v14 = v9;
  sub_18A5F101C(&qword_1EDF6A2A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
    goto LABEL_5;
  sub_18A62E990();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v13 = v15;
LABEL_5:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    *(_BYTE *)(v17[7] + v13) = a1 & 1;
  }
  else
  {
    sub_18A69BF48(v13, (uint64_t)a2, a1 & 1, v17);
    v18 = a2;
  }
}

void sub_18A69F450()
{
  uint64_t *v0;
  unint64_t *v1;
  unint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;

  sub_18A5F44DC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v23 = v11;
  v5(v11);
  sub_18A6A641C();
  if (v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v12;
  v16 = v13;
  sub_18A5F101C(v4);
  if (!sub_18A6A7F40(v8 & 1))
    goto LABEL_5;
  v17 = v6(v23);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, v2);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = *v0;
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v19 + 56);

    *(_QWORD *)(v20 + 8 * v15) = v10;
    sub_18A5F3CFC();
  }
  else
  {
    sub_18A69BF8C(v15, v23, v10, v19);
    sub_18A5F3CFC();
    v22 = v21;
  }
}

void sub_18A69F540(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  id v18;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  sub_18A62E990();
  v10 = v7[2];
  v11 = (v9 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v8;
  v14 = v9;
  sub_18A5F101C(&qword_1EDF6A2D0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
    goto LABEL_5;
  sub_18A62E990();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v13 = v15;
LABEL_5:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    sub_18A6A51C0(a1, v17[7] + 40 * v13, (uint64_t *)&unk_1EDF6A2D8);
  }
  else
  {
    sub_18A69BFD0(v13, (uint64_t)a2, a1, v17);
    v18 = a2;
  }
}

uint64_t sub_18A69F660(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  sub_18A62EAC8();
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = v13;
  v19 = v14;
  sub_18A5F101C(&qword_1EDF6A408);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  sub_18A62EAC8();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    result = swift_release();
    *(_QWORD *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_18A69C044(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

void sub_18A69F7A4(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  sub_18A62E990();
  v10 = v7[2];
  v11 = (v9 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v8;
  v14 = v9;
  sub_18A5F101C((uint64_t *)&unk_1EDF692C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
    goto LABEL_5;
  sub_18A62E990();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v13 = v15;
LABEL_5:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    v18 = v17[7];

    *(_QWORD *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_18A69C0DC(v13, (uint64_t)a2, a1, v17);
    v19 = a2;
  }
}

uint64_t sub_18A69F8B8(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x18D76CEBC](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

unint64_t sub_18A69F974(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t __buf;

  if (result)
  {
    v1 = result;
    __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_18A69F9FC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v6 = (_QWORD *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_18A6217B0(0, v5, v6);
    v7 = sub_18A69FB88(v6, v5, v3, a2);
    swift_release();
  }
  else
  {
    v8 = (unint64_t *)swift_slowAlloc();
    sub_18A6217B0(0, v5, v8);
    v7 = sub_18A69FB88(v8, v5, v3, a2);
    swift_release();
    MEMORY[0x18D76E86C](v8, -1, -1);
  }
  return v7;
}

unint64_t sub_18A69FB88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  Swift::UInt v10;
  id v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char v21;
  id v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = a2;
  v36 = *(_QWORD *)(a3 + 16);
  if (!v36)
  {
    v30 = 0;
    goto LABEL_22;
  }
  v6 = a4 + 56;
  v35 = a3 + 32;
  swift_bridgeObjectRetain();
  v33 = 0;
  for (i = 0; i != v36; i = v26 + 1)
  {
    v37 = i;
    v8 = v35 + 16 * i;
    v9 = *(void **)v8;
    v10 = *(unsigned __int8 *)(v8 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v10);
    v11 = v9;
    NSObject.hash(into:)();
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(a4 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
    {
LABEL_12:

LABEL_13:
      v26 = v37;
      continue;
    }
    v15 = ~v13;
    while (1)
    {
      v16 = *(_QWORD *)(a4 + 48) + 16 * v14;
      v17 = *(void **)v16;
      if ((*(_BYTE *)(v16 + 8) & 1) == 0)
        break;
      if ((v10 & 1) != 0)
      {
        sub_18A5F50F0(0, &qword_1EDF6A970);
        v18 = v17;
        v19 = v11;
        v20 = v18;
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_16;
      }
LABEL_11:
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_12;
    }
    if ((v10 & 1) != 0)
      goto LABEL_11;
    sub_18A5F50F0(0, &qword_1EDF6A970);
    v22 = v17;
    v23 = v11;
    v24 = v22;
    v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0)
      goto LABEL_11;
LABEL_16:

    v27 = (v14 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v28 = *(unint64_t *)((char *)a1 + v27);
    *(unint64_t *)((char *)a1 + v27) = v28 | (1 << v14);
    if ((v28 & (1 << v14)) != 0)
      goto LABEL_13;
    v29 = __OFADD__(v33++, 1);
    v26 = v37;
    if (v29)
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease();
  v5 = a2;
  v30 = v33;
LABEL_22:
  swift_retain();
  return sub_18A69FDEC(a1, v5, v30, a4);
}

unint64_t sub_18A69FDEC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;

  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_18A5F101C(&qword_1EDF69348);
  result = static _SetStorage.allocate(capacity:)();
  v6 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
    }
    else
    {
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_30;
      if (v14 >= a2)
      {
LABEL_27:
        swift_release();
        return v6;
      }
      v15 = a1[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= a2)
          goto LABEL_27;
        v15 = a1[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= a2)
            goto LABEL_27;
          v15 = a1[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= a2)
              goto LABEL_27;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_31;
                if (v11 >= a2)
                  goto LABEL_27;
                v15 = a1[v11];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_24:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v11 << 6);
    }
    v17 = *(_QWORD *)(a4 + 48) + 16 * v13;
    v18 = *(id *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(id *)v17;
    result = sub_18A623354(v18, v19, v6);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_27;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_18A69FF88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_18A5F101C((uint64_t *)&unk_1EDF69270);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_18A6A0214()
{
  return 0;
}

void sub_18A6A021C(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;

  v10 = *(_QWORD *)(a2 + 16);
  v11 = MEMORY[0x18D76C5A4](v10);
  if ((a4 & 1) != 0)
    v12 = 0;
  else
    v12 = a3;
  if (v12 <= v11)
    v12 = v11;
  if (v12 <= a5)
    v13 = a5;
  else
    v13 = v12;
  if (v13 > 4)
  {
    v14 = MEMORY[0x18D76C5B0]();
    sub_18A6A14A4(&v34, a2, (_QWORD *)(v14 + 16));
    *a1 = v34;
  }
  else if (v10 >= 2)
  {
    v33 = a1;
    sub_18A61807C(0, v10, 0, MEMORY[0x1E0DEE9D8]);
    v16 = v15;
    v17 = 0;
    v18 = a2 + 32;
    while (v17 != v10)
    {
      v19 = (uint64_t *)(v18 + 16 * v17);
      v21 = *v19;
      v20 = v19[1];
      v22 = v16[2];
      if (v22)
      {
        v23 = v16[4] == v21 && v16[5] == v20;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          *v33 = v17;
          return;
        }
        if (v22 != 1)
        {
          v24 = v16[6] == v21 && v16[7] == v20;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_40;
          if (v22 != 2)
          {
            v25 = v16 + 9;
            v26 = 2;
            while (1)
            {
              v27 = v26 + 1;
              if (__OFADD__(v26, 1))
                break;
              v28 = *(v25 - 1) == v21 && *v25 == v20;
              if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_40;
              v25 += 2;
              ++v26;
              if (v27 == v22)
                goto LABEL_36;
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_36:
      v30 = v16[2];
      v29 = v16[3];
      swift_bridgeObjectRetain_n();
      if (v30 >= v29 >> 1)
      {
        sub_18A61807C(v29 > 1, v30 + 1, 1, (uint64_t)v16);
        v16 = v32;
      }
      ++v17;
      v16[2] = v30 + 1;
      v31 = &v16[2 * v30];
      v31[4] = v21;
      v31[5] = v20;
      swift_bridgeObjectRelease();
      if (v17 == v10)
      {
        swift_bridgeObjectRelease();
        *v33 = v10;
        return;
      }
    }
    __break(1u);
  }
  else
  {
    *a1 = v10;
  }
}

void sub_18A6A0450(uint64_t *a1, unint64_t a2, unint64_t a3, char a4, unint64_t *a5)
{
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t *v22;
  char v23;
  id v24;
  void *v25;
  char v26;
  uint64_t v27;
  id v28;
  void *v29;
  char v30;
  id v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v38;

  LOBYTE(v6) = a4;
  v8 = a2;
  v9 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_60:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = MEMORY[0x18D76C5A4](v10);
  if ((v6 & 1) != 0)
    v12 = 0;
  else
    v12 = a3;
  if (v12 <= v11)
    v12 = v11;
  if (v12 <= (uint64_t)a5)
    v13 = (uint64_t)a5;
  else
    v13 = v12;
  if (v13 > 4)
  {
    v15 = MEMORY[0x18D76C5B0]();
    sub_18A6A1650(&v38, v8, (Swift::Int *)(v15 + 16));
    *a1 = v38;
    return;
  }
  if (v10 >= 2)
  {
    v38 = MEMORY[0x1E0DEE9D8];
    sub_18A69F8B8(v10, 0);
    a5 = &v38;
    specialized Array._endMutation()();
    if (v9)
    {
      if (v8 < 0)
        a5 = (unint64_t *)v8;
      else
        a5 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 < 0)
      {
LABEL_62:
        __break(1u);
        return;
      }
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v9)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      *a1 = v9;
      return;
    }
    a3 = 0;
    v35 = v8;
    v36 = v8 & 0xC000000000000001;
    v32 = v8 + 32;
    v33 = v8 & 0xFFFFFFFFFFFFFF8;
    v34 = v9;
    while (1)
    {
      if (a3 == v9)
        goto LABEL_59;
      if (v36)
      {
        v16 = (id)MEMORY[0x18D76CEB0](a3, v8);
      }
      else
      {
        if (a3 >= *(_QWORD *)(v33 + 16))
        {
          __break(1u);
          goto LABEL_62;
        }
        v16 = *(id *)(v32 + 8 * a3);
      }
      v17 = v16;
      v18 = v38;
      if (v38 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v19)
          goto LABEL_49;
      }
      else
      {
        v19 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v19)
          goto LABEL_49;
      }
      v9 = v18 & 0xC000000000000001;
      if ((v18 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x18D76CEB0](0, v18);
      else
        v20 = *(id *)(v18 + 32);
      v21 = v20;
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      a5 = v22;
      v23 = static NSObject.== infix(_:_:)();

      if ((v23 & 1) != 0)
      {
LABEL_57:

        swift_bridgeObjectRelease_n();
        *a1 = a3;
        return;
      }
      if (v19 != 1)
      {
        if (v9)
          v24 = (id)MEMORY[0x18D76CEB0](1, v18);
        else
          v24 = *(id *)(v18 + 40);
        v25 = v24;
        v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) != 0)
          goto LABEL_57;
        if (v19 != 2)
        {
          v27 = 6;
          while (1)
          {
            v6 = v27 - 4;
            v28 = v9 ? (id)MEMORY[0x18D76CEB0](v27 - 4, v18) : *(id *)(v18 + 8 * v27);
            v29 = v28;
            v8 = v27 - 3;
            if (__OFADD__(v6, 1))
              break;
            v30 = static NSObject.== infix(_:_:)();

            if ((v30 & 1) != 0)
              goto LABEL_57;
            ++v27;
            if (v8 == v19)
              goto LABEL_49;
          }
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
LABEL_49:
      swift_bridgeObjectRelease();
      v31 = v17;
      MEMORY[0x18D76C9DC]();
      v6 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6 >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++a3;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      a5 = &v38;
      specialized Array._endMutation()();

      v9 = v34;
      v8 = v35;
      if (a3 == v34)
        goto LABEL_56;
    }
  }
  if (v9)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v14;
}

uint64_t sub_18A6A0848(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6A08A4(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t sub_18A6A0900(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    sub_18A612ED0();
    v10 = MEMORY[0x1E0DEE9D8];
  }
  v11 = *(_QWORD *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v8 = sub_18A6A726C();
    v9 = a5(v8);
    goto LABEL_9;
  }
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    sub_18A612ED0();
    v9 = MEMORY[0x1E0DEE9D8];
  }
LABEL_9:
  sub_18A612ED0();
  return v9;
}

void sub_18A6A09E0(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v3 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  v4 = *v1;
  v5 = *(_QWORD *)(v1[1] + 16);
  if (*v2)
  {
    swift_beginAccess();
    if (MEMORY[0x18D76C580](*(_QWORD *)(v4 + 16) & 0x3FLL) < (uint64_t)v5)
    {
      v6 = *(_QWORD *)(v4 + 24) & 0x3FLL;
      if (v5 <= 0xF && v6 == 0)
      {
        swift_release();
        *v2 = 0;
        return;
      }
      goto LABEL_11;
    }
    sub_18A6A0DD8();
    v9 = *v2;
    if (*v2)
    {
      swift_retain();
      sub_18A6A13EC((Swift::Int *)(v9 + 16));
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else if (v5 > 0xF)
  {
    v6 = 0;
LABEL_11:
    v8 = MEMORY[0x18D76C5A4](v5);
    sub_18A6A0E78(v8, v6, (void (*)(uint64_t, uint64_t, uint64_t))sub_18A6A104C);
  }
}

void sub_18A6A0B0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = v2;
  v8 = v2[1];
  v6 = v2 + 1;
  v7 = v8;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_18A60FC4C();
    v7 = *v6;
  }
  v10 = *(_QWORD *)(v7 + 16);
  if (v10 >= *(_QWORD *)(v7 + 24) >> 1)
  {
    sub_18A60FC4C();
    v7 = *v6;
  }
  *(_QWORD *)(v7 + 16) = v10 + 1;
  v11 = v7 + 16 * v10;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  v3[1] = v7;
  v12 = *(_QWORD *)(v7 + 16);
  v13 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (MEMORY[0x18D76C580](*(_QWORD *)(v13 + 16) & 0x3FLL) < (uint64_t)v12)
    {
      v14 = *(_QWORD *)(v13 + 24) & 0x3FLL;
      if (v12 <= 0xF && v14 == 0)
      {
        swift_release();
        *v3 = 0;
        return;
      }
      goto LABEL_15;
    }
    sub_18A6A0DD8();
    if (*v3)
      sub_18A6A0E14();
    else
      __break(1u);
  }
  else if (v12 > 0xF)
  {
    v14 = 0;
LABEL_15:
    v16 = MEMORY[0x18D76C5A4](v12);
    sub_18A6A0E78(v16, v14, (void (*)(uint64_t, uint64_t, uint64_t))sub_18A6A0F3C);
  }
}

void sub_18A6A0C74(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = v1;
  v3 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  v4 = *v1;
  v5 = *(_QWORD *)(v1[1] + 16);
  if (*v2)
  {
    swift_beginAccess();
    if (MEMORY[0x18D76C580](*(_QWORD *)(v4 + 16) & 0x3FLL) < (uint64_t)v5)
    {
      v6 = *(_QWORD *)(v4 + 24) & 0x3FLL;
      if (v5 <= 0xF && v6 == 0)
      {
        swift_release();
        *v2 = 0;
        return;
      }
      goto LABEL_11;
    }
    sub_18A6A0DD8();
    if (*v2)
      sub_18A6A0E14();
    else
      __break(1u);
  }
  else if (v5 > 0xF)
  {
    v6 = 0;
LABEL_11:
    v8 = MEMORY[0x18D76C5A4](v5);
    sub_18A6A0E78(v8, v6, (void (*)(uint64_t, uint64_t, uint64_t))sub_18A6A104C);
  }
}

_QWORD *sub_18A6A0D8C(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5, a3 + 32, *(_QWORD *)(a3 + 16));
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

void sub_18A6A0DD8()
{
  uint64_t v0;
  _QWORD *v1;

  if (!*v1 || swift_isUniquelyReferenced_native())
    goto LABEL_5;
  if (*v1)
  {
    _HashTable.copy()();
    sub_18A6A805C();
    *v1 = v0;
LABEL_5:
    sub_18A5F379C();
    return;
  }
  __break(1u);
}

uint64_t sub_18A6A0E14()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

void sub_18A6A0E78(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = a2;
  if (a2 <= a1)
    a2 = a1;
  sub_18A6A0EB4(v4[1], a2, 0, v5, a3);
  sub_18A6A805C();
  *v4 = v3;
  sub_18A5F379C();
}

uint64_t sub_18A6A0EB4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = MEMORY[0x18D76C5A4](*(_QWORD *)(a1 + 16));
  v11 = 0;
  if ((a3 & 1) != 0)
    v12 = 0;
  else
    v12 = a2;
  if (v12 <= v10)
    v12 = v10;
  if (v12 <= a4)
    v13 = a4;
  else
    v13 = v12;
  if (v13 >= 5)
  {
    v11 = MEMORY[0x18D76C5B0]();
    a5(a1, v11 + 16, v11 + 32);
  }
  return v11;
}

Swift::Int sub_18A6A0F3C(Swift::Int result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1))
        break;
      v5 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_18A6A104C(Swift::Int result, Swift::Int *a2)
{
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  id v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v5 = result + 32;
    while (1)
    {
      v6 = *a2;
      v7 = *(id *)(v5 + 8 * v4);
      result = NSObject._rawHashValue(seed:)(v6);
      if (__OFSUB__(1 << *a2, 1))
        break;
      v8 = _HashTable.UnsafeHandle._startIterator(bucket:)();

      if (v8)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_18A6A113C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v15;
  char v16;
  _QWORD *v17;

  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  if (__OFSUB__(1 << *a5, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    v10 = _HashTable.BucketIterator.currentValue.getter();
    v11 = v10;
    if ((v12 & 1) == 0)
    {
      v13 = (_QWORD *)(a3 + 16 * v10);
      if (*v13 != a1 || v13[1] != a2)
      {
        do
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          _HashTable.BucketIterator.advance()();
          v15 = _HashTable.BucketIterator.currentValue.getter();
          v11 = v15;
          if ((v16 & 1) != 0)
            break;
          v17 = (_QWORD *)(a3 + 16 * v15);
        }
        while (*v17 != a1 || v17[1] != a2);
      }
    }
    return v11;
  }
  return result;
}

Swift::Int sub_18A6A129C(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4)
{
  Swift::Int result;
  uint64_t v7;
  char v8;
  id v9;
  char v10;
  char v11;

  result = NSObject._rawHashValue(seed:)(*a4);
  if (__OFSUB__(1 << *a4, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    v7 = _HashTable.BucketIterator.currentValue.getter();
    if ((v8 & 1) == 0)
    {
      sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
      do
      {
        v9 = *(id *)(a2 + 8 * v7);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
        _HashTable.BucketIterator.advance()();
        v7 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v11 & 1) == 0);
    }
    return v7;
  }
  return result;
}

Swift::Int sub_18A6A13EC(Swift::Int *a1)
{
  Swift::Int result;

  result = NSObject._rawHashValue(seed:)(*a1);
  if (__OFSUB__(1 << *a1, 1))
  {
    __break(1u);
  }
  else
  {
    if (_HashTable.UnsafeHandle._startIterator(bucket:)())
    {
      while (1)
        _HashTable.BucketIterator.advance()();
    }
    return _HashTable.BucketIterator.currentValue.setter();
  }
  return result;
}

unint64_t sub_18A6A14A4(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
LABEL_14:
    *a1 = v3;
    return 1;
  }
  v5 = 0;
  v6 = a2 + 32;
  while (2)
  {
    v13 = v5;
    v7 = (_QWORD *)(v6 + 16 * v5);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    if (!__OFSUB__(1 << *a3, 1))
    {
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      while (1)
      {
        result = _HashTable.BucketIterator.currentValue.getter();
        if ((v9 & 1) != 0)
          break;
        if (result >= v3)
        {
          __break(1u);
          goto LABEL_18;
        }
        v10 = (_QWORD *)(v6 + 16 * result);
        v11 = *v10 == *v7 && v10[1] == v7[1];
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = 0;
          *a1 = v13;
          return result;
        }
        _HashTable.BucketIterator.advance()();
      }
      _HashTable.BucketIterator.currentValue.setter();
      v5 = v13 + 1;
      if (v13 + 1 != v3)
        continue;
      goto LABEL_14;
    }
    break;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_18A6A1650(_QWORD *a1, unint64_t a2, Swift::Int *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  char v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v21;
  Swift::Int *v22;
  uint64_t v23;
  void *v24;

  v4 = a2;
  if (a2 >> 62)
    goto LABEL_26;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  do
  {
    if (!v5)
    {
LABEL_19:
      *a1 = v5;
      return 1;
    }
    v6 = 0;
    v7 = v4 & 0xC000000000000001;
    v8 = v4 + 32;
    v9 = v4 & 0xFFFFFFFFFFFFFF8;
    v21 = v5;
    v22 = a3;
    v23 = v4;
    while (1)
    {
      if (v6 == v5)
        goto LABEL_24;
      sub_18A612E64(v6, v7 == 0, v4);
      v10 = v7 ? (id)MEMORY[0x18D76CEB0](v6, v4) : *(id *)(v8 + 8 * v6);
      v24 = v10;
      NSObject._rawHashValue(seed:)(*a3);
      if (__OFSUB__(1 << *a3, 1))
        break;
      _HashTable.UnsafeHandle._startIterator(bucket:)();

      v4 = v23;
      v11 = _HashTable.BucketIterator.currentValue.getter();
      a3 = &qword_1ECD967B0;
      if ((v12 & 1) == 0)
      {
        do
        {
          if (v7)
          {
            v13 = (id)MEMORY[0x18D76CEB0](v11, v23);
            v14 = (id)MEMORY[0x18D76CEB0](v6, v23);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_23:
              __break(1u);
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
            if (v11 >= *(_QWORD *)(v9 + 16))
              goto LABEL_23;
            v15 = *(void **)(v8 + 8 * v6);
            v13 = *(id *)(v8 + 8 * v11);
            v14 = v15;
          }
          v16 = v14;
          sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
          v17 = static NSObject.== infix(_:_:)();

          if ((v17 & 1) != 0)
          {
            result = 0;
            *a1 = v6;
            return result;
          }
          _HashTable.BucketIterator.advance()();
          v11 = _HashTable.BucketIterator.currentValue.getter();
        }
        while ((v18 & 1) == 0);
      }
      _HashTable.BucketIterator.currentValue.setter();
      ++v6;
      v5 = v21;
      a3 = v22;
      if (v6 == v21)
        goto LABEL_19;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  while ((v5 & 0x8000000000000000) == 0);
  __break(1u);
  return result;
}

void sub_18A6A18DC(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  id v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v4 >= 1)
  {
    v8 = *(_QWORD *)(a3 + 16);
    if ((uint64_t)(v8 - v4) / 2 <= a1)
    {
      v14 = a2;
      v15 = __OFSUB__(v8, a2);
      v16 = v8 - a2;
      if (v15)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      if (v16 < MEMORY[0x18D76C580](*a4 & 0x3F) / 3)
      {
        sub_18A6A08A4(v14, a3);
        if (v18 == v19 >> 1)
        {
LABEL_30:
          swift_unknownObjectRelease();
          return;
        }
        v20 = v18;
        v21 = v19 >> 1;
        if (v18 >= (uint64_t)(v19 >> 1))
          goto LABEL_60;
        v22 = v17;
        while (1)
        {
          v23 = *a4;
          v24 = *(id *)(v22 + 8 * v20);
          NSObject._rawHashValue(seed:)(v23);
          if (__OFSUB__(1 << *a4, 1))
            goto LABEL_51;
          if (_HashTable.UnsafeHandle._startIterator(bucket:)())
          {
            while (1)
            {
              v25 = _HashTable.BucketIterator.currentValue.getter();
              if ((v26 & 1) == 0 && v25 == v14)
                break;
              _HashTable.BucketIterator.advance()();
            }
          }
          if (__OFSUB__(v14, v4))
            goto LABEL_52;
          _HashTable.BucketIterator.currentValue.setter();

          v15 = __OFADD__(v14++, 1);
          if (v15)
            goto LABEL_53;
          if (++v20 == v21)
            goto LABEL_30;
        }
      }
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      v33 = _HashTable.BucketIterator.currentValue.getter();
      if ((v34 & 1) == 0 && v33 >= v14)
      {
        if (__OFSUB__(v33, v4))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (MEMORY[0x18D76C580](*a4 & 0x3F) / 3 <= a1)
      {
        _HashTable.UnsafeHandle._startIterator(bucket:)();
        v27 = _HashTable.BucketIterator.currentValue.getter();
        if ((v28 & 1) == 0 && v27 < a1)
        {
          if (__OFADD__(v27, v4))
          {
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
          _HashTable.BucketIterator.currentValue.setter();
        }
        _HashTable.BucketIterator.advance()();
      }
      else
      {
        if (a1 < 0)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        if (v8 < a1)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          return;
        }
        if (a1)
        {
          swift_retain();
          v9 = 0;
          while (1)
          {
            v10 = *a4;
            v11 = *(id *)(a3 + 32 + 8 * v9);
            NSObject._rawHashValue(seed:)(v10);
            if (__OFSUB__(1 << *a4, 1))
              break;
            if (_HashTable.UnsafeHandle._startIterator(bucket:)())
            {
              while (1)
              {
                v12 = _HashTable.BucketIterator.currentValue.getter();
                if ((v13 & 1) == 0 && v12 == v9)
                  break;
                _HashTable.BucketIterator.advance()();
              }
            }
            if (__OFADD__(v9, v4))
              goto LABEL_48;
            ++v9;
            _HashTable.BucketIterator.currentValue.setter();

            if (v9 == a1)
            {
              swift_release();
              goto LABEL_36;
            }
          }
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
LABEL_36:
      v29 = a4[1];
      if (__OFSUB__(v29 >> 6, v4))
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      v30 = 1 << *a4;
      v15 = __OFSUB__(v30, 1);
      v31 = v30 - 1;
      if (v15)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v32 = (v31 & (((v29 >> 6) - v4) >> 63)) + (v29 >> 6) - v4;
      if (v32 < v31)
        v31 = 0;
      a4[1] = a4[1] & 0x3F | ((v32 - v31) << 6);
    }
  }
}

uint64_t sub_18A6A1D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  char v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;

  v2 = a2;
  v43 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v37 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v35 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v36 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
    while (1)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v36)
        goto LABEL_48;
      v13 = *(_QWORD *)(v37 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v36)
          goto LABEL_48;
        v13 = *(_QWORD *)(v37 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v36)
            goto LABEL_48;
          v13 = *(_QWORD *)(v37 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v36)
              goto LABEL_48;
            v13 = *(_QWORD *)(v37 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v36)
              {
LABEL_48:
                sub_18A62F4F8();
                return v2;
              }
              v13 = *(_QWORD *)(v37 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v36)
                    goto LABEL_48;
                  v13 = *(_QWORD *)(v37 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_50:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v9 = v14;
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
    }
    else
    {
      v25 = ~v20;
      do
      {
        v21 = (v21 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_37;
        v26 = (_QWORD *)(v22 + 16 * v21);
        v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v29 = *(_BYTE *)(v2 + 32);
    v30 = (unint64_t)((1 << v29) + 63) >> 6;
    v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      v32 = sub_18A6A21A0((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      sub_18A62F4F8();
    }
    else
    {
      v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      v32 = sub_18A6A21A0((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      sub_18A62F4F8();
      MEMORY[0x18D76E86C](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t sub_18A6A21A0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  int64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a3 + 16);
  v39 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v40 = a3 + 56;
  while (2)
  {
    v38 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_46;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_46;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_14;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_46;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v36 = v9 + 6;
                while (v36 < v14)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    v13 = v36 - 1;
                    goto LABEL_14;
                  }
                }
                v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return sub_18A69FF88(v39, a2, v38, a3);
              }
              goto LABEL_14;
            }
          }
          v13 = v18;
        }
LABEL_14:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_15:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v40 + 8 * (v24 >> 6))) == 0)
          goto LABEL_32;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_22;
          }
        }
LABEL_32:
        result = swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
LABEL_22:
      v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v38 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t sub_18A6A2490(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  char v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v22;
  unint64_t v23;

  v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter())
      return 1;
  }
  else if (!*(_QWORD *)(a2 + 16))
  {
    return 1;
  }
  if (a1 >> 62)
    goto LABEL_31;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
    v6 = 0;
    v7 = a1 & 0xC000000000000001;
    v8 = a2 + 56;
    v22 = v5;
    v23 = v4;
    while (1)
    {
      if (v7)
      {
        v9 = (id)MEMORY[0x18D76CEB0](v6, a1);
      }
      else
      {
        if (v6 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_30;
        v9 = *(id *)(a1 + 32 + 8 * v6);
      }
      v10 = v9;
      if (__OFADD__(v6++, 1))
        break;
      if (v4)
      {
        v12 = __CocoaSet.contains(_:)();

        if ((v12 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v14 = -1 << *(_BYTE *)(a2 + 32);
          v15 = v13 & ~v14;
          if (((*(_QWORD *)(v8 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
          {
            v16 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v15);
            v17 = static NSObject.== infix(_:_:)();

            if ((v17 & 1) != 0)
            {
LABEL_27:
              swift_bridgeObjectRelease();

              return 0;
            }
            v18 = ~v14;
            while (1)
            {
              v15 = (v15 + 1) & v18;
              if (((*(_QWORD *)(v8 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
                break;
              v19 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v15);
              v20 = static NSObject.== infix(_:_:)();

              if ((v20 & 1) != 0)
                goto LABEL_27;
            }
          }
        }

        v5 = v22;
        v4 = v23;
        v7 = a1 & 0xC000000000000001;
      }
      if (v6 == v5)
        goto LABEL_25;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
LABEL_25:
  swift_bridgeObjectRelease();
  return 1;
}

void sub_18A6A26E0(uint64_t a1, double a2, double a3)
{
  double v5;
  uint64_t __buf;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }
  __buf = 0;
  arc4random_buf(&__buf, 8uLL);
  if (v5 * ((double)(__buf & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    sub_18A6A26E0(a1, a2, a3);
}

void sub_18A6A2788(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18A6A8068();

  }
  sub_18A61A770();
  sub_18A5F3824();
}

uint64_t sub_18A6A27D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A81A8();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  sub_18A6A5818();
  return sub_18A68E418(v3, v4, v5, v6);
}

uint64_t sub_18A6A2834(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  if (a3)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18A6A2880()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A68E63C(v3, v4, v5);
}

uint64_t sub_18A6A28D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5720();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A68952C;
  v3 = sub_18A6A5520();
  return sub_18A68FED8(v3, v4, v5, v6);
}

uint64_t sub_18A6A2924(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_relatedApplicationBundleIdentifiers);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18A6A2978(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setRelatedApplicationBundleIdentifiers_, isa);

}

void sub_18A6A29D0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A5F3FFC();
  sub_18A679020();
  *v0 = v1;
  sub_18A5F379C();
}

void sub_18A6A29F0(uint64_t *a1)
{
  sub_18A679044(*a1);
  sub_18A5F379C();
}

void sub_18A6A2A10()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A5F3FFC();
  sub_18A6806DC();
  *v0 = v1;
  sub_18A5F379C();
}

void sub_18A6A2A30(uint64_t *a1)
{
  sub_18A680700(*a1);
  sub_18A5F379C();
}

void sub_18A6A2A50()
{
  uint64_t v0;

  sub_18A5F3FFC();
  sub_18A6896F8();
  sub_18A6A76F0(v0);
  sub_18A5F379C();
}

#error "18A6A2A80: call analysis failed (funcsize=7)"

void sub_18A6A2A8C()
{
  uint64_t v0;

  sub_18A5F3FFC();
  sub_18A6898FC();
  sub_18A6A76F0(v0);
  sub_18A5F379C();
}

void sub_18A6A2AAC(unsigned __int8 *a1)
{
  char v1;

  v1 = sub_18A6A7498(a1);
  sub_18A689920(v1);
  sub_18A5F379C();
}

void sub_18A6A2AC8()
{
  uint64_t v0;

  sub_18A5F3FFC();
  sub_18A689988();
  sub_18A6A76F0(v0);
  sub_18A5F379C();
}

void sub_18A6A2AE8(unsigned __int8 *a1)
{
  char v1;

  v1 = sub_18A6A7498(a1);
  sub_18A6899AC(v1);
  sub_18A5F379C();
}

void sub_18A6A2B04()
{
  uint64_t v0;

  sub_18A5F3FFC();
  sub_18A689A10();
  sub_18A6A76F0(v0);
  sub_18A5F379C();
}

void sub_18A6A2B24(unsigned __int8 *a1)
{
  char v1;

  v1 = sub_18A6A7498(a1);
  sub_18A689A34(v1);
  sub_18A5F379C();
}

void sub_18A6A2B40()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A5F3FFC();
  sub_18A689AC4();
  *v0 = v1;
  sub_18A5F379C();
}

void sub_18A6A2B64()
{
  _QWORD *v0;
  uint64_t v1;

  sub_18A5F3FFC();
  sub_18A68CCF8();
  *v0 = v1;
  sub_18A5F379C();
}

void sub_18A6A2B88()
{
  sub_18A68F700();
  sub_18A5F379C();
}

void sub_18A6A2BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A68F754(a1, a2, a3, a4, (void (*)(uint64_t))sub_18A68F70C);
}

void sub_18A6A2BC0()
{
  sub_18A68F7BC();
  sub_18A5F379C();
}

void sub_18A6A2BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A68F754(a1, a2, a3, a4, (void (*)(uint64_t))sub_18A68F808);
}

void sub_18A6A2BF8()
{
  uint64_t v0;

  sub_18A5F3FFC();
  sub_18A68FCB8();
  sub_18A6A76F0(v0);
  sub_18A5F379C();
}

void sub_18A6A2C18(unsigned __int8 *a1)
{
  sub_18A6A7498(a1);
  sub_18A68FCE8();
  sub_18A5F379C();
}

void sub_18A6A2C34()
{
  unint64_t v0;
  unint64_t v1;

  sub_18A6A3230();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SyncEngine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerSendDatabaseChangesBatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerSendDatabaseChangesBatch.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerSendDatabaseChangesBatch.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of SyncEngine.setMaxZonesPerSendDatabaseChangesBatch(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of SyncEngine.nextRecordZoneChangeBatch(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  sub_18A614630();
  v0 = sub_18A670A90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A6E7C(v1);
  return v4(v2);
}

uint64_t dispatch thunk of SyncEngine.allowFetchAndModifyConcurrently(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerFetchChangesRequest.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerFetchChangesRequest.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of SyncEngine.maxZonesPerFetchChangesRequest.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of SyncEngine.setMaxZonesPerFetchChangesRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of SyncEngine.needsToReloadAccount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of SyncEngine.needsToReloadAccount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of SyncEngine.needsToReloadAccount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForDeviceToDeviceEncryption.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForDeviceToDeviceEncryption.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForDeviceToDeviceEncryption.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForAccountToVerifyTerms.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForAccountToVerifyTerms.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForAccountToVerifyTerms.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForIdentityUpdate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForIdentityUpdate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of SyncEngine.isWaitingForIdentityUpdate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 856))();
}

uint64_t dispatch thunk of SyncEngine.lastKnownAccountInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of SyncEngine.lastKnownAccountInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
}

uint64_t dispatch thunk of SyncEngine.lastKnownAccountInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t dispatch thunk of SyncEngine.setLastKnownAccountInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 912))();
}

uint64_t dispatch thunk of SyncEngine.updateAccountInfo()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_18A6A7728(v1, (uint64_t)sub_18A6A545C, v4);
  return sub_18A5F3E50(v2);
}

uint64_t dispatch thunk of SyncEngine.notificationListener.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1032))();
}

uint64_t dispatch thunk of SyncEngine.notificationListener.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1040))();
}

uint64_t dispatch thunk of SyncEngine.notificationListener.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1048))();
}

uint64_t dispatch thunk of SyncEngine.subscriptionID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1080))();
}

uint64_t dispatch thunk of SyncEngine.defaultSubscriptionID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1088))();
}

uint64_t dispatch thunk of SyncEngine.didReceive(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A6E40(v1, (uint64_t)sub_18A6A545C);
  return sub_18A6A5CC8(v2, v3);
}

uint64_t dispatch thunk of SyncEngine.saveSubscriptionIfNecessary(operationGroup:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A6E40(v1, (uint64_t)sub_18A6A545C);
  return sub_18A6A5CC8(v2, v3);
}

uint64_t dispatch thunk of SyncEngine.lastForegroundTriggeredFetchDate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1128))();
}

uint64_t dispatch thunk of SyncEngine.lastForegroundTriggeredFetchDate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1136))();
}

uint64_t dispatch thunk of SyncEngine.lastForegroundTriggeredFetchDate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1144))();
}

uint64_t dispatch thunk of SyncEngine.earliestStartDateForSchedulerActivities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1152))();
}

uint64_t dispatch thunk of SyncEngine.earliestStartDateForSchedulerActivities.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1160))();
}

uint64_t dispatch thunk of SyncEngine.earliestStartDateForSchedulerActivities.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1168))();
}

uint64_t dispatch thunk of SyncEngine.syncActivityIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1176))();
}

uint64_t dispatch thunk of SyncEngine.userRequestedBackupActivityIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1184))();
}

uint64_t dispatch thunk of SyncEngine.isAutomaticSyncEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1192))();
}

uint64_t dispatch thunk of SyncEngine.isAutomaticSyncEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1200))();
}

uint64_t dispatch thunk of SyncEngine.isAutomaticSyncEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1208))();
}

uint64_t dispatch thunk of SyncEngine.performScheduledSyncActivity(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_18A5F3C20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A6E40(v1, (uint64_t)sub_18A6A30CC);
  return sub_18A6A5CC8(v2, v3);
}

uint64_t sub_18A6A30CC()
{
  uint64_t v0;
  uint64_t v1;

  sub_18A6A848C();
  sub_18A6239A4();
  return sub_18A623BC8(v0, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t dispatch thunk of SyncEngine.unregisterActivities()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1240))();
}

uint64_t dispatch thunk of SyncEngine.shouldScheduleSyncActivity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1248))();
}

uint64_t dispatch thunk of SyncEngine.shouldFetchChanges(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1256))();
}

uint64_t dispatch thunk of SyncEngine.submitActivityIfNecessary(identifier:earliestStartDate:priority:userRequestedBackupTask:relatedBundleIDs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  sub_18A623E50();
  v11 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v10 + 16) = v11;
  *v11 = v10;
  v11[1] = sub_18A6A545C;
  sub_18A6A797C();
  sub_18A623D08();
  return v18(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t dispatch thunk of SyncEngine.relatedBundleIDsForPendingWork()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_18A6A7728(v1, (uint64_t)sub_18A6A5464, v4);
  return sub_18A5F3E50(v2);
}

uint64_t dispatch thunk of SyncEngine.schedulerReadiness()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1424))();
}

uint64_t dispatch thunk of SyncEngine.stateTelemetryPayload(byteCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1480))();
}

uint64_t dispatch thunk of SyncEngine.configurationTelemetryPayload()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_18A670A90();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_18A6A7728(v1, (uint64_t)sub_18A6A5464, v4);
  return sub_18A5F3E50(v2);
}

uint64_t dispatch thunk of SyncEngine.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1512))();
}

void sub_18A6A3230()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDF6A6A0)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDF6A6A0);
  }
}

uint64_t type metadata accessor for SyncEngine.FetchChangesPageIterationState()
{
  return objc_opt_self();
}

void *sub_18A6A32A4(const void *a1, void *a2)
{
  _s19FetchChangesContextVwtk(a2, a1);
  return a2;
}

void sub_18A6A32E0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v2;

  v2 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v2);
  sub_18A6A8048();
}

uint64_t sub_18A6A3328()
{
  uint64_t v0;

  sub_18A626FB4(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6A3378()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5778();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A6A6E90(v1);
  sub_18A663A04();
  return sub_18A69B34C(v2, v3, v4, v5, v6);
}

void sub_18A6A33D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x18D76C7CC]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setApplicationBundleIdentifierOverrideForNetworkAttribution_, v4);

}

int64_t sub_18A6A3420(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_18A6A3504(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
    swift_bridgeObjectRetain();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_18A6A3580(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_18A6A3600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676728(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A367C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A36BC(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676D5C(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A3738()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A3778()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18A6A379C()
{
  sub_18A623BE0();
  sub_18A64A51C();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6A37D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_18A623E50();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A6A718C(v1);
  sub_18A623D08();
  return sub_18A69AA74(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18A6A3834(uint64_t a1)
{
  uint64_t v1;

  return sub_18A697114(a1, v1);
}

uint64_t sub_18A6A383C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18A6A384C()
{
  return swift_release();
}

uint64_t sub_18A6A3858()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5720();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A5520();
  return sub_18A697364(v3, v4, v5, v6);
}

uint64_t sub_18A6A38AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5720();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A5520();
  return sub_18A6928A8(v3, v4, v5, v6);
}

uint64_t sub_18A6A38FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  sub_18A6A7280();
  return sub_18A691B04(v3, v4, v5);
}

uint64_t sub_18A6A395C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *a4;
  v8 = a4[1];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = sub_18A6A39C8;
  return sub_18A676810(a2, a3, v7, v8);
}

uint64_t sub_18A6A39C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_18A5F416C(&v7);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return sub_18A623874(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_18A6A3A18(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_18A6A5498;
  return sub_18A675450(a2);
}

uint64_t sub_18A6A3A70(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *a4;
  v8 = a4[1];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = sub_18A6A5498;
  return sub_18A676E10(a2, a3, v7, v8);
}

uint64_t sub_18A6A3ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A67694C(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A3B58(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676D5C(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A3BD4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_18A6A3C2C;
  return sub_18A675510(a2);
}

uint64_t sub_18A6A3C2C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  v5 = *v2;
  sub_18A5F416C(&v7);
  if (!v1)
    **(_BYTE **)(v4 + 16) = a1 & 1;
  return sub_18A623874(*(uint64_t (**)(void))(v5 + 8));
}

void sub_18A6A3C80(id *a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  Swift::Int v5;
  uint64_t v8;
  Swift::Int *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  char v16;
  id v17;
  char v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;

  v5 = a2;
  v8 = *a4;
  if (a3)
  {
    v9 = (Swift::Int *)(a3 + 16);
    swift_retain();
    v5 = sub_18A6A129C(v8, (uint64_t)a1, v5, v9);
    v11 = v10;
    v13 = v12;
    swift_release();
    v14 = v11 & 1;
    goto LABEL_10;
  }
  if (!a2)
  {
    v13 = 0;
LABEL_9:
    v14 = 1;
    goto LABEL_10;
  }
  sub_18A5F50F0(0, (unint64_t *)&qword_1ECD967B0);
  v15 = *a1;
  v16 = static NSObject.== infix(_:_:)();

  if ((v16 & 1) != 0)
  {
    v13 = 0;
    v5 = 0;
    v14 = 0;
    goto LABEL_10;
  }
  if (v5 == 1)
    goto LABEL_8;
  v17 = a1[1];
  v18 = static NSObject.== infix(_:_:)();

  if ((v18 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v5 = 1;
    goto LABEL_10;
  }
  if (v5 == 2)
  {
LABEL_8:
    v13 = 0;
    v5 = 0;
    goto LABEL_9;
  }
  v19 = a1[2];
  v20 = static NSObject.== infix(_:_:)();

  if ((v20 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v5 = 2;
  }
  else
  {
    v21 = 3;
    while (1)
    {
      v14 = v5 == v21;
      if (v5 == v21)
        break;
      v22 = a1[v21];
      v23 = static NSObject.== infix(_:_:)();

      ++v21;
      if ((v23 & 1) != 0)
      {
        v13 = 0;
        v5 = v21 - 1;
        goto LABEL_10;
      }
    }
    v13 = 0;
    v5 = 0;
  }
LABEL_10:
  *(_QWORD *)a5 = v5;
  *(_BYTE *)(a5 + 8) = v14;
  *(_QWORD *)(a5 + 16) = v13;
}

uint64_t sub_18A6A3E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676A2C(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A3ECC(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676D5C(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A3F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676B10(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A3FC4(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_18A6A545C;
  return sub_18A676ED4(a1, a2, a3, v8, v9);
}

uint64_t sub_18A6A4040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = sub_18A6A3C2C;
  return sub_18A676C20(a2, a3, a4);
}

uint64_t sub_18A6A40A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A40E8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_18A6A54C0;
  return sub_18A6755C8(a2);
}

uint64_t sub_18A6A4140()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A5F4414();
  v1 = sub_18A6A79D8();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6A5A6C(v3, v4, v5, v6);
}

uint64_t sub_18A6A418C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = sub_18A6A54C0;
  return sub_18A676F8C(a2, a3, a4);
}

uint64_t sub_18A6A41F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

void sub_18A6A4234(void *a1)
{
  sub_18A68D340(a1);
}

uint64_t sub_18A6A4240()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5778();
  sub_18A6A6F2C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A623B50(v1);
  sub_18A663A04();
  return sub_18A68D678(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4290(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_18A68CC14(a1, a2, a3, *(uint64_t **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_18A6A429C()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_18A5F379C();
}

uint64_t sub_18A6A42BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5720();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A5520();
  return sub_18A68C7EC(v3, v4, v5, v6);
}

uint64_t sub_18A6A4310()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5720();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A5520();
  return sub_18A689C34(v3, v4, v5, v6);
}

uint64_t sub_18A6A4360()
{
  sub_18A623BE0();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6A4388()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  sub_18A6A5778();
  sub_18A6A6F2C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A623B50(v1);
  sub_18A663A04();
  return sub_18A6894D8(v2, v3, v4, v5);
}

uint64_t sub_18A6A43D8()
{
  sub_18A6A7DFC();
  sub_18A623E74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6A4414()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A81A8();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  sub_18A6A5818();
  return sub_18A6890CC(v3, v4, v5, v6);
}

uint64_t sub_18A6A4470(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18A6A44BC(uint64_t *a1, uint64_t a2)
{
  _s14DatabaseChangeO8DeletionVwtk(a2, a1);
  return a2;
}

uint64_t sub_18A6A44F8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_18A6A4520(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18A6A4548()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4588()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  sub_18A6A5D04();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A5610(v1);
  return sub_18A5F3CEC(v2, v3, v4, v5);
}

uint64_t sub_18A6A45C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int *v4;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6753EC(v3, v4);
}

uint64_t sub_18A6A4618()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

id sub_18A6A4658(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a4;
}

void sub_18A6A46A4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

void sub_18A6A46F0(id *a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_18A6A3C80(a1, a2, *(_QWORD *)(v3 + 16), *(uint64_t **)(v3 + 32), a3);
}

uint64_t sub_18A6A470C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A4750);
  return sub_18A68341C(v2, v3);
}

uint64_t sub_18A6A4750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_18A6A5778();
  sub_18A6239A4();
  sub_18A6A7000();
  sub_18A663A04();
  return v4(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A6A47B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A682500(v3, v4, v5);
}

uint64_t sub_18A6A4800()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6825BC(v3, v4, v5);
}

uint64_t sub_18A6A4850()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A5F4414();
  v1 = sub_18A6A79D8();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6A5A6C(v3, v4, v5, v6);
}

uint64_t sub_18A6A489C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18A6A48E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  const void *v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A545C);
  return sub_18A6809AC(v2, v3);
}

uint64_t sub_18A6A4928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_18A6A544C;
  v5 = sub_18A6A6F44();
  return sub_18A67FA30(v5, v6, v2, v3);
}

uint64_t sub_18A6A498C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_18A5F4414();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_18A6A49E8;
  return sub_18A67D424(v0, v2, v1);
}

uint64_t sub_18A6A49E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  sub_18A6239A4();
  v0 = sub_18A629170();
  return sub_18A5F4630(v0, v1, v2);
}

uint64_t sub_18A6A4A2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_18A6A783C();
  v0 = sub_18A6A833C();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A6A44(v1);
  return sub_18A67B124(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_18A6A4A80()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_18A6A783C();
  v0 = sub_18A6A833C();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A6A44(v1);
  return sub_18A67B8CC(v2, v3, v4, v5, v6, v7);
}

void sub_18A6A4AD4(unint64_t *a1, unint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    sub_18A5F50F0(255, a2);
    atomic_store(MEMORY[0x18D76E7C4](MEMORY[0x1E0DEFCF8], v3), a1);
  }
  sub_18A5F379C();
}

void sub_18A6A4B10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_18A5F101C(a2);
  sub_18A6A8444(*(_QWORD *)(v2 - 8));
  sub_18A5F379C();
}

uint64_t sub_18A6A4B40(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    sub_18A5F3944();
    sub_18A5F37A4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18A6A4B84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int *v4;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6753EC(v3, v4);
}

uint64_t sub_18A6A4BD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int *v4;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6753EC(v3, v4);
}

uint64_t sub_18A6A4C24()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_18A6A4C58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_18A6A5778();
  v1 = (_QWORD *)sub_18A6A833C();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_18A6A545C;
  sub_18A6A5854();
  sub_18A663A04();
  return sub_18A67931C(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4CC4()
{
  swift_bridgeObjectRelease();
  sub_18A6A7DFC();
  sub_18A64A51C();
  return swift_deallocObject();
}

uint64_t sub_18A6A4CF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5778();
  sub_18A614630();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A6A6E90(v1);
  sub_18A663A04();
  return sub_18A696D58(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4D44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4D84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A5F4414();
  v1 = sub_18A6A79D8();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6A5A6C(v3, v4, v5, v6);
}

uint64_t sub_18A6A4DD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4E14()
{
  sub_18A623BE0();
  sub_18A64A51C();
  sub_18A623E74();
  return swift_deallocObject();
}

uint64_t sub_18A6A4E3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5778();
  sub_18A6A6F2C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A623B50(v1);
  sub_18A663A04();
  return sub_18A69111C(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4E88()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_18A6A4EAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  sub_18A6A7280();
  return sub_18A6912E8(v3, v4, v5);
}

uint64_t sub_18A6A4F0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A6A4F30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A5F4414();
  v1 = sub_18A6A79D8();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6A5A6C(v3, v4, v5, v6);
}

uint64_t sub_18A6A4F7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A4FBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int *v4;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6753EC(v3, v4);
}

uint64_t sub_18A6A500C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A504C()
{
  return sub_18A6A53A4();
}

uint64_t sub_18A6A5054()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5778();
  sub_18A6A6F2C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  sub_18A623B50(v1);
  sub_18A663A04();
  return sub_18A696180(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A50A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int *v4;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6753EC(v3, v4);
}

uint64_t sub_18A6A50F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

uint64_t sub_18A6A5130()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int *v4;

  sub_18A5F4414();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A56F0();
  return sub_18A6753EC(v3, v4);
}

uint64_t sub_18A6A5180()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_18A6A5778();
  sub_18A6A5720();
  v0 = sub_18A6A5F90();
  v1 = (_QWORD *)sub_18A5F3D3C(v0);
  v2 = sub_18A6A54E4(v1);
  return sub_18A5F4084(v2, v3, v4, v5, v6);
}

void sub_18A6A51C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_18A5F3F9C(a1, a2, a3);
  sub_18A61042C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_18A5F379C();
}

uint64_t sub_18A6A51EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A545C);
  return sub_18A677DD0(v2, v3);
}

uint64_t sub_18A6A5230(char a1, char a2)
{
  return sub_18A678428(a1, a2);
}

uint64_t sub_18A6A5238()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A5464);
  return sub_18A678744(v2, v3);
}

uint64_t sub_18A6A527C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A5464);
  return sub_18A678830(v2, v3);
}

uint64_t sub_18A6A52C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_18A6A5720();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_18A5F3D3C(v1);
  *v2 = v0;
  v2[1] = sub_18A6A545C;
  v3 = sub_18A6A5520();
  return sub_18A6788F0(v3, v4, v5, v6);
}

uint64_t sub_18A6A5314()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A545C);
  return sub_18A6781C4(v2, v3);
}

uint64_t sub_18A6A5358()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_18A6A5B38(v1, (uint64_t)sub_18A6A545C);
  return sub_18A677FC0(v2, v3);
}

uint64_t sub_18A6A539C()
{
  return sub_18A6A53A4();
}

uint64_t sub_18A6A53A4()
{
  sub_18A623BE0();
  sub_18A64A51C();
  sub_18A6406BC();
  return swift_deallocObject();
}

uint64_t sub_18A6A53D0()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_BYTE *)(v0 + 40);
  v2 = *(_BYTE *)(v0 + 41);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)sub_18A5F3D3C(v3);
  v5 = sub_18A6A718C(v4);
  return sub_18A67851C(v5, v6, v7, v8, v1, v2);
}

uint64_t sub_18A6A54D0()
{
  return swift_release_n();
}

uint64_t sub_18A6A54D8()
{
  return swift_task_switch();
}

uint64_t sub_18A6A54E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A6A5508()
{
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

uint64_t sub_18A6A5520()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A5554()
{
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

uint64_t sub_18A6A5560()
{
  return swift_task_switch();
}

uint64_t sub_18A6A5590()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 168) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A6A55B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 192) = v0;
  return swift_task_dealloc();
}

BOOL sub_18A6A55D0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A6A55E0()
{
  return swift_arrayDestroy();
}

uint64_t sub_18A6A55EC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_18A6A5608(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_18A6A5610(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

BOOL sub_18A6A562C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A6A563C()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A5644(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_18A6A5660(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A6A5698(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_18A6A56B4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A56D0()
{
  return swift_arrayDestroy();
}

uint64_t sub_18A6A56D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(v2 + 144) = a1;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 32) = v3;
  return swift_task_alloc();
}

uint64_t sub_18A6A56F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A5704(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_18A609924(v4, v3, a3);
}

uint64_t sub_18A6A5710(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
  return swift_task_alloc();
}

uint64_t sub_18A6A5730()
{
  return swift_release();
}

uint64_t sub_18A6A5740()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A5748(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A6A5760()
{
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t sub_18A6A578C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

__n128 sub_18A6A5798(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(v9 + 176) = a1;
  result = a9;
  a1[1] = a9;
  return result;
}

uint64_t sub_18A6A57C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

uint64_t sub_18A6A57CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A57E8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A6A57F4()
{
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

__n128 sub_18A6A5800(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(v9 + 176) = a1;
  result = a9;
  a1[1] = a9;
  return result;
}

BOOL sub_18A6A5810(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_18A6A5824(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_retain();
}

uint64_t sub_18A6A5838()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_18A6A5844(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

uint64_t sub_18A6A584C()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_18A6A5854()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A5860()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A5868(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

uint64_t sub_18A6A5870()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A587C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_18A6A58AC()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_18A6A58B4()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A58BC()
{
  return sub_18A68C974();
}

uint64_t sub_18A6A58D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  return swift_task_dealloc();
}

BOOL sub_18A6A5900(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A6A5910()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A6A5918()
{
  return sub_18A6A53A4();
}

uint64_t sub_18A6A5920@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *v3 = v2;
  v3[1] = a2;
  *(_QWORD *)(v4 + 16) = 126;
  *(_QWORD *)(v4 + 24) = result;
  return result;
}

uint64_t sub_18A6A5934()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A6A5940()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A5948(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

uint64_t sub_18A6A5950()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A5964(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(v2 + 152) = result;
  *(_BYTE *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(result + 32) = v3;
  return result;
}

void sub_18A6A5978()
{
  void *v0;

}

uint64_t sub_18A6A5980()
{
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_18A6A5988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  *(_WORD *)(v11 + 12) = 2080;
  v13 = *(_QWORD *)(v12 + 24);
  v14 = *(_BYTE *)(v12 + 32);
  v15 = *(_BYTE *)(v12 + 64);
  v16 = *(_QWORD *)(v12 + 72);
  v17 = *(_BYTE *)(v12 + 80);
  v18 = *(_OWORD *)(v12 + 48);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v12 + 16);
  *(_QWORD *)(v10 + 24) = v13;
  *(_BYTE *)(v10 + 32) = v14;
  *(_QWORD *)(v10 + 40) = a10;
  *(_OWORD *)(v10 + 48) = v18;
  *(_BYTE *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = v16;
  *(_BYTE *)(v10 + 80) = v17;
  return CKSyncEngine.FetchChangesContext.description.getter();
}

uint64_t sub_18A6A59D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 96);
}

uint64_t sub_18A6A59F0()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A59F8()
{
  return sub_18A669988();
}

uint64_t sub_18A6A5A20()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A5A30(const void *a1)
{
  return sub_18A69AF2C(a1);
}

BOOL sub_18A6A5A4C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A6A5A5C()
{
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

uint64_t sub_18A6A5A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_18A6A5A7C()
{
  return sub_18A68C974();
}

uint64_t sub_18A6A5A8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 - 8) = *v1;
  *(_QWORD *)(v2 - 8) = *v1;
  *(_QWORD *)(v3 + 72) = a1;
  return swift_task_dealloc();
}

BOOL sub_18A6A5AB4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18A6A5AC4(const void *a1)
{
  return sub_18A69AF2C(a1);
}

uint64_t sub_18A6A5AE0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A6A5AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_18A6A5B18()
{
  return TaskLocal.get()();
}

void sub_18A6A5B20()
{
  uint64_t v0;

  sub_18A65BD74(*(_QWORD *)(v0 + 120));
}

_QWORD *sub_18A6A5B28@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_18A6A5B38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

BOOL sub_18A6A5B4C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_18A6A5B54()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A5B5C()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18A6A5B7C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_18A6A5B88(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A5B90(uint64_t (*a1)(void))
{
  return a1();
}

void sub_18A6A5BA8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_18A6A5BBC()
{
  sub_18A699D34();
}

uint64_t sub_18A6A5BC4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return sub_18A6A2834(v1, v2, v0);
}

void sub_18A6A5BE8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_18A6A5BF8()
{
  sub_18A618558();
}

void sub_18A6A5C10()
{
  sub_18A618558();
}

uint64_t sub_18A6A5C78()
{
  return swift_bridgeObjectRelease();
}

void sub_18A6A5C88()
{
  sub_18A618558();
}

uint64_t sub_18A6A5CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_18A6A5CB0(__n128 *a1, __n128 a2)
{
  unint64_t v2;
  uint64_t v3;

  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return sub_18A67511C((uint64_t)a1, v3);
}

uint64_t sub_18A6A5CC0()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A6A5CC8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A6A5CEC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 152) = *(_QWORD *)(v0 + 280);
  return swift_task_dealloc();
}

uint64_t sub_18A6A5D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_18A6A5D24()
{
  sub_18A618558();
}

void sub_18A6A5D3C()
{
  sub_18A6185A0();
}

void sub_18A6A5D54(uint64_t a1)
{
  uint64_t v1;

  sub_18A674F24(v1, a1);
}

uint64_t sub_18A6A5D78(uint64_t a1)
{
  return sub_18A6948C0(a1);
}

uint64_t sub_18A6A5D8C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A5D94()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A5DBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A6A5DDC()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A5DE4()
{
  return swift_weakInit();
}

uint64_t sub_18A6A5DF0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_18A6A5DFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_18A6A5E08()
{
  sub_18A6185A0();
}

uint64_t sub_18A6A5E14@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_18A6A5E20()
{
  return swift_dynamicCast();
}

uint64_t sub_18A6A5E28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

BOOL sub_18A6A5E30(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_18A6A5E38()
{
  return swift_initStackObject();
}

void sub_18A6A5E40()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

BOOL sub_18A6A5E50(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

id sub_18A6A5E58(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1);
}

uint64_t sub_18A6A5E60()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void sub_18A6A5E84()
{
  sub_18A6100D0();
}

uint64_t sub_18A6A5E98()
{
  return swift_release();
}

id sub_18A6A5EA0()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A5EB4(uint64_t a1)
{
  uint64_t v1;

  return sub_18A5F105C(a1, 1, v1);
}

uint64_t sub_18A6A5ED0()
{
  return swift_continuation_init();
}

unint64_t sub_18A6A5F0C()
{
  return 0xD000000000000024;
}

void sub_18A6A5F2C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

__n128 sub_18A6A5F4C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v10;
  __n128 result;

  *(_QWORD *)(v10 + 96) = a1;
  result = a9;
  a1[1] = a9;
  a1[2].n128_u64[0] = v9;
  return result;
}

__n128 sub_18A6A5F78(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;

  *(_QWORD *)(v1 + 56) = a1;
  result = *(__n128 *)(v1 + 40);
  a1[1] = result;
  a1[2].n128_u64[0] = v2;
  return result;
}

uint64_t sub_18A6A5F90()
{
  return swift_task_alloc();
}

void sub_18A6A5F98()
{
  sub_18A6100D0();
}

id sub_18A6A5FB0()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A5FDC()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A5FE8()
{
  return static Task<>.checkCancellation()();
}

id sub_18A6A5FF0()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_18A6A5FFC(const void *a1)
{
  return sub_18A69AF2C(a1);
}

uint64_t sub_18A6A6008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_18A6A6014()
{
  return sub_18A68C974();
}

uint64_t sub_18A6A6020()
{
  return swift_bridgeObjectRetain();
}

id sub_18A6A6028()
{
  _QWORD *v0;
  void *v1;

  *v0 = 0x8000000000000000;
  return v1;
}

void *sub_18A6A6040@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return memmove((void *)(v1 + 32), (const void *)(v1 + 40), 8 * (a1 - 1));
}

uint64_t sub_18A6A6058()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A6060(Swift::String a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = 46;
  *(_QWORD *)(v1 - 104) = 0xE100000000000000;
  String.append(_:)(a1);
}

uint64_t sub_18A6A6078(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

void sub_18A6A6098(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v1);
}

uint64_t sub_18A6A60B0()
{
  uint64_t v0;

  return sub_18A697B8C(v0);
}

void sub_18A6A60BC()
{
  void *v0;

}

uint64_t sub_18A6A60C4()
{
  return swift_task_alloc();
}

void sub_18A6A60CC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A61807C(a1, a2, 1, v2);
}

void sub_18A6A60D8()
{
  sub_18A6100D0();
}

void sub_18A6A60E4()
{
  sub_18A610060();
}

uint64_t sub_18A6A60F0()
{
  return swift_dynamicCast();
}

uint64_t sub_18A6A6108()
{
  return static NSObject.== infix(_:_:)();
}

void sub_18A6A6114()
{
  void *v0;

  sub_18A60A664(v0, 1);
}

uint64_t sub_18A6A6120()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18A6A613C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_18A6733CC(a1, a2, a3, a4);
}

uint64_t sub_18A6A6158()
{
  return swift_release();
}

uint64_t sub_18A6A6174(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A6190()
{
  return sub_18A669988();
}

void sub_18A6A61B8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

uint64_t sub_18A6A61DC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_18A6A61F8(uint64_t a1@<X8>)
{
  void *v1;

  *(_QWORD *)(a1 + 32) = v1;
  *(_BYTE *)(a1 + 40) = 1;

}

void sub_18A6A6208()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_18A6A6224(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A6A6240(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A625C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A6278(uint64_t a1)
{
  return sub_18A694D38(a1);
}

BOOL sub_18A6A6294(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_18A6A629C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 2;
  *(_QWORD *)(v3 + 40) = v2;
  *(_QWORD *)(v3 + 48) = v1;
  *(_QWORD *)(v3 + 56) = v0;
  *(_BYTE *)(v3 + 64) = 1;
  *(_QWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = 0;
}

uint64_t sub_18A6A62CC(const void *a1)
{
  return sub_18A69AF2C(a1);
}

uint64_t sub_18A6A62E8()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18A6A6304(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_18A6A632C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 128) = 1;
}

uint64_t sub_18A6A6374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_18A6A6390()
{
  return swift_continuation_await();
}

uint64_t sub_18A6A63AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_18A6A63C8()
{
  return sub_18A689DE8();
}

uint64_t sub_18A6A63E4()
{
  return swift_task_switch();
}

uint64_t sub_18A6A6400(uint64_t a1)
{
  return sub_18A6791B4(a1);
}

void sub_18A6A642C()
{
  void *v0;
  uint64_t v1;

  sub_18A6A46A4(v0, *(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 136), *(void **)(v1 - 168), *(unsigned int *)(v1 - 144), 1);
}

uint64_t sub_18A6A6454()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_18A6A645C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_18A6A646C()
{
  return static NSObject.== infix(_:_:)();
}

void sub_18A6A647C(id a1)
{

}

void sub_18A6A6498()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v4;
  v5 = v2 + 16 * v1;
  *(_QWORD *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = v0;
}

uint64_t sub_18A6A64B4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_18A6A64BC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A5F105C(v1, 1, v0);
}

uint64_t sub_18A6A64CC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A64D4()
{
  return static os_log_type_t.error.getter();
}

id sub_18A6A64DC@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_18A6A64F0()
{
  return swift_allocObject();
}

void sub_18A6A64FC()
{
  _StringGuts.grow(_:)(65);
}

uint64_t sub_18A6A6510()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_18A6A6518()
{
  void *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 360) = v0;
  return v0;
}

id sub_18A6A6558()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)v1 + 48) + 8 * v2);
  *v0 = v3;
  return v3;
}

void sub_18A6A656C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = *(_QWORD *)(v0 + 896);
}

void sub_18A6A6598()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  CKSyncEngine.FetchChangesOptions.Scope.description.getter();
}

uint64_t sub_18A6A65BC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A65D4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A65F0(uint64_t a1)
{
  uint64_t v1;

  sub_18A674F24(a1, v1);
}

id sub_18A6A65F8()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A6600()
{
  return swift_bridgeObjectRelease();
}

void sub_18A6A6608()
{
  sub_18A6100D0();
}

id sub_18A6A6614(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18A6A6620()
{
  uint64_t v0;

  return sub_18A697B8C(v0);
}

unint64_t sub_18A6A6628(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_18A6A6630()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18A6A663C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A5F1010(a1, a2, 1, v2);
}

uint64_t sub_18A6A6648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_18A5F1010(a1, a2, 1, v2);
}

void sub_18A6A6654()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A6A6660()
{
  return swift_release();
}

uint64_t sub_18A6A6668()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A6670@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

double sub_18A6A6684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)(v1 + 1024) = a1;
  *(_QWORD *)(v1 + 176) = v2;
  *(_QWORD *)(v1 + 184) = a1;
  result = 0.0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_BYTE *)(v1 + 240) = 0x80;
  return result;
}

uint64_t sub_18A6A66B0()
{
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

uint64_t sub_18A6A66C4()
{
  return swift_allocObject();
}

uint64_t sub_18A6A66E4()
{
  return swift_slowAlloc();
}

uint64_t sub_18A6A6714()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 24) = v0;
  return swift_task_dealloc();
}

void sub_18A6A6734()
{
  uint64_t v0;

  sub_18A65BD74(*(_QWORD *)(v0 + 112));
}

uint64_t sub_18A6A6764()
{
  return static Task<>.checkCancellation()();
}

uint64_t sub_18A6A676C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 416) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A6A678C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  return swift_task_dealloc();
}

uint64_t sub_18A6A67AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  return swift_task_dealloc();
}

__n128 *sub_18A6A67CC(__n128 *result, __n128 a2)
{
  result[1] = a2;
  strcpy((char *)&result[2], "CKSyncEngine");
  result[2].n128_u8[13] = 0;
  result[2].n128_u16[7] = -5120;
  return result;
}

uint64_t sub_18A6A67F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

_QWORD *sub_18A6A67FC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_18A6A6818(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_18A6A682C()
{
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

void sub_18A6A6840(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

void sub_18A6A6850(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  sub_18A6A46A4(a1, a2, a3, a4, a5, 1);
}

id sub_18A6A6858()
{
  void *v0;
  void *v1;

  sub_18A634B64(v1);
  return v0;
}

uint64_t sub_18A6A6870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_18A6A6880()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_18A6A68A0()
{
  return static os_log_type_t.debug.getter();
}

id sub_18A6A68A8()
{
  void *v0;
  void *v1;

  sub_18A6499C8(v1, 1);
  return v0;
}

uint64_t sub_18A6A68C0()
{
  return swift_task_alloc();
}

void sub_18A6A68C8(id a1)
{
  sub_18A615B4C(a1);
}

uint64_t sub_18A6A68D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A68DC()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_18A6A68E4()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_18A6A68EC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A6910()
{
  void *v0;

}

id sub_18A6A6918()
{
  void *v0;
  uint64_t v1;

  *(_WORD *)(v1 + 22) = 2112;
  return v0;
}

id sub_18A6A6928()
{
  void *v0;
  uint64_t v1;

  *(_WORD *)(v1 + 12) = 2112;
  return v0;
}

uint64_t sub_18A6A6954()
{
  return swift_bridgeObjectRelease();
}

void sub_18A6A6964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  void *v10;
  uint64_t v11;

  *a10 = v11;

}

uint64_t sub_18A6A6974(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 696) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void *sub_18A6A6990(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t sub_18A6A69B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v3[2] = a2;
  v3[3] = v2;
  v3[4] = result;
  return result;
}

uint64_t sub_18A6A69C0()
{
  return swift_retain();
}

uint64_t sub_18A6A69D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_18A6A69E0(uint64_t a1)
{
  return sub_18A68E540(a1);
}

double sub_18A6A69F0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)(v0 + 248) = v1;
  result = 0.0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 112;
  return result;
}

_QWORD *sub_18A6A6A14@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_18A6A6A20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A6A6A44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

BOOL sub_18A6A6A68(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_18A6A6AC4()
{
  void *v0;

}

uint64_t sub_18A6A6ACC()
{
  return swift_release();
}

uint64_t sub_18A6A6AF0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return specialized Array._endMutation()();
}

void sub_18A6A6AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;

  sub_18A6A46A4(v5, *(_QWORD *)(v6 - 128), *(_QWORD *)(v6 - 136), *(void **)(v6 - 168), a5, 0);
}

id sub_18A6A6B18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  return sub_18A6A4658(v4, v1, v3, v2, v0, 1);
}

id sub_18A6A6B34(void *a1)
{
  return a1;
}

uint64_t sub_18A6A6B40()
{
  return ContinuousClock.init()();
}

uint64_t sub_18A6A6B50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A6B6C()
{
  uint64_t v0;

  String.append(_:)(*(Swift::String *)(v0 - 112));
}

uint64_t sub_18A6A6B7C()
{
  return swift_endAccess();
}

_WORD *sub_18A6A6B84(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_18A6A6B90(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

void sub_18A6A6B9C()
{
  void (*v0)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);
  uint64_t v1;

  sub_18A6A32E0(v1, v0);
}

id sub_18A6A6BA8()
{
  void *v0;

  return v0;
}

id sub_18A6A6BB0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  return sub_18A6A4658(v1, v4, v0, v3, v2, 1);
}

uint64_t sub_18A6A6BCC()
{
  return swift_getErrorValue();
}

uint64_t sub_18A6A6BDC()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_18A6A6BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;

  sub_18A6A46A4(v5, *(_QWORD *)(v6 - 128), *(_QWORD *)(v6 - 136), *(void **)(v6 - 176), a5, 0);
}

uint64_t sub_18A6A6C00()
{
  return swift_task_dealloc();
}

void sub_18A6A6C08(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A61807C(a1, a2, 1, v2);
}

void sub_18A6A6C14()
{
  sub_18A6185A0();
}

void sub_18A6A6C20()
{
  sub_18A6185A0();
}

unint64_t sub_18A6A6C2C()
{
  return CKSyncEngine.FetchChangesContext.description.getter();
}

uint64_t sub_18A6A6C48()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_18A6A6C50()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_18A6A6C58(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = result;
  return result;
}

void sub_18A6A6C64()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A66BCF8(v1, v2, v0);
}

void sub_18A6A6C74(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_18A6A4B10(v2, a2);
}

uint64_t sub_18A6A6C7C()
{
  uint64_t v0;

  return v0;
}

void sub_18A6A6C88()
{
  uint64_t v0;

  CKAsyncSerialQueue.init(ordering:)((char *)(v0 - 136));
}

uint64_t sub_18A6A6C94()
{
  return 0x6E45636E79534B43;
}

uint64_t sub_18A6A6CC8()
{
  return swift_getObjectType();
}

__n128 sub_18A6A6CE0()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 72);
}

uint64_t sub_18A6A6CF0()
{
  return swift_willThrow();
}

uint64_t sub_18A6A6D08()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_18A6A6D10()
{
  sub_18A610060();
}

void sub_18A6A6D28()
{
  sub_18A610060();
}

uint64_t sub_18A6A6D40()
{
  return BidirectionalCollection<>.joined(separator:)();
}

void sub_18A6A6D58()
{
  _StringGuts.grow(_:)(38);
}

uint64_t sub_18A6A6D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = v1;
  *(_QWORD *)(v2 - 152) = v0;
  return swift_slowAlloc();
}

_QWORD *sub_18A6A6D78(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

uint64_t sub_18A6A6D84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 512);
}

uint64_t sub_18A6A6DA4()
{
  return 1;
}

uint64_t sub_18A6A6DB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *v3 = v2;
  v3[1] = a2;
  *(_QWORD *)(v4 + 16) = 126;
  *(_QWORD *)(v4 + 24) = result;
  return result;
}

uint64_t sub_18A6A6DC4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_18A6A6DDC@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return v1 + a1;
}

uint64_t sub_18A6A6DEC()
{
  return swift_continuation_await();
}

void sub_18A6A6DF8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

BOOL sub_18A6A6E08(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

BOOL sub_18A6A6E10@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_18A6A6E24()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_18A6A6E30@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_18A6A6E40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_18A6A6E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t sub_18A6A6E60(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18A6A6E7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A6A6E90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A6A6EB0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = result;
  return result;
}

void sub_18A6A6EBC()
{
  void *v0;

}

void sub_18A6A6EC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_18A60FC98(a1, v3, a3);
}

uint64_t sub_18A6A6ECC()
{
  return sub_18A65B10C();
}

id sub_18A6A6ED4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

_QWORD *sub_18A6A6EDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_18A6A6EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  *a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A6F00(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

uint64_t sub_18A6A6F14()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_18A6A6F1C()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A6F24()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_18A6A6F3C()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A6A6F44()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A6F50()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A6F6C()
{
  return swift_task_alloc();
}

id sub_18A6A6F74(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0);
}

void sub_18A6A6F7C()
{
  uint64_t v0;

}

uint64_t sub_18A6A6FD0()
{
  return swift_release();
}

uint64_t sub_18A6A6FD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_18A609924(a1, v3, a3);
}

uint64_t sub_18A6A6FE0()
{
  return swift_initStackObject();
}

uint64_t sub_18A6A6FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v1, v2);
}

uint64_t sub_18A6A7000()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A700C()
{
  return 0;
}

void sub_18A6A7020()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  *(_BYTE *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 3;
  *(_QWORD *)(v0 + 112) = v1;
}

uint64_t sub_18A6A7040()
{
  return type metadata accessor for CancellationError();
}

uint64_t sub_18A6A7048()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6A7050(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_retain();
}

void sub_18A6A7064()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

void sub_18A6A708C(uint64_t a1, uint64_t a2)
{
  void *v2;

  sub_18A66BCF8(a1, a2, v2);
}

BOOL sub_18A6A7094(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_18A6A70BC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
}

unint64_t sub_18A6A70D8()
{
  return CKSyncEngine.FetchChangesContext.description.getter();
}

uint64_t sub_18A6A70E4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_18A6A70EC(uint64_t a1)
{
  sub_18A6756FC(a1);
}

uint64_t sub_18A6A7114()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A7120()
{
  return swift_release();
}

void sub_18A6A7128()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 126;
  *(_QWORD *)(v1 + 24) = v0;
}

void sub_18A6A7140()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_lock(v0 + 5);
}

uint64_t sub_18A6A7174()
{
  return sub_18A68C974();
}

uint64_t sub_18A6A717C(uint64_t a1)
{
  return sub_18A6948C0(a1);
}

uint64_t sub_18A6A7184(uint64_t a1, uint64_t a2)
{
  return sub_18A689200(a1, a2);
}

uint64_t sub_18A6A718C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A6A71A8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = result;
  return result;
}

uint64_t sub_18A6A71B4()
{
  return swift_weakLoadStrong();
}

uint64_t sub_18A6A71BC()
{
  return swift_retain();
}

uint64_t sub_18A6A71C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 16) = v0;
  return specialized ContiguousArray._endMutation()();
}

id sub_18A6A71DC()
{
  void *v0;

  return v0;
}

id sub_18A6A71E4()
{
  void *v0;
  void *v1;

  sub_18A634B64(v1);
  sub_18A634B64(v1);
  return v0;
}

uint64_t sub_18A6A7214()
{
  return swift_bridgeObjectRelease();
}

id sub_18A6A7228(void *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 368) = a1;
  return a1;
}

id sub_18A6A7234()
{
  void *v0;

  return v0;
}

BOOL sub_18A6A723C()
{
  Swift::Int v0;
  Swift::Bool v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t sub_18A6A7250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_18A6880B4(v0, v2, v1, v3);
}

uint64_t sub_18A6A7264()
{
  uint64_t v0;

  return sub_18A61A4FC(v0);
}

uint64_t sub_18A6A726C()
{
  uint64_t v0;

  return v0;
}

void sub_18A6A7278(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_18A6A4B10(v2, a2);
}

void sub_18A6A728C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_18A6A7298(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = result;
  return result;
}

uint64_t sub_18A6A72B0()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A6A72B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

uint64_t sub_18A6A72C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_18A609924(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_18A6A72D0()
{
  return __CocoaSet.count.getter();
}

uint64_t sub_18A6A72E4()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A72EC()
{
  uint64_t *v0;

  return sub_18A5F101C(v0);
}

uint64_t sub_18A6A72F4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_18A6A7300()
{
  uint64_t v0;

  return v0;
}

void sub_18A6A730C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v3;
  v4 = v1 + 16 * v0;
  *(_QWORD *)(v4 + 32) = v2;
  *(_BYTE *)(v4 + 40) = 0;
}

id sub_18A6A7328()
{
  void *v0;

  return sub_18A634B64(v0);
}

void sub_18A6A7334()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A6A7340()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18A6A7354(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t sub_18A6A735C()
{
  return __CocoaSet.member(for:)();
}

uint64_t sub_18A6A7368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_18A6A737C()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A6A7384()
{
  uint64_t v0;

  return v0;
}

void sub_18A6A7390()
{
  sub_18A697558();
}

id sub_18A6A739C()
{
  void *v0;

  return sub_18A634B64(v0);
}

uint64_t sub_18A6A73A8()
{
  return swift_retain();
}

uint64_t sub_18A6A73B0()
{
  return swift_task_dealloc();
}

Swift::Int sub_18A6A73D4()
{
  Swift::Int v0;

  return NSObject._rawHashValue(seed:)(v0);
}

uint64_t sub_18A6A73E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_18A69A92C(v3, 0, a3, v4);
}

uint64_t sub_18A6A73F4()
{
  return swift_weakLoadStrong();
}

void sub_18A6A73FC()
{
  Swift::OpaquePointer v0;

  CKSyncEngine.State.setNeedsToFetchChanges(_:for:)(0, v0);
}

uint64_t sub_18A6A7410()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A741C()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

uint64_t sub_18A6A7430()
{
  return swift_task_dealloc();
}

void sub_18A6A7454(__int16 a1@<W8>)
{
  uint64_t v1;

  *(_WORD *)(v1 + 12) = a1;
}

uint64_t sub_18A6A7460()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

unint64_t sub_18A6A7470()
{
  return CKSyncEngine.SendChangesContext.description.getter();
}

uint64_t sub_18A6A7480()
{
  return swift_task_dealloc();
}

void sub_18A6A7488(id a1)
{
  sub_18A615B4C(a1);
}

id sub_18A6A7490(id a1)
{
  return sub_18A634B64(a1);
}

uint64_t sub_18A6A7498(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_18A6A74A4()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_18A6A74CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_18A62F8E8(a1 + 40 * v2, v1);
}

uint64_t sub_18A6A74DC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 144);
}

uint64_t sub_18A6A74F4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_18A6A74FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

}

void sub_18A6A7504()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A6A7554()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A7564()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

BOOL sub_18A6A7574@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

id sub_18A6A7584()
{
  void *v0;
  uint64_t v1;

  *(_WORD *)(v1 + 12) = 2112;
  return v0;
}

id sub_18A6A7594()
{
  void *v0;
  uint64_t v1;

  *(_WORD *)(v1 + 12) = 2112;
  return v0;
}

void sub_18A6A75A4()
{
  uint64_t v0;

  *(_WORD *)(v0 + 22) = 2112;
}

uint64_t sub_18A6A75B4()
{
  return swift_release();
}

uint64_t sub_18A6A75BC()
{
  return swift_arrayDestroy();
}

uint64_t sub_18A6A75D0()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t sub_18A6A75D8()
{
  return swift_release();
}

uint64_t sub_18A6A75E0()
{
  return swift_release();
}

uint64_t sub_18A6A75E8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A760C()
{
  return swift_bridgeObjectRelease();
}

void sub_18A6A7614()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

void sub_18A6A7648()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_18A6A7658()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A7674()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A7684()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

id sub_18A6A76A0@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_18A6A76D8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
}

void sub_18A6A76E8()
{
  uint64_t v0;

}

uint64_t sub_18A6A76F0(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

void sub_18A6A76FC(float a1)
{
  float *v1;

  *v1 = a1;
}

_QWORD *sub_18A6A770C(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

_QWORD *sub_18A6A7718@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_18A6A7728@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return a3;
}

void sub_18A6A7738(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_18A6A7740(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_18A6A7758(uint64_t result)
{
  return sub_18A5F51F4(result);
}

uint64_t sub_18A6A7760(void *a1)
{
  uint64_t v1;

  return sub_18A674FC0(a1, v1);
}

uint64_t sub_18A6A779C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 - 224) + 16);
}

void sub_18A6A77A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

}

uint64_t sub_18A6A77B0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  if (v1)
    v3 = v2 + 1;
  else
    v3 = v2;
  *(_QWORD *)(v0 + 280) = v3;
  return *(_QWORD *)(v0 + 160);
}

id sub_18A6A77C8()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A782C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 288) = result;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

id sub_18A6A7854()
{
  void *v0;

  return v0;
}

void sub_18A6A785C()
{
  sub_18A699D34();
}

void sub_18A6A787C()
{
  void *v0;
  void *v1;
  unsigned __int8 v2;

  sub_18A6270DC(v0, v1, v2);
}

void sub_18A6A788C()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_unlock(v0);
}

void sub_18A6A78A4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

BOOL sub_18A6A78B4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_18A6A78C4()
{
  JUMPOUT(0x18D76C7CCLL);
}

void sub_18A6A78CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

unint64_t sub_18A6A78DC()
{
  return 0xD000000000000020;
}

uint64_t sub_18A6A78F0()
{
  return sub_18A68F8F8();
}

void sub_18A6A7900()
{
  JUMPOUT(0x18D76C7CCLL);
}

uint64_t sub_18A6A7910()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_18A6A7918()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_18A6A7920()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_18A6A7928()
{
  uint64_t v0;

  return sub_18A5F51F4(v0);
}

void sub_18A6A7938()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A6A33D0(v1, v2, v0);
}

uint64_t sub_18A6A7948()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A7954()
{
  uint64_t v0;

  return sub_18A6A4470(v0);
}

id sub_18A6A795C()
{
  void *v0;

  return sub_18A6499C8(v0, 1);
}

uint64_t sub_18A6A796C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A797C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A7988()
{
  uint64_t v0;

  return v0;
}

void sub_18A6A79A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18A61807C(0, 1, 1, a4);
}

void sub_18A6A79B4()
{
  void *v0;

}

_WORD *sub_18A6A79BC(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_18A6A79C8()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A79D0()
{
  return swift_retain();
}

uint64_t sub_18A6A79D8()
{
  return swift_task_alloc();
}

uint64_t sub_18A6A79E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_18A6A79E8()
{
  uint64_t v0;

  return sub_18A5F51C8(v0);
}

void sub_18A6A79F8()
{
  uint64_t v0;

  sub_18A64E1AC(v0);
}

uint64_t sub_18A6A7A00()
{
  return Logger.logObject.getter();
}

uint64_t sub_18A6A7A14()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_18A6A7A1C()
{
  return swift_unknownObjectRetain();
}

id sub_18A6A7A24@<X0>(void *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  uint64_t v3;
  uint64_t v4;

  *(__n128 *)v4 = a2;
  *(__n128 *)(v4 + 16) = a3;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  return a1;
}

uint64_t sub_18A6A7A70()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_18A6A7A80()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_18A6A7A88()
{
  uint64_t v0;

  return v0;
}

void sub_18A6A7AA0()
{
  unint64_t *v0;

  sub_18A5F50F0(0, v0);
}

void sub_18A6A7AB0()
{
  unint64_t *v0;

  sub_18A5F50F0(0, v0);
}

uint64_t sub_18A6A7AC0()
{
  return swift_release();
}

id sub_18A6A7AD0()
{
  void *v0;

  return v0;
}

void sub_18A6A7B04(uint64_t a1@<X8>)
{

}

void sub_18A6A7B24(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 312) = a1;
}

uint64_t sub_18A6A7B30()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A7B4C()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t sub_18A6A7B64()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_18A6A7B70()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_18A6A7B78()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

void sub_18A6A7BC4()
{
  void *v0;

}

uint64_t sub_18A6A7BCC()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A7BD4()
{
  return swift_task_dealloc();
}

id sub_18A6A7BF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(id *)(v1 + 8 * a1);
}

double sub_18A6A7C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)(v3 + 24) = v0;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  result = 0.0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  return result;
}

uint64_t sub_18A6A7C1C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 480) + 16);
}

uint64_t sub_18A6A7C28(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_18A6A7C48(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_18A6A7C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{

}

void sub_18A6A7C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  void *v17;
  uint64_t v18;

  *a17 = v18;

}

void sub_18A6A7C80()
{
  Swift::OpaquePointer v0;

  CKSyncEngine.State.add(pendingDatabaseChanges:)(v0);
}

void sub_18A6A7C8C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v3;
  v5 = v2 + 16 * v4;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = a1;
}

void sub_18A6A7CB4(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(a1 + 32) = v1;
  *(_BYTE *)(a1 + 40) = 0;

}

uint64_t sub_18A6A7CC0()
{
  return swift_release();
}

void sub_18A6A7CCC(float a1)
{
  float *v1;

  *v1 = a1;
}

void *sub_18A6A7CE0()
{
  void *v0;

  return sub_18A680C80(v0);
}

void sub_18A6A7CEC()
{
  void *v0;

}

uint64_t sub_18A6A7CF4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18A6A7D00()
{
  void *v0;

}

BOOL sub_18A6A7D0C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_18A6A7D2C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
}

uint64_t sub_18A6A7D40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 88);
}

uint64_t sub_18A6A7D54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 344);
}

uint64_t sub_18A6A7D68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 64);
}

void sub_18A6A7D7C()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

void sub_18A6A7D88()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_18A6A7D94()
{
  return swift_task_dealloc();
}

unint64_t sub_18A6A7D9C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t sub_18A6A7DC0()
{
  return sub_18A65B10C();
}

void sub_18A6A7DCC(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_18A6A4B10(a2, a1);
}

uint64_t sub_18A6A7DD4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A7DE8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2[4] = result;
  v2[5] = a2;
  v2[6] = 0xD000000000000012;
  return result;
}

uint64_t sub_18A6A7DFC()
{
  return swift_bridgeObjectRelease();
}

void sub_18A6A7E2C()
{
  uint64_t v0;

}

uint64_t sub_18A6A7E34()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A7E3C()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A7E48()
{
  return static Date.now.getter();
}

void sub_18A6A7E50(uint64_t a1, unint64_t *a2)
{
  sub_18A5F50F0(a1, a2);
}

void sub_18A6A7E58(unint64_t *a1, unint64_t *a2)
{
  sub_18A6A4AD4(a1, a2);
}

void sub_18A6A7E60()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
  sub_18A62E9C4();
}

void sub_18A6A7E6C(uint64_t a1)
{
  sub_18A675860(a1);
}

uint64_t sub_18A6A7E78(uint64_t a1)
{
  uint64_t v1;

  return sub_18A675F54(a1, v1);
}

void sub_18A6A7E84()
{
  CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
}

uint64_t sub_18A6A7E8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return sub_18A69C3A8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

id sub_18A6A7E94()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A7EB4(unint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return sub_18A670C84(a1, a2, v4, a4);
}

void sub_18A6A7ED4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = (unint64_t)(63 - v0) >> 6;
}

uint64_t sub_18A6A7EFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 64);
}

uint64_t sub_18A6A7F08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 96);
}

uint64_t sub_18A6A7F14(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = result;
  return result;
}

void sub_18A6A7F20()
{
  uint64_t v0;

}

void sub_18A6A7F28(unint64_t *a1)
{
  unint64_t *v1;

  sub_18A6A4AD4(a1, v1);
}

BOOL sub_18A6A7F34(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

BOOL sub_18A6A7F40(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

void sub_18A6A7F4C(void *a1)
{
  sub_18A6A0C74(a1);
}

void sub_18A6A7F58(uint64_t a1)
{
  uint64_t *v1;

  sub_18A6A4B10(a1, v1);
}

__n128 sub_18A6A7F60(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__n128 a49)
{
  __n128 result;

  result = a49;
  a1[1] = a49;
  return result;
}

void sub_18A6A7F6C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

void sub_18A6A7F8C()
{
  __break(1u);
}

uint64_t sub_18A6A7FC0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_18A6A7FC8()
{
  void *v0;

}

uint64_t sub_18A6A7FD0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_18A6689A8(v1, v0);
}

id sub_18A6A7FDC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_18A6A7FE4()
{
  uint64_t v0;

  return v0;
}

id sub_18A6A802C(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_18A6A8050()
{
  uint64_t v0;

  return sub_18A697B8C(*(_QWORD *)(v0 - 128));
}

uint64_t sub_18A6A805C()
{
  return swift_release();
}

_QWORD *sub_18A6A8074(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  result[2] = v19;
  result[3] = v18;
  result[4] = a18;
  return result;
}

uint64_t sub_18A6A8088()
{
  uint64_t v0;

  return sub_18A697B8C(v0);
}

uint64_t sub_18A6A80A8(uint64_t result)
{
  *(_QWORD *)(result + 88) = 0xEB00000000746E65;
  return result;
}

id sub_18A6A80D0(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, 0, v2);
}

uint64_t sub_18A6A80DC(uint64_t a1)
{
  uint64_t v1;

  return sub_18A672154(v1, a1);
}

uint64_t sub_18A6A80E8()
{
  return swift_arrayDestroy();
}

void sub_18A6A8100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

}

void sub_18A6A8108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

}

uint64_t sub_18A6A8110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void sub_18A6A811C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_18A670ABC(v2, a2, v3);
}

void sub_18A6A8128()
{
  sub_18A62E990();
}

void sub_18A6A8134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_18A670ABC(v2, a2, v3);
}

uint64_t sub_18A6A8140()
{
  uint64_t v0;

  return sub_18A61A4B0(v0);
}

void sub_18A6A8148(unint64_t *a1)
{
  unint64_t *v1;

  sub_18A6A4AD4(a1, v1);
}

void sub_18A6A8154(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_18A6A51C0(a1, v3, a3);
}

uint64_t sub_18A6A8168()
{
  return static os_log_type_t.default.getter();
}

void sub_18A6A8170()
{
  void *v0;

}

void sub_18A6A817C()
{
  void *v0;

}

__n128 sub_18A6A8184(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  __n128 result;

  *(_QWORD *)(v9 + 184) = a1;
  result = a9;
  a1[1] = a9;
  return result;
}

uint64_t sub_18A6A8198()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_18A6A81A0()
{
  return static os_log_type_t.debug.getter();
}

unint64_t sub_18A6A81BC()
{
  return 0xD000000000000015;
}

uint64_t sub_18A6A81DC()
{
  return swift_willThrow();
}

void sub_18A6A81E4()
{
  void *v0;

}

void sub_18A6A81EC()
{
  void *v0;

}

void sub_18A6A81F8()
{
  sub_18A62E990();
}

uint64_t sub_18A6A8204(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_18A609924(a1, a2, (uint64_t *)(v2 - 168));
}

uint64_t sub_18A6A8210(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

uint64_t sub_18A6A821C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

uint64_t sub_18A6A8228(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

uint64_t sub_18A6A8234(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

uint64_t sub_18A6A8240(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_18A609924(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_18A6A824C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return sub_18A609924(a1, a2, (uint64_t *)va);
}

id sub_18A6A8258()
{
  void *v0;

  return v0;
}

id sub_18A6A8264()
{
  void *v0;

  return v0;
}

void sub_18A6A8270()
{
  sub_18A65EB68();
}

uint64_t sub_18A6A8278()
{
  void *v0;

  return CKErrorShouldDefer(v0);
}

void sub_18A6A8280()
{
  void *v0;

  sub_18A66BCA0(v0);
}

uint64_t sub_18A6A8288()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_18A6A8290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_18A670ABC(v3, a2, v2);
}

void sub_18A6A829C()
{
  void (*v0)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);
  uint64_t v1;

  sub_18A6A32E0(v1, v0);
}

uint64_t sub_18A6A82A8()
{
  void *v0;

  return related decl 'e' for CKErrorCode.init(_:)(v0);
}

uint64_t sub_18A6A82B0()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_18A6A82BC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_18A6A82C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t))
{
  uint64_t v17;

  return a17(v17);
}

uint64_t sub_18A6A82D4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_18A612F8C(v0, v1);
}

uint64_t sub_18A6A82E0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_18A60FC24(v0, v1);
}

void sub_18A6A82F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A6185E8(a1, a2, 1, v2);
}

void sub_18A6A8304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_18A6185E8(a1, a2, 1, v2);
}

void sub_18A6A831C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 16 * v0 + 32) = v2;
}

id sub_18A6A8330()
{
  void *v0;

  return v0;
}

uint64_t sub_18A6A833C()
{
  return swift_task_alloc();
}

void sub_18A6A8344()
{
  uint64_t v0;
  uint64_t v1;

}

uint64_t sub_18A6A834C()
{
  void *v0;

  return related decl 'e' for CKErrorCode.init(_:)(v0);
}

_QWORD *sub_18A6A8368(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

void sub_18A6A8374()
{
  _HashTable.BucketIterator.advance()();
}

uint64_t sub_18A6A837C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_18A6A8384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return sub_18A697B8C(a19);
}

_QWORD *sub_18A6A8390(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

void sub_18A6A839C()
{
  sub_18A69F450();
}

double sub_18A6A83A8()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  return result;
}

uint64_t sub_18A6A83BC()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_18A6A83C8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A83D4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18A6A83E0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_18A6A83EC()
{
  return swift_task_dealloc();
}

uint64_t sub_18A6A83F4()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

void sub_18A6A83FC()
{
  sub_18A697558();
}

void sub_18A6A8408()
{
  void *v0;

}

void sub_18A6A8414()
{
  JUMPOUT(0x18D76CEB0);
}

uint64_t sub_18A6A8420()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_18A6A8428()
{
  return __CocoaSet.count.getter();
}

void sub_18A6A8430(uint64_t a1, SEL *a2)
{
  void *v2;

  sub_18A6A2788(v2, a2);
}

uint64_t sub_18A6A8438()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_18A6A8444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_18A6A8450()
{
  return _BridgedStoredNSError.code.getter();
}

BOOL sub_18A6A845C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_18A69A468(v1, v0);
}

id sub_18A6A8468()
{
  void *v0;

  return v0;
}

void sub_18A6A8470()
{
  void *v0;

}

uint64_t sub_18A6A847C()
{
  return type metadata accessor for ContinuousClock();
}

void sub_18A6A8484()
{
  void *v0;

}

void sub_18A6A848C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

id sub_18A6A84A0()
{
  void *v0;

  return v0;
}

_QWORD *sub_18A6A84B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_18A6A84C8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2[4] = result;
  v2[5] = a2;
  v2[6] = 0xD000000000000012;
  return result;
}

uint64_t sub_18A6A84DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *v3 = v2;
  v3[1] = a2;
  *(_QWORD *)(v4 + 16) = 256;
  *(_QWORD *)(v4 + 24) = result;
  return result;
}

uint64_t related decl 'e' for CKErrorCode.init(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v6;
  uint64_t v8;

  sub_18A5F101C((uint64_t *)&unk_1EDF6C370);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18A83AC30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = a2;
  *(_QWORD *)(inited + 56) = a3;
  Dictionary.init(dictionaryLiteral:)();
  sub_18A5F42A0();
  sub_18A6A89EC();
  sub_18A5F37E0();
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v8;
}

void related decl 'e' for CKErrorCode.partialErrorsByItemID.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  sub_18A5F42A0();
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  _BridgedStoredNSError.userInfo.getter();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F3F78(v1, v2, v3, v4, v5, v6, v7, v8, v11, a1, v14);
  sub_18A5F37A4();
  v9 = sub_18A5F37E0();
  if (v15)
  {
    sub_18A5F101C(&qword_1EDF6A2F0);
    if ((sub_18A5F493C() & 1) != 0)
    {
      sub_18A6A8D08(v13);
      sub_18A5F37A4();
    }
  }
  else
  {
    sub_18A6A9D6C(v9, v10);
  }
  sub_18A6A9DDC();
}

double sub_18A6A8694@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_18A62E868(a1, a2), (v7 & 1) != 0))
  {
    sub_18A609B7C(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

void sub_18A6A86E4(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_18A62E960(a1);
    if ((v2 & 1) != 0)
      sub_18A5F42D4();
  }
  sub_18A5F379C();
}

void sub_18A6A8724(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_18A62E990();
    if ((v2 & 1) != 0)
      sub_18A5F42D4();
  }
  sub_18A5F379C();
}

void *sub_18A6A8764(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  id v8;
  void *v10;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      sub_18A62E990();
      if ((v7 & 1) != 0)
      {
        v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v6);
        v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  sub_18A60B8D0(0, &qword_1EDF6A488);
  swift_unknownObjectRetain();
  sub_18A612F00();
  v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t related decl 'e' for CKErrorCode.init(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for CancellationError();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1;
  sub_18A5F42D4();
  sub_18A5F101C(&qword_1EDF6A9D8);
  sub_18A5F42A0();
  if (swift_dynamicCast())
  {

    v6 = v12;
LABEL_5:
    sub_18A6A9DD4();
    return v6;
  }
  sub_18A6A9DD4();
  v10 = a1;
  sub_18A5F42D4();
  if (swift_dynamicCast())
  {
    v6 = related decl 'e' for CKErrorCode.init(_:description:)(20, 0xD000000000000012, 0x800000018A840940);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_5;
  }
  sub_18A6A9DD4();
  v10 = 0;
  v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  v8._countAndFlagsBits = 0xD000000000000024;
  v8._object = (void *)0x800000018A840910;
  String.append(_:)(v8);
  swift_getErrorValue();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_18A6A89EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];

  sub_18A6A9DC8();
  if (v1)
  {
    sub_18A5F101C(&qword_1EDF6B888);
    v2 = (_QWORD *)sub_18A5F4810();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v41 = v0 + 64;
  v3 = -1 << *(_BYTE *)(v0 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v0 + 64);
  v40 = (unint64_t)(63 - v3) >> 6;
  v6 = &v46;
  v7 = &v48;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = MEMORY[0x1E0DEE9B8] + 8;
  v10 = MEMORY[0x1E0DEA968];
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        sub_18A6A9DB4();
        v43 = v5;
        v12 = v11 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8, 1))
          goto LABEL_37;
        if (v8 + 1 >= v40)
        {
LABEL_34:
          sub_18A62F4F8();
          return;
        }
        sub_18A6A7BA4();
        if (!v13)
        {
          sub_18A6A9D9C();
          if (v15 == v16)
            goto LABEL_34;
          if (!*(_QWORD *)(v41 + 8 * v14))
          {
            sub_18A6A9D9C();
            if (v15 == v16)
              goto LABEL_34;
            if (!*(_QWORD *)(v41 + 8 * v17))
            {
              sub_18A6A9D9C();
              if (v15 == v16)
                goto LABEL_34;
              if (!*(_QWORD *)(v41 + 8 * v18))
              {
                v20 = v19 + 4;
                if (v20 >= v40)
                  goto LABEL_34;
                if (!*(_QWORD *)(v41 + 8 * v20))
                {
                  while (!__OFADD__(v20, 1))
                  {
                    sub_18A6A9D9C();
                    if (v15 == v16)
                      goto LABEL_34;
                    sub_18A5F4098();
                    if (v21)
                      goto LABEL_28;
                  }
                  goto LABEL_38;
                }
              }
            }
          }
        }
LABEL_28:
        sub_18A6A9D50();
        v43 = v23 & v22;
        v12 = v25 + (v24 << 6);
        v8 = v24;
      }
      v26 = (uint64_t *)(*(_QWORD *)(v0 + 48) + 16 * v12);
      v44 = *v26;
      v45 = v26[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18A612F00();
      sub_18A612E68(v6, v7);
      sub_18A612E68(v7, v49);
      sub_18A612E68(v49, &v47);
      v27 = sub_18A62E868(v44, v45);
      v28 = v27;
      if ((v29 & 1) == 0)
        break;
      v42 = v8;
      v30 = v7;
      v31 = v6;
      v32 = v0;
      v33 = v10;
      v34 = v9;
      v35 = (uint64_t *)(v2[6] + 16 * v27);
      swift_bridgeObjectRelease();
      *v35 = v44;
      v35[1] = v45;
      v9 = v34;
      v10 = v33;
      v0 = v32;
      v6 = v31;
      v7 = v30;
      v8 = v42;
      v36 = (_OWORD *)(v2[7] + 32 * v28);
      sub_18A608B60((uint64_t)v36);
      sub_18A612E68(&v47, v36);
      v5 = v43;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v27;
    v37 = (uint64_t *)(v2[6] + 16 * v27);
    *v37 = v44;
    v37[1] = v45;
    sub_18A612E68(&v47, (_OWORD *)(v2[7] + 32 * v27));
    v38 = v2[2];
    v16 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v16)
      goto LABEL_36;
    v2[2] = v39;
    v5 = v43;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_18A6A8D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::Int v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  id v33;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_18A5F101C(&qword_1EDF6A310);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  if (!v5)
    goto LABEL_9;
LABEL_8:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    sub_18A62F8E8(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v31);
    v33 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    v28 = v31[0];
    v29 = v31[1];
    v30 = v32;
    v15 = *(_QWORD *)(v2 + 40);
    v16 = v33;
    result = AnyHashable._rawHashValue(seed:)(v15);
    v17 = -1 << *(_BYTE *)(v2 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v6 + 8 * (v18 >> 6))) == 0)
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        v23 = v19 == v22;
        if (v19 == v22)
          v19 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v6 + 8 * v19);
        if (v24 != -1)
        {
          v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v6 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v6 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v25 = *(_QWORD *)(v2 + 48) + 40 * v20;
    *(_OWORD *)v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(_QWORD *)(v25 + 32) = v30;
    *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v20) = v16;
    ++*(_QWORD *)(v2 + 16);
    if (v5)
      goto LABEL_8;
LABEL_9:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_38;
    if (v11 >= v26)
      goto LABEL_36;
    v12 = *(_QWORD *)(v27 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_36;
      v12 = *(_QWORD *)(v27 + 8 * v13);
      if (!v12)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_36;
        v12 = *(_QWORD *)(v27 + 8 * v13);
        if (!v12)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_36;
          v12 = *(_QWORD *)(v27 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v8 = v13;
  }
  v14 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_36:
    swift_release();
    sub_18A62F4F8();
    return v2;
  }
  v12 = *(_QWORD *)(v27 + 8 * v14);
  if (v12)
  {
    v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v26)
      goto LABEL_36;
    v12 = *(_QWORD *)(v27 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_18A6A9018()
{
  sub_18A6A9030();
}

void sub_18A6A9024()
{
  sub_18A6A9030();
}

void sub_18A6A9030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  Swift::Int v26;
  id v27;
  id v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;

  sub_18A6A9DC8();
  if (v1)
  {
    sub_18A5F101C(v3);
    v4 = sub_18A5F4810();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9E0];
  }
  sub_18A5F3C34();
  v7 = v6 & v5;
  sub_18A6A9D34();
  swift_retain();
  v8 = 0;
  if (!v7)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v23 = *(void **)(*(_QWORD *)(v0 + 48) + 8 * v10);
    v24 = *(void **)(*(_QWORD *)(v0 + 56) + 8 * v10);
    sub_18A5F42A0();
    sub_18A62F924(&qword_1EDF6AA10, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839088);
    sub_18A6A9D14();
    *v25 = v24;
    v26 = *(_QWORD *)(v4 + 40);
    v27 = v23;
    v28 = v24;
    NSObject._rawHashValue(seed:)(v26);
    sub_18A5F3A60();
    if (v29)
    {
      sub_18A623A8C();
      while (++v32 != v33 || (v31 & 1) == 0)
      {
        v34 = v32 == v33;
        if (v32 == v33)
          v32 = 0;
        v31 |= v34;
        if (*(_QWORD *)(v2 + 8 * v32) != -1)
        {
          sub_18A5F3874();
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_18A623A40();
LABEL_36:
    *(_QWORD *)(v2 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v30) = v27;
    sub_18A6A9D74(v30);
    if (v7)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v8, 1))
      goto LABEL_40;
    sub_18A6A9DA8();
    if (v11 == v12)
      goto LABEL_38;
    sub_18A6A7BA4();
    if (!v13)
    {
      sub_18A6A9D28();
      if (v11 == v12)
        goto LABEL_38;
      sub_18A6A9D60();
      if (!v14)
      {
        sub_18A6A9D28();
        if (v11 == v12)
          goto LABEL_38;
        sub_18A6A9D60();
        if (!v15)
        {
          sub_18A6A9D28();
          if (v11 == v12)
            goto LABEL_38;
          sub_18A6A9D60();
          if (!v16)
          {
            sub_18A6A9DA8();
            if (v11 == v12)
            {
LABEL_38:
              sub_18A6A9D8C();
              sub_18A62F4F8();
              return;
            }
            if (!*(_QWORD *)(v35 + 8 * v17))
              break;
          }
        }
      }
    }
LABEL_26:
    sub_18A6A9D50();
    v7 = v20 & v19;
    v10 = v22 + (v21 << 6);
    v8 = v21;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_18A6A9D28();
    if (v11 == v12)
      goto LABEL_38;
    sub_18A5F4098();
    if (v18)
      goto LABEL_26;
  }
LABEL_41:
  __break(1u);
}

void sub_18A6A9260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  Swift::Int v24;
  id v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  void *v39;

  sub_18A6A9DC8();
  if (v1)
  {
    sub_18A5F101C(&qword_1EDF6A310);
    v3 = sub_18A5F4810();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  sub_18A5F3C34();
  v6 = v5 & v4;
  sub_18A6A9D34();
  swift_retain();
  v7 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  sub_18A6A9DB4();
  v9 = v8 | (v7 << 6);
  while (1)
  {
    sub_18A62F8E8(*(_QWORD *)(v0 + 48) + 40 * v9, (uint64_t)v37);
    v39 = *(void **)(*(_QWORD *)(v0 + 56) + 8 * v9);
    v22 = v39;
    v34 = v37[0];
    v35 = v37[1];
    v36 = v38;
    sub_18A5F42A0();
    sub_18A62F924(&qword_1EDF6AA10, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839088);
    sub_18A6A9D14();
    *v23 = v22;
    v24 = *(_QWORD *)(v3 + 40);
    v25 = v22;
    AnyHashable._rawHashValue(seed:)(v24);
    sub_18A5F3A60();
    if (v26)
    {
      sub_18A623A8C();
      while (++v29 != v30 || (v28 & 1) == 0)
      {
        v31 = v29 == v30;
        if (v29 == v30)
          v29 = 0;
        v28 |= v31;
        if (*(_QWORD *)(v2 + 8 * v29) != -1)
        {
          sub_18A5F3874();
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_18A623A40();
LABEL_36:
    *(_QWORD *)(v2 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = *(_QWORD *)(v3 + 48) + 40 * v27;
    *(_OWORD *)v32 = v34;
    *(_OWORD *)(v32 + 16) = v35;
    *(_QWORD *)(v32 + 32) = v36;
    sub_18A6A9D74(v27);
    if (v6)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v7, 1))
      goto LABEL_40;
    sub_18A6A9DA8();
    if (v10 == v11)
      goto LABEL_38;
    sub_18A6A7BA4();
    if (!v12)
    {
      sub_18A6A9D28();
      if (v10 == v11)
        goto LABEL_38;
      sub_18A6A9D60();
      if (!v13)
      {
        sub_18A6A9D28();
        if (v10 == v11)
          goto LABEL_38;
        sub_18A6A9D60();
        if (!v14)
        {
          sub_18A6A9D28();
          if (v10 == v11)
            goto LABEL_38;
          sub_18A6A9D60();
          if (!v15)
          {
            sub_18A6A9DA8();
            if (v10 == v11)
            {
LABEL_38:
              sub_18A6A9D8C();
              sub_18A62F4F8();
              return;
            }
            if (!*(_QWORD *)(v33 + 8 * v16))
              break;
          }
        }
      }
    }
LABEL_26:
    sub_18A6A9D50();
    v6 = v19 & v18;
    v9 = v21 + (v20 << 6);
    v7 = v20;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_18A6A9D28();
    if (v10 == v11)
      goto LABEL_38;
    sub_18A5F4098();
    if (v17)
      goto LABEL_26;
  }
LABEL_41:
  __break(1u);
}

void sub_18A6A94D4(uint64_t a1)
{
  sub_18A6A94FC(a1, (unint64_t *)&qword_1ECD967B0);
}

void sub_18A6A94E8(uint64_t a1)
{
  sub_18A6A94FC(a1, (unint64_t *)&unk_1EDF6A8F0);
}

void sub_18A6A94FC(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  sub_18A6A9DC8();
  if (v3)
  {
    sub_18A5F101C(&qword_1EDF6A310);
    v5 = sub_18A5F4810();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E0];
  }
  v40 = v2 + 64;
  v6 = -1 << *(_BYTE *)(v2 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(63 - v6) >> 6;
  v9 = v5 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = 0;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v12 = v11 | (v10 << 6);
  while (1)
  {
    v26 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v12);
    v27 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v12);
    sub_18A60B8D0(0, a2);
    v28 = v26;
    v29 = v27;
    sub_18A612F00();
    sub_18A5F42A0();
    sub_18A62F924(&qword_1EDF6AA10, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A839088);
    v30 = sub_18A6A9D14();
    *v31 = v29;
    v32 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v5 + 40)) & ~(-1 << *(_BYTE *)(v5 + 32));
    if (((-1 << v32) & ~*(_QWORD *)(v9 + 8 * (v32 >> 6))) == 0)
    {
      sub_18A623A8C();
      while (++v35 != v36 || (v34 & 1) == 0)
      {
        v37 = v35 == v36;
        if (v35 == v36)
          v35 = 0;
        v34 |= v37;
        if (*(_QWORD *)(v9 + 8 * v35) != -1)
        {
          sub_18A5F3874();
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    sub_18A623A40();
LABEL_37:
    *(_QWORD *)(v9 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    v38 = *(_QWORD *)(v5 + 48) + 40 * v33;
    *(_OWORD *)v38 = v41;
    *(_OWORD *)(v38 + 16) = v42;
    *(_QWORD *)(v38 + 32) = v43;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33) = v30;
    ++*(_QWORD *)(v5 + 16);
    if (v8)
      goto LABEL_8;
LABEL_9:
    if (__OFADD__(v10, 1))
      goto LABEL_41;
    if (v10 + 1 >= v39)
      goto LABEL_39;
    sub_18A6A7BA4();
    if (!v13)
    {
      sub_18A6A9DE8();
      if (v15 == v16)
        goto LABEL_39;
      if (!*(_QWORD *)(v40 + 8 * v14))
      {
        sub_18A6A9DE8();
        if (v15 == v16)
          goto LABEL_39;
        if (!*(_QWORD *)(v40 + 8 * v17))
        {
          sub_18A6A9DE8();
          if (v15 == v16)
            goto LABEL_39;
          if (!*(_QWORD *)(v40 + 8 * v18))
          {
            v20 = v19 + 4;
            if (v20 >= v39)
            {
LABEL_39:
              swift_release();
              sub_18A62F4F8();
              return;
            }
            if (!*(_QWORD *)(v40 + 8 * v20))
              break;
          }
        }
      }
    }
LABEL_27:
    sub_18A6A9D50();
    v8 = v23 & v22;
    v12 = v25 + (v24 << 6);
    v10 = v24;
  }
  while (!__OFADD__(v20, 1))
  {
    sub_18A6A9DE8();
    if (v15 == v16)
      goto LABEL_39;
    sub_18A5F4098();
    if (v21)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
}

uint64_t related decl 'e' for CKErrorCode.init(partialErrors:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_18A5F101C(&qword_1EDF6A390);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18A83C9C0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = a2;
  *(_QWORD *)(inited + 56) = a3;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v8;
  *(_QWORD *)(inited + 120) = sub_18A5F101C(&qword_1EDF6A140);
  *(_QWORD *)(inited + 96) = a1;
  Dictionary.init(dictionaryLiteral:)();
  sub_18A5F42A0();
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v10;
}

uint64_t related decl 'e' for CKErrorCode.ancestorRecord.getter(uint64_t a1)
{
  return sub_18A6A9974(a1, (uint64_t)&CKRecordChangedErrorAncestorRecordKey, &qword_1EDF6A338);
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter(uint64_t a1)
{
  return sub_18A6A9974(a1, (uint64_t)&CKRecordChangedErrorServerRecordKey, &qword_1EDF6A338);
}

uint64_t sub_18A6A9974(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  *(_QWORD *)&v20 = a1;
  sub_18A5F42A0();
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  v4 = _BridgedStoredNSError.userInfo.getter();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A6A8694(v5, v6, v4, &v20);
  swift_bridgeObjectRelease();
  v7 = sub_18A5F37A4();
  if (v21)
  {
    sub_18A60B8D0(0, a3);
    v9 = sub_18A5F493C();
    return sub_18A5F4174(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19);
  }
  else
  {
    sub_18A6A9D6C(v7, v8);
    return 0;
  }
}

uint64_t related decl 'e' for CKErrorCode.clientRecord.getter(uint64_t a1)
{
  return sub_18A6A9974(a1, (uint64_t)&CKRecordChangedErrorClientRecordKey, &qword_1EDF6A338);
}

uint64_t related decl 'e' for CKErrorCode.retryAfterSeconds.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)&v15 = a1;
  sub_18A5F42A0();
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  sub_18A5F4490();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F3F78(v1, v2, v3, v4, v5, v6, v7, v8, v12, v13, v15);
  sub_18A5F37A4();
  v9 = sub_18A5F37E0();
  if (v16)
  {
    if (sub_18A5F493C())
      return v14;
    else
      return 0;
  }
  else
  {
    sub_18A6A9D6C(v9, v10);
    return 0;
  }
}

uint64_t related decl 'e' for CKErrorCode.movedDestinationID.getter(uint64_t a1)
{
  return sub_18A6A9974(a1, (uint64_t)CKRecordMovedDestinationIDKey, (unint64_t *)&unk_1EDF6A8F0);
}

void related decl 'e' for CKErrorCode.underlyingError.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  *(_QWORD *)&v23 = a1;
  sub_18A5F42A0();
  sub_18A62F924((unint64_t *)&qword_1EDF6A9F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_18A83944C);
  sub_18A5F4490();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F3F78(v1, v2, v3, v4, v5, v6, v7, v8, v19, v21, v23);
  sub_18A5F37A4();
  v9 = sub_18A5F37E0();
  if (v24)
  {
    type metadata accessor for CKUnderlyingError(0);
    v11 = sub_18A5F493C();
    sub_18A5F4174(v11, v12, v13, v14, v15, v16, v17, v18, v20, v22);
  }
  else
  {
    sub_18A6A9D6C(v9, v10);
  }
  sub_18A6A9DDC();
}

uint64_t related decl 'e' for CKErrorCode.underlyingFunctionError.getter(uint64_t a1)
{
  return sub_18A6A9C5C(a1, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (unint64_t *)&qword_1EDF6A9F0, (uint64_t)&unk_18A83944C);
}

uint64_t related decl 'e' for CKErrorCode.description.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)_convertErrorToNSError(_:)();
  v1 = objc_msgSend(v0, sel_description);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_18A6A9C38()
{
  return related decl 'e' for CKErrorCode.description.getter();
}

uint64_t related decl 'e' for CKUnderlyingErrorCode.underlyingFunctionError.getter(uint64_t a1)
{
  return sub_18A6A9C5C(a1, (uint64_t (*)(uint64_t))type metadata accessor for CKUnderlyingError, &qword_1EDF69988, (uint64_t)&unk_18A83934C);
}

uint64_t sub_18A6A9C5C(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  *(_QWORD *)&v30 = a1;
  a2(0);
  sub_18A62F924(a3, a2, a4);
  _BridgedStoredNSError.userInfo.getter();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F3F78(v7, v8, v9, v10, v11, v12, v13, v14, v26, v28, v30);
  sub_18A5F37A4();
  v15 = sub_18A5F37E0();
  if (v31)
  {
    sub_18A5F101C(&qword_1EDF6A9D8);
    v17 = sub_18A5F493C();
    return sub_18A5F4174(v17, v18, v19, v20, v21, v22, v23, v24, v27, v29);
  }
  else
  {
    sub_18A6A9D6C(v15, v16);
    return 0;
  }
}

uint64_t sub_18A6A9D14()
{
  return swift_allocError();
}

uint64_t sub_18A6A9D34()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18A6A9D6C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_18A60B87C((uint64_t)va);
}

void sub_18A6A9D74(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * a1) = v2;
  ++*(_QWORD *)(v1 + 16);
}

uint64_t sub_18A6A9D8C()
{
  return swift_release();
}

void sub_18A6A9DD4()
{
  uint64_t v0;

}

void sub_18A6A9DF4()
{
  void *v0;

  sub_18A6AA918(v0);

  sub_18A5F379C();
}

uint64_t sub_18A6A9E1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_18A6AAB80(v0);
  v2 = v1;

  return v2;
}

void CKRecord.allKeys()()
{
  sub_18A6AA674((SEL *)&selRef_allKeys);
}

void CKRecordKeyValueIterator.next()(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD *v11;

  v2 = v1[2];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (v2 >= v4)
  {
LABEL_7:
    a1[6] = 0;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v11 = a1;
    v5 = (void *)v1[1];
    v6 = (uint64_t *)(v3 + 16 * v2 + 40);
    while (v2 < (unint64_t)v4)
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      swift_bridgeObjectRetain_n();
      v9 = (void *)MEMORY[0x18D76C7CC](v8, v7);
      v10 = objc_msgSend(v5, sel_objectForKey_, v9);
      swift_bridgeObjectRelease();

      ++v2;
      if (v10)
      {
        v1[2] = v2;
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)(v11 + 2));
        swift_unknownObjectRelease_n();
        *v11 = v8;
        v11[1] = v7;
        return;
      }
      swift_bridgeObjectRelease();
      v4 = *(_QWORD *)(v3 + 16);
      v6 += 2;
      if (v2 >= v4)
      {
        v1[2] = v2;
        a1 = v11;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
}

void CKRecord.makeIterator()(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;

  v3 = v1;
  v4 = objc_msgSend(v3, sel_allKeys);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v5;
  a1[1] = (uint64_t)v3;
  a1[2] = 0;
  sub_18A5F3824();
}

void sub_18A6A9FFC(uint64_t *a1@<X8>)
{
  id *v1;
  id v2;

  v2 = *v1;
  CKRecord.makeIterator()(a1);

}

uint64_t sub_18A6AA030()
{
  return sub_18A6A9E1C();
}

uint64_t sub_18A6AA050()
{
  return sub_18A6A9E50();
}

uint64_t sub_18A6AA070()
{
  sub_18A5F50F0(0, &qword_1EDF6A338);
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_18A6AA0E8()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6C880 = result;
  *(_QWORD *)algn_1EDF6C888 = v1;
  return result;
}

void static CKRecord.SystemType.userRecord.getter()
{
  sub_18A6AA268();
}

uint64_t sub_18A6AA134()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF69368 = result;
  unk_1EDF69370 = v1;
  return result;
}

void static CKRecord.SystemType.share.getter()
{
  sub_18A6AA268();
}

uint64_t static CKRecord.SystemFieldKey.recordID.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.creatorUserRecordID.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.creationDate.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.lastModifiedUserRecordID.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static CKRecord.SystemFieldKey.modificationDate.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18A6AA1D0()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6C890 = result;
  *(_QWORD *)algn_1EDF6C898 = v1;
  return result;
}

void static CKRecord.SystemFieldKey.parent.getter()
{
  sub_18A6AA268();
}

uint64_t sub_18A6AA21C()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6C8A0 = result;
  *(_QWORD *)algn_1EDF6C8A8 = v1;
  return result;
}

void static CKRecord.SystemFieldKey.share.getter()
{
  sub_18A6AA268();
}

void sub_18A6AA268()
{
  char v0;

  sub_18A5F3AB4();
  if (!v0)
    swift_once();
  sub_18A5F3E00();
  sub_18A5F379C();
}

void __swiftcall CKRecord.init(recordType:zoneID:)(CKRecord *__return_ptr retstr, Swift::String recordType, CKRecordZoneID *zoneID)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CKRecordZoneID *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  CKRecord *v16;
  uint64_t v17;
  CKRecordID v18;

  object = recordType._object;
  countAndFlagsBits = recordType._countAndFlagsBits;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18A5F50F0(0, (unint64_t *)&unk_1EDF6A8F0);
  v10 = zoneID;
  UUID.init()();
  v11 = UUID.uuidString.getter();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  v18.super.isa = (Class)CKRecordID.init(recordName:zoneID:)(v14, v10);
  v15._countAndFlagsBits = countAndFlagsBits;
  v15._object = object;
  CKRecord.init(recordType:recordID:)(v16, v15, v18);

  sub_18A5F37E8();
}

void __swiftcall CKRecord.init(recordType:recordID:)(CKRecord *__return_ptr retstr, Swift::String recordType, CKRecordID recordID)
{
  Class isa;
  void *object;
  uint64_t countAndFlagsBits;
  id v6;
  void *v7;

  isa = recordID.super.isa;
  object = recordType._object;
  countAndFlagsBits = recordType._countAndFlagsBits;
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)MEMORY[0x18D76C7CC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_initWithRecordType_recordID_, v7, isa);

}

void CKRecord.recordType.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_recordType);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18A5F3824();
}

void CKRecord.object(forKey:)()
{
  uint64_t v0;
  id v1;

  v0 = MEMORY[0x18D76C7CC]();
  v1 = sub_18A5F38A0(v0, sel_objectForKey_);
  sub_18A5F3890();
  sub_18A5F379C();
}

void CKRecord.setObject(_:forKey:)()
{
  sub_18A5F42A8();
}

void sub_18A6AA4A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v15;

  objc_msgSend(v15, sel_setObject_forKey_, v14, a1);

}

void sub_18A6AA4D4(_QWORD *a1@<X8>)
{
  uint64_t v2;

  CKRecord.subscript.getter();
  *a1 = v2;
}

void sub_18A6AA500()
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  CKRecord.subscript.setter();
}

void CKRecord.subscript.setter()
{
  sub_18A5F42A8();
}

void sub_18A6AA56C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  uint64_t v17;

  objc_msgSend(v16, sel_setObject_forKey_, v17, a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

}

void CKRecord.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  sub_18A5F42A8();
}

void sub_18A6AA5D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  void *v15;
  id v17;

  v17 = objc_msgSend(v15, sel_objectForKey_, a1);

  *v14 = v17;
  sub_18A5F3824();
}

void sub_18A6AA610(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_18A6AB5FC();
  }
  swift_bridgeObjectRetain();
  sub_18A6AB5FC();
}

void sub_18A6AA660()
{
  sub_18A5F3824();
}

void CKRecord.changedKeys()()
{
  sub_18A6AA674((SEL *)&selRef_changedKeys);
}

void sub_18A6AA674(SEL *a1)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(v1, *a1);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18A5F3890();
  sub_18A5F379C();
}

uint64_t sub_18A6AA6B4()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6C8B0 = result;
  *(_QWORD *)algn_1EDF6C8B8 = v1;
  return result;
}

void CKRecordTypeUserRecord.getter()
{
  sub_18A6AA268();
}

uint64_t sub_18A6AA700()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6C8C0 = result;
  *(_QWORD *)algn_1EDF6C8C8 = v1;
  return result;
}

void CKRecordParentKey.getter()
{
  sub_18A6AA268();
}

uint64_t sub_18A6AA74C()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1EDF6C8D0 = result;
  *(_QWORD *)algn_1EDF6C8D8 = v1;
  return result;
}

void CKRecordShareKey.getter()
{
  sub_18A6AA268();
}

unint64_t sub_18A6AA79C()
{
  unint64_t result;

  result = qword_1EDF6C8E0;
  if (!qword_1EDF6C8E0)
  {
    result = MEMORY[0x18D76E7C4](&protocol conformance descriptor for CKRecordKeyValueIterator, &type metadata for CKRecordKeyValueIterator);
    atomic_store(result, (unint64_t *)&qword_1EDF6C8E0);
  }
  return result;
}

uint64_t sub_18A6AA7E0()
{
  return 0;
}

void destroy for CKRecordKeyValueIterator(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

void _s8CloudKit24CKRecordKeyValueIteratorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  void *v2;
  id v3;

  v2 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  v3 = v2;
  sub_18A5F379C();
}

_QWORD *assignWithCopy for CKRecordKeyValueIterator(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for CKRecordKeyValueIterator(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

void type metadata accessor for CKRecordKeyValueIterator()
{
  sub_18A5F3994();
}

void type metadata accessor for CKRecord.SystemType()
{
  sub_18A5F3994();
}

void type metadata accessor for CKRecord.SystemFieldKey()
{
  sub_18A5F3994();
}

void sub_18A6AA918(void *a1)
{
  id v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  __int128 v29[2];
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v28 = a1;
  v1 = objc_msgSend(v28, sel_allKeys);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 0;
    v5 = 0;
    v6 = MEMORY[0x1E0DEE9D8] + 32;
    v7 = (uint64_t *)(v2 + 40);
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain();
      v10 = (void *)MEMORY[0x18D76C7CC](v8, v9);
      v11 = objc_msgSend(v28, sel_objectForKey_, v10);

      if (!v11)
        goto LABEL_29;
      swift_getObjectType();
      swift_unknownObjectRetain();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)v29);
      swift_unknownObjectRelease_n();
      *(_QWORD *)&v30 = v8;
      *((_QWORD *)&v30 + 1) = v9;
      sub_18A610568(v29, (uint64_t)v31);
      v33 = v30;
      v34 = v31[0];
      v35 = v31[1];
      v36 = v32;
      if (!v5)
      {
        v12 = v3[3];
        if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_27;
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1)
          v14 = 1;
        else
          v14 = v13;
        sub_18A5F101C(&qword_1EDF6C8E8);
        v15 = (_QWORD *)swift_allocObject();
        v16 = (uint64_t)(j__malloc_size(v15) - 32) / 56;
        v15[2] = v14;
        v15[3] = 2 * v16;
        v17 = (unint64_t)(v15 + 4);
        v18 = v3[3];
        v19 = v18 >> 1;
        if (v3[2])
        {
          if (v15 != v3 || v17 >= (unint64_t)&v3[7 * v19 + 4])
            memmove(v15 + 4, v3 + 4, 56 * v19);
          v3[2] = 0;
        }
        v6 = v17 + 56 * v19;
        v5 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - (v18 >> 1);
        swift_release();
        v3 = v15;
      }
      v21 = __OFSUB__(v5--, 1);
      if (v21)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v7 += 2;
      ++v4;
      v22 = v33;
      v23 = v34;
      v24 = v35;
      *(_QWORD *)(v6 + 48) = v36;
      *(_OWORD *)(v6 + 16) = v23;
      *(_OWORD *)(v6 + 32) = v24;
      *(_OWORD *)v6 = v22;
      v6 += 56;
      if (v4 >= *(_QWORD *)(v2 + 16))
        goto LABEL_22;
    }
  }
  v5 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v25 = v3[3];
  if (v25 >= 2)
  {
    v26 = v25 >> 1;
    v21 = __OFSUB__(v26, v5);
    v27 = v26 - v5;
    if (v21)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    v3[2] = v27;
  }
}

void sub_18A6AAB80(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_allKeys);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = *(_QWORD *)(v3 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v4)
  {
    v7 = 0;
    goto LABEL_27;
  }
  v6 = 0;
  v7 = 0;
  v8 = MEMORY[0x1E0DEE9D8] + 32;
  v9 = v3 + 40;
  while (2)
  {
    v31 = v7;
    v32 = v5;
    v10 = (uint64_t *)(v9 + 16 * v6);
    while (1)
    {
      if (v6 >= (unint64_t)v4)
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v12 = *(v10 - 1);
      v11 = *v10;
      swift_bridgeObjectRetain_n();
      v13 = (void *)MEMORY[0x18D76C7CC](v12, v11);
      v14 = objc_msgSend(v1, sel_objectForKey_, v13);
      swift_bridgeObjectRelease();

      ++v6;
      if (v14)
        break;
      swift_bridgeObjectRelease();
      v4 = *(_QWORD *)(v3 + 16);
      v10 += 2;
      if (v6 >= v4)
      {
        v7 = v31;
        v5 = v32;
        goto LABEL_27;
      }
    }
    swift_getObjectType();
    swift_unknownObjectRetain();
    CKRecordValue.CKToSwiftNativeValue()((uint64_t)v34);
    swift_unknownObjectRelease_n();
    *(_QWORD *)&v33 = v12;
    *((_QWORD *)&v33 + 1) = v11;
    v39 = v35;
    v37 = v34[0];
    v38 = v34[1];
    v36 = v33;
    v15 = v31;
    if (v31)
    {
      v5 = v32;
    }
    else
    {
      v16 = v32[3];
      if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_34;
      v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      sub_18A5F101C(&qword_1EDF6C8E8);
      v5 = (_QWORD *)swift_allocObject();
      v19 = (uint64_t)(j__malloc_size(v5) - 32) / 56;
      v5[2] = v18;
      v5[3] = 2 * v19;
      v20 = (unint64_t)(v5 + 4);
      v21 = v32[3];
      v22 = v21 >> 1;
      if (v32[2])
      {
        if (v5 != v32 || v20 >= (unint64_t)&v32[7 * v22 + 4])
          memmove(v5 + 4, v32 + 4, 56 * v22);
        v32[2] = 0;
      }
      v8 = v20 + 56 * v22;
      v15 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - (v21 >> 1);
      swift_release();
    }
    v24 = __OFSUB__(v15, 1);
    v7 = v15 - 1;
    v9 = v3 + 40;
    if (v24)
      goto LABEL_32;
    v25 = v36;
    v26 = v37;
    v27 = v38;
    *(_QWORD *)(v8 + 48) = v39;
    *(_OWORD *)(v8 + 16) = v26;
    *(_OWORD *)(v8 + 32) = v27;
    *(_OWORD *)v8 = v25;
    v8 += 56;
    v4 = *(_QWORD *)(v3 + 16);
    if (v6 < v4)
      continue;
    break;
  }
LABEL_27:

  swift_bridgeObjectRelease();
  v28 = v5[3];
  if (v28 >= 2)
  {
    v29 = v28 >> 1;
    v24 = __OFSUB__(v29, v7);
    v30 = v29 - v7;
    if (v24)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
      v5[2] = v30;
    }
  }
}

void sub_18A6AAE30(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (!a2)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_14;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = v6;
    sub_18A5F37E8();
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      v9 = 0;
      v10 = 0;
      v11 = a3 - 1;
      while (v7 != v10)
      {
        v12 = a2 + v9;
        v13 = *(_QWORD *)(a4 + v9 + 56);
        v14 = *(_QWORD *)(a4 + v9 + 64);
        v16 = *(_QWORD *)(a4 + v9 + 40);
        v15 = *(_QWORD *)(a4 + v9 + 48);
        *(_BYTE *)v12 = *(_BYTE *)(a4 + v9 + 32);
        *(_QWORD *)(v12 + 8) = v16;
        *(_QWORD *)(v12 + 16) = v15;
        *(_QWORD *)(v12 + 24) = v13;
        *(_QWORD *)(v12 + 32) = v14;
        if (v11 == v10)
          goto LABEL_13;
        v17 = v10 + 1;
        v18 = *(_QWORD *)(a4 + 16);
        if (v10 + 1 == v18)
        {
          v6 = v10 + 1;
LABEL_13:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_14;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 += 40;
        v10 = v17;
        if (v17 >= v18)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
}

void sub_18A6AAF0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = v3;
  v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_allKeys);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = v4;
    a1[1] = v9;
    a1[2] = a3;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v21 = a1;
    if (*(_QWORD *)(v9 + 16))
    {
      v10 = 0;
      v11 = (uint64_t *)(v9 + 40);
      v20 = a3;
      v12 = a3 - 1;
      while (1)
      {
        v13 = *(v11 - 1);
        v14 = *v11;
        swift_bridgeObjectRetain();
        v15 = (void *)MEMORY[0x18D76C7CC](v13, v14);
        v16 = objc_msgSend(v4, sel_objectForKey_, v15);

        if (!v16)
          goto LABEL_16;
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)v22);
        swift_unknownObjectRelease_n();
        *(_QWORD *)&v23 = v13;
        *((_QWORD *)&v23 + 1) = v14;
        sub_18A610568(v22, (uint64_t)&v24);
        v17 = v26;
        v30 = v26;
        v18 = v25;
        v19 = v24;
        v28 = v24;
        v29 = v25;
        v27 = v23;
        *(_OWORD *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 32) = v18;
        *(_QWORD *)(a2 + 48) = v17;
        if (v12 == v10)
        {
          a3 = v20;
          a1 = v21;
          goto LABEL_14;
        }
        v11 += 2;
        a2 += 56;
        if ((unint64_t)++v10 >= *(_QWORD *)(v9 + 16))
          goto LABEL_12;
      }
    }
    v10 = 0;
LABEL_12:
    a3 = v10;
    a1 = v21;
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_18A6AB0C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v7 = v3;
  v8 = objc_msgSend(v7, sel_allKeys);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!a2)
  {
    v10 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
    v10 = 0;
LABEL_17:
    *a1 = v9;
    a1[1] = (uint64_t)v7;
    a1[2] = v10;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v25 = a2;
      v22 = a3;
      v23 = a1;
      v11 = 0;
      v12 = 1;
      while (2)
      {
        v24 = v12;
        v13 = (uint64_t *)(v9 + 40 + 16 * v11);
        while (1)
        {
          if (v11 >= (unint64_t)v10)
          {
            __break(1u);
            goto LABEL_21;
          }
          v14 = v11;
          v16 = *(v13 - 1);
          v15 = *v13;
          swift_bridgeObjectRetain_n();
          v17 = (void *)MEMORY[0x18D76C7CC](v16, v15);
          v18 = objc_msgSend(v7, sel_objectForKey_, v17);
          swift_bridgeObjectRelease();

          ++v11;
          if (v18)
            break;
          swift_bridgeObjectRelease();
          v10 = *(_QWORD *)(v9 + 16);
          v13 += 2;
          if (v11 >= v10)
          {
            v10 = v14 + 1;
            a1 = v23;
            goto LABEL_17;
          }
        }
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)&v27);
        swift_unknownObjectRelease_n();
        *(_QWORD *)&v26 = v16;
        *((_QWORD *)&v26 + 1) = v15;
        v19 = v29;
        v33 = v29;
        v20 = v28;
        v21 = v27;
        v31 = v27;
        v32 = v28;
        v30 = v26;
        *(_OWORD *)v25 = v26;
        *(_OWORD *)(v25 + 16) = v21;
        *(_OWORD *)(v25 + 32) = v20;
        *(_QWORD *)(v25 + 48) = v19;
        if (v24 == v22)
        {
          v10 = v14 + 1;
        }
        else
        {
          v25 += 56;
          v12 = v24 + 1;
          v10 = *(_QWORD *)(v9 + 16);
          if (v11 < v10)
            continue;
          v10 = v14 + 1;
        }
        break;
      }
      a1 = v23;
    }
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
}

_QWORD *sub_18A6AB2CC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_18A6AB304(a1, a2, a3, a4, (unint64_t *)&qword_1ECD967B0, (uint64_t)off_1E1F542B8, (unint64_t *)&qword_1ECD967B8);
}

_QWORD *sub_18A6AB2E8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_18A6AB304(a1, a2, a3, a4, (unint64_t *)&unk_1EDF6A8F0, (uint64_t)off_1E1F54288, (unint64_t *)&qword_1EDF6A400);
}

_QWORD *sub_18A6AB304(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;

  v7 = a4;
  v9 = a2;
  v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_18A5F50F0(0, a5);
    sub_18A6A4AD4(a7, a5);
    result = (_QWORD *)Set.Iterator.init(_cocoa:)();
    v7 = v33;
    v12 = v34;
    v13 = v35;
    v14 = v36;
    v15 = v37;
    if (v9)
      goto LABEL_3;
LABEL_37:
    v16 = 0;
    goto LABEL_39;
  }
  v14 = 0;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v12 = a4 + 56;
  v13 = ~v24;
  v25 = -v24;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v15 = v26 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_37;
LABEL_3:
  if (!a3)
  {
    v16 = 0;
LABEL_39:
    v27 = v29;
LABEL_41:
    *v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (_QWORD *)v16;
  }
  if (a3 < 0)
    goto LABEL_48;
  v16 = 0;
  v30 = (unint64_t)(v13 + 64) >> 6;
  v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_40;
      sub_18A5F50F0(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v19 = v32;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v32)
        goto LABEL_40;
      goto LABEL_23;
    }
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v20 >= v30)
    {
      v15 = 0;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v20);
    if (v21)
      goto LABEL_21;
    v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30)
        goto LABEL_44;
      v21 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        v20 = v14 + 3;
        goto LABEL_21;
      }
      v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      v21 = *(_QWORD *)(v12 + 8 * v22);
      if (!v21)
      {
        v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          v15 = 0;
          v14 = v22;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v12 + 8 * v20);
        if (!v21)
        {
          v23 = v14 + 6;
          while (v23 < v30)
          {
            v21 = *(_QWORD *)(v12 + 8 * v23++);
            if (v21)
            {
              v20 = v23 - 1;
              goto LABEL_21;
            }
          }
          v15 = 0;
          v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_21;
      }
    }
    v20 = v22;
LABEL_21:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v14 = v20;
LABEL_22:
    result = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v18);
    v19 = result;
    if (!result)
      goto LABEL_40;
LABEL_23:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      v16 = a3;
LABEL_40:
      v13 = v28;
      v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void sub_18A6AB5FC()
{
  CKRecord.subscript.setter();
}

uint64_t sub_18A6AB60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1EDF6C908 + dword_1EDF6C908);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_18A6AB688;
  return v9(a1, a2, a3);
}

uint64_t sub_18A6AB688(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_18A6AB6D8()
{
  uint64_t v0;

  return sub_18A6AB6F8(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)()
{
  uint64_t v0;

  return sub_18A6AB6F8(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_18A6AB6F8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)()
{
  uint64_t v0;

  return sub_18A6AB6F8(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t CKNotification.subscriptionID.getter()
{
  void *v0;

  return sub_18A6AB720(v0);
}

uint64_t sub_18A6AB720(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_subscriptionID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t CKOperation.operationID.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_operationID);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_18A6AB7D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for TaskPriority();
  MEMORY[0x1E0C80A78](v2);
  sub_18A5F3E5C();
  static Task<>.currentPriority.getter();
  v3 = TaskPriority.rawValue.getter();
  sub_18A5F4668();
  if (__ROR8__(v3 - 9, 3) > 3uLL)
  {
    TaskPriority.init(rawValue:)();
    v4 = TaskPriority.rawValue.getter();
    sub_18A5F4668();
    if (v3 == v4)
    {
      if (qword_1ECD96788 != -1)
        swift_once();
      v5 = sub_18A5F3BA0();
      sub_18A60990C(v5, (uint64_t)qword_1ECD96770);
      v6 = v0;
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)sub_18A5F3830();
        v19 = sub_18A5F3830();
        *(_DWORD *)v9 = 136315138;
        v10 = objc_msgSend(v6, sel_operationID);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18A5F4598();
        sub_18A6A5844(v1, v11, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        sub_18A5F38AC();
        _os_log_impl(&dword_18A5C5000, v7, v8, "Not setting QoS on %s to TaskPriority.medium and instead relying on default NSOperation QoS behavior", v9, 0xCu);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

    }
    else
    {
      if (qword_1ECD96788 != -1)
        swift_once();
      v12 = sub_18A5F3BA0();
      sub_18A60990C(v12, (uint64_t)qword_1ECD96770);
      v13 = v0;
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = sub_18A5F3830();
        v19 = sub_18A5F3830();
        *(_DWORD *)v16 = 136315394;
        v17 = objc_msgSend(v13, sel_operationID);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18A5F4598();
        sub_18A6A5844(v1, v18, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        sub_18A5F38AC();
        *(_WORD *)(v16 + 12) = 256;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_18A5C5000, v14, v15, "Not setting QoS on %s for unknown task priority %hhu", (uint8_t *)v16, 0xFu);
        sub_18A5F38D8();
        sub_18A5F392C();
      }

    }
  }
  else
  {
    objc_msgSend(v0, sel_setQualityOfService_);
  }
  sub_18A5F37E8();
}

void sub_18A6ABB80()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_18A6ABBCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignpostIntervalStateWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18A6ABC10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter();
  sub_18A63DE4C(v4, qword_1EDF6A010);
  sub_18A60990C(v4, (uint64_t)qword_1EDF6A010);
  if (qword_1EDF6A050 != -1)
    swift_once();
  v5 = sub_18A60990C(v0, (uint64_t)qword_1EDF6A030);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

void CKOperationSignpostBegin(_:_:)(void *a1, const char *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  __CFString *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_signpost_id_t v61;
  uint64_t v62;
  objc_class *v63;
  char *v64;
  id v65;
  _QWORD v66[6];
  os_log_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  objc_super v77;

  v73 = (char *)a2;
  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  sub_18A6ACA20();
  MEMORY[0x1E0C80A78](v9);
  v72 = (char *)v66 - v10;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v66 - v12;
  v14 = type metadata accessor for OSSignposter();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  sub_18A5F3E5C();
  v18 = v17 - v16;
  if (qword_1EDF6A028 != -1)
    swift_once();
  v19 = sub_18A60990C(v14, (uint64_t)qword_1EDF6A010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v18, v19, v14);
  v20 = a1;
  static OSSignpostID.exclusive.getter();
  v21 = OSSignposter.logHandle.getter();
  v71 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_7;
  v67 = v21;
  v68 = v15;
  v69 = v14;
  v70 = v4;
  if ((a4 & 1) == 0)
  {
    if (!v73)
    {

      __break(1u);
LABEL_7:

      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v4, v13, v7);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      v62 = OSSignpostIntervalState.init(id:isOpen:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
      v63 = (objc_class *)type metadata accessor for SignpostIntervalStateWrapper();
      v64 = (char *)objc_allocWithZone(v63);
      *(_QWORD *)&v64[OBJC_IVAR____TtC8CloudKitP33_D874BC29987C0F9F89EC9BDAEEBD096F28SignpostIntervalStateWrapper_wrapped] = v62;
      v77.receiver = v64;
      v77.super_class = v63;
      swift_retain();
      v65 = objc_msgSendSuper2(&v77, sel_init);
      sub_18A76C8A0((uint64_t)v20, v65);
      swift_release();

      sub_18A5F37E8();
      return;
    }
LABEL_12:
    v22 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v66[5] = v7;
    v66[3] = v22;
    v22(v72, v13, v7);
    v23 = sub_18A5F3830();
    v24 = (_QWORD *)sub_18A5F3830();
    v25 = sub_18A5F3830();
    v66[2] = v25;
    v75 = v25;
    *(_DWORD *)v23 = 136316418;
    v26 = sub_18A64A4A0(v25, sel_operationID);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v74 = sub_18A6A5844(v27, v28, &v75);
    sub_18A6ACA10();

    v29 = sub_18A5F38AC();
    *(_WORD *)(v23 + 12) = 2112;
    v30 = sub_18A64A4A0(v29, sel_containerID);
    v74 = (uint64_t)v30;
    sub_18A6ACA10();
    v66[1] = v24;
    *v24 = v30;

    *(_WORD *)(v23 + 22) = 2080;
    v32 = sub_18A64A4A0(v31, sel_group);
    if (v32)
    {
      v33 = v32;
      v34 = objc_msgSend(v32, sel_operationGroupID);

      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

    }
    else
    {
      v37 = 0xE400000000000000;
      v35 = 1701736270;
    }
    v38 = sub_18A609924(v35, v37, &v75);
    sub_18A5F3C60(v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v39 = swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 32) = 2082;
    v40 = sub_18A64A4A0(v39, sel_group);
    v66[4] = v8;
    if (v40 && (sub_18A66BDC0(v40), v42))
    {
      v43 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      v43 = 0xE400000000000000;
      v41 = 1701736270;
    }
    v74 = sub_18A609924(v41, v43, &v75);
    sub_18A6ACA10();

    v44 = swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 42) = 2082;
    v45 = sub_18A64A4A0(v44, sel_operationInfo);
    v46 = objc_msgSend(v45, sel_discretionaryNetworkBehavior);

    v47 = (id)CKStringForDiscretionaryNetworkBehavior((unint64_t)v46);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    v51 = sub_18A609924(v48, v50, &v75);
    sub_18A5F3C60(v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v52 = swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 52) = 2082;
    v53 = sub_18A64A4A0(v52, sel_qualityOfService);
    v57 = CKStringForQOS((uint64_t)v53, v54, v55, v56);
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v60 = sub_18A6A5844(v58, v59, &v75);
    sub_18A5F3C60(v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    sub_18A5F38AC();
    v61 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_18A5C5000, v67, (os_signpost_type_t)v71, v61, v73, "ID: %{name=ID}s, Container: %{name=Container}@, GroupID: %{name=GroupID}s, GroupName: %{name=GroupName,public}s, Behavior: %{name=Behavior,public}s, QoS: %{name=QoS,public}s", (uint8_t *)v23, 0x3Eu);
    sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
    sub_18A5F38D8();
    sub_18A5F392C();
  }
  if ((unint64_t)v73 >> 32)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v73 >> 11 != 27)
  {
    if (v73 >> 16 <= 0x10)
    {
      v73 = &v76;
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

void CKOperationSignpostEnd(_:_:error:)(uint64_t a1, const char *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  NSObject *v5;
  const char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  os_signpost_id_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  os_signpost_id_t v44;
  os_log_t v45;
  int v46;
  int v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  NSObject *v57;
  _OWORD v58[2];
  _QWORD v59[5];

  v52 = (char *)a2;
  v9 = (const char *)type metadata accessor for OSSignpostError();
  v48 = *((_QWORD *)v9 - 1);
  v49 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v45 - v13;
  v15 = type metadata accessor for OSSignpostID();
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  MEMORY[0x1E0C80A78](v15);
  sub_18A6ACA20();
  MEMORY[0x1E0C80A78](v16);
  v50 = (char *)&v45 - v17;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v45 - v19;
  v21 = type metadata accessor for OSSignposter();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  sub_18A5F3E5C();
  v25 = v24 - v23;
  v51 = a1;
  if ((id)sub_18A76C88C(a1))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v58, 0, sizeof(v58));
  }
  sub_18A60B834((uint64_t)v58, (uint64_t)v59);
  if (!v59[3])
    goto LABEL_13;
  type metadata accessor for SignpostIntervalStateWrapper();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    if (qword_1ECD96788 != -1)
      swift_once();
    v29 = sub_18A5F3BA0();
    sub_18A60990C(v29, (uint64_t)qword_1ECD96770);
    v26 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v30))
    {
      v31 = (uint8_t *)sub_18A5F3830();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_18A5C5000, v26, v30, "Tried to end a signpost, but none was in effect", v31, 2u);
      sub_18A5F392C();
    }
    goto LABEL_43;
  }
  v26 = v57;
  if (a5)
  {
    v47 = a4;
    sub_18A5F3A84();
    if (qword_1EDF6A028 != -1)
      swift_once();
    v27 = sub_18A60990C(v21, (uint64_t)qword_1EDF6A010);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v25, v27, v21);
    sub_18A5F3A84();
    sub_18A5F3A84();
    v5 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v46 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v45 = v5;
      if ((v47 & 1) == 0)
      {
        v28 = v49;
        if (!v52)
        {
          sub_18A5F3F88();
          sub_18A5F3F88();
          __break(1u);
LABEL_13:
          sub_18A60B87C((uint64_t)v59);
          goto LABEL_14;
        }
LABEL_29:
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v34 = v48;
        if ((*(unsigned int (**)(char *, const char *))(v48 + 88))(v14, v28) == *MEMORY[0x1E0DF2190])
        {
          v35 = 0;
          v36 = 0;
          v49 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, const char *))(v34 + 8))(v14, v28);
          v49 = "Error: %{name=Error}@";
          v36 = 2;
          v35 = 1;
        }
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v20, v54);
        v37 = sub_18A5F3830();
        v38 = (_QWORD *)sub_18A5F3830();
        *(_BYTE *)v37 = v36;
        *(_BYTE *)(v37 + 1) = v35;
        *(_WORD *)(v37 + 2) = 2112;
        sub_18A5F3A84();
        v39 = _swift_stdlib_bridgeErrorToNSError();
        v59[0] = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v38 = v39;
        sub_18A5F3F88();
        sub_18A5F3F88();
        v40 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_18A5C5000, v45, (os_signpost_type_t)v46, v40, v52, v49, (uint8_t *)v37, 0xCu);
        sub_18A5F101C((uint64_t *)&unk_1EDF6A900);
        sub_18A5F38D8();
        sub_18A5F392C();
      }
      v28 = v49;
      if ((unint64_t)v52 >> 32)
      {
        __break(1u);
      }
      else
      {
        if (v52 >> 11 == 27)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (v52 >> 16 <= 0x10)
        {
          v52 = &v55;
          goto LABEL_29;
        }
      }
      __break(1u);
      goto LABEL_46;
    }
    goto LABEL_24;
  }
  v20 = (char *)a4;
  if (qword_1EDF6A028 != -1)
    swift_once();
  sub_18A60990C(v21, (uint64_t)qword_1EDF6A010);
  v32 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v25 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    (*(void (**)(NSObject *, uint64_t))(v53 + 8))(v5, v54);
    goto LABEL_42;
  }
  if ((a4 & 1) == 0)
  {
    v33 = v49;
    if (!v52)
    {
      __break(1u);
LABEL_24:

      sub_18A5F3F88();
      sub_18A5F3F88();
      sub_18A5F3F88();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v54);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
LABEL_42:
      sub_18A76C8A0(v51, 0);
LABEL_43:

      sub_18A5F37E8();
      return;
    }
LABEL_37:
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v41 = v48;
    if ((*(unsigned int (**)(char *, const char *))(v48 + 88))(v11, v33) == *MEMORY[0x1E0DF2190])
    {
      v42 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, const char *))(v41 + 8))(v11, v33);
      v42 = "";
    }
    v43 = (uint8_t *)sub_18A5F3830();
    *(_WORD *)v43 = 0;
    v44 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_18A5C5000, v32, (os_signpost_type_t)v25, v44, v52, v42, v43, 2u);
    sub_18A5F392C();
  }
  v33 = v49;
  if ((unint64_t)v52 >> 32)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v52 >> 11 != 27)
  {
    if (v52 >> 16 > 0x10)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v52 = &v56;
    goto LABEL_37;
  }
LABEL_49:
  __break(1u);
}

uint64_t type metadata accessor for SignpostIntervalStateWrapper()
{
  return objc_opt_self();
}

uint64_t sub_18A6ACA10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18A6ACA3C()
{
  uint64_t result;
  _BOOL4 v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  result = CKUseSystemInstalledBinariesFuncForSwift();
  v1 = __sTestOverridesAvailable == 0;
  v2 = (result & v1) == 0;
  if ((result & v1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0xD000000000000017;
  v4 = 0x800000018A840FC0;
  if (!v2)
    v4 = 0x800000018A840FE0;
  qword_1ECD96790 = v3;
  *(_QWORD *)algn_1ECD96798 = v4;
  return result;
}

uint64_t static __CKLogSubsystem.name.getter()
{
  uint64_t v0;

  if (qword_1ECD967A0 != -1)
    swift_once();
  v0 = qword_1ECD96790;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_18A6ACB08(uint64_t a1)
{
  return sub_18A5F4950(a1, qword_1ECD96770);
}

uint64_t sub_18A6ACB18(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C918);
}

uint64_t CKLogPCS.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB40, (uint64_t)qword_1EDF6C918, a1);
}

uint64_t sub_18A6ACB4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = sub_18A60990C(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_18A6ACBB4(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C930);
}

uint64_t CKLogSQL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB48, (uint64_t)qword_1EDF6C930, a1);
}

uint64_t sub_18A6ACBE8(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C948);
}

uint64_t CKLogStatus.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB50, (uint64_t)qword_1EDF6C948, a1);
}

uint64_t sub_18A6ACC1C(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C960);
}

uint64_t CKLogRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB58, (uint64_t)qword_1EDF6C960, a1);
}

uint64_t sub_18A6ACC58(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C978);
}

uint64_t CKLogMMCS.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB60, (uint64_t)qword_1EDF6C978, a1);
}

uint64_t sub_18A6ACC8C(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C990);
}

uint64_t CKLogAsset.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB68, (uint64_t)qword_1EDF6C990, a1);
}

uint64_t sub_18A6ACCC4(uint64_t a1)
{
  return sub_18A5F4950(a1, qword_1EDF6A030);
}

uint64_t CKLogOp.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6A050, (uint64_t)qword_1EDF6A030, a1);
}

uint64_t sub_18A6ACCF0(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C9A8);
}

uint64_t CKLogTrafficBinary.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(qword_1EDF6AB78, (uint64_t)qword_1EDF6C9A8, a1);
}

uint64_t sub_18A6ACD38(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF69220);
}

uint64_t CKLogTrafficCompressed.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(qword_1EDF69240, (uint64_t)qword_1EDF69220, a1);
}

uint64_t sub_18A6ACD78(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C9C0);
}

uint64_t CKLogLogStats.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB88, (uint64_t)qword_1EDF6C9C0, a1);
}

uint64_t sub_18A6ACDB4(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C9D8);
}

uint64_t CKLogScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6AB90, (uint64_t)qword_1EDF6C9D8, a1);
}

uint64_t sub_18A6ACDF4(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6C9F0);
}

uint64_t CKLogNotificationListener.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(qword_1EDF6AB98, (uint64_t)qword_1EDF6C9F0, a1);
}

uint64_t sub_18A6ACE34(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6A630);
}

uint64_t CKLogEngine.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6A540, (uint64_t)qword_1EDF6A630, a1);
}

uint64_t sub_18A6ACE6C(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6CA08);
}

uint64_t CKLogDataRepair.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6ABA8, (uint64_t)qword_1EDF6CA08, a1);
}

uint64_t sub_18A6ACEAC(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6CA20);
}

uint64_t CKLogDistributedSync.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6ABB0, (uint64_t)qword_1EDF6CA20, a1);
}

uint64_t sub_18A6ACEF4(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6CA38);
}

uint64_t CKLogDiscretionaryDaemon.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6ABB8, (uint64_t)qword_1EDF6CA38, a1);
}

uint64_t sub_18A6ACF34(uint64_t a1)
{
  return sub_18A6ACF58(a1, qword_1EDF6CA50);
}

uint64_t sub_18A6ACF58(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  sub_18A63DE4C(v3, a2);
  sub_18A60990C(v3, (uint64_t)a2);
  if (qword_1ECD967A0 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t CKLogMockServer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18A6ACB4C(&qword_1EDF6ABC0, (uint64_t)qword_1EDF6CA50, a1);
}

ValueMetadata *type metadata accessor for __CKLogSubsystem()
{
  return &type metadata for __CKLogSubsystem;
}

const __CFString *CKStringFromPartition(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown Partition Type");
  if (a1 == 1)
    v1 = CFSTR("Prod");
  if (a1 == 2)
    return CFSTR("Carry");
  else
    return v1;
}

const __CFString *CKStringFromDeviceToDeviceDataPrivacyStatus(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E1F5F6A0[a1];
}

void sub_18A6AD138(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uid_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v4;
    v7 = 134218240;
    v8 = v5;
    v9 = 1024;
    v10 = geteuid();
    _os_log_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_DEFAULT, "Setting the in-memory account info validation counter to %ld for uid %u", (uint8_t *)&v7, 0x12u);

  }
  qword_1ECD96A38 = *(_QWORD *)(a1 + 32);

}

void sub_18A6AD2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6AD2F0(uint64_t a1)
{
  uid_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  void *v10;
  NSObject *v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = geteuid();
  if (v2 == 501 || !v2)
  {
    if (__sTestOverridesAvailable)
      v6 = CFSTR("TEST_AccountInfoValidationCounter");
    else
      v6 = CFSTR("AccountInfoValidationCounter");
    v7 = (const __CFString *)objc_msgSend_suiteName(CKUserDefaults, v3, v4, v5);
    v8 = (const __CFNumber *)CFPreferencesCopyValue(v6, v7, CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
    if (v8)
    {
      v9 = v8;
      CFNumberGetValue(v8, kCFNumberNSIntegerType, &qword_1ECD96A38);
      CFRelease(v9);
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v10 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        v11 = v10;
        v12[0] = 67109120;
        v12[1] = geteuid();
        _os_log_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_INFO, "Could not fetch account info cache validation counter, running as user %u", (uint8_t *)v12, 8u);

      }
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = qword_1ECD96A38;
}

uint64_t sub_18A6AD468(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_invalidateCachedAccountInfo(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18A6AD470()
{
  NSObject *v0;
  uint8_t v1[16];

  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v0 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_18A5C5000, v0, OS_LOG_TYPE_FAULT, "Could not validate account info cache. (This is a potential performance issue.)", v1, 2u);
  }
}

void sub_18A6AD6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_18A6AD6DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_18A6AD8FC;
  v16[3] = &unk_1E1F5F618;
  v16[4] = &v17;
  CKOncePerBoot(CFSTR("AccountInfoValidationCounterReset"), v16);
  if (*((_BYTE *)v18 + 24))
  {
    v4 = 1;
  }
  else
  {
    if (__sTestOverridesAvailable)
      v5 = CFSTR("TEST_AccountInfoValidationCounter");
    else
      v5 = CFSTR("AccountInfoValidationCounter");
    v6 = v5;
    v9 = objc_msgSend_integerForKey_(v3, v7, (uint64_t)v6, v8);

    v4 = v9 + 1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (__sTestOverridesAvailable)
    v11 = CFSTR("TEST_AccountInfoValidationCounter");
  else
    v11 = CFSTR("AccountInfoValidationCounter");
  v12 = v11;
  objc_msgSend_setInteger_forKey_(v3, v13, v10, (uint64_t)v12);

  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v14 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *(_DWORD *)buf = 134217984;
    v22 = v15;
    _os_log_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_INFO, "Invalidated adopter account info caches. validationCounter: %zu", buf, 0xCu);
  }
  _Block_object_dispose(&v17, 8);

}

void sub_18A6AD8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6AD8FC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_18A6ADF0C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const __CFString *v6;
  const char *v7;
  uint64_t v8;
  const __CFString *v9;
  id v10;

  v3 = a2;
  if (__sTestOverridesAvailable)
    v6 = CFSTR("TEST_AccountInfoValidationCounter");
  else
    v6 = CFSTR("AccountInfoValidationCounter");
  v10 = v3;
  v8 = objc_msgSend_integerForKey_(v3, v4, (uint64_t)v6, v5);
  if (!v8)
  {
    if (__sTestOverridesAvailable)
      v9 = CFSTR("TEST_AccountInfoValidationCounter");
    else
      v9 = CFSTR("AccountInfoValidationCounter");
    v8 = 1;
    objc_msgSend_setInteger_forKey_(v10, v7, 1, (uint64_t)v9);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = v8;

}

void sub_18A6AE8F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A6AEA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A6AEA9C(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A6AEAC4(uint64_t a1)
{

}

void sub_18A6AEACC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6AF420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

id sub_18A6AF440(void *a1, objc_class *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  void *v11;
  objc_class *v12;
  void *v13;
  const char *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = a1;
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v16, (uint64_t)v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v3);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSStringFromClass(a2);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (objc_class *)objc_opt_class();
          NSStringFromClass(v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v14, (uint64_t)CFSTR("CKInternalErrorDomain"), 1017, CFSTR("Wrong class for %@: %@"), v11, v13, v16);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_11;
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v9, (uint64_t)&v16, (uint64_t)v20, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_11:

  return v10;
}

id sub_18A6AF5B4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v3 = a2;
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v73, (uint64_t)v77, 16);
  if (!v5)
  {
    v60 = 0;
    goto LABEL_33;
  }
  v9 = v5;
  v10 = *(_QWORD *)v74;
  v11 = &off_1E1F53000;
  v71 = a1;
  while (2)
  {
    v12 = 0;
    v72 = v9;
    do
    {
      if (*(_QWORD *)v74 != v10)
        objc_enumerationMutation(v3);
      v13 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * v12);
      v14 = *(void **)(a1 + 32);
      objc_msgSend_recordID(v13, v6, v7, v8);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v14, v16, (uint64_t)v15, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_fieldName(v13, v19, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v18, v23, (uint64_t)v22, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v26 = v13;
      else
        v26 = 0;
      v27 = v26;
      v31 = v27;
      if (v25)
      {
        if (v27)
        {
          if ((objc_msgSend_listIndex(v27, v28, v29, v30) & 0x8000000000000000) == 0)
          {
            if (objc_msgSend_count(v25, v28, v29, v30))
            {
              v35 = objc_msgSend_listIndex(v31, v32, v33, v34);
              if (!objc_msgSend_containsIndex_(v25, v36, v35, v37))
                goto LABEL_14;
              objc_msgSend_fieldName(v31, v28, v29, v30);
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              v70 = objc_msgSend_listIndex(v31, v65, v66, v67);
              objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v68, (uint64_t)CFSTR("CKInternalErrorDomain"), 1017, CFSTR("Duplicate metadata for field %@ and index %ld"), v62, v70);
            }
            else
            {
              objc_msgSend_fieldName(v31, v32, v33, v34);
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v64, (uint64_t)CFSTR("CKInternalErrorDomain"), 1017, CFSTR("Duplicate metadata for field %@"), v62);
            }
            v60 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_32:

            goto LABEL_33;
          }
          v61 = v13;
        }
        else
        {
          v61 = 0;
        }
        objc_msgSend_fieldName(v13, v28, v29, v30);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v63, (uint64_t)CFSTR("CKInternalErrorDomain"), 1017, CFSTR("Duplicate metadata for field %@"), v62);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v61;
        goto LABEL_32;
      }
LABEL_14:
      if (v18)
      {
        if (v25)
          goto LABEL_16;
      }
      else
      {
        objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v28, v29, v30);
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = v11;
        v40 = v10;
        v41 = *(void **)(a1 + 32);
        objc_msgSend_recordID(v13, v42, v43, v44);
        v45 = v3;
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v41;
        v10 = v40;
        v11 = v39;
        v18 = (void *)v38;
        v9 = v72;
        objc_msgSend_setObject_forKeyedSubscript_(v47, v48, (uint64_t)v18, (uint64_t)v46);

        v3 = v45;
        a1 = v71;
        if (v25)
        {
LABEL_16:
          if (!v31)
            goto LABEL_22;
          goto LABEL_20;
        }
      }
      objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v28, v29, v30);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fieldName(v13, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v18, v53, (uint64_t)v25, (uint64_t)v52);

      if (!v31)
        goto LABEL_22;
LABEL_20:
      if ((objc_msgSend_listIndex(v31, v28, v29, v30) & 0x8000000000000000) == 0)
      {
        v57 = objc_msgSend_listIndex(v31, v54, v55, v56);
        objc_msgSend_addIndex_(v25, v58, v57, v59);
      }
LABEL_22:

      ++v12;
    }
    while (v9 != v12);
    v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v6, (uint64_t)&v73, (uint64_t)v77, 16);
    v60 = 0;
    if (v9)
      continue;
    break;
  }
LABEL_33:

  return v60;
}

BOOL sub_18A6AF94C(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  const char *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _BOOL8 v10;
  NSObject *v11;
  id v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v14 = 0;
  v3 = *MEMORY[0x1E0C99998];
  v13 = 0;
  objc_msgSend_getResourceValue_forKey_error_(v2, v4, (uint64_t)&v14, v3, &v13);
  v5 = v14;
  v9 = v13;
  if (v5)
  {
    v10 = objc_msgSend_unsignedIntegerValue(v5, v6, v7, v8) == 0;
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v11 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v16 = v2;
      v17 = 2112;
      v18 = v9;
      _os_log_error_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_ERROR, "Could not get size for file %@: %@", buf, 0x16u);
    }
    v10 = 1;
  }

  return v10;
}

void sub_18A6AFA9C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v3 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v7 + 24))
  {
    *(_BYTE *)(v7 + 24) = 1;
  }
  else
  {
    v14 = v3;
    objc_msgSend_fileURL(v3, v4, v5, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 32);
      objc_msgSend_fileURL(v14, v8, v9, v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(uint64_t, void *))(v12 + 16))(v12, v13);

    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_size(v14, v8, v9, v10) == 0;
    }

    v3 = v14;
  }

}

id sub_18A6B27B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;

  sub_18A6B2B18(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v5, v6, a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_18A6B27F8(uint64_t a1)
{
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v3;
  __CFRunLoop *Current;
  const __CFString *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  RunLoopSource = CFUserNotificationCreateRunLoopSource((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFUserNotificationRef *)(a1 + 40), (CFUserNotificationCallBack)sub_18A6B29E0, 0);
  if (RunLoopSource)
  {
    v3 = RunLoopSource;
    Current = CFRunLoopGetCurrent();
    v5 = CFRunLoopCopyCurrentMode(Current);
    if (!v5)
      v5 = (const __CFString *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9B270]);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(id *)(a1 + 32);
    sub_18A6B2B18((uint64_t)v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = _Block_copy(v7);

    objc_msgSend_setObject_forKey_(v11, v13, (uint64_t)v12, v6);
    CFRunLoopAddSource(Current, v3, v5);
    CFRelease(v5);
    CFRelease(v3);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v14 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 40);
      v16 = 138412290;
      v17 = v15;
      _os_log_error_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_ERROR, "Couldn't schedule response for notification %@", (uint8_t *)&v16, 0xCu);
    }
    CFUserNotificationCancel(*(CFUserNotificationRef *)(a1 + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

void sub_18A6B29E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_18A6B27B8(a1, a2, a3, a4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v6)
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v6 + 16))(v6, a1, a2);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v12 = ck_log_facility_ck;
    v8 = os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v8)
    {
      v16 = 138412290;
      v17 = a1;
      _os_log_error_impl(&dword_18A5C5000, v12, OS_LOG_TYPE_ERROR, "No completion block for notification %@", (uint8_t *)&v16, 0xCu);
    }
  }
  sub_18A6B2B18(v8, v9, v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v13, v14, a1, v15);

}

uint64_t sub_18A6B2B04(uint64_t a1, const char *a2)
{
  return objc_msgSend_showUserNotification_withCompletionBlock_(CKUserNotificationUtilities, a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_18A6B2B18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = (void *)qword_1EDF75350;
  if (!qword_1EDF75350)
  {
    objc_msgSend_strongToStrongObjectsMapTable(MEMORY[0x1E0CB3748], a2, a3, a4);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)qword_1EDF75350;
    qword_1EDF75350 = v5;

    v4 = (void *)qword_1EDF75350;
  }
  return v4;
}

__CFString *CKSharingSummaryStringFromOptionsGroups(void *a1)
{
  id v1;
  const char *v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  int isEqualToString;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  char v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  char v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const __CFString *v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  char v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  int v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  int v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  int v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  __CFString *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __CFString *v120;
  __CFString *v121;
  CKException *v123;
  const char *v124;
  id v125;
  uint64_t v126;
  void *v127;
  char isSelected;
  uint64_t v129;
  __CFString *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v123 = [CKException alloc];
    v125 = (id)objc_msgSend_initWithName_format_(v123, v124, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Must specify non-nil optionsGroups"));
    objc_exception_throw(v125);
  }
  v3 = v1;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v131, (uint64_t)v135, 16);
  if (!v4)
  {
    v121 = &stru_1E1F66ED0;
    goto LABEL_45;
  }
  v8 = v4;
  v129 = 0;
  v130 = 0;
  v9 = 0;
  isSelected = 0;
  v10 = 0;
  v11 = *(_QWORD *)v132;
  v127 = v3;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v132 != v11)
        objc_enumerationMutation(v3);
      v13 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * i);
      objc_msgSend_identifier(v13, v5, v6, v7);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)CFSTR("CKSharingPermissionGroupID"), v16);

      if (isEqualToString)
      {
        v21 = v13;
        objc_msgSend_options(v21, v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend_count(v25, v26, v27, v28);

        objc_msgSend_selectedOptionIdentifier(v21, v29, v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend_isEqualToString_(v32, v33, (uint64_t)CFSTR("CKSharingPermissionViewOnlyOptionID"), v34);

        if ((v35 & 1) != 0)
        {
          v10 = CFSTR("RO");
        }
        else
        {
          objc_msgSend_selectedOptionIdentifier(v21, v36, v37, v38);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = objc_msgSend_isEqualToString_(v64, v65, (uint64_t)CFSTR("CKSharingPermissionCanMakeChangesOptionID"), v66);

          if ((v67 & 1) != 0)
          {
            v10 = CFSTR("RW");
          }
          else
          {
            objc_msgSend_selectedOptionIdentifier(v21, v68, v69, v70);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            v95 = objc_msgSend_isEqualToString_(v92, v93, (uint64_t)CFSTR("CKSharingPermissionMixedOptionID"), v94);

            if (v95)
              v10 = CFSTR("RO");
          }
        }
      }
      else
      {
        objc_msgSend_identifier(v13, v18, v19, v20);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_msgSend_isEqualToString_(v39, v40, (uint64_t)CFSTR("CKSharingWhoCanAccessGroupID"), v41);

        if (v42)
        {
          v21 = v13;
          objc_msgSend_options(v21, v46, v47, v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v129 = objc_msgSend_count(v49, v50, v51, v52);

          objc_msgSend_selectedOptionIdentifier(v21, v53, v54, v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = objc_msgSend_isEqualToString_(v56, v57, (uint64_t)CFSTR("CKSharingAccessAnyoneWithLinkOptionID"), v58);

          if ((v59 & 1) != 0)
          {
            v63 = CFSTR("anyone");
          }
          else
          {
            objc_msgSend_selectedOptionIdentifier(v21, v60, v61, v62);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            v91 = objc_msgSend_isEqualToString_(v88, v89, (uint64_t)CFSTR("CKSharingAccessSpecifiedRecipientsOnlyOptionID"), v90);

            v63 = v130;
            if (v91)
              v63 = CFSTR("invited");
          }
          v130 = (__CFString *)v63;
        }
        else
        {
          objc_msgSend_identifier(v13, v43, v44, v45);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = objc_msgSend_isEqualToString_(v71, v72, (uint64_t)CFSTR("CKSharingAllowOthersToInviteGroupID"), v73);

          if (!v74)
            continue;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v21 = v13;
            objc_msgSend_selectedOptionIdentifier(v21, v78, v79, v80);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend_isEqualToString_(v81, v82, (uint64_t)CFSTR("CKSharingAllowOthersToInviteOptionID"), v83) & 1) != 0)
            {
              v87 = 1;
            }
            else
            {
              objc_msgSend_selectedOptionIdentifier(v21, v84, v85, v86);
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              v87 = objc_msgSend_isEqualToString_(v110, v111, (uint64_t)CFSTR("CKSharingAllowOthersToInviteMixedOptionID"), v112);

              v3 = v127;
            }

            isSelected |= v87;
          }
          else
          {
            objc_msgSend_options(v13, v75, v76, v77);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_firstObject(v96, v97, v98, v99);
            v21 = (id)objc_claimAutoreleasedReturnValue();

            objc_msgSend_identifier(v21, v100, v101, v102);
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            v106 = objc_msgSend_isEqualToString_(v103, v104, (uint64_t)CFSTR("CKSharingAllowOthersToInviteOptionID"), v105);

            if (v106)
              isSelected = objc_msgSend_isSelected(v21, v107, v108, v109);
            v3 = v127;
          }
        }
      }

    }
    v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v131, (uint64_t)v135, 16);
  }
  while (v8);
  if (v9 == 1
    && v129 == 1
    && objc_msgSend_isEqualToString_(v10, v5, (uint64_t)CFSTR("RW"), v7)
    && objc_msgSend_isEqualToString_(v130, v5, (uint64_t)CFSTR("invited"), v7))
  {
    v113 = CFSTR("COLLABORATION_OPTIONS_SUMMARY_invited_RW_no_invite");
    if ((isSelected & 1) != 0)
      v113 = CFSTR("COLLABORATION_OPTIONS_SUMMARY_invited_RW_allow_invite");
    v120 = v113;
LABEL_43:
    CKLocalizedString(v120, &stru_1E1F66ED0, v114, v115, v116, v117, v118, v119, v126);
    v121 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v121 = &stru_1E1F66ED0;
    if (v130)
    {
      if (v10)
      {
        v126 = (uint64_t)v130;
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v5, (uint64_t)CFSTR("COLLABORATION_OPTIONS_SUMMARY_%@_%@"), v7);
        v120 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v120)
          goto LABEL_43;
      }
    }
  }
LABEL_45:

  return v121;
}

void sub_18A6B31A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6B3868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKSharingAccessTypeFromOptionsGroups(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  char isEqualToString;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  char v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  char v48;
  CKException *v50;
  const char *v51;
  void *v52;
  CKException *v53;
  const char *v54;
  CKException *v55;
  const char *v56;
  CKException *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  id v64;
  id obj;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v50 = [CKException alloc];
    v52 = (void *)objc_msgSend_initWithName_format_(v50, v51, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Must specify non-nil optionsGroups"));
    goto LABEL_26;
  }
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  obj = v1;
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v66, (uint64_t)v70, 16);
  if (!v3)
  {

    goto LABEL_24;
  }
  v7 = v3;
  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)v67;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v67 != v10)
        objc_enumerationMutation(obj);
      v12 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * i);
      objc_msgSend_identifier(v12, v4, v5, v6);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v13, v14, (uint64_t)CFSTR("CKSharingWhoCanAccessGroupID"), v15);

      if ((isEqualToString & 1) != 0)
      {
        v20 = v8;
        v8 = v12;
        v21 = v9;
      }
      else
      {
        objc_msgSend_identifier(v12, v17, v18, v19);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend_isEqualToString_(v22, v23, (uint64_t)CFSTR("CKSharingPermissionGroupID"), v24);

        v20 = v9;
        v21 = v12;
        if (!v25)
          continue;
      }
      v26 = v12;

      v9 = v21;
    }
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v66, (uint64_t)v70, 16);
  }
  while (v7);

  if (!v8)
  {
LABEL_24:
    v53 = [CKException alloc];
    v52 = (void *)objc_msgSend_initWithName_format_(v53, v54, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Could not find any access picker group in optionsGroups: %@"), obj);
    goto LABEL_26;
  }
  objc_msgSend_selectedOptionIdentifier(v8, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend_isEqualToString_(v30, v31, (uint64_t)CFSTR("CKSharingAccessAnyoneWithLinkOptionID"), v32);

  if (!v33)
  {
    v44 = 1;
    goto LABEL_21;
  }
  if (!v9)
  {
    v55 = [CKException alloc];
    v52 = (void *)objc_msgSend_initWithName_format_(v55, v56, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Could not find any permission picker group for anyone-with-link case optionsGroups: %@"), obj);
LABEL_26:
    objc_exception_throw(v52);
  }
  objc_msgSend_selectedOptionIdentifier(v9, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend_isEqualToString_(v37, v38, (uint64_t)CFSTR("CKSharingPermissionViewOnlyOptionID"), v39);

  if ((v40 & 1) != 0)
  {
    v44 = 2;
  }
  else
  {
    objc_msgSend_selectedOptionIdentifier(v9, v41, v42, v43);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_isEqualToString_(v45, v46, (uint64_t)CFSTR("CKSharingPermissionCanMakeChangesOptionID"), v47);

    if ((v48 & 1) == 0)
    {
      v57 = [CKException alloc];
      v58 = *MEMORY[0x1E0C99778];
      objc_msgSend_selectedOptionIdentifier(v9, v59, v60, v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = (id)objc_msgSend_initWithName_format_(v57, v63, v58, (uint64_t)CFSTR("Unknown permission group selected option %@ for anyone-with-link case optionsGroups: %@"), v62, obj);

      objc_exception_throw(v64);
    }
    v44 = 3;
  }
LABEL_21:

  return v44;
}

uint64_t CKSharingPermissionTypeFromOptionsGroups(void *a1)
{
  id v1;
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  char isEqualToString;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  char v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  char v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  char v38;
  CKException *v40;
  const char *v41;
  void *v42;
  CKException *v43;
  const char *v44;
  CKException *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v43 = [CKException alloc];
    v42 = (void *)objc_msgSend_initWithName_format_(v43, v44, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Must specify non-nil optionsGroups"));
LABEL_20:
    objc_exception_throw(v42);
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v2 = v1;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v53, (uint64_t)v57, 16);
  if (!v4)
    goto LABEL_10;
  v8 = v4;
  v9 = *(_QWORD *)v54;
LABEL_4:
  v10 = 0;
  while (1)
  {
    if (*(_QWORD *)v54 != v9)
      objc_enumerationMutation(v2);
    v11 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * v10);
    objc_msgSend_identifier(v11, v5, v6, v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v12, v13, (uint64_t)CFSTR("CKSharingPermissionGroupID"), v14);

    if ((isEqualToString & 1) != 0)
      break;
    if (v8 == ++v10)
    {
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v53, (uint64_t)v57, 16);
      if (!v8)
      {
LABEL_10:

        goto LABEL_18;
      }
      goto LABEL_4;
    }
  }
  v16 = v11;

  if (!v16)
  {
LABEL_18:
    v40 = [CKException alloc];
    v42 = (void *)objc_msgSend_initWithName_format_(v40, v41, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Could not find any permission picker group in optionsGroups: %@"), v2);
    goto LABEL_20;
  }
  objc_msgSend_selectedOptionIdentifier(v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)CFSTR("CKSharingPermissionViewOnlyOptionID"), v22);

  if ((v23 & 1) != 0)
  {
LABEL_16:
    v34 = 2;
    goto LABEL_17;
  }
  objc_msgSend_selectedOptionIdentifier(v16, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend_isEqualToString_(v27, v28, (uint64_t)CFSTR("CKSharingPermissionCanMakeChangesOptionID"), v29);

  if ((v30 & 1) == 0)
  {
    objc_msgSend_selectedOptionIdentifier(v16, v31, v32, v33);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend_isEqualToString_(v35, v36, (uint64_t)CFSTR("CKSharingPermissionMixedOptionID"), v37);

    if ((v38 & 1) == 0)
    {
      v45 = [CKException alloc];
      v46 = *MEMORY[0x1E0C99778];
      objc_msgSend_selectedOptionIdentifier(v16, v47, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = (id)objc_msgSend_initWithName_format_(v45, v51, v46, (uint64_t)CFSTR("Unknown permission group selected option %@ for optionsGroups: %@"), v50, v2, (_QWORD)v53);

      objc_exception_throw(v52);
    }
    goto LABEL_16;
  }
  v34 = 3;
LABEL_17:

  return v34;
}

uint64_t CKSharingAllowOthersToInviteFromOptionsGroups(void *a1)
{
  id v1;
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  int isEqualToString;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t isSelected;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  char v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  char v62;
  CKException *v64;
  const char *v65;
  id v66;
  CKException *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  void *v74;
  id v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v64 = [CKException alloc];
    v66 = (id)objc_msgSend_initWithName_format_(v64, v65, *MEMORY[0x1E0C99778], (uint64_t)CFSTR("Must specify non-nil optionsGroups"));
    objc_exception_throw(v66);
  }
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v2 = v1;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v79, (uint64_t)v83, 16);
  if (v4)
  {
    v8 = v4;
    v9 = *(_QWORD *)v80;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v80 != v9)
          objc_enumerationMutation(v2);
        v11 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * i);
        objc_msgSend_identifier(v11, v5, v6, v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v12, v13, (uint64_t)CFSTR("CKSharingAllowOthersToInviteGroupID"), v14);

        if (isEqualToString)
        {
          v16 = v11;
          goto LABEL_12;
        }
      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v79, (uint64_t)v83, 16);
      if (v8)
        continue;
      break;
    }
  }
  v16 = 0;
LABEL_12:

  objc_msgSend_options(v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  isSelected = objc_msgSend_count(v20, v21, v22, v23);

  if (isSelected)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v28 = v16;
      objc_msgSend_selectedOptionIdentifier(v28, v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isEqualToString_(v32, v33, (uint64_t)CFSTR("CKSharingAllowOthersToInviteOptionID"), v34))
      {

LABEL_19:
        isSelected = 1;
        goto LABEL_22;
      }
      objc_msgSend_selectedOptionIdentifier(v28, v35, v36, v37);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = objc_msgSend_isEqualToString_(v52, v53, (uint64_t)CFSTR("CKSharingAllowOthersToInviteMixedOptionID"), v54);

      if ((v55 & 1) != 0)
        goto LABEL_19;
      objc_msgSend_selectedOptionIdentifier(v28, v56, v57, v58);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v62 = objc_msgSend_isEqualToString_(v59, v60, (uint64_t)CFSTR("CKSharingOnlyYouCanInviteOthersOptionID"), v61);

      if ((v62 & 1) != 0)
      {
        isSelected = 0;
        goto LABEL_22;
      }
      v67 = [CKException alloc];
      v68 = *MEMORY[0x1E0C99778];
      objc_msgSend_selectedOptionIdentifier(v28, v76, v77, v78);
      v72 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend_options(v16, v25, v26, v27);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_firstObject(v38, v39, v40, v41);
      v28 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend_identifier(v28, v42, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend_isEqualToString_(v45, v46, (uint64_t)CFSTR("CKSharingAllowOthersToInviteOptionID"), v47);

      if (v48)
      {
        isSelected = objc_msgSend_isSelected(v28, v49, v50, v51);
LABEL_22:

        goto LABEL_23;
      }
      v67 = [CKException alloc];
      v68 = *MEMORY[0x1E0C99778];
      objc_msgSend_identifier(v28, v69, v70, v71);
      v72 = objc_claimAutoreleasedReturnValue();
    }
    v74 = (void *)v72;
    v75 = (id)objc_msgSend_initWithName_format_(v67, v73, v68, (uint64_t)CFSTR("Unknown admin group selection option %@ for optionsGroups: %@"), v72, v2, (_QWORD)v79);

    objc_exception_throw(v75);
  }
LABEL_23:

  return isSelected;
}

void sub_18A6B545C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  id v16;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)MEMORY[0x1E0CB36B8];
  v4 = a2;
  v8 = objc_msgSend_clockValue(v4, v5, v6, v7);
  objc_msgSend_indexSetWithIndex_(v3, v9, v8, v10);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_siteIdentifierObject(v4, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v2, v15, (uint64_t)v16, 1, v14);
}

void sub_18A6B5744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B575C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;

  if ((a6 - 1) <= 1)
  {
    v10 = *(void **)(a1 + 32);
    v11 = a2;
    objc_msgSend_vector(v10, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_indexSetWithIndexesInRange_(MEMORY[0x1E0CB36B8], v16, a3, a4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addClockValuesInIndexSet_withClockType_atomState_forSiteIdentifier_(v15, v18, (uint64_t)v17, a5, *(unsigned __int8 *)(a1 + 48), v11);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a4;
  }
}

void sub_18A6B5CD8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  objc_msgSend_vector(*(void **)(a1 + 32), v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_atomStateForTimestamp_(v6, v7, (uint64_t)v12, v8);

  if (v9 == 3)
    objc_msgSend_addObject_(*(void **)(a1 + 40), v10, (uint64_t)v12, v11);

}

void sub_18A6B5D44(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  id v24;

  v24 = a2;
  objc_msgSend_vector(*(void **)(a1 + 32), v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_atomStateForTimestamp_(v6, v7, (uint64_t)v24, v8);

  if (v9 == 2)
  {
    v13 = *(void **)(a1 + 40);
    v14 = (void *)MEMORY[0x1E0CB36B8];
    v15 = objc_msgSend_clockValue(v24, v10, v11, v12);
    objc_msgSend_indexSetWithIndex_(v14, v16, v15, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifierObject(v24, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v13, v23, (uint64_t)v18, 1, v22);

  }
}

void sub_18A6B62B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6B62C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6B62D8(uint64_t a1)
{

}

void sub_18A6B62E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, (uint64_t)CFSTR("LastFetchedDate"), a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_18A6B6320(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error getting next fetch date: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B64B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B64D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, (uint64_t)CFSTR("CurrentUser"), a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = objc_opt_class();
    v12 = 0;
    objc_msgSend_unarchivedObjectOfClass_fromData_error_(v6, v8, v7, (uint64_t)v5, &v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v12;
    if (v10)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v11 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v10;
        _os_log_error_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_ERROR, "Error unarchiving current user: %@", buf, 0xCu);
      }
    }
    else
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v9);
    }

  }
}

void sub_18A6B6628(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error getting current user: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B6874(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  dispatch_once_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  dispatch_once_t *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint32_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[4];
  id v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v51 = a2;
  objc_msgSend_objectForKeyedSubscript_(v51, v3, (uint64_t)CFSTR("MissingAsset"), v4);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v48, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = (void *)objc_opt_new();
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v9 = v8;
  v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v54, (uint64_t)v60, 16);
  if (v52)
  {
    v11 = *(_QWORD *)v55;
    v12 = &ck_log_initialization_predicate;
    v50 = *(_QWORD *)v55;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v55 != v11)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * v13);
        v15 = *(void **)(a1 + 32);
        v16 = objc_opt_class();
        v53 = 0;
        objc_msgSend_unarchivedObjectOfClass_fromData_error_(v15, v17, v16, v14, &v53);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = v53;
        if (v21)
        {
          if (*v12 != -1)
            dispatch_once(v12, ck_log_initialization_block);
          v22 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v59 = v21;
            v42 = v22;
            v43 = "Asset metadata decoding error: %@";
            v44 = 12;
            goto LABEL_20;
          }
        }
        else if (v18)
        {
          objc_msgSend_objectForKeyedSubscript_(v51, v19, (uint64_t)CFSTR("Unrecoverable"), v20);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_repairZoneRecordID(v18, v25, v26, v27);
          v28 = a1;
          v29 = v9;
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_recordName(v30, v31, v32, v33);
          v34 = v12;
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKey_(v24, v36, (uint64_t)v35, v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          v12 = v34;
          v9 = v29;
          a1 = v28;
          v11 = v50;

          if (!v38)
            objc_msgSend_addObject_(v49, v39, (uint64_t)v18, v40);
        }
        else
        {
          if (*v12 != -1)
            dispatch_once(v12, ck_log_initialization_block);
          v41 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v42 = v41;
            v43 = "Asset metadata is nil";
            v44 = 2;
LABEL_20:
            _os_log_error_impl(&dword_18A5C5000, v42, OS_LOG_TYPE_ERROR, v43, buf, v44);
          }
        }

        ++v13;
      }
      while (v52 != v13);
      v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v23, (uint64_t)&v54, (uint64_t)v60, 16);
      v52 = v45;
    }
    while (v45);
  }

  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v47 = *(void **)(v46 + 40);
  *(_QWORD *)(v46 + 40) = v49;

}

void sub_18A6B6BA4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading asset repair metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B6DF0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __objc2_class **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  __objc2_class **v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  id obj;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  id v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v46 = a2;
  objc_msgSend_objectForKeyedSubscript_(v46, v3, (uint64_t)CFSTR("MissingPackage"), v4);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v43, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = (void *)objc_opt_new();
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  obj = v8;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v49, (uint64_t)v55, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v50;
    v13 = off_1E1F54000;
    v45 = a1;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v50 != v12)
          objc_enumerationMutation(obj);
        v15 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * v14);
        v16 = *(void **)(a1 + 32);
        v17 = objc_opt_class();
        v48 = 0;
        objc_msgSend_unarchivedObjectOfClass_fromData_error_(v16, v18, v17, v15, &v48);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v48;
        if (v22)
        {
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v23 = ck_log_facility_data_repair;
          if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v54 = v22;
            _os_log_error_impl(&dword_18A5C5000, v23, OS_LOG_TYPE_ERROR, "Package metadata decoding error: %@", buf, 0xCu);
          }
        }
        else
        {
          objc_msgSend_objectForKeyedSubscript_(v46, v20, (uint64_t)CFSTR("Unrecoverable"), v21);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_repairZoneRecordID(v19, v25, v26, v27);
          v28 = v13;
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_recordName(v29, v30, v31, v32);
          v33 = v12;
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKey_(v24, v35, (uint64_t)v34, v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          v12 = v33;
          v13 = v28;
          a1 = v45;

          if (!v37)
            objc_msgSend_addObject_(v44, v38, (uint64_t)v19, v39);
        }

        ++v14;
      }
      while (v11 != v14);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v49, (uint64_t)v55, 16);
    }
    while (v11);
  }

  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v42 = *(void **)(v41 + 40);
  *(_QWORD *)(v41 + 40) = v44;

}

void sub_18A6B70A8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading package repair metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B72B4(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[4];
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_objectForKeyedSubscript_(v3, v4, (uint64_t)CFSTR("Unrecoverable"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v6, v7, a1[4], v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend_objectForKeyedSubscript_(v3, v10, (uint64_t)CFSTR("MissingAsset"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v3, v13, (uint64_t)CFSTR("MissingPackage"), v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v12, v16, a1[4], v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = a1[4];
    if (v18)
    {
      objc_msgSend_objectForKeyedSubscript_(v12, v19, v21, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = (void *)a1[5];
      v24 = objc_opt_class();
      v25 = (id *)&v36;
      objc_msgSend_unarchivedObjectOfClass_fromData_error_(v23, v26, v24, (uint64_t)v22, &v36, v35, 0);
    }
    else
    {
      objc_msgSend_objectForKeyedSubscript_(v15, v19, v21, v20);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v27)
        goto LABEL_11;
      objc_msgSend_objectForKeyedSubscript_(v15, v28, a1[4], v29);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = (void *)a1[5];
      v31 = objc_opt_class();
      v25 = (id *)&v35;
      objc_msgSend_unarchivedObjectOfClass_fromData_error_(v30, v32, v31, (uint64_t)v22, &v35, 0, v36);
    }
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = *v25;

    if (v33)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v34 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v38 = v33;
        _os_log_error_impl(&dword_18A5C5000, v34, OS_LOG_TYPE_ERROR, "Metadata decoding error: %@", buf, 0xCu);
      }
      goto LABEL_12;
    }
LABEL_11:
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v27);
    v33 = 0;
LABEL_12:

  }
}

void sub_18A6B7504(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138543618;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error reading metadata for record %{public}@: %@", (uint8_t *)&v6, 0x16u);
    }
  }

}

BOOL sub_18A6B7734(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend_objectForKeyedSubscript_(v2, v4, (uint64_t)CFSTR("Unrecoverable"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v6, v7, (uint64_t)v3, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9 == 0;
}

uint64_t sub_18A6B77A0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend_objectForKeyedSubscript_(v5, v7, a2, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v10, (uint64_t)v6, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_msgSend_compare_(v9, v13, (uint64_t)v12, v14);
  return v15;
}

void sub_18A6B799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B79B4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;

  v27 = a2;
  objc_msgSend_objectForKeyedSubscript_(v27, v3, (uint64_t)CFSTR("Scheduler"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortedDelayedSyncRecordsForDatabase_(*(void **)(a1 + 32), v6, (uint64_t)v27, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  if (objc_msgSend_count(v8, v9, v10, v11))
  {
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v8, v12, v14, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v5, v16, (uint64_t)v15, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = objc_msgSend_compare_(v18, v19, *(_QWORD *)(a1 + 40), v20);
      if (v21 == 1)
        break;
      ++v14;
    }
    while (v14 < objc_msgSend_count(v8, v12, v22, v23));
  }
  objc_msgSend_subarrayWithRange_(v8, v12, 0, v14);
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v26 = *(void **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = v24;

}

void sub_18A6B7AB4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities before date: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B7C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B7C90(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;

  v28 = a2;
  objc_msgSend_objectForKeyedSubscript_(v28, v3, (uint64_t)CFSTR("Scheduler"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortedDelayedSyncRecordsForDatabase_(*(void **)(a1 + 32), v6, (uint64_t)v28, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  if (objc_msgSend_count(v8, v9, v10, v11))
  {
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v8, v12, v15, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v5, v17, (uint64_t)v16, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v22 = objc_msgSend_compare_(v19, v20, *(_QWORD *)(a1 + 40), v21);
      if (v22 == 1)
        break;
      ++v15;
    }
    while (v15 < objc_msgSend_count(v8, v12, v13, v14));
  }
  v23 = objc_msgSend_count(v8, v12, v13, v14);
  objc_msgSend_subarrayWithRange_(v8, v24, v15, v23 - v15);
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v27 = *(void **)(v26 + 40);
  *(_QWORD *)(v26 + 40) = v25;

}

void sub_18A6B7D98(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities after date: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B7FDC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  v17 = a2;
  objc_msgSend_objectForKeyedSubscript_(v17, v3, (uint64_t)CFSTR("Unrecoverable"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v5, v6, *(_QWORD *)(a1 + 32), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    objc_msgSend_objectForKeyedSubscript_(v17, v9, (uint64_t)CFSTR("Scheduler"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v11, v12, *(_QWORD *)(a1 + 32), v13);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
}

void sub_18A6B8080(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities for fetching record date: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B8234(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v18 = a2;
  objc_msgSend_objectForKeyedSubscript_(v18, v3, (uint64_t)CFSTR("Unrecoverable"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v5, v6, *(_QWORD *)(a1 + 32), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    objc_msgSend_objectForKeyedSubscript_(v18, v9, (uint64_t)CFSTR("SchedulerCount"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v11, v12, *(_QWORD *)(a1 + 32), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_integerValue(v14, v15, v16, v17);

  }
}

void sub_18A6B82DC(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading scheduled activities for fetching record count: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6B8474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6B848C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, (uint64_t)CFSTR("SyncEngineMetadata"), a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_18A6B84CC(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading sync engine metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

id sub_18A6B8630(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;

  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v6, *(_QWORD *)(a1 + 32), (uint64_t)CFSTR("LastFetchedDate"));
  return v5;
}

void sub_18A6B866C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error setting next fetch date: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

id sub_18A6B87D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;
  NSObject *v12;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v14 = 0;
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], v6, v8, 1, &v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v14;
    if (v11)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v12 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v11;
        _os_log_error_impl(&dword_18A5C5000, v12, OS_LOG_TYPE_ERROR, "Error archiving current user: %@", buf, 0xCu);
      }
    }
    else
    {
      objc_msgSend_setObject_forKeyedSubscript_(v7, v10, (uint64_t)v9, (uint64_t)CFSTR("CurrentUser"));
    }

  }
  else
  {
    objc_msgSend_setObject_forKeyedSubscript_(v5, v6, 0, (uint64_t)CFSTR("CurrentUser"));
  }
  return v7;
}

void sub_18A6B8924(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error setting current user: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

id sub_18A6B8AB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  int isEqualToString;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  void *v88;
  NSObject *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  char isEqual;
  void *v99;
  id v100;
  uint8_t buf[4];
  void *v102;
  __int16 v103;
  id v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_recordType(*(void **)(a1 + 32), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v9, v10, (uint64_t)CFSTR("MissingAsset"), v11))
  {

    goto LABEL_4;
  }
  objc_msgSend_recordType(*(void **)(a1 + 32), v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v15, v16, (uint64_t)CFSTR("MissingPackage"), v17);

  if (isEqualToString)
  {
LABEL_4:
    v19 = (void *)objc_opt_class();
    objc_msgSend_repairRecordToMetadata_(v19, v20, *(_QWORD *)(a1 + 32), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v100 = 0;
    objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], v23, (uint64_t)v22, 1, &v100);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v100;
    if (v28)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v29 = (void *)ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
      {
        v30 = *(void **)(a1 + 32);
        v31 = v29;
        objc_msgSend_recordID(v30, v32, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v102 = v35;
        v103 = 2112;
        v104 = v28;
        _os_log_error_impl(&dword_18A5C5000, v31, OS_LOG_TYPE_ERROR, "Error encoding repair record %@: %@", buf, 0x16u);

      }
      goto LABEL_21;
    }
    objc_msgSend_recordType(*(void **)(a1 + 32), v25, v26, v27);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v5, v37, (uint64_t)v36, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = v39;
    if (!v39)
      v39 = (void *)MEMORY[0x1E0C9AA70];
    v44 = (void *)objc_msgSend_mutableCopy(v39, v40, v41, v42);

    objc_msgSend_recordID(*(void **)(a1 + 32), v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordName(v48, v49, v50, v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v44, v53, (uint64_t)v52, v54);
    v55 = objc_claimAutoreleasedReturnValue();
    if (v55)
    {
      v59 = (void *)v55;
      objc_msgSend_recordID(*(void **)(a1 + 32), v56, v57, v58);
      v99 = v22;
      v60 = v5;
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordName(v61, v62, v63, v64);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v44, v66, (uint64_t)v65, v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      isEqual = objc_msgSend_isEqual_(v24, v69, (uint64_t)v68, v70);

      v5 = v60;
      v22 = v99;

      v71 = v44;
      if ((isEqual & 1) != 0)
      {
LABEL_20:

        v28 = 0;
LABEL_21:

        return v5;
      }
    }
    else
    {

      v71 = v44;
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v72 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      v88 = *(void **)(a1 + 32);
      v89 = v72;
      objc_msgSend_recordType(v88, v90, v91, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordID(*(void **)(a1 + 32), v94, v95, v96);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v102 = v93;
      v103 = 2112;
      v104 = v97;
      _os_log_debug_impl(&dword_18A5C5000, v89, OS_LOG_TYPE_DEBUG, "Persisting %{public}@ record %@", buf, 0x16u);

    }
    objc_msgSend_recordID(*(void **)(a1 + 32), v73, v74, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_recordName(v76, v77, v78, v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v71, v81, (uint64_t)v24, (uint64_t)v80);

    objc_msgSend_recordType(*(void **)(a1 + 32), v82, v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v5, v86, (uint64_t)v71, (uint64_t)v85);

    goto LABEL_20;
  }
  return v5;
}

void sub_18A6B8EC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v5 = *(void **)(a1 + 32);
      v6 = v4;
      objc_msgSend_recordID(v5, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412546;
      v12 = v10;
      v13 = 2112;
      v14 = v3;
      _os_log_error_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_ERROR, "Error saving repair record %@: %@", (uint8_t *)&v11, 0x16u);

    }
  }

}

id sub_18A6B9098(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  __CFString *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  __CFString *v27;
  __CFString *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  v6 = CFSTR("MissingAsset");
  objc_msgSend_objectForKeyedSubscript_(v5, v7, (uint64_t)CFSTR("MissingAsset"), v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordName(*(void **)(a1 + 32), v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v9, v14, (uint64_t)v13, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
    goto LABEL_18;
  v6 = CFSTR("MissingPackage");
  objc_msgSend_objectForKeyedSubscript_(v5, v17, (uint64_t)CFSTR("MissingPackage"), v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_recordName(*(void **)(a1 + 32), v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v19, v24, (uint64_t)v23, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
LABEL_18:
    v27 = v6;
    if (v27)
    {
      v28 = v27;
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v29 = ck_log_facility_data_repair;
      if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
      {
        v113 = *(_QWORD *)(a1 + 32);
        v114 = 138412290;
        v115 = v113;
        _os_log_debug_impl(&dword_18A5C5000, v29, OS_LOG_TYPE_DEBUG, "Deleting repair record %@", (uint8_t *)&v114, 0xCu);
      }
      objc_msgSend_objectForKeyedSubscript_(v5, v30, (uint64_t)v28, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = (void *)objc_msgSend_mutableCopy(v32, v33, v34, v35);

      objc_msgSend_recordName(*(void **)(a1 + 32), v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removeObjectForKey_(v36, v41, (uint64_t)v40, v42);

      objc_msgSend_setObject_forKeyedSubscript_(v5, v43, (uint64_t)v36, (uint64_t)v28);
      objc_msgSend_objectForKeyedSubscript_(v5, v44, (uint64_t)CFSTR("Scheduler"), v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordName(*(void **)(a1 + 32), v47, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKey_(v46, v51, (uint64_t)v50, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();

      if (v53)
      {
        objc_msgSend_objectForKeyedSubscript_(v5, v54, (uint64_t)CFSTR("Scheduler"), v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = (void *)objc_msgSend_mutableCopy(v56, v57, v58, v59);

        objc_msgSend_recordName(*(void **)(a1 + 32), v61, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectForKey_(v60, v65, (uint64_t)v64, v66);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v67, (uint64_t)v60, (uint64_t)CFSTR("Scheduler"));
      }
      objc_msgSend_objectForKeyedSubscript_(v5, v54, (uint64_t)CFSTR("SchedulerCount"), v55);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordName(*(void **)(a1 + 32), v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKey_(v68, v73, (uint64_t)v72, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();

      if (v75)
      {
        objc_msgSend_objectForKeyedSubscript_(v5, v76, (uint64_t)CFSTR("SchedulerCount"), v77);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = (void *)objc_msgSend_mutableCopy(v78, v79, v80, v81);

        objc_msgSend_recordName(*(void **)(a1 + 32), v83, v84, v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectForKey_(v82, v87, (uint64_t)v86, v88);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v89, (uint64_t)v82, (uint64_t)CFSTR("SchedulerCount"));
      }
      objc_msgSend_objectForKeyedSubscript_(v5, v76, (uint64_t)CFSTR("Unrecoverable"), v77);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_recordName(*(void **)(a1 + 32), v91, v92, v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKey_(v90, v95, (uint64_t)v94, v96);
      v97 = (void *)objc_claimAutoreleasedReturnValue();

      if (v97)
      {
        objc_msgSend_objectForKeyedSubscript_(v5, v98, (uint64_t)CFSTR("Unrecoverable"), v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        v104 = (void *)objc_msgSend_mutableCopy(v100, v101, v102, v103);

        objc_msgSend_recordName(*(void **)(a1 + 32), v105, v106, v107);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_removeObjectForKey_(v104, v109, (uint64_t)v108, v110);

        objc_msgSend_setObject_forKeyedSubscript_(v5, v111, (uint64_t)v104, (uint64_t)CFSTR("Unrecoverable"));
      }

    }
  }
  return v5;
}

void sub_18A6B9498(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error deleting repair record %@: %@", (uint8_t *)&v6, 0x16u);
    }
  }

}

id sub_18A6B95AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;

  v4 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v5, 0, (uint64_t)CFSTR("MissingAsset"));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v6, 0, (uint64_t)CFSTR("MissingPackage"));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v7, 0, (uint64_t)CFSTR("Scheduler"));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v8, 0, (uint64_t)CFSTR("SchedulerCount"));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v9, 0, (uint64_t)CFSTR("Unrecoverable"));
  return v4;
}

void sub_18A6B963C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error clearing repair records: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

id sub_18A6B980C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  const char *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  const char *v57;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("Scheduler"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v8, v9, v10, v11);
  v16 = v12;
  if (v12)
  {
    v17 = v12;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v13, v14, v15);
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;

  objc_msgSend_objectForKeyedSubscript_(v18, v19, *(_QWORD *)(a1 + 32), v20);
  v21 = objc_claimAutoreleasedReturnValue();
  if (!v21
    || (v24 = (void *)v21,
        v25 = *(void **)(a1 + 40),
        objc_msgSend_objectForKeyedSubscript_(v18, v22, *(_QWORD *)(a1 + 32), v23),
        v26 = (void *)objc_claimAutoreleasedReturnValue(),
        LOBYTE(v25) = objc_msgSend_isEqual_(v25, v27, (uint64_t)v26, v28),
        v26,
        v24,
        (v25 & 1) == 0))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v31 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      v59 = *(_QWORD *)(a1 + 32);
      v60 = *(_QWORD *)(a1 + 40);
      v61 = 138543618;
      v62 = v59;
      v63 = 2114;
      v64 = v60;
      _os_log_debug_impl(&dword_18A5C5000, v31, OS_LOG_TYPE_DEBUG, "Persisting delayed sync for record %{public}@ with date %{public}@", (uint8_t *)&v61, 0x16u);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v18, v32, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    objc_msgSend_setObject_forKeyedSubscript_(v5, v33, (uint64_t)v18, (uint64_t)CFSTR("Scheduler"));
  }
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend_objectForKeyedSubscript_(v5, v29, (uint64_t)CFSTR("SchedulerCount"), v30);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)objc_msgSend_mutableCopy(v34, v35, v36, v37);
    v42 = v38;
    if (v38)
    {
      v43 = v38;
    }
    else
    {
      objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v39, v40, v41);
      v43 = (id)objc_claimAutoreleasedReturnValue();
    }
    v44 = v43;

    v45 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_objectForKeyedSubscript_(v44, v46, *(_QWORD *)(a1 + 32), v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend_integerValue(v48, v49, v50, v51);
    objc_msgSend_numberWithInteger_(v45, v53, v52 + 1, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v44, v56, (uint64_t)v55, *(_QWORD *)(a1 + 32));

    objc_msgSend_setObject_forKeyedSubscript_(v5, v57, (uint64_t)v44, (uint64_t)CFSTR("SchedulerCount"));
  }

  return v5;
}

void sub_18A6B9A74(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138543618;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error saving delayed sync for record %{public}@: %@", (uint8_t *)&v6, 0x16u);
    }
  }

}

id sub_18A6B9C24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("Scheduler"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v8, v9, v10, v11);
  v16 = v12;
  if (v12)
  {
    v17 = v12;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v13, v14, v15);
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;

  objc_msgSend_objectForKeyedSubscript_(v5, v19, (uint64_t)CFSTR("SchedulerCount"), v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = (void *)objc_msgSend_mutableCopy(v21, v22, v23, v24);
  v29 = v25;
  if (v25)
  {
    v30 = v25;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v26, v27, v28);
    v30 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31 = v30;

  objc_msgSend_objectForKeyedSubscript_(v18, v32, *(_QWORD *)(a1 + 32), v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  if (v34)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v35 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
    {
      v43 = *(_QWORD *)(a1 + 32);
      v44 = 138543362;
      v45 = v43;
      _os_log_debug_impl(&dword_18A5C5000, v35, OS_LOG_TYPE_DEBUG, "Deleting delayed sync for record %{public}@", (uint8_t *)&v44, 0xCu);
    }
    objc_msgSend_removeObjectForKey_(v18, v36, *(_QWORD *)(a1 + 32), v37);
    objc_msgSend_removeObjectForKey_(v31, v38, *(_QWORD *)(a1 + 32), v39);
    objc_msgSend_setObject_forKeyedSubscript_(v5, v40, (uint64_t)v18, (uint64_t)CFSTR("Scheduler"));
    objc_msgSend_setObject_forKeyedSubscript_(v5, v41, (uint64_t)v31, (uint64_t)CFSTR("SchedulerCount"));
  }

  return v5;
}

void sub_18A6B9E0C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138543618;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error deleting delayed sync for record %{public}@: %@", (uint8_t *)&v6, 0x16u);
    }
  }

}

id sub_18A6B9F20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  const char *v6;

  v4 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v5, 0, (uint64_t)CFSTR("Scheduler"));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v6, 0, (uint64_t)CFSTR("SchedulerCount"));
  return v4;
}

void sub_18A6B9F6C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error clearing scheduled activities: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

id sub_18A6BA100(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  const char *v16;
  const char *v17;

  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("Unrecoverable"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v8, v9, v10, v11);
  v13 = v12;
  if (v12)
    v14 = v12;
  else
    v14 = (id)objc_opt_new();
  v15 = v14;

  objc_msgSend_setObject_forKeyedSubscript_(v15, v16, MEMORY[0x1E0C9AAB0], *(_QWORD *)(a1 + 32));
  objc_msgSend_setObject_forKeyedSubscript_(v5, v17, (uint64_t)v15, (uint64_t)CFSTR("Unrecoverable"));

  return v5;
}

void sub_18A6BA1A8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138543618;
      v7 = v5;
      v8 = 2112;
      v9 = v3;
      _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error marking record %{public}@ unrecoverable: %@", (uint8_t *)&v6, 0x16u);
    }
  }

}

id sub_18A6BA328(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  NSObject *v7;
  uint8_t v9[16];

  v5 = (void *)objc_msgSend_mutableCopy(a2, (const char *)a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v5, v6, *(_QWORD *)(a1 + 32), (uint64_t)CFSTR("SyncEngineMetadata"));
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v7 = ck_log_facility_data_repair;
  if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v9 = 0;
    _os_log_debug_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_DEBUG, "Persisting sync engine metadata", v9, 2u);
  }
  return v5;
}

void sub_18A6BA3E4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error saving sync engine metadata: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

uint64_t sub_18A6BA4DC()
{
  return MEMORY[0x1E0C9AA70];
}

void sub_18A6BA4E8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error clearing database: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_18A6BA634(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_databaseURL(*(void **)(a1 + 32), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0;
  objc_msgSend_removeItemAtURL_error_(v5, v10, (uint64_t)v9, (uint64_t)&v23);
  v11 = v23;

  if (v11)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v12 = (void *)ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v13 = *(void **)(a1 + 32);
      v14 = v12;
      objc_msgSend_databaseURL(v13, v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKSanitizedPath(v18, v19, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v22;
      _os_log_error_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_ERROR, "Could not delete upload request database at %{public}@", buf, 0xCu);

    }
  }

}

uint64_t sub_18A6BA828(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void sub_18A6BA908(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Class aClassa, uint64_t a14, __int128 buf, int a16, __int16 a17, __int16 a18, void *a19)
{
  uint64_t v19;
  objc_class *v20;
  id v21;
  NSObject *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  objc_class *aClass;

  aClass = v20;
  if (a2 == 1)
  {
    v21 = objc_begin_catch(a1);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v22 = (id)ck_log_facility_data_repair;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      NSStringFromClass(aClass);
      v32 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_name(v21, v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_reason(v21, v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543874;
      *(_QWORD *)((char *)&buf + 4) = v32;
      WORD6(buf) = 2114;
      *(_QWORD *)((char *)&buf + 14) = v36;
      a18 = 2114;
      a19 = v40;
      _os_log_fault_impl(&dword_18A5C5000, v22, OS_LOG_TYPE_FAULT, "Could not unarchive data for %{public}@ due to %{public}@: %{public}@", (uint8_t *)&buf, 0x20u);

    }
    NSStringFromClass(aClass);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_name(v21, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_reason(v21, v28, v29, v30);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v31, (uint64_t)CFSTR("CKErrorDomain"), 12, CFSTR("Could not unarchive data for %@ due to %@: %@"));
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    if (!v19)
      JUMPOUT(0x18A6BA8C4);
    JUMPOUT(0x18A6BA8B8);
  }
  _Unwind_Resume(a1);
}

void sub_18A6BAB94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  int isDirectory;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  id v25;
  const char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const __CFString *v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  void *v51;
  id v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  char v63;

  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_databaseURL(*(void **)(a1 + 32), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByDeletingLastPathComponent(v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = 0;
  objc_msgSend_path(v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v5, v18, (uint64_t)v17, (uint64_t)&v63);

  if (!objc_msgSend_firstInvocation(*(void **)(a1 + 32), v20, v21, v22) || (isDirectory & 1) != 0)
  {
    if (!isDirectory)
    {
      v42 = CFSTR("could not be found");
      v43 = &stru_1E1F66ED0;
LABEL_16:
      v44 = *(_QWORD *)(a1 + 40);
      objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v23, (uint64_t)CFSTR("CKErrorDomain"), 10000, 0, v13, CFSTR("UploadRequest cache directory %@%@"), v42, v43);
      v28 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, id))(v44 + 16))(v44, v28);
      goto LABEL_29;
    }
LABEL_7:
    if (v63)
    {
      v61 = 0;
      objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E0C99D50], v23, (uint64_t)v9, 0, &v61);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = v61;
      v28 = v30;
      if (v30 && objc_msgSend_code(v30, v31, v32, v33) != 260)
      {
        v45 = *(_QWORD *)(a1 + 40);
        objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v31, (uint64_t)CFSTR("CKErrorDomain"), 10000, v28, v9, CFSTR("Could not open UploadRequest cache"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v45 + 16))(v45, v46);

        v34 = (void *)MEMORY[0x1E0C9AA70];
        goto LABEL_28;
      }
      if (v29)
      {
        v60 = 0;
        objc_msgSend_propertyListWithData_options_format_error_(MEMORY[0x1E0CB38B0], v31, (uint64_t)v29, 0, 0, &v60);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v60;

        if (v35)
        {
          v37 = *(_QWORD *)(a1 + 40);
          objc_msgSend_errorWithDomain_code_error_format_(CKPrettyError, v36, (uint64_t)CFSTR("CKErrorDomain"), 10000, v35, CFSTR("UploadRequest cache appears to be corrupt, deleting for future retry"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v38);

          objc_msgSend_removeItemAtURL_error_(v5, v39, (uint64_t)v9, 0);
          v28 = v35;
LABEL_28:

          goto LABEL_29;
        }
        v28 = 0;
      }
      else
      {
        v34 = (void *)MEMORY[0x1E0C9AA70];
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v47;
      if (!v47 || (objc_msgSend_isEqualToDictionary_(v47, v48, (uint64_t)v34, v49) & 1) != 0)
      {
LABEL_22:
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        goto LABEL_28;
      }
      v59 = 0;
      objc_msgSend_dataWithPropertyList_format_options_error_(MEMORY[0x1E0CB38B0], v50, (uint64_t)v29, 200, 0, &v59);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = v59;

      if (v52)
      {
        v54 = *(_QWORD *)(a1 + 40);
        objc_msgSend_errorWithDomain_code_error_format_(CKPrettyError, v53, (uint64_t)CFSTR("CKErrorDomain"), 10000, v52, CFSTR("Could not serialize UploadRequest cache"));
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v54 + 16))(v54, v55);
        v28 = v52;
      }
      else
      {
        v58 = 0;
        objc_msgSend_writeToURL_options_error_(v51, v53, (uint64_t)v9, 1, &v58);
        v28 = v58;
        if (!v28)
        {

          goto LABEL_22;
        }
        v57 = *(_QWORD *)(a1 + 40);
        objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v56, (uint64_t)CFSTR("CKErrorDomain"), 10000, v28, v9, CFSTR("Could not persist UploadRequest cache"));
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v57 + 16))(v57, v55);
      }

      goto LABEL_28;
    }
    v42 = CFSTR("exists");
    v43 = CFSTR(" but is not a directory");
    goto LABEL_16;
  }
  v62 = 0;
  v24 = objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(v5, v23, (uint64_t)v13, 1, 0, &v62);
  v25 = v62;
  v28 = v25;
  if (v24 && !v25)
  {
    v63 = 1;
    objc_msgSend_setFirstInvocation_(*(void **)(a1 + 32), v26, 0, v27);
    goto LABEL_7;
  }
  v40 = *(_QWORD *)(a1 + 40);
  objc_msgSend_errorWithDomain_code_error_URL_format_(CKPrettyError, v26, (uint64_t)CFSTR("CKErrorDomain"), 10000, v25, v13, CFSTR("Could not create UploadRequest cache directory"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v40 + 16))(v40, v41);

LABEL_29:
}

void sub_18A6BB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6BB534(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_18A6BB544(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_data_repair;
    if (os_log_type_enabled((os_log_t)ck_log_facility_data_repair, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error reading all data: %@", (uint8_t *)&v4, 0xCu);
    }
  }

}

uint64_t sub_18A6BBDA4(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    return objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(result + 32) + 16), a2, a4, (uint64_t)a2);
  return result;
}

void sub_18A6BD244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6BD25C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6BD26C(uint64_t a1)
{

}

void sub_18A6BD274(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 56), v9, (uint64_t)v7, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = objc_msgSend_length(v7, v11, v12, v13);
    v16 = (char *)v33 - ((v15 + 17) & 0xFFFFFFFFFFFFFFF0);
    *v16 = 64;
    v17 = v15 + 1;
    objc_msgSend_getCString_maxLength_encoding_(v7, v18, (uint64_t)(v16 + 1), v15 + 1, 1);
    v16[v17] = 0;
    v19 = sqlite3_bind_parameter_index(*(sqlite3_stmt **)(*(_QWORD *)(a1 + 32) + 16), v16);
    if ((_DWORD)v19)
    {
      v23 = v19;
      v24 = *(void **)(a1 + 32);
      v25 = objc_msgSend_unsignedIntValue(v14, v20, v21, v22);
      objc_msgSend_bindValue_ofType_atIndex_(v24, v26, (uint64_t)v8, v25, v23);
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v20, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No binding index for %@"), v7);
    }
    v27 = objc_claimAutoreleasedReturnValue();
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v32 = *(void **)(v31 + 40);
    *(_QWORD *)(v31 + 40) = v27;

  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No binding type found for %@"), v7);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v30 = *(void **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v28;

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    *a4 = 1;

}

void sub_18A6BE248(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v7 = a2;
  objc_msgSend_objectAtIndex_(v6, v8, a3, v9);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_pointerAtIndex_(*(void **)(*(_QWORD *)(a1 + 32) + 48), v10, a3, v11);
  (*(void (**)(uint64_t, id, id, uint64_t))(v5 + 16))(v5, v7, v13, v12);

}

id sub_18A6BE4C8(int a1, SEL aSelector)
{
  void *v2;
  objc_class *v3;
  void *v4;
  const char *v5;
  void *v6;

  NSStringFromSelector(aSelector);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v5, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("%@ not implemented for %@"), v2, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t sub_18A6BE55C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  objc_msgSend_appendFormat_(a3, a2, (uint64_t)CFSTR("%@"), a4, a1);
  return 0;
}

uint64_t sub_18A6BE590(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  objc_msgSend_appendFormat_(a3, a2, (uint64_t)CFSTR("\"%@\""), a4, a1);
  return 0;
}

id sub_18A6BE5C4(void *a1, uint64_t a2, void *a3)
{
  return sub_18A6BE5CC(a1, a3);
}

id sub_18A6BE5CC(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend_appendString_(v4, v5, (uint64_t)CFSTR("("), v6);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v7 = v3;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v9)
  {
    v12 = v9;
    v13 = *(_QWORD *)v23;
    v14 = 1;
    while (2)
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v23 != v13)
          objc_enumerationMutation(v7);
        v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v15);
        if ((v14 & 1) == 0)
          objc_msgSend_appendString_(v4, v10, (uint64_t)CFSTR(","), v11, (_QWORD)v22);
        objc_msgSend_cksqlcs_appendSQLConstantValueToString_(v16, v10, (uint64_t)v4, v11, (_QWORD)v22);
        v17 = objc_claimAutoreleasedReturnValue();
        if (v17)
        {
          v20 = (void *)v17;

          goto LABEL_13;
        }
        v14 = 0;
        ++v15;
      }
      while (v12 != v15);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v22, (uint64_t)v26, 16);
      v14 = 0;
      if (v12)
        continue;
      break;
    }
  }

  objc_msgSend_appendString_(v4, v18, (uint64_t)CFSTR(")"), v19);
  v20 = 0;
LABEL_13:

  return v20;
}

id sub_18A6BE740(void *a1, uint64_t a2, void *a3)
{
  return sub_18A6BE5CC(a1, a3);
}

id sub_18A6BE748(void *a1, uint64_t a2, void *a3)
{
  return sub_18A6BE5CC(a1, a3);
}

id sub_18A6BE750(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;

  v6 = a3;
  v7 = a4;
  v11 = objc_msgSend_expressionType(a1, v8, v9, v10);
  if (v11)
  {
    if (v11 == 2)
    {
      objc_msgSend_variable(a1, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sqlValueForVariable_(v7, v22, (uint64_t)v15, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendString_(v6, v25, (uint64_t)v24, v26);

    }
    else
    {
      if (v11 != 3)
      {
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v12, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Unhandled expression type %lu"), v11);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      }
      objc_msgSend_keyPath(a1, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendFormat_(v6, v16, (uint64_t)CFSTR("%@"), v17, v15);
    }

    v21 = 0;
  }
  else
  {
    objc_msgSend_constantValue(a1, v12, v13, v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_cksqlcs_appendSQLConstantValueToString_(v18, v19, (uint64_t)v6, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_9:

  return v21;
}

BOOL sub_18A6BE87C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  void *v9;

  if (objc_msgSend_expressionType(a1, a2, a3, a4))
    return 0;
  objc_msgSend_constantValue(a1, v5, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v9 == 0;

  return v8;
}

id sub_18A6BE8C4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int isNil;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  const char *v62;
  uint64_t v63;
  uint64_t v64;

  v6 = a3;
  v7 = a4;
  objc_msgSend_leftExpression(a1, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_cksqlcs_isNil(v11, v12, v13, v14))
  {
    objc_msgSend_rightExpression(a1, v15, v16, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    isNil = objc_msgSend_cksqlcs_isNil(v19, v20, v21, v22);
    v27 = objc_msgSend_predicateOperatorType(a1, v24, v25, v26);
    objc_msgSend_appendString_(v6, v28, (uint64_t)CFSTR("("), v29);
    objc_msgSend_cksqlcs_appendSQLToString_statement_(v11, v30, (uint64_t)v6, (uint64_t)v7);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
      goto LABEL_30;
    if (isNil)
    {
      if (v27 == 4)
      {
        objc_msgSend_appendString_(v6, v32, (uint64_t)CFSTR(" IS NULL"), v33);
        goto LABEL_18;
      }
      if (v27 == 5)
      {
        objc_msgSend_appendString_(v6, v32, (uint64_t)CFSTR(" IS NOT NULL"), v33);
LABEL_18:
        objc_msgSend_appendString_(v6, v34, (uint64_t)CFSTR(")"), v35);
        v41 = objc_msgSend_expressionType(v11, v38, v39, v40);
        v45 = objc_msgSend_expressionType(v19, v42, v43, v44);
        if (v41 == 3 && v45 == 2)
        {
          objc_msgSend_keyPath(v11, v46, v47, v48);
          v49 = objc_claimAutoreleasedReturnValue();
          goto LABEL_21;
        }
        if (v41 == 2 && v45 == 3)
        {
          objc_msgSend_variable(v11, v46, v47, v48);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_keyPath(v19, v56, v57, v58);
          v59 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (!v41 && v45 == 2)
          {
            objc_msgSend_constantValue(v11, v46, v47, v48);
            v49 = objc_claimAutoreleasedReturnValue();
LABEL_21:
            v53 = (void *)v49;
            objc_msgSend_variable(v19, v50, v51, v52);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v53)
              goto LABEL_29;
LABEL_27:
            if (v55)
              v60 = (id)objc_msgSend_addBindingVariable_withAssociatedProperty_(v7, v54, (uint64_t)v55, (uint64_t)v53);
            goto LABEL_29;
          }
          v55 = 0;
          if (v41 != 2)
          {
            v53 = 0;
            goto LABEL_29;
          }
          v53 = 0;
          if (v45)
          {
LABEL_29:

            v31 = 0;
            goto LABEL_30;
          }
          objc_msgSend_variable(v11, v46, v47, v48);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_constantValue(v19, v62, v63, v64);
          v59 = objc_claimAutoreleasedReturnValue();
        }
        v53 = (void *)v59;
        if (v59)
          goto LABEL_27;
        goto LABEL_29;
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v32, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("invalid nil operand"));
    }
    else
    {
      if (v27 < 0xB && ((0x43Fu >> v27) & 1) != 0)
      {
        objc_msgSend_appendString_(v6, v32, (uint64_t)off_1E1F5FBD8[v27], v33);
LABEL_17:
        objc_msgSend_cksqlcs_appendSQLToString_statement_(v19, v34, (uint64_t)v6, (uint64_t)v7);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v31)
          goto LABEL_18;
LABEL_30:
        v18 = v31;

        goto LABEL_31;
      }
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v32, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Unhandled operator type %lu"), v27);
    }
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
      goto LABEL_30;
    objc_msgSend_appendString_(v6, v36, (uint64_t)&stru_1E1F66ED0, v37);
    if ((isNil & 1) != 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v15, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("nil cannot appear as the left operand"));
  v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_31:

  return v18;
}

id sub_18A6BEBAC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  id v28;
  const char *v29;
  uint64_t v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *, void *, uint64_t, _BYTE *);
  void *v36;
  id v37;
  __CFString *v38;
  id v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;

  v6 = a3;
  v7 = a4;
  v41 = 0;
  v42 = &v41;
  v43 = 0x3032000000;
  v44 = sub_18A6BD25C;
  v45 = sub_18A6BD26C;
  v46 = 0;
  v11 = objc_msgSend_compoundPredicateType(a1, v8, v9, v10);
  objc_msgSend_subpredicates(a1, v12, v13, v14);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  switch(v11)
  {
    case 0:
      objc_msgSend_appendString_(v6, v15, (uint64_t)CFSTR(" NOT ("), v16);
      objc_msgSend_objectAtIndex_(v17, v24, 0, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (id)objc_msgSend_cksqlcs_appendSQLToString_statement_(v26, v27, (uint64_t)v6, (uint64_t)v7);

      objc_msgSend_appendString_(v6, v29, (uint64_t)CFSTR(") "), v30);
      break;
    case 1:
      v18 = CFSTR(" AND ");
      goto LABEL_6;
    case 2:
      v18 = CFSTR(" OR ");
LABEL_6:
      v33 = MEMORY[0x1E0C809B0];
      v34 = 3221225472;
      v35 = sub_18A6BED84;
      v36 = &unk_1E1F5FBB8;
      v19 = v6;
      v37 = v19;
      v38 = (__CFString *)v18;
      v40 = &v41;
      v39 = v7;
      objc_msgSend_enumerateObjectsUsingBlock_(v17, v20, (uint64_t)&v33, v21);
      objc_msgSend_appendString_(v19, v22, (uint64_t)CFSTR(")"), v23, v33, v34, v35, v36);

      break;
  }
  v31 = (id)v42[5];

  _Block_object_dispose(&v41, 8);
  return v31;
}

void sub_18A6BED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6BED84(uint64_t *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v9 = (void *)a1[4];
  if (a3)
    objc_msgSend_appendString_(v9, v7, a1[5], v8);
  else
    objc_msgSend_appendString_(v9, v7, (uint64_t)CFSTR("("), v8);
  objc_msgSend_cksqlcs_appendSQLToString_statement_(v14, v10, a1[4], a1[6]);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(a1[7] + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  if (*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40))
    *a4 = 1;

}

void sub_18A6BF13C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 520);
    *(_QWORD *)(v8 + 520) = v7;

  }
}

void sub_18A6BF2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A6BF2E4(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A6BF30C(uint64_t a1)
{

}

void sub_18A6BF314(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 520));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

const __CFString *CKStringFromSyncEngineAccountChangeType(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E1F5FC70[a1];
}

uint64_t sub_18A6C1590(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_conciseDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18A6C1D78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_conciseDescription(a2, (const char *)a2, a3, a4);
}

const __CFString *CKStringFromZoneDeletionReason(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E1F5FC88[a1];
}

uint64_t sub_18A6C2B10()
{
  return 0;
}

uint64_t sub_18A6C2B18()
{
  return 0;
}

uint64_t sub_18A6C2B20()
{
  return 0;
}

__CFString *sub_18A6C2BC8(uint64_t *a1, const char *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  __CFString *v12;

  if (a1)
  {
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], a2, a1[1], 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = *a1;
    objc_msgSend_lastPathComponent(v3, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v4, v10, (uint64_t)CFSTR("%s(%@:%d)"), v11, v5, v9, *((unsigned int *)a1 + 4));
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = CFSTR("(unlabeled)");
  }
  return v12;
}

void sub_18A6C32B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  objc_class *v18;
  void *v19;
  objc_class *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  id v38;
  void *v39;
  objc_class *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  objc_class *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  const char *v56;
  void *v57;
  void *v58;
  void *v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  id v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  void *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      v5 = objc_msgSend_logOperations(*(void **)(a1 + 8), a2, a3, a4);
      v9 = v5;
      if (!*(_BYTE *)(a1 + 48))
      {
        *(_BYTE *)(a1 + 48) = 1;
        if (v5)
        {
          objc_msgSend_fetchedColumns(*(void **)(a1 + 56), v6, v7, v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_componentsJoinedByString_(v10, v11, (uint64_t)CFSTR(", "), v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_searchBindingsDescription(*(void **)(a1 + 56), v14, v15, v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = (objc_class *)objc_opt_class();
          NSStringFromClass(v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (objc_class *)objc_opt_class();
          NSStringFromClass(v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v22 = (void *)ck_log_facility_sql;
          if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
          {
            v66 = v10;
            v23 = v17;
            v24 = v13;
            v25 = *(void **)(a1 + 56);
            v26 = v22;
            objc_msgSend_label(v25, v27, v28, v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544642;
            v70 = v19;
            v71 = 2048;
            v72 = (void *)a1;
            v73 = 2114;
            v74 = v21;
            v75 = 2114;
            v76 = v30;
            v77 = 2114;
            v78 = v24;
            v79 = 2114;
            v80 = v23;
            _os_log_impl(&dword_18A5C5000, v26, OS_LOG_TYPE_INFO, "%{public}@(%p): Begin enumeration of %{public}@ (label=%{public}@), FETCH (%{public}@) WHERE %{public}@", buf, 0x3Eu);

            v13 = v24;
            v17 = v23;
            v10 = v66;

          }
        }
      }
      v31 = *(void **)(a1 + 56);
      v68 = 0;
      v32 = objc_msgSend_step_(v31, v6, (uint64_t)&v68, v8);
      v33 = v68;
      if (v32)
        v37 = v33 == 0;
      else
        v37 = 0;
      if (v37)
      {
        v45 = *(void **)(a1 + 8);
        v46 = *(_QWORD *)(a1 + 56);
        v67 = 0;
        v39 = (void *)objc_msgSend_newEntryObjectFromStatement_error_(v45, v34, v46, (uint64_t)&v67);
        v38 = v67;
        objc_storeStrong((id *)(a1 + 40), v39);
        if (v9)
        {
          objc_msgSend_fetchedColumns(*(void **)(a1 + 56), v47, v48, v49);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = (objc_class *)objc_opt_class();
          NSStringFromClass(v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v53 = (void *)ck_log_facility_sql;
          if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
          {
            v54 = v53;
            v55 = (void *)objc_opt_class();
            objc_msgSend_descriptionOfProperties_from_(v55, v56, (uint64_t)v50, (uint64_t)v39);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v70 = v52;
            v71 = 2048;
            v72 = (void *)a1;
            v73 = 2114;
            v74 = v57;
            _os_log_impl(&dword_18A5C5000, v54, OS_LOG_TYPE_INFO, "%{public}@(%p): enumeration fetched: (%{public}@)", buf, 0x20u);

          }
        }
      }
      else
      {
        v38 = v33;
        objc_msgSend_invalidate((void *)a1, v34, v35, v36);
        v39 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, a2, (uint64_t)CFSTR("CKInternalErrorDomain"), 1, CFSTR("Enumeration already finished"));
      v38 = (id)objc_claimAutoreleasedReturnValue();
      v40 = (objc_class *)objc_opt_class();
      NSStringFromClass(v40);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v41 = ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_FAULT))
      {
        v42 = *(void **)(a1 + 24);
        v43 = *(void **)(a1 + 16);
        v44 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138544386;
        v70 = v39;
        v71 = 2048;
        v72 = (void *)a1;
        v73 = 2114;
        v74 = v42;
        v75 = 2114;
        v76 = v43;
        v77 = 2114;
        v78 = v44;
        _os_log_fault_impl(&dword_18A5C5000, v41, OS_LOG_TYPE_FAULT, "%{public}@(%p): Enumeration already finished. table: %{public}@ in group: %{public}@, error=%{public}@", buf, 0x34u);
      }
    }

    if (v38)
    {
      objc_storeStrong((id *)(a1 + 32), v38);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v58 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
      {
        v59 = *(void **)(a1 + 8);
        v60 = v58;
        objc_msgSend_logicalTableName(v59, v61, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        NSStringFromSelector(sel__nextObject);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v70 = v64;
        v71 = 2114;
        v72 = v65;
        v73 = 2114;
        v74 = v38;
        _os_log_error_impl(&dword_18A5C5000, v60, OS_LOG_TYPE_ERROR, "Table %{public}@ failed in %{public}@ - error: %{public}@", buf, 0x20u);

      }
    }

  }
}

id sub_18A6C3CF4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18A6C3E78(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_18A6C3EE8;
  v7[3] = &unk_1E1F5FCC8;
  v8 = *(id *)(a1 + 32);
  v9 = a3;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a2, v5, (uint64_t)v7, v6);

}

uint64_t sub_18A6C3EE8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  char v7;

  v7 = 0;
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v7)
  {
    *a4 = 1;
    **(_BYTE **)(a1 + 40) = 1;
  }
  return result;
}

void sub_18A6C3FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6C3FDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_count(a2, (const char *)a2, a3, a4);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_18A6C4094(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

void sub_18A6C4170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6C4188(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6C4198(uint64_t a1)
{

}

void sub_18A6C41A0(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_objectForKey_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    *a3 = 1;
}

uint64_t sub_18A6C427C(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), a2, a3, (uint64_t)a2);
}

void sub_18A6C44E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A6C4504(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_18A6C450C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

id sub_18A6C4514(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18A6C45C0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  const char *v9;
  id v10;

  v5 = *(void **)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = a2;
  objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(v5, v8, (uint64_t)v7, a3, v6, 0);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_encodeObject_forKey_(*(void **)(a1 + 40), v9, (uint64_t)v10, (uint64_t)v7);

}

void sub_18A6C46E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v5 = a3;
  v6 = a2;
  v12 = objc_msgSend_unsignedIntValue(v5, v7, v8, v9);
  if (v12 <= 0x48)
  {
    if (v12 - 1 >= 2 && v12 != 3 && v12 != 5)
      goto LABEL_11;
  }
  else if (v12 - 73 >= 0xD && v12 != 132 && v12 != 134)
  {
    goto LABEL_11;
  }
  v13 = objc_opt_class();
  if (!v13)
  {
LABEL_11:
    objc_msgSend_decodeObjectForKey_(*(void **)(a1 + 32), v10, (uint64_t)v6, v11);
    v14 = objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  objc_msgSend_decodeObjectOfClass_forKey_(*(void **)(a1 + 32), v10, v13, (uint64_t)v6);
  v14 = objc_claimAutoreleasedReturnValue();
LABEL_12:
  v15 = (char *)v14;
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 48), v15, (uint64_t)v15, (uint64_t)v6, v5, *(_QWORD *)(a1 + 40));

}

void sub_18A6C48B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18A6C48CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if ((objc_msgSend_unsignedIntValue(v5, v6, v7, v8) & 0x100) == 0)
  {
    objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 48), v9, (uint64_t)v14, (uint64_t)v5, *(_QWORD *)(a1 + 32), 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) ^= objc_msgSend_hash(v10, v11, v12, v13);

  }
}

void sub_18A6C4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6C4A60(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  BOOL v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  id v20;

  v20 = a2;
  v7 = a3;
  v11 = objc_msgSend_unsignedIntValue(v7, v8, v9, v10);
  if (*(_BYTE *)(a1 + 64))
    v13 = 1;
  else
    v13 = (v11 & 0x100) == 0;
  if (v13)
  {
    objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 56), v12, (uint64_t)v20, (uint64_t)v7, *(_QWORD *)(a1 + 32), 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 56), v15, (uint64_t)v20, (uint64_t)v7, *(_QWORD *)(a1 + 40), 0);
    v16 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)v16;
    if (v14 != (void *)v16 && (!v14 || !v16 || (objc_msgSend_isEqual_(v14, v17, v16, v18) & 1) == 0))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      *a4 = 1;

  }
}

void sub_18A6C4BF0(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  id v16;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v7 = a3;
  v8 = a2;
  objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(v5, v9, (uint64_t)v8, (uint64_t)v7, v6, 0);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 40);
  v14 = (void *)objc_msgSend_copy(v16, v11, v12, v13);
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(v10, v15, (uint64_t)v14, (uint64_t)v8, v7, *(_QWORD *)(a1 + 32));

}

void sub_18A6C5024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A6C5048(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;

  v20 = a2;
  v5 = a3;
  objc_msgSend_valueForProperty_propertyInfo_inObject_allowFetchingUnsetPropertySentinel_(*(void **)(a1 + 64), v6, (uint64_t)v20, (uint64_t)v5, *(_QWORD *)(a1 + 32), 1);
  v7 = objc_claimAutoreleasedReturnValue();
  v11 = (__CFString *)v7;
  if (v7 == qword_1EDF6F738)
  {
    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (!v14)
    {
      v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    }
    objc_msgSend_addObject_(v14, v8, (uint64_t)v20, v10);
    goto LABEL_11;
  }
  if (!v7)
  {
    v11 = CFSTR("<nil>");
LABEL_10:
    objc_msgSend_appendFormat_(*(void **)(a1 + 40), v20, (uint64_t)CFSTR("%@%@ = %@"), v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v20, v11);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = CFSTR(", ");

LABEL_11:
    goto LABEL_12;
  }
  if (objc_msgSend_unsignedIntValue(v5, v8, v9, v10) != 8)
    goto LABEL_10;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("{ %@ }"), v10, v11);
  v13 = objc_claimAutoreleasedReturnValue();

  v11 = (__CFString *)v13;
  if (v13)
    goto LABEL_10;
LABEL_12:

}

void sub_18A6C540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6C5428(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;
  unsigned __int8 v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint8_t buf[16];

  v28 = a2;
  v6 = a3;
  v10 = objc_msgSend_unsignedIntValue(v6, v7, v8, v9);
  if ((v10 & 0x100) != 0)
  {
    v13 = v10;
    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v14)
    {
      v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), a2);
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), a3);
      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    objc_msgSend_addObject_(v14, v11, (uint64_t)v28, v12);
    v18 = v13;
    if (v13 - 73 <= 9)
    {
      if (((1 << (v13 - 73)) & 0x108) != 0)
        goto LABEL_12;
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v6 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_ERROR, "Scalar types shorter than 64 bit are not allowed as primary keys", buf, 2u);
      }
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("Scalar types shorter than 64 bit are not allowed as primary keys"), v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_UTF8String(v21, v22, v23, v24);
      _os_crash();
      __break(1u);
    }
    if (v18 != 1)
    {
      v25 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 48);
      do
      {
        while (1)
        {
          v26 = *v25;
          v27 = __ldxr(v25);
          if (v27 == v26)
            break;
          __clrex();
        }
      }
      while (__stxr(v26 & 0xFFFFFFFFFFFFFFFELL, v25));
    }
  }
LABEL_12:

}

void sub_18A6C5650(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6C585C(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if ((objc_msgSend_unsignedIntValue(a3, v5, v6, v7) & 0x100) == 0)
    objc_msgSend_addObject_(*(void **)(a1 + 32), v8, (uint64_t)v10, v9);

}

id sub_18A6C58A8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18A6C5A34(_Unwind_Exception *exception_object)
{
  pthread_mutex_t *v1;

  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A6C6244(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

void sub_18A6C62CC(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, unsigned int a5, void *a6)
{
  const char *v10;
  uint64_t v11;
  id i;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  id v18;
  const char *v19;
  id v20;

  v20 = a2;
  for (i = a6; a4 <= a5; a4 = (a4 + 1))
  {
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v10, a4, v11);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (((a3 >> a4) & 1) != 0)
    {
      objc_msgSend_objectForKey_(v20, v13, (uint64_t)v15, v14);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      if (!v18)
      {
        v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend_setObject_forKey_(v20, v19, (uint64_t)v18, (uint64_t)v15);
      }
      objc_msgSend_addObject_(v18, v16, (uint64_t)i, v17);

    }
  }

}

void sub_18A6C63AC(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const __CFString *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint8_t buf[4];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v35 = a2;
  v7 = a3;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (*(_BYTE *)(v8 + 24))
    *(_BYTE *)(v8 + 24) = 0;
  else
    objc_msgSend_appendString_(*(void **)(a1 + 32), v5, (uint64_t)CFSTR(","), v6);
  objc_msgSend_appendString_(*(void **)(a1 + 32), v5, (uint64_t)v35, v6);
  objc_msgSend_appendString_(*(void **)(a1 + 32), v9, (uint64_t)CFSTR(" "), v10);
  v16 = objc_msgSend_unsignedIntValue(v7, v11, v12, v13);
  v17 = *(void **)(a1 + 32);
  if (v16 > 0x53u)
  {
    if (v16 > 0x85u)
    {
      if (v16 == 134 || v16 == 135)
      {
LABEL_14:
        v20 = CFSTR("BLOB");
LABEL_15:
        objc_msgSend_appendString_(v17, v14, (uint64_t)v20, v15);
        goto LABEL_16;
      }
    }
    else
    {
      if (v16 - 84 < 2)
      {
LABEL_7:
        objc_msgSend_appendString_(v17, v14, (uint64_t)CFSTR("REAL"), v15);
        goto LABEL_16;
      }
      if (v16 == 132)
        goto LABEL_14;
    }
LABEL_35:
    if (ck_log_initialization_predicate != -1)
      goto LABEL_39;
    while (1)
    {
      v28 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v37 = v16;
        _os_log_error_impl(&dword_18A5C5000, v28, OS_LOG_TYPE_ERROR, "Unknown type code: %u", buf, 8u);
      }
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v29, (uint64_t)CFSTR("Unknown type code: %u"), v30, v16);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_UTF8String(v31, v32, v33, v34);
      _os_crash();
      __break(1u);
LABEL_39:
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
  }
  if (v16 - 73 >= 0xB)
  {
    v20 = CFSTR("<missing type placeholder>");
    switch((char)v16)
    {
      case 0:
        goto LABEL_15;
      case 1:
      case 8:
        break;
      case 2:
      case 5:
        goto LABEL_7;
      case 3:
        objc_msgSend_appendString_(v17, v14, (uint64_t)CFSTR("STRING"), v15);
        goto LABEL_16;
      default:
        goto LABEL_35;
    }
  }
  objc_msgSend_appendString_(v17, v14, (uint64_t)CFSTR("INTEGER"), v15);
LABEL_16:
  if ((v16 & 0x400) != 0)
    objc_msgSend_appendString_(*(void **)(a1 + 32), v18, (uint64_t)CFSTR(" UNIQUE"), v19);
  if ((v16 & 0x200) != 0)
    objc_msgSend_appendString_(*(void **)(a1 + 32), v18, (uint64_t)CFSTR(" NOT NULL"), v19);
  objc_msgSend_checkConstraintForProperty_(*(void **)(a1 + 40), v18, (uint64_t)v35, v19);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), v21, (uint64_t)CFSTR(" CHECK(%@)"), v22, v23);
  if ((v16 & 0x800) != 0)
    objc_msgSend_addObject_(*(void **)(a1 + 48), v21, (uint64_t)v35, v22);
  if ((*(_DWORD *)(a1 + 96) & v16) != 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  if ((*(_DWORD *)(a1 + 100) & v16) != 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  if (v16 == 8)
  {
    v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    if (!v24)
    {
      v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v27 = *(void **)(v26 + 40);
      *(_QWORD *)(v26 + 40) = v25;

      v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    }
    objc_msgSend_addObject_(v24, v21, (uint64_t)v35, v22);
  }

}

uint64_t sub_18A6C66EC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend_appendString_(v4, v6, (uint64_t)CFSTR(", UNIQUE ("), v7);
  v8 = *(void **)(a1 + 32);
  objc_msgSend_componentsJoinedByString_(v5, v9, (uint64_t)CFSTR(","), v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_appendString_(v8, v12, (uint64_t)v11, v13);
  return objc_msgSend_appendString_(*(void **)(a1 + 32), v14, (uint64_t)CFSTR(")"), v15);
}

void sub_18A6C6768(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  char *v19;

  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = a3;
  objc_msgSend_stringWithFormat_(v5, v8, (uint64_t)CFSTR("%@.index_%@"), v9, v6, a2);
  v19 = (char *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v19, (uint64_t)CFSTR("CREATE INDEX '%@' on '%@' ("), v10, v19, *(_QWORD *)(a1 + 32));
  v11 = *(void **)(a1 + 40);
  objc_msgSend_componentsJoinedByString_(v7, v12, (uint64_t)CFSTR(","), v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_appendString_(v11, v15, (uint64_t)v14, v16);
  objc_msgSend_appendString_(*(void **)(a1 + 40), v17, (uint64_t)CFSTR(");"), v18);

}

id sub_18A6C684C(void *a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  id v9;
  objc_class *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  objc_property *Property;
  char *v17;
  char *v18;
  const char *v19;
  objc_method *InstanceMethod;
  IMP Implementation;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  void *v80;
  NSObject *v81;
  objc_class *v82;
  void *v83;
  void *v84;
  objc_class *v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  NSObject *v93;
  objc_class *v94;
  void *v95;
  void *v96;
  objc_class *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t buf[4];
  id v106;
  __int16 v107;
  void *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = (objc_class *)objc_opt_class();
  v11 = objc_retainAutorelease(v7);
  v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
  Property = class_getProperty(v10, v15);
  v17 = property_copyAttributeValue(Property, "G");
  if (v17)
  {
    v18 = v17;
    v19 = sel_registerName(v17);
    free(v18);
  }
  else
  {
    v19 = sel_registerName(v15);
  }
  InstanceMethod = class_getInstanceMethod(v10, v19);
  if (!InstanceMethod)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v80 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v81 = v80;
      v82 = (objc_class *)objc_opt_class();
      NSStringFromClass(v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v106 = v11;
      v107 = 2112;
      v108 = v83;
      _os_log_error_impl(&dword_18A5C5000, v81, OS_LOG_TYPE_ERROR, "Could not find getter method for property %@ on class %@", buf, 0x16u);

    }
    v84 = (void *)MEMORY[0x1E0CB3940];
    v85 = (objc_class *)objc_opt_class();
    NSStringFromClass(v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v84, v87, (uint64_t)CFSTR("Could not find getter method for property %@ on class %@"), v88, v11, v86);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend_UTF8String(v11, v89, v90, v91);
    _os_crash();
    __break(1u);
LABEL_28:
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v92 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v93 = v92;
      v94 = (objc_class *)objc_opt_class();
      NSStringFromClass(v94);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v106 = v11;
      v107 = 2112;
      v108 = v95;
      _os_log_error_impl(&dword_18A5C5000, v93, OS_LOG_TYPE_ERROR, "Attempted to use property %@ on entry of class %@ but the property value has not been fetched into the object.", buf, 0x16u);

    }
    v96 = (void *)MEMORY[0x1E0CB3940];
    v97 = (objc_class *)objc_opt_class();
    NSStringFromClass(v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v96, v99, (uint64_t)CFSTR("Attempted to use property %@ on entry of class %@ but the property value has not been fetched into the object."), v100, v11, v98);
    v101 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_UTF8String(v101, v102, v103, v104);
    _os_crash();
    __break(1u);
  }
  Implementation = method_getImplementation(InstanceMethod);
  switch(objc_msgSend_unsignedIntValue(v9, v22, v23, v24))
  {
    case 'I':
      v25 = (void *)MEMORY[0x1E0CB37E8];
      v26 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithChar_(v25, v27, v26, v28);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'J':
      v50 = (void *)MEMORY[0x1E0CB37E8];
      v51 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithShort_(v50, v52, v51, v53);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'K':
      v38 = (void *)MEMORY[0x1E0CB37E8];
      v39 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithInt_(v38, v40, v39, v41);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'L':
      v54 = (void *)MEMORY[0x1E0CB37E8];
      v55 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithLongLong_(v54, v56, v55, v57);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'M':
      v30 = (void *)MEMORY[0x1E0CB37E8];
      v31 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithInteger_(v30, v32, v31, v33);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'N':
      v62 = (void *)MEMORY[0x1E0CB37E8];
      v63 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithUnsignedChar_(v62, v64, v63, v65);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'O':
      v66 = (void *)MEMORY[0x1E0CB37E8];
      v67 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithUnsignedShort_(v66, v68, v67, v69);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'P':
      v58 = (void *)MEMORY[0x1E0CB37E8];
      v59 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithUnsignedInt_(v58, v60, v59, v61);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'Q':
      v70 = (void *)MEMORY[0x1E0CB37E8];
      v71 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithUnsignedLongLong_(v70, v72, v71, v73);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'R':
      v42 = (void *)MEMORY[0x1E0CB37E8];
      v43 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithUnsignedInteger_(v42, v44, v43, v45);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'S':
      v74 = (void *)MEMORY[0x1E0CB37E8];
      v75 = ((uint64_t (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithBool_(v74, v76, v75, v77);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'T':
      v34 = (void *)MEMORY[0x1E0CB37E8];
      ((void (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithFloat_(v34, v35, v36, v37);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    case 'U':
      v46 = (void *)MEMORY[0x1E0CB37E8];
      ((void (*)(id, const char *))Implementation)(v8, v19);
      objc_msgSend_numberWithDouble_(v46, v47, v48, v49);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      ((void (*)(id, const char *))Implementation)(v8, v19);
      v29 = objc_claimAutoreleasedReturnValue();
      break;
  }
  v78 = (void *)v29;
  if (v29 == qword_1EDF6F738 && (a4 & 1) == 0)
    goto LABEL_28;

  return v78;
}

void sub_18A6C6E1C(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  objc_class *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  objc_method *InstanceMethod;
  IMP Implementation;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(id, const char *);
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint8_t buf[4];
  id v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v43 = a1;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (objc_class *)objc_opt_class();
  v11 = objc_retainAutorelease(v7);
  v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
  v16 = sub_18A6CEEF8(v10, v15);
  InstanceMethod = class_getInstanceMethod(v10, v16);
  Implementation = method_getImplementation(InstanceMethod);
  if (!Implementation)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v32 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v33 = v32;
      NSStringFromClass(v10);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v45 = v11;
      v46 = 2112;
      v47 = v34;
      _os_log_error_impl(&dword_18A5C5000, v33, OS_LOG_TYPE_ERROR, "Failed to find a setter for %@ on %@", buf, 0x16u);

    }
    v35 = (void *)MEMORY[0x1E0CB3940];
    NSStringFromClass(v10);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v35, v37, (uint64_t)CFSTR("Failed to find a setter for %@ on %@"), v38, v11, v36);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_UTF8String(v39, v40, v41, v42);
    _os_crash();
    __break(1u);
  }
  v22 = (void (*)(id, const char *))Implementation;
  switch(objc_msgSend_unsignedIntValue(v8, v19, v20, v21))
  {
    case 'I':
      v26 = objc_msgSend_charValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'J':
      v26 = objc_msgSend_shortValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'K':
      v27 = objc_msgSend_longValue(v43, v23, v24, v25);
      goto LABEL_12;
    case 'L':
      v28 = objc_msgSend_longLongValue(v43, v23, v24, v25);
      goto LABEL_17;
    case 'M':
      v28 = objc_msgSend_integerValue(v43, v23, v24, v25);
      goto LABEL_17;
    case 'N':
      v26 = objc_msgSend_unsignedCharValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'O':
      v26 = objc_msgSend_unsignedShortValue(v43, v23, v24, v25);
      goto LABEL_20;
    case 'P':
      v27 = objc_msgSend_unsignedLongValue(v43, v23, v24, v25);
LABEL_12:
      v29 = v27;
      v30 = v9;
      v31 = v16;
      goto LABEL_21;
    case 'Q':
      v28 = objc_msgSend_unsignedLongLongValue(v43, v23, v24, v25);
      goto LABEL_17;
    case 'R':
      v28 = objc_msgSend_unsignedIntegerValue(v43, v23, v24, v25);
LABEL_17:
      v29 = v28;
      v30 = v9;
      v31 = v16;
      goto LABEL_21;
    case 'S':
      v26 = objc_msgSend_BOOLValue(v43, v23, v24, v25);
LABEL_20:
      v29 = v26;
      v30 = v9;
      v31 = v16;
      goto LABEL_21;
    case 'T':
      objc_msgSend_floatValue(v43, v23, v24, v25);
      v22(v9, v16);
      goto LABEL_22;
    case 'U':
      objc_msgSend_doubleValue(v43, v23, v24, v25);
      v22(v9, v16);
      goto LABEL_22;
    default:
      v30 = v9;
      v31 = v16;
      v29 = (uint64_t)v43;
LABEL_21:
      ((void (*)(id, const char *, uint64_t))v22)(v30, v31, v29);
LABEL_22:

      return;
  }
}

void sub_18A6C748C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A6C74B0(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  uint64_t v19;

  v7 = a2;
  if (objc_msgSend_unsignedIntValue(a3, v8, v9, v10) == 8)
  {
    v11 = (void *)a1[4];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_18A6C7590;
    v17[3] = &unk_1E1F5FFA8;
    v12 = a1[6];
    v17[4] = v11;
    v19 = v12;
    v18 = v7;
    objc_msgSend_tableForReferenceProperty_block_(v11, v13, (uint64_t)v18, (uint64_t)v17);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1[5] + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    *a4 = 1;

}

void sub_18A6C7590(_QWORD *a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v6 = a3;
  if (!*(_QWORD *)(a1[4] + 32))
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v8 = a1[4];
    v9 = *(void **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = v7;

    v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v11 = *(_QWORD *)(a1[6] + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
  objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(a1[6] + 8) + 40), v5, (uint64_t)v6, a1[5]);
  if ((objc_msgSend_containsObject_(*(void **)(a1[4] + 32), v13, (uint64_t)v17, v14) & 1) == 0)
    objc_msgSend_addObject_(*(void **)(a1[4] + 32), v15, (uint64_t)v17, v16);

}

void sub_18A6C77F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  const char *v12;
  id v13;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_opt_class();
  objc_msgSend_propertyInfo_(v7, v8, (uint64_t)v6, v9);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_valueForProperty_propertyInfo_inObject_(*(void **)(a1 + 32), v10, (uint64_t)v6, (uint64_t)v13, *(_QWORD *)(a1 + 40));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 48), v12, (uint64_t)v11, (uint64_t)v6, v5, *(_QWORD *)(a1 + 56));

}

void sub_18A6C7B70(uint64_t a1, void *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_opt_class();
  objc_msgSend_propertyInfo_(v3, v4, (uint64_t)v10, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = 40;
  if (!v6)
    v9 = 48;
  objc_msgSend_addObject_(*(void **)(a1 + v9), v7, (uint64_t)v10, v8);

}

uint64_t sub_18A6C7BDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setFetchedProperties_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

void sub_18A6C7D54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6C7E24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6C8838(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  char v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a2;
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 64);
  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v4, (uint64_t)CFSTR("%@ = $PRIMARY_KEY"), v5, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v19, v7, (uint64_t)v6, v8);

  v13 = objc_msgSend_containsObject_(*(void **)(a1 + 40), v9, (uint64_t)v3, v10);
  v14 = *(void **)(a1 + 40);
  if ((v13 & 1) != 0)
  {
    v15 = v14;
  }
  else
  {
    objc_msgSend_arrayByAddingObject_(v14, v11, (uint64_t)v3, v12);
    v15 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v15;
  objc_msgSend_setFetchedProperties_(v19, v16, (uint64_t)v15, v17);

}

void sub_18A6C8A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6C8A50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  id v23;
  _QWORD v25[4];
  id v26;
  id v27;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v27 = 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_18A6C8BC4;
  v25[3] = &unk_1E1F600B0;
  v26 = *(id *)(a1 + 48);
  objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, v5, v3, v4, &v27, v25);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v27;
  objc_msgSend_nextObject(v6, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    objc_msgSend_nextObject(v6, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v19 = *(void **)(v18 + 40);
      *(_QWORD *)(v18 + 40) = 0;

      NSStringFromSelector(*(SEL *)(a1 + 72));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v21, (uint64_t)CFSTR("CKInternalErrorDomain"), 1051, CFSTR("Matched more than one database row in %@"), v20);
      v22 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v22;
    }
  }
  v23 = v7;

  return v23;
}

void sub_18A6C8BC4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend_setLimit_(v6, v3, (uint64_t)&unk_1E1FC43B8, v4);
  v5 = v6;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v5 = v6;
  }

}

void sub_18A6C9134(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  id v15;

  v7 = *(void **)(a1 + 32);
  v15 = a4;
  v8 = a3;
  objc_msgSend_addPointer_(v7, v9, a2, v10);
  objc_msgSend_addPointer_(*(void **)(a1 + 32), v11, (uint64_t)v8, v12);

  objc_msgSend_addPointer_(*(void **)(a1 + 32), v13, (uint64_t)v15, v14);
}

id sub_18A6C9288(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  id v9;
  const char *v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v20 = 0;
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = sub_18A6C936C;
  v16 = &unk_1E1F60100;
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v17 = v5;
  v18 = v6;
  v19 = *(id *)(a1 + 56);
  objc_msgSend__statementForFetchingEntriesMatchingObject_label_error_setupBlock_(v2, v7, v3, v4, &v20, &v13);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v20;
  if (!v9)
  {
    objc_msgSend__fetchPropertiesUsingStatement_inObject_matchingDBProperties_label_(*(void **)(a1 + 32), v10, (uint64_t)v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v13, v14, v15, v16, v17, v18);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v11 = v9;

  return v11;
}

void sub_18A6C936C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v22 = a2;
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6 = v3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    objc_msgSend_addObjectsFromArray_(v3, v4, v7, v5);
  }
  else
  {
    v10 = (void *)objc_opt_class();
    objc_msgSend_allPropertyNames(v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v6, v15, (uint64_t)v14, v16);

  }
  objc_msgSend_removeObjectsInArray_(v6, v8, *(_QWORD *)(a1 + 48), v9);
  objc_msgSend_setFetchedProperties_(v22, v17, (uint64_t)v6, v18);
  v21 = *(_QWORD *)(a1 + 48);
  if (v21)
    objc_msgSend_setSearchProperties_(v22, v19, v21, v20);
  objc_msgSend_setLimit_(v22, v19, (uint64_t)&unk_1E1FC43B8, v20);

}

id sub_18A6C94AC(uint64_t a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  const char *v7;
  id v8;
  _QWORD v10[5];
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v11 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_18A6C9564;
  v10[3] = &unk_1E1F60168;
  v10[4] = v3;
  objc_msgSend__statementForFetchingEntriesMatchingObject_label_error_setupBlock_(v3, a2, v4, (uint64_t)off_1E1F60148, &v11, v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v11;
  if (!v6)
  {
    objc_msgSend__fetchPropertiesUsingStatement_inObject_matchingDBProperties_label_(*(void **)(a1 + 32), v7, (uint64_t)v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), off_1E1F60148);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  v8 = v6;

  return v8;
}

void sub_18A6C9564(uint64_t a1, void *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  v3 = (void *)objc_opt_class();
  objc_msgSend_nonKeyProperties(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFetchedProperties_(v14, v8, (uint64_t)v7, v9);

  objc_msgSend_setSearchProperties_(v14, v10, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v11);
  objc_msgSend_setLimit_(v14, v12, (uint64_t)&unk_1E1FC43B8, v13);

}

uint64_t sub_18A6C977C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__predicateForMatchingProperties_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

void sub_18A6C99D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A6C99F8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    v5 = *(void **)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = a3;
    v8 = a2;
    objc_msgSend_valueForProperty_propertyInfo_inObject_(v5, v9, (uint64_t)v8, (uint64_t)v7, v6);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend_unsignedIntValue(v7, v10, v11, v12);

    objc_msgSend_bindValueColumn_type_value_(*(void **)(a1 + 48), v14, (uint64_t)v8, v13, v18);
    v15 = objc_claimAutoreleasedReturnValue();

    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    if ((v13 & 0x100) != 0 && !v18)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

  }
}

id sub_18A6C9B74(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  objc_class *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 32);
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = sub_18A6C9E38;
  v37[3] = &unk_1E1F60210;
  v37[4] = v3;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, a2, (uint64_t)off_1E1F601F0, (uint64_t)v37);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__performInsertOrUpdateStatement_usingObject_(*(void **)(a1 + 32), v5, (uint64_t)v4, *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v7, v8, v9))
  {
    objc_msgSend_db(*(void **)(a1 + 32), v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_changeCount(v13, v14, v15, v16);

    v18 = (void *)objc_opt_class();
    objc_msgSend_descriptionOfEntry_(v18, v19, *(_QWORD *)(a1 + 40), v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v22 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v23 = v22;
      v24 = (objc_class *)objc_opt_class();
      NSStringFromClass(v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138544130;
      v39 = v25;
      v40 = 2048;
      v41 = v26;
      v42 = 2114;
      v43 = v21;
      v44 = 2048;
      v45 = v17;
      _os_log_impl(&dword_18A5C5000, v23, OS_LOG_TYPE_INFO, "%{public}@(%p): INSERT (%{public}@) inserted: %lld", buf, 0x2Au);

    }
  }
  objc_msgSend_resetAndClearBindings(v4, v10, v11, v12);
  if (v6)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v27 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
    {
      v30 = *(void **)(a1 + 32);
      v31 = v27;
      objc_msgSend_logicalTableName(v30, v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromSelector(*(SEL *)(a1 + 48));
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v39 = v35;
      v40 = 2114;
      v41 = v36;
      v42 = 2114;
      v43 = v6;
      _os_log_error_impl(&dword_18A5C5000, v31, OS_LOG_TYPE_ERROR, "Table %{public}@ failed in %{public}@ - error: %{public}@", buf, 0x20u);

    }
  }
  v28 = v6;

  return v28;
}

id sub_18A6C9E38(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = (void *)objc_opt_class();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_18A6C9EF0;
  v10[3] = &unk_1E1F5FD40;
  v11 = v2;
  v4 = v2;
  objc_msgSend_enumeratePropertyDataWithBlock_(v3, v5, (uint64_t)v10, v6);
  objc_msgSend_statementForInserting_inTable_(CKSQLiteCompiledStatement, v7, (uint64_t)v4, *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t sub_18A6C9EF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

id sub_18A6C9FC4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  objc_class *v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  void *v30;
  id v31;
  void *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id (*v42)(uint64_t);
  void *v43;
  void *v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v40 = MEMORY[0x1E0C809B0];
  v41 = 3221225472;
  v42 = sub_18A6CA2C8;
  v43 = &unk_1E1F60260;
  v3 = *(void **)(a1 + 40);
  v44 = *(void **)(a1 + 32);
  v45 = v3;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v44, v4, v2, (uint64_t)&v40);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__performInsertOrUpdateStatement_usingObject_(*(void **)(a1 + 32), v6, (uint64_t)v5, *(_QWORD *)(a1 + 48), v40, v41, v42, v43, v44);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v8, v9, v10))
  {
    objc_msgSend_db(*(void **)(a1 + 32), v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend_changeCount(v14, v15, v16, v17);

    v19 = (void *)objc_opt_class();
    objc_msgSend_descriptionOfEntry_(v19, v20, *(_QWORD *)(a1 + 48), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v23 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v24 = v23;
      v25 = (objc_class *)objc_opt_class();
      NSStringFromClass(v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = *(void **)(a1 + 32);
      sub_18A6C2BC8(*(uint64_t **)(a1 + 56), v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v47 = v26;
      v48 = 2048;
      v49 = v27;
      v50 = 2114;
      v51 = v22;
      v52 = 2112;
      v53 = v29;
      v54 = 2048;
      v55 = v18;
      _os_log_impl(&dword_18A5C5000, v24, OS_LOG_TYPE_INFO, "%{public}@(%p): UPSERT (%{public}@) label: %@ inserted/modified: %lld", buf, 0x34u);

    }
  }
  objc_msgSend_resetAndClearBindings(v5, v11, v12, v13);
  if (v7)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v30 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
    {
      v33 = *(void **)(a1 + 32);
      v34 = v30;
      objc_msgSend_logicalTableName(v33, v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromSelector(*(SEL *)(a1 + 64));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v47 = v38;
      v48 = 2114;
      v49 = v39;
      v50 = 2114;
      v51 = v7;
      _os_log_error_impl(&dword_18A5C5000, v34, OS_LOG_TYPE_ERROR, "Table %{public}@ failed in %{public}@ - error: %{public}@", buf, 0x20u);

    }
  }
  v31 = v7;

  return v31;
}

id sub_18A6CA2C8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = (void *)objc_opt_class();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_18A6CA388;
  v11[3] = &unk_1E1F5FD40;
  v12 = v2;
  v4 = v2;
  objc_msgSend_enumeratePropertyDataWithBlock_(v3, v5, (uint64_t)v11, v6);
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend_statementForInserting_orUpdating_inTable_(CKSQLiteCompiledStatement, v7, (uint64_t)v4, *(_QWORD *)(a1 + 40), v8);
  else
    objc_msgSend_statementForInserting_orUpdating_inTable_(CKSQLiteCompiledStatement, v7, (uint64_t)v4, (uint64_t)v4, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

uint64_t sub_18A6CA388(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

uint64_t sub_18A6CA500(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__predicateForMatchingProperties_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18A6CA7D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("%@=$VALUE"), a4, *(_QWORD *)(a1 + 32));
}

void sub_18A6CA8F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if ((objc_msgSend_unsignedIntValue(v5, v6, v7, v8) & 0x40) == 0)
    objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 32), v9, qword_1EDF6F738, (uint64_t)v10, v5, *(_QWORD *)(a1 + 40));

}

uint64_t sub_18A6CAB90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__predicateForMatchingProperties_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

void sub_18A6CADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CADDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  objc_class *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v29[5];
  id v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_18A6CB000;
  v31[3] = &unk_1E1F60260;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v32 = v5;
  v33 = v6;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v4, v7, v2, (uint64_t)v31);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0;
  v11 = objc_msgSend_step_(v8, v9, (uint64_t)&v30, v10);
  v12 = v30;
  v16 = v12;
  if (v11 && !v12)
  {
    v29[0] = v3;
    v29[1] = 3221225472;
    v29[2] = sub_18A6CB014;
    v29[3] = &unk_1E1F60330;
    v29[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend_enumerateResultColumnsWithBlock_(v8, v13, (uint64_t)v29, v15);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v13, v14, v15) && !v16)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v20 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v21 = v20;
      v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(a1 + 40);
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138544130;
      v35 = v23;
      v36 = 2048;
      v37 = v24;
      v38 = 2114;
      v39 = v25;
      v40 = 2114;
      v41 = v26;
      _os_log_impl(&dword_18A5C5000, v21, OS_LOG_TYPE_INFO, "%{public}@(%p): FETCH MIN(%{public}@) fetched: %{public}@", buf, 0x2Au);

    }
  }
  objc_msgSend_resetAndClearBindings(v8, v17, v18, v19);
  v27 = v16;

  return v27;
}

uint64_t sub_18A6CB000(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](CKSQLiteCompiledStatement, sel_statementForFetchingMinimumValueForColumn_inTable_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6CB014(uint64_t a1, int a2, int a3, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_18A6CB244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CB268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  objc_class *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v29[5];
  id v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_18A6CB48C;
  v31[3] = &unk_1E1F60260;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v32 = v5;
  v33 = v6;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v4, v7, v2, (uint64_t)v31);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0;
  v11 = objc_msgSend_step_(v8, v9, (uint64_t)&v30, v10);
  v12 = v30;
  v16 = v12;
  if (v11 && !v12)
  {
    v29[0] = v3;
    v29[1] = 3221225472;
    v29[2] = sub_18A6CB4A0;
    v29[3] = &unk_1E1F60330;
    v29[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend_enumerateResultColumnsWithBlock_(v8, v13, (uint64_t)v29, v15);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v13, v14, v15) && !v16)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v20 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v21 = v20;
      v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(a1 + 40);
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138544130;
      v35 = v23;
      v36 = 2048;
      v37 = v24;
      v38 = 2114;
      v39 = v25;
      v40 = 2114;
      v41 = v26;
      _os_log_impl(&dword_18A5C5000, v21, OS_LOG_TYPE_INFO, "%{public}@(%p): FETCH MAX(%{public}@) fetched: %{public}@", buf, 0x2Au);

    }
  }
  objc_msgSend_resetAndClearBindings(v8, v17, v18, v19);
  v27 = v16;

  return v27;
}

uint64_t sub_18A6CB48C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](CKSQLiteCompiledStatement, sel_statementForFetchingMaximumValueForColumn_inTable_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6CB4A0(uint64_t a1, int a2, int a3, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_18A6CB738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CB764(_QWORD *a1)
{
  CKSQLiteTableSearchEnumeratorSetupHelper *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v30;

  v2 = objc_alloc_init(CKSQLiteTableSearchEnumeratorSetupHelper);
  v3 = (void *)objc_opt_class();
  objc_msgSend_allPropertyNames(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFetchedProperties_(v2, v8, (uint64_t)v7, v9);
  objc_msgSend_setSearchProperties_(v2, v10, (uint64_t)v7, v11);
  v15 = a1[5];
  if (v15)
    (*(void (**)(uint64_t, CKSQLiteTableSearchEnumeratorSetupHelper *))(v15 + 16))(v15, v2);
  v16 = (void *)a1[4];
  objc_msgSend_fetchedProperties(v2, v12, v13, v14);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_searchProperties(v2, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0;
  objc_msgSend_statementForFetchingProperties_inEntriesMatchingColumns_error_(v16, v22, (uint64_t)v17, (uint64_t)v21, &v30);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v30;

  objc_msgSend_setupStatement_(v2, v25, (uint64_t)v23, v26);
  v27 = *(_QWORD *)(a1[6] + 8);
  v28 = *(void **)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v24;

  return v23;
}

id sub_18A6CBABC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v21 = 0;
  (*(void (**)(void))(v2 + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  if (!v4)
  {
    v20 = 0;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v5 = v3;
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v16, (uint64_t)v22, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v17;
LABEL_4:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v5);
        (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
        objc_msgSend_error(v5, v11, v12, v13, (_QWORD)v16);
        v4 = (id)objc_claimAutoreleasedReturnValue();
        if (v4 || v20)
          break;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v14, (uint64_t)&v16, (uint64_t)v22, 16);
          if (v8)
            goto LABEL_4;
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      v4 = 0;
    }

  }
  return v4;
}

uint64_t sub_18A6CBC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_entryEnumerator_, a2, a4);
}

uint64_t sub_18A6CBD9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 32), a2, a4, (uint64_t)a2, a3, *(_QWORD *)(a1 + 40));
}

id sub_18A6CBFAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  id *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  id v49;
  void *v51;
  void *v52;
  void *v53;
  objc_class *v54;
  void *v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  id v61;
  id obj;
  _QWORD v63[4];
  id v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t);
  id v72;
  uint8_t v73[128];
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  void *v81;
  __int16 v82;
  id v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;

  v1 = a1;
  v86 = *MEMORY[0x1E0C80C00];
  v67 = 0;
  v68 = &v67;
  v69 = 0x3032000000;
  v70 = sub_18A6C4188;
  v71 = sub_18A6C4198;
  v72 = 0;
  v2 = *(_QWORD *)(a1 + 56);
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = sub_18A6CC470;
  v63[3] = &unk_1E1F60410;
  v3 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(v1 + 32);
  v64 = v4;
  v65 = v5;
  v66 = &v67;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v63);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  while (1)
  {
    v9 = (id *)(v68 + 5);
    obj = (id)v68[5];
    v10 = objc_msgSend_step_(v53, v7, (uint64_t)&obj, v8);
    objc_storeStrong(v9, obj);
    if (!v10)
      break;
    v14 = (id *)(v68 + 5);
    if (v68[5])
      break;
    v15 = *(void **)(v1 + 32);
    v61 = 0;
    v16 = (void *)objc_msgSend_newEntryObjectFromStatement_error_(v15, v11, (uint64_t)v53, (uint64_t)&v61);
    objc_storeStrong(v14, v61);
    if (v16)
      objc_msgSend_addObject_(*(void **)(v1 + 48), v17, (uint64_t)v16, v18);

  }
  if (objc_msgSend_logOperations(*(void **)(v1 + 32), v11, v12, v13))
  {
    objc_msgSend_fetchedColumns(v53, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_componentsJoinedByString_(v22, v23, (uint64_t)CFSTR(", "), v24);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_searchBindingsDescription(v53, v25, v26, v27);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = (objc_class *)objc_opt_class();
    NSStringFromClass(v28);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = v28;
    v55 = v22;
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v29 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      v31 = *(_QWORD *)(v1 + 32);
      sub_18A6C2BC8(*(uint64_t **)(v1 + 56), v30);
      v32 = (id)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend_count(*(void **)(v1 + 48), v33, v34, v35);
      *(_DWORD *)buf = 138544642;
      v75 = v56;
      v76 = 2048;
      v77 = v31;
      v78 = 2114;
      v79 = v52;
      v80 = 2114;
      v81 = v51;
      v82 = 2114;
      v83 = v32;
      v84 = 2048;
      v85 = v36;
      _os_log_impl(&dword_18A5C5000, v29, OS_LOG_TYPE_INFO, "%{public}@(%p): FETCH (%{public}@) WHERE %{public}@, label: %{public}@ fetched %ld entries:", buf, 0x3Eu);

    }
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v37 = *(id *)(v1 + 48);
    v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v57, (uint64_t)v73, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v58;
      do
      {
        v41 = 0;
        do
        {
          if (*(_QWORD *)v58 != v40)
            objc_enumerationMutation(v37);
          v42 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * v41);
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v43 = (id)ck_log_facility_sql;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            v45 = v1;
            v46 = *(_QWORD *)(v1 + 32);
            objc_msgSend_descriptionOfProperties_from_(v54, v44, (uint64_t)v55, v42);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v75 = v56;
            v76 = 2048;
            v77 = v46;
            v78 = 2114;
            v79 = v47;
            _os_log_impl(&dword_18A5C5000, v43, OS_LOG_TYPE_INFO, "%{public}@(%p):    %{public}@", buf, 0x20u);

            v1 = v45;
          }

          ++v41;
        }
        while (v39 != v41);
        v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v48, (uint64_t)&v57, (uint64_t)v73, 16);
      }
      while (v39);
    }

  }
  objc_msgSend_resetAndClearBindings(v53, v19, v20, v21);
  v49 = (id)v68[5];

  _Block_object_dispose(&v67, 8);
  return v49;
}

void sub_18A6CC420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CC470(_QWORD *a1)
{
  void *v2;
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v17;

  v2 = (void *)a1[4];
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v5 = (void *)objc_opt_class();
    objc_msgSend_allPropertyNames(v5, v6, v7, v8);
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v3;
  v10 = (void *)a1[5];
  v17 = 0;
  objc_msgSend_statementForFetchingProperties_inEntriesMatchingColumns_error_(v10, v4, (uint64_t)v9, 0, &v17);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v17;
  v13 = *(_QWORD *)(a1[6] + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;
  v15 = v12;

  return v11;
}

void sub_18A6CC6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CC710(uint64_t a1, const char *a2)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  char v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  _QWORD v14[5];

  v3 = *(void **)(a1 + 32);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_18A6CC7C0;
  v14[3] = &unk_1E1F60210;
  v14[4] = v3;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, a2, (uint64_t)off_1E1F60470, (uint64_t)v14);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  v7 = objc_msgSend_step_(v4, v5, (uint64_t)&v13, v6);
  v8 = v13;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
  objc_msgSend_resetAndClearBindings(v4, v9, v10, v11);

  return v8;
}

id sub_18A6CC7C0(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;

  objc_msgSend_statementForFetchingColumns_inTable_(CKSQLiteCompiledStatement, a2, 0, *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setLimit_(v2, v3, (uint64_t)&unk_1E1FC43D0, v4);
  return v2;
}

void sub_18A6CC9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CC9E4(uint64_t a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  objc_class *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v23[5];
  id v24;
  _QWORD v25[5];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = MEMORY[0x1E0C809B0];
  v4 = *(void **)(a1 + 32);
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_18A6CCBD8;
  v25[3] = &unk_1E1F60210;
  v25[4] = v4;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v4, a2, (uint64_t)off_1E1F604B0, (uint64_t)v25);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0;
  objc_msgSend_step_(v5, v6, (uint64_t)&v24, v7);
  v11 = v24;
  if (!v11)
  {
    v23[0] = v3;
    v23[1] = 3221225472;
    v23[2] = sub_18A6CCBEC;
    v23[3] = &unk_1E1F60330;
    v23[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend_enumerateResultColumnsWithBlock_(v5, v8, (uint64_t)v23, v10);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v8, v9, v10))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v15 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v16 = v15;
      v17 = (objc_class *)objc_opt_class();
      NSStringFromClass(v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138543874;
      v27 = v18;
      v28 = 2048;
      v29 = v19;
      v30 = 2048;
      v31 = v20;
      _os_log_impl(&dword_18A5C5000, v16, OS_LOG_TYPE_INFO, "%{public}@(%p): SELECT COUNT (*) returns: %lld", buf, 0x20u);

    }
  }
  objc_msgSend_resetAndClearBindings(v5, v12, v13, v14);
  v21 = v11;

  return v21;
}

uint64_t sub_18A6CCBD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_statementForCountingRowsInTable_(CKSQLiteCompiledStatement, a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_18A6CCBEC(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result;

  result = objc_msgSend_unsignedLongValue(a4, a2, a3, (uint64_t)a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_18A6CCFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CCFCC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  objc_class *v33;
  id v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  uint64_t v38;
  id v39;
  id obj;
  _QWORD v42[4];
  id v43;
  uint64_t v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;
  uint8_t buf[4];
  id v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = &v47;
  v49 = 0x3032000000;
  v50 = sub_18A6C4188;
  v51 = sub_18A6C4198;
  v52 = 0;
  v2 = *(_QWORD *)(a1 + 80);
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_18A6CD32C;
  v42[3] = &unk_1E1F604D0;
  v3 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v43 = v4;
  v44 = v5;
  v45 = *(id *)(a1 + 64);
  v46 = &v47;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v3, v6, v2, (uint64_t)v42);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v7;
  if (!v48[5])
  {
    objc_msgSend_setSearchValues_(v7, v8, *(_QWORD *)(a1 + 48), v10);
    objc_msgSend__bindProperties_valueObject_inStatement_includePrimaryKeys_(*(void **)(a1 + 32), v12, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), v11, 0);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v48[5];
    v48[5] = v13;

    if (!v48[5])
    {
      objc_msgSend_db(*(void **)(a1 + 32), v8, v9, v10);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (id *)(v48 + 5);
      obj = (id)v48[5];
      objc_msgSend_step_(v11, v17, (uint64_t)&obj, v18);
      objc_storeStrong(v16, obj);
      if (!v48[5])
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend_changeCount(v15, v19, v20, v21);

    }
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v8, v9, v10))
  {
    v25 = (void *)objc_opt_class();
    objc_msgSend_descriptionOfProperties_from_(v25, v26, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_searchBindingsDescription(v11, v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v32 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      v33 = (objc_class *)objc_opt_class();
      NSStringFromClass(v33);
      v34 = (id)objc_claimAutoreleasedReturnValue();
      v35 = *(_QWORD *)(a1 + 32);
      sub_18A6C2BC8(*(uint64_t **)(a1 + 80), v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      *(_DWORD *)buf = 138544642;
      v54 = v34;
      v55 = 2048;
      v56 = v35;
      v57 = 2114;
      v58 = v27;
      v59 = 2114;
      v60 = v31;
      v61 = 2114;
      v62 = v37;
      v63 = 2048;
      v64 = v38;
      _os_log_impl(&dword_18A5C5000, v32, OS_LOG_TYPE_INFO, "%{public}@(%p): UPDATE SET (%{public}@) WHERE %{public}@, label: %{public}@, changeCount: %lld", buf, 0x3Eu);

    }
  }
  objc_msgSend_resetAndClearBindings(v11, v22, v23, v24);
  v39 = (id)v48[5];

  _Block_object_dispose(&v47, 8);
  return v39;
}

void sub_18A6CD2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CD32C(uint64_t *a1, const char *a2)
{
  void *v3;
  const char *v4;
  void *v5;

  objc_msgSend_statementForUpdatingColumns_inTable_(CKSQLiteCompiledStatement, a2, a1[4], a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addPredicateToStatement_predicate_((void *)a1[5], v4, (uint64_t)v3, a1[6]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v5);

    v3 = 0;
  }

  return v3;
}

void sub_18A6CD5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CD5E0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  objc_class *v22;
  id v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id obj;
  _QWORD v31[5];
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = &v34;
  v36 = 0x3032000000;
  v37 = sub_18A6C4188;
  v38 = sub_18A6C4198;
  v39 = 0;
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_18A6CD8B8;
  v31[3] = &unk_1E1F60560;
  v31[4] = v2;
  v32 = *(id *)(a1 + 48);
  v33 = &v34;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v2, v4, v3, (uint64_t)v31);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v5;
  if (!v35[5])
  {
    objc_msgSend_setSearchValues_(v5, v6, *(_QWORD *)(a1 + 40), v8);
    v10 = (id *)(v35 + 5);
    obj = (id)v35[5];
    objc_msgSend_step_(v9, v11, (uint64_t)&obj, v12);
    objc_storeStrong(v10, obj);
    if (!v35[5])
    {
      objc_msgSend_db(*(void **)(a1 + 32), v6, v7, v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend_changeCount(v13, v14, v15, v16);

    }
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v6, v7, v8))
  {
    objc_msgSend_searchBindingsDescription(v9, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v21 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      v23 = (id)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 32);
      sub_18A6C2BC8(*(uint64_t **)(a1 + 64), v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      *(_DWORD *)buf = 138544386;
      v41 = v23;
      v42 = 2048;
      v43 = v24;
      v44 = 2114;
      v45 = v20;
      v46 = 2114;
      v47 = v26;
      v48 = 2048;
      v49 = v27;
      _os_log_impl(&dword_18A5C5000, v21, OS_LOG_TYPE_INFO, "%{public}@(%p): DELETE WHERE %{public}@, label: %{public}@, removed %lld", buf, 0x34u);

    }
  }
  objc_msgSend_resetAndClearBindings(v9, v17, v18, v19);
  v28 = (id)v35[5];

  _Block_object_dispose(&v34, 8);
  return v28;
}

void sub_18A6CD890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CD8B8(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  void *v7;

  objc_msgSend_statementForDeletingInTable_(CKSQLiteCompiledStatement, a2, a1[4], a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addPredicateToStatement_predicate_((void *)a1[4], v6, (uint64_t)v5, a1[5]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v7);

    v5 = 0;
  }

  return v5;
}

void sub_18A6CDB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CDBBC(uint64_t *a1)
{
  id *v1;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  CKSQLiteTableSearchEnumeratorSetupHelper *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  _QWORD v30[4];
  id v31;

  v6 = objc_alloc_init(CKSQLiteTableSearchEnumeratorSetupHelper);
  v7 = a1[5];
  if (v7)
    (*(void (**)(uint64_t, CKSQLiteTableSearchEnumeratorSetupHelper *))(v7 + 16))(v7, v6);
  objc_msgSend_fetchedProperties(v6, v3, v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    v10 = v8;
  }
  else
  {
    v11 = (void *)objc_opt_class();
    objc_msgSend_allPropertyNames(v11, v12, v13, v14);
    v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  v15 = v10;

  objc_msgSend_statementForFetchingColumns_inTable_(CKSQLiteCompiledStatement, v16, (uint64_t)v15, a1[4]);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_searchPredicate(v6, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v21;
  v24 = (void *)a1[4];
  if (v21)
  {
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = sub_18A6CDD2C;
    v30[3] = &unk_1E1F602E0;
    v25 = v30;
    v1 = &v31;
    v31 = v21;
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend_addPredicateToStatement_predicate_(v24, v22, (uint64_t)v17, (uint64_t)v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setupStatement_(v6, v27, (uint64_t)v17, v28);
  if (v26)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v26);

    v17 = 0;
  }
  if (v23)

  return v17;
}

id sub_18A6CDD2C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_18A6CDF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CDF70(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id *v11;
  const char *v12;
  uint64_t v13;
  id v14;
  _QWORD v16[5];
  id obj;
  _QWORD v18[5];
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = sub_18A6C4188;
  v25 = sub_18A6C4198;
  v26 = 0;
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_18A6CE100;
  v18[3] = &unk_1E1F60560;
  v18[4] = v2;
  v19 = *(id *)(a1 + 48);
  v20 = &v21;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v2, v5, v3, (uint64_t)v18);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v6;
  if (!v22[5])
  {
    objc_msgSend_setSearchValues_(v6, v7, *(_QWORD *)(a1 + 40), v9);
    v11 = (id *)(v22 + 5);
    obj = (id)v22[5];
    objc_msgSend_step_(v10, v12, (uint64_t)&obj, v13);
    objc_storeStrong(v11, obj);
    if (!v22[5])
    {
      v16[0] = v4;
      v16[1] = 3221225472;
      v16[2] = sub_18A6CE178;
      v16[3] = &unk_1E1F60330;
      v16[4] = *(_QWORD *)(a1 + 56);
      objc_msgSend_enumerateResultColumnsWithBlock_(v10, v7, (uint64_t)v16, v9);
    }
  }
  objc_msgSend_resetAndClearBindings(v10, v7, v8, v9);
  v14 = (id)v22[5];

  _Block_object_dispose(&v21, 8);
  return v14;
}

void sub_18A6CE0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CE100(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  void *v7;

  objc_msgSend_statementForCountingRowsInTable_(CKSQLiteCompiledStatement, a2, a1[4], a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addPredicateToStatement_predicate_((void *)a1[4], v6, (uint64_t)v5, a1[5]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v7);

    v5 = 0;
  }

  return v5;
}

uint64_t sub_18A6CE178(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result;

  result = objc_msgSend_unsignedLongValue(a4, a2, a3, (uint64_t)a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_18A6CE3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CE414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  _QWORD v18[5];
  id obj;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;

  v25 = 0;
  v26 = &v25;
  v27 = 0x3032000000;
  v28 = sub_18A6C4188;
  v29 = sub_18A6C4198;
  v30 = 0;
  v2 = *(_QWORD *)(a1 + 72);
  v3 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_18A6CE5B4;
  v20[3] = &unk_1E1F604D0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v21 = v5;
  v22 = v6;
  v23 = *(id *)(a1 + 56);
  v24 = &v25;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v4, v7, v2, (uint64_t)v20);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v8;
  if (!v26[5])
  {
    objc_msgSend_setSearchValues_(v8, v9, *(_QWORD *)(a1 + 48), v11);
    v13 = (id *)(v26 + 5);
    obj = (id)v26[5];
    objc_msgSend_step_(v12, v14, (uint64_t)&obj, v15);
    objc_storeStrong(v13, obj);
    if (!v26[5])
    {
      v18[0] = v3;
      v18[1] = 3221225472;
      v18[2] = sub_18A6CE62C;
      v18[3] = &unk_1E1F60330;
      v18[4] = *(_QWORD *)(a1 + 64);
      objc_msgSend_enumerateResultColumnsWithBlock_(v12, v9, (uint64_t)v18, v11);
    }
  }
  objc_msgSend_resetAndClearBindings(v12, v9, v10, v11);
  v16 = (id)v26[5];

  _Block_object_dispose(&v25, 8);
  return v16;
}

void sub_18A6CE59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CE5B4(uint64_t *a1, const char *a2)
{
  void *v3;
  const char *v4;
  void *v5;

  objc_msgSend_statementForSummingColumn_inTable_(CKSQLiteCompiledStatement, a2, a1[4], a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addPredicateToStatement_predicate_((void *)a1[5], v4, (uint64_t)v3, a1[6]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v5);

    v3 = 0;
  }

  return v3;
}

uint64_t sub_18A6CE62C(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result;

  result = objc_msgSend_longValue(a4, a2, a3, (uint64_t)a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_18A6CE9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CEA20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id *v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  id v27;
  _QWORD v29[5];
  id obj;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  id v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = &v36;
  v38 = 0x3032000000;
  v39 = sub_18A6C4188;
  v40 = sub_18A6C4198;
  v41 = 0;
  v2 = *(_QWORD *)(a1 + 72);
  v3 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_18A6CED34;
  v31[3] = &unk_1E1F604D0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v32 = v5;
  v33 = v6;
  v34 = *(id *)(a1 + 56);
  v35 = &v36;
  objc_msgSend_compiledStatementWithLabel_creationBlock_(v4, v7, v2, (uint64_t)v31);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v8;
  if (!v37[5])
    objc_msgSend_setSearchValues_(v8, v9, *(_QWORD *)(a1 + 48), v11);
  while (1)
  {
    v13 = (id *)(v37 + 5);
    if (v37[5])
      break;
    obj = 0;
    v14 = objc_msgSend_step_(v12, v9, (uint64_t)&obj, v11);
    objc_storeStrong(v13, obj);
    if (!v14)
      break;
    v29[0] = v3;
    v29[1] = 3221225472;
    v29[2] = sub_18A6CEDAC;
    v29[3] = &unk_1E1F60330;
    v29[4] = *(_QWORD *)(a1 + 64);
    objc_msgSend_enumerateResultColumnsWithBlock_(v12, v9, (uint64_t)v29, v11);
  }
  if (objc_msgSend_logOperations(*(void **)(a1 + 32), v9, v10, v11))
  {
    objc_msgSend_searchBindingsDescription(v12, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v19 = (id)ck_log_facility_sql;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = (objc_class *)objc_opt_class();
      NSStringFromClass(v20);
      v21 = (id)objc_claimAutoreleasedReturnValue();
      v23 = *(_QWORD *)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      sub_18A6C2BC8(*(uint64_t **)(a1 + 72), v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      *(_DWORD *)buf = 138544642;
      v43 = v21;
      v44 = 2048;
      v45 = v23;
      v46 = 2114;
      v47 = v22;
      v48 = 2114;
      v49 = v18;
      v50 = 2114;
      v51 = v25;
      v52 = 2048;
      v53 = v26;
      _os_log_impl(&dword_18A5C5000, v19, OS_LOG_TYPE_INFO, "%{public}@(%p): SELECT LENGTH (%{public}@) WHERE %{public}@, label: %{public}@, size: %lld", buf, 0x3Eu);

    }
  }
  objc_msgSend_resetAndClearBindings(v12, v15, v16, v17);
  v27 = (id)v37[5];

  _Block_object_dispose(&v36, 8);
  return v27;
}

void sub_18A6CED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6CED34(uint64_t *a1, const char *a2)
{
  void *v3;
  const char *v4;
  void *v5;

  objc_msgSend_statementForSizingColumn_inTable_(CKSQLiteCompiledStatement, a2, a1[4], a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addPredicateToStatement_predicate_((void *)a1[5], v4, (uint64_t)v3, a1[6]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v5);

    v3 = 0;
  }

  return v3;
}

uint64_t sub_18A6CEDAC(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t result;

  result = objc_msgSend_longValue(a4, a2, a3, (uint64_t)a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

SEL sub_18A6CEEF8(objc_class *a1, const char *a2)
{
  objc_property *Property;
  char *v4;
  char *v5;
  SEL v6;
  size_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  Property = class_getProperty(a1, a2);
  v4 = property_copyAttributeValue(Property, "S");
  if (v4)
  {
    v5 = v4;
    v6 = sel_registerName(v4);
    free(v5);
    return v6;
  }
  else
  {
    v8 = strlen(a2);
    v12 = v8;
    v13 = v8 + 3;
    v14 = v8 + 5;
    if (v8 + 5 >= 0x40)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10, v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v17, (uint64_t)"SEL setterForProperty(__unsafe_unretained Class, const char *)", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v16, v20, (uint64_t)v19, (uint64_t)CFSTR("CKSQLiteTable.m"), 51, CFSTR("property name too long: %s"), a2);

    }
    MEMORY[0x1E0C80A78](v8);
    v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_WORD *)v15 = 25971;
    v15[2] = 116;
    memcpy(v15 + 3, a2, v12);
    v15[3] = __toupper(v15[3]);
    v15[v13] = 58;
    v15[v12 + 4] = 0;
    return sel_registerName(v15);
  }
}

BOOL CKDPSiteIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_18A6CF8F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 520);
    *(_QWORD *)(v8 + 520) = v7;

  }
}

void sub_18A6CFA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A6CFAA0(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A6CFAC8(uint64_t a1)
{

}

void sub_18A6CFAD0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 520));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6CFC2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 528);
    *(_QWORD *)(v8 + 528) = v7;

  }
}

void sub_18A6CFDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6CFDD4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 528));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6CFF30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 536) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 536);
    *(_QWORD *)(v8 + 536) = v7;

  }
}

void sub_18A6D00C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6D00D8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 536));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6D23FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6D241C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6D242C(uint64_t a1)
{

}

id sub_18A6D2434(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  id v23;
  id v24;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v24 = 0;
  v19 = MEMORY[0x1E0C809B0];
  v20 = 3221225472;
  v21 = sub_18A6D2514;
  v22 = &unk_1E1F60048;
  v23 = *(id *)(a1 + 48);
  objc_msgSend_entriesWithValues_label_error_setupBlock_(v2, v5, v3, v4, &v24, &v19);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v24;
  objc_msgSend_allObjects(v6, v8, v9, v10, v19, v20, v21, v22);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  objc_msgSend_error(v6, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_18A6D2514(uint64_t a1, void *a2)
{
  void *v3;
  __CFString *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  id v12;

  v3 = (void *)MEMORY[0x1E0CB3880];
  v4 = CKSQLiteTOCTableEntryGroupIDPropertyName;
  v12 = a2;
  objc_msgSend_predicateWithFormat_(v3, v5, (uint64_t)CFSTR("%@ = $ID"), v6, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v12, v8, (uint64_t)v7, v9);

  objc_msgSend_setFetchedProperties_(v12, v10, *(_QWORD *)(a1 + 32), v11);
}

void sub_18A6D27E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A6D2804(_QWORD *a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v18;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v18 = 0;
  objc_msgSend_entriesWithValues_label_error_setupBlock_(v3, a2, v4, (uint64_t)off_1E1F60648, &v18, &unk_1E1F58358);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v18;
  objc_msgSend_nextObject(v5, v7, v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1[6] + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  objc_msgSend_error(v5, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_18A6D28A4(uint64_t a1, void *a2)
{
  void *v2;
  __CFString *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  id v9;

  v2 = (void *)MEMORY[0x1E0CB3880];
  v3 = CKSQLiteTOCTableEntryGroupIDPropertyName;
  v4 = a2;
  objc_msgSend_predicateWithFormat_(v2, v5, (uint64_t)CFSTR("%@ = $ID AND %@ = $NAME"), v6, v3, CFSTR("logicalTableName"));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v4, v7, (uint64_t)v9, v8);

}

id sub_18A6D2B28(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  id v19;
  objc_super v20;

  v2 = *(_QWORD *)(a1 + 32);
  v20.receiver = *(id *)(a1 + 40);
  v20.super_class = (Class)CKSQLiteTOCTableGroupTable;
  objc_msgSendSuper2(&v20, sel_deleteObject_, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v5 = *(void **)(a1 + 40);
    v19 = 0;
    objc_msgSend_entriesWithValues_label_error_setupBlock_(v5, v3, 0, (uint64_t)off_1E1F606C0, &v19, &unk_1E1F606D8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (unint64_t)v19;
    objc_msgSend_nextObject(v6, v8, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11 | v7)
    {

    }
    else
    {
      objc_msgSend_error(v6, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v15)
        objc_msgSend_setIsEmpty_(*(void **)(*(_QWORD *)(a1 + 40) + 104), v16, 1, v17);
    }

  }
  return v4;
}

void sub_18A6D2C18(uint64_t a1, void *a2)
{
  void *v2;
  __CFString *v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  id v11;

  v2 = (void *)MEMORY[0x1E0CB3880];
  v3 = CKSQLiteTOCTableGroupTableGroupIDPropertyName;
  v11 = a2;
  objc_msgSend_predicateWithFormat_(v2, v4, (uint64_t)CFSTR("%@ > 1"), v5, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v11, v7, (uint64_t)v6, v8);

  objc_msgSend_setLimit_(v11, v9, (uint64_t)&unk_1E1FC44C0, v10);
}

void sub_18A6D3264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6D327C(uint64_t a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  const __CFString *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v25 = CFSTR("CLASS");
  v26[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v26, (uint64_t)&v25, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_entriesWithValues_label_error_setupBlock_(*(void **)(a1 + 40), v5, (uint64_t)v4, (uint64_t)off_1E1F60758, 0, &unk_1E1F60770);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v20, (uint64_t)v24, 16);
  if (v8)
  {
    v12 = v8;
    v13 = *(_QWORD *)v21;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v21 != v13)
          objc_enumerationMutation(v6);
        v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        objc_msgSend_name(*(void **)(*((_QWORD *)&v20 + 1) + 8 * v14), v9, v10, v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v15, v17, (uint64_t)v16, v18);

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v20, (uint64_t)v24, 16);
    }
    while (v12);
  }

  return 0;
}

void sub_18A6D33F0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v13[0] = CKSQLiteTOCTableGroupTableGroupNamePropertyName;
  v2 = (void *)MEMORY[0x1E0C99D20];
  v3 = a2;
  objc_msgSend_arrayWithObjects_count_(v2, v4, (uint64_t)v13, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setFetchedProperties_(v3, v6, (uint64_t)v5, v7);

  objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], v8, (uint64_t)CFSTR("%@ = $CLASS"), v9, CKSQLiteTOCTableEntryCreatingClassName);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSearchPredicate_(v3, v11, (uint64_t)v10, v12);

}

uint64_t sub_18A6D3880(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_executeSQL_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18A6D388C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_executeSQL_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18A6D3D2C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_shouldReadAssetContentUsingClientProxy(a3, a2, (uint64_t)a3, a4);
}

const __CFString *CKStringFromServerEnvironment(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_1E1F613F0[a1];
}

uint64_t CKServerEnvironmentFromString(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend_lowercaseString(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v4, v5, (uint64_t)CFSTR("icloud"), v6))
  {
    objc_msgSend_substringWithRange_(v4, v7, 6, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend_integerValue(v8, v9, v10, v11);
    if ((unint64_t)(v12 - 1) >= 3)
      v13 = 0;
    else
      v13 = v12;

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

const __CFString *CKStringFromCKMMCSEncryptionSupport(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E1F61410[a1 - 1];
}

const __CFString *CKStringFromAccountChangeType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_1E1F61428[a1 - 1];
}

const __CFString *CKStringFromApplicationPermissionStatus(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown status");
  else
    return off_1E1F61478[a1];
}

const __CFString *CKStringFromDeviceCount(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 1)
    v1 = CFSTR("Single");
  if (a1 == 2)
    return CFSTR("Multiple");
  else
    return v1;
}

id CKAccountChangedNotificationName()
{
  return CKPrefixedNotificationName(CFSTR("CKAccountChangedNotification"));
}

uint64_t sub_18A6D4000(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_invalidateCachedAccountInfo(CKAccountInfo, a2, a3, a4);
}

id sub_18A6D400C()
{
  objc_opt_self();
  if (qword_1ECD96AA8 != -1)
    dispatch_once(&qword_1ECD96AA8, &unk_1E1F608E8);
  return (id)qword_1ECD96AA0;
}

void sub_18A6D4050(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  NSObject *v4;
  id *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  os_activity_scope_state_s state;
  uint8_t v23[128];
  uint8_t buf[4];
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18A5C5000, "CKStatusReport", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v2, &state);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v25 = WeakRetained;
      _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Building status report for %@", buf, 0xCu);
    }
    v5 = (id *)WeakRetained;
    objc_sync_enter(v5);
    sub_18A7011F8(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    sub_18A6D42F0(v6);

    sub_18A7011F8(v5[8]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    sub_18A6D42F0(v7);

    sub_18A7011F8(v5[9]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    sub_18A6D42F0(v8);

    sub_18A7011F8(v5[10]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    sub_18A6D42F0(v9);

    sub_18A7011F8(v5[11]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    sub_18A6D42F0(v10);

    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v11 = v5[18];
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v18, (uint64_t)v23, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v19 != v14)
            objc_enumerationMutation(v11);
          sub_18A7011F8(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          sub_18A6D42F0(v16);

        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v17, (uint64_t)&v18, (uint64_t)v23, 16);
      }
      while (v13);
    }

    objc_sync_exit(v5);
  }

  os_activity_scope_leave(&state);
}

void sub_18A6D42C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  void *v17;

  objc_sync_exit(v17);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6D42F0(void *a1)
{
  id v1;
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v3 = 138543362;
      v4 = v1;
      _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Status report from notification: %{public}@", (uint8_t *)&v3, 0xCu);
    }
  }

}

void sub_18A6D4508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6D4664(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6D47C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A6D47E0(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  id inited;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  char isEqualToString;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  char isEqual;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void **v57;
  CKCodeServiceImplementation *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  int v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void **v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t buf[4];
  id v76;
  __int16 v77;
  int v78;
  __int16 v79;
  void *v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v68 = v9;
  if (a1)
  {
    if (v9)
    {
      objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(MEMORY[0x1E0CB3998], v10, (uint64_t)v9, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_applyDefaultParametersToServiceURLComponents_(CKCodeFunctionInvokeOperationInfo, v12, (uint64_t)v11, v13);
      objc_msgSend_URL(v11, v14, v15, v16);
      v70 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v70 = 0;
    }
    v18 = a1;
    objc_sync_enter(v18);
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v69 = (void **)v18;
    objc_msgSend_codeServiceImplementations(v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v71, (uint64_t)v81, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v72;
LABEL_8:
      v29 = 0;
      while (1)
      {
        if (*(_QWORD *)v72 != v28)
          objc_enumerationMutation(v22);
        v30 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * v29);
        objc_msgSend_serviceName(v30, v24, v25, v26);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)v7, v33);

        if ((isEqualToString & 1) != 0)
        {
          objc_msgSend_boxedDatabaseScope(v30, v24, v25, v26);
          v38 = (id)objc_claimAutoreleasedReturnValue();
          if (v38 == v8)
          {

LABEL_16:
            objc_msgSend_serviceInstanceURL(v30, v24, v25, v26);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            if (v46 == v70)
            {

LABEL_28:
              inited = v30;

              v57 = v69;
              goto LABEL_29;
            }
            objc_msgSend_serviceInstanceURL(v30, v43, v44, v45);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            isEqual = objc_msgSend_isEqual_(v47, v48, (uint64_t)v70, v49);

            if ((isEqual & 1) != 0)
              goto LABEL_28;
            goto LABEL_18;
          }
          objc_msgSend_boxedDatabaseScope(v30, v35, v36, v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend_isEqual_(v39, v40, (uint64_t)v8, v41);

          if (v42)
            goto LABEL_16;
        }
LABEL_18:
        if (v27 == ++v29)
        {
          v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v24, (uint64_t)&v71, (uint64_t)v81, 16);
          if (v27)
            goto LABEL_8;
          break;
        }
      }
    }

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v51 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      v63 = objc_msgSend_intValue(v8, v52, v53, v54);
      objc_msgSend_containerID(v69, v64, v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v76 = v7;
      v77 = 1024;
      v78 = v63;
      v79 = 2112;
      v80 = v67;
      _os_log_debug_impl(&dword_18A5C5000, v51, OS_LOG_TYPE_DEBUG, "Creating code service implementation for serviceName %@ (scope: %d) in container %@", buf, 0x1Cu);

    }
    if (!v69[18])
    {
      v55 = objc_opt_new();
      v56 = v69[18];
      v69[18] = (void *)v55;

    }
    v57 = v69;
    v58 = [CKCodeServiceImplementation alloc];
    inited = (id)objc_msgSend_initInternalWithContainerImplementation_serviceName_boxedDatabaseScope_serviceInstanceURL_(v58, v59, (uint64_t)v69, (uint64_t)v7, v8, v70);
    objc_msgSend_addObject_(v69[18], v60, (uint64_t)inited, v61);
LABEL_29:
    objc_sync_exit(v57);

  }
  else
  {
    inited = 0;
  }

  return inited;
}

void sub_18A6D4C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

BOOL sub_18A6D4E5C()
{
  _BOOL8 result;

  result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

void sub_18A6D4E7C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained || !objc_msgSend_CKIsXPCConnectionError(v3, v4, v5, v6))
    goto LABEL_16;
  sub_18A6D507C((uint64_t)WeakRetained, v8, v9, v10);
  if (!*(_QWORD *)(a1 + 64)
    || (v11 = *(_QWORD *)(a1 + 32)) != 0 && !(*(unsigned int (**)(uint64_t, id))(v11 + 16))(v11, v3))
  {
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_17;
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v13 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v14 = 138412546;
      v15 = WeakRetained;
      v16 = 2112;
      v17 = v3;
      _os_log_debug_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_DEBUG, "Exhausted automatic retries getting container proxy, failing with error for %@: %@", (uint8_t *)&v14, 0x16u);
    }
LABEL_16:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_17;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v12 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v14 = 138412546;
    v15 = WeakRetained;
    v16 = 2112;
    v17 = v3;
    _os_log_impl(&dword_18A5C5000, v12, OS_LOG_TYPE_INFO, "Automatically retrying getting container proxy due to error for %@: %@", (uint8_t *)&v14, 0x16u);
  }
  sub_18A5ECA88(WeakRetained, *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 64) - 1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
LABEL_17:

}

void sub_18A6D507C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend_lock(*(void **)(a1 + 240), a2, a3, a4);
  v5 = *(_BYTE *)(a1 + 57);
  *(_BYTE *)(a1 + 57) = 0;
  objc_msgSend_unlock(*(void **)(a1 + 240), v6, v7, v8);
  if ((v5 & 1) != 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v9 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v21 = 138412290;
      v22 = a1;
      _os_log_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v21, 0xCu);
    }
    objc_msgSend_deviceContext((void *)a1, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_deviceScopedStateManager(v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_resetThrottles(v17, v18, v19, v20);

  }
}

void sub_18A6D5190(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v7 = a3;
  if (v11)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    else
      objc_msgSend_remoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_18A6D522C(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = WeakRetained;
      _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEFAULT, "XPC connection interrupted for %@", (uint8_t *)&v6, 0xCu);
    }
    sub_18A6D507C((uint64_t)WeakRetained, v3, v4, v5);
  }

}

void sub_18A6D5314(uint64_t a1, void *a2, void *a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v10 = a3;
  if (v6)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      objc_msgSend_lock(*(void **)(v11 + 240), v7, v8, v9);
    else
      objc_msgSend_lock(0, v7, v8, v9);
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      v13 = *(id *)(v12 + 208);
      if (v13)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (v14)
        {
          v15 = *(_BYTE *)(v14 + 57);

          if ((v15 & 1) != 0)
          {
            if (ck_log_initialization_predicate != -1)
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            v25 = ck_log_facility_ck;
            if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
            {
              v26 = *(_QWORD *)(a1 + 32);
              v30 = 138412546;
              v31 = v26;
              v32 = 2112;
              v33 = v6;
              _os_log_impl(&dword_18A5C5000, v25, OS_LOG_TYPE_INFO, "Ignoring superfluous container proxy for %@: %@", (uint8_t *)&v30, 0x16u);
            }
            v27 = *(_QWORD **)(a1 + 32);
            if (v27)
              v27 = (_QWORD *)v27[26];
            v28 = v27;

            v6 = v28;
            goto LABEL_27;
          }
        }
        else
        {

        }
      }
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
      {
        objc_storeStrong((id *)(v16 + 208), a2);
        v17 = *(_QWORD *)(a1 + 32);
        if (v17)
          *(_BYTE *)(v17 + 57) = 1;
      }
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v18 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v30 = 138412546;
      v31 = v22;
      v32 = 2112;
      v33 = v6;
      _os_log_impl(&dword_18A5C5000, v18, OS_LOG_TYPE_INFO, "Got a container proxy for %@: %@", (uint8_t *)&v30, 0x16u);
    }
LABEL_27:
    v29 = *(_QWORD *)(a1 + 32);
    if (v29)
      objc_msgSend_unlock(*(void **)(v29 + 240), v19, v20, v21);
    else
      objc_msgSend_unlock(0, v19, v20, v21);
    goto LABEL_29;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v23 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v24 = *(_QWORD *)(a1 + 32);
    v30 = 138412546;
    v31 = v24;
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_18A5C5000, v23, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get container proxy for %@: %@", (uint8_t *)&v30, 0x16u);
  }
  v6 = 0;
LABEL_29:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_18A6D5864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A6D58B0(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v3 = 138412290;
    v4 = WeakRetained;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Warn: Discretionary connection was interrupted: %@", (uint8_t *)&v3, 0xCu);
  }

}

void sub_18A6D598C(uint64_t a1)
{
  void **WeakRetained;
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v9 = 138412290;
      v10 = WeakRetained;
      _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v9, 0xCu);
    }
    objc_msgSend_lock(WeakRetained[30], v3, v4, v5);
    *((_BYTE *)WeakRetained + 58) = 0;
    objc_msgSend_unlock(WeakRetained[30], v6, v7, v8);
  }

}

void sub_18A6D5A80()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C8F2B8]);
  v1 = (void *)qword_1ECD96AA0;
  qword_1ECD96AA0 = (uint64_t)v0;

}

void sub_18A6D5C64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6D5EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6D5EFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6D5F5C(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D5FD0;
  v5[3] = &unk_1E1F60938;
  v3 = *(_QWORD *)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  objc_msgSend_statusGroupsForApplicationPermission_completionHandler_(a2, v4, v3, (uint64_t)v5);

}

void sub_18A6D5FD0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);

}

void sub_18A6D6158(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6D616C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, 1, v5);

  }
}

void sub_18A6D61CC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD v6[4];
  id v7;

  v3 = *(unsigned __int8 *)(a1 + 48);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_18A6D6250;
  v6[3] = &unk_1E1F60988;
  v4 = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  objc_msgSend_setApplicationPermission_enabled_completionHandler_(a2, v5, v4, v3, v6);

}

void sub_18A6D6250(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, const char *, id))(v4 + 16))(v4, a2, v6);

  }
}

void sub_18A6D63C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D63D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

  }
}

void sub_18A6D6430(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D64A0;
  v5[3] = &unk_1E1F60910;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_resetAllApplicationPermissionsWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D64A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

  }
}

void sub_18A6D6608(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D661C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

  }
}

void sub_18A6D6678(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D66E8;
  v5[3] = &unk_1E1F60910;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_tossConfigWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D66E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

  }
}

void sub_18A6D6A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, os_activity_scope_state_s state)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6D6A88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Failed to fetch server preferred push environment: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v12 = 138543362;
      v13 = v5;
      _os_log_debug_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_DEBUG, "Successfully fetched server preferred push environment: %{public}@", (uint8_t *)&v12, 0xCu);
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend_setPushEnvironment_(WeakRetained, v10, (uint64_t)v5, v11);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_18A6D6E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6D6E80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6D6E90(uint64_t a1)
{

}

void sub_18A6D6E98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v11 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;

}

void sub_18A6D7024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6D7038(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6D7098(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D7108;
  v5[3] = &unk_1E1F60A50;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_serverPreferredPushEnvironmentWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D7108(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);

}

void sub_18A6D72A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6D72BC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543362;
    v7 = v5;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "IRONY. Errored out talking to daemon while trying to set a fake error for class name %{public}@, check your syslog", (uint8_t *)&v6, 0xCu);
  }

}

uint64_t sub_18A6D73A8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setFakeError_forNextRequestOfClassName_completionHandler_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6D7530(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_18A6D7544(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543362;
    v7 = v5;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "IRONY. Errored out talking to daemon while trying to set a fake operation result for class name %{public}@, check your syslog", (uint8_t *)&v6, 0xCu);
  }

}

uint64_t sub_18A6D7630(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setFakeResponseOperationResult_forNextRequestOfClassName_forItemID_withLifetime_completionHandler_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6D775C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D7770(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6D77D0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D7840;
  v5[3] = &unk_1E1F60B08;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_getOutstandingOperationCountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D7840(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);

}

void sub_18A6D799C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D79B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

  }
}

void sub_18A6D7A0C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D7A7C;
  v5[3] = &unk_1E1F60910;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_dropDetachedContainersWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D7A7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void sub_18A6D7B3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  CKSignatureGenerator *v6;
  const char *v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  if (a2)
  {
    v5 = a2;
    v6 = [CKSignatureGenerator alloc];
    a2 = (void *)objc_msgSend_initWithBoundaryKey_(v6, v7, (uint64_t)v5, v8);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_18A6D7D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D7D54(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v10 = 138412290;
    v11 = v3;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Error fetching boundary key: %@", (uint8_t *)&v10, 0xCu);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v9);

  }
}

void sub_18A6D7E6C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D7EDC;
  v5[3] = &unk_1E1F60B30;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_globalPerUserBoundaryKeyWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D7EDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  const __CFString *v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const __CFString *v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v7 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v13 = (void *)MEMORY[0x1E0CB3940];
    v14 = v7;
    v18 = objc_msgSend_length(v5, v15, v16, v17);
    objc_msgSend_stringWithFormat_(v13, v19, (uint64_t)CFSTR("<%lu bytes>"), v20, v18);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = CFSTR(". Error was ");
    v23 = &stru_1E1F66ED0;
    *(_DWORD *)buf = 138543874;
    v25 = v21;
    if (v6)
      v23 = v6;
    else
      v22 = &stru_1E1F66ED0;
    v26 = 2114;
    v27 = v22;
    v28 = 2112;
    v29 = v23;
    _os_log_debug_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_DEBUG, "Boundary key is %{public}@%{public}@%@", buf, 0x20u);

  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    objc_msgSend_CKClientSuitableError(v6, v8, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v5, v12);

  }
}

void sub_18A6D8190(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6D8278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A6D828C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing metadata cache, check your syslog", v4, 2u);
  }

}

uint64_t sub_18A6D8330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_clearContainerFromMetadataCache, a3, a4);
}

void sub_18A6D8414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6D8428(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while clearing PILS cache, check your syslog", v4, 2u);
  }

}

uint64_t sub_18A6D84CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_clearPILSCacheForLookupInfos_, *(_QWORD *)(a1 + 32), a4);
}

void sub_18A6D85E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D85F8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint8_t v10[16];

  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v10 = 0;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while requesting dataclass status from account, check your syslog", v10, 2u);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v9);

  }
}

void sub_18A6D86D8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D8748;
  v5[3] = &unk_1E1F60BE0;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_representativeDataclassEnabledWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D8748(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);

}

void sub_18A6D88A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D88B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, -1, v5);

  }
}

void sub_18A6D8918(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D8988;
  v5[3] = &unk_1E1F60988;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_serverEnvironmentWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D8988(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, const char *, id))(v5 + 16))(v5, a2, v6);

}

void sub_18A6D89D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6D8B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D8B58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v4 + 16))(v4, 0, 0, v5);

  }
}

void sub_18A6D8BBC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D8C2C;
  v5[3] = &unk_1E1F60C08;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_displayInfoOnAccountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D8C2C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v8 = a3;
    v9 = a2;
    objc_msgSend_CKClientSuitableError(a5, v10, v11, v12);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, v9, v8, v13);

  }
}

void sub_18A6D8DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6D8DDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v4 + 16))(v4, 0, 0, v5);

  }
}

void sub_18A6D8E40(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D8EB0;
  v5[3] = &unk_1E1F60C08;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_displayInfoOnAccountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D8EB0(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v8 = a4;
    v9 = a2;
    objc_msgSend_CKClientSuitableError(a5, v10, v11, v12);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, v9, v8, v13);

  }
}

void sub_18A6D9068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A6D907C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v6 = *(void **)(a1 + 32);
      v7 = v4;
      objc_msgSend_metricUUID(v6, v8, v9, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v11;
      v14 = 2112;
      v15 = v3;
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Error reaching cloudd to submit CKEventMetric %{public}@: %@", (uint8_t *)&v12, 0x16u);

    }
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

void sub_18A6D91A8(_QWORD *a1, void *a2)
{
  void *v3;
  _BOOL8 v4;
  uint64_t v5;
  const char *v6;
  _QWORD v7[5];
  id v8;

  v3 = (void *)a1[6];
  v4 = v3 == 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_18A5F1F30;
  v7[3] = &unk_1E1F5F730;
  v5 = a1[4];
  v7[4] = a1[5];
  v8 = v3;
  objc_msgSend_submitClientEventMetric_completeWhenQueued_completionHandler_(a2, v6, v5, v4, v7);

}

void sub_18A6D9390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6D93A8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error retrieving daemon to get device count: %@", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t sub_18A6D9484(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D94DC;
  v5[3] = &unk_1E1F60CA0;
  v5[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend_lastKnownDeviceCountWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18A6D94DC(uint64_t a1, uint64_t a2)
{
  void *v4;
  __CFString *v5;
  __CFString *v6;
  NSObject *v7;
  int v8;
  __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v5 = CFSTR("Unknown");
    if (a2 == 1)
      v5 = CFSTR("Single");
    if (a2 == 2)
      v5 = CFSTR("Multiple");
    v6 = v5;
    v8 = 138412290;
    v9 = v6;
    v7 = v4;
    _os_log_debug_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_DEBUG, "Received device count %@", (uint8_t *)&v8, 0xCu);

  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
}

void sub_18A6D9810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A6D983C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error retrieving daemon to get network transfer endpoint: %@", (uint8_t *)&v7, 0xCu);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;

}

uint64_t sub_18A6D9934(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];
  __int128 v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D998C;
  v5[3] = &unk_1E1F60D18;
  v6 = *(_OWORD *)(a1 + 32);
  return objc_msgSend_networkTransferEndpointWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18A6D998C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v22 = v17;
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Error getting network transfer endpoint: %@", buf, 0xCu);
    }
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = v6;
    v10 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
    goto LABEL_16;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v11 = ck_log_facility_ck;
  if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    if (v5)
      goto LABEL_11;
LABEL_14:
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v12, (uint64_t)CFSTR("CKInternalErrorDomain"), 1000, CFSTR("No endpoint dictionary received from daemon"));
    goto LABEL_15;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  *(_DWORD *)buf = 138412290;
  v22 = v18;
  _os_log_debug_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_DEBUG, "Received network transfer endpoint: %@", buf, 0xCu);
  if (!v5)
    goto LABEL_14;
LABEL_11:
  v13 = nw_endpoint_create_from_dictionary();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v16, (uint64_t)CFSTR("CKInternalErrorDomain"), 1000, CFSTR("Failed to convert endpoint dictionary: %@"), v5);
LABEL_15:
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
LABEL_16:

  }
}

void sub_18A6D9E10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6D9E70(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6D9EE0;
  v5[3] = &unk_1E1F60A50;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_frameworkCachesDirectoryWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6D9EE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a2;
    objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v9);

  }
}

void sub_18A6DA45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6DA470(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void sub_18A6DA4B8(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DA52C;
  v5[3] = &unk_1E1F60910;
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend_dumpDaemonStatusReportToFileHandle_completionHandler_(a2, v4, v3, (uint64_t)v5);

}

void sub_18A6DA52C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

id sub_18A6DA5EC()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  objc_opt_self();
  objc_msgSend_sharedManager(CKProcessScopedStateManager, v0, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_untrustedEntitlements(v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_associatedApplicationBundleID(v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    objc_msgSend_sharedManager(CKProcessScopedStateManager, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_untrustedEntitlements(v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_applicationBundleID(v19, v20, v21, v22);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v11;
}

void sub_18A6DA814(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;

  v9 = a2;
  if (CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9())
  {
    objc_msgSend_CKClientSuitableError(v9, v3, v4, v5);
    v6 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v6;
  }
  else
  {
    v7 = v9;
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v10 = v7;
    (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, 0);
    v7 = v10;
  }

}

void sub_18A6DA90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6DAA68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
}

uint64_t sub_18A6DAA74(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(result + 16))(result, *(_QWORD *)(a1 + 32), a2);
  return result;
}

void sub_18A6DAA94(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  CKDiscoverUserIdentitiesOperation *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, void *);
  void *v28;
  id v29;
  id v30;
  _QWORD *v31;
  _QWORD v32[5];
  _QWORD v33[5];
  id v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a1)
  {
    v13 = [CKDiscoverUserIdentitiesOperation alloc];
    v35[0] = v9;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v14, (uint64_t)v35, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend_initWithUserIdentityLookupInfos_(v13, v16, (uint64_t)v15, v17);

    v33[0] = 0;
    v33[1] = v33;
    v33[2] = 0x3032000000;
    v33[3] = sub_18A6D6E80;
    v33[4] = sub_18A6D6E90;
    v19 = MEMORY[0x1E0C809B0];
    v34 = 0;
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_18A6DAC8C;
    v32[3] = &unk_1E1F60EA0;
    v32[4] = v33;
    objc_msgSend_setUserIdentityDiscoveredBlock_(v18, v20, (uint64_t)v32, v21);
    v25 = v19;
    v26 = 3221225472;
    v27 = sub_18A6DAC9C;
    v28 = &unk_1E1F60EC8;
    v30 = v12;
    v31 = v33;
    v29 = v9;
    objc_msgSend_setDiscoverUserIdentitiesCompletionBlock_(v18, v22, (uint64_t)&v25, v23);
    objc_msgSend__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_(a1, v24, (uint64_t)v18, (uint64_t)v10, v11, v25, v26, v27, v28);

    _Block_object_dispose(v33, 8);
  }

}

void sub_18A6DAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6DAC8C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_18A6DAC9C(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = a1[5];
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v4 = (void *)a1[4];
    v5 = a2;
    objc_msgSend_lookupValue(v4, v6, v7, v8);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKItemErrorForID_(v5, v9, (uint64_t)v12, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v11);
  }
}

void sub_18A6DB110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6DB130(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_18A6DB144(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v4 = a1[5];
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    objc_msgSend_CKItemErrorForID_(a2, (const char *)a2, a1[4], a4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, v5, v6);

  }
}

void sub_18A6DB7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6DB810(uint64_t a1, void *a2, void *a3)
{
  const char *v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  if (objc_msgSend_isEqual_(a2, v6, *(_QWORD *)(a1 + 32), v7))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

}

void sub_18A6DB874(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v4 = a1[5];
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    objc_msgSend_CKItemErrorForID_(a2, (const char *)a2, a1[4], a4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, v5, v6);

  }
}

void sub_18A6DBB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6DBB8C(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  if (objc_msgSend_isEqual_(*(void **)(a1 + 32), v6, a2, v7))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);

}

void sub_18A6DBBF0(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  id v16;

  v2 = a1[5];
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v4 = (void *)a1[4];
    v5 = a2;
    objc_msgSend_share(v4, v6, v7, v8);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_URL(v16, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKItemErrorForID_(v5, v13, (uint64_t)v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v15);
  }
}

void sub_18A6DBDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6DBDFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6DBE5C(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DBED0;
  v5[3] = &unk_1E1F60F68;
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend_decryptPersonalInfoOnShare_completionHandler_(a2, v4, v3, (uint64_t)v5);

}

void sub_18A6DBED0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);

}

void sub_18A6DC040(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6DC054(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6DC0B4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DC124;
  v5[3] = &unk_1E1F60B30;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_getNewWebSharingIdentityDataWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6DC124(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v9);

}

void sub_18A6DC200()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.cloudkit.accountInfoFetchQueue.bypassesPCS", v2);
  v1 = (void *)qword_1ECD96A90;
  qword_1ECD96A90 = (uint64_t)v0;

}

void sub_18A6DC324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6DC338(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31[2];
  _QWORD v32[4];
  id v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v23 = *(void **)(a1 + 32);
    v24 = v2;
    objc_msgSend_containerID(v23, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v36 = v28;
    _os_log_debug_impl(&dword_18A5C5000, v24, OS_LOG_TYPE_DEBUG, "Checking account access authorization for container %@", buf, 0xCu);

  }
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(void **)(v4 + 256);
  else
    v5 = 0;
  objc_sync_exit(v3);

  v34 = 0;
  if (objc_msgSend___preflightAccountAccessAuthorization_(*(void **)(a1 + 32), v6, (uint64_t)&v34, v7))
  {
    v8 = v34;
    if (v34 != v5)
    {
      v9 = *(id *)(a1 + 32);
      objc_sync_enter(v9);
      v10 = *(_QWORD *)(a1 + 32);
      if (v10)
        *(_QWORD *)(v10 + 256) = v34;
      objc_sync_exit(v9);

      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v11 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (uint64_t)v34;
        v13 = v11;
        CKTernaryDescription(v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        CKTernaryDescription((uint64_t)v5);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v36 = v14;
        v37 = 2112;
        v38 = v15;
        _os_log_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_DEFAULT, "In-process account access authorization check returned: %@, previously: %@", buf, 0x16u);

      }
    }
    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
    {
      (*(void (**)(uint64_t, BOOL))(v16 + 16))(v16, v8 != v5);
      return;
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v22 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
LABEL_36:
      _os_log_debug_impl(&dword_18A5C5000, v22, OS_LOG_TYPE_DEBUG, "No completion handler", buf, 2u);
    }
  }
  else if (v5 == (void *)-1)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v20 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_18A5C5000, v20, OS_LOG_TYPE_DEBUG, "No previous account access authorization.", buf, 2u);
    }
    v21 = *(_QWORD *)(a1 + 40);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v21, 1);
      return;
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v22 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      goto LABEL_36;
    }
  }
  else
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    v17 = *(void **)(a1 + 32);
    v18 = MEMORY[0x1E0C809B0];
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_18A6DC7E4;
    v32[3] = &unk_1E1F60910;
    v33 = *(id *)(a1 + 40);
    v29[0] = v18;
    v29[1] = 3221225472;
    v29[2] = sub_18A6DC954;
    v29[3] = &unk_1E1F60FB8;
    v29[4] = *(_QWORD *)(a1 + 32);
    v31[1] = v5;
    objc_copyWeak(v31, (id *)buf);
    v19 = *(id *)(a1 + 40);
    v30 = v19;
    if (v17)
    {
      sub_18A5ECA88(v17, 0, (void *)1, 0, v32, v29);
      v19 = v30;
    }

    objc_destroyWeak(v31);
    objc_destroyWeak((id *)buf);
  }
}

void sub_18A6DC7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A6DC7E4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't access daemon to fetch account access authorization: %@", (uint8_t *)&v7, 0xCu);
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, 1);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v7) = 0;
      _os_log_debug_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_DEBUG, "No completion handler", (uint8_t *)&v7, 2u);
    }
  }

}

void sub_18A6DC954(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10[2];
  uint8_t buf[16];

  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Fetching account access authorization from daemon.", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_18A6DCA90;
  v8[3] = &unk_1E1F60F90;
  v5 = *(void **)(a1 + 56);
  v8[4] = *(_QWORD *)(a1 + 32);
  v10[1] = v5;
  objc_copyWeak(v10, (id *)(a1 + 48));
  v9 = *(id *)(a1 + 40);
  objc_msgSend_accountAccessAuthorizationWithCompletionHandler_(v3, v6, (uint64_t)v8, v7);

  objc_destroyWeak(v10);
}

void sub_18A6DCA7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18A6DCA90(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  _BOOL8 v8;
  id WeakRetained;
  void *v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  _QWORD *v19;
  void *v20;
  int v21;
  _QWORD *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v6 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v18 = v6;
    CKTernaryDescription(a2);
    v19 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v20 = *(void **)(a1 + 32);
    v21 = 138412546;
    v22 = v19;
    v23 = 2114;
    v24 = v20;
    _os_log_debug_impl(&dword_18A5C5000, v18, OS_LOG_TYPE_DEBUG, "Retrieved account access authorization '%@' for container %{public}@", (uint8_t *)&v21, 0x16u);

  }
  if (v5)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v21 = 138412290;
      v22 = v5;
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Failed to fetch account access authorization: %@", (uint8_t *)&v21, 0xCu);
    }
    v8 = 1;
  }
  else if (*(_QWORD *)(a1 + 56) == a2)
  {
    v8 = 0;
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v10 = WeakRetained;
    v8 = WeakRetained != 0;
    if (WeakRetained)
    {
      v11 = WeakRetained;
      objc_sync_enter(v11);
      v11[32] = a2;
      objc_sync_exit(v11);

      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v12 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
      {
        v13 = v12;
        CKTernaryDescription(a2);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        CKTernaryDescription(*(_QWORD *)(a1 + 56));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543874;
        v22 = v11;
        v23 = 2112;
        v24 = v14;
        v25 = 2112;
        v26 = v15;
        _os_log_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_DEFAULT, "Account access authorization updated for container %{public}@: %@, previous: %@", (uint8_t *)&v21, 0x20u);

      }
    }

  }
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    (*(void (**)(uint64_t, _BOOL8))(v16 + 16))(v16, v8);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v17 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v21) = 0;
      _os_log_debug_impl(&dword_18A5C5000, v17, OS_LOG_TYPE_DEBUG, "No completion handler", (uint8_t *)&v21, 2u);
    }
  }

}

void sub_18A6DCDCC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v13 = 138412290;
    v14 = v3;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Error fetching account info: %@", (uint8_t *)&v13, 0xCu);
  }
  objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend_accountInfoFetchQueue(*(void **)(a1 + 32), v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_resume(v12);

}

void sub_18A6DCEF4(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_18A6DCF98;
  v9[3] = &unk_1E1F61030;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v10 = v4;
  v11 = v5;
  v14 = *(_BYTE *)(a1 + 64);
  v12 = v6;
  v13 = *(id *)(a1 + 56);
  objc_msgSend_accountInfoWithCompletionHandler_(a2, v7, (uint64_t)v9, v8);

}

void sub_18A6DCF98(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_signpost_id_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  const __CFString *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  const __CFString *v51;
  const __CFString *v52;
  __CFString *v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _BYTE v59[22];
  __int16 v60;
  const __CFString *v61;
  __int16 v62;
  const __CFString *v63;
  __int16 v64;
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v9 = a3;
  v10 = *(void **)(a1 + 32);
  if (v10)
  {
    objc_msgSend_log(v10, v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_identifier(*(void **)(a1 + 32), v12, v13, v14);
    if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v16 = v15;
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)v59 = 0;
        _os_signpost_emit_with_name_impl(&dword_18A5C5000, v11, OS_SIGNPOST_EVENT, v16, "accountStatus", "Fetched account info", v59, 2u);
      }
    }

  }
  objc_msgSend_deviceContext(*(void **)(a1 + 40), v6, v7, v8);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReferenceProtocol(v17, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v22 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(void **)(a1 + 40);
      v27 = v22;
      objc_msgSend_deviceContext(v26, v28, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_testDeviceReferenceProtocol(v31, v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_deviceID(v35, v36, v37, v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = CFSTR(". Error was ");
      *(_DWORD *)v59 = 138413058;
      v41 = &stru_1E1F66ED0;
      *(_QWORD *)&v59[4] = v39;
      *(_WORD *)&v59[12] = 2112;
      if (v9)
        v41 = v9;
      else
        v40 = &stru_1E1F66ED0;
      *(_QWORD *)&v59[14] = v5;
      v60 = 2114;
      v61 = v40;
      v62 = 2112;
      v63 = v41;
      _os_log_debug_impl(&dword_18A5C5000, v27, OS_LOG_TYPE_DEBUG, "For test device %@, account info is %@%{public}@%@", v59, 0x2Au);

    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v42 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      if (v9)
        v51 = CFSTR(". Error was ");
      else
        v51 = &stru_1E1F66ED0;
      if (v9)
        v52 = v9;
      else
        v52 = &stru_1E1F66ED0;
      v53 = *(__CFString **)(a1 + 40);
      v54 = v42;
      objc_msgSend_containerID(v53, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v59 = 138413314;
      *(_QWORD *)&v59[4] = v5;
      *(_WORD *)&v59[12] = 2114;
      *(_QWORD *)&v59[14] = v51;
      v60 = 2112;
      v61 = v52;
      v62 = 2048;
      v63 = v53;
      v64 = 2112;
      v65 = v58;
      _os_log_debug_impl(&dword_18A5C5000, v54, OS_LOG_TYPE_DEBUG, "Account info is %@%{public}@%@ for CKContainerImplementation %p, containerID %@", v59, 0x34u);

    }
  }
  if (!v9)
  {
    v43 = *(id *)(a1 + 40);
    objc_sync_enter(v43);
    if (v5)
      v44 = v5[7];
    else
      v44 = 0;
    v45 = *(_QWORD *)(a1 + 40);
    if (v45)
      *(_QWORD *)(v45 + 256) = v44;
    objc_sync_exit(v43);

    if (!*(_BYTE *)(a1 + 64))
      objc_msgSend_setAsCachedAccountInfoForSetupInfoHash_(v5, v23, *(_QWORD *)(a1 + 48), v25);
  }
  objc_msgSend_CKClientSuitableError(v9, v23, v24, v25, *(_OWORD *)v59);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  objc_msgSend_accountInfoFetchQueue(*(void **)(a1 + 40), v47, v48, v49);
  v50 = objc_claimAutoreleasedReturnValue();
  dispatch_resume(v50);

}

void sub_18A6DD4A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6DD4B4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v10 = 138412290;
    v11 = v3;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error getting daemon to reload account: %@", (uint8_t *)&v10, 0xCu);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    objc_msgSend_CKClientSuitableError(v3, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

  }
}

void sub_18A6DD5C8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DD638;
  v5[3] = &unk_1E1F60910;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_reloadAccountWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6DD638(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412290;
      v15 = v3;
      _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error reloading account: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v14) = 0;
      _os_log_debug_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_DEBUG, "Reloaded account", (uint8_t *)&v14, 2u);
    }
  }
  objc_msgSend_invalidateCachedAccountInfo(CKAccountInfo, v5, v6, v7);
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    objc_msgSend_CKClientSuitableError(v3, v9, v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);

  }
}

void sub_18A6DDA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6DDA54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_signpost_id_t v16;
  const char *v17;
  NSObject *v18;
  os_signpost_id_t v19;
  uint32_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_signpost_id_t v25;
  int v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, 1, v8);
  v10 = *(void **)(a1 + 32);
  if (v8)
  {
    if (v10)
    {
      objc_msgSend_log(v10, v5, v6, v7);
      v11 = objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend_identifier(*(void **)(a1 + 32), v12, v13, v14);
      if ((unint64_t)(v15 - 1) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_13;
      v16 = v15;
      if (!os_signpost_enabled(v11))
        goto LABEL_13;
      v26 = 138412290;
      v27 = v8;
      v17 = "Error: %@";
      v18 = v11;
      v19 = v16;
      v20 = 12;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_18A5C5000, v18, OS_SIGNPOST_INTERVAL_END, v19, "statusForApplicationPermission", v17, (uint8_t *)&v26, v20);
LABEL_13:

    }
  }
  else if (v10)
  {
    objc_msgSend_log(v10, v5, v6, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_identifier(*(void **)(a1 + 32), v21, v22, v23);
    if ((unint64_t)(v24 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_13;
    v25 = v24;
    if (!os_signpost_enabled(v11))
      goto LABEL_13;
    LOWORD(v26) = 0;
    v17 = "";
    v18 = v11;
    v19 = v25;
    v20 = 2;
    goto LABEL_12;
  }

}

void sub_18A6DDBC0(uint64_t a1, void *a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_18A6DDC54;
  v6[3] = &unk_1E1F610A8;
  v4 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  objc_msgSend_statusForApplicationPermission_completionHandler_(a2, v5, v4, (uint64_t)v6);

}

void sub_18A6DDC54(uint64_t a1, unint64_t a2, void *a3)
{
  __CFString *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_signpost_id_t v21;
  const char *v22;
  NSObject *v23;
  os_signpost_id_t v24;
  uint32_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_signpost_id_t v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  NSObject *v34;
  _BYTE v35[24];
  const __CFString *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v6 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    if (a2 > 3)
      v31 = CFSTR("Unknown status");
    else
      v31 = off_1E1F61478[a2];
    *(_DWORD *)v35 = 138543874;
    *(_QWORD *)&v35[4] = v31;
    if (v5)
      v32 = CFSTR(". Error was ");
    else
      v32 = &stru_1E1F66ED0;
    if (v5)
      v33 = v5;
    else
      v33 = &stru_1E1F66ED0;
    *(_WORD *)&v35[12] = 2114;
    *(_QWORD *)&v35[14] = v32;
    *(_WORD *)&v35[22] = 2112;
    v36 = v33;
    v34 = v6;
    _os_log_debug_impl(&dword_18A5C5000, v34, OS_LOG_TYPE_DEBUG, "Application permission status is %{public}@%{public}@%@", v35, 0x20u);

  }
  objc_msgSend_CKClientSuitableError(v5, v7, v8, v9, *(_OWORD *)v35, *(_QWORD *)&v35[16], v36);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    (*(void (**)(uint64_t, unint64_t, void *))(v14 + 16))(v14, a2, v13);
  v15 = *(void **)(a1 + 32);
  if (v13)
  {
    if (v15)
    {
      objc_msgSend_log(v15, v10, v11, v12);
      v16 = objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend_identifier(*(void **)(a1 + 32), v17, v18, v19);
      if ((unint64_t)(v20 - 1) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_16;
      v21 = v20;
      if (!os_signpost_enabled(v16))
        goto LABEL_16;
      *(_DWORD *)v35 = 138412290;
      *(_QWORD *)&v35[4] = v13;
      v22 = "Error: %@";
      v23 = v16;
      v24 = v21;
      v25 = 12;
LABEL_15:
      _os_signpost_emit_with_name_impl(&dword_18A5C5000, v23, OS_SIGNPOST_INTERVAL_END, v24, "statusForApplicationPermission", v22, v35, v25);
LABEL_16:

    }
  }
  else if (v15)
  {
    objc_msgSend_log(v15, v10, v11, v12);
    v16 = objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend_identifier(*(void **)(a1 + 32), v26, v27, v28);
    if ((unint64_t)(v29 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_16;
    v30 = v29;
    if (!os_signpost_enabled(v16))
      goto LABEL_16;
    *(_WORD *)v35 = 0;
    v22 = "";
    v23 = v16;
    v24 = v30;
    v25 = 2;
    goto LABEL_15;
  }

}

void sub_18A6DE134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6DE150(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_signpost_id_t v16;
  const char *v17;
  NSObject *v18;
  os_signpost_id_t v19;
  uint32_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_signpost_id_t v25;
  int v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, 1, v8);
  v10 = *(void **)(a1 + 32);
  if (v8)
  {
    if (v10)
    {
      objc_msgSend_log(v10, v5, v6, v7);
      v11 = objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend_identifier(*(void **)(a1 + 32), v12, v13, v14);
      if ((unint64_t)(v15 - 1) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_13;
      v16 = v15;
      if (!os_signpost_enabled(v11))
        goto LABEL_13;
      v26 = 138412290;
      v27 = v8;
      v17 = "Error: %@";
      v18 = v11;
      v19 = v16;
      v20 = 12;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_18A5C5000, v18, OS_SIGNPOST_INTERVAL_END, v19, "requestApplicationPermission", v17, (uint8_t *)&v26, v20);
LABEL_13:

    }
  }
  else if (v10)
  {
    objc_msgSend_log(v10, v5, v6, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend_identifier(*(void **)(a1 + 32), v21, v22, v23);
    if ((unint64_t)(v24 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_13;
    v25 = v24;
    if (!os_signpost_enabled(v11))
      goto LABEL_13;
    LOWORD(v26) = 0;
    v17 = "";
    v18 = v11;
    v19 = v25;
    v20 = 2;
    goto LABEL_12;
  }

}

void sub_18A6DE2BC(uint64_t a1, void *a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_18A6DE350;
  v6[3] = &unk_1E1F610A8;
  v4 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  objc_msgSend_requestApplicationPermission_completionHandler_(a2, v5, v4, (uint64_t)v6);

}

void sub_18A6DE350(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_signpost_id_t v17;
  const char *v18;
  NSObject *v19;
  os_signpost_id_t v20;
  uint32_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_signpost_id_t v26;
  int v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend_CKClientSuitableError(a3, a2, (uint64_t)a3, a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, const char *, void *))(v10 + 16))(v10, a2, v9);
  v11 = *(void **)(a1 + 32);
  if (v9)
  {
    if (v11)
    {
      objc_msgSend_log(v11, v6, v7, v8);
      v12 = objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend_identifier(*(void **)(a1 + 32), v13, v14, v15);
      if ((unint64_t)(v16 - 1) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_13;
      v17 = v16;
      if (!os_signpost_enabled(v12))
        goto LABEL_13;
      v27 = 138412290;
      v28 = v9;
      v18 = "Error: %@";
      v19 = v12;
      v20 = v17;
      v21 = 12;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_18A5C5000, v19, OS_SIGNPOST_INTERVAL_END, v20, "requestApplicationPermission", v18, (uint8_t *)&v27, v21);
LABEL_13:

    }
  }
  else if (v11)
  {
    objc_msgSend_log(v11, v6, v7, v8);
    v12 = objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend_identifier(*(void **)(a1 + 32), v22, v23, v24);
    if ((unint64_t)(v25 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_13;
    v26 = v25;
    if (!os_signpost_enabled(v12))
      goto LABEL_13;
    LOWORD(v27) = 0;
    v18 = "";
    v19 = v12;
    v20 = v26;
    v21 = 2;
    goto LABEL_12;
  }

}

void sub_18A6DE4C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6DE520(uint64_t a1, void *a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_18A6DE5B4;
  v6[3] = &unk_1E1F610F8;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  objc_msgSend_fetchLongLivedOperationsWithIDs_completionHandler_(a2, v5, v4, (uint64_t)v6);

}

void sub_18A6DE5B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  NSString *v25;
  objc_class *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_opt_new();
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v8 = v5;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v40, (uint64_t)v44, 16);
  if (v10)
  {
    v14 = v10;
    v15 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v41 != v15)
          objc_enumerationMutation(v8);
        v17 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        v18 = *(_QWORD *)(a1 + 32);
        objc_msgSend_resolvedConfiguration(v17, v11, v12, v13, (_QWORD)v40);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setContainer_(v19, v20, v18, v21);

        objc_msgSend_ckOperationClassName(v17, v22, v23, v24);
        v25 = (NSString *)objc_claimAutoreleasedReturnValue();
        v26 = NSClassFromString(v25);

        v27 = objc_alloc_init(v26);
        objc_msgSend_fillFromOperationInfo_(v27, v28, (uint64_t)v17, v29);
        objc_msgSend_operationID(v17, v30, v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v34, (uint64_t)v27, (uint64_t)v33);

      }
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v40, (uint64_t)v44, 16);
    }
    while (v14);
  }

  v38 = *(_QWORD *)(a1 + 40);
  if (v38)
  {
    objc_msgSend_CKClientSuitableError(v6, v35, v36, v37);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *))(v38 + 16))(v38, v7, v39);

  }
}

void sub_18A6DE88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_18A6DE8A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend_CKClientSuitableError(a2, (const char *)a2, a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, 0, v5);

  }
}

void sub_18A6DE900(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DE970;
  v5[3] = &unk_1E1F60938;
  v6 = *(id *)(a1 + 32);
  objc_msgSend_fetchAllLongLivedOperationIDsWithCompletionHandler_(a2, v3, (uint64_t)v5, v4);

}

void sub_18A6DE970(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a2;
    objc_msgSend_CKClientSuitableError(a3, v6, v7, v8);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v9);

  }
}

void sub_18A6DEC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6DEC2C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a3;
    objc_msgSend_allValues(a2, v6, v7, v8);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v13, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, id))(v3 + 16))(v3, v12, v5);

  }
}

uint64_t sub_18A6DED94(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  objc_msgSend_setAssetRequestCallback_(v4, v5, v3, v6);
  objc_msgSend_setMachServiceName_(v4, v7, *(_QWORD *)(a1 + 32), v8);
  objc_msgSend_registerForItemRequests(v4, v9, v10, v11);

  return 0;
}

uint64_t sub_18A6DEEC4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  objc_msgSend_setPackageRequestCallback_(v4, v5, v3, v6);
  objc_msgSend_setMachServiceName_(v4, v7, *(_QWORD *)(a1 + 32), v8);
  objc_msgSend_registerForItemRequests(v4, v9, v10, v11);

  return 0;
}

void sub_18A6DF03C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6DF064()
{
  return 1;
}

uint64_t sub_18A6DF0E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_setMachServiceName_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
  return 1;
}

uint64_t sub_18A6DF118(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_manuallyTriggerUploadRequests(a2, (const char *)a2, a3, a4);
  return 0;
}

uint64_t sub_18A6DF144(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_cancelAllOperations(a2, (const char *)a2, a3, a4);
  return 0;
}

uint64_t sub_18A6DF360(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a2;
  v6 = v3;
  v7 = a1[5];
  if (v7)
  {
    objc_msgSend_setAssetRequestCallback_(v3, v4, v7, v5);
  }
  else
  {
    objc_msgSend_assetRequestCallback(v3, v4, 0, v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAssetRequestCallback_(v6, v11, (uint64_t)v10, v12);

  }
  v13 = a1[6];
  if (v13)
  {
    objc_msgSend_setPackageRequestCallback_(v6, v8, v13, v9);
  }
  else
  {
    objc_msgSend_packageRequestCallback(v6, v8, 0, v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setPackageRequestCallback_(v6, v17, (uint64_t)v16, v18);

  }
  objc_msgSend_setMachServiceName_(v6, v14, a1[4], v15);
  objc_msgSend_registerForItemRequests(v6, v19, v20, v21);

  return 0;
}

void sub_18A6DF534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6DF54C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Failed to begin content access with error: %@", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t sub_18A6DF628(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DF680;
  v5[3] = &unk_1E1F61268;
  v5[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend_beginContentAccess_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18A6DF680(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v5;
      v7 = "Failed to begin content access with error: %@";
      v8 = v6;
      v9 = 12;
LABEL_15:
      _os_log_error_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v12, v9);
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
    if (a2)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v10 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v12) = 0;
        _os_log_debug_impl(&dword_18A5C5000, v10, OS_LOG_TYPE_DEBUG, "Successfully began content access", (uint8_t *)&v12, 2u);
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v11 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12) = 0;
        v7 = "Failed to begin content access";
        v8 = v11;
        v9 = 2;
        goto LABEL_15;
      }
    }
  }

}

void sub_18A6DF90C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Failed to end content access with error: %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_18A6DF9E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  uint8_t v5[16];

  objc_msgSend_endContentAccess(a2, (const char *)a2, a3, a4);
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Successfully ended content access", v5, 2u);
  }
}

void sub_18A6DFB48(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Failed to discard content with error: %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_18A6DFC24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  uint8_t v5[16];

  objc_msgSend_discardContentIfPossible(a2, (const char *)a2, a3, a4);
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Successfully discarded content if possible", v5, 2u);
  }
}

void sub_18A6DFD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6DFD8C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Failed to check if content is discarded with error: %@", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t sub_18A6DFE68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6DFEC0;
  v5[3] = &unk_1E1F61268;
  v5[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend_isContentDiscarded_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18A6DFEC0(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v5;
      _os_log_error_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_ERROR, "Failed to check if content is discarded with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  }

}

void sub_18A6E005C()
{
  CKContainer *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v0 = [CKContainer alloc];
  v3 = objc_msgSend__initWithContainerIdentifier_(v0, v1, 0, v2);
  v4 = (void *)qword_1ECD96AC0;
  qword_1ECD96AC0 = v3;

}

void sub_18A6E00F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E01AC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138543362;
    v11 = v9;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Posting scoped CKIdentityUpdateNotification for service named %{public}@", (uint8_t *)&v10, 0xCu);
  }
  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_postNotificationName_object_(v6, v8, (uint64_t)CFSTR("CKIdentityUpdateNotification"), (uint64_t)WeakRetained);

}

void sub_18A6E02C0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138543362;
    v11 = v9;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Posting scoped CKIdentityUpdateNotification for view named %{public}@", (uint8_t *)&v10, 0xCu);
  }
  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_postNotificationName_object_(v6, v8, (uint64_t)CFSTR("CKIdentityUpdateNotification"), (uint64_t)WeakRetained);

}

void sub_18A6E03D4(void *a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v8 = a3;
  if (a1)
  {
    objc_msgSend_implementation(a1, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
      sub_18A5ECA88(v9, 0, (void *)1, 0, v11, v8);

  }
}

void sub_18A6E0520(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], a2, (uint64_t)&unk_1EDFB4588, a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96B08;
  qword_1ECD96B08 = v4;

}

void sub_18A6E05EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E068C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18A6E076C(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  id inited;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  char isEqualToString;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  char isEqual;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  void *v56;
  void *v57;
  CKCodeService *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  void *v63;
  void **obj;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint8_t v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v63 = v9;
  if (a1)
  {
    if (v9)
    {
      objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(MEMORY[0x1E0CB3998], v10, (uint64_t)v9, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_applyDefaultParametersToServiceURLComponents_(CKCodeFunctionInvokeOperationInfo, v12, (uint64_t)v11, v13);
      objc_msgSend_URL(v11, v14, v15, v16);
      v65 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v65 = 0;
    }
    v18 = a1;
    objc_sync_enter(v18);
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    obj = (void **)v18;
    objc_msgSend_codeServices(v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v66, (uint64_t)v70, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v67;
LABEL_8:
      v29 = 0;
      while (1)
      {
        if (*(_QWORD *)v67 != v28)
          objc_enumerationMutation(v22);
        v30 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * v29);
        objc_msgSend_serviceName(v30, v24, v25, v26);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v31, v32, (uint64_t)v7, v33);

        if ((isEqualToString & 1) != 0)
        {
          objc_msgSend_boxedDatabaseScope(v30, v24, v25, v26);
          v38 = (id)objc_claimAutoreleasedReturnValue();
          if (v38 == v8)
          {

LABEL_16:
            objc_msgSend_serviceInstanceURL(v30, v24, v25, v26);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            if (v46 == v65)
            {

LABEL_24:
              inited = v30;
              goto LABEL_25;
            }
            objc_msgSend_serviceInstanceURL(v30, v43, v44, v45);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            isEqual = objc_msgSend_isEqual_(v47, v48, (uint64_t)v65, v49);

            if ((isEqual & 1) != 0)
              goto LABEL_24;
            goto LABEL_18;
          }
          objc_msgSend_boxedDatabaseScope(v30, v35, v36, v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend_isEqual_(v39, v40, (uint64_t)v8, v41);

          if (v42)
            goto LABEL_16;
        }
LABEL_18:
        if (v27 == ++v29)
        {
          v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v24, (uint64_t)&v66, (uint64_t)v70, 16);
          if (v27)
            goto LABEL_8;
          break;
        }
      }
    }

    v54 = obj;
    if (!obj[6])
    {
      v55 = objc_opt_new();
      v56 = obj[6];
      obj[6] = (void *)v55;

      v54 = obj;
    }
    objc_msgSend_implementation(v54, v51, v52, v53);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    sub_18A6D47E0(v57, v7, v8, v63);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v58 = [CKCodeService alloc];
    inited = (id)objc_msgSend_initInternalWithImplementation_container_(v58, v59, (uint64_t)v22, (uint64_t)obj);
    objc_msgSend_addObject_(obj[6], v60, (uint64_t)inited, v61);
LABEL_25:

    objc_sync_exit(obj);
  }
  else
  {
    inited = 0;
  }

  return inited;
}

void sub_18A6E0B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A6E1638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6E165C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v4;
      objc_msgSend_CKClientSuitableError(v3, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412546;
      v12 = v5;
      v13 = 2112;
      v14 = v10;
      _os_log_fault_impl(&dword_18A5C5000, v6, OS_LOG_TYPE_FAULT, "Failed to register CKSystemSharingUIObserver %@: %@", (uint8_t *)&v11, 0x16u);

    }
  }

}

void sub_18A6E1778(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v5;
    _os_log_debug_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEBUG, "Successfully got a daemon proxy for CKSystemSharingUIObserver %@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_18A6E224C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A6E23DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A6E23F4(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A6E241C(uint64_t a1)
{

}

void sub_18A6E2424(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_18A6E374C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18A6E3754(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t CKSQLDBSerializerInit(pthread_mutex_t *a1)
{
  uint64_t result;

  result = pthread_mutex_init(a1, 0);
  a1[1].__sig = 0;
  return result;
}

void sub_18A6E3A14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A6E3BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A6E3BBC(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A6E3BE4(uint64_t a1)
{

}

void sub_18A6E3BEC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6E3D48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 520);
    *(_QWORD *)(v8 + 520) = v7;

  }
}

void sub_18A6E3ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6E3EF0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 520));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6E5490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6E54A8()
{
  id v0;
  void *v1;
  const char *v2;
  uint64_t v3;

  v0 = objc_alloc_init(MEMORY[0x1E0C99D38]);
  v1 = (void *)qword_1ECD96A40;
  qword_1ECD96A40 = (uint64_t)v0;

  return objc_msgSend_setName_((void *)qword_1ECD96A40, v2, (uint64_t)CFSTR("com.apple.cloudkit.operationCallbackProxy"), v3);
}

id sub_18A6E5638(void *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v7 = (void *)objc_msgSend_superclass(a1, v4, v5, v6);
  if (objc_msgSend_conformsToProtocol_(v7, v8, (uint64_t)v3, v9))
  {
    v13 = objc_msgSend_superclass(a1, v10, v11, v12);
    sub_18A6E5638(v13, v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayByAddingObject_(v14, v15, (uint64_t)a1, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else if (objc_msgSend_conformsToProtocol_(a1, v10, (uint64_t)v3, v12))
  {
    v20[0] = a1;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v18, (uint64_t)v20, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v17;
}

NSString *sub_18A6E5720(int a1, Class aClass)
{
  return NSStringFromClass(aClass);
}

Class sub_18A6E5A0C(int a1, NSString *aClassName)
{
  return NSClassFromString(aClassName);
}

void sub_18A6E5C24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E5D5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E5D80(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  void *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  const __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    if ((objc_msgSend_isCancelled(v7, v3, v4, v5) & 1) != 0)
    {
      v11 = CFSTR("op was cancelled");
    }
    else if ((objc_msgSend_isFinished(*(void **)(a1 + 32), v8, v9, v10) & 1) != 0)
    {
      v11 = CFSTR("op was finished");
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 32);
      v11 = CFSTR("unknown");
      if (v12)
      {
        if (*(_BYTE *)(v12 + 282))
        {
          v11 = CFSTR("cloudd connection was interrupted");
        }
        else if (*(_BYTE *)(v12 + 283))
        {
          v11 = CFSTR("op was suspended");
        }
      }
    }
  }
  else
  {
    v11 = CFSTR("op was deallocated");
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v13 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(void **)(a1 + 32);
    v23 = v13;
    objc_msgSend_operationID(v22, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218498;
    v29 = v22;
    v30 = 2114;
    v31 = v27;
    v32 = 2114;
    v33 = v11;
    _os_log_debug_impl(&dword_18A5C5000, v23, OS_LOG_TYPE_DEBUG, "Skipping callback invocation for %p %{public}@, %{public}@", buf, 0x20u);

    if (v6)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (!v6)
  {
LABEL_16:
    objc_msgSend_operationID(*(void **)(a1 + 32), v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v18, (uint64_t)CFSTR("CKInternalErrorDomain"), 1000, CFSTR("Not forwarding invocation to operation %@, no good reason why"), v17);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
LABEL_17:
  v19 = *(void **)(a1 + 40);
  objc_msgSend_callbackProtocol(*(void **)(a1 + 48), v14, v15, v16);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKInvokeAndNilOutReplyBlockWithError_forProtocol_(v19, v21, (uint64_t)v6, (uint64_t)v20);

}

void sub_18A6E5FA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char isCancelled;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char isFinished;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  os_activity_scope_state_s state;

  isCancelled = objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4);
  v9 = *(_BYTE **)(a1 + 32);
  if ((isCancelled & 1) != 0)
    goto LABEL_2;
  if (v9 && (v9[282] || v9[283]))
  {
    v10 = *(_QWORD *)(a1 + 48);
LABEL_8:
    if (v9[283])
    {
      sub_18A76792C(v9);
      v11 = objc_claimAutoreleasedReturnValue();
LABEL_11:
      v16 = (id)v11;
      (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, v11);

      return;
    }
LABEL_10:
    objc_msgSend_error(v9, v5, v6, v7);
    v11 = objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  isFinished = objc_msgSend_isFinished(v9, v5, v6, v7);
  v9 = *(_BYTE **)(a1 + 32);
  if ((isFinished & 1) != 0)
  {
LABEL_2:
    v10 = *(_QWORD *)(a1 + 48);
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  sub_18A5E3B10(v9);
  v13 = objc_claimAutoreleasedReturnValue();
  os_activity_scope_enter(v13, &state);

  objc_msgSend_invokeWithTarget_(*(void **)(a1 + 40), v14, *(_QWORD *)(a1 + 32), v15);
  os_activity_scope_leave(&state);
}

void sub_18A6E6098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6E61B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18A6E6234(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6))
    v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9) == 11;
  else
    v10 = 0;

  return v10;
}

BOOL sub_18A6E627C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL8 v12;

  v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6))
  {
    v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9);
    v12 = v10 == 13 || v10 == 10;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

BOOL sub_18A6E62C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  _BOOL8 v12;

  v3 = a3;
  v7 = v3;
  if (v3)
  {
    objc_msgSend_domain(v3, v4, v5, v6);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v12 = v11 == CFSTR("CKInternalErrorDomain") && objc_msgSend_code(v7, v8, v9, v10) == 1050;

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

BOOL sub_18A6E6344(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  _BOOL8 v12;

  v3 = a3;
  v7 = v3;
  if (v3)
  {
    objc_msgSend_domain(v3, v4, v5, v6);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v12 = v11 == CFSTR("CKInternalErrorDomain") && objc_msgSend_code(v7, v8, v9, v10) == 1051;

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

BOOL sub_18A6E63C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6))
    v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9) == 19;
  else
    v10 = 0;

  return v10;
}

BOOL sub_18A6E6408(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL8 v12;

  v4 = a3;
  if (objc_msgSend_CKIsConstraintError_(a1, v5, (uint64_t)v4, v6))
  {
    v10 = objc_msgSend_CKSQLiteExtendedCode(v4, v7, v8, v9);
    v12 = v10 == 2067 || v10 == 1555;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

BOOL sub_18A6E6464(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v4 = a3;
  if (objc_msgSend_CKIsConstraintError_(a1, v5, (uint64_t)v4, v6))
    v10 = objc_msgSend_CKSQLiteExtendedCode(v4, v7, v8, v9) == 787;
  else
    v10 = 0;

  return v10;
}

BOOL sub_18A6E64B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v3 = a3;
  if (objc_msgSend_CKIsCKSQLiteError(v3, v4, v5, v6))
    v10 = objc_msgSend_CKSQLiteCode(v3, v7, v8, v9) == 5;
  else
    v10 = 0;

  return v10;
}

uint64_t sub_18A6E6900(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t isEqualToString;

  if (objc_msgSend_code(a1, a2, a3, a4) != 1027)
    return 0;
  objc_msgSend_domain(a1, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("CKInternalErrorDomain"), v10);

  return isEqualToString;
}

uint64_t sub_18A6E695C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend_userInfo(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, (uint64_t)CFSTR("SQLCode"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_intValue(v7, v8, v9, v10);

  return v11;
}

uint64_t sub_18A6E69B0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend_userInfo(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v4, v5, (uint64_t)CFSTR("SQLExtendedCode"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_intValue(v7, v8, v9, v10);

  return v11;
}

void sub_18A6E6BC0()
{
  NSObject *v0;
  uint8_t v1[16];

  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v0 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_error_impl(&dword_18A5C5000, v0, OS_LOG_TYPE_ERROR, "Kill signal received. Goodbye cruel world!", v1, 2u);
  }
  exit(1);
}

void sub_18A6E6C4C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint8_t v8[16];

  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Posting CKIdentityUpdateNotification", v8, 2u);
  }
  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotificationName_object_(v6, v7, (uint64_t)CFSTR("CKIdentityUpdateNotification"), *(_QWORD *)(a1 + 32));

}

id sub_18A6E6D14(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    objc_msgSend_sharedXPCConnection(CKXPCConnection, a2, a3, a4);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void sub_18A6E6DF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E6E80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E6E94(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27[16];

  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEFAULT, "Authorization change notification received for all containers", v27, 2u);
  }
  objc_msgSend_sharedManager(CKProcessScopedStateManager, v3, v4, v5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v6);
  if (!v6)
    goto LABEL_9;
  if (!v6[8])
  {
    v6[9] = 1;
LABEL_9:
    objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v7, v8, v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(void **)(a1 + 32);
    sub_18A6E6D14(v14, v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObserver_selector_name_object_(v13, v19, (uint64_t)v14, (uint64_t)sel_connectionBecameInvalid_, CFSTR("CKXPCConnectionInterrupted"), v18);

    sub_18A6E6D14(*(void **)(a1 + 32), v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_activate(v23, v24, v25, v26);

    objc_sync_exit(v6);
    goto LABEL_10;
  }
  objc_sync_exit(v6);

  objc_msgSend___refreshAccountAccessAuthorization(v6, v10, v11, v12);
LABEL_10:

}

void sub_18A6E7000(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E729C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_18A6E72F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  if ((_DWORD)a2)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    objc_msgSend_importantUserRecordAccessQueue(CKContainer, a2, a3, a4);
    v5 = objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_18A6E73C0;
    v6[3] = &unk_1E1F61580;
    objc_copyWeak(&v8, (id *)(a1 + 56));
    v7 = *(id *)(a1 + 32);
    dispatch_sync(v5, v6);

    objc_destroyWeak(&v8);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_18A6E73C0(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v11 = 138412290;
      v12 = v6;
      _os_log_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_DEFAULT, "Authorization changed for %@", (uint8_t *)&v11, 0xCu);
    }
    objc_msgSend_setContainerScopedUserID_(WeakRetained, v4, 0, v5);
    objc_msgSend_setOrgAdminUserID_(WeakRetained, v7, 0, v8);
    objc_msgSend_setPushEnvironment_(WeakRetained, v9, 0, v10);
  }

}

void sub_18A6E74D4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v11) = 0;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Account access authorization refresh completed.", (uint8_t *)&v11, 2u);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v11 = 134217984;
      v12 = v7;
      _os_log_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_DEFAULT, "Notifying of account change, due to the authorization of %zu containers changing.", (uint8_t *)&v11, 0xCu);
    }
    objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    CKAccountChangedNotificationName();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_postNotificationName_object_(v8, v10, (uint64_t)v9, 0);

  }
}

void sub_18A6E7668(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint32_t state;
  NSObject *v26;
  uint64_t v27;
  _BYTE *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t block;
  uint64_t v54;
  void (*v55)(uint64_t);
  void *v56;
  id v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  uint32_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEFAULT, "Account change notification received for all containers", buf, 2u);
  }
  objc_msgSend_sharedManager(CKProcessScopedStateManager, v5, v6, v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v8);
  if (v8)
    v9 = (void *)v8[2];
  else
    v9 = 0;
  v10 = v9;
  objc_msgSend_allObjects(v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_sync_exit(v8);
  objc_msgSend_importantUserRecordAccessQueue(CKContainer, v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  block = MEMORY[0x1E0C809B0];
  v54 = 3221225472;
  v55 = sub_18A6E79D0;
  v56 = &unk_1E1F5FAA8;
  v19 = v14;
  v57 = v19;
  dispatch_sync(v18, &block);

  objc_msgSend_invalidateCachedAccountInfo(CKAccountInfo, v20, v21, v22);
  v52 = 0;
  state = notify_get_state(a2, (uint64_t *)&v52);
  if (state)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v26 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      v59 = a2;
      v60 = 1024;
      v61 = state;
      _os_log_error_impl(&dword_18A5C5000, v26, OS_LOG_TYPE_ERROR, "Failed to retrieve validation counter with token %d: status %u", buf, 0xEu);
    }
    v27 = 0;
    v52 = 0;
  }
  else
  {
    v27 = v52;
  }
  objc_msgSend_setValidAccountInfoValidationCounterValue_(CKAccountInfo, v23, v27, v24, v52, block, v54, v55, v56);
  v28 = v8;
  objc_sync_enter(v28);
  if (!v8)
    goto LABEL_18;
  if (!v28[8])
  {
    v28[10] = 1;
LABEL_18:
    objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v29, v30, v31);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *(void **)(a1 + 32);
    sub_18A6E6D14(v39, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObserver_selector_name_object_(v38, v44, (uint64_t)v39, (uint64_t)sel_connectionBecameInvalid_, CFSTR("CKXPCConnectionInterrupted"), v43);

    sub_18A6E6D14(*(void **)(a1 + 32), v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_activate(v48, v49, v50, v51);

    objc_sync_exit(v28);
    v35 = v28;
    goto LABEL_19;
  }
  objc_sync_exit(v28);

  objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  CKAccountChangedNotificationName();
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_postNotificationName_object_(v35, v37, (uint64_t)v36, 0);

LABEL_19:
}

void sub_18A6E79A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E79D0(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v1 = *(id *)(a1 + 32);
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v18, (uint64_t)v24, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v19;
    *(_QWORD *)&v4 = 138543362;
    v17 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v1);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v7);
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v9 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v17;
          v23 = v8;
          _os_log_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_DEFAULT, "Account change notification received for %{public}@", buf, 0xCu);
        }
        objc_msgSend_setContainerScopedUserID_(v8, v10, 0, v11, v17, (_QWORD)v18);
        objc_msgSend_setOrgAdminUserID_(v8, v12, 0, v13);
        objc_msgSend_setPushEnvironment_(v8, v14, 0, v15);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v16, (uint64_t)&v18, (uint64_t)v24, 16);
    }
    while (v5);
  }

}

void sub_18A6E80B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6E80C4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2112;
    v10 = v6;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while granting access to bundle id %{public}@ containerIdentifiers %@, check your syslog", (uint8_t *)&v7, 0x16u);
  }

}

uint64_t sub_18A6E81BC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_accountsDidGrantAccessToBundleID_containerIdentifiers_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6E831C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6E8330(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 138543618;
    v8 = v5;
    v9 = 2112;
    v10 = v6;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while revoking access to bundle id %{public}@ containerIdentifiers %@, check your syslog", (uint8_t *)&v7, 0x16u);
  }

}

uint64_t sub_18A6E8428(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_accountsDidRevokeAccessToBundleID_containerIdentifiers_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6E8574(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6E8588(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while deleting account %@, check your syslog", (uint8_t *)&v7, 0xCu);
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);

}

uint64_t sub_18A6E8688(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_accountsWillDeleteAccount_completionHandler_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6E8878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6E8898(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v5;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while notifying about account change for account %@", (uint8_t *)&v6, 0xCu);
  }

}

uint64_t sub_18A6E8984(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_accountWithID_changedWithChangeType_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6E8ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_18A6E8AD0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while fetching usability for test account credentials", v5, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_18A6E8B94(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_fetchUsabilityForTestAccountCredentials_completionHandler_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6E8C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A6E8C30(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while wiping all caches, check your syslog", v4, 2u);
  }

}

uint64_t sub_18A6E8CD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_wipeAllCachesAndDie(a2, (const char *)a2, a3, a4);
}

void sub_18A6E8D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A6E8D6C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while wiping server configurations, check your syslog", v4, 2u);
  }

}

uint64_t sub_18A6E8E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_wipeServerConfigurationsAndDie, a3, a4);
}

void sub_18A6E8E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18A6E8EA8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Couldn't talk to daemon while updating push tokens, check your syslog", v4, 2u);
  }

}

uint64_t sub_18A6E8F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_updatePushTokens, a3, a4);
}

void sub_18A6E9040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6E9054(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_dumpAllClientsStatusReportToFileHandle_completionHandler_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18A6E915C(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_18A6E9170(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_18A6E9184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_clearPCSCachesForKnownContainersWithCompletionHandler_, *(_QWORD *)(a1 + 32), a4);
}

void sub_18A6E9284(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v7 = a3;
  if (v11)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    else
      objc_msgSend_remoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_18A6E94FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v13 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_18A6E9528(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6E9538(uint64_t a1)
{

}

void sub_18A6E9540(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "Error getting proxy for global device identifier: %@", (uint8_t *)&v7, 0xCu);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;

}

uint64_t sub_18A6E9638(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];
  __int128 v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18A6E9690;
  v5[3] = &unk_1E1F60A28;
  v6 = *(_OWORD *)(a1 + 32);
  return objc_msgSend_globalDeviceIdentifierWithCompletionHandler_(a2, (const char *)a2, (uint64_t)v5, a4);
}

void sub_18A6E9690(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_error_impl(&dword_18A5C5000, v8, OS_LOG_TYPE_ERROR, "Error fetching global device identifier from daemon: %@", (uint8_t *)&v10, 0xCu);
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v9 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v6;
      _os_log_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_INFO, "Fetched global device identifier from daemon: %@", (uint8_t *)&v10, 0xCu);
    }
  }

}

void sub_18A6E9988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  void *v11;

  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6E99A4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_ERROR))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_error_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_ERROR, "Error getting proxy for max inline mergeable delta size: %@", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t sub_18A6E9A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_maxInlineMergeableDeltaSizeWithCompletionHandler_, &unk_1E1F61718, a4);
}

void sub_18A6E9A90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  qword_1EDF69388 = (uint64_t)a2;
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], a2, a3, a4);
  qword_1EDF6F730 = v4;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v5 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_INFO))
  {
    v6 = 134217984;
    v7 = qword_1EDF69388;
    _os_log_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_INFO, "Fetched max inline delta size from daemon: %ld", (uint8_t *)&v6, 0xCu);
  }
}

void sub_18A6E9D68(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_destroyWeak((id *)(v2 - 72));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6E9DA0(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = WeakRetained;
      _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Warn: Connection became invalid: %@", (uint8_t *)&v5, 0xCu);
    }
    objc_msgSend_setHasValidProcessScopedDaemonProxyCreator_(WeakRetained, v3, 0, v4);
  }

}

void sub_18A6E9E8C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char hasValidProcessScopedDaemonProxyCreator;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(id *)(a1 + 32);
    objc_sync_enter(v7);
    objc_msgSend_processScopedDaemonProxyCreator(*(void **)(a1 + 32), v8, v9, v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14
      && (hasValidProcessScopedDaemonProxyCreator = objc_msgSend_hasValidProcessScopedDaemonProxyCreator(*(void **)(a1 + 32), v11, v12, v13), v14, (hasValidProcessScopedDaemonProxyCreator & 1) != 0))
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v16 = ck_log_facility_ck;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v17 = *(_QWORD *)(a1 + 32);
      v24 = 138412546;
      v25 = v17;
      v26 = 2112;
      v27 = v5;
      v18 = "Ignoring superfluous process proxy for %@: %@";
    }
    else
    {
      objc_msgSend_setProcessScopedDaemonProxyCreator_(*(void **)(a1 + 32), v11, (uint64_t)v5, v13);
      objc_msgSend_setHasValidProcessScopedDaemonProxyCreator_(*(void **)(a1 + 32), v19, 1, v20);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v16 = ck_log_facility_ck;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v21 = *(_QWORD *)(a1 + 32);
      v24 = 138412546;
      v25 = v21;
      v26 = 2112;
      v27 = v5;
      v18 = "Got a process proxy for %@: %@";
    }
    _os_log_impl(&dword_18A5C5000, v16, OS_LOG_TYPE_INFO, v18, (uint8_t *)&v24, 0x16u);
LABEL_13:
    objc_sync_exit(v7);

    goto LABEL_18;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v22 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v23 = *(_QWORD *)(a1 + 32);
    v24 = 138412546;
    v25 = v23;
    v26 = 2112;
    v27 = v6;
    _os_log_impl(&dword_18A5C5000, v22, OS_LOG_TYPE_INFO, "Ignoring failed attempt to get process proxy for %@: %@", (uint8_t *)&v24, 0x16u);
  }
LABEL_18:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_18A6EA120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CKDeviceClass()
{
  return sub_18A5C7BE4(CFSTR("DeviceClass"));
}

void sub_18A6EA510(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 504);
    *(_QWORD *)(v8 + 504) = v7;

  }
}

void sub_18A6EA6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A6EA6B8(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A6EA6E0(uint64_t a1)
{

}

void sub_18A6EA6E8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 504));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A6EA844(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A6EA9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6EA9EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_18A6EBDA8(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;

  v2 = a2;
  v3 = (void *)objc_opt_class();
  v6 = (void *)objc_msgSend_copySortDescriptor_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

id sub_18A6EBDE8(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  void *v6;

  v2 = a2;
  v3 = (void *)objc_opt_class();
  v6 = (void *)objc_msgSend_copySortDescriptor_(v3, v4, (uint64_t)v2, v5);

  return v6;
}

uint64_t sub_18A6ECDDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    result = objc_msgSend_count(*(void **)(v5 + 24), a2, a3, a4);
  else
    result = objc_msgSend_count(0, a2, a3, a4);
  if (result)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 24);
    else
      v9 = 0;
    return objc_msgSend_addProperty_value_shouldRedact_(*(void **)(a1 + 40), v7, (uint64_t)CFSTR("subscriptionInfos"), v9, 0);
  }
  return result;
}

void sub_18A6ECEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6ECF04(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[6];
  v6 = v2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (unint64_t)objc_msgSend_count(v6, v3, v4, v5) > 1;

}

void sub_18A6ED000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6ED018(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

void sub_18A6ED108(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8) != *(unsigned __int8 *)(a1 + 40))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v2 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(unsigned __int8 *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 32);
      v8[0] = 67109378;
      v8[1] = v6;
      v9 = 2112;
      v10 = v7;
      _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Setting useOpportunisticPushTopics=%d for %@", (uint8_t *)v8, 0x12u);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = *(_BYTE *)(a1 + 40);
    sub_18A6ED218(*(_QWORD *)(a1 + 32), v3, v4, v5);
  }
}

void sub_18A6ED218(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  _QWORD v32[5];
  _QWORD v33[4];
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend_queue((void *)a1, a2, a3, a4);
    v5 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v5);

    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    objc_msgSend_allKeys(*(void **)(a1 + 48), v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v35, (uint64_t)v39, 16);
    if (v15)
    {
      v19 = v15;
      v20 = *(_QWORD *)v36;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v36 != v20)
            objc_enumerationMutation(v13);
          v22 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * v21);
          objc_msgSend_set(MEMORY[0x1E0C99E20], v16, v17, v18);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v9, v24, (uint64_t)v23, v22);

          ++v21;
        }
        while (v19 != v21);
        v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v35, (uint64_t)v39, 16);
      }
      while (v19);
    }

    v25 = MEMORY[0x1E0C809B0];
    v26 = *(void **)(a1 + 24);
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = sub_18A6EE2AC;
    v33[3] = &unk_1E1F61B60;
    v34 = v9;
    v27 = v9;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v26, v28, (uint64_t)v33, v29);
    v32[0] = v25;
    v32[1] = 3221225472;
    v32[2] = sub_18A6EE4F0;
    v32[3] = &unk_1E1F61B88;
    v32[4] = a1;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v27, v30, (uint64_t)v32, v31);

  }
}

void sub_18A6ED770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v28 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_18A6ED790(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6ED7A0(uint64_t a1)
{

}

void sub_18A6ED7A8(uint64_t a1, void *a2)
{
  void *v2;
  id v4;

  v2 = a2;
  if (!a2)
    a2 = (void *)*MEMORY[0x1E0CFE130];
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = v2;
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));

}

void sub_18A6ED808(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CKSubscriptionInfo *v6;
  const char *v7;
  id *p_isa;
  SEL v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_notification_listener;
  if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v17 = 138412802;
    v18 = v3;
    v19 = 2112;
    v20 = v4;
    v21 = 2112;
    v22 = v5;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Starting to listen to subscription %@ for database %@ in %@", (uint8_t *)&v17, 0x20u);
  }
  v6 = objc_alloc_init(CKSubscriptionInfo);
  p_isa = (id *)&v6->super.isa;
  if (v6)
  {
    objc_setProperty_nonatomic_copy(v6, v7, *(id *)(a1 + 32), 40);
    objc_storeStrong(p_isa + 1, *(id *)(a1 + 40));
    objc_storeStrong(p_isa + 2, *(id *)(a1 + 56));
    objc_storeStrong(p_isa + 3, *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
    objc_setProperty_nonatomic_copy(p_isa, v9, *(id *)(a1 + 64), 32);
  }
  objc_msgSend_uniqueKeyForSubscriptionID_inDatabase_(*(void **)(a1 + 48), v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v12 + 24), v10, (uint64_t)p_isa, (uint64_t)v11);
  else
    objc_msgSend_setObject_forKeyedSubscript_(0, v10, (uint64_t)p_isa, (uint64_t)v11);
  sub_18A6ED9B4(*(_QWORD **)(a1 + 48), v13, v14, v15);
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
    (*(void (**)(uint64_t, _QWORD))(v16 + 16))(v16, 0);

}

void sub_18A6ED9B4(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend_queue(a1, a2, a3, a4);
    v5 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v5);

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v6 = (void *)ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      v14 = a1[3];
      v16 = 138412290;
      v17 = v14;
      v15 = v6;
      _os_log_debug_impl(&dword_18A5C5000, v15, OS_LOG_TYPE_DEBUG, "Updating push notification listeners for subscription infos: %@", (uint8_t *)&v16, 0xCu);

    }
    v10 = a1[7];
    if (v10 == 1)
    {
      objc_msgSend_sharedPushRegistry(CKPKPushRegistry, v7, v8, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addDelegate_(v11, v12, (uint64_t)a1, v13);

    }
    else if (!v10)
    {
      sub_18A6ED218((uint64_t)a1, v7, v8, v9);
    }
  }
}

void sub_18A6EDCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A6EDCF8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_notification_listener;
  if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v15 = 138412802;
    v16 = v4;
    v17 = 2112;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Stopping listening to subscription %@ for database %@ in %@", (uint8_t *)&v15, 0x20u);
  }
  objc_msgSend_uniqueKeyForSubscriptionID_inDatabase_(*(void **)(a1 + 48), v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    objc_msgSend_removeObjectForKey_(*(void **)(v10 + 24), v7, (uint64_t)v9, v8);
  else
    objc_msgSend_removeObjectForKey_(0, v7, (uint64_t)v9, v8);
  sub_18A6ED9B4(*(_QWORD **)(a1 + 48), v11, v12, v13);
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
    (*(void (**)(uint64_t, _QWORD))(v14 + 16))(v14, 0);

}

void sub_18A6EDF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6EDF40(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;

  objc_msgSend_uniqueKeyForSubscriptionID_inDatabase_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
    v3 = (_QWORD *)v3[3];
  v4 = v3;
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)v8, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v7 != 0;

}

void sub_18A6EE234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6EE24C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  v2 = (_QWORD *)a1[4];
  if (v2)
    v2 = (_QWORD *)v2[6];
  v3 = a1[5];
  v9 = v2;
  objc_msgSend_objectForKeyedSubscript_(v9, v4, v3, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_18A6EE2AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  _BYTE v30[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
    v6 = (void *)v4[2];
  else
    v6 = 0;
  v7 = v6;
  objc_msgSend_applicationBundleIdentifierForPush(v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v12 = (void *)ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      if (v5)
        v28 = v5[5];
      else
        v28 = 0;
      *(_DWORD *)v30 = 138543618;
      *(_QWORD *)&v30[4] = v11;
      *(_WORD *)&v30[12] = 2112;
      *(_QWORD *)&v30[14] = v28;
      v29 = v12;
      _os_log_debug_impl(&dword_18A5C5000, v29, OS_LOG_TYPE_DEBUG, "Using bundle identifier %{public}@ for push notifications for subscription: %@", v30, 0x16u);

    }
    v15 = *(void **)(a1 + 32);
    if (v5)
      objc_msgSend_objectForKeyedSubscript_(v15, v13, v5[3], v14, *(_OWORD *)v30, *(_QWORD *)&v30[16], v31);
    else
      objc_msgSend_objectForKeyedSubscript_(v15, v13, 0, v14, *(_QWORD *)v30, *(_OWORD *)&v30[8], v31);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v19)
    {
      objc_msgSend_set(MEMORY[0x1E0C99E20], v16, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(void **)(a1 + 32);
      if (v5)
        objc_msgSend_setObject_forKeyedSubscript_(v21, v20, (uint64_t)v19, v5[3]);
      else
        objc_msgSend_setObject_forKeyedSubscript_(v21, v20, (uint64_t)v19, 0);
    }
    objc_msgSend_stringByAppendingString_(CFSTR("com.apple.icloud-container."), v16, (uint64_t)v11, v18);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v19, v23, (uint64_t)v22, v24);

  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v25 = (void *)ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
    {
      if (v5)
        v26 = v5[5];
      else
        v26 = 0;
      *(_DWORD *)v30 = 138412290;
      *(_QWORD *)&v30[4] = v26;
      v27 = v25;
      _os_log_impl(&dword_18A5C5000, v27, OS_LOG_TYPE_INFO, "No container bundle ID for push notifications for subscription: %@", v30, 0xCu);

    }
  }

}

void sub_18A6EE4F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  const char *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  const char *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  const char *v92;
  const char *v93;
  NSObject *v94;
  void *v95;
  NSObject *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  _QWORD v109[4];
  NSObject *v110;
  id v111;
  _QWORD v112[4];
  NSObject *v113;
  id v114;
  _QWORD v115[4];
  NSObject *v116;
  id v117;
  id location;
  _BYTE buf[24];
  NSObject *v120;
  NSObject *v121;
  id v122[5];

  v122[2] = *(id *)MEMORY[0x1E0C80C00];
  v5 = a2;
  v108 = a3;
  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
    v6 = (_QWORD *)v6[6];
  v7 = v6;
  v107 = v5;
  objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)v5, v9);
  v10 = objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v108, v11, v12, v13) && !v10)
  {
    objc_msgSend_machServiceName(*(void **)(a1 + 32), v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v18 = (void *)ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
      {
        v95 = *(void **)(a1 + 32);
        v96 = v18;
        objc_msgSend_machServiceName(v95, v97, v98, v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v100;
        _os_log_debug_impl(&dword_18A5C5000, v96, OS_LOG_TYPE_DEBUG, "Creating APS connection with mach service name %{public}@", buf, 0xCu);

      }
      v22 = (void *)MEMORY[0x1E0CFE148];
      objc_msgSend_machServiceName(*(void **)(a1 + 32), v19, v20, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_ck_singletonConnectionForEnvironmentName_namedDelegatePort_(v22, v24, (uint64_t)v107, (uint64_t)v23);
      v25 = objc_claimAutoreleasedReturnValue();

      v27 = *(_QWORD *)(a1 + 32);
      if (v27)
      {
        objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v27 + 48), v26, (uint64_t)v25, (uint64_t)v107);
LABEL_12:
        v28 = *(void **)(a1 + 32);
        v10 = v25;
        if (v28)
        {
          objc_msgSend_queue(v28, v29, v30, v31);
          v32 = objc_claimAutoreleasedReturnValue();
          dispatch_assert_queue_V2(v32);

          objc_msgSend_array(MEMORY[0x1E0C99DE8], v33, v34, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_initWeak(&location, v28);
          objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v37, v38, v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_18A6EEC94;
          v120 = &unk_1E1F61BB0;
          objc_copyWeak(v122, &location);
          v41 = v10;
          v121 = v41;
          objc_msgSend_addObserverForName_object_queue_usingBlock_(v40, v42, (uint64_t)CFSTR("CKAPSMachServiceConnectionDidReceivePublicTokenNotification"), (uint64_t)v41, 0, buf);
          v43 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_addObject_(v36, v44, (uint64_t)v43, v45);
          objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v46, v47, v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v115[0] = MEMORY[0x1E0C809B0];
          v115[1] = 3221225472;
          v115[2] = sub_18A6EED04;
          v115[3] = &unk_1E1F61BB0;
          objc_copyWeak(&v117, &location);
          v50 = v41;
          v116 = v50;
          objc_msgSend_addObserverForName_object_queue_usingBlock_(v49, v51, (uint64_t)CFSTR("CKAPSMachServiceConnectionDidReceiveIncomingMessageNotification"), (uint64_t)v50, 0, v115);
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_addObject_(v36, v53, (uint64_t)v52, v54);
          objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v55, v56, v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v112[0] = MEMORY[0x1E0C809B0];
          v112[1] = 3221225472;
          v112[2] = sub_18A6EED74;
          v112[3] = &unk_1E1F61BB0;
          objc_copyWeak(&v114, &location);
          v59 = v50;
          v113 = v59;
          objc_msgSend_addObserverForName_object_queue_usingBlock_(v58, v60, (uint64_t)CFSTR("CKAPSMachServiceConnectionDidChangeConnectedStatusNotification"), (uint64_t)v59, 0, v112);
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_addObject_(v36, v62, (uint64_t)v61, v63);
          objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v64, v65, v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v109[0] = MEMORY[0x1E0C809B0];
          v109[1] = 3221225472;
          v109[2] = sub_18A6EEDF4;
          v109[3] = &unk_1E1F61BB0;
          objc_copyWeak(&v111, &location);
          v110 = v59;
          objc_msgSend_addObserverForName_object_queue_usingBlock_(v67, v68, (uint64_t)CFSTR("CKAPSMachServiceConnectionDidReconnectNotification"), (uint64_t)v110, 0, v109);
          v69 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_addObject_(v36, v70, (uint64_t)v69, v71);
          objc_msgSend_notificationObservers(v28, v72, v73, v74);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = v78;
          if (!v78)
          {
            objc_msgSend_array(MEMORY[0x1E0C99D20], v75, v76, v77);
            v79 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend_arrayByAddingObjectsFromArray_(v79, v75, (uint64_t)v36, v77);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setNotificationObservers_(v28, v81, (uint64_t)v80, v82);

          if (!v78)
          objc_destroyWeak(&v111);

          objc_destroyWeak(&v114);
          objc_destroyWeak(&v117);

          objc_destroyWeak(v122);
          objc_destroyWeak(&location);

        }
        goto LABEL_19;
      }
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v25 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_18A5C5000, v25, OS_LOG_TYPE_ERROR, "BUG IN CLIENT OF CLOUDKIT: When using CKNotificationListener in a daemon, you must supply an APS mach service name to -[CKNotificationListener initWithMachServiceName:]. Otherwise, your process won't be launched for push notifications. See header comments in CKNotificationListener_Private.h.", buf, 2u);
      }
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v101, (uint64_t)CFSTR("BUG IN CLIENT OF CLOUDKIT: When using CKNotificationListener in a daemon, you must supply an APS mach service name to -[CKNotificationListener initWithMachServiceName:]. Otherwise, your process won't be launched for push notifications. See header comments in CKNotificationListener_Private.h."), v102);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_UTF8String(v103, v104, v105, v106);
      _os_crash();
      __break(1u);
    }
    objc_msgSend_setObject_forKeyedSubscript_(0, v26, (uint64_t)v25, (uint64_t)v107);
    goto LABEL_12;
  }
LABEL_19:
  if (v10)
  {
    v83 = v10;
    objc_sync_enter(v83);
    if ((objc_msgSend_useOpportunisticPushTopics(*(void **)(a1 + 32), v84, v85, v86) & 1) != 0)
    {
      objc_msgSend_allObjects(v108, v87, v88, v89);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = 0;
      objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_(v83, v92, 0, 0, v90, 0);
    }
    else
    {
      objc_msgSend_allObjects(v108, v87, v88, v89);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      v90 = 0;
      objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_(v83, v93, (uint64_t)v91, 0, 0, 0);
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v94 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v91;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v90;
      *(_WORD *)&buf[22] = 2112;
      v120 = v83;
      _os_log_debug_impl(&dword_18A5C5000, v94, OS_LOG_TYPE_DEBUG, "Setting enabled topics %@, opportunistic topics %@ on %@", buf, 0x20u);
    }

    objc_sync_exit(v83);
  }

}

void sub_18A6EEBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;

  objc_sync_exit(v32);
  _Unwind_Resume(a1);
}

void sub_18A6EEC94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  id WeakRetained;
  const char *v9;
  id v10;

  objc_msgSend_userInfo(a2, (const char *)a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("publicToken"), v7);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connection_didReceivePublicToken_(WeakRetained, v9, *(_QWORD *)(a1 + 32), (uint64_t)v10);

}

void sub_18A6EED04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  id WeakRetained;
  const char *v9;
  id v10;

  objc_msgSend_userInfo(a2, (const char *)a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("message"), v7);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connection_didReceiveIncomingMessage_(WeakRetained, v9, *(_QWORD *)(a1 + 32), (uint64_t)v10);

}

void sub_18A6EED74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  id WeakRetained;

  objc_msgSend_userInfo(a2, (const char *)a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("connected"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_BOOLValue(v8, v9, v10, v11);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connection_didChangeConnectedStatus_(WeakRetained, v13, *(_QWORD *)(a1 + 32), v12);

}

void sub_18A6EEDF4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_connectionDidReconnect_(WeakRetained, v2, *(_QWORD *)(a1 + 32), v3);

}

void sub_18A6EF150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6EF170(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  const char *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (objc_msgSend_isEqual_(a3, v8, *(_QWORD *)(a1 + 32), v9))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_18A6EF308(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BOOL4 v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  const char *v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id obj;
  NSObject *group;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[4];
  id v69;
  id v70;
  _QWORD block[4];
  id v72;
  id v73;
  uint64_t v74;
  id v75;
  _BYTE *v76;
  _QWORD v77[5];
  id v78;
  NSObject *v79;
  NSObject *v80;
  _BYTE *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD v86[4];
  id v87;
  id v88;
  uint8_t buf[4];
  void *v90;
  __int16 v91;
  uint64_t v92;
  _BYTE v93[24];
  char v94;
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  group = dispatch_group_create();
  objc_msgSend_notificationFromRemoteNotificationDictionary_(CKNotification, v2, *(_QWORD *)(a1 + 32), v3);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (_QWORD *)&unk_18A83C000;
  if (v63)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v5 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
    {
      v61 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v93 = 138412546;
      *(_QWORD *)&v93[4] = v63;
      *(_WORD *)&v93[12] = 2112;
      *(_QWORD *)&v93[14] = v61;
      _os_log_debug_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_DEBUG, "Received CKNotification: %@ for %@", v93, 0x16u);
    }
    v6 = *(_QWORD **)(a1 + 40);
    if (v6)
      v6 = (_QWORD *)v6[3];
    v7 = v6;
    objc_msgSend_allValues(v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v86[0] = MEMORY[0x1E0C809B0];
    v86[1] = 3221225472;
    v86[2] = sub_18A6EFA14;
    v86[3] = &unk_1E1F61C00;
    v87 = *(id *)(a1 + 48);
    v12 = v63;

    v88 = v12;
    objc_msgSend_CKFilter_(v11, v13, (uint64_t)v86, v14);
    v62 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend_count(v62, v15, v16, v17))
    {
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      obj = v62;
      v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v18, (uint64_t)&v82, (uint64_t)v95, 16);
      if (v67)
      {
        v66 = *(_QWORD *)v83;
        do
        {
          v19 = 0;
          do
          {
            if (*(_QWORD *)v83 != v66)
              objc_enumerationMutation(obj);
            v20 = *(_QWORD *)(*((_QWORD *)&v82 + 1) + 8 * v19);
            v21 = dispatch_group_create();
            *(_QWORD *)v93 = 0;
            *(_QWORD *)&v93[8] = v93;
            *(_QWORD *)&v93[16] = 0x2020000000;
            v94 = 0;
            objc_msgSend_testDeviceID(v12, v22, v23, v24);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            if (v20)
              v26 = *(void **)(v20 + 16);
            else
              v26 = 0;
            v27 = v26;
            objc_msgSend_deviceContext(v27, v28, v29, v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_testDeviceReferenceProtocol(v31, v32, v33, v34);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_deviceID(v35, v36, v37, v38);
            v39 = (void *)objc_claimAutoreleasedReturnValue();

            if ((CKObjectsAreBothNilOrEqual(v25, v39) & 1) != 0)
            {
              objc_msgSend_subscriptionOwnerUserRecordID(v12, v40, v41, v42);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = v43 == 0;

              if (v44)
              {
                if (ck_log_initialization_predicate != -1)
                  dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                v54 = ck_log_facility_notification_listener;
                if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_debug_impl(&dword_18A5C5000, v54, OS_LOG_TYPE_DEBUG, "No user record ID in notification", buf, 2u);
                }
                *(_BYTE *)(*(_QWORD *)&v93[8] + 24) = 1;
              }
              else
              {
                dispatch_group_enter(group);
                dispatch_group_enter(v21);
                if (ck_log_initialization_predicate != -1)
                  dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
                v45 = (id)ck_log_facility_notification_listener;
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                {
                  objc_msgSend_subscriptionOwnerUserRecordID(v12, v46, v47, v48);
                  v58 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412546;
                  v90 = v58;
                  v91 = 2112;
                  v92 = v20;
                  _os_log_debug_impl(&dword_18A5C5000, v45, OS_LOG_TYPE_DEBUG, "Checking notification's user record ID %@ against container user record ID for %@", buf, 0x16u);

                }
                if (v20)
                  v49 = *(void **)(v20 + 16);
                else
                  v49 = 0;
                v50 = v49;
                v77[0] = MEMORY[0x1E0C809B0];
                v77[1] = 3221225472;
                v77[2] = sub_18A6EFB64;
                v77[3] = &unk_1E1F61C28;
                v77[4] = v20;
                v81 = v93;
                v78 = v12;
                v79 = group;
                v80 = v21;
                objc_msgSend_fetchUserRecordIDWithCompletionHandler_(v50, v51, (uint64_t)v77, v52);

              }
            }
            else
            {
              if (ck_log_initialization_predicate != -1)
                dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
              v53 = ck_log_facility_notification_listener;
              if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl(&dword_18A5C5000, v53, OS_LOG_TYPE_DEBUG, "Notification was destined for a different test device", buf, 2u);
              }
              *(_BYTE *)(*(_QWORD *)&v93[8] + 24) = 0;
            }
            v55 = *(_QWORD *)(a1 + 40);
            if (v55)
              v56 = *(NSObject **)(v55 + 40);
            else
              v56 = 0;
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = sub_18A6EFDF4;
            block[3] = &unk_1E1F61C50;
            v76 = v93;
            v72 = v12;
            v73 = *(id *)(a1 + 32);
            v74 = v20;
            v75 = *(id *)(a1 + 56);
            dispatch_group_notify(v21, v56, block);

            _Block_object_dispose(v93, 8);
            ++v19;
          }
          while (v67 != v19);
          v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v82, (uint64_t)v95, 16);
          v67 = v59;
        }
        while (v59);
      }

    }
    v4 = &unk_18A83C000;
  }
  dispatch_get_global_queue(0, 0);
  v60 = objc_claimAutoreleasedReturnValue();
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = v4[461];
  v68[2] = sub_18A6F0090;
  v68[3] = &unk_1E1F61C78;
  v70 = *(id *)(a1 + 64);
  v69 = *(id *)(a1 + 56);
  dispatch_group_notify(group, v60, v68);

}

void sub_18A6EF9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6EFA14(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  int isEqualToString;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t isEqual;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  if (v6
    && (!v5
      ? (isEqualToString = objc_msgSend_isEqualToString_(v6, v3, 0, v4))
      : (isEqualToString = objc_msgSend_isEqualToString_(v6, v3, *((_QWORD *)v5 + 3), v4)),
        !isEqualToString)
    || objc_msgSend_conformsToProtocol_(*(void **)(a1 + 40), v3, (uint64_t)&unk_1EDF97A10, v4)
    && ((v14 = objc_msgSend_databaseScope(*(void **)(a1 + 40), v8, v9, v10), !v5)
      ? (v15 = objc_msgSend_databaseScope(0, v11, v12, v13))
      : (v15 = objc_msgSend_databaseScope(*((void **)v5 + 1), v11, v12, v13)),
        v14 != v15))
  {
    isEqual = 0;
  }
  else
  {
    if (v5)
      v16 = (void *)*((_QWORD *)v5 + 5);
    else
      v16 = 0;
    v17 = v16;
    objc_msgSend_subscriptionID(*(void **)(a1 + 40), v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqual_(v17, v22, (uint64_t)v21, v23))
    {
      if (v5)
        v24 = (void *)*((_QWORD *)v5 + 1);
      else
        v24 = 0;
      v25 = v24;
      objc_msgSend_container(v25, v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(v29, v30, v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_containerID(*(void **)(a1 + 40), v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      isEqual = objc_msgSend_isEqual_(v33, v38, (uint64_t)v37, v39);
    }
    else
    {
      isEqual = 0;
    }

  }
  return isEqual;
}

void sub_18A6EFB64(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  int isEqual;
  NSObject *v14;
  char v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  int v27;
  id v28;
  __int16 v29;
  id v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v9 = a3;
  if (v5)
  {
    objc_msgSend_subscriptionOwnerUserRecordID(*(void **)(a1 + 40), v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v10, v11, (uint64_t)v5, v12);

    if (isEqual)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v14 = ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(void **)(a1 + 32);
        v27 = 138412290;
        v28 = v19;
        _os_log_debug_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_DEBUG, "Container user is equal to subscription user for %@", (uint8_t *)&v27, 0xCu);
      }
      v15 = 1;
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v18 = (void *)ck_log_facility_notification_listener;
      if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(void **)(a1 + 40);
        v21 = v18;
        objc_msgSend_subscriptionOwnerUserRecordID(v20, v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = *(_QWORD *)(a1 + 32);
        v27 = 138412802;
        v28 = v5;
        v29 = 2112;
        v30 = v25;
        v31 = 2112;
        v32 = v26;
        _os_log_debug_impl(&dword_18A5C5000, v21, OS_LOG_TYPE_DEBUG, "Container user %@ is not equal to subscription user %@ for %@", (uint8_t *)&v27, 0x20u);

      }
      v15 = 0;
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v16 = ck_log_facility_notification_listener;
    v15 = 1;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_INFO))
    {
      v17 = *(void **)(a1 + 32);
      v27 = 138412546;
      v28 = v17;
      v29 = 2112;
      v30 = v9;
      _os_log_impl(&dword_18A5C5000, v16, OS_LOG_TYPE_INFO, "Couldn't fetch user record ID to compare to notification for %@: %@", (uint8_t *)&v27, 0x16u);
    }
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v15;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_18A6EFDF4(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  os_activity_scope_state_s v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24))
  {
    v2 = _os_activity_create(&dword_18A5C5000, "client/notification-listener-receive", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    v21.opaque[0] = 0;
    v21.opaque[1] = 0;
    os_activity_scope_enter(v2, &v21);
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v3 = ck_log_facility_notification_listener;
    if (os_log_type_enabled((os_log_t)ck_log_facility_notification_listener, OS_LOG_TYPE_DEFAULT))
    {
      v4 = a1[4];
      v5 = (void *)a1[5];
      *(_DWORD *)buf = 138412546;
      v23 = v4;
      v24 = 2114;
      v25 = v5;
      _os_log_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_DEFAULT, "Running handler for notification %@: %{public}@", buf, 0x16u);
    }
    v6 = a1[6];
    if (v6)
    {
      v7 = *(id *)(v6 + 32);
      if (v7)
      {
        v8 = a1[6];
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 40) == 0;

          if (!v9)
          {
            v10 = (_QWORD *)a1[6];
            if (v10)
              v10 = (_QWORD *)v10[4];
            v11 = v10;
            v12 = a1[4];
            v13 = (_QWORD *)a1[6];
            if (v13)
              v13 = (_QWORD *)v13[5];
            v14 = v13;
            ((void (*)(NSObject *, uint64_t, _QWORD *))v11[2].isa)(v11, v12, v14);

LABEL_19:
            os_activity_scope_leave(&v21);

            return;
          }
        }
        else
        {

        }
      }
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v11 = (id)ck_log_facility_notification_listener;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v15 = a1[6];
      if (v15)
        v16 = *(void **)(v15 + 32);
      else
        v16 = 0;
      v17 = v16;
      v18 = _Block_copy(v17);
      v19 = v18;
      v20 = a1[6];
      if (v20)
        v20 = *(_QWORD *)(v20 + 40);
      *(_DWORD *)buf = 138412802;
      v23 = v15;
      v24 = 2048;
      v25 = v18;
      v26 = 2048;
      v27 = v20;
      _os_log_error_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_ERROR, "Tried to notify for info %@, but a necessary property is missing: %p %p", buf, 0x20u);

    }
    goto LABEL_19;
  }
}

void sub_18A6F0074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6F0090(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_18A6F0394(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18A6F096C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6F0A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18A6F1138(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6F1658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CKDPOneTimeFullTokenInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v21 += 7;
            v14 = v22++ >= 9;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
      }
      v20 = *(void **)(a1 + v19);
      *(_QWORD *)(a1 + v19) = v18;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t CKDPRecordReferenceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  CKDPRecordIdentifier *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(CKDPRecordIdentifier);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !CKDPRecordIdentifierReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_18A6F3540(id *a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  const __CFString *v43;
  void *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v2 = a1[4];
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v39, (uint64_t)v45, 16);
  if (v4)
  {
    v8 = v4;
    v9 = *(_QWORD *)v40;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v40 != v9)
          objc_enumerationMutation(v2);
        objc_msgSend_dbTableName(*(void **)(*((_QWORD *)&v39 + 1) + 8 * v10), v5, v6, v7, (_QWORD)v39);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (id)objc_msgSend_dropTable_(a1[5], v12, (uint64_t)v11, v13);
        objc_msgSend_addObject_(a1[6], v15, (uint64_t)v11, v16);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v39, (uint64_t)v45, 16);
    }
    while (v8);
  }

  v43 = CFSTR("GROUPID");
  objc_msgSend_groupID(a1[7], v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v20;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v21, (uint64_t)&v44, (uint64_t)&v43, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_deleteEntriesMatching_label_error_predicate_(a1[8], v23, (uint64_t)v22, 0, 0, &unk_1E1F58458);
  objc_msgSend_removeValidatedTableGroup_(a1[5], v24, (uint64_t)a1[7], v25);
  v28 = (id)objc_msgSend_deleteObject_(a1[9], v26, (uint64_t)a1[7], v27);
  objc_msgSend_keyValueCleaner(a1[5], v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_name(a1[7], v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_purgeKeyValuePropertiesForGroupName_tableNames_(v32, v37, (uint64_t)v36, (uint64_t)a1[6]);

  return 0;
}

uint64_t sub_18A6F3720(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("groupID = $GROUPID"), a4);
}

id sub_18A6F39BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend_tocTableGroupTable(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invalidateGroup_(v5, v6, *(_QWORD *)(a1 + 32), v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96) = 1;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    objc_msgSend_allTables(*(void **)(a1 + 32), v8, v9, v10, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v21, (uint64_t)v25, 16);
    if (v14)
    {
      v17 = v14;
      v18 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v22 != v18)
            objc_enumerationMutation(v12);
          objc_msgSend_deleteAllEntries_(*(void **)(*((_QWORD *)&v21 + 1) + 8 * i), v15, 0, v16);
        }
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v15, (uint64_t)&v21, (uint64_t)v25, 16);
      }
      while (v17);
    }

  }
  return v11;
}

uint64_t sub_18A6F3D34(void **a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  id v20;
  _QWORD v21[4];
  id v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = sub_18A6F3E94;
  v28 = sub_18A6F3EA4;
  v29 = 0;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_18A6F3EAC;
  v21[3] = &unk_1E1F61D78;
  v23 = &v24;
  v2 = a1[4];
  v22 = a1[5];
  objc_msgSend_usingTableGroupCachePerformBlock_(v2, v3, (uint64_t)v21, v4);
  v7 = v25[5];
  if (v7)
  {
    objc_msgSend_purgeGroup_(a1[6], v5, v7, v6);
  }
  else
  {
    objc_msgSend_tocTableGroup(a1[4], v5, 0, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_tocTableGroupTable(v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (uint64_t)a1[5];
    v20 = 0;
    objc_msgSend_entryWithGroupName_error_(v12, v14, v13, (uint64_t)&v20);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v20;
    objc_msgSend_deleteTables_(v15, v17, (uint64_t)a1[4], v18);

  }
  _Block_object_dispose(&v24, 8);

  return 0;
}

void sub_18A6F3E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6F3E94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A6F3EA4(uint64_t a1)
{

}

void sub_18A6F3EAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend_objectForKey_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_18A6F42A8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  const char *v9;
  const char *v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a3;
  v8 = a2;
  objc_msgSend_valueForProperty_propertyInfo_inObject_(v5, v9, (uint64_t)v8, (uint64_t)v7, v6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forProperty_propertyInfo_inObject_(*(void **)(a1 + 32), v10, (uint64_t)v11, (uint64_t)v8, v7, *(_QWORD *)(a1 + 48));

}

void sub_18A6F4424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6F443C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend_objectForKey_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

_BYTE *sub_18A6F4478(uint64_t a1, void *a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v8;
  id v9;
  objc_class *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  const char *v21;
  _BYTE *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  int v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = (objc_class *)objc_opt_self();
  objc_msgSend_tocTableGroup(v8, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_tocTableGroupTable(v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a4 & 0x10000) != 0)
  {
    v34 = 0;
    v22 = 0;
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v19 = ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
    {
      v38 = 138543362;
      v39 = v9;
      _os_log_debug_impl(&dword_18A5C5000, v19, OS_LOG_TYPE_DEBUG, "Creating new table group: %{public}@.", (uint8_t *)&v38, 0xCu);
    }
    v20 = [v10 alloc];
    v22 = (_BYTE *)objc_msgSend_initWithName_options_database_(v20, v21, (uint64_t)v9, a4, v8);
    objc_msgSend_date(MEMORY[0x1E0C99D68], v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setLastUsed_(v22, v27, (uint64_t)v26, v28);

    NSStringFromClass(v10);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setCreatingClass_(v22, v30, (uint64_t)v29, v31);

    objc_msgSend_insertObject_(v18, v32, (uint64_t)v22, v33);
    v34 = (id)objc_claimAutoreleasedReturnValue();
    if (v34)
    {
      v22[97] = 1;
      if (a5)
      {
        v34 = objc_retainAutorelease(v34);
        *a5 = v34;
      }
    }
    else
    {
      objc_msgSend_tableGroupPassedValidation_(v8, v35, (uint64_t)v22, v36);
      v34 = 0;
      v22[97] = 1;
    }
  }

  return v22;
}

void sub_18A6F48A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  pthread_mutex_t *v19;

  if (v19)
  {
    v19[1].__sig = 0;
    pthread_mutex_unlock(v19);
  }
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

id sub_18A6F48E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  const char *v15;
  void *v16;
  id v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  _QWORD v82[4];
  id v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;

  objc_msgSend_tocTableGroup(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_tocTableGroupTable(v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(id *)(a1 + 32);
  v13 = v10;
  v14 = (void *)objc_opt_self();
  v87 = 0;
  objc_msgSend_groupEntryInDatabase_withGroupName_error_(v14, v15, (uint64_t)v12, (uint64_t)v13, &v87);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = v87;
  v19 = v17;
  if (v17 || !v16)
  {
    if (v17)
      v34 = objc_retainAutorelease(v17);
    else
      v34 = 0;
    v20 = 0;
  }
  else
  {
    objc_msgSend_tableGroupWithEntry_database_options_(v14, v18, (uint64_t)v16, (uint64_t)v12, v11);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20 && (v21 = (void *)objc_opt_class(), objc_msgSend_rebootShouldClearData(v21, v22, v23, v24)))
    {
      v81 = v9;
      CKBootDate();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lastUsed(v20, v26, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend_compare_(v25, v30, (uint64_t)v29, v31);

      if (v32 == 1)
      {
        objc_msgSend_expireGroup_reason_database_(v14, v33, (uint64_t)v20, (uint64_t)CFSTR("rebooted"), v12);

        v20 = 0;
      }

      v34 = 0;
      v9 = v81;
    }
    else
    {
      v34 = 0;
    }
  }

  v35 = (uint64_t)v34;
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v37 = *(void **)(v36 + 40);
  *(_QWORD *)(v36 + 40) = v20;

  v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (!(v41 | v35))
  {
    v42 = *(void **)(a1 + 32);
    v43 = *(void **)(a1 + 40);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(_QWORD *)(a1 + 64);
    v86 = 0;
    sub_18A6F4478(v44, v42, v43, v45, &v86);
    v46 = objc_claimAutoreleasedReturnValue();
    v35 = (uint64_t)v86;
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v48 = *(void **)(v47 + 40);
    *(_QWORD *)(v47 + 40) = v46;

    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  }
  if (!v41)
    goto LABEL_17;
  objc_msgSend_prepareTables((void *)v41, v38, v39, v40);
  v49 = objc_claimAutoreleasedReturnValue();

  v35 = v49;
  if (v49)
    goto LABEL_17;
  v53 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v53[56])
  {
    v35 = 0;
    v54 = 0;
    goto LABEL_24;
  }
  v54 = v53;
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v56 = *(void **)(v55 + 40);
  *(_QWORD *)(v55 + 40) = 0;

  if ((*(_BYTE *)(a1 + 66) & 1) != 0)
  {
    v35 = 0;
  }
  else
  {
    objc_msgSend_invalidateGroup_(v9, v50, (uint64_t)v54, v51);
    v57 = objc_claimAutoreleasedReturnValue();
    if (v57)
    {
LABEL_22:
      v35 = v57;
      goto LABEL_24;
    }
    v73 = *(void **)(a1 + 32);
    v74 = *(void **)(a1 + 40);
    v75 = *(_QWORD *)(a1 + 56);
    v76 = *(_QWORD *)(a1 + 64);
    v85 = 0;
    sub_18A6F4478(v75, v73, v74, v76, &v85);
    v77 = objc_claimAutoreleasedReturnValue();
    v35 = (uint64_t)v85;
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v79 = *(void **)(v78 + 40);
    *(_QWORD *)(v78 + 40) = v77;

    if (!v35)
    {
      objc_msgSend_prepareTables(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v50, v80, v51);
      v57 = objc_claimAutoreleasedReturnValue();
      goto LABEL_22;
    }
  }
LABEL_24:
  if (v54 && (v58 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)) != 0 && !v35)
  {
    objc_msgSend_performDataMigration_(v58, v50, (uint64_t)v54, v51);
    v59 = objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      v35 = v59;

      goto LABEL_17;
    }
    objc_msgSend_purgeGroup_(*(void **)(a1 + 56), v60, (uint64_t)v54, v61);

  }
  else
  {

    if (v35)
      goto LABEL_17;
  }
  objc_msgSend_finishInitializing(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v62, v63, v64, v81);
  v65 = objc_claimAutoreleasedReturnValue();
  v35 = v65;
  v68 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(*(_QWORD *)(v68 + 8) + 40) && !v65)
  {
    v69 = *(_QWORD *)(a1 + 64);
    if ((v69 & 0x40000) == 0)
    {
      v82[0] = MEMORY[0x1E0C809B0];
      v82[1] = 3221225472;
      v82[2] = sub_18A6F4CC0;
      v82[3] = &unk_1E1F61D78;
      v84 = v68;
      v70 = *(void **)(a1 + 32);
      v83 = *(id *)(a1 + 40);
      objc_msgSend_usingTableGroupCachePerformBlock_(v70, v71, (uint64_t)v82, v72);

      v69 = *(_QWORD *)(a1 + 64);
    }
    if ((v69 & 0x20000) == 0)
      objc_msgSend_updateLastUsedDate_(v9, v66, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v67);
    v35 = 0;
  }
LABEL_17:

  return (id)v35;
}

uint64_t sub_18A6F4CC0(uint64_t a1, void *a2)
{
  return objc_msgSend_setObject_forKey_(a2, (const char *)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32));
}

void sub_18A6F5018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6F5030(uint64_t a1, const char *a2, void *a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_finishInitializing(a3, a2, (uint64_t)a3, (uint64_t)a4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    *a4 = 1;
}

void sub_18A6F596C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend_dbTableNameForLogicalTableName_(v4, v6, a2, v7);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDbTableName_(v5, v8, (uint64_t)v10, v9);

}

uint64_t sub_18A6F5F34(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(a1 + 32) + 64), a2, a3, (uint64_t)a2);
}

uint64_t sub_18A6F5F4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__addExtraTablesForTable_(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18A6F6E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

id sub_18A6F6E90(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  char v17;
  id v18;
  const char *v19;
  id v20;
  id v22;
  void *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = *(id *)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v25, (uint64_t)v29, 16);
  if (v4)
  {
    v8 = v4;
    v9 = *(_QWORD *)v26;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v26 != v9)
        objc_enumerationMutation(v2);
      v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v10);
      objc_msgSend_logicalTableName(v11, v5, v6, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_tableWithName_(*(void **)(a1 + 40), v13, (uint64_t)v12, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 0;
      v17 = objc_msgSend_migrateDataFromTable_error_(v15, v16, (uint64_t)v11, (uint64_t)&v24);
      v18 = v24;
      v20 = v24;
      if (v20)
        break;
      if ((v17 & 1) == 0)
      {
        objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v19, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("migration failed for table: %@"), v12);
        v22 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_13;
      }

      if (v8 == ++v10)
      {
        v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v25, (uint64_t)v29, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v18);
    v22 = v20;
LABEL_13:
    v23 = v22;

    return v23;
  }
LABEL_10:

  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
}

void sub_18A6F7150(_Unwind_Exception *exception_object)
{
  pthread_mutex_t *v1;

  if (v1)
  {
    v1[1].__sig = 0;
    pthread_mutex_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A6F71F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6F776C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  objc_class *v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;

  if (a3)
  {
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v6, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No int64 binding value for %@"), v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_retainAutorelease(v7);
    *a3 = v8;

  }
  return 0;
}

id sub_18A6F77FC(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  sqlite3_int64 v11;
  id v12;
  const char *v13;
  uint64_t v14;
  id v16;

  v8 = a5;
  v16 = 0;
  v11 = objc_msgSend_cksqlcs_int64BindingValue_(a1, v9, (uint64_t)&v16, v10);
  v12 = v16;
  if (!v12)
  {
    if (sqlite3_bind_int64(a3, a4, v11))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v13, (uint64_t)CFSTR("Failed to bind int64 value"), v14);
      v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = 0;
    }
  }

  return v12;
}

double sub_18A6F78A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  objc_class *v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;

  if (a3)
  {
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v6, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No double binding value for %@"), v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_retainAutorelease(v7);
    *a3 = v8;

  }
  return 0.0;
}

id sub_18A6F7930(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8;
  const char *v9;
  uint64_t v10;
  double v11;
  double v12;
  id v13;
  const char *v14;
  uint64_t v15;
  id v17;

  v8 = a5;
  v17 = 0;
  objc_msgSend_cksqlcs_doubleBindingValue_(a1, v9, (uint64_t)&v17, v10);
  v12 = v11;
  v13 = v17;
  if (!v13)
  {
    if (sqlite3_bind_double(a3, a4, v12))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v14, (uint64_t)CFSTR("Failed to bind double value"), v15);
      v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }
  }

  return v13;
}

const char *sub_18A6F79D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  objc_class *v6;
  void *v7;
  const char *v8;
  void *v9;
  id v10;

  if (a5)
  {
    v6 = (objc_class *)objc_opt_class();
    NSStringFromClass(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v8, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No text binding value for %@"), v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_retainAutorelease(v9);
    *a5 = v10;

  }
  return "";
}

id sub_18A6F7A68(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8;
  const char *v9;
  const void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  id v15;
  void (__cdecl *v16)(void *);
  int v17;

  v8 = a5;
  v17 = 0;
  v15 = 0;
  v16 = 0;
  v10 = (const void *)objc_msgSend_cksqlcs_textBindingValue_destructor_error_(a1, v9, (uint64_t)&v17, (uint64_t)&v16, &v15);
  v11 = v15;
  if (!v11)
  {
    if (sqlite3_bind_text16(a3, a4, v10, v17, v16))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v12, (uint64_t)CFSTR("Failed to bind text value"), v13);
      v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
  }

  return v11;
}

uint64_t sub_18A6F7B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  objc_class *v6;
  void *v7;
  const char *v8;
  void *v9;
  id v10;

  if (a5)
  {
    v6 = (objc_class *)objc_opt_class();
    NSStringFromClass(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v8, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No blob binding value for %@"), v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_retainAutorelease(v9);
    *a5 = v10;

  }
  return 0;
}

id sub_18A6F7BB0(void *a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  id v8;
  const char *v9;
  const void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  id v15;
  void (__cdecl *v16)(void *);
  sqlite3_uint64 v17;

  v8 = a5;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v10 = (const void *)objc_msgSend_cksqlcs_blobBindingValue_destructor_error_(a1, v9, (uint64_t)&v17, (uint64_t)&v16, &v15);
  v11 = v15;
  if (!v11)
  {
    if (sqlite3_bind_blob64(a3, a4, v10, v17, v16))
    {
      objc_msgSend_sqlErrorWithMessage_(v8, v12, (uint64_t)CFSTR("Failed to bind blob value"), v13);
      v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
  }

  return v11;
}

uint64_t sub_18A6F7C64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  objc_class *v4;
  void *v5;
  const char *v6;
  void *v7;
  id v8;

  if (a3)
  {
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v6, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("No archived object binding value for %@"), v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_retainAutorelease(v7);
    *a3 = v8;

  }
  return 0;
}

id sub_18A6F7CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *v14;

  v8 = a5;
  v9 = (void *)MEMORY[0x18D76DE4C]();
  objc_msgSend_databaseArchiveWithObject_(CKSQLiteDatabase, v10, a1, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_cksqlcs_bindBlob_index_db_(v12, v13, a3, a4, v8);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v9);
  return v14;
}

uint64_t sub_18A6F7D7C(void *a1, const char *a2, uint64_t *a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  *a3 = objc_msgSend_length(a1, a2, (uint64_t)a3, a4);
  v5 = objc_retainAutorelease(a1);
  return objc_msgSend_bytes(v5, v6, v7, v8);
}

void *sub_18A6F7DAC(void *a1, const char *a2, _DWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;

  v9 = objc_msgSend_length(a1, a2, (uint64_t)a3, (uint64_t)a4);
  v11 = malloc_type_malloc(2 * v9, 0xCE121CA2uLL);
  if (v11)
  {
    objc_msgSend_getCharacters_range_(a1, v10, (uint64_t)v11, 0, v9);
    *a3 = 2 * v9;
    *a4 = MEMORY[0x1E0C834A8];
  }
  else
  {
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v10, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("malloc() failed"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (a5)
      *a5 = objc_retainAutorelease(v12);

  }
  return v11;
}

void *sub_18A6F7E88(void *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;

  v7 = malloc_type_malloc(0x10uLL, 0xBDD228B8uLL);
  objc_msgSend_getUUIDBytes_(a1, v8, (uint64_t)v7, v9);
  *a3 = 16;
  *a4 = MEMORY[0x1E0C834A8];
  return v7;
}

id sub_18A6F7EF4(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  return sub_18A6F7F04(a3, a4, a5);
}

id sub_18A6F7F04(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;

  v5 = a3;
  if (sqlite3_bind_null(a1, a2))
  {
    objc_msgSend_sqlErrorWithMessage_(v5, v6, (uint64_t)CFSTR("Failed to bind NULL value"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_18A6F7F6C(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  return sub_18A6F7F04(a3, a4, a5);
}

id sub_18A6F7F7C(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, int a4, void *a5)
{
  return sub_18A6F7F04(a3, a4, a5);
}

uint64_t sub_18A6F8220(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("scope = %d AND scopeIdentifier IN %@"), a4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18A6F82E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("scope = %d AND NOT scopeIdentifier IN %@"), a4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18A6F86D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_predicateWithFormat_(MEMORY[0x1E0CB3880], a2, (uint64_t)CFSTR("number=NULL AND string=NULL AND data=NULL AND UUID=NULL AND object=NULL"), a4);
}

uint64_t sub_18A6F8B28(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(_QWORD *)(a1 + 40), &unk_1E1FC4058);
}

uint64_t sub_18A6F8F08(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(_QWORD *)(a1 + 40), &unk_1E1FC4088);
}

uint64_t sub_18A6F92E8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(_QWORD *)(a1 + 40), &unk_1E1FC40B8);
}

uint64_t sub_18A6F96C8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(_QWORD *)(a1 + 40), &unk_1E1FC40E8);
}

uint64_t sub_18A6F9AA8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(_QWORD *)(a1 + 40), &unk_1E1FC4118);
}

uint64_t sub_18A6F9E88(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_insertObject_orUpdateProperties_label_, *(_QWORD *)(a1 + 40), &unk_1E1FC4148);
}

id CKValidSharingURLHostnames()
{
  if (qword_1ECD96FC0 != -1)
    dispatch_once(&qword_1ECD96FC0, &unk_1E1F58498);
  return (id)qword_1ECD96FB8;
}

void sub_18A6FB7C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("icloud.com"), a4, CFSTR("www.icloud.com"), CFSTR("share.icloud.com"), CFSTR("icloud.com.cn"), CFSTR("www.icloud.com.cn"), CFSTR("share.icloud.com.cn"), 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD96FB8;
  qword_1ECD96FB8 = v4;

}

uint64_t CKBoolFromCKTernaryWithDefault(uint64_t a1, unsigned int a2)
{
  if (a1 == 1)
    a2 = 1;
  if (a1)
    return a2;
  else
    return 0;
}

id CKGetHomeDirRealPath()
{
  void *v0;
  void *v1;

  NSHomeDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  CKGetRealPath(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id CKGetDarwinTempDirRealPath()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  size_t v4;
  const char *v5;
  void *v6;
  void *v7;
  char __s[1024];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  confstr(65537, __s, 0x400uLL);
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v0, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = strlen(__s);
  objc_msgSend_stringWithFileSystemRepresentation_length_(v3, v5, (uint64_t)__s, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  CKGetRealPath(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id CKGetDarwinCacheDirRealPath()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  size_t v4;
  const char *v5;
  void *v6;
  void *v7;
  char __s[1024];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  confstr(65538, __s, 0x400uLL);
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v0, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = strlen(__s);
  objc_msgSend_stringWithFileSystemRepresentation_length_(v3, v5, (uint64_t)__s, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  CKGetRealPath(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t CKBootDate()
{
  void *v0;
  double v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = (void *)MEMORY[0x1E0C99D68];
  v1 = (double)CKBootTime();
  return objc_msgSend_dateWithTimeIntervalSince1970_(v0, v2, v3, v4, v1);
}

uint64_t CKCreateDirectoryAtURL(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;

  objc_msgSend_path(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = CKCreateDirectoryAtPathWithAttributes(v5, 0, a2);

  return v6;
}

id CKOperationProgressCallbackClasses()
{
  if (qword_1ECD96FE8 != -1)
    dispatch_once(&qword_1ECD96FE8, &unk_1E1F59878);
  return (id)qword_1ECD96FE0;
}

void sub_18A6FBAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;

  v41 = (void *)MEMORY[0x1E0C99E60];
  v40 = objc_opt_class();
  v39 = objc_opt_class();
  v38 = objc_opt_class();
  v37 = objc_opt_class();
  v36 = objc_opt_class();
  v35 = objc_opt_class();
  v34 = objc_opt_class();
  v33 = objc_opt_class();
  v32 = objc_opt_class();
  v31 = objc_opt_class();
  v30 = objc_opt_class();
  v29 = objc_opt_class();
  v28 = objc_opt_class();
  v27 = objc_opt_class();
  v26 = objc_opt_class();
  v25 = objc_opt_class();
  v24 = objc_opt_class();
  v23 = objc_opt_class();
  v22 = objc_opt_class();
  v21 = objc_opt_class();
  v20 = objc_opt_class();
  v19 = objc_opt_class();
  v18 = objc_opt_class();
  v17 = objc_opt_class();
  v16 = objc_opt_class();
  v15 = objc_opt_class();
  v0 = objc_opt_class();
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend_setWithObjects_(v41, v11, v40, v12, v39, v38, v37, v36, v35, v34, v33, v32, v31, v30, v29, v28, v27, v26, v25,
    v24,
    v23,
    v22,
    v21,
    v20,
    v19,
    v18,
    v17,
    v16,
    v15,
    v0,
    v1,
    v2,
    v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
    0);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)qword_1ECD96FE0;
  qword_1ECD96FE0 = v13;

}

id CKStringWithLimitedArray(void *a1, unint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;

  v3 = a1;
  if (objc_msgSend_count(v3, v4, v5, v6) <= a2)
  {
    CKStringWithArray(v3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_subarrayWithRange_(v3, v11, 0, a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v10, v13, (uint64_t)v12, v14);

    objc_msgSend_addObject_(v10, v15, (uint64_t)CFSTR("..."), v16);
    CKStringWithArray(v10);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v17;
}

id CKStringWithArray(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = a1;
  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v2, (uint64_t)CFSTR("["), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectEnumerator(v1, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_nextObject(v8, v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v16 = (void *)v12;
    do
    {
      if (objc_msgSend_length(v4, v13, v14, v15) != 1)
        objc_msgSend_appendString_(v4, v17, (uint64_t)CFSTR(", "), v18);
      CKStringWithObject(v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendString_(v4, v20, (uint64_t)v19, v21);

      objc_msgSend_nextObject(v8, v22, v23, v24);
      v25 = objc_claimAutoreleasedReturnValue();

      v16 = (void *)v25;
    }
    while (v25);
  }
  objc_msgSend_appendString_(v4, v13, (uint64_t)CFSTR("]"), v15);

  return v4;
}

id CKStringWithNibbles(unsigned __int8 *a1, unint64_t a2)
{
  _WORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  id v9;
  const char *v10;
  void *v11;
  NSObject *v12;
  int v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v12 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v14 = 134217984;
      v15 = a2;
      _os_log_impl(&dword_18A5C5000, v12, OS_LOG_TYPE_INFO, "Warn: That size was ridiculous: %lu. Refusing to create a string that log.", (uint8_t *)&v14, 0xCu);
    }
    v11 = 0;
  }
  else
  {
    v4 = malloc_type_malloc(2 * a2, 0x1000040BDFB0063uLL);
    v5 = (uint64_t)v4;
    if (a2)
    {
      v6 = 0;
      do
      {
        v8 = *a1++;
        v7 = v8;
        v4[v6] = a0123456789abcd_1[(unint64_t)v8 >> 4];
        if (v6 + 1 < a2)
          v4[v6 + 1] = a0123456789abcd_1[v7 & 0xF];
        v6 += 2;
      }
      while (v6 < a2);
    }
    v9 = objc_alloc(MEMORY[0x1E0CB3940]);
    v11 = (void *)objc_msgSend_initWithCharactersNoCopy_length_freeWhenDone_(v9, v10, v5, a2, 1);
  }
  return v11;
}

id CKStringWithBytes(unsigned __int8 *a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 < 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v4 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      v6 = 134217984;
      v7 = a2;
      _os_log_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_INFO, "Warn: That size was ridiculous: %lu. Refusing to create a string from bytes that long", (uint8_t *)&v6, 0xCu);
    }
    v3 = 0;
  }
  else
  {
    CKStringWithNibbles(a1, 2 * a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

id CKStringWithData(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v5 = (unsigned __int8 *)objc_msgSend_bytes(v1, v2, v3, v4);
  v9 = objc_msgSend_length(v1, v6, v7, v8);

  return CKStringWithBytes(v5, v9);
}

uint64_t CKStringWithDate(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](MEMORY[0x1E0CB3578], sel_localizedStringFromDate_dateStyle_timeStyle_, a1, 1);
}

id CKStringWithDictionary(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = a1;
  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v2, (uint64_t)CFSTR("{"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_keyEnumerator(v1, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_nextObject(v8, v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v16 = (void *)v12;
    do
    {
      if (objc_msgSend_length(v4, v13, v14, v15) != 1)
        objc_msgSend_appendString_(v4, v17, (uint64_t)CFSTR(", "), v18);
      objc_msgSend_objectForKeyedSubscript_(v1, v17, (uint64_t)v16, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      CKStringWithObject();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendFormat_(v4, v21, (uint64_t)CFSTR("%@: %@"), v22, v16, v20);

      objc_msgSend_nextObject(v8, v23, v24, v25);
      v26 = objc_claimAutoreleasedReturnValue();

      v16 = (void *)v26;
    }
    while (v26);
  }
  objc_msgSend_appendString_(v4, v13, (uint64_t)CFSTR("}"), v15);

  return v4;
}

id CKStringWithObject(void *a1)
{
  id v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    CKStringWithArray(v1);
    v2 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      CKStringWithData(v1);
      v2 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        CKStringWithDictionary(v1);
        v2 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          CKStringWithSet(v1);
          v2 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v3, (uint64_t)CFSTR("\"%@\""), v5, v1);
          else
            objc_msgSend_description(v1, v3, v4, v5);
          v2 = objc_claimAutoreleasedReturnValue();
        }
      }
    }
  }
  v6 = (void *)v2;

  return v6;
}

id CKStringWithSet(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = a1;
  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v2, (uint64_t)CFSTR("{"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectEnumerator(v1, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_nextObject(v8, v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v16 = (void *)v12;
    do
    {
      if (objc_msgSend_length(v4, v13, v14, v15) != 1)
        objc_msgSend_appendString_(v4, v17, (uint64_t)CFSTR(", "), v18);
      CKStringWithObject(v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendString_(v4, v20, (uint64_t)v19, v21);

      objc_msgSend_nextObject(v8, v22, v23, v24);
      v25 = objc_claimAutoreleasedReturnValue();

      v16 = (void *)v25;
    }
    while (v25);
  }
  objc_msgSend_appendString_(v4, v13, (uint64_t)CFSTR("}"), v15);

  return v4;
}

id CKShareURLSlugForiWorkShareTitle(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v3 = a1;
  v4 = a2;
  v8 = v4;
  if (qword_1ECD97018 == -1)
  {
    if (v4)
    {
LABEL_3:
      v9 = (void *)qword_1ECD97010;
      objc_msgSend_lowercaseString(v8, v5, v6, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v9, v11, (uint64_t)v10, v12);
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_1ECD97018, &unk_1E1F61FB0);
    if (v8)
      goto LABEL_3;
  }
  if (!v3)
  {
    v13 = 0;
    goto LABEL_6;
  }
  objc_msgSend_pathExtension(v3, v5, v6, v7);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v15, v16, v17, v18);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v13 = 0;
    goto LABEL_5;
  }
  objc_msgSend_objectForKeyedSubscript_((void *)qword_1ECD97010, v19, (uint64_t)v10, v20);
LABEL_4:
  v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_5:

LABEL_6:
  return v13;
}

void sub_18A6FC688()
{
  void *v0;

  v0 = (void *)qword_1ECD97010;
  qword_1ECD97010 = (uint64_t)&unk_1E1FC4C98;

}

uint64_t CKSharingContainerSupportsAdminParticipants(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  v4 = objc_msgSend_specialContainerType(a1, a2, a3, a4);
  return (v4 < 0x1A) & (0x2200010u >> v4);
}

id CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;

  v1 = a1;
  objc_msgSend_setupInfo(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend_copy(v5, v6, v7, v8);

  objc_msgSend_containerOptions(v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    objc_msgSend_containerOptions(v9, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_primaryIdentifier(v1, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setApplicationBundleIdentifierOverride_(v21, v26, (uint64_t)v25, v27);

  }
  return v9;
}

__CFString *CKSharingContainerSlugForContainerID(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  __CFString *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __CFString **v14;
  __CFString *v15;
  void *v17;
  __CFString *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  __CFString **v23;

  v5 = a2;
  v6 = a3;
  v7 = CFSTR("share");
  v11 = objc_msgSend_specialContainerType(a1, v8, v9, v10);
  if (v11 > 20)
  {
    switch(v11)
    {
      case 21:
        v14 = kCKNotesShareURLSlug;
        goto LABEL_14;
      case 25:
        v14 = kCKRemindersShareURLSlug;
        goto LABEL_14;
      case 28:
        if (!objc_msgSend_isEqualToString_(v6, v12, (uint64_t)CFSTR("safari-tab-groups"), v13))
          goto LABEL_16;
        v14 = kCKSafariTabGroupsShareURLSlug;
        break;
      case 29:
        if (!objc_msgSend_isEqualToString_(v6, v12, (uint64_t)CFSTR("freeform"), v13))
          goto LABEL_16;
        v14 = kCKFreeformShareURLSlug;
        break;
      default:
        goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v11 == 4)
  {
    v15 = CFSTR("iclouddrive");

    CKShareURLSlugForiWorkShareTitle(v5, v6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      v7 = v17;

      v15 = v7;
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_15;
  }
  if (v11 == 5)
  {
    v18 = CFSTR("photos");

    if (objc_msgSend_isEqualToString_(v6, v19, (uint64_t)CFSTR("photos_sharing"), v20))
    {
      v23 = kCKPhotosSharedLibraryShareURLSlug;
    }
    else
    {
      if (!objc_msgSend_isEqualToString_(v6, v21, (uint64_t)CFSTR("photos_links"), v22))
      {
        v7 = v18;
        goto LABEL_16;
      }
      v23 = kCKPhotosEPPMomentShareURLSlug;
    }
    v15 = *v23;
    v7 = v18;
    goto LABEL_15;
  }
  if (v11 == 6 && objc_msgSend_isEqualToString_(v6, v12, (uint64_t)CFSTR("events"), v13))
  {
    v14 = kCKEventsShareURLSlug;
LABEL_14:
    v15 = *v14;
LABEL_15:

    v7 = v15;
  }
LABEL_16:

  return v7;
}

const __CFString *CKStringForTransferSize(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("Unknown");
  else
    return off_1E1F62368[a1 - 1];
}

const __CFString *CKStringForNetworkServiceType(unint64_t a1)
{
  if (a1 > 0xB)
    return CFSTR("Unknown");
  else
    return off_1E1F623A0[a1];
}

const __CFString *CKStringForXPCActivityState(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("Unknown");
  else
    return off_1E1F62418[a1];
}

CFDataRef mmapFileDescriptor(int a1)
{
  NSObject *v2;
  CFDataRef v3;
  UInt8 *v5;
  UInt8 *v6;
  const __CFAllocator *v7;
  const __CFAllocator *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  off_t st_size;
  CFAllocatorContext context;
  stat v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v18.st_dev = 67109120;
    *(_DWORD *)&v18.st_mode = a1;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Memory mapping the file with fd %d", (uint8_t *)&v18, 8u);
    if (a1 < 0)
      goto LABEL_6;
  }
  else if (a1 < 0)
  {
    goto LABEL_6;
  }
  memset(&v18, 0, sizeof(v18));
  if (fstat(a1, &v18))
    goto LABEL_6;
  if (v18.st_size)
  {
    v5 = (UInt8 *)mmap(0, v18.st_size, 1, 1025, a1, 0);
    if (v5 != (UInt8 *)-1)
    {
      v6 = v5;
      context.version = 0;
      memset(&context.retain, 0, 40);
      context.info = (void *)v18.st_size;
      context.deallocate = (CFAllocatorDeallocateCallBack)sub_18A6FCD34;
      context.preferredSize = 0;
      v7 = CFAllocatorCreate(0, &context);
      if (v7)
      {
        v8 = v7;
        v3 = CFDataCreateWithBytesNoCopy(0, v6, v18.st_size, v7);
        if (!v3)
          munmap(v6, v18.st_size);
        CFRelease(v8);
      }
      else
      {
        v3 = 0;
      }
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v13 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        v14[0] = 67109376;
        v14[1] = a1;
        v15 = 2048;
        st_size = v18.st_size;
        _os_log_debug_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_DEBUG, "Successfully mapped fd %d (%lld bytes)", (uint8_t *)v14, 0x12u);
      }
      return v3;
    }
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v10 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      v12 = *__error();
      LODWORD(context.version) = 67109376;
      HIDWORD(context.version) = a1;
      LOWORD(context.info) = 1024;
      *(_DWORD *)((char *)&context.info + 2) = v12;
      _os_log_error_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_ERROR, "Could not mmap %d: %{errno}d", (uint8_t *)&context, 0xEu);

    }
LABEL_6:
    v3 = 0;
    return v3;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v9 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(context.version) = 0;
    _os_log_debug_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_DEBUG, "Memory mapping a zero byte file", (uint8_t *)&context, 2u);
  }
  return CFDataCreate(0, 0, 0);
}

void sub_18A6FCD34(void *a1, size_t a2)
{
  NSObject *v3;
  int v4;
  size_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  munmap(a1, a2);
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v3 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v4 = 134217984;
    v5 = a2;
    _os_log_debug_impl(&dword_18A5C5000, v3, OS_LOG_TYPE_DEBUG, "Unmapped %ld bytes", (uint8_t *)&v4, 0xCu);
  }
}

id mmapFileAtPath(void *a1)
{
  __CFString *v1;
  void *v2;
  int v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  char buffer[1025];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  bzero(buffer, 0x401uLL);
  if (!v1)
    goto LABEL_17;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v9 = v2;
    objc_msgSend_CKSanitizedPath(v1, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v13;
    _os_log_debug_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_DEBUG, "Memory mapping the file at %{public}@", buf, 0xCu);

  }
  if (CFStringGetFileSystemRepresentation(v1, buffer, 1024) != 1)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      v14 = v7;
      objc_msgSend_CKSanitizedPath(v1, v15, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v18;
      _os_log_error_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_ERROR, "Can't get file system representation for backup file path %{public}@", buf, 0xCu);

    }
    goto LABEL_17;
  }
  v3 = open(buffer, 0, 0);
  if (v3 < 1)
  {
LABEL_17:
    v6 = 0;
    goto LABEL_18;
  }
  v4 = v3;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v5 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    v19 = v5;
    objc_msgSend_CKSanitizedPath(v1, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v23;
    _os_log_debug_impl(&dword_18A5C5000, v19, OS_LOG_TYPE_DEBUG, "Attempting to map file at %{public}@", buf, 0xCu);

  }
  mmapFileDescriptor(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  close(v4);
LABEL_18:

  return v6;
}

void CKWarnForInvalidApplicationIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int isAppleInternalInstall;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const __CFDictionary *v26;
  CFUserNotificationRef v27;
  _QWORD block[5];
  _QWORD v29[3];
  _QWORD v30[3];
  uint8_t buf[4];
  id v32;
  __int16 v33;
  const __CFString *v34;
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v5 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138544130;
      v32 = v3;
      v33 = 2114;
      v34 = CFSTR("application-identifier");
      v35 = 2114;
      v36 = CFSTR("com.apple.developer.associated-application-identifier");
      v37 = 2114;
      v38 = v4;
      _os_log_error_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_ERROR, "Invalid value of \"%{public}@\" for entitlement \"%{public}@\" or \"%{public}@\" on process \"%{public}@\". We expect TEAMID.BUNDLEID, and insist that TEAMID is exactly 10 characters long, consisting of [0-9][A-Z]. This is a permanent issue, and access to CloudKit will be denied until this is resolved", buf, 0x2Au);
    }
    objc_msgSend_sharedOptions(CKBehaviorOptions, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    isAppleInternalInstall = objc_msgSend_isAppleInternalInstall(v9, v10, v11, v12);

    if (isAppleInternalInstall && (objc_msgSend_hasPrefix_(v3, v14, (uint64_t)CFSTR("com.apple."), v15) & 1) == 0)
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v16 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138544386;
        v32 = v4;
        v33 = 2114;
        v34 = CFSTR("application-identifier");
        v35 = 2114;
        v36 = CFSTR("com.apple.developer.associated-application-identifier");
        v37 = 2114;
        v38 = v3;
        v39 = 2114;
        v40 = v3;
        _os_log_error_impl(&dword_18A5C5000, v16, OS_LOG_TYPE_ERROR, "\n\n\nAn application using CloudKit \"%{public}@\" has a %{public}@ or %{public}@ entitlement value of %{public}@.  CloudKit is expecting an entitlement value of TEAMID.BUNDLEID. %{public}@\n\n\n", buf, 0x34u);
      }
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)CFSTR("The applicationIdentifier of \"%@\" isn't a suitable TEAMID.BUNDLEID value, and CloudKit access is denied.  Please fix the entitlements of the calling process \"%@\". See syslog for more info."), v18, v3, v4);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v29[0] = *MEMORY[0x1E0C9B800];
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v20, (uint64_t)CFSTR("Invalid Entitlements for %@"), v21, v4);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = *MEMORY[0x1E0C9B810];
      v30[0] = v22;
      v30[1] = v19;
      v24 = *MEMORY[0x1E0C9B838];
      v29[1] = v23;
      v29[2] = v24;
      v30[2] = CFSTR("OK");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v25, (uint64_t)v30, (uint64_t)v29, 3);
      v26 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      v27 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, v26);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18A6FD3B8;
      block[3] = &unk_1E1F5F680;
      block[4] = v27;
      dispatch_async(MEMORY[0x1E0C80D38], block);

    }
  }

}

void sub_18A6FD3B8(uint64_t a1, const char *a2)
{
  objc_msgSend_showUserNotification_withCompletionBlock_(CKUserNotificationUtilities, a2, *(_QWORD *)(a1 + 32), (uint64_t)&unk_1E1F61FF0);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_18A6FD3F4()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_alloc(MEMORY[0x1E0CB38E8]);
  v2 = objc_msgSend_initWithPattern_options_error_(v0, v1, (uint64_t)CFSTR("[0-9,A-Z]{10}\\.(.*)"), 0, 0);
  v3 = (void *)qword_1ECD97020;
  qword_1ECD97020 = v2;

}

BOOL sub_18A6FD430(unsigned __int8 *a1, unint64_t a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  unint64_t i;
  unsigned __int8 v6;
  int v8;

  if (!a1)
    __assert_rtn("isCStyleIdentifier", "CKUtils.m", 957, "cs");
  if (!a2)
    __assert_rtn("isCStyleIdentifier", "CKUtils.m", 958, "length > 0");
  v2 = *a1;
  if ((v2 - 97) >= 0x1A && (v2 != 95 ? (v3 = (v2 - 65) > 0x19) : (v3 = 0), v3))
  {
    return 0;
  }
  else if (a2 >= 2)
  {
    v4 = 0;
    for (i = 1; i != a2; v4 = i >= a2)
    {
      v6 = a1[i];
      if ((v6 - 48) >= 0xAu && ((v6 & 0xDF) - 65) >= 0x1Au)
      {
        v8 = a1[i];
        if (v8 != 95 && v8 != 36)
          break;
      }
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t CKRunningInClientProcess()
{
  return byte_1EDF6A0E0;
}

uint64_t setCKRunningInClientProcess(uint64_t result)
{
  byte_1EDF6A0E0 = result;
  return result;
}

void setCKUseSystemInstalledBinariesBackingBool(int a1)
{
  int v2;

  if (_sCKUseSystemInstalledBinariesPredicate != -1)
    dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1E1F58DB8);
  v2 = _sCKUseSystemInstalledBinaries;
  _sCKUseSystemInstalledBinaries = a1;
  if (v2 != a1)
    ck_log_facilities_setup_logging_facilities();
}

BOOL sub_18A6FD594()
{
  _BOOL8 result;

  result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

uint64_t CKUseSystemInstalledBinariesFuncForSwift()
{
  if (_sCKUseSystemInstalledBinariesPredicate != -1)
    dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1E1F62070);
  return _sCKUseSystemInstalledBinaries;
}

BOOL sub_18A6FD5F0()
{
  _BOOL8 result;

  result = _CKUseSystemInstalledBinaries();
  _sCKUseSystemInstalledBinaries = result;
  return result;
}

uint64_t CKTrap()
{
  pid_t v0;

  v0 = getpid();
  return kill(v0, 5);
}

const __CFString *CKTestNotificationPrefix()
{
  if (__sTestOverridesAvailable)
    return CFSTR("com.apple.cloudkit.testing.");
  else
    return &stru_1E1F66ED0;
}

id CKPrefixedNotificationName(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;

  v1 = a1;
  v4 = v1;
  if (__sTestOverridesAvailable)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v2, (uint64_t)CFSTR("%@%@"), v3, CFSTR("com.apple.cloudkit.testing."), v1);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v1;
  }
  v6 = v5;

  return v6;
}

uint64_t CKIsRunningInTestHost()
{
  return byte_1EDF75458;
}

void setCKIsRunningInTestHost()
{
  int v0;

  v0 = byte_1EDF75458;
  byte_1EDF75458 = 1;
  if (!v0)
    ck_log_facilities_setup_logging_facilities();
}

uint64_t overrideCKIsRunningInTestHost(uint64_t result)
{
  byte_1EDF75458 = result;
  return result;
}

uint64_t CKIsRunningInLogger()
{
  return byte_1EDF75459;
}

void setCKIsRunningInLogger()
{
  byte_1EDF75459 = 1;
}

BOOL CKCurrentQueueIsMainQueue()
{
  if (qword_1EDF75358 != -1)
    dispatch_once(&qword_1EDF75358, &unk_1E1F62090);
  return dispatch_get_specific(&unk_1EDF6D5B9) != 0;
}

void sub_18A6FD750()
{
  dispatch_queue_set_specific(MEMORY[0x1E0C80D38], &unk_1EDF6D5B9, &unk_1EDF6D5B9, 0);
}

uint64_t CKShouldUseNewPredicateValidation()
{
  if (qword_1ECD97068 != -1)
    dispatch_once(&qword_1ECD97068, &unk_1E1F620B0);
  return byte_1ECD96F92;
}

uint64_t CKCurrentProcessLinkCheck0fd6bdf95f2efb6e65813fd4cd0f5d9af656d08a()
{
  if (qword_1ECD97068 != -1)
    dispatch_once(&qword_1ECD97068, &unk_1E1F620B0);
  return byte_1ECD96F92;
}

uint64_t sub_18A6FD7EC()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F92 = result;
  return result;
}

uint64_t CKCurrentProcessLinkCheck5dbf91c3fd1d871f0bcfe60afeb451e3e708d350()
{
  if (qword_1ECD97070 != -1)
    dispatch_once(&qword_1ECD97070, &unk_1E1F620D0);
  return byte_1ECD96F93;
}

uint64_t sub_18A6FD850()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F93 = result;
  return result;
}

uint64_t CKCurrentProcessLinkCheck908c3403f5370f9fc0f790c790ce4de0669132c0()
{
  if (qword_1ECD97080 != -1)
    dispatch_once(&qword_1ECD97080, &unk_1E1F62110);
  return byte_1ECD96F95;
}

uint64_t sub_18A6FD8B4()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F95 = result;
  return result;
}

uint64_t CKCurrentProcessLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24()
{
  if (qword_1ECD97088 != -1)
    dispatch_once(&qword_1ECD97088, &unk_1E1F62130);
  return byte_1ECD96F96;
}

uint64_t sub_18A6FD918()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F96 = result;
  return result;
}

BOOL CKLinkCheckc809671068f5f334951d6b3e996f193c(unsigned int a1)
{
  return a1 >> 9 > 0x880;
}

uint64_t CKSDKVersionc809671068f5f334951d6b3e996f193c()
{
  return 1114624;
}

uint64_t CKCurrentProcessLinkCheckc809671068f5f334951d6b3e996f193c()
{
  if (qword_1ECD97098 != -1)
    dispatch_once(&qword_1ECD97098, &unk_1E1F62170);
  return byte_1ECD96F98;
}

uint64_t sub_18A6FD998()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  byte_1ECD96F98 = result;
  return result;
}

BOOL CKLinkCheck48d9728e8c354416a38f82379cbb35e3(unsigned int a1)
{
  return HIWORD(a1) > 0xAu;
}

uint64_t CKSDKVersion32f5805a68adfc1b65f94a0de69aa32177c7cd24()
{
  return 983040;
}

BOOL CKLinkCheck32f5805a68adfc1b65f94a0de69aa32177c7cd24(unsigned int a1)
{
  return HIWORD(a1) > 0xEu;
}

uint64_t CKIsDebuggerAttached()
{
  size_t v1;
  int v2[2];
  int v3;
  pid_t v4;
  _BYTE v5[32];
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  bzero(v5, 0x288uLL);
  *(_QWORD *)v2 = 0xE00000001;
  v3 = 1;
  v4 = getpid();
  v1 = 648;
  if (sysctl(v2, 4u, v5, &v1, 0, 0))
    __assert_rtn("CKIsDebuggerAttached", "CKUtils.m", 1340, "junk == 0");
  return (v6 >> 11) & 1;
}

id CKRandomDataWithLength(size_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;

  v2 = malloc_type_malloc(a1, 0xA7B27EB4uLL);
  if (v2)
  {
    v6 = v2;
    if (!SecRandomCopyBytes((SecRandomRef)*MEMORY[0x1E0CD7000], a1, v2))
    {
      objc_msgSend_dataWithBytesNoCopy_length_(MEMORY[0x1E0C99D50], v7, (uint64_t)v6, a1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      return v8;
    }
    free(v6);
  }
  objc_msgSend_data(MEMORY[0x1E0C99D50], v3, v4, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  return v8;
}

id CKHKDFSHA256(void *a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;

  v5 = a1;
  objc_msgSend_dataUsingEncoding_(a2, v6, 4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v12 = (void *)objc_msgSend_initWithLength_(v9, v10, a3, v11);
  ccsha256_di();
  objc_msgSend_length(v5, v13, v14, v15);
  v16 = objc_retainAutorelease(v5);
  objc_msgSend_bytes(v16, v17, v18, v19);

  objc_msgSend_length(v8, v20, v21, v22);
  objc_msgSend_bytes(v8, v23, v24, v25);
  v34 = objc_msgSend_mutableBytes(v12, v26, v27, v28);
  if (ccnistkdf_ctr_hmac())
  {

    v12 = 0;
  }
  v32 = (void *)objc_msgSend_copy(v12, v29, v30, v31, v34);

  return v32;
}

void CKHandleSignificantIssueBehavior(char a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  pid_t v6;
  pid_t v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((a1 & 2) == 0)
    goto LABEL_5;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v4 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
  {
    v8 = 138543362;
    v9 = v3;
    _os_log_error_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v8, 0xCu);
    if ((a1 & 1) == 0)
      goto LABEL_10;
  }
  else
  {
LABEL_5:
    if ((a1 & 1) == 0)
      goto LABEL_10;
  }
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v5 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
  {
    v8 = 138543362;
    v9 = v3;
    _os_log_fault_impl(&dword_18A5C5000, v5, OS_LOG_TYPE_FAULT, "%{public}@", (uint8_t *)&v8, 0xCu);
  }
LABEL_10:
  if ((a1 & 4) != 0 && CKIsDebuggerAttached())
  {
    v6 = getpid();
    kill(v6, 5);
  }
  if ((a1 & 8) != 0)
  {
    v7 = getpid();
    kill(v7, 5);
  }

}

BOOL CKQoSIsBackground(uint64_t a1)
{
  return a1 == 9 || a1 == 17;
}

uint64_t CKNSQualityOfServiceFromQoSClass(int a1)
{
  if (a1 <= 16)
  {
    if (a1 == 9)
      return 9;
    return -1;
  }
  if (a1 == 33)
    return 33;
  if (a1 != 25)
  {
    if (a1 == 17)
      return 17;
    return -1;
  }
  return 25;
}

uint64_t CKMainBundleIsAppExtension()
{
  if (qword_1ECD970B0 != -1)
    dispatch_once(&qword_1ECD970B0, &unk_1E1F621D0);
  return byte_1ECD96F9A;
}

void sub_18A6FDE74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4;

  objc_msgSend_bundleRecordForCurrentProcess(MEMORY[0x1E0CA5898], a2, a3, a4);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    byte_1ECD96F9A = 1;

}

void CKCFDictionaryForEach(const __CFDictionary *a1, void *context)
{
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_18A6FDEDC, context);
}

uint64_t sub_18A6FDEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void CKCFArrayForEach(const __CFArray *a1, void *a2)
{
  id context;
  CFRange v4;

  context = a2;
  v4.length = CFArrayGetCount(a1);
  v4.location = 0;
  CFArrayApplyFunction(a1, v4, (CFArrayApplierFunction)sub_18A6FDF48, context);

}

uint64_t sub_18A6FDF48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

double CKMonotonicHostTime()
{
  return sub_18A6FDF64(0);
}

double sub_18A6FDF64(int a1)
{
  uint64_t v2;

  if (qword_1ECD970F0 != -1)
  {
    dispatch_once(&qword_1ECD970F0, &unk_1E1F62348);
    if (a1)
      goto LABEL_3;
LABEL_5:
    v2 = mach_continuous_time();
    return *(double *)&qword_1ECD970F8 * (double)v2;
  }
  if (!a1)
    goto LABEL_5;
LABEL_3:
  v2 = mach_continuous_approximate_time();
  return *(double *)&qword_1ECD970F8 * (double)v2;
}

double CKMonotonicFastHostTime()
{
  return sub_18A6FDF64(1);
}

char *CKTabIndentAtDepth(unint64_t a1)
{
  unint64_t v1;

  v1 = 11 - a1;
  if (a1 > 0xB)
    v1 = 0;
  return &asc_18A846284[v1];
}

uint64_t NSTimeIntervalToClosestXPCActivityInterval(double a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  result = *MEMORY[0x1E0C807C8];
  v2 = *MEMORY[0x1E0C807E0];
  v9[0] = *MEMORY[0x1E0C807C8];
  v9[1] = v2;
  v3 = *MEMORY[0x1E0C807D0];
  v9[2] = *MEMORY[0x1E0C807B0];
  v9[3] = v3;
  v4 = *MEMORY[0x1E0C807D8];
  v9[4] = *MEMORY[0x1E0C807C0];
  v9[5] = v4;
  v5 = *MEMORY[0x1E0C807B8];
  v9[6] = *MEMORY[0x1E0C807F0];
  v9[7] = v5;
  v6 = *MEMORY[0x1E0C807E8];
  v9[8] = *MEMORY[0x1E0C807E8];
  if (a1 > 60.0)
  {
    v7 = 0;
    result = v6;
    while (v7 != 8)
    {
      v8 = dbl_18A83CFC0[++v7];
      if (v8 >= a1)
      {
        if ((unint64_t)(v7 - 1) < 8)
          return v9[v7];
        return result;
      }
    }
  }
  return result;
}

id CKGetCurrentActivities()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  unint64_t i;
  void *v4;
  const char *v5;
  uint64_t v6;
  unsigned int count;
  os_activity_id_t entries[4];

  entries[3] = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_opt_new();
  memset(entries, 0, 24);
  count = 3;
  os_activity_get_active(entries, &count);
  if (count)
  {
    for (i = 0; i < count; ++i)
    {
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v1, entries[i], v2);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v0, v5, (uint64_t)v4, v6);

    }
  }
  return v0;
}

id CKLocalizedString(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v10 = (void *)MEMORY[0x1E0CB34D0];
  v11 = a2;
  v12 = a1;
  v13 = objc_opt_class();
  objc_msgSend_bundleForClass_(v10, v14, v13, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  CKLocalizedStringFromTableInBundleVA(v12, CFSTR("CloudKit"), v16, v11, (uint64_t)&a9);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id CKLocalizedStringFromTableInBundleVA(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  id valid;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  id v46;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v15 = a4;
  if (!v9)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v12, v13, v14);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v32, (uint64_t)"NSString * _Nonnull CKLocalizedStringFromTableInBundleVA(NSString *__strong _Nonnull, NSString *__strong _Nonnull, NSBundle *__strong _Nonnull, NSString *__strong _Nonnull, va_list)", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v31, v35, (uint64_t)v34, (uint64_t)CFSTR("CKUtils.m"), 1612, CFSTR("key must not be nil"));

  }
  if (!objc_msgSend_length(v9, v12, v13, v14))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v16, v17, v18);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v37, (uint64_t)"NSString * _Nonnull CKLocalizedStringFromTableInBundleVA(NSString *__strong _Nonnull, NSString *__strong _Nonnull, NSBundle *__strong _Nonnull, NSString *__strong _Nonnull, va_list)", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v36, v40, (uint64_t)v39, (uint64_t)CFSTR("CKUtils.m"), 1613, CFSTR("key must not be empty"));

  }
  CKLocalizedFormatString(v9, v10, v11);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_length(v15, v20, v21, v22))
  {
    v23 = objc_alloc(MEMORY[0x1E0CB3940]);
    v46 = 0;
    valid = (id)objc_msgSend_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(v23, v24, (uint64_t)v19, (uint64_t)v15, 0, a5, &v46);
    v29 = v46;
    if (!valid)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v26, v27, v28);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v42, (uint64_t)"NSString * _Nonnull CKLocalizedStringFromTableInBundleVA(NSString *__strong _Nonnull, NSString *__strong _Nonnull, NSBundle *__strong _Nonnull, NSString *__strong _Nonnull, va_list)", v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v41, v45, (uint64_t)v44, (uint64_t)CFSTR("CKUtils.m"), 1623, CFSTR("Couldn't validate format string \"%@\" with specifiers \"%@\": %@"), v19, v15, v29);

    }
  }
  else
  {
    valid = v19;
  }

  return valid;
}

id CKLocalizedStringFromTableInBundle(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CKLocalizedStringFromTableInBundleVA(a1, a2, a3, a4, (uint64_t)&a9);
  return (id)objc_claimAutoreleasedReturnValue();
}

id CKLocalizedFormatString(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend_localizedStringForKey_value_table_(v7, v8, (uint64_t)v5, (uint64_t)&stru_1E1F66ED0, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (_os_feature_enabled_impl())
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("%@_FFAPPLEACCOUNT"), v11, v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_localizedStringForKey_value_table_(v7, v13, (uint64_t)v12, (uint64_t)v9, v6);
    v14 = objc_claimAutoreleasedReturnValue();

    v9 = (void *)v14;
  }

  return v9;
}

uint64_t sub_18A6FE5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel_CKSafeStringForURLWithCharsToBeEscaped_, CFSTR(":/?#[]@!$&'()*+,;=%\" "), a4);
}

id sub_18A6FE5AC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invertedSet(v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(a1, v10, (uint64_t)v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id sub_18A6FE610(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint8_t v50[16];
  uint8_t buf[16];

  objc_msgSend_stringByDeletingPathExtension(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByCharactersInSet_(v4, v9, (uint64_t)v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_componentsJoinedByString_(v11, v12, (uint64_t)CFSTR("_"), v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend_mutableCopy(v14, v15, v16, v17);

  objc_msgSend_URLFragmentAllowedCharacterSet(MEMORY[0x1E0CB3500], v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invertedSet(v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_rangeOfCharacterFromSet_(v18, v27, (uint64_t)v26, v28) == 0x7FFFFFFFFFFFFFFFLL && v29 == 0)
  {
    if (objc_msgSend_length(v18, v29, v30, v31))
    {
      v39 = objc_msgSend_length(v18, v34, v35, v36);
      while (1)
      {
        v40 = v39 - 1;
        if (objc_msgSend_characterAtIndex_(v18, v37, v39 - 1, v38) != 46)
          break;
        --v39;
        if (!v40)
        {
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v42 = ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v50 = 0;
            _os_log_debug_impl(&dword_18A5C5000, v42, OS_LOG_TYPE_DEBUG, "The document name consisted entirely of periods. Using no fragment.", v50, 2u);
          }
          goto LABEL_17;
        }
      }
      if (v40 < objc_msgSend_length(v18, v37, v41, v38) - 1)
      {
        v47 = objc_msgSend_length(v18, v44, v45, v46);
        objc_msgSend_deleteCharactersInRange_(v18, v48, v39, v47 - v39);
      }
    }
    v43 = v18;
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v33 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18A5C5000, v33, OS_LOG_TYPE_INFO, "Warn: Share title contains characters that require URL encoding. Dropping fragment from URL.", buf, 2u);
    }
LABEL_17:
    v43 = 0;
  }

  return v43;
}

id sub_18A6FE850(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v4 = (void *)objc_msgSend_mutableCopy(a1, a2, a3, a4);
  v8 = objc_msgSend_length(v4, v5, v6, v7);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v4, v9, (uint64_t)CFSTR("_"), (uint64_t)CFSTR(" "), 0, 0, v8);
  objc_msgSend_stringByRemovingPercentEncoding(v4, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id sub_18A6FE8B0(void *a1, const char *a2)
{
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const char *v9;
  uint64_t v10;
  CC_LONG v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(v17, 0, sizeof(v17));
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], a2, (uint64_t)v17, 32, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = a1;
  v8 = (const void *)objc_msgSend_UTF8String(v4, v5, v6, v7);
  v11 = objc_msgSend_lengthOfBytesUsingEncoding_(v4, v9, 4, v10);
  CC_SHA256(v8, v11, (unsigned __int8 *)v17);
  objc_msgSend_CKLowercaseHexStringWithoutSpaces(v3, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id sub_18A6FE978(void *a1)
{
  id v2;
  void *v3;
  const char *v4;

  if (__sTestOverridesAvailable)
  {
    v2 = a1;
  }
  else
  {
    NSHomeDirectory();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1, v4, (uint64_t)v3, (uint64_t)CFSTR("~"));
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

id sub_18A6FE9DC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  BOOL v20;
  id v21;
  const char *v22;
  void *v23;

  objc_msgSend_dataUsingEncoding_(a1, a2, 1, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend_mutableCopy(v4, v5, v6, v7);

  v12 = objc_msgSend_length(v8, v9, v10, v11);
  if (v12
    && (v13 = v12,
        v14 = objc_retainAutorelease(v8),
        (v18 = (_BYTE *)objc_msgSend_mutableBytes(v14, v15, v16, v17)) != 0))
  {
    do
    {
      v19 = *v18;
      v20 = (v19 - 48) >= 0xA && (v19 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (v20 && v19 != 32 && v19 != 45)
        *v18 = 95;
      ++v18;
      --v13;
    }
    while (v13);
    v21 = objc_alloc(MEMORY[0x1E0CB3940]);
    v23 = (void *)objc_msgSend_initWithData_encoding_(v21, v22, (uint64_t)v14, 1);
  }
  else
  {
    v23 = 0;
  }

  return v23;
}

id sub_18A6FEAA8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_dataUsingEncoding_(a1, a2, 4, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKBase64URLSafeString(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id sub_18A6FEAE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;
  const char *v6;
  void *v7;

  objc_msgSend_CKDataFromBase64URLSafeString_(MEMORY[0x1E0C99D50], a2, a1, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc(MEMORY[0x1E0CB3940]);
  v7 = (void *)objc_msgSend_initWithData_encoding_(v5, v6, (uint64_t)v4, 4);

  return v7;
}

id sub_18A6FEB38(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  id v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v8 = (void *)objc_msgSend_mutableCopy(a1, v5, v6, v7);
  v9 = objc_alloc(MEMORY[0x1E0CB38E8]);
  v22 = 0;
  v11 = (void *)objc_msgSend_initWithPattern_options_error_(v9, v10, (uint64_t)CFSTR("[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}"), 0, &v22);
  v12 = v22;
  v16 = v12;
  if (v11)
    v17 = v12 == 0;
  else
    v17 = 0;
  if (v17)
  {
    v19 = objc_msgSend_length(v8, v13, v14, v15);
    objc_msgSend_replaceMatchesInString_options_range_withTemplate_(v11, v20, (uint64_t)v8, 0, 0, v19, v4);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v18 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v16;
      _os_log_error_impl(&dword_18A5C5000, v18, OS_LOG_TYPE_ERROR, "Error creating regex for removing UUIDs: %@", buf, 0xCu);
    }
  }

  return v8;
}

id sub_18A6FECA4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v7;
  const char *v8;
  void *v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD *v20;
  char v21;
  _QWORD v22[4];

  v7 = (void *)objc_opt_new();
  objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(&stru_1E1F66ED0, v8, a3, (uint64_t)CFSTR(" "), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v22[3] = 0;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_18A6FEDCC;
  v17[3] = &unk_1E1F621F8;
  v20 = v22;
  v10 = v7;
  v18 = v10;
  v21 = a4;
  v11 = v9;
  v19 = v11;
  objc_msgSend_enumerateLinesUsingBlock_(a1, v12, (uint64_t)v17, v13);
  v14 = v19;
  v15 = v10;

  _Block_object_dispose(v22, 8);
  return v15;
}

void sub_18A6FEDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A6FEDCC(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  char *v5;

  v3 = a2;
  v5 = (char *)v3;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
    && (objc_msgSend_appendFormat_(*(void **)(a1 + 32), v3, (uint64_t)CFSTR("\n"), v4),
        v3 = v5,
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    || !*(_BYTE *)(a1 + 56))
  {
    objc_msgSend_appendFormat_(*(void **)(a1 + 32), v3, (uint64_t)CFSTR("%@%@"), v4, *(_QWORD *)(a1 + 40), v3);
  }
  else
  {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v3, (uint64_t)v3, v4);
  }
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

}

id sub_18A6FEE74(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  id v11;
  const char *v12;
  uint64_t v14;

  v14 = 0;
  v1 = objc_retainAutorelease(a1);
  v5 = objc_msgSend_bytes(v1, v2, v3, v4);
  v9 = objc_msgSend_length(v1, v6, v7, v8);
  v10 = CKHexCharFromBytes(v5, v9, &v14, 0);
  v11 = objc_alloc(MEMORY[0x1E0CB3940]);
  return (id)objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v11, v12, (uint64_t)v10, v14, 1, 1);
}

id sub_18A6FEEE8(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  const __CFString *v9;
  char v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  char IsMember;
  unint64_t v28;
  char v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  char v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  char v45;

  v5 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  if (a4)
    v9 = CFSTR("0123456789ABCDEF");
  else
    v9 = CFSTR("0123456789abcdef");
  if (a4)
    v10 = -65;
  else
    v10 = -97;
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v6, (uint64_t)v9, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_length(v5, v12, v13, v14))
  {
    v18 = 0;
    do
    {
      v19 = v18;
      if (objc_msgSend_length(v5, v15, v16, v17) <= (unint64_t)v18)
      {
        LODWORD(v24) = 0;
        v29 = 1;
      }
      else
      {
        v23 = v18 + 1;
        do
        {
          v18 = v23;
          v24 = objc_msgSend_characterAtIndex_(v5, v20, v19, v22);
          IsMember = objc_msgSend_characterIsMember_(v11, v25, v24, v26);
          v19 = v18;
          if ((IsMember & 1) != 0)
            break;
          v28 = objc_msgSend_length(v5, v20, v21, v22);
          v23 = v18 + 1;
        }
        while (v28 > v18);
        v29 = IsMember ^ 1;
      }
      if (objc_msgSend_length(v5, v20, v21, v22) <= v19)
        break;
      ++v18;
      while (1)
      {
        v32 = objc_msgSend_characterAtIndex_(v5, v30, v19, v31);
        if ((objc_msgSend_characterIsMember_(v11, v33, v32, v34) & 1) != 0)
          break;
        v19 = v18;
        if (objc_msgSend_length(v5, v35, v36, v37) <= (unint64_t)v18++)
          goto LABEL_27;
      }
      if ((v29 & 1) != 0)
        break;
      v39 = v32 - 48;
      if ((v32 - 48) >= 0xA)
        v39 = v10 + v32 + 10;
      v40 = (v24 - 48) >= 0xA ? 16 * v24 - 112 : 16 * v24;
      v45 = v39 + v40;
      objc_msgSend_appendBytes_length_(v8, v35, (uint64_t)&v45, 1);
    }
    while (objc_msgSend_length(v5, v41, v42, v43) > (unint64_t)v18);
  }
LABEL_27:

  return v8;
}

uint64_t sub_18A6FF09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a1, sel_CKDataWithHexString_stringIsUppercase_, a3, 0);
}

id sub_18A6FF0A4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;

  objc_msgSend_base64EncodedStringWithOptions_(a1, a2, 0, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend_mutableCopy(v4, v5, v6, v7);

  v12 = objc_msgSend_length(v8, v9, v10, v11);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v8, v13, (uint64_t)CFSTR("+"), (uint64_t)CFSTR("-"), 0, 0, v12);
  v17 = objc_msgSend_length(v8, v14, v15, v16);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v8, v18, (uint64_t)CFSTR("/"), (uint64_t)CFSTR("_"), 0, 0, v17);
  v22 = objc_msgSend_length(v8, v19, v20, v21);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v8, v23, (uint64_t)CFSTR("="), (uint64_t)&stru_1E1F66ED0, 0, 0, v22);
  return v8;
}

id sub_18A6FF160(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v23;
  const char *v24;
  void *v25;

  if (a3)
  {
    v4 = (void *)objc_msgSend_mutableCopy(a3, a2, (uint64_t)a3, a4);
    v8 = objc_msgSend_length(v4, v5, v6, v7);
    objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v4, v9, (uint64_t)CFSTR("-"), (uint64_t)CFSTR("+"), 0, 0, v8);
    v13 = objc_msgSend_length(v4, v10, v11, v12);
    objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v4, v14, (uint64_t)CFSTR("_"), (uint64_t)CFSTR("/"), 0, 0, v13);
    v20 = objc_msgSend_length(v4, v15, v16, v17) & 3;
    if (v20)
    {
      v21 = v20 | 0xFFFFFFFFFFFFFFFCLL;
      do
        objc_msgSend_appendString_(v4, v18, (uint64_t)CFSTR("="), v19);
      while (!__CFADD__(v21++, 1));
    }
    v23 = objc_alloc(MEMORY[0x1E0C99D50]);
    v25 = (void *)objc_msgSend_initWithBase64EncodedString_options_(v23, v24, (uint64_t)v4, 0);

  }
  else
  {
    v25 = 0;
  }
  return v25;
}

uint64_t sub_18A6FF240(id a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v50;

  v7 = a3;
  if (a1 == v7 || !objc_msgSend_length(a1, v4, v5, v6) && !objc_msgSend_length(v7, v8, v9, v10))
    goto LABEL_18;
  if (!objc_msgSend_length(a1, v8, v9, v10))
  {
LABEL_19:
    v27 = -1;
    goto LABEL_24;
  }
  if (!objc_msgSend_length(v7, v11, v12, v13))
  {
    v27 = 1;
    goto LABEL_24;
  }
  v17 = objc_msgSend_length(a1, v14, v15, v16);
  v21 = objc_msgSend_length(v7, v18, v19, v20);
  if (v17 >= v21)
    v25 = v21;
  else
    v25 = v17;
  if (v25)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      v50 = 0;
      objc_msgSend_getBytes_range_(a1, v22, (uint64_t)&v50 + 1, v26, 1);
      objc_msgSend_getBytes_range_(v7, v28, (uint64_t)&v50, v26, 1);
      if (HIBYTE(v50) < v50)
        goto LABEL_19;
      if (v50 < HIBYTE(v50))
        goto LABEL_24;
      ++v26;
      v32 = objc_msgSend_length(a1, v29, v30, v31);
      v36 = objc_msgSend_length(v7, v33, v34, v35);
      if (v32 >= v36)
        v37 = v36;
      else
        v37 = v32;
    }
    while (v26 < v37);
  }
  v38 = objc_msgSend_length(a1, v22, v23, v24);
  if (v38 != objc_msgSend_length(v7, v39, v40, v41))
  {
    v45 = objc_msgSend_length(a1, v42, v43, v44);
    if (v45 < objc_msgSend_length(v7, v46, v47, v48))
      v27 = -1;
    else
      v27 = 1;
  }
  else
  {
LABEL_18:
    v27 = 0;
  }
LABEL_24:

  return v27;
}

__CFString *sub_18A6FF3A4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  __CFString *v15;

  objc_msgSend_pathComponents(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(v5, v6, v7, v8) < 2)
  {
    v15 = &stru_1E1F66ED0;
  }
  else
  {
    objc_msgSend_pathComponents(a1, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v12, v13, 1, v14);
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return v15;
}

id sub_18A6FF418(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;

  objc_msgSend_scheme(a1, a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_6;
  v9 = (void *)v5;
  objc_msgSend_host(a1, v6, v7, v8);
  v10 = objc_claimAutoreleasedReturnValue();
  if (!v10)
  {

    goto LABEL_6;
  }
  v14 = (void *)v10;
  objc_msgSend_pathComponents(a1, v11, v12, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_count(v15, v16, v17, v18);

  if (v19 < 2)
  {
LABEL_6:
    objc_msgSend_absoluteString(a1, v6, v7, v8);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    return v32;
  }
  v20 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_scheme(a1, v6, v7, v8);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_host(a1, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKURLSlug(a1, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v20, v30, (uint64_t)CFSTR("%@://%@/%@/"), v31, v21, v25, v29);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

__CFString *sub_18A6FF51C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  __CFString *v25;

  objc_msgSend_pathComponents(a1, a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(v5, v6, v7, v8) < 3)
  {
    v25 = &stru_1E1F66ED0;
  }
  else
  {
    objc_msgSend_pathComponents(a1, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pathComponents(a1, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend_count(v16, v17, v18, v19);
    objc_msgSend_subarrayWithRange_(v12, v21, 2, v20 - 2);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_componentsJoinedByString_(v22, v23, (uint64_t)CFSTR("/"), v24);
    v25 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return v25;
}

id sub_18A6FF5D0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend_path(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKSanitizedPath(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

BOOL sub_18A6FF608(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  const char *v19;
  uint64_t v21;

  v4 = objc_retainAutorelease(a1);
  v8 = (const char *)objc_msgSend_fileSystemRepresentation(v4, v5, v6, v7);
  v9 = open(v8, 0);
  if (v9 < 0)
  {
    v16 = *__error();
    v17 = __error();
    v18 = strerror(*v17);
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v19, (uint64_t)CFSTR("CKInternalErrorDomain"), 1000, CFSTR("open() failed while marking %@ as purgeable %d (%s)"), v4, v16, v18);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a3)
      goto LABEL_10;
    goto LABEL_8;
  }
  v10 = v9;
  v21 = 65541;
  v11 = ffsctl(v9, 0xC0084A44uLL, &v21, 0);
  if ((_DWORD)v11)
  {
    v12 = v11;
    v13 = strerror(v11);
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v14, (uint64_t)CFSTR("CKInternalErrorDomain"), 1000, CFSTR("Failed to mark %@ as purgeable %d (%s)"), v4, v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
  }
  close(v10);
  if (a3)
  {
LABEL_8:
    if (v15)
      *a3 = objc_retainAutorelease(v15);
  }
LABEL_10:

  return v15 == 0;
}

uint64_t sub_18A6FF7DC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;

  v4 = a3;
  v5 = a1;
  objc_sync_enter(v5);
  v10 = objc_msgSend_containsObject_(v5, v6, (uint64_t)v4, v7);
  if ((v10 & 1) == 0)
    objc_msgSend_addObject_(v5, v8, (uint64_t)v4, v9);
  objc_sync_exit(v5);

  return v10 ^ 1u;
}

void sub_18A6FF84C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6FF860(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  id v7;

  v7 = a3;
  v4 = a1;
  objc_sync_enter(v4);
  objc_msgSend_removeObject_(v4, v5, (uint64_t)v7, v6);
  objc_sync_exit(v4);

}

void sub_18A6FF8B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18A6FF8C8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  objc_sync_enter(v8);
  objc_msgSend_objectForKey_(v8, v9, (uint64_t)v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
    objc_msgSend_setObject_forKey_(v8, v12, (uint64_t)v6, (uint64_t)v7);
  objc_sync_exit(v8);

  return v11 == 0;
}

void sub_18A6FF958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A6FF96C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  id v7;

  v7 = a3;
  v4 = a1;
  objc_sync_enter(v4);
  objc_msgSend_removeObjectForKey_(v4, v5, (uint64_t)v7, v6);
  objc_sync_exit(v4);

}

void sub_18A6FF9C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18A6FF9D4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend_caseInsensitiveCompare_(v6, v7, *(_QWORD *)(a1 + 32), v8))
  {
    v9 = 1;
    *a4 = 1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_18A6FFA48(int a1, int a2, int __errnum)
{
  void *v4;
  char *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v14 = *MEMORY[0x1E0C9AFB0];
  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = strerror(__errnum);
  objc_msgSend_stringWithUTF8String_(v4, v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v8;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v15, (uint64_t)&v14, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v11, *MEMORY[0x1E0CB2FE0], __errnum, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

uint64_t sub_18A6FFB2C()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;

  v0 = (void *)MEMORY[0x1E0CB35C8];
  v1 = *__error();
  return objc_msgSend_CKErrorWithPOSIXCode_(v0, v2, v1, v3);
}

BOOL sub_18A6FFB58(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;

  objc_msgSend_domain(a1, a2, a3, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v6, v7, *MEMORY[0x1E0CB2FE0], v8))
    v12 = objc_msgSend_code(a1, v9, v10, v11) == a3;
  else
    v12 = 0;

  return v12;
}

id sub_18A6FFBC0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint64_t v68;

  v4 = a4;
  v68 = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], a2, 3, a4);
  v62 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4)
    return v62;
  objc_msgSend_domain(a1, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v10, (uint64_t)CFSTR("domain"), (uint64_t)v9);

  v11 = objc_alloc(MEMORY[0x1E0CB37E8]);
  v15 = objc_msgSend_code(a1, v12, v13, v14);
  v18 = (void *)objc_msgSend_initWithLong_(v11, v16, v15, v17);
  objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v19, (uint64_t)CFSTR("code"), (uint64_t)v18);

  objc_msgSend_localizedDescription(a1, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v24, (uint64_t)CFSTR("localizedDescription"), (uint64_t)v23);

  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  objc_msgSend_userInfo(a1, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v28, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v63, (uint64_t)v67, 16);
  if (!v34)
    goto LABEL_19;
  v37 = v34;
  v38 = *(_QWORD *)v64;
  do
  {
    for (i = 0; i != v37; ++i)
    {
      if (*(_QWORD *)v64 != v38)
        objc_enumerationMutation(v32);
      v40 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
      if ((objc_msgSend_isEqualToString_(v40, v35, (uint64_t)CFSTR("NSLocalizedDescription"), v36) & 1) == 0)
      {
        objc_msgSend_userInfo(a1, v35, v41, v36);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_valueForKey_(v42, v43, (uint64_t)v40, v44);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        if (v45)
        {
          if ((objc_opt_respondsToSelector() & 1) == 0)
            goto LABEL_12;
          objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v45, v46, 1, 1, 1);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend_count(v48, v49, v50, v51))
          {

LABEL_12:
            if (objc_msgSend_isValidJSONObject_(MEMORY[0x1E0CB36D8], v46, (uint64_t)v45, v47))
            {
              objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v53, (uint64_t)v40, (uint64_t)v45);
              goto LABEL_16;
            }
            objc_msgSend_description(v45, v53, v54, v55);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v52, (uint64_t)v40, (uint64_t)v48);

        }
LABEL_16:

        continue;
      }
    }
    v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v35, (uint64_t)&v63, (uint64_t)v67, 16);
  }
  while (v37);
LABEL_19:

  objc_msgSend_CKStringForWellKnownCKErrors(a1, v56, v57, v58);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  if (v60)
    objc_msgSend_CKAddPropertySafelyForKey_value_(v62, v59, (uint64_t)CFSTR("cloudKitErrorType"), (uint64_t)v60);

  return v62;
}

uint64_t CKIsPCSError(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  int isEqualToString;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = a1;
  objc_msgSend_domain(v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v5, v6, (uint64_t)CFSTR("CKInternalErrorDomain"), v7);

  if (isEqualToString)
  {
    v12 = objc_msgSend_code(v1, v9, v10, v11);
    if ((unint64_t)(v12 - 5000) <= 0x14)
      v13 = (0x1F0A3Fu >> (v12 + 120)) & 1;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id CKTopLevelUnderlyingErrorCodes()
{
  if (qword_1ECD970C0 != -1)
    dispatch_once(&qword_1ECD970C0, &unk_1E1F62240);
  return (id)qword_1ECD970B8;
}

void sub_18A6FFF4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E1FC45B0, a4, &unk_1E1FC45C8, &unk_1E1FC45E0, &unk_1E1FC45F8, &unk_1E1FC4610, &unk_1E1FC4628, &unk_1E1FC4640, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ECD970B8;
  qword_1ECD970B8 = v4;

}

uint64_t CKGetGenerationCounterForFd(int a1, _DWORD *a2, _QWORD *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v12 = xmmword_18A83D008;
  v11 = 0;
  if (fgetattrlist(a1, &v12, &v11, 8uLL, 0x20u))
  {
    if (a3)
    {
      objc_msgSend_CKErrorFromErrno(MEMORY[0x1E0CB35C8], v5, v6, v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_4:
      v9 = v8;
      result = 0;
      *a3 = v9;
      return result;
    }
  }
  else
  {
    if (HIDWORD(v11))
    {
      *a2 = HIDWORD(v11);
      return 1;
    }
    if (a3)
    {
      objc_msgSend_CKErrorWithPOSIXCode_(MEMORY[0x1E0CB35C8], v5, 16, v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_4;
    }
  }
  return 0;
}

const __CFString *sub_18A70007C()
{
  return &stru_1E1F66ED0;
}

uint64_t sub_18A700088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDescriptionWithExpansion_, 1, a4);
}

id sub_18A700090(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  const char *v37;
  id obj;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a4)
    return MEMORY[0x1E0C9AA70];
  if (a5)
  {
    v6 = (void *)MEMORY[0x1E0C99E08];
    v7 = objc_msgSend_count(a1, a2, a3, a4);
    objc_msgSend_dictionaryWithCapacity_(v6, v8, v7, v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    objc_msgSend_allKeys(a1, v11, v12, v13);
    obj = (id)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v40, (uint64_t)v44, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v41;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v41 != v17)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v18);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v23 = v19;
          }
          else
          {
            objc_msgSend_description(v19, v20, v21, v22);
            v23 = (id)objc_claimAutoreleasedReturnValue();
          }
          v26 = v23;
          objc_msgSend_objectForKeyedSubscript_(a1, v24, (uint64_t)v19, v25);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v27, v28, 1, 1, 1);
          v29 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend_count(v29, v30, v31, v32))
          {
            objc_msgSend_setObject_forKeyedSubscript_(v10, v33, (uint64_t)v29, (uint64_t)v26);
          }
          else
          {
            objc_msgSend_objectForKeyedSubscript_(a1, v33, (uint64_t)v19, v34);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_forKeyedSubscript_(v10, v36, (uint64_t)v35, (uint64_t)v26);

          }
          ++v18;
        }
        while (v16 != v18);
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v37, (uint64_t)&v40, (uint64_t)v44, 16);
      }
      while (v16);
    }

  }
  else
  {
    v10 = a1;
  }
  return v10;
}

id sub_18A70028C(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v29;
  void *v30;
  _QWORD v31[2];
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a4)
    return MEMORY[0x1E0C9AA70];
  if (a5)
  {
    v6 = (void *)MEMORY[0x1E0C99DE8];
    v7 = objc_msgSend_count(a1, a2, a3, a4);
    objc_msgSend_arrayWithCapacity_(v6, v8, v7, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(a1, v11, v12, v13))
    {
      v16 = 0;
      do
      {
        objc_msgSend_objectAtIndexedSubscript_(a1, v14, v16, v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v17, v18, 1, 1, 1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21)
        {
          objc_msgSend_setObject_atIndexedSubscript_(v10, v19, (uint64_t)v21, v16);
        }
        else
        {
          objc_msgSend_objectAtIndexedSubscript_(a1, v19, v16, v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_atIndexedSubscript_(v10, v23, (uint64_t)v22, v16);

        }
        ++v16;
      }
      while (v16 < objc_msgSend_count(a1, v24, v25, v26));
    }
    v31[0] = CFSTR("type");
    v31[1] = CFSTR("items");
    v32[0] = CFSTR("array");
    v32[1] = v10;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)v32, (uint64_t)v31, 2);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    return v27;
  }
  else
  {
    v29 = CFSTR("items");
    v30 = a1;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)&v30, (uint64_t)&v29, 1);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

id sub_18A700434(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, void *, uint64_t);
  void *v25;
  id v26;
  const __CFString *v27;
  id v28;
  const __CFString *v29;
  void *v30;
  _QWORD v31[2];
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
  {
    if (!a5)
    {
      v29 = CFSTR("items");
      v30 = a1;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)&v30, (uint64_t)&v29, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      return v15;
    }
    v6 = (void *)MEMORY[0x1E0C99DE8];
    v7 = objc_msgSend_count(a1, a2, a3, a4);
    objc_msgSend_arrayWithCapacity_(v6, v8, v7, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = MEMORY[0x1E0C809B0];
    v23 = 3221225472;
    v24 = sub_18A7005C8;
    v25 = &unk_1E1F62290;
    v26 = v10;
    v11 = v10;
    objc_msgSend_enumerateObjectsUsingBlock_(a1, v12, (uint64_t)&v22, v13);
    v31[0] = CFSTR("type");
    v31[1] = CFSTR("items");
    v32[0] = CFSTR("orderedSet");
    v32[1] = v11;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)v32, (uint64_t)v31, 2, v22, v23, v24, v25);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v27 = CFSTR("count");
    v16 = (void *)MEMORY[0x1E0CB37E8];
    v17 = objc_msgSend_count(a1, a2, a3, a4);
    objc_msgSend_numberWithUnsignedInteger_(v16, v18, v17, v19);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    v28 = v11;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v20, (uint64_t)&v28, (uint64_t)&v27, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v15;
}

void sub_18A7005C8(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  const char *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(v9, v5, 1, 1, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(a1 + 32);
  if (v7)
    objc_msgSend_setObject_atIndexedSubscript_(v8, v6, (uint64_t)v7, a3);
  else
    objc_msgSend_setObject_atIndexedSubscript_(v8, v6, (uint64_t)v9, a3);

}

id sub_18A70063C(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[3];
  _QWORD v42[4];

  v42[3] = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a4)
    return MEMORY[0x1E0C9AA70];
  if (a5)
  {
    v42[0] = CFSTR("data");
    v41[0] = CFSTR("type");
    v41[1] = CFSTR("length");
    v6 = (void *)MEMORY[0x1E0CB37E8];
    v7 = objc_msgSend_length(a1, a2, a3, a4);
    objc_msgSend_numberWithUnsignedInteger_(v6, v8, v7, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v42[1] = v10;
    v41[2] = CFSTR("data");
    objc_msgSend_base64EncodedStringWithOptions_(a1, v11, 32, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v42[2] = v13;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)v42, (uint64_t)v41, 3);
  }
  else
  {
    if ((unint64_t)objc_msgSend_length(a1, a2, a3, a4) < 0x19)
    {
      v37[0] = CFSTR("length");
      v30 = (void *)MEMORY[0x1E0CB37E8];
      v31 = objc_msgSend_length(a1, v16, v17, v18);
      objc_msgSend_numberWithUnsignedInteger_(v30, v32, v31, v33);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v37[1] = CFSTR("data");
      v38[0] = v10;
      objc_msgSend_base64EncodedStringWithOptions_(a1, v34, 32, v35);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v38[1] = v13;
      v27 = (void *)MEMORY[0x1E0C99D80];
      v28 = v38;
      v29 = v37;
    }
    else
    {
      v39[0] = CFSTR("length");
      v19 = (void *)MEMORY[0x1E0CB37E8];
      v20 = objc_msgSend_length(a1, v16, v17, v18);
      objc_msgSend_numberWithUnsignedInteger_(v19, v21, v20, v22);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v39[1] = CFSTR("sha256");
      v40[0] = v10;
      objc_msgSend_CKSHA256(a1, v23, v24, v25);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v40[1] = v13;
      v27 = (void *)MEMORY[0x1E0C99D80];
      v28 = v40;
      v29 = v39;
    }
    objc_msgSend_dictionaryWithObjects_forKeys_count_(v27, v26, (uint64_t)v28, (uint64_t)v29, 2);
  }
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  return v36;
}

id sub_18A700A58(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  void *v50;
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[4];
  _QWORD v54[5];

  v54[4] = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a4)
    return MEMORY[0x1E0C9AA70];
  if (a5)
  {
    v54[0] = CFSTR("location");
    v53[0] = CFSTR("type");
    v53[1] = CFSTR("latitude");
    v6 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_coordinate(a1, a2, a3, a4);
    objc_msgSend_numberWithDouble_(v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v54[1] = v10;
    v53[2] = CFSTR("longitude");
    v11 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_coordinate(a1, v12, v13, v14);
    objc_msgSend_numberWithDouble_(v11, v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v54[2] = v19;
    v53[3] = CFSTR("altitude");
    v20 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_altitude(a1, v21, v22, v23);
    objc_msgSend_numberWithDouble_(v20, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v54[3] = v27;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v54, (uint64_t)v53, 4);
  }
  else
  {
    v51[0] = CFSTR("latitude");
    v30 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_coordinate(a1, a2, a3, a4);
    objc_msgSend_numberWithDouble_(v30, v31, v32, v33);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v10;
    v51[1] = CFSTR("longitude");
    v34 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_coordinate(a1, v35, v36, v37);
    objc_msgSend_numberWithDouble_(v34, v38, v39, v40, v41);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v52[1] = v19;
    v51[2] = CFSTR("altitude");
    v42 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_altitude(a1, v43, v44, v45);
    objc_msgSend_numberWithDouble_(v42, v46, v47, v48);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v52[2] = v27;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v49, (uint64_t)v52, (uint64_t)v51, 3);
  }
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  return v50;
}

id sub_18A700C38(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  NSString *v16;
  SEL v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v4 = a4;
  v29 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0C99E08];
  v7 = objc_msgSend_count(&unk_1E1FC4178, a2, a3, a4);
  objc_msgSend_dictionaryWithCapacity_(v6, v8, v7, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E1FC4178, v10, (uint64_t)&v24, (uint64_t)v28, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v25 != v14)
            objc_enumerationMutation(&unk_1E1FC4178);
          v16 = *(NSString **)(*((_QWORD *)&v24 + 1) + 8 * i);
          v17 = NSSelectorFromString(v16);
          v20 = objc_msgSend_performSelector_(a1, v18, (uint64_t)v17, v19);
          objc_msgSend_CKAddPropertySafelyForKey_value_(v11, v21, (uint64_t)v16, v20);
        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E1FC4178, v22, (uint64_t)&v24, (uint64_t)v28, 16);
      }
      while (v13);
    }
  }
  return v11;
}

void sub_18A700D80(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = a1;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v13, (uint64_t)v17, 16);
  if (v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v5);
        objc_msgSend_CKAssignToContainerWithID_(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v12++), v8, (uint64_t)v4, v9, (_QWORD)v13);
      }
      while (v10 != v12);
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v13, (uint64_t)v17, 16);
    }
    while (v10);
  }

}

void sub_18A700E78(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;

  v4 = a3;
  objc_msgSend_userInfo(a1, v5, v6, v7);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_CKAssignToContainerWithID_(v10, v8, (uint64_t)v4, v9);

}

void CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  void (**v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v15;
  int v16;
  _QWORD v17[4];
  id v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v9 = a1;
  v10 = a5;
  if (a4)
    __assert_rtn("CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock", "CKUtils.m", 2561, "opts == 0 && \"NSEnumerationOptions not yet supported\"");
  v11 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v10;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3010000000;
  v33 = &unk_18A89B0A7;
  v34 = a2;
  v35 = a3;
  v12 = MEMORY[0x1E0C809B0];
  do
  {
    v13 = v31;
    if (!v31[5])
      break;
    v26 = 0;
    v27 = &v26;
    v28 = 0x2020000000;
    v29 = 0;
    v22 = 0;
    v23 = &v22;
    v24 = 0x2020000000;
    v25 = 0;
    v17[0] = v12;
    v17[1] = 3221225472;
    v17[2] = sub_18A7010A0;
    v17[3] = &unk_1E1F622E0;
    v19 = &v26;
    v20 = &v30;
    v14 = v11;
    v18 = v14;
    v21 = &v22;
    objc_msgSend_enumerateRangesInRange_options_usingBlock_(v9, v15, v13[4], v13[5], 0, v17);
    if (*((_BYTE *)v27 + 24))
    {
      v16 = *((unsigned __int8 *)v23 + 24);
    }
    else
    {
      ((void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))v11)[2](v14, v31[4], v31[5], v23 + 3);
      v16 = 1;
      *((_BYTE *)v23 + 24) = 1;
    }

    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v26, 8);
  }
  while (!v16);
  _Block_object_dispose(&v30, 8);

}

void sub_18A701070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18A7010A0(_QWORD *result, unint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(*(_QWORD *)(result[5] + 8) + 24) = 1;
  v6 = *(_QWORD *)(result[6] + 8);
  v7 = *(_QWORD *)(v6 + 32);
  if (a2 <= v7)
  {
    v12 = v7 - (a2 + a3) + *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 32) = a2 + a3;
    *(_QWORD *)(v6 + 40) = v12;
  }
  else
  {
    v9 = result;
    result = (_QWORD *)(*(uint64_t (**)(void))(result[4] + 16))();
    v10 = *(_QWORD *)(v9[6] + 8);
    v11 = *(_QWORD *)(v10 + 32) - (a2 + a3) + *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 32) = a2 + a3;
    *(_QWORD *)(v10 + 40) = v11;
    *a4 = 1;
  }
  return result;
}

id CKNSIndexSet_indexSetWithInverseIndexSet(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;

  v1 = (void *)MEMORY[0x1E0CB3788];
  v2 = a1;
  objc_msgSend_indexSet(v1, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_18A7011E8;
  v9[3] = &unk_1E1F62308;
  v7 = v6;
  v10 = v7;
  CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock(v2, 0, 0x7FFFFFFFFFFFFFFELL, 0, v9);

  return v7;
}

uint64_t sub_18A7011E8(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_addIndexesInRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
}

id sub_18A7011F8(id a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v5 = (void *)MEMORY[0x18D76DE4C]();
      objc_msgSend_CKStatusReportArray(v1, v6, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_CKComponentsAndSubcomponentsJoinedByString_(v9, v10, (uint64_t)CFSTR("\n"), v11);
      v1 = (id)objc_claimAutoreleasedReturnValue();

      objc_autoreleasePoolPop(v5);
    }
    else
    {
      objc_msgSend_description(v1, v2, v3, v4);
      v1 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  return v1;
}

id sub_18A701284(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  void *context;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  context = (void *)MEMORY[0x18D76DE4C]();
  v5 = (void *)objc_opt_new();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = a1;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v23;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v23 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v11);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend_CKComponentsAndSubcomponentsJoinedByString_(v12, v13, (uint64_t)v4, v15);
        else
          objc_msgSend_description(v12, v13, v14, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_appendFormat_(v5, v17, (uint64_t)CFSTR("%@%@"), v18, v16, v4);

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v19, (uint64_t)&v22, (uint64_t)v26, 16);
    }
    while (v9);
  }

  objc_autoreleasePoolPop(context);
  return v5;
}

id sub_18A701400(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = (void *)MEMORY[0x1E0C99DE8];
  v6 = objc_msgSend_count(a1, a2, a3, a4);
  objc_msgSend_arrayWithCapacity_(v5, v7, v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend_mutableCopy(a1, v10, v11, v12);
  for (i = objc_msgSend_count(v13, v14, v15, v16); i; i = objc_msgSend_count(v13, v30, v31, v32))
  {
    v21 = objc_msgSend_count(v13, v18, v19, v20);
    v22 = arc4random_uniform(v21);
    objc_msgSend_objectAtIndexedSubscript_(v13, v23, v22, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v9, v26, (uint64_t)v25, v27);

    objc_msgSend_removeObjectAtIndex_(v13, v28, v22, v29);
  }

  return v9;
}

uint64_t sub_18A7014A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 0, a4);
}

uint64_t sub_18A7014B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 1, a4);
}

uint64_t sub_18A7014B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 3, a4);
}

uint64_t sub_18A7014C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 4, a4);
}

uint64_t sub_18A7014C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel__CKDPIdentifierWithType_, 8, a4);
}

id sub_18A7014D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;

  v3 = a3;
  v4 = (void *)objc_opt_new();
  objc_msgSend_coordinate(v3, v5, v6, v7);
  objc_msgSend_setLatitude_(v4, v8, v9, v10);
  objc_msgSend_coordinate(v3, v11, v12, v13);
  objc_msgSend_setLongitude_(v4, v14, v15, v16, v17);
  objc_msgSend_horizontalAccuracy(v3, v18, v19, v20);
  objc_msgSend_setHorizontalAccuracy_(v4, v21, v22, v23);
  objc_msgSend_verticalAccuracy(v3, v24, v25, v26);
  objc_msgSend_setVerticalAccuracy_(v4, v27, v28, v29);
  objc_msgSend_altitude(v3, v30, v31, v32);
  objc_msgSend_setAltitude_(v4, v33, v34, v35);
  objc_msgSend_course(v3, v36, v37, v38);
  objc_msgSend_setCourse_(v4, v39, v40, v41);
  objc_msgSend_speed(v3, v42, v43, v44);
  objc_msgSend_setSpeed_(v4, v45, v46, v47);
  objc_msgSend_timestamp(v3, v48, v49, v50);
  v51 = (void *)objc_claimAutoreleasedReturnValue();

  if (v51)
  {
    v52 = (void *)objc_opt_new();
    objc_msgSend_setTimestamp_(v4, v53, (uint64_t)v52, v54);

    objc_msgSend_timestamp(v3, v55, v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceReferenceDate(v58, v59, v60, v61);
    v63 = v62;
    objc_msgSend_timestamp(v4, v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setTime_(v67, v68, v69, v70, v63);

  }
  return v4;
}

id sub_18A7015FC(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  CLLocationDegrees v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  CLLocationDegrees v14;
  CLLocationCoordinate2D v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;

  v3 = (objc_class *)MEMORY[0x1E0C9E3B8];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend_latitude(v4, v6, v7, v8);
  v10 = v9;
  objc_msgSend_longitude(v4, v11, v12, v13);
  v15 = CLLocationCoordinate2DMake(v10, v14);
  objc_msgSend_altitude(v4, v16, v17, v18);
  v20 = v19;
  objc_msgSend_horizontalAccuracy(v4, v21, v22, v23);
  v25 = v24;
  objc_msgSend_verticalAccuracy(v4, v26, v27, v28);
  v30 = v29;
  objc_msgSend_course(v4, v31, v32, v33);
  v35 = v34;
  objc_msgSend_speed(v4, v36, v37, v38);
  v40 = v39;
  v41 = (void *)MEMORY[0x1E0C99D68];
  objc_msgSend_timestamp(v4, v42, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_time(v45, v46, v47, v48);
  objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v41, v49, v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = (void *)objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_(v5, v53, (uint64_t)v52, v54, v15.latitude, v15.longitude, v20, v25, v30, v35, v40);

  return v55;
}

id CKWatchAppBundleIDFromProcessBundleID(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  int isEqualToString;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v26 = 0;
  objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(MEMORY[0x1E0CA5898], a2, a1, 0, &v26);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_extensionPointRecord(v2, v3, v4, v5),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend_identifier(v6, v7, v8, v9),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        isEqualToString = objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("com.apple.watchkit"), v12),
        v10,
        v6,
        isEqualToString))
  {
    objc_msgSend_containingBundleRecord(v2, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bundleIdentifier(v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_bundleIdentifier(v2, v22, v23, v24);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v21 = 0;
    }
  }

  return v21;
}

id CKSelectLocalAppNamesByBundleIDs(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  id v14;
  id v15;
  const char *v16;
  void *v17;
  id v18;
  void *v19;
  NSObject *v20;
  void **v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  int isCloudSyncAllowed;
  void *v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  void *v61;
  const char *v62;
  NSObject *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  __int128 v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  char v75;
  id obj;
  uint64_t v77;
  id v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8_t buf[4];
  id v84;
  __int16 v85;
  id v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    v72 = (void *)objc_opt_new();
    objc_msgSend_set(MEMORY[0x1E0C99E20], v5, v6, v7);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v71 = v1;
    obj = v1;
    v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v79, (uint64_t)v87, 16);
    if (v9)
    {
      v11 = v9;
      v77 = *(_QWORD *)v80;
      v12 = (void **)&ck_log_initialization_block;
      *(_QWORD *)&v10 = 138412290;
      v70 = v10;
      do
      {
        v13 = 0;
        v74 = v11;
        do
        {
          if (*(_QWORD *)v80 != v77)
            objc_enumerationMutation(obj);
          v14 = *(id *)(*((_QWORD *)&v79 + 1) + 8 * v13);
          v15 = objc_alloc(MEMORY[0x1E0CA5870]);
          v78 = 0;
          v17 = (void *)objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(v15, v16, (uint64_t)v14, 0, &v78);
          v18 = v78;
          v19 = *v12;
          if (v18)
          {
            if (ck_log_initialization_predicate != -1)
              dispatch_once(&ck_log_initialization_predicate, v19);
            v20 = ck_log_facility_ck;
            if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              v84 = v14;
              v85 = 2112;
              v86 = v18;
              _os_log_debug_impl(&dword_18A5C5000, v20, OS_LOG_TYPE_DEBUG, "LSApplicationRecord with bundle id %@: is not available on this device. Skipping it: %@", buf, 0x16u);
            }
          }
          else
          {
            if (ck_log_initialization_predicate != -1)
              dispatch_once(&ck_log_initialization_predicate, v19);
            v21 = v12;
            v22 = ck_log_facility_ck;
            if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              v84 = v14;
              v85 = 2112;
              v86 = v17;
              _os_log_debug_impl(&dword_18A5C5000, v22, OS_LOG_TYPE_DEBUG, "Considering registered bundleID: %@, got record: %@", buf, 0x16u);
            }
            objc_msgSend_applicationState(v17, v23, v24, v25, v70);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend_isInstalled(v26, v27, v28, v29) & 1) != 0
              && (objc_msgSend_URL(v17, v30, v31, v32), (v33 = objc_claimAutoreleasedReturnValue()) != 0))
            {
              v37 = (void *)v33;
              objc_msgSend_URL(v17, v34, v35, v36);
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              v75 = objc_msgSend_containsObject_(v73, v39, (uint64_t)v38, v40);

              v11 = v74;
              v12 = v21;
              if ((v75 & 1) == 0)
              {
                objc_msgSend_URL(v17, v41, v42, v43);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_addObject_(v73, v45, (uint64_t)v44, v46);

                objc_msgSend_sharedConnection(MEMORY[0x1E0D47230], v47, v48, v49);
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                isCloudSyncAllowed = objc_msgSend_isCloudSyncAllowed_(v50, v51, (uint64_t)v14, v52);

                v54 = *v12;
                if (isCloudSyncAllowed)
                {
                  if (ck_log_initialization_predicate != -1)
                    dispatch_once(&ck_log_initialization_predicate, v54);
                  v11 = v74;
                  v55 = ck_log_facility_ck;
                  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = v70;
                    v84 = v14;
                    _os_log_debug_impl(&dword_18A5C5000, v55, OS_LOG_TYPE_DEBUG, "BundleID %@ is installed and sync allowed", buf, 0xCu);
                  }
                  objc_msgSend_localizedName(v17, v56, v57, v58);
                  v59 = objc_claimAutoreleasedReturnValue();
                  v61 = (void *)v59;
                  if (v59)
                    objc_msgSend_setObject_forKeyedSubscript_(v72, v60, v59, (uint64_t)v14);
                  else
                    objc_msgSend_setObject_forKeyedSubscript_(v72, v60, (uint64_t)v14, (uint64_t)v14);

                }
                else
                {
                  if (ck_log_initialization_predicate != -1)
                    dispatch_once(&ck_log_initialization_predicate, v54);
                  v11 = v74;
                  v63 = ck_log_facility_ck;
                  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138543362;
                    v84 = v14;
                    _os_log_impl(&dword_18A5C5000, v63, OS_LOG_TYPE_INFO, "Warn: %{public}@ is disabled by profile", buf, 0xCu);
                  }
                }
              }
            }
            else
            {

              v12 = v21;
            }
          }

          ++v13;
        }
        while (v11 != v13);
        v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v62, (uint64_t)&v79, (uint64_t)v87, 16);
        v11 = v64;
      }
      while (v64);
    }

    v68 = (void *)objc_msgSend_copy(v72, v65, v66, v67);
    v1 = v71;
  }
  else
  {
    v68 = 0;
  }

  return v68;
}

id CKURLSlugsToBundleIDsMap()
{
  if (qword_1ECD970D0 != -1)
    dispatch_once(&qword_1ECD970D0, &unk_1E1F62328);
  return (id)qword_1ECD970C8;
}

void sub_18A701CF0()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  v0 = (void *)MEMORY[0x1E0CB34D0];
  v1 = objc_opt_class();
  objc_msgSend_bundleForClass_(v0, v2, v1, v3);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathForResource_ofType_(v17, v4, (uint64_t)CFSTR("url-slugs-to-bundle-ids"), (uint64_t)CFSTR("plist"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionaryWithContentsOfFile_(MEMORY[0x1E0C99D80], v6, (uint64_t)v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99E08], v9, (uint64_t)v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_copy(v11, v12, v13, v14);
  v16 = (void *)qword_1ECD970C8;
  qword_1ECD970C8 = v15;

}

void ck_call_or_dispatch_async_if_not_key(void *a1, const void *a2, void *a3)
{
  NSObject *v5;
  void (**v6)(_QWORD);
  NSObject *v7;
  uint8_t v8[16];

  v5 = a1;
  v6 = a3;
  if (v5)
  {
    if (dispatch_get_specific(a2))
      v6[2](v6);
    else
      dispatch_async(v5, v6);
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_ERROR, "Attempted to call ck_call_or_dispatch_async_if_not_key with a nil queue", v8, 2u);
    }
  }

}

uint64_t CKSimulateOncePerBootProcessRestart()
{
  void *v0;
  void *v1;

  pthread_mutex_lock(&stru_1ECD96950);
  byte_1ECD96F9B = 0;
  v0 = (void *)qword_1ECD96FA0;
  qword_1ECD96FA0 = 0;

  qword_1ECD970E8 = 0;
  v1 = (void *)qword_1ECD96FB0;
  qword_1ECD96FB0 = 0;

  return pthread_mutex_unlock(&stru_1ECD96950);
}

void CKSimulateOncePerBootReboot()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  id v9;

  pthread_mutex_lock(&stru_1ECD96950);
  while (qword_1ECD96FA8)
    pthread_cond_wait(&stru_1ECD96920, &stru_1ECD96950);
  pthread_mutex_lock(&stru_1ECD96990);
  byte_1ECD96F9B = 0;
  v0 = (void *)qword_1ECD96FA0;
  qword_1ECD96FA0 = 0;

  qword_1ECD970E8 = 0;
  v1 = (void *)qword_1ECD96FB0;
  qword_1ECD96FB0 = 0;

  objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v2, v3, v4);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v9, v5, (uint64_t)CFSTR("CKStartupTime"), v6);
  objc_msgSend_removeObjectForKey_(v9, v7, (uint64_t)CFSTR("CKPerBootTasks"), v8);
  pthread_mutex_unlock(&stru_1ECD96990);
  pthread_mutex_unlock(&stru_1ECD96950);

}

id CKDescriptionForTimeInterval(double a1)
{
  char *v1;
  size_t v2;
  const char *v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char __str[24];
  _BYTE v10[24];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = xmmword_18A83D0B8;
  v19 = unk_18A83D0C8;
  v20 = xmmword_18A83D0D8;
  v21 = unk_18A83D0E8;
  v14 = xmmword_18A83D078;
  v15 = unk_18A83D088;
  v16 = xmmword_18A83D098;
  v17 = unk_18A83D0A8;
  *(_OWORD *)&v10[8] = xmmword_18A83D038;
  v11 = unk_18A83D048;
  v12 = xmmword_18A83D058;
  v13 = unk_18A83D068;
  v1 = __str;
  if (a1 >= 0.0)
  {
    v2 = 32;
  }
  else
  {
    __str[0] = 45;
    v1 = &__str[1];
    a1 = -a1;
    v2 = 31;
  }
  if (a1 * 1000000000.0 >= 0.1)
  {
    v5 = (double *)v10;
    do
    {
      v6 = v5[1];
      v5 += 3;
    }
    while (a1 > v6 && v6 != 0.0);
    v7 = a1 * *(v5 - 1);
    if (v6 == 0.0 && v7 >= 1000.0)
      snprintf(v1, v2, ">1k %s");
    else
      snprintf(v1, v2, "%.3g %s");
  }
  else if (a1 == 0.0)
  {
    snprintf(v1, v2, "0.0 %s");
  }
  else
  {
    snprintf(v1, v2, "<0.1 %s");
  }
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v3, (uint64_t)__str, v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id CKDescriptionForNSInterval(unint64_t a1)
{
  return CKDescriptionForTimeInterval((double)a1 / 1000000000.0);
}

id sub_18A7037C8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  objc_msgSend_path(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathComponents(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend_count(v8, v9, v10, v11) >= 2)
  {
    objc_msgSend_objectAtIndexedSubscript_(v8, v12, 1, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByRemovingPercentEncoding(v15, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseString(v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_capitalizedString(v23, v24, v25, v26);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

const __CFString *sub_18A70386C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const __CFString *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  objc_msgSend_CKShareURLSlugBasedApplicationName(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("pages"), v10) & 1) != 0)
  {
    v13 = CFSTR("com.apple.Pages");
  }
  else if ((objc_msgSend_isEqualToString_(v8, v11, (uint64_t)CFSTR("keynote"), v12) & 1) != 0)
  {
    v13 = CFSTR("com.apple.Keynote");
  }
  else if ((objc_msgSend_isEqualToString_(v8, v14, (uint64_t)CFSTR("numbers"), v15) & 1) != 0)
  {
    v13 = CFSTR("com.apple.Numbers");
  }
  else
  {
    v13 = CFSTR("iclouddrive");
    if (!objc_msgSend_isEqualToString_(v8, v16, (uint64_t)CFSTR("iclouddrive"), v17))
      v13 = 0;
  }

  return v13;
}

uint64_t sub_18A703924(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v4 = a3;
  objc_msgSend_getUUIDBytes_(a1, v5, (uint64_t)v18, v6);
  objc_msgSend_getUUIDBytes_(v4, v7, (uint64_t)v17, v8);

  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v9, (uint64_t)v18, 16);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v11, (uint64_t)v17, 16);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_CKCompare_(v10, v13, (uint64_t)v12, v14);

  return v15;
}

uint64_t CKByteTuple(int a1, int a2)
{
  return __rev16(a1 | (a2 << 8));
}

uint64_t CKValue1FromByteTuple(unsigned int a1)
{
  return a1 >> 8;
}

uint64_t CKValue2FromByteTuple(uint64_t result)
{
  return result;
}

uint64_t CKPIDForProcessNamed(void *a1)
{
  id v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  size_t size;
  int v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  *(_OWORD *)v17 = xmmword_18A83D020;
  v18 = 0;
  size = 0;
  v2 = sysctl(v17, 3u, 0, &size, 0, 0);
  if (!(_DWORD)v2)
  {
    v3 = (char *)malloc_type_malloc(size, 0x7B248F12uLL);
    v4 = sysctl(v17, 3u, v3, &size, 0, 0);
    if ((_DWORD)v4)
    {
      v2 = v4;
    }
    else
    {
      v5 = objc_retainAutorelease(v1);
      v9 = objc_msgSend_UTF8String(v5, v6, v7, v8);
      v10 = (int)size / 0x288uLL;
      if ((int)v10 < 1)
      {
LABEL_13:
        free(v3);
        v2 = 0xFFFFFFFFLL;
        goto LABEL_14;
      }
      v11 = (const char *)v9;
      v12 = 0;
      v13 = 648 * v10;
      while (1)
      {
        v2 = *(unsigned int *)&v3[v12 + 40];
        v14 = (int)v2 < 1 || v3[v12 + 36] == 5;
        if (!v14 && !strncmp(v11, &v3[v12 + 243], 0x10uLL))
          break;
        v12 += 648;
        if (v13 == v12)
          goto LABEL_13;
      }
    }
    free(v3);
  }
LABEL_14:

  return v2;
}

double sub_18A703B8C()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  result = 1.0 / (1000000000.0 / (double)v0 * (double)v1);
  qword_1ECD970F8 = *(_QWORD *)&result;
  return result;
}

void sub_18A703EB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 520);
    *(_QWORD *)(v8 + 520) = v7;

  }
}

void sub_18A704044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A70405C(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A704084(uint64_t a1)
{

}

void sub_18A70408C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 520));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A7041E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 528);
    *(_QWORD *)(v8 + 528) = v7;

  }
}

void sub_18A704378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A704390(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 528));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A705910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18A705C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v14;

  if (v14)
    operator delete(v14);

  _Unwind_Resume(a1);
}

void sub_18A705E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_18A705EAC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_addIndexesInRange_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
}

void sub_18A705F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18A706034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18A70605C(uint64_t a1, const char *a2, NSUInteger a3, uint64_t a4)
{
  _QWORD *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  _QWORD *v31;
  uint64_t v32;
  NSUInteger v33;
  NSUInteger v34;
  id v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSRange v41;
  NSRange v42;

  objc_msgSend_rangeMap(*(void **)(a1 + 32), a2, a3, a4);
  v7 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  v8 = (char *)v7[1];
  v9 = (char *)v7[2];
  if (v8 == v9)
    goto LABEL_19;
  v10 = (v9 - v8) >> 5;
  v11 = (char *)v7[1];
  do
  {
    v12 = v10 >> 1;
    v13 = (uint64_t *)&v11[32 * (v10 >> 1)];
    v15 = *v13;
    v16 = v13[1];
    v14 = (char *)(v13 + 4);
    v10 += ~(v10 >> 1);
    if (v16 + v15 <= (unint64_t)a2)
      v11 = v14;
    else
      v10 = v12;
  }
  while (v10);
  while (v11 != v8)
  {
    v17 = v11;
    v19 = *((_QWORD *)v11 - 4);
    v11 -= 32;
    v18 = v19;
    if (v19 > (unint64_t)a2 || *((_QWORD *)v17 - 3) + v18 <= (unint64_t)a2)
      goto LABEL_12;
  }
  v17 = (char *)v7[1];
LABEL_12:
  if (v17 == v9)
  {
LABEL_19:

  }
  else
  {
    v20 = v17 - v8;

    if ((~v20 & 0x1FFFFFFFE0) != 0)
    {
      v24 = (v20 >> 5);
      objc_msgSend_rangeMap(*(void **)(a1 + 32), v21, v22, v23);
      v25 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      v26 = v25[2] - v25[1];

      if (v24 < v26 >> 5)
      {
        for (i = 32 * v24; ; i += 32)
        {
          objc_msgSend_rangeMap(*(void **)(a1 + 32), v27, v28, v29);
          v31 = (_QWORD *)objc_claimAutoreleasedReturnValue();
          v32 = v31[1] + i;
          v33 = *(_QWORD *)v32;
          v34 = *(_QWORD *)(v32 + 8);
          v35 = *(id *)(v32 + 16);

          v41.location = (NSUInteger)a2;
          v41.length = a3;
          v42.location = v33;
          v42.length = v34;
          if (!NSIntersectionRange(v41, v42).length)
            break;
          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

          ++v24;
          objc_msgSend_rangeMap(*(void **)(a1 + 32), v36, v37, v38);
          v39 = (_QWORD *)objc_claimAutoreleasedReturnValue();
          v40 = v39[2] - v39[1];

          if (v24 >= v40 >> 5)
            return;
        }

      }
    }
  }
}

void sub_18A706240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18A7063CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18A7064AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_18A7064CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  id v8;
  void *v9;
  const char **v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char **v19;
  _QWORD v20[5];

  objc_msgSend_rangeMap(*(void **)(a1 + 32), a2, a3, a4);
  v7 = (uint64_t *)objc_claimAutoreleasedReturnValue();
  v8 = *(id *)(a1 + 40);
  v9 = v8;
  v10 = (const char **)v7[2];
  v11 = v7[3];
  if ((unint64_t)v10 >= v11)
  {
    v13 = v7[1];
    v14 = ((uint64_t)v10 - v13) >> 5;
    if ((unint64_t)(v14 + 1) >> 59)
      sub_18A7075A8();
    v15 = v11 - v13;
    v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v20[4] = v7 + 3;
    if (v17)
      v17 = (unint64_t)sub_18A707628(v17);
    else
      v18 = 0;
    v19 = (const char **)(v17 + 32 * v14);
    v20[0] = v17;
    v20[1] = v19;
    v20[3] = v17 + 32 * v18;
    *v19 = a2;
    v19[1] = (const char *)a3;
    v19[2] = (const char *)v9;
    v19[3] = 0;
    v20[2] = v19 + 4;
    sub_18A707528(v7 + 1, v20);
    v12 = (_QWORD *)v7[2];
    sub_18A707684((uint64_t)v20);
  }
  else
  {
    *v10 = a2;
    v10[1] = (const char *)a3;
    v10[2] = (const char *)v8;
    v10[3] = 0;
    v12 = v10 + 4;
  }
  v7[2] = (uint64_t)v12;

}

void sub_18A7065EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18A706600(void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 4;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t sub_18A706674(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t result;
  unint64_t *v8;

  v5 = (a3 + a2) >> 1;
  v6 = (_QWORD *)(*a1 + 32 * v5);
  result = v6[1] + *v6;
  v6[3] = result;
  v8 = v6 + 3;
  if (v5 > a2)
  {
    result = sub_18A706674(a1);
    if (*v8 > result)
      result = *v8;
    *v8 = result;
  }
  if (v5 + 1 < a3)
  {
    result = sub_18A706674(a1);
    if (*v8 > result)
      result = *v8;
    *v8 = result;
  }
  return result;
}

void sub_18A706704(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  unint64_t *v6;
  __int128 *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  __n128 *v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  __n128 *v51;
  __n128 *v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  __n128 *v56;
  __n128 *v57;
  unint64_t v58;
  void *v59;
  void **v60;
  void *v61;
  unint64_t v62;

  if (a3 < 2)
    return;
  v6 = (unint64_t *)a1;
  if (a3 == 2)
  {
    v7 = (__int128 *)&a2[-2];
    v8 = a2[-2].n128_u64[0];
    v9 = v8 >= a1->n128_u64[0];
    if (v8 == a1->n128_u64[0])
    {
      v10 = a2[-2].n128_u64[1];
      v11 = a1->n128_u64[1];
      v9 = v10 >= v11;
      if (v10 == v11)
        v9 = a2[-1].n128_u64[0] >= a1[1].n128_u64[0];
    }
    if (!v9)
      sub_18A706B1C((__int128 *)a1, v7);
    return;
  }
  v12 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2)
      return;
    v18 = a1 + 2;
    if (&a1[2] == a2)
      return;
    v19 = 0;
    v20 = a1;
    while (1)
    {
      v21 = (unint64_t *)v20;
      v20 = v18;
      v22 = v18->n128_u64[0];
      if (v18->n128_u64[0] == *v21)
      {
        v23 = v21[5];
        v24 = v21[1];
        v25 = v23 >= v24;
        if (v23 == v24)
          v25 = v21[6] >= v21[2];
        if (!v25)
          goto LABEL_23;
      }
      else if (v22 < *v21)
      {
        v23 = v21[5];
LABEL_23:
        v27 = v21[6];
        v26 = v21[7];
        v21[6] = 0;
        *v20 = *(__n128 *)v21;
        v28 = v21[2];
        v21[2] = 0;
        v29 = (void *)v20[1].n128_u64[0];
        v20[1].n128_u64[0] = v28;

        v20[1].n128_u64[1] = v21[3];
        if (v21 == v6)
        {
          v21 = v6;
        }
        else
        {
          v62 = v26;
          v30 = v19;
          do
          {
            v31 = (_OWORD *)((char *)v6 + v30);
            v32 = *(unint64_t *)((char *)v6 + v30 - 32);
            v33 = v22 >= v32;
            if (v22 == v32 && (v34 = *((_QWORD *)v31 - 3), v33 = v23 >= v34, v23 == v34))
            {
              if (v27 >= *(unint64_t *)((char *)v6 + v30 - 16))
              {
                v21 = (unint64_t *)((char *)v6 + v30);
                goto LABEL_33;
              }
            }
            else if (v33)
            {
              goto LABEL_33;
            }
            v21 -= 4;
            *v31 = *(_OWORD *)((char *)v6 + v30 - 32);
            v35 = (uint64_t)v6 + v30;
            v36 = *(unint64_t *)((char *)v6 + v30 - 16);
            *(_QWORD *)(v35 - 16) = 0;
            v37 = *(void **)((char *)v6 + v30 + 16);
            *(_QWORD *)(v35 + 16) = v36;

            *(_QWORD *)(v35 + 24) = *(_QWORD *)(v35 - 8);
            v30 -= 32;
          }
          while (v30);
          v21 = v6;
LABEL_33:
          v26 = v62;
        }
        *v21 = v22;
        v21[1] = v23;
        v38 = (void *)v21[2];
        v21[2] = v27;

        v21[3] = v26;
      }
      v18 = v20 + 2;
      v19 += 32;
      if (&v20[2] == a2)
        return;
    }
  }
  v15 = a3 >> 1;
  v16 = &a1[2 * (a3 >> 1)];
  v17 = a3 >> 1;
  if ((uint64_t)v12 <= a5)
  {
    sub_18A706B98(a1, v16, v17, a4);
    v39 = &a4[2 * v15];
    sub_18A706B98((__n128 *)&v6[4 * (v12 >> 1)], a2, v12 - (v12 >> 1), v39);
    v40 = &a4[2 * v12];
    v41 = v39;
    v42 = a4;
    while (v41 != v40)
    {
      v43 = v41->n128_u64[0] >= v42->n128_u64[0];
      if (v41->n128_u64[0] == v42->n128_u64[0])
      {
        v44 = v41->n128_u64[1];
        v45 = v42->n128_u64[1];
        v43 = v44 >= v45;
        if (v44 == v45)
          v43 = v41[1].n128_u64[0] >= v42[1].n128_u64[0];
      }
      if (v43)
      {
        *(__n128 *)v6 = *v42;
        v48 = v42[1].n128_u64[0];
        v42[1].n128_u64[0] = 0;
        v49 = (void *)v6[2];
        v6[2] = v48;

        v6[3] = v42[1].n128_u64[1];
        v42 += 2;
      }
      else
      {
        *(__n128 *)v6 = *v41;
        v46 = v41[1].n128_u64[0];
        v41[1].n128_u64[0] = 0;
        v47 = (void *)v6[2];
        v6[2] = v46;

        v6[3] = v41[1].n128_u64[1];
        v41 += 2;
      }
      v6 += 4;
      if (v42 == v39)
      {
        if (v41 != v40)
        {
          v50 = 0;
          do
          {
            v51 = &v41[v50 / 0x10];
            v52 = (__n128 *)&v6[v50 / 8];
            *v52 = v41[v50 / 0x10];
            v53 = v41[v50 / 0x10 + 1].n128_u64[0];
            v41[v50 / 0x10 + 1].n128_u64[0] = 0;
            v54 = (void *)v6[v50 / 8 + 2];
            v52[1].n128_u64[0] = v53;

            v52[1].n128_u64[1] = v41[v50 / 0x10 + 1].n128_u64[1];
            v50 += 32;
          }
          while (&v51[2] != v40);
        }
        goto LABEL_53;
      }
    }
    if (v42 != v39)
    {
      v55 = 0;
      do
      {
        v56 = &v42[v55 / 0x10];
        v57 = (__n128 *)&v6[v55 / 8];
        *v57 = v42[v55 / 0x10];
        v58 = v42[v55 / 0x10 + 1].n128_u64[0];
        v42[v55 / 0x10 + 1].n128_u64[0] = 0;
        v59 = (void *)v6[v55 / 8 + 2];
        v57[1].n128_u64[0] = v58;

        v57[1].n128_u64[1] = v42[v55 / 0x10 + 1].n128_u64[1];
        v55 += 32;
      }
      while (&v56[2] != v39);
    }
LABEL_53:
    if (a4)
    {
      v60 = (void **)&a4[1];
      do
      {
        v61 = *v60;
        v60 += 4;

        --v12;
      }
      while (v12);
    }
  }
  else
  {
    sub_18A706704(a1, v16, v17, a4, a5);
    sub_18A706704(&v6[4 * (v12 >> 1)], a2, v12 - (v12 >> 1), a4, a5);
    sub_18A706F54((__int128 *)v6, (__int128 *)&v6[4 * (v12 >> 1)], (__int128 *)a2, v12 >> 1, v12 - (v12 >> 1), (uint64_t)a4, a5);
  }
}

void sub_18A706AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;

  if (v1)
  {
    v4 = (void **)(v1 + 16);
    do
    {
      v5 = *v4;
      v4 += 4;

      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A706B1C(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;

  v9 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = 0;
  *a1 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v7 = (void *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v6;

  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *a2 = v9;
  v8 = (void *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;

  *((_QWORD *)a2 + 3) = v5;
}

__n128 sub_18A706B98(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  unint64_t *v10;
  __n128 *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __n128 *v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __n128 *v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __n128 *v65;
  __n128 *v66;
  unint64_t v67;
  unint64_t v68;

  if (!a3)
    return result;
  v4 = a4;
  v7 = a1;
  if (a3 == 2)
  {
    v11 = a2 - 2;
    v12 = a2[-2].n128_u64[0];
    v13 = v12 >= a1->n128_u64[0];
    if (v12 == a1->n128_u64[0])
    {
      v14 = a2[-2].n128_u64[1];
      v15 = a1->n128_u64[1];
      v13 = v14 >= v15;
      if (v14 == v15)
        v13 = a2[-1].n128_u64[0] >= a1[1].n128_u64[0];
    }
    if (v13)
    {
      *a4 = *a1;
      v47 = a1[1].n128_u64[0];
      v48 = a1[1].n128_u64[1];
      a1[1].n128_u64[0] = 0;
      a4[1].n128_u64[0] = v47;
      a4[1].n128_u64[1] = v48;
      result = *v11;
      a4[2] = *v11;
      v49 = a2[-1].n128_u64[0];
      a2[-1].n128_u64[0] = 0;
      a4[3].n128_u64[0] = v49;
      v10 = &a4[3].n128_u64[1];
      v19 = &a2[-1].n128_u64[1];
      goto LABEL_36;
    }
    *a4 = *v11;
    v16 = a2[-1].n128_u64[0];
    v17 = a2[-1].n128_u64[1];
    a2[-1].n128_u64[0] = 0;
    a4[1].n128_u64[0] = v16;
    a4[1].n128_u64[1] = v17;
    result = *a1;
    a4[2] = *a1;
    v18 = a1[1].n128_u64[0];
    a1[1].n128_u64[0] = 0;
    a4[3].n128_u64[0] = v18;
    v10 = &a4[3].n128_u64[1];
LABEL_10:
    v19 = &a1[1].n128_u64[1];
LABEL_36:
    *v10 = *v19;
    return result;
  }
  if (a3 == 1)
  {
    result = *a1;
    *a4 = *a1;
    v9 = a1[1].n128_u64[0];
    a1[1].n128_u64[0] = 0;
    a4[1].n128_u64[0] = v9;
    v10 = &a4[1].n128_u64[1];
    goto LABEL_10;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2)
      return result;
    result = *a1;
    *a4 = *a1;
    v20 = a1[1].n128_u64[0];
    v21 = a1[1].n128_u64[1];
    a1[1].n128_u64[0] = 0;
    a4[1].n128_u64[0] = v20;
    a4[1].n128_u64[1] = v21;
    v22 = a1 + 2;
    if (&a1[2] == a2)
      return result;
    v23 = 0;
    v24 = a4;
    v25 = a4;
    while (1)
    {
      v26 = v22;
      v27 = v25->n128_u64[0];
      v25 += 2;
      v28 = v22->n128_u64[0] >= v27;
      if (v22->n128_u64[0] == v27)
      {
        v29 = v7[2].n128_u64[1];
        v30 = v24->n128_u64[1];
        v28 = v29 >= v30;
        if (v29 == v30)
          v28 = v7[3].n128_u64[0] >= v24[1].n128_u64[0];
      }
      if (v28)
      {
        result = *v26;
        *v25 = *v26;
        v43 = v7[3].n128_u64[0];
        v44 = v7[3].n128_u64[1];
        v7[3].n128_u64[0] = 0;
        v24[3].n128_u64[0] = v43;
        v24[3].n128_u64[1] = v44;
        goto LABEL_33;
      }
      *v25 = *v24;
      v31 = v24[1].n128_i64[0];
      v32 = v24[1].n128_i64[1];
      v24[1].n128_u64[0] = 0;
      v24[3].n128_u64[0] = v31;
      v24[3].n128_u64[1] = v32;
      v33 = v4;
      if (v24 == v4)
        goto LABEL_32;
      v34 = v23;
      while (1)
      {
        v35 = (_OWORD *)((char *)v4->n128_u64 + v34);
        v36 = *(unint64_t *)((char *)v4[-2].n128_u64 + v34);
        v37 = v26->n128_u64[0] >= v36;
        if (v26->n128_u64[0] != v36)
          goto LABEL_24;
        v38 = v7[2].n128_u64[1];
        v39 = *((_QWORD *)v35 - 3);
        if (v38 == v39)
        {
          v37 = v7[3].n128_u64[0] >= *(unint64_t *)((char *)v4[-1].n128_u64 + v34);
LABEL_24:
          if (v37)
          {
            v33 = v24;
            goto LABEL_32;
          }
          goto LABEL_28;
        }
        if (v38 >= v39)
          break;
LABEL_28:
        v24 -= 2;
        *v35 = *(__n128 *)((char *)&v4[-2] + v34);
        v40 = (uint64_t)v4 + v34;
        v41 = *(uint64_t *)((char *)v4[-1].n128_i64 + v34);
        *(_QWORD *)(v40 - 16) = 0;
        v42 = *(void **)((char *)v4[1].n128_u64 + v34);
        *(_QWORD *)(v40 + 16) = v41;

        *(_QWORD *)(v40 + 24) = *(_QWORD *)(v40 - 8);
        v34 -= 32;
        if (!v34)
        {
          v33 = v4;
          goto LABEL_32;
        }
      }
      v33 = (__n128 *)((char *)v4 + v34);
LABEL_32:
      *v33 = *v26;
      v45 = v7[3].n128_u64[0];
      v7[3].n128_u64[0] = 0;
      v46 = (void *)v33[1].n128_u64[0];
      v33[1].n128_u64[0] = v45;

      v33[1].n128_u64[1] = v7[3].n128_u64[1];
LABEL_33:
      v22 = v26 + 2;
      v23 += 32;
      v24 = v25;
      v7 = v26;
      if (&v26[2] == a2)
        return result;
    }
  }
  v50 = &a1[2 * (a3 >> 1)];
  sub_18A706704(a1, v50, a3 >> 1, a4, a3 >> 1);
  sub_18A706704(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
  v51 = &v7[2 * (a3 >> 1)];
  while (v51 != a2)
  {
    v52 = v51->n128_u64[0] >= v7->n128_u64[0];
    if (v51->n128_u64[0] == v7->n128_u64[0])
    {
      v53 = v51->n128_u64[1];
      v54 = v7->n128_u64[1];
      v52 = v53 >= v54;
      if (v53 == v54)
        v52 = v51[1].n128_u64[0] >= v7[1].n128_u64[0];
    }
    if (v52)
    {
      result = *v7;
      *v4 = *v7;
      v57 = v7[1].n128_u64[0];
      v58 = v7[1].n128_u64[1];
      v7[1].n128_u64[0] = 0;
      v4[1].n128_u64[0] = v57;
      v4[1].n128_u64[1] = v58;
      v7 += 2;
    }
    else
    {
      result = *v51;
      *v4 = *v51;
      v55 = v51[1].n128_u64[0];
      v56 = v51[1].n128_u64[1];
      v51[1].n128_u64[0] = 0;
      v4[1].n128_u64[0] = v55;
      v4[1].n128_u64[1] = v56;
      v51 += 2;
    }
    v4 += 2;
    if (v7 == v50)
    {
      if (v51 != a2)
      {
        v59 = 0;
        do
        {
          v60 = &v51[v59];
          v61 = &v4[v59];
          result = v51[v59];
          *v61 = result;
          v62 = v51[v59 + 1].n128_u64[0];
          v63 = v51[v59 + 1].n128_u64[1];
          v60[1].n128_u64[0] = 0;
          v61[1].n128_u64[0] = v62;
          v61[1].n128_u64[1] = v63;
          v59 += 2;
        }
        while (&v60[2] != a2);
      }
      return result;
    }
  }
  if (v7 != v50)
  {
    v64 = 0;
    do
    {
      v65 = &v4[v64];
      v66 = &v7[v64];
      result = v7[v64];
      *v65 = result;
      v67 = v7[v64 + 1].n128_u64[0];
      v68 = v7[v64 + 1].n128_u64[1];
      v66[1].n128_u64[0] = 0;
      v65[1].n128_u64[0] = v67;
      v65[1].n128_u64[1] = v68;
      v64 += 2;
    }
    while (&v66[2] != v50);
  }
  return result;
}

void sub_18A706F54(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 *v42;
  BOOL v43;
  unint64_t v44;
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  __int128 *v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  __int128 *v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  void **v96;
  void *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 *v100;
  uint64_t v101;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = *(_QWORD *)a2;
      v15 = -a4;
      while (1)
      {
        v16 = *(_QWORD *)&a1[v13];
        v17 = v14 >= v16;
        if (v14 == v16)
        {
          v18 = *((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)&a1[v13] + 1);
          v17 = v18 >= v19;
          if (v18 == v19)
            v17 = *((_QWORD *)a2 + 2) >= *(_QWORD *)&a1[v13 + 1];
        }
        if (!v17)
          break;
        v13 += 2;
        v17 = __CFADD__(v15++, 1);
        if (v17)
          return;
      }
      v20 = -v15;
      v21 = &a1[v13];
      v101 = a6;
      if (-v15 >= v8)
      {
        if (v15 == -1)
        {
          sub_18A706B1C(&a1[v13], a2);
          return;
        }
        if (v15 > 0)
          v20 = 1 - v15;
        v35 = v20 >> 1;
        v24 = &a1[2 * (v20 >> 1) + v13];
        if (a2 == a3)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          v37 = ((char *)a3 - (char *)a2) >> 5;
          v38 = *(_QWORD *)v24;
          v39 = *((_QWORD *)v24 + 1);
          do
          {
            v40 = v37 >> 1;
            v41 = v23 + (v37 >> 1);
            v42 = &a2[2 * v41];
            v43 = *(_QWORD *)v42 >= v38;
            if (*(_QWORD *)v42 == v38)
            {
              v44 = *((_QWORD *)v42 + 1);
              v43 = v44 >= v39;
              if (v44 == v39)
                v43 = *((_QWORD *)v42 + 2) >= *((_QWORD *)v24 + 2);
            }
            if (!v43)
            {
              v23 = v41 + 1;
              v40 = v37 + ~v40;
            }
            v37 = v40;
          }
          while (v40);
        }
        v36 = (32 * v23) >> 5;
      }
      else
      {
        if (v8 >= 0)
          v22 = v8;
        else
          v22 = v8 + 1;
        v23 = v22 >> 1;
        v24 = &a1[v13];
        v25 = (char *)a2 - (char *)a1 - v13 * 16;
        if (v25)
        {
          v26 = &a2[2 * v23];
          v27 = v25 >> 5;
          v28 = *(_QWORD *)v26;
          v29 = *((_QWORD *)v26 + 1);
          v30 = *((_QWORD *)v26 + 2);
          v24 = &a1[v13];
          do
          {
            v31 = v27 >> 1;
            v32 = &v24[2 * (v27 >> 1)];
            v33 = v28 >= *(_QWORD *)v32;
            if (v28 == *(_QWORD *)v32)
            {
              v34 = *((_QWORD *)v32 + 1);
              v33 = v29 >= v34;
              if (v29 == v34)
                v33 = v30 >= *((_QWORD *)v32 + 2);
            }
            if (v33)
            {
              v24 = v32 + 2;
              v31 = v27 + ~v31;
            }
            v27 = v31;
          }
          while (v31);
        }
        v35 = ((char *)v24 - (char *)a1 - v13 * 16) >> 5;
        v36 = v23;
      }
      v100 = a3;
      v45 = &a2[2 * v23];
      if (v24 == a2)
      {
        a3 = &a2[2 * v23];
      }
      else
      {
        a3 = v24;
        if (v23)
        {
          v98 = v21;
          v99 = a7;
          sub_18A706B1C(v24, a2);
          a3 = v24 + 2;
          if (v23 != 1)
          {
            v46 = a2 + 2;
            v47 = 32 * v23 - 32;
            do
            {
              if (a3 == a2)
                a2 = v46;
              sub_18A706B1C(a3, v46);
              a3 += 2;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
          }
          if (a3 != a2)
          {
            v48 = a3;
            v49 = a2;
            do
            {
              while (1)
              {
                sub_18A706B1C(v48, a2);
                v48 += 2;
                a2 += 2;
                if (a2 == v45)
                  break;
                if (v48 == v49)
                  v49 = a2;
              }
              a2 = v49;
            }
            while (v48 != v49);
          }
          v21 = v98;
          a7 = v99;
        }
      }
      a4 = -(v35 + v15);
      v50 = v8 - v36;
      if (v35 + v36 >= v8 - (v35 + v36) - v15)
      {
        v53 = v21;
        v54 = v45;
        a6 = v101;
        v55 = -(v35 + v15);
        v51 = a7;
        sub_18A706F54(a3, v54, v100, v55, v50, v101);
        v52 = v53;
        v50 = v36;
        a4 = v35;
      }
      else
      {
        v51 = a7;
        sub_18A706F54(v21, v24, a3, v35, v36, v101);
        v52 = a3;
        v24 = v45;
        a6 = v101;
        a3 = v100;
      }
      a2 = v24;
      a1 = v52;
      v8 = v50;
      a7 = v51;
      if (!v50)
        return;
    }
    if (a4 <= v8)
    {
      if (a1 == a2)
        return;
      v72 = 0;
      v57 = 0;
      do
      {
        v73 = a6 + v72 * 16;
        v74 = &a1[v72];
        *(_OWORD *)v73 = a1[v72];
        v75 = *(_QWORD *)&a1[v72 + 1];
        v76 = *((_QWORD *)&a1[v72 + 1] + 1);
        *((_QWORD *)v74 + 2) = 0;
        *(_QWORD *)(v73 + 16) = v75;
        *(_QWORD *)(v73 + 24) = v76;
        ++v57;
        v72 += 2;
      }
      while (v74 + 2 != a2);
      if (v72 * 16)
      {
        v77 = (_QWORD *)(a6 + v72 * 16);
        v78 = a6 + v72 * 16 - 32;
        v79 = (_QWORD *)a6;
        while (a2 != a3)
        {
          v80 = *(_QWORD *)a2 >= *v79;
          if (*(_QWORD *)a2 == *v79)
          {
            v81 = *((_QWORD *)a2 + 1);
            v82 = v79[1];
            v80 = v81 >= v82;
            if (v81 == v82)
              v80 = *((_QWORD *)a2 + 2) >= v79[2];
          }
          if (v80)
          {
            *a1 = *(_OWORD *)v79;
            v85 = v79[2];
            v79[2] = 0;
            v86 = (void *)*((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v85;

            *((_QWORD *)a1 + 3) = v79[3];
            v79 += 4;
          }
          else
          {
            *a1 = *a2;
            v83 = *((_QWORD *)a2 + 2);
            *((_QWORD *)a2 + 2) = 0;
            v84 = (void *)*((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v83;

            *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
            a2 += 2;
          }
          a1 += 2;
          if (v77 == v79)
            goto LABEL_100;
        }
        if (v77 != v79)
        {
          v91 = 0;
          do
          {
            v92 = &a1[v91 / 0x10];
            v93 = &v79[v91 / 8];
            *v92 = *(_OWORD *)&v79[v91 / 8];
            v94 = v79[v91 / 8 + 2];
            v79[v91 / 8 + 2] = 0;
            v95 = *(void **)&a1[v91 / 0x10 + 1];
            *((_QWORD *)v92 + 2) = v94;

            *((_QWORD *)v92 + 3) = v79[v91 / 8 + 3];
            v91 += 32;
          }
          while ((_QWORD *)v78 != v93);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v56 = 0;
      v57 = 0;
      do
      {
        v58 = a6 + v56 * 16;
        v59 = &a2[v56];
        *(_OWORD *)v58 = a2[v56];
        v60 = *(_QWORD *)&a2[v56 + 1];
        v61 = *((_QWORD *)&a2[v56 + 1] + 1);
        *((_QWORD *)v59 + 2) = 0;
        *(_QWORD *)(v58 + 16) = v60;
        *(_QWORD *)(v58 + 24) = v61;
        ++v57;
        v56 += 2;
      }
      while (v59 + 2 != a3);
      if (v56 * 16)
      {
        v62 = (__int128 *)(a6 + v56 * 16);
        while (a2 != a1)
        {
          v63 = *((_QWORD *)a2 - 4);
          v64 = *((_QWORD *)v62 - 4);
          v65 = v64 >= v63;
          if (v64 == v63)
          {
            v66 = *((_QWORD *)v62 - 3);
            v67 = *((_QWORD *)a2 - 3);
            v65 = v66 >= v67;
            if (v66 == v67)
              v65 = *((_QWORD *)v62 - 2) >= *((_QWORD *)a2 - 2);
          }
          if (v65)
          {
            *(a3 - 2) = *(v62 - 2);
            v71 = *((_QWORD *)v62 - 2);
            *((_QWORD *)v62 - 2) = 0;
            v69 = (void *)*((_QWORD *)a3 - 2);
            *((_QWORD *)a3 - 2) = v71;
            v70 = v62;
            v62 -= 2;
          }
          else
          {
            *(a3 - 2) = *(a2 - 2);
            v68 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = 0;
            v69 = (void *)*((_QWORD *)a3 - 2);
            *((_QWORD *)a3 - 2) = v68;
            v70 = a2;
            a2 -= 2;
          }

          *((_QWORD *)a3 - 1) = *((_QWORD *)v70 - 1);
          a3 -= 2;
          if (v62 == (__int128 *)a6)
            goto LABEL_100;
        }
        v87 = 0;
        do
        {
          v88 = &a3[v87];
          *(v88 - 2) = v62[v87 - 2];
          v89 = *(_QWORD *)&v62[v87 - 1];
          *(_QWORD *)&v62[v87 - 1] = 0;
          v90 = *(void **)&a3[v87 - 1];
          *((_QWORD *)v88 - 2) = v89;

          *((_QWORD *)v88 - 1) = *((_QWORD *)&v62[v87 - 1] + 1);
          v87 -= 2;
        }
        while (&v62[v87] != (__int128 *)a6);
      }
    }
LABEL_100:
    if (a6)
    {
      v96 = (void **)(a6 + 16);
      do
      {
        v97 = *v96;
        v96 += 4;

        --v57;
      }
      while (v57);
    }
  }
}

uint64_t *sub_18A707528(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 32;
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      v6 = *(_QWORD *)(v3 - 16);
      v7 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v4 - 16) = v6;
      *(_QWORD *)(v4 - 8) = v7;
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_18A7075A8()
{
  sub_18A7075B4();
}

void sub_18A7075B4()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18A7075FC(exception);
  __cxa_throw(exception, (struct type_info *)off_1E1F54B80, MEMORY[0x1E0DE42D0]);
}

void sub_18A7075E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18A7075FC(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *sub_18A707628(unint64_t a1)
{
  if (a1 >> 59)
    sub_18A70765C();
  return operator new(32 * a1);
}

void sub_18A70765C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t sub_18A707684(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18A707714()
{
  CKScheduler *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  void *v5;

  v0 = [CKScheduler alloc];
  inited = objc_msgSend_initInternal(v0, v1, v2, v3);
  v5 = (void *)qword_1ECD96B60;
  qword_1ECD96B60 = inited;

}

void sub_18A707C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,os_activity_scope_state_s state)
{
  _Block_object_dispose(&a18, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_18A707C5C(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A707C84(uint64_t a1)
{

}

void sub_18A707C8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(*(void **)(a1 + 40), v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v14, v9, (uint64_t)v8, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

void sub_18A707CFC(void **a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  xpc_object_t v20;
  void *v21;
  double v22;
  xpc_object_t *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  char v34;
  double v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  CKXPCActivity *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  NSObject *v59;
  int v60;
  void *v61;
  __int16 v62;
  void *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    v60 = 138412290;
    v61 = v6;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEFAULT, "Submitting activity %@", (uint8_t *)&v60, 0xCu);
  }
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(a1[5], v3, v4, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(a1[4], v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v12, (uint64_t)v11, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend_isXPCActivityPending_(a1[5], v15, (uint64_t)v14, v16) & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v24 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v60) = 0;
      _os_log_debug_impl(&dword_18A5C5000, v24, OS_LOG_TYPE_DEBUG, "Dropping cached non-pending xpc_activity", (uint8_t *)&v60, 2u);
    }
    objc_msgSend_xpcActivitiesByCKActivityIdentifier(a1[5], v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(a1[4], v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v28, v33, 0, (uint64_t)v32);

    v21 = 0;
    v14 = 0;
    goto LABEL_15;
  }
  if (!v14)
  {
    v21 = 0;
LABEL_15:
    v34 = 1;
    goto LABEL_16;
  }
  v20 = xpc_activity_copy_criteria((xpc_activity_t)v14);
  v21 = v20;
  if (v20)
  {
    v22 = xpc_dictionary_get_double(v20, "ck_submitted_time");
    v23 = a1 + 6;
    xpc_dictionary_set_double(a1[6], "ck_submitted_time", v22);
    if (xpc_equal(v21, *v23))
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v42 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
      {
        v43 = a1[4];
        v60 = 138412290;
        v61 = v43;
        _os_log_debug_impl(&dword_18A5C5000, v42, OS_LOG_TYPE_DEBUG, "Not modifying criteria of identical existing XPC activity for %@", (uint8_t *)&v60, 0xCu);
      }
LABEL_33:
      v52 = [CKXPCActivity alloc];
      v41 = (void *)objc_msgSend_initWithXPCActivity_(v52, v53, (uint64_t)v14, v54);
      objc_msgSend_setCkXPCActivity_(a1[4], v55, (uint64_t)v41, v56);
      v57 = a1[7];
      if (v57)
      {
        v58 = a1[5];
        if (v58)
          v59 = *((_QWORD *)v58 + 2);
        else
          v59 = 0;
        dispatch_async(v59, v57);
      }
      goto LABEL_37;
    }
LABEL_28:
    v44 = (void *)xpc_copy_short_description();
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v45 = (void *)ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
    {
      v46 = a1[4];
      v47 = v45;
      objc_msgSend_identifier(v46, v48, v49, v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = 138543618;
      v61 = v51;
      v62 = 2080;
      v63 = v44;
      _os_log_impl(&dword_18A5C5000, v47, OS_LOG_TYPE_DEFAULT, "Modifying criteria of existing activity %{public}@ with criteria: %s", (uint8_t *)&v60, 0x16u);

    }
    free(v44);
    xpc_activity_set_criteria((xpc_activity_t)v14, *v23);
    goto LABEL_33;
  }
  v34 = 0;
LABEL_16:
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v17, v18, v19);
  v23 = a1 + 6;
  xpc_dictionary_set_double(a1[6], "ck_submitted_time", v35);
  if ((v34 & 1) == 0)
    goto LABEL_28;
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v36 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v60) = 0;
    _os_log_debug_impl(&dword_18A5C5000, v36, OS_LOG_TYPE_DEBUG, "Submitting activity without an existing xpc_activity, will register", (uint8_t *)&v60, 2u);
  }
  v40 = (uint64_t)a1[5];
  objc_msgSend_identifier(a1[4], v37, v38, v39);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  sub_18A708184(v40, v41, a1[6], a1[7]);
LABEL_37:

}

void sub_18A708184(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  id v32;
  _QWORD v33[5];
  id v34;
  id v35;
  id v36;
  _QWORD *v37;
  _BYTE *v38;
  _QWORD v39[3];
  char v40;
  _BYTE buf[24];
  void *(*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
    goto LABEL_13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  v10 = (void *)objc_opt_class();
  objc_msgSend_xpcActivityIdentifierForCKActivityIdentifier_(v10, v11, (uint64_t)v7, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqual_(v13, v14, (uint64_t)v7, v15))
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v16 = ck_log_facility_scheduler;
    if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
      goto LABEL_10;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v7;
    v20 = "Calling xpc_activity_register for activity %{public}@";
    v21 = v16;
    v22 = 12;
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v23 = ck_log_facility_scheduler;
    if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
      goto LABEL_10;
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v13;
    v20 = "Calling xpc_activity_register for activity %{public}@ (xpc_activity %{public}@)";
    v21 = v23;
    v22 = 22;
  }
  _os_log_debug_impl(&dword_18A5C5000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
LABEL_10:
  if (__sTestOverridesAvailable)
  {
    objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v17, v18, v19);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_postNotificationName_object_(v24, v25, (uint64_t)CFSTR("CKSchedulerWillRegisterXPCActivityNotification"), (uint64_t)v13);

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v42 = sub_18A707C5C;
  v43 = sub_18A707C84;
  v44 = _Block_copy(v9);
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2020000000;
  v40 = 0;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 24));
  v26 = objc_retainAutorelease(v13);
  v30 = (const char *)objc_msgSend_UTF8String(v26, v27, v28, v29);
  v31 = (void *)*MEMORY[0x1E0C80748];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = sub_18A7095A4;
  v33[3] = &unk_1E1F62580;
  v33[4] = a1;
  v34 = v7;
  v35 = v8;
  v37 = v39;
  v32 = v26;
  v36 = v32;
  v38 = buf;
  xpc_activity_register(v30, v31, v33);

  _Block_object_dispose(v39, 8);
  _Block_object_dispose(buf, 8);

LABEL_13:
}

void sub_18A708494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A7084C0(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int isTestContainer;

  v2 = a2;
  objc_opt_self();
  objc_msgSend_nullableContainer(v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deviceContext(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testDeviceReferenceProtocol(v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v18 = 0;
  }
  else
  {
    objc_msgSend_containerID(v2, v15, v16, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    isTestContainer = objc_msgSend_isTestContainer(v19, v20, v21, v22);

    v18 = isTestContainer ^ 1u;
  }

  return v18;
}

id sub_18A70855C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int isAppleInternal;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  const char *string;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  int64_t int64;
  const char *v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  int64_t v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;

  v4 = a2;
  v5 = a3;
  objc_opt_self();
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerID(v4, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  isAppleInternal = objc_msgSend_isAppleInternal(v13, v14, v15, v16);

  if (isAppleInternal)
  {
    objc_msgSend_identifier(v4, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKStringByReplacingUUIDsWithString_(v21, v22, (uint64_t)CFSTR("<uuid>"), v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v25, (uint64_t)v24, (uint64_t)CFSTR("activityIdentifier"));

    objc_msgSend_containerID(v4, v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_containerIdentifier(v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v34, (uint64_t)v33, (uint64_t)CFSTR("containerIdentifier"));

  }
  else
  {
    objc_msgSend_setObject_forKeyedSubscript_(v9, v18, (uint64_t)CFSTR("<redacted>"), (uint64_t)CFSTR("activityIdentifier"));
    objc_msgSend_setObject_forKeyedSubscript_(v9, v38, (uint64_t)CFSTR("ThirdPartyContainer"), (uint64_t)CFSTR("containerIdentifier"));
  }
  v39 = (void *)MEMORY[0x1E0CB37E8];
  v40 = objc_msgSend_priority(v4, v35, v36, v37);
  objc_msgSend_numberWithInteger_(v39, v41, v40, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v9, v44, (uint64_t)v43, (uint64_t)CFSTR("priority"));

  if (objc_msgSend_userRequestedBackupTask(v4, v45, v46, v47))
  {
    v51 = (void *)MEMORY[0x1E0CB37E8];
    v52 = objc_msgSend_userRequestedBackupTask(v4, v48, v49, v50);
    objc_msgSend_numberWithBool_(v51, v53, v52, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v56, (uint64_t)v55, (uint64_t)CFSTR("userRequestedBackupTask"));

  }
  if (objc_msgSend_expectedTransferSizeBytes(v4, v48, v49, v50))
  {
    v60 = (void *)MEMORY[0x1E0CB37E8];
    v61 = objc_msgSend_expectedTransferSizeBytes(v4, v57, v58, v59);
    objc_msgSend_numberWithUnsignedInteger_(v60, v62, v61, v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v65, (uint64_t)v64, (uint64_t)CFSTR("transferSizeBytes"));

  }
  if (v5)
  {
    string = xpc_dictionary_get_string(v5, "ck_device_count_string");
    if (string)
    {
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v67, (uint64_t)string, v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v70, (uint64_t)v69, (uint64_t)CFSTR("deviceCountString"));

    }
    v71 = xpc_dictionary_get_string(v5, (const char *)*MEMORY[0x1E0C80878]);
    if (v71)
    {
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v72, (uint64_t)v71, v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v75, (uint64_t)v74, (uint64_t)CFSTR("xpcActivityPriority"));

    }
    int64 = xpc_dictionary_get_int64(v5, (const char *)*MEMORY[0x1E0C80790]);
    objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v77, int64, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v80, (uint64_t)v79, (uint64_t)CFSTR("xpcActivityGracePeriod"));

    v81 = xpc_dictionary_get_int64(v5, (const char *)*MEMORY[0x1E0C80760]);
    objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v82, v81, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v85, (uint64_t)v84, (uint64_t)CFSTR("xpcActivityDelay"));

  }
  return v9;
}

void sub_18A708918(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  id v7;

  v5 = *(_QWORD *)(a1 + 48);
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v6, v5, *(_QWORD *)(a1 + 40));

}

void sub_18A708C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v17 - 128));
  _Unwind_Resume(a1);
}

void sub_18A708C3C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(unsigned __int8 *)(a1 + 64);
    v20 = 138543618;
    v21 = v17;
    v22 = 1024;
    v23 = v18;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Registering CK activity %{public}@ replaceExistingHandler=%d", (uint8_t *)&v20, 0x12u);
  }
  if (*(_BYTE *)(a1 + 64)
    || (objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 40), v3, v4, v5),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend_objectForKeyedSubscript_(v12, v13, *(_QWORD *)(a1 + 32), v14),
        v15 = (void *)objc_claimAutoreleasedReturnValue(),
        v15,
        v12,
        !v15))
  {
    v6 = _Block_copy(*(const void **)(a1 + 48));
    objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 40), v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)v6, *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v16 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 138412290;
      v21 = v19;
      _os_log_fault_impl(&dword_18A5C5000, v16, OS_LOG_TYPE_FAULT, "BUG IN CLIENT OF CLOUDKIT: Registering a handler for a CKScheduler activity identifier that has already been registered (%@).", (uint8_t *)&v20, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
}

void sub_18A708E24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, *(_QWORD *)(a1 + 40), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
    sub_18A708184(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 0, 0);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = CFSTR("activityIdentifier");
  v13[0] = v10;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v13, (uint64_t)&v12, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  AnalyticsSendEvent();

}

void sub_18A70901C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A709194(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v10 = 138543362;
    v11 = v6;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEFAULT, "Unregistering handler for CK activity %{public}@", (uint8_t *)&v10, 0xCu);
  }
  objc_msgSend_handlersByCKActivityIdentifier(*(void **)(a1 + 40), v3, v4, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v7, v8, *(_QWORD *)(a1 + 32), v9);

}

void sub_18A7093E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, *(_QWORD *)(a1 + 40), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v9 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 40);
      v27 = 138543362;
      v28 = v13;
      _os_log_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_DEFAULT, "Cancelling activity %{public}@", (uint8_t *)&v27, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v14 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_QWORD *)(a1 + 40);
      v27 = 138543362;
      v28 = v26;
      _os_log_debug_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_DEBUG, "Cancelling unknown activity %{public}@", (uint8_t *)&v27, 0xCu);
    }
  }
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), v10, v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v15, v16, *(_QWORD *)(a1 + 40), v17);

  v18 = (void *)objc_opt_class();
  objc_msgSend_xpcActivityIdentifierForCKActivityIdentifier_(v18, v19, *(_QWORD *)(a1 + 40), v20);
  v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v25 = (const char *)objc_msgSend_UTF8String(v21, v22, v23, v24);
  xpc_activity_unregister(v25);

}

void sub_18A7095A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  id v8[2];
  _QWORD block[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  uint64_t v15;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = *(NSObject **)(v5 + 8);
  else
    v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18A70968C;
  block[3] = &unk_1E1F62558;
  v10 = v3;
  v11 = v5;
  v12 = *(id *)(a1 + 40);
  v13 = *(id *)(a1 + 48);
  *(_OWORD *)v8 = *(_OWORD *)(a1 + 56);
  v7 = v8[0];
  v14 = *(_OWORD *)v8;
  v15 = *(_QWORD *)(a1 + 72);
  v8[0] = v4;
  dispatch_sync(v6, block);

}

void sub_18A70968C(uint64_t a1)
{
  xpc_activity_state_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  dispatch_queue_t *v17;
  void *v18;
  id v19;
  _xpc_activity_s *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  xpc_object_t v41;
  void *v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  void *v54;
  id v55;
  const char *v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  NSObject *v66;
  const char *v67;
  NSObject *v68;
  NSObject *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  void *v98;
  _QWORD v99[4];
  id v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, void *);
  void *v104;
  id v105;
  id v106;
  id v107;
  id location;
  os_activity_scope_state_s state;
  _BYTE buf[24];
  void *v111;
  id v112;
  NSObject *v113;
  dispatch_queue_t *v114;
  id v115;
  _xpc_activity_s *v116;
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v2 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 32);
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 40), v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v8, v3, *(_QWORD *)(a1 + 48));

  if (v2 == 2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v16 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      v92 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v92;
      _os_log_debug_impl(&dword_18A5C5000, v16, OS_LOG_TYPE_DEBUG, "Being told to run activity %{public}@", buf, 0xCu);
    }
    v17 = *(dispatch_queue_t **)(a1 + 40);
    v18 = *(void **)(a1 + 32);
    v19 = *(id *)(a1 + 48);
    v20 = v18;
    if (!v17)
      goto LABEL_56;
    dispatch_assert_queue_V2(v17[1]);
    v21 = _os_activity_create(&dword_18A5C5000, "client/scheduler-run", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v21, &state);
    objc_msgSend_date(MEMORY[0x1E0C99D68], v22, v23, v24);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handlersByCKActivityIdentifier(v17, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v28, v29, (uint64_t)v19, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = (void *)objc_opt_class();
    objc_msgSend_activityFromXPCActivity_(v32, v33, (uint64_t)v20, v34);
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = (void *)v35;
    if (v31)
    {
      if (v35)
      {
        objc_initWeak(&location, v17);
        v101 = MEMORY[0x1E0C809B0];
        v102 = 3221225472;
        v103 = sub_18A70A144;
        v104 = &unk_1E1F625A8;
        objc_copyWeak(&v107, &location);
        v96 = v19;
        v105 = v96;
        v97 = v36;
        v106 = v97;
        v95 = xpc_activity_add_eligibility_changed_handler();
        if (ck_log_initialization_predicate != -1)
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        v37 = ck_log_facility_scheduler;
        if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v96;
          _os_log_debug_impl(&dword_18A5C5000, v37, OS_LOG_TYPE_DEBUG, "Will run scheduler activity %{public}@", buf, 0xCu);
        }
        if (xpc_activity_set_state(v20, 4))
        {
          v40 = 0.0;
          if (sub_18A7084C0((uint64_t)CKScheduler, v97))
          {
            v41 = xpc_activity_copy_criteria(v20);
            sub_18A70855C((uint64_t)CKScheduler, v97, v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v43 = xpc_dictionary_get_double(v41, "ck_submitted_time");
            objc_msgSend_timeIntervalSinceReferenceDate(v98, v44, v45, v46);
            v40 = v47 - v43;
            objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v48, v49, v50, v40);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_forKeyedSubscript_(v42, v52, (uint64_t)v51, (uint64_t)CFSTR("durationFromSubmitToRun"));

            AnalyticsSendEvent();
          }
          if (qword_1ECD96B70 != -1)
            dispatch_once(&qword_1ECD96B70, &unk_1E1F59898);
          if (qword_1ECD96B68)
          {
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v38, (uint64_t)CFSTR("CKScheduler-%@"), v39, v96);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = (void *)qword_1ECD96B68;
            v99[0] = MEMORY[0x1E0C809B0];
            v99[1] = 3221225472;
            v99[2] = sub_18A70A3F8;
            v99[3] = &unk_1E1F5FAA8;
            v55 = v53;
            v100 = v55;
            v94 = objc_msgSend_beginBackgroundTaskWithName_expirationHandler_(v54, v56, (uint64_t)v55, (uint64_t)v99);
            if (ck_log_initialization_predicate != -1)
              dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
            v57 = (id)ck_log_facility_scheduler;
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_backgroundTimeRemaining((void *)qword_1ECD96B68, v58, v59, v60);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v94;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v96;
              *(_WORD *)&buf[22] = 2048;
              v111 = v93;
              _os_log_debug_impl(&dword_18A5C5000, v57, OS_LOG_TYPE_DEBUG, "Began background task identifier %ld for %@ with %.2fs background time remaining", buf, 0x20u);
            }

            v61 = v94;
          }
          else
          {
            v61 = 0;
          }
          v69 = v17[2];
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_18A70A4D0;
          v111 = &unk_1E1F62620;
          v112 = v97;
          v118 = v31;
          v113 = v21;
          v114 = v17;
          v115 = v96;
          v116 = v20;
          v119 = v95;
          v120 = v61;
          v117 = v98;
          v121 = v40;
          dispatch_async(v69, buf);

        }
        else
        {
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v68 = ck_log_facility_scheduler;
          if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v96;
            _os_log_error_impl(&dword_18A5C5000, v68, OS_LOG_TYPE_ERROR, "Failed to set state to CONTINUE for activity %{public}@", buf, 0xCu);
          }
        }

        objc_destroyWeak(&v107);
        objc_destroyWeak(&location);
        goto LABEL_55;
      }
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v66 = ck_log_facility_scheduler;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_FAULT))
        goto LABEL_55;
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v19;
      v67 = "No scheduler activity when trying to run activity %{public}@";
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v66 = ck_log_facility_scheduler;
      if (!os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_FAULT))
        goto LABEL_55;
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v19;
      v67 = "No handler when trying to run activity %{public}@";
    }
    _os_log_fault_impl(&dword_18A5C5000, v66, OS_LOG_TYPE_FAULT, v67, buf, 0xCu);
LABEL_55:

    os_activity_scope_leave(&state);
LABEL_56:

    goto LABEL_57;
  }
  if (v2)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v62 = (void *)ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
    {
      v63 = *(_QWORD *)(a1 + 48);
      v64 = v62;
      CKStringForXPCActivityState(v2);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v63;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v65;
      _os_log_impl(&dword_18A5C5000, v64, OS_LOG_TYPE_INFO, "Received callback for activity %{public}@ with state [%{public}@]", buf, 0x16u);

    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v9 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      v91 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v91;
      _os_log_debug_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_DEBUG, "Checking in for activity %{public}@", buf, 0xCu);
    }
    if (*(_QWORD *)(a1 + 56))
    {
      v13 = (void *)xpc_copy_short_description();
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v14 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v13;
        _os_log_impl(&dword_18A5C5000, v14, OS_LOG_TYPE_DEFAULT, "Submitting activity criteria for %{public}@: %s", buf, 0x16u);
      }
      free(v13);
      xpc_activity_set_criteria(*(xpc_activity_t *)(a1 + 32), *(xpc_object_t *)(a1 + 56));
    }
  }
LABEL_57:
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  if (!*(_BYTE *)(v70 + 24))
  {
    if (__sTestOverridesAvailable)
    {
      objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v10, v11, v12);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_postNotificationName_object_(v76, v77, (uint64_t)CFSTR("CKSchedulerDidRegisterXPCActivityNotification"), *(_QWORD *)(a1 + 64));

      v70 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    }
    *(_BYTE *)(v70 + 24) = 1;
    v78 = *(_QWORD *)(a1 + 40);
    if (v78)
      v79 = *(NSObject **)(v78 + 24);
    else
      v79 = 0;
    dispatch_resume(v79);
    if (__sTestOverridesAvailable)
    {
      objc_msgSend_delayAfterXPCActivityRegister(*(void **)(a1 + 40), v80, v81, v82);
      if (v86 > 0.0)
      {
        v87 = (void *)MEMORY[0x1E0CB3978];
        objc_msgSend_delayAfterXPCActivityRegister(*(void **)(a1 + 40), v83, v84, v85);
        objc_msgSend_sleepForTimeInterval_(v87, v88, v89, v90);
      }
    }
  }
  v71 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
  if (v71)
  {
    v72 = *(_QWORD *)(a1 + 40);
    if (v72)
      v73 = *(NSObject **)(v72 + 16);
    else
      v73 = 0;
    dispatch_async(v73, v71);
    v74 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v75 = *(void **)(v74 + 40);
    *(_QWORD *)(v74 + 40) = 0;

  }
}

void sub_18A70A0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,os_activity_scope_state_s state)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a28);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18A70A144(uint64_t a1, void *a2)
{
  id *v3;
  _xpc_activity_s *v4;
  _QWORD *WeakRetained;
  _BOOL4 should_defer;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  should_defer = xpc_activity_should_defer(v4);

  if (should_defer)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v7 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v13 = v8;
      _os_log_impl(&dword_18A5C5000, v7, OS_LOG_TYPE_DEFAULT, "Should defer activity %{public}@", buf, 0xCu);
    }
    if (WeakRetained)
    {
      v9 = WeakRetained[1];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18A70A2A4;
      block[3] = &unk_1E1F5FAA8;
      v11 = *(id *)(a1 + 40);
      dispatch_async(v9, block);

    }
  }

}

uint64_t sub_18A70A2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setShouldDefer_, 1, a4);
}

void sub_18A70A2B0()
{
  void *v0;
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  Class (*v12)(uint64_t);
  void *v13;
  uint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((CKCurrentProcessIsDaemon() & 1) == 0)
  {
    if (!qword_1ECD96B78)
    {
      v11 = xmmword_1E1F62690;
      v12 = 0;
      qword_1ECD96B78 = _sl_dlopen();
    }
    if (qword_1ECD96B78)
    {
      v7 = 0;
      v8 = &v7;
      v9 = 0x2050000000;
      v0 = (void *)qword_1ECD96B80;
      v10 = qword_1ECD96B80;
      if (!qword_1ECD96B80)
      {
        *(_QWORD *)&v11 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v11 + 1) = 3221225472;
        v12 = sub_18A70CB68;
        v13 = &unk_1E1F5F618;
        v14 = &v7;
        sub_18A70CB68((uint64_t)&v11);
        v0 = (void *)v8[3];
      }
      v1 = objc_retainAutorelease(v0);
      _Block_object_dispose(&v7, 8);
      objc_msgSend_sharedApplication(v1, v2, v3, v4, v7);
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = (void *)qword_1ECD96B68;
      qword_1ECD96B68 = v5;

    }
  }
}

void sub_18A70A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_18A70A3F8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138412290;
    v5 = v3;
    _os_log_debug_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_DEBUG, "Background task for %@ expired. Too bad.", (uint8_t *)&v4, 0xCu);
  }
}

void sub_18A70A4D0(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = (void *)ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    objc_msgSend_identifier(v3, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v8;
    _os_log_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_DEFAULT, "Running scheduler activity %{public}@", buf, 0xCu);

  }
  v9 = *(_QWORD *)(a1 + 80);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_18A70A684;
  v17[3] = &unk_1E1F625F8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(void **)(a1 + 56);
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v14 = *(id *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  v21 = v14;
  v24 = v15;
  v25 = v16;
  v22 = *(id *)(a1 + 32);
  v23 = *(id *)(a1 + 72);
  v26 = *(_QWORD *)(a1 + 104);
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(v9 + 16))(v9, v10, v17);

}

void sub_18A70A684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_activity_scope_state_s state;

  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &state);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v5 = *(NSObject **)(v4 + 8);
  else
    v5 = 0;
  v39 = MEMORY[0x1E0C809B0];
  v40 = 3221225472;
  v41 = sub_18A70A8E4;
  v42 = &unk_1E1F625D0;
  v43 = *(id *)(a1 + 48);
  v46 = a2;
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40);
  v44 = v6;
  v45 = v7;
  v8 = *(_QWORD *)(a1 + 88);
  v47 = *(_QWORD *)(a1 + 80);
  v48 = v8;
  dispatch_async(v5, &v39);
  if (sub_18A7084C0((uint64_t)CKScheduler, *(void **)(a1 + 64)))
  {
    v9 = xpc_activity_copy_criteria(*(xpc_activity_t *)(a1 + 56));
    sub_18A70855C((uint64_t)CKScheduler, *(void **)(a1 + 64), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_date(MEMORY[0x1E0C99D68], v11, v12, v13, v39, v40, v41, v42, v43);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = xpc_dictionary_get_double(v9, "ck_submitted_time");
    objc_msgSend_timeIntervalSinceReferenceDate(v14, v16, v17, v18);
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v20, v21, v22, v19 - v15);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v10, v24, (uint64_t)v23, (uint64_t)CFSTR("durationFromSubmitToComplete"));

    objc_msgSend_timeIntervalSinceDate_(v14, v25, *(_QWORD *)(a1 + 72), v26);
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v10, v31, (uint64_t)v30, (uint64_t)CFSTR("durationFromRunToComplete"));

    if (*(double *)(a1 + 96) != 0.0)
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v32, v33, v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v10, v36, (uint64_t)v35, (uint64_t)CFSTR("durationFromSubmitToRun"));

    }
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v32, a2, v34);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v10, v38, (uint64_t)v37, (uint64_t)CFSTR("result"));

    AnalyticsSendEvent();
  }

  os_activity_scope_leave(&state);
}

void sub_18A70A8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18A70A8E4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t result;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 56);
    v22 = 138543618;
    v23 = v3;
    v24 = 1024;
    LODWORD(v25) = v4;
    _os_log_impl(&dword_18A5C5000, v2, OS_LOG_TYPE_INFO, "Received completion handler for activity %{public}@ with result %d", (uint8_t *)&v22, 0x12u);
  }
  v5 = *(_QWORD *)(a1 + 56);
  if (v5 == 2)
  {
    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 3))
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v13 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_ERROR))
      {
        v21 = *(_QWORD *)(a1 + 32);
        v22 = 138543362;
        v23 = v21;
        _os_log_error_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_ERROR, "Failed to set state to DEFER for activity %{public}@", (uint8_t *)&v22, 0xCu);
      }
    }
  }
  else if (v5 == 1)
  {
    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 5))
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v9 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 32);
        v22 = 138543362;
        v23 = v20;
        _os_log_error_impl(&dword_18A5C5000, v9, OS_LOG_TYPE_ERROR, "Failed to set state to DONE for activity %{public}@", (uint8_t *)&v22, 0xCu);
      }
    }
    objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 48), v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v10, v11, *(_QWORD *)(a1 + 32), v12);

  }
  result = xpc_activity_remove_eligibility_changed_handler();
  if (*(_QWORD *)(a1 + 72) && qword_1ECD96B68)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v15 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a1 + 72);
      v19 = *(_QWORD *)(a1 + 32);
      v22 = 134218242;
      v23 = v18;
      v24 = 2112;
      v25 = v19;
      _os_log_debug_impl(&dword_18A5C5000, v15, OS_LOG_TYPE_DEBUG, "Ending background task identifier %ld for %@", (uint8_t *)&v22, 0x16u);
    }
    return objc_msgSend_endBackgroundTask_((void *)qword_1ECD96B68, v16, *(_QWORD *)(a1 + 72), v17);
  }
  return result;
}

uint64_t sub_18A70ACAC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A70ACBC(uint64_t a1)
{

}

void sub_18A70ACC4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v5, *(_QWORD *)(a1 + 40), v6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_18A70BA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18A70BA60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v4 = (id *)qword_1ECD969E0;
  v19 = qword_1ECD969E0;
  if (!qword_1ECD969E0)
  {
    v5 = sub_18A70CC20(a1, a2, a3, a4);
    v4 = (id *)dlsym(v5, "_DASOverrideRateLimitingKey");
    v17[3] = (uint64_t)v4;
    qword_1ECD969E0 = (uint64_t)v4;
  }
  _Block_object_dispose(&v16, 8);
  if (v4)
  {
    v9 = *v4;
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v11, (uint64_t)"NSString *get_DASOverrideRateLimitingKey(void)", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = dlerror();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v10, v15, (uint64_t)v13, (uint64_t)CFSTR("CKScheduler.m"), 30, CFSTR("%s"), v14);

    __break(1u);
  }
}

void sub_18A70BB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A70BB58(_QWORD *a1, const char *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  void *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = (void *)a1[4];
  v6 = a3;
  xpc_dictionary_get_value(v5, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v8 = (void *)ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      v25 = (void *)a1[5];
      v26 = v8;
      objc_msgSend_identifier(v25, v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = 138543618;
      v32 = v30;
      v33 = 2082;
      v34 = a2;
      _os_log_debug_impl(&dword_18A5C5000, v26, OS_LOG_TYPE_DEBUG, "Overriding existing XPC activity criterion %{public}@ for key %{public}s", (uint8_t *)&v31, 0x16u);

    }
  }
  v9 = (void *)a1[4];
  v10 = xpc_copy(v6);
  xpc_dictionary_set_value(v9, a2, v10);

  v11 = (void *)a1[6];
  v12 = xpc_copy(v6);
  xpc_dictionary_set_value(v11, a2, v12);

  v13 = (void *)xpc_copy_short_description();
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v14 = (void *)ck_log_facility_scheduler;
  if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
  {
    v16 = (void *)a1[5];
    v17 = v14;
    objc_msgSend_identifier(v16, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v22, (uint64_t)v13, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543874;
    v32 = v21;
    v33 = 2082;
    v34 = a2;
    v35 = 2112;
    v36 = v24;
    _os_log_debug_impl(&dword_18A5C5000, v17, OS_LOG_TYPE_DEBUG, "Adding additional XPC activity criterion for %{public}@: %{public}s %@", (uint8_t *)&v31, 0x20u);

  }
  free(v13);
  return 1;
}

void sub_18A70C708(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, *(_QWORD *)(a1 + 40), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (void *)objc_opt_class();
    objc_msgSend_activityFromXPCActivity_(v9, v10, (uint64_t)v8, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v15 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 40);
      v17 = 138543362;
      v18 = v16;
      _os_log_debug_impl(&dword_18A5C5000, v15, OS_LOG_TYPE_DEBUG, "Couldn't find XPC activity for CK activity %{public}@", (uint8_t *)&v17, 0xCu);
    }
  }

}

void sub_18A70C900(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  _xpc_activity_s *v8;
  xpc_object_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend_xpcActivitiesByCKActivityIdentifier(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v5, v6, *(_QWORD *)(a1 + 40), v7);
  v8 = (_xpc_activity_s *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = xpc_activity_copy_criteria(v8);
    v10 = v9;
    if (v9)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = xpc_dictionary_get_int64(v9, "ck_scheduler_priority");
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v13 = ck_log_facility_scheduler;
      if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 40);
        v15 = 138543362;
        v16 = v14;
        _os_log_impl(&dword_18A5C5000, v13, OS_LOG_TYPE_INFO, "No criteria in XPC activity for %{public}@", (uint8_t *)&v15, 0xCu);
      }
    }

  }
  else
  {
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v11 = ck_log_facility_scheduler;
    if (os_log_type_enabled((os_log_t)ck_log_facility_scheduler, OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 40);
      v15 = 138543362;
      v16 = v12;
      _os_log_impl(&dword_18A5C5000, v11, OS_LOG_TYPE_INFO, "Couldn't find XPC activity for CK activity %{public}@", (uint8_t *)&v15, 0xCu);
    }
  }

}

Class sub_18A70CB68(uint64_t a1)
{
  Class result;

  if (!qword_1ECD96B78)
    qword_1ECD96B78 = _sl_dlopen();
  result = objc_getClass("UIApplication");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECD96B80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_18A70CC20(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;

  if (!qword_1ECD969E8)
    qword_1ECD969E8 = _sl_dlopen();
  v4 = (void *)qword_1ECD969E8;
  if (!qword_1ECD969E8)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"void *DuetActivitySchedulerLibrary(void)", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v9, (uint64_t)v8, (uint64_t)CFSTR("CKScheduler.m"), 27, CFSTR("%s"), 0);

    __break(1u);
    free(v10);
  }
  return v4;
}

void sub_18A70CEA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 504) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 504);
    *(_QWORD *)(v8 + 504) = v7;

  }
}

void sub_18A70D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A70D050(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A70D078(uint64_t a1)
{

}

void sub_18A70D080(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 504));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A70D1DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A70D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A70D384(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A70DFEC()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v0 = qword_1EDF75360;
  v17 = qword_1EDF75360;
  if (!qword_1EDF75360)
  {
    v18 = xmmword_1E1F626C0;
    v19 = *(_OWORD *)&off_1E1F626D0;
    v1 = _sl_dlopen();
    v15[3] = v1;
    qword_1EDF75360 = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v14, 8);
  if (!v0)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v2, v3, v4);
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"void *CloudKitTestingLibrary(void)", v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v5;
    v10 = (void *)v5;
    v11 = (void *)v8;
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v9, v12, v8, (uint64_t)CFSTR("CKTestFrameworkLinking.m"), 11, CFSTR("%s"), 0);

    __break(1u);
    free(v13);
  }
}

void sub_18A70E124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18A70E144()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDF75468;
  v7 = qword_1EDF75468;
  if (!qword_1EDF75468)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_18A70E1FC;
    v3[3] = &unk_1E1F5F618;
    v3[4] = &v4;
    sub_18A70E1FC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18A70E1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A70E1FC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;

  sub_18A70DFEC();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKTestContainer");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EDF75468 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getCKTestContainerClass(void)_block_invoke", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, (uint64_t)CFSTR("CKTestFrameworkLinking.m"), 13, CFSTR("Unable to find class %s"), "CKTestContainer");

    __break(1u);
  }
}

id sub_18A70E2C0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDF75470;
  v7 = qword_1EDF75470;
  if (!qword_1EDF75470)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_18A70E378;
    v3[3] = &unk_1E1F5F618;
    v3[4] = &v4;
    sub_18A70E378((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18A70E360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A70E378(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;

  sub_18A70DFEC();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKTestDeviceReference");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EDF75470 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getCKTestDeviceReferenceClass(void)_block_invoke", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, (uint64_t)CFSTR("CKTestFrameworkLinking.m"), 14, CFSTR("Unable to find class %s"), "CKTestDeviceReference");

    __break(1u);
  }
}

id sub_18A70E43C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDF75478;
  v7 = qword_1EDF75478;
  if (!qword_1EDF75478)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_18A70E4F4;
    v3[3] = &unk_1E1F5F618;
    v3[4] = &v4;
    sub_18A70E4F4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18A70E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A70E4F4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;

  sub_18A70DFEC();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("CKTestServerManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EDF75478 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, (uint64_t)"Class getCKTestServerManagerClass(void)_block_invoke", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, (uint64_t)CFSTR("CKTestFrameworkLinking.m"), 15, CFSTR("Unable to find class %s"), "CKTestServerManager");

    __break(1u);
  }
}

void sub_18A70E8C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A70EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A70EA6C(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A70EA94(uint64_t a1)
{

}

void sub_18A70EA9C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A70EBF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 520);
    *(_QWORD *)(v8 + 520) = v7;

  }
}

void sub_18A70ED88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A70EDA0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 520));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A70F558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A70F588(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A70F598(uint64_t a1)
{

}

uint64_t sub_18A70F5A0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v4 = a3;
  objc_msgSend_packagesToDestroy(v3, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v8, v9, (uint64_t)v4, v10);

  return 0;
}

uint64_t sub_18A70F5F0(uint64_t a1, int a2, int a3, id obj)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
  return 1;
}

void sub_18A710BB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A710D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A710D60(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A710D88(uint64_t a1)
{

}

void sub_18A710D90(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A710EEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 520) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 520);
    *(_QWORD *)(v8 + 520) = v7;

  }
}

void sub_18A71107C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A711094(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 520));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_18A7111F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 528) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 528);
    *(_QWORD *)(v8 + 528) = v7;

  }
}

void sub_18A711380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A711398(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 528));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t CKContainerEnvironmentFromString(void *a1, const char *a2)
{
  if (objc_msgSend_compare_options_(a1, a2, (uint64_t)CFSTR("Production"), 1))
    return 2;
  else
    return 1;
}

void sub_18A713200(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  if (*(void **)(v6 + 512) != v5)
  {
    v7 = objc_msgSend_copy(v5, a2, a3, a4);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 512);
    *(_QWORD *)(v8 + 512) = v7;

  }
}

void sub_18A713390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_18A7133A8(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A7133D0(uint64_t a1)
{

}

void sub_18A7133D8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 512));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_18A714908(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_recordID(a2, (const char *)a2, a3, a4);
}

uint64_t CKCodeProto2ProtectedEnvelopeReadFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v5;
  int *v6;
  int *v7;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  uint64_t v18;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  CKCodeProto2Any *v27;
  uint64_t v28;
  void *v29;
  uint64_t result;

  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v9 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v7))
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v5;
        v14 = *(_QWORD *)(a2 + v13);
        if (v14 == -1 || v14 >= *(_QWORD *)(a2 + *v6))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v14 + 1;
        v12 |= (unint64_t)(v15 & 0x7F) << v10;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        if (v11++ >= 9)
        {
          v12 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v7);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v7) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v7);
      if (*(_BYTE *)(a2 + *v7))
        v12 = 0;
LABEL_14:
      v18 = v12 & 7;
      if (v17 || (_DWORD)v18 == 4)
        break;
      v20 = (const char *)(v12 >> 3);
      if ((v12 >> 3) == 2)
      {
        objc_msgSend_clearOneofValuesForContents((void *)a1, v20, v18, a4);
        *(_BYTE *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 8) = 2;
        v27 = objc_alloc_init(CKCodeProto2Any);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (!PBReaderPlaceMark() || !CKCodeProto2AnyReadFrom((uint64_t)v27, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v20 == 1)
      {
        objc_msgSend_clearOneofValuesForContents((void *)a1, v20, v18, a4);
        *(_BYTE *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 8) = 1;
        PBReaderReadData();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v28;

      }
      else if ((_DWORD)v20)
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v21 = 0;
        while (1)
        {
          v22 = *v5;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v6))
            break;
          v24 = v23 + 1;
          v25 = *(char *)(*(_QWORD *)(a2 + *v9) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          if (v25 < 0 && v21++ <= 8)
            continue;
          goto LABEL_35;
        }
        *(_BYTE *)(a2 + *v7) = 1;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)(a2 + *v5) < *(_QWORD *)(a2 + *v6));
  }
  return *(_BYTE *)(a2 + *v7) == 0;
}

uint64_t sub_18A715F40(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

void sub_18A717074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A717098(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A7170A8(uint64_t a1)
{

}

void sub_18A7170B0(_QWORD *a1, const char *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;
  char v8;
  id obj;

  v6 = (void *)a1[4];
  v7 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_msgSend_checkElementType_error_(v6, a2, a3, (uint64_t)&obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v8;
  if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *a4 = 1;
}

void sub_18A7177B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A7177F8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v24 = a3;
  v9 = objc_msgSend_count(v24, v6, v7, v8);
  if (v9 >= objc_msgSend_modifierLimitForInstallationIdentifierCheck(*(void **)(a1 + 32), v10, v11, v12))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  if ((unint64_t)objc_msgSend_count(v24, v13, v14, v15) >= 0x1F)
  {
    v19 = CFSTR("CKMultiValueMergeableDeltaRegisterInstallationIdentifierHighLimitExceededFault");
    v20 = &unk_1E1F58518;
LABEL_9:
    CKOncePerBoot(v19, v20);
    goto LABEL_10;
  }
  if ((unint64_t)objc_msgSend_count(v24, v16, v17, v18) >= 0xB)
  {
    v19 = CFSTR("CKMultiValueMergeableDeltaRegisterInstallationIdentifierMediumLimitExceededFault");
    v20 = &unk_1E1F58C98;
    goto LABEL_9;
  }
  if ((unint64_t)objc_msgSend_count(v24, v21, v22, v23) >= 6)
  {
    v19 = CFSTR("CKMultiValueMergeableDeltaRegisterInstallationIdentifierLowLimitExceededFault");
    v20 = &unk_1E1F58D58;
    goto LABEL_9;
  }
LABEL_10:

}

void sub_18A7178CC()
{
  NSObject *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v0 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    v1 = 134217984;
    v2 = 30;
    _os_log_fault_impl(&dword_18A5C5000, v0, OS_LOG_TYPE_FAULT, "Unique installation identifier count in CKMultiValueMergeableDeltaRegister exceeded high limit of %lu", (uint8_t *)&v1, 0xCu);
  }
}

void sub_18A7179A0()
{
  NSObject *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v0 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    v1 = 134217984;
    v2 = 10;
    _os_log_fault_impl(&dword_18A5C5000, v0, OS_LOG_TYPE_FAULT, "Unique installation identifier count in CKMultiValueMergeableDeltaRegister exceeded medium limit of %lu", (uint8_t *)&v1, 0xCu);
  }
}

void sub_18A717A74()
{
  NSObject *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v0 = ck_log_facility_distributed_sync;
  if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
  {
    v1 = 134217984;
    v2 = 5;
    _os_log_fault_impl(&dword_18A5C5000, v0, OS_LOG_TYPE_FAULT, "Unique installation identifier count in CKMultiValueMergeableDeltaRegister exceeded low limit of %lu", (uint8_t *)&v1, 0xCu);
  }
}

void sub_18A717BD0(uint64_t a1, const char *a2)
{
  void *v2;
  char v3;
  id v4;
  void *v5;
  uint64_t v6;
  objc_class *v7;
  void *v8;
  const char *v9;
  id v10;

  v2 = *(void **)(a1 + 32);
  v10 = 0;
  v3 = objc_msgSend_checkElementType_error_(v2, a2, (uint64_t)a2, (uint64_t)&v10);
  v4 = v10;
  if ((v3 & 1) == 0)
  {
    v5 = (void *)MEMORY[0x1E0C99DA0];
    v6 = *MEMORY[0x1E0C99778];
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_raise_format_(v5, v9, v6, (uint64_t)CFSTR("Failed to set contents on %@: %@"), v8, v4);

  }
}

void sub_18A718308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_18A718340(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const char *v11;
  id v12;
  CKDistributedTimestamp *v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  if (a3 < a3 + a4)
  {
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) < 2uLL)
    {
      v13 = [CKDistributedTimestamp alloc];
      v15 = (void *)objc_msgSend_initWithSiteIdentifierObject_clockValue_(v13, v14, (uint64_t)v12, a3);
      v19 = (void *)objc_msgSend_copy(*(void **)(a1 + 32), v16, v17, v18);
      objc_msgSend_setMetadata_(v19, v20, 0, v21);
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v22, (uint64_t)v19, (uint64_t)v15);
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

      ++a3;
      if (!--a4)
        goto LABEL_10;
    }
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Multi-value register delta has more than one CKDistributedTimestampAtomStatePresent timestamp"));
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;

    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v26 = ck_log_facility_distributed_sync;
    if (os_log_type_enabled((os_log_t)ck_log_facility_distributed_sync, OS_LOG_TYPE_FAULT))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v28 = 138412290;
      v29 = v27;
      _os_log_fault_impl(&dword_18A5C5000, v26, OS_LOG_TYPE_FAULT, "Multi-value register delta %@ has more than one CKDistributedTimestampAtomStatePresent timestamp", (uint8_t *)&v28, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    *a7 = 1;
  }
LABEL_10:

}

void sub_18A718A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18A718AC8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  char v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  CKMergeableDeltaMetadata *v32;
  CKMergeableDeltaVectors *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id obj;

  v7 = a2;
  v8 = a3;
  if (objc_msgSend_includesTimestamp_(*(void **)(a1 + 32), v9, (uint64_t)v7, v10))
  {
    v12 = *(void **)(a1 + 40);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    obj = *(id *)(v13 + 40);
    v14 = objc_msgSend_checkElementType_error_(v12, v11, (uint64_t)v8, (uint64_t)&obj);
    objc_storeStrong((id *)(v13 + 40), obj);
    if ((v14 & 1) != 0)
    {
      v18 = (void *)objc_msgSend_mutableCopy(*(void **)(a1 + 48), v15, v16, v17);
      v19 = (void *)MEMORY[0x1E0CB36B8];
      v23 = objc_msgSend_clockValue(v7, v20, v21, v22);
      objc_msgSend_indexSetWithIndex_(v19, v24, v23, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_siteIdentifierObject(v7, v27, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v18, v31, (uint64_t)v26, 1, v30);

      v32 = [CKMergeableDeltaMetadata alloc];
      v33 = [CKMergeableDeltaVectors alloc];
      objc_msgSend_vectors(*(void **)(a1 + 56), v34, v35, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_previous(v37, v38, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_vectors(*(void **)(a1 + 56), v42, v43, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_removals(v45, v46, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = (void *)objc_msgSend_initWithPreviousVector_contentsVector_removalsVector_dependenciesVector_(v33, v50, (uint64_t)v41, (uint64_t)v18, v49, *(_QWORD *)(a1 + 64));
      v54 = (void *)objc_msgSend_initWithVectors_(v32, v52, (uint64_t)v51, v53);

      v58 = (void *)objc_msgSend_copy(v8, v55, v56, v57);
      objc_msgSend_setMetadata_(v58, v59, (uint64_t)v54, v60);
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v61, (uint64_t)v58, v62);

    }
    else
    {
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v64 = *(void **)(v63 + 40);
      *(_QWORD *)(v63 + 40) = 0;

      *a4 = 1;
    }
  }

}

void sub_18A718DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18A718DD0(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = objc_msgSend_contentSize_error_(a3, a2, (uint64_t)&v5, 0);
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5;
  return result;
}

void *CKSQLiteJournalSuffixes()
{
  return &unk_1E1FC4190;
}

id sub_18A7198C8(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id result;
  const char *v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (ck_log_initialization_predicate != -1)
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  v2 = (void *)ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    objc_msgSend_path(v3, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_CKSanitizedPath(v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v12;
    _os_log_impl(&dword_18A5C5000, v4, OS_LOG_TYPE_INFO, "Vacuuming database at %{public}@", (uint8_t *)&v16, 0xCu);

  }
  result = (id)sqlite3_exec(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 136), "VACUUM", 0, 0, 0);
  if ((_DWORD)result)
    return (id)objc_msgSend_handleDatabaseError_(*(void **)(a1 + 32), v14, (uint64_t)CFSTR("Vacuum failed"), v15);
  return result;
}

uint64_t sub_18A719CCC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18A719CDC(uint64_t a1)
{

}

uint64_t sub_18A719CE4()
{
  return 1;
}

void *sub_18A719CEC(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18A719D14(uint64_t a1)
{

}

void sub_18A719D1C(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;

  v3 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)a2)
  {
    if (*(_QWORD *)(v3 + 136))
    {
      objc_msgSend__performDatabaseOperation_locked_withErrorHandler_((void *)v3, a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v6 = *(void **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;

      if (objc_msgSend_invalid(*(void **)(a1 + 32), v7, v8, v9))
      {
        objc_msgSend__forceClosed_locked(*(void **)(a1 + 32), v10, v11, v12);
        objc_msgSend_invalidationHandler(*(void **)(a1 + 32), v13, v14, v15);
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v18 = *(void **)(v17 + 40);
        *(_QWORD *)(v17 + 40) = v16;

        objc_msgSend_setInvalidationHandler_(*(void **)(a1 + 32), v19, 0, v20);
      }
      v21 = *(_BYTE **)(a1 + 32);
      if (v21[64])
      {
        objc_msgSend_markCorrupt(v21, v10, v11, v12);
        v21 = *(_BYTE **)(a1 + 32);
      }
      if (v21[65])
        objc_msgSend_remove(v21, v10, v11, v12);
    }
    else
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, a2, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Database is closed"));
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v31 = *(void **)(v30 + 40);
      *(_QWORD *)(v30 + 40) = v29;

    }
  }
  else
  {
    v22 = _Block_copy(*(const void **)(v3 + 24));
    v23 = _Block_copy(*(const void **)(a1 + 48));
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(void **)(v24 + 24);
    *(_QWORD *)(v24 + 24) = v23;

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 40));
    v26 = _Block_copy(v22);
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(void **)(v27 + 24);
    *(_QWORD *)(v27 + 24) = v26;

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(void **)(v32 + 40);
  *(_QWORD *)(v32 + 40) = 0;

}

void sub_18A71A120(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t (**v6)(_QWORD);
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  const char *v57;
  int v58;
  void *v59;
  _QWORD *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  const char *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  const char *v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  NSObject *v135;
  objc_class *v136;
  void *v137;
  void **v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  NSObject *log;
  NSObject *loga;
  uint8_t buf[4];
  void *v146;
  __int16 v147;
  void **v148;
  __int16 v149;
  void *v150;
  __int16 v151;
  void *v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_select_from_where_bindings_(*(void **)(a1 + 32), v7, (uint64_t)&unk_1E1FC41A8, (uint64_t)CFSTR("sqlite_master"), CFSTR("type = ? AND name = ?"), &unk_1E1FC41C0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_count(v8, v9, v10, v11))
    objc_msgSend_executeSQL_(v5, v12, (uint64_t)CFSTR("create table if not exists Properties (\n    key    text primary key,\n    value  text\n);\n"),
      v14);
  v15 = (void *)objc_msgSend_dbUserVersion(*(void **)(a1 + 32), v12, v13, v14);
  if ((v6[2](v6) & 1) == 0)
  {
    objc_msgSend_propertyForKey_(*(void **)(a1 + 32), v16, (uint64_t)CFSTR("SchemaVersion"), v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      objc_msgSend_schemaVersion(*(void **)(a1 + 32), v18, v19, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isEqualToString_(v21, v23, (uint64_t)v22, v24))
      {
        if (!objc_msgSend_userVersion(*(void **)(a1 + 32), v25, v26, v27))
        {

LABEL_34:
          goto LABEL_35;
        }
        v31 = objc_msgSend_userVersion(*(void **)(a1 + 32), v28, v29, v30);

        if ((_DWORD)v15 == v31)
          goto LABEL_34;
      }
      else
      {

      }
      objc_msgSend_delegate(*(void **)(a1 + 32), v32, v33, v34);
      v51 = objc_claimAutoreleasedReturnValue();
      if (v51)
      {
        v55 = (void *)v51;
        objc_msgSend_delegate(*(void **)(a1 + 32), v52, v53, v54);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = objc_msgSend_migrateDatabase_fromVersion_(v56, v57, *(_QWORD *)(a1 + 32), (uint64_t)v15);

        if (v58)
        {
          if (ck_log_initialization_predicate != -1)
            dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
          v59 = (void *)ck_log_facility_ck;
          if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
          {
            v60 = *(_QWORD **)(a1 + 32);
            v61 = (void *)v60[10];
            log = v59;
            objc_msgSend_CKSanitizedPath(v61, v62, v63, v64);
            v65 = (void **)objc_claimAutoreleasedReturnValue();
            objc_msgSend_schemaVersion(*(void **)(a1 + 32), v66, v67, v68);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v73 = objc_msgSend_userVersion(*(void **)(a1 + 32), v70, v71, v72);
            *(_DWORD *)buf = 134219266;
            v146 = v60;
            v147 = 2114;
            v148 = v65;
            v149 = 2114;
            v150 = v21;
            v151 = 2114;
            v152 = v69;
            v153 = 2048;
            v154 = (int)v15;
            v155 = 2048;
            v156 = v73;
            _os_log_impl(&dword_18A5C5000, log, OS_LOG_TYPE_INFO, "Re-creating db (%p) at %{public}@ because the schema-version (%{public}@/%{public}@) or the user-version (0x%lx/0x%lx) changed", buf, 0x3Eu);

          }
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 66) = 1;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 66))
        goto LABEL_29;
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v74 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        v78 = *(_QWORD **)(a1 + 32);
        v79 = (void *)v78[10];
        loga = v74;
        objc_msgSend_CKSanitizedPath(v79, v80, v81, v82);
        v83 = (void **)objc_claimAutoreleasedReturnValue();
        objc_msgSend_schemaVersion(*(void **)(a1 + 32), v84, v85, v86);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = objc_msgSend_userVersion(*(void **)(a1 + 32), v88, v89, v90);
        *(_DWORD *)buf = 134219266;
        v146 = v78;
        v147 = 2114;
        v148 = v83;
        v149 = 2114;
        v150 = v21;
        v151 = 2114;
        v152 = v87;
        v153 = 2048;
        v154 = (int)v15;
        v155 = 2048;
        v156 = v91;
        _os_log_impl(&dword_18A5C5000, loga, OS_LOG_TYPE_INFO, "Re-creating db (%p) at %{public}@ because the schema-version (%{public}@/%{public}@) or the user-version (0x%lx/0x%lx) changed", buf, 0x3Eu);

      }
      objc_msgSend__dropAllTables(*(void **)(a1 + 32), v75, v76, v77);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 66) = 1;
    }
    else
    {
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v35 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(_QWORD **)(a1 + 32);
        v37 = (void *)v36[10];
        v38 = v35;
        objc_msgSend_CKSanitizedPath(v37, v39, v40, v41);
        v42 = (void **)objc_claimAutoreleasedReturnValue();
        objc_msgSend_schemaVersion(*(void **)(a1 + 32), v43, v44, v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = objc_msgSend_userVersion(*(void **)(a1 + 32), v47, v48, v49);
        *(_DWORD *)buf = 134218754;
        v146 = v36;
        v147 = 2114;
        v148 = v42;
        v149 = 2114;
        v150 = v46;
        v151 = 2048;
        v152 = (void *)v50;
        _os_log_debug_impl(&dword_18A5C5000, v38, OS_LOG_TYPE_DEBUG, "Creating a new db (%p) at %{public}@ with schema-version:%{public}@ and user-version:0x%lx", buf, 0x2Au);

      }
    }

    if ((v6[2](v6) & 1) != 0)
    {
LABEL_30:
      if ((v6[2](v6) & 1) == 0)
      {
        v119 = *(void **)(a1 + 32);
        objc_msgSend_schemaVersion(v119, v116, v117, v118);
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setProperty_forKey_(v119, v121, (uint64_t)v120, (uint64_t)CFSTR("SchemaVersion"));

        if (objc_msgSend_userVersion(*(void **)(a1 + 32), v122, v123, v124))
        {
          v15 = *(void **)(a1 + 32);
          v128 = objc_msgSend_userVersion(v15, v125, v126, v127);
          objc_msgSend_executeSQL_(v15, v129, (uint64_t)CFSTR("pragma user_version = %ld"), v130, v128);
          LODWORD(v15) = objc_msgSend_userVersion(*(void **)(a1 + 32), v131, v132, v133);
        }
      }
      goto LABEL_35;
    }
    objc_msgSend_willCreateDatabase(*(void **)(a1 + 32), v92, v93, v94);
    objc_msgSend_executeSQL_(*(void **)(a1 + 32), v95, (uint64_t)CFSTR("create table if not exists Properties (\n    key    text primary key,\n    value  text\n);\n"),
      v96);
    v97 = *(void **)(a1 + 32);
    objc_msgSend_schema(v97, v98, v99, v100);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_executeSQL_(v97, v102, (uint64_t)CFSTR("%@"), v103, v101);

    v104 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_date(MEMORY[0x1E0C99D68], v105, v106, v107);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_timeIntervalSinceReferenceDate(v108, v109, v110, v111);
    objc_msgSend_stringWithFormat_(v104, v112, (uint64_t)CFSTR("%f"), v113, v114);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setProperty_forKey_(*(void **)(a1 + 32), v115, (uint64_t)v21, (uint64_t)CFSTR("Created"));
LABEL_29:

    goto LABEL_30;
  }
LABEL_35:
  if ((v6[2](v6) & 1) == 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) = 1;
    if (ck_log_initialization_predicate != -1)
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    v134 = (void *)ck_log_facility_sql;
    if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_INFO))
    {
      v135 = v134;
      v136 = (objc_class *)objc_opt_class();
      NSStringFromClass(v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      v138 = *(void ***)(a1 + 32);
      objc_msgSend_CKSanitizedPath(v138[10], v139, v140, v141);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v146 = v137;
      v147 = 2048;
      v148 = v138;
      v149 = 2114;
      v150 = v142;
      v151 = 2048;
      v152 = (void *)(int)v15;
      _os_log_impl(&dword_18A5C5000, v135, OS_LOG_TYPE_INFO, "Opened db %{public}@<%p> at %{public}@ (user-version:0x%lx)", buf, 0x2Au);

    }
  }

}

uint64_t sub_18A71A810()
{
  return 1;
}

void sub_18A71A8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A71A8FC(uint64_t *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  char v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  NSObject *v76;
  NSObject *v77;
  objc_class *v78;
  void *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  id obj;
  uint8_t buf[4];
  void *v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  void *v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v5 = *(id *)(a1[4] + 80);
  v6 = (_QWORD *)a1[4];
  v7 = v6[18];
  if (v7)
  {
    if (!v6[17])
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v2, v3, v4);
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v86, v87, a1[6], a1[4], CFSTR("CKSQLite.m"), 423, CFSTR("Missing handle for open cache db"));

      v6 = (_QWORD *)a1[4];
      v7 = v6[18];
    }
    v8 = 0;
    v6[18] = v7 + 1;
    goto LABEL_14;
  }
  if (objc_msgSend_invalid(v6, v2, v3, v4))
  {
    v12 = (objc_class *)objc_opt_class();
    NSStringFromClass(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v14, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Cannot reopen invalidated %@ instance"), v13);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1[5] + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    v8 = 0;
LABEL_14:

    return;
  }
  objc_msgSend_stringByDeletingLastPathComponent(*(void **)(a1[4] + 80), v9, v10, v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isCorrupt((void *)a1[4], v18, v19, v20))
  {
    objc_msgSend_CKSanitizedPath(v8, v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v25, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Database is corrupt: %@"), v24);
LABEL_13:
    v43 = objc_claimAutoreleasedReturnValue();
    v44 = *(_QWORD *)(a1[5] + 8);
    v45 = *(void **)(v44 + 40);
    *(_QWORD *)(v44 + 40) = v43;

    goto LABEL_14;
  }
  v26 = *(_QWORD *)(a1[5] + 8);
  obj = *(id *)(v26 + 40);
  v27 = CKCreateDirectoryAtPathWithAttributes(v8, 0, &obj);
  objc_storeStrong((id *)(v26 + 40), obj);
  if ((v27 & 1) == 0)
  {
    objc_msgSend_CKSanitizedPath(v8, v28, v29, v30);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v42, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Error creating db dir at %@: %@"), v24, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40));
    goto LABEL_13;
  }
  v31 = (const char *)objc_msgSend_fileSystemRepresentation(v5, v28, v29, v30);
  v32 = sqlite3_open_v2(v31, (sqlite3 **)(a1[4] + 136), 3145734, 0);
  if ((_DWORD)v32)
  {
    v36 = v32;
    objc_msgSend_CKSanitizedPath(*(void **)(a1[4] + 80), v33, v34, v35);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v38, (uint64_t)CFSTR("CKErrorDomain"), 1, CFSTR("Error opening db at %@, rc=%d(0x%x)"), v37, v36, v36);
    v39 = objc_claimAutoreleasedReturnValue();
    v40 = *(_QWORD *)(a1[5] + 8);
    v41 = *(void **)(v40 + 40);
    *(_QWORD *)(v40 + 40) = v39;

    goto LABEL_14;
  }
  sqlite3_extended_result_codes(*(sqlite3 **)(a1[4] + 136), 1);
  if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) && sqlite3_busy_timeout(*(sqlite3 **)(a1[4] + 136), 300000))
  {
    objc_msgSend_errorForSQLite_message_(CKPrettyError, v46, *(_QWORD *)(a1[4] + 136), (uint64_t)CFSTR("Error setting the db busy timeout"));
    v49 = objc_claimAutoreleasedReturnValue();
    v50 = *(_QWORD *)(a1[5] + 8);
    v51 = *(void **)(v50 + 40);
    *(_QWORD *)(v50 + 40) = v49;

  }
  if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)
    && sqlite3_exec(*(sqlite3 **)(a1[4] + 136), "pragma journal_mode = WAL", 0, 0, 0))
  {
    objc_msgSend_errorForSQLite_message_(CKPrettyError, v46, *(_QWORD *)(a1[4] + 136), (uint64_t)CFSTR("Error setting pragma journal_mode = WAL"));
    v52 = objc_claimAutoreleasedReturnValue();
    v53 = *(_QWORD *)(a1[5] + 8);
    v54 = *(void **)(v53 + 40);
    *(_QWORD *)(v53 + 40) = v52;

  }
  v55 = objc_msgSend_synchronousMode((void *)a1[4], v46, v47, v48);
  if (v55 < 3)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      v59 = off_1E1F62D98[v55];
      if (sqlite3_exec(*(sqlite3 **)(a1[4] + 136), v59, 0, 0, 0))
      {
        objc_msgSend_errorForSQLite_message_(CKPrettyError, v56, *(_QWORD *)(a1[4] + 136), (uint64_t)CFSTR("Error setting %s"), v59);
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = *(_QWORD *)(a1[5] + 8);
        v62 = *(void **)(v61 + 40);
        *(_QWORD *)(v61 + 40) = v60;

      }
    }
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)
      && sqlite3_exec(*(sqlite3 **)(a1[4] + 136), "pragma auto_vacuum = FULL", 0, 0, 0))
    {
      objc_msgSend_errorForSQLite_message_(CKPrettyError, v56, *(_QWORD *)(a1[4] + 136), (uint64_t)CFSTR("Error setting pragma auto_vacuum = FULL"));
      v63 = objc_claimAutoreleasedReturnValue();
      v64 = *(_QWORD *)(a1[5] + 8);
      v65 = *(void **)(v64 + 40);
      *(_QWORD *)(v64 + 40) = v63;

    }
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)
      && sqlite3_exec(*(sqlite3 **)(a1[4] + 136), "pragma foreign_keys = 1", 0, 0, 0))
    {
      objc_msgSend_errorForSQLite_message_(CKPrettyError, v56, *(_QWORD *)(a1[4] + 136), (uint64_t)CFSTR("Error setting pragma foreign_keys = 1"));
      v66 = objc_claimAutoreleasedReturnValue();
      v67 = *(_QWORD *)(a1[5] + 8);
      v68 = *(void **)(v67 + 40);
      *(_QWORD *)(v67 + 40) = v66;

    }
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)
      || (objc_msgSend__prepareDatabase((void *)a1[4], v56, v57, v58),
          v69 = objc_claimAutoreleasedReturnValue(),
          v70 = *(_QWORD *)(a1[5] + 8),
          v71 = *(void **)(v70 + 40),
          *(_QWORD *)(v70 + 40) = v69,
          v71,
          *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)))
    {
      objc_msgSend__forceClosed_locked((void *)a1[4], v56, v57, v58);
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v72 = (void *)ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_ERROR))
      {
        v77 = v72;
        v78 = (objc_class *)objc_opt_class();
        NSStringFromClass(v78);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = a1[4];
        objc_msgSend_CKSanitizedPath(*(void **)(v80 + 80), v81, v82, v83);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        v85 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
        *(_DWORD *)buf = 138413058;
        v90 = v79;
        v91 = 2048;
        v92 = v80;
        v93 = 2112;
        v94 = v84;
        v95 = 2112;
        v96 = v85;
        _os_log_error_impl(&dword_18A5C5000, v77, OS_LOG_TYPE_ERROR, "Failed to open db %@<%p> at %@. Error: %@", buf, 0x2Au);

      }
    }
    if (objc_msgSend_shouldVacuum((void *)a1[4], v56, v57, v58)
      && !*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40)
      && _sqlite3_maintain_load_factor())
    {
      objc_msgSend_sqlErrorWithMessage_((void *)a1[4], v73, (uint64_t)CFSTR("_sqlite3_maintain_load_factor failed"), v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      if (ck_log_initialization_predicate != -1)
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      v76 = ck_log_facility_sql;
      if (os_log_type_enabled((os_log_t)ck_log_facility_sql, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        v90 = v75;
        _os_log_fault_impl(&dword_18A5C5000, v76, OS_LOG_TYPE_FAULT, "Failed to enable automatic incremental vacuum: %{public}@", buf, 0xCu);
      }

    }
    goto LABEL_14;
  }
  __break(1u);
}

